
Microphone_wav_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  08010ac0  08010ac0  00011ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112e8  080112e8  00013214  2**0
                  CONTENTS
  4 .ARM          00000008  080112e8  080112e8  000122e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080112f0  080112f0  00013214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080112f0  080112f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080112f4  080112f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  080112f8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005560  20000214  0801150c  00013214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005774  0801150c  00013774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c695  00000000  00000000  00013244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045bf  00000000  00000000  0002f8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  00033e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000123e  00000000  00000000  00035658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac50  00000000  00000000  00036896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000215c6  00000000  00000000  000614e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5a5a  00000000  00000000  00082aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00178506  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070a4  00000000  00000000  0017854c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0017f5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000214 	.word	0x20000214
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010aa4 	.word	0x08010aa4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000218 	.word	0x20000218
 800020c:	08010aa4 	.word	0x08010aa4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_DMA_Init+0x58>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a13      	ldr	r2, [pc, #76]	@ (8000f30 <MX_DMA_Init+0x58>)
 8000ee4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <MX_DMA_Init+0x58>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2039      	movs	r0, #57	@ 0x39
 8000efc:	f003 fa3f 	bl	800437e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f00:	2039      	movs	r0, #57	@ 0x39
 8000f02:	f003 fa58 	bl	80043b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2102      	movs	r1, #2
 8000f0a:	203b      	movs	r0, #59	@ 0x3b
 8000f0c:	f003 fa37 	bl	800437e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f10:	203b      	movs	r0, #59	@ 0x3b
 8000f12:	f003 fa50 	bl	80043b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 2, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2102      	movs	r1, #2
 8000f1a:	2045      	movs	r0, #69	@ 0x45
 8000f1c:	f003 fa2f 	bl	800437e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f20:	2045      	movs	r0, #69	@ 0x45
 8000f22:	f003 fa48 	bl	80043b6 <HAL_NVIC_EnableIRQ>

}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b090      	sub	sp, #64	@ 0x40
 8000f38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4a:	4ba6      	ldr	r3, [pc, #664]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4aa5      	ldr	r2, [pc, #660]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4ba3      	ldr	r3, [pc, #652]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f62:	4ba0      	ldr	r3, [pc, #640]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a9f      	ldr	r2, [pc, #636]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b9d      	ldr	r3, [pc, #628]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b9a      	ldr	r3, [pc, #616]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a99      	ldr	r2, [pc, #612]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b97      	ldr	r3, [pc, #604]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	623b      	str	r3, [r7, #32]
 8000f90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f92:	4b94      	ldr	r3, [pc, #592]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a93      	ldr	r2, [pc, #588]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b91      	ldr	r3, [pc, #580]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	4b8e      	ldr	r3, [pc, #568]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a8d      	ldr	r2, [pc, #564]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b8b      	ldr	r3, [pc, #556]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b88      	ldr	r3, [pc, #544]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a87      	ldr	r2, [pc, #540]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b85      	ldr	r3, [pc, #532]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fda:	4b82      	ldr	r3, [pc, #520]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a81      	ldr	r2, [pc, #516]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fe0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b7f      	ldr	r3, [pc, #508]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a7b      	ldr	r2, [pc, #492]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b79      	ldr	r3, [pc, #484]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800100a:	4b76      	ldr	r3, [pc, #472]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a75      	ldr	r2, [pc, #468]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001010:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b73      	ldr	r3, [pc, #460]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001022:	4b70      	ldr	r3, [pc, #448]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a6f      	ldr	r2, [pc, #444]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001028:	f043 0320 	orr.w	r3, r3, #32
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b6d      	ldr	r3, [pc, #436]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0320 	and.w	r3, r3, #32
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103a:	4b6a      	ldr	r3, [pc, #424]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a69      	ldr	r2, [pc, #420]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b67      	ldr	r3, [pc, #412]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2102      	movs	r1, #2
 8001056:	4864      	ldr	r0, [pc, #400]	@ (80011e8 <MX_GPIO_Init+0x2b4>)
 8001058:	f004 f90c 	bl	8005274 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE8 PE9 PE11 PE14
                           PE7 PE10 PE12 PE15
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 800105c:	f64f 738f 	movw	r3, #65423	@ 0xff8f
 8001060:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001062:	2303      	movs	r3, #3
 8001064:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800106a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800106e:	4619      	mov	r1, r3
 8001070:	485e      	ldr	r0, [pc, #376]	@ (80011ec <MX_GPIO_Init+0x2b8>)
 8001072:	f003 fe2f 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 8001076:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800107a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107c:	2303      	movs	r3, #3
 800107e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001084:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001088:	4619      	mov	r1, r3
 800108a:	4859      	ldr	r0, [pc, #356]	@ (80011f0 <MX_GPIO_Init+0x2bc>)
 800108c:	f003 fe22 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001090:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8001094:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001096:	2303      	movs	r3, #3
 8001098:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a2:	4619      	mov	r1, r3
 80010a4:	4853      	ldr	r0, [pc, #332]	@ (80011f4 <MX_GPIO_Init+0x2c0>)
 80010a6:	f003 fe15 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD15
                           PD10 PD14 PD9 PD8
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 80010aa:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b0:	2303      	movs	r3, #3
 80010b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010bc:	4619      	mov	r1, r3
 80010be:	484e      	ldr	r0, [pc, #312]	@ (80011f8 <MX_GPIO_Init+0x2c4>)
 80010c0:	f003 fe08 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 80010c4:	f649 53ff 	movw	r3, #40447	@ 0x9dff
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ca:	2303      	movs	r3, #3
 80010cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d6:	4619      	mov	r1, r3
 80010d8:	4848      	ldr	r0, [pc, #288]	@ (80011fc <MX_GPIO_Init+0x2c8>)
 80010da:	f003 fdfb 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80010de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e4:	2303      	movs	r3, #3
 80010e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f0:	4619      	mov	r1, r3
 80010f2:	4843      	ldr	r0, [pc, #268]	@ (8001200 <MX_GPIO_Init+0x2cc>)
 80010f4:	f003 fdee 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC9 PC7 PC6 PC3
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 80010f8:	f64c 63ff 	movw	r3, #52991	@ 0xceff
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fe:	2303      	movs	r3, #3
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001106:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800110a:	4619      	mov	r1, r3
 800110c:	483d      	ldr	r0, [pc, #244]	@ (8001204 <MX_GPIO_Init+0x2d0>)
 800110e:	f003 fde1 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI12 PI9 PI0 PI13
                           PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001112:	f24f 73fd 	movw	r3, #63485	@ 0xf7fd
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_13
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001118:	2303      	movs	r3, #3
 800111a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001120:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001124:	4619      	mov	r1, r3
 8001126:	4830      	ldr	r0, [pc, #192]	@ (80011e8 <MX_GPIO_Init+0x2b4>)
 8001128:	f003 fdd4 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800112c:	23ff      	movs	r3, #255	@ 0xff
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001130:	2303      	movs	r3, #3
 8001132:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001138:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800113c:	4619      	mov	r1, r3
 800113e:	4832      	ldr	r0, [pc, #200]	@ (8001208 <MX_GPIO_Init+0x2d4>)
 8001140:	f003 fdc8 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001144:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001156:	4619      	mov	r1, r3
 8001158:	482a      	ldr	r0, [pc, #168]	@ (8001204 <MX_GPIO_Init+0x2d0>)
 800115a:	f003 fdbb 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800115e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001162:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001164:	2303      	movs	r3, #3
 8001166:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800116c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001170:	4619      	mov	r1, r3
 8001172:	4826      	ldr	r0, [pc, #152]	@ (800120c <MX_GPIO_Init+0x2d8>)
 8001174:	f003 fdae 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8001178:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800117c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001186:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800118a:	4619      	mov	r1, r3
 800118c:	4820      	ldr	r0, [pc, #128]	@ (8001210 <MX_GPIO_Init+0x2dc>)
 800118e:	f003 fda1 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001192:	2302      	movs	r3, #2
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a6:	4619      	mov	r1, r3
 80011a8:	480f      	ldr	r0, [pc, #60]	@ (80011e8 <MX_GPIO_Init+0x2b4>)
 80011aa:	f003 fd93 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80011ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	4808      	ldr	r0, [pc, #32]	@ (80011e8 <MX_GPIO_Init+0x2b4>)
 80011c6:	f003 fd85 	bl	8004cd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2028      	movs	r0, #40	@ 0x28
 80011d0:	f003 f8d5 	bl	800437e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011d4:	2028      	movs	r0, #40	@ 0x28
 80011d6:	f003 f8ee 	bl	80043b6 <HAL_NVIC_EnableIRQ>

}
 80011da:	bf00      	nop
 80011dc:	3740      	adds	r7, #64	@ 0x40
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40022000 	.word	0x40022000
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40021800 	.word	0x40021800
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	40020000 	.word	0x40020000
 8001200:	40022400 	.word	0x40022400
 8001204:	40020800 	.word	0x40020800
 8001208:	40022800 	.word	0x40022800
 800120c:	40021400 	.word	0x40021400
 8001210:	40021c00 	.word	0x40021c00

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001218:	f002 ff54 	bl	80040c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121c:	f000 f860 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001220:	f7ff fe88 	bl	8000f34 <MX_GPIO_Init>
  MX_DMA_Init();
 8001224:	f7ff fe58 	bl	8000ed8 <MX_DMA_Init>
  MX_SAI1_Init();
 8001228:	f000 fa20 	bl	800166c <MX_SAI1_Init>
  MX_USART1_UART_Init();
 800122c:	f000 fdd8 	bl	8001de0 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001230:	f009 fbce 	bl	800a9d0 <MX_FATFS_Init>
  MX_SDMMC1_SD_Init();
 8001234:	f000 fb3e 	bl	80018b4 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */

  /* We format the SD card */
  printf("SD card init...\r\n");
 8001238:	4821      	ldr	r0, [pc, #132]	@ (80012c0 <main+0xac>)
 800123a:	f00d fcc5 	bl	800ebc8 <puts>
  SDCard_InitAndFormat();
 800123e:	f000 f8fd 	bl	800143c <SDCard_InitAndFormat>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Standby : waiting for the button to be pressed to start recording */
	  check_button_release();
 8001242:	f000 f8e7 	bl	8001414 <check_button_release>
	  printf("Waiting for input to record...\r\n");
 8001246:	481f      	ldr	r0, [pc, #124]	@ (80012c4 <main+0xb0>)
 8001248:	f00d fcbe 	bl	800ebc8 <puts>
	  HAL_Delay(1000);
 800124c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001250:	f002 ff96 	bl	8004180 <HAL_Delay>

	  if (button_pressed == 1)
 8001254:	4b1c      	ldr	r3, [pc, #112]	@ (80012c8 <main+0xb4>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d1f1      	bne.n	8001242 <main+0x2e>
	  {
		  /* Toggle the green led to visually show action */
		  HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 800125e:	2102      	movs	r1, #2
 8001260:	481a      	ldr	r0, [pc, #104]	@ (80012cc <main+0xb8>)
 8001262:	f004 f820 	bl	80052a6 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8001266:	2064      	movs	r0, #100	@ 0x64
 8001268:	f002 ff8a 	bl	8004180 <HAL_Delay>
		  HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 800126c:	2102      	movs	r1, #2
 800126e:	4817      	ldr	r0, [pc, #92]	@ (80012cc <main+0xb8>)
 8001270:	f004 f819 	bl	80052a6 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8001274:	2064      	movs	r0, #100	@ 0x64
 8001276:	f002 ff83 	bl	8004180 <HAL_Delay>

		  /* If the program is not already recording... */
		  if(AudioState == AUDIO_STATE_IDLE)
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <main+0xbc>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d108      	bne.n	8001294 <main+0x80>
		  {
		    /* Configure the audio recorder: sampling frequency, bits-depth, number of channels */
		    AUDIO_REC_Start();
 8001282:	f009 f839 	bl	800a2f8 <AUDIO_REC_Start>
		  }

		  /* While recording, we loop the recording process */
		  while(AudioState == AUDIO_STATE_RECORD)
 8001286:	e005      	b.n	8001294 <main+0x80>
		  {
		    status = AUDIO_REC_Process();
 8001288:	f009 f8bc 	bl	800a404 <AUDIO_REC_Process>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <main+0xc0>)
 8001292:	701a      	strb	r2, [r3, #0]
		  while(AudioState == AUDIO_STATE_RECORD)
 8001294:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <main+0xbc>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b05      	cmp	r3, #5
 800129a:	d0f5      	beq.n	8001288 <main+0x74>
		  }

		  /* Once we stop recording, we correctly close the .WAV */
		  if (AudioState == AUDIO_STATE_STOP)
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <main+0xbc>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b0a      	cmp	r3, #10
 80012a2:	d108      	bne.n	80012b6 <main+0xa2>
		  {
			status = AUDIO_REC_Process();
 80012a4:	f009 f8ae 	bl	800a404 <AUDIO_REC_Process>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <main+0xc0>)
 80012ae:	701a      	strb	r2, [r3, #0]
		    printf("Recording stopped.\r\n");
 80012b0:	4809      	ldr	r0, [pc, #36]	@ (80012d8 <main+0xc4>)
 80012b2:	f00d fc89 	bl	800ebc8 <puts>
		  }

		  ReadWAVFileInfo("WAVE.wav");
 80012b6:	4809      	ldr	r0, [pc, #36]	@ (80012dc <main+0xc8>)
 80012b8:	f000 f910 	bl	80014dc <ReadWAVFileInfo>
  {
 80012bc:	e7c1      	b.n	8001242 <main+0x2e>
 80012be:	bf00      	nop
 80012c0:	08010ac0 	.word	0x08010ac0
 80012c4:	08010ad4 	.word	0x08010ad4
 80012c8:	20000434 	.word	0x20000434
 80012cc:	40022000 	.word	0x40022000
 80012d0:	20000230 	.word	0x20000230
 80012d4:	20000231 	.word	0x20000231
 80012d8:	08010af4 	.word	0x08010af4
 80012dc:	08010b08 	.word	0x08010b08

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b094      	sub	sp, #80	@ 0x50
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	2230      	movs	r2, #48	@ 0x30
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00d fd4a 	bl	800ed88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	4a29      	ldr	r2, [pc, #164]	@ (80013b0 <SystemClock_Config+0xd0>)
 800130a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800130e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001310:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800131c:	4b25      	ldr	r3, [pc, #148]	@ (80013b4 <SystemClock_Config+0xd4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a24      	ldr	r2, [pc, #144]	@ (80013b4 <SystemClock_Config+0xd4>)
 8001322:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b22      	ldr	r3, [pc, #136]	@ (80013b4 <SystemClock_Config+0xd4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001334:	2302      	movs	r3, #2
 8001336:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001338:	2301      	movs	r3, #1
 800133a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800133c:	2310      	movs	r3, #16
 800133e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001340:	2302      	movs	r3, #2
 8001342:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001344:	2300      	movs	r3, #0
 8001346:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001348:	2308      	movs	r3, #8
 800134a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 800134c:	23c8      	movs	r3, #200	@ 0xc8
 800134e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001350:	2302      	movs	r3, #2
 8001352:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001354:	2308      	movs	r3, #8
 8001356:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	4618      	mov	r0, r3
 800135e:	f004 fe03 	bl	8005f68 <HAL_RCC_OscConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001368:	f000 f97a 	bl	8001660 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800136c:	f004 fdac 	bl	8005ec8 <HAL_PWREx_EnableOverDrive>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001376:	f000 f973 	bl	8001660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137a:	230f      	movs	r3, #15
 800137c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137e:	2302      	movs	r3, #2
 8001380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001386:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800138a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800138c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001390:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	2106      	movs	r1, #6
 8001398:	4618      	mov	r0, r3
 800139a:	f005 f889 	bl	80064b0 <HAL_RCC_ClockConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80013a4:	f000 f95c 	bl	8001660 <Error_Handler>
  }
}
 80013a8:	bf00      	nop
 80013aa:	3750      	adds	r7, #80	@ 0x50
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* Needed to send messages easier to terminal for debugging */
PUTCHAR_PROTOTYPE
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 80013c0:	1d39      	adds	r1, r7, #4
 80013c2:	2364      	movs	r3, #100	@ 0x64
 80013c4:	2201      	movs	r2, #1
 80013c6:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <__io_putchar+0x20>)
 80013c8:	f007 fdac 	bl	8008f24 <HAL_UART_Transmit>
return ch;
 80013cc:	687b      	ldr	r3, [r7, #4]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000668 	.word	0x20000668

080013dc <HAL_GPIO_EXTI_Callback>:
/* ======================================================== */


/* User button interruption and variable change */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if (GPIO_Pin == USR_BTN_Pin && button_pressed == 0)
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80013ec:	d10a      	bne.n	8001404 <HAL_GPIO_EXTI_Callback+0x28>
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <HAL_GPIO_EXTI_Callback+0x30>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d105      	bne.n	8001404 <HAL_GPIO_EXTI_Callback+0x28>
      {
	  	  button_pressed = 1;
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <HAL_GPIO_EXTI_Callback+0x30>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
	  	  printf("Button pressed...\r\n");
 80013fe:	4804      	ldr	r0, [pc, #16]	@ (8001410 <HAL_GPIO_EXTI_Callback+0x34>)
 8001400:	f00d fbe2 	bl	800ebc8 <puts>
      }
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000434 	.word	0x20000434
 8001410:	08010b14 	.word	0x08010b14

08001414 <check_button_release>:
/* ======================================================== */


/* Used to verify the state of the button */
void check_button_release()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOI, USR_BTN_Pin) == GPIO_PIN_RESET) button_pressed = 0;
 8001418:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800141c:	4805      	ldr	r0, [pc, #20]	@ (8001434 <check_button_release+0x20>)
 800141e:	f003 ff11 	bl	8005244 <HAL_GPIO_ReadPin>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <check_button_release+0x1a>
 8001428:	4b03      	ldr	r3, [pc, #12]	@ (8001438 <check_button_release+0x24>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40022000 	.word	0x40022000
 8001438:	20000434 	.word	0x20000434

0800143c <SDCard_InitAndFormat>:
/* ======================================================== */


/* Used to initialize the SD card */
void SDCard_InitAndFormat(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af02      	add	r7, sp, #8
    FRESULT res;

    // Mount the file system
    res = f_mount(&SDFatFS, (TCHAR const *)SDPath, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	491e      	ldr	r1, [pc, #120]	@ (80014c0 <SDCard_InitAndFormat+0x84>)
 8001446:	481f      	ldr	r0, [pc, #124]	@ (80014c4 <SDCard_InitAndFormat+0x88>)
 8001448:	f00b fa50 	bl	800c8ec <f_mount>
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d006      	beq.n	8001464 <SDCard_InitAndFormat+0x28>
        printf("Error: Failed to mount SD card (Code: %d).\r\n", res);
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	4619      	mov	r1, r3
 800145a:	481b      	ldr	r0, [pc, #108]	@ (80014c8 <SDCard_InitAndFormat+0x8c>)
 800145c:	f00d fb4c 	bl	800eaf8 <iprintf>
        Error_Handler();
 8001460:	f000 f8fe 	bl	8001660 <Error_Handler>
    }

    // Format the SD card
    res = f_mkfs((TCHAR const *)SDPath, FM_ANY, 0, workBuffer_init, sizeof(workBuffer_init));
 8001464:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <SDCard_InitAndFormat+0x90>)
 800146c:	2200      	movs	r2, #0
 800146e:	2107      	movs	r1, #7
 8001470:	4813      	ldr	r0, [pc, #76]	@ (80014c0 <SDCard_InitAndFormat+0x84>)
 8001472:	f00c f9a1 	bl	800d7b8 <f_mkfs>
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d006      	beq.n	800148e <SDCard_InitAndFormat+0x52>
        printf("Error: Failed to format SD card (Code: %d).\r\n", res);
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	4619      	mov	r1, r3
 8001484:	4812      	ldr	r0, [pc, #72]	@ (80014d0 <SDCard_InitAndFormat+0x94>)
 8001486:	f00d fb37 	bl	800eaf8 <iprintf>
        Error_Handler();
 800148a:	f000 f8e9 	bl	8001660 <Error_Handler>
    }

    // Unmount the file system to complete formatting
    res = f_mount(NULL, (TCHAR const *)SDPath, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	490b      	ldr	r1, [pc, #44]	@ (80014c0 <SDCard_InitAndFormat+0x84>)
 8001492:	2000      	movs	r0, #0
 8001494:	f00b fa2a 	bl	800c8ec <f_mount>
 8001498:	4603      	mov	r3, r0
 800149a:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <SDCard_InitAndFormat+0x74>
        printf("Error: Failed to unmount SD card after formatting (Code: %d).\r\n", res);
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4619      	mov	r1, r3
 80014a6:	480b      	ldr	r0, [pc, #44]	@ (80014d4 <SDCard_InitAndFormat+0x98>)
 80014a8:	f00d fb26 	bl	800eaf8 <iprintf>
        Error_Handler();
 80014ac:	f000 f8d8 	bl	8001660 <Error_Handler>
    }



    printf("SD card initialized and formatted successfully.\r\n");
 80014b0:	4809      	ldr	r0, [pc, #36]	@ (80014d8 <SDCard_InitAndFormat+0x9c>)
 80014b2:	f00d fb89 	bl	800ebc8 <puts>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200053b8 	.word	0x200053b8
 80014c4:	200053bc 	.word	0x200053bc
 80014c8:	08010b28 	.word	0x08010b28
 80014cc:	20000234 	.word	0x20000234
 80014d0:	08010b58 	.word	0x08010b58
 80014d4:	08010b88 	.word	0x08010b88
 80014d8:	08010bc8 	.word	0x08010bc8

080014dc <ReadWAVFileInfo>:
}
/* ======================================================== */


/* Debug function : reads the characteristics of a .wav file in the SD card */
void ReadWAVFileInfo(const char *filename) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80014e8:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80014ec:	6018      	str	r0, [r3, #0]
    WAV_Header header;      // WAV file header
    UINT bytesRead;         // Number of bytes read
    FRESULT res;

    // Open the WAV file
    res = f_open(&file, filename, FA_READ);
 80014ee:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80014f2:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80014f6:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80014fa:	2201      	movs	r2, #1
 80014fc:	6819      	ldr	r1, [r3, #0]
 80014fe:	f00b fa3b 	bl	800c978 <f_open>
 8001502:	4603      	mov	r3, r0
 8001504:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if (res != FR_OK) {
 8001508:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00a      	beq.n	8001526 <ReadWAVFileInfo+0x4a>
        printf("Error: Failed to open file '%s' (Code: %d).\n", filename, res);
 8001510:	f897 226f 	ldrb.w	r2, [r7, #623]	@ 0x26f
 8001514:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001518:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 800151c:	6819      	ldr	r1, [r3, #0]
 800151e:	4843      	ldr	r0, [pc, #268]	@ (800162c <ReadWAVFileInfo+0x150>)
 8001520:	f00d faea 	bl	800eaf8 <iprintf>
        return;
 8001524:	e07d      	b.n	8001622 <ReadWAVFileInfo+0x146>
    }

    // Read the WAV file header
    res = f_read(&file, &header, sizeof(WAV_Header), &bytesRead);
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	f107 0110 	add.w	r1, r7, #16
 800152e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001532:	222c      	movs	r2, #44	@ 0x2c
 8001534:	f00b fbda 	bl	800ccec <f_read>
 8001538:	4603      	mov	r3, r0
 800153a:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if (res != FR_OK || bytesRead != sizeof(WAV_Header)) {
 800153e:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8001542:	2b00      	cmp	r3, #0
 8001544:	d106      	bne.n	8001554 <ReadWAVFileInfo+0x78>
 8001546:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800154a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b2c      	cmp	r3, #44	@ 0x2c
 8001552:	d00b      	beq.n	800156c <ReadWAVFileInfo+0x90>
        printf("Error: Failed to read WAV file header (Code: %d).\n", res);
 8001554:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8001558:	4619      	mov	r1, r3
 800155a:	4835      	ldr	r0, [pc, #212]	@ (8001630 <ReadWAVFileInfo+0x154>)
 800155c:	f00d facc 	bl	800eaf8 <iprintf>
        f_close(&file);
 8001560:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001564:	4618      	mov	r0, r3
 8001566:	f00b fef3 	bl	800d350 <f_close>
        return;
 800156a:	e05a      	b.n	8001622 <ReadWAVFileInfo+0x146>
    }

    // Print WAV file information
    printf("WAV File Info:\r\n");
 800156c:	4831      	ldr	r0, [pc, #196]	@ (8001634 <ReadWAVFileInfo+0x158>)
 800156e:	f00d fb2b 	bl	800ebc8 <puts>
    printf("  ChunkID: %.4s\r\n", header.ChunkID);
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4619      	mov	r1, r3
 8001578:	482f      	ldr	r0, [pc, #188]	@ (8001638 <ReadWAVFileInfo+0x15c>)
 800157a:	f00d fabd 	bl	800eaf8 <iprintf>
    printf("  Format: %.4s\r\n", header.Format);
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	3308      	adds	r3, #8
 8001584:	4619      	mov	r1, r3
 8001586:	482d      	ldr	r0, [pc, #180]	@ (800163c <ReadWAVFileInfo+0x160>)
 8001588:	f00d fab6 	bl	800eaf8 <iprintf>
    printf("  Audio Format: %d\r\n", header.AudioFormat);
 800158c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001590:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001594:	8a9b      	ldrh	r3, [r3, #20]
 8001596:	4619      	mov	r1, r3
 8001598:	4829      	ldr	r0, [pc, #164]	@ (8001640 <ReadWAVFileInfo+0x164>)
 800159a:	f00d faad 	bl	800eaf8 <iprintf>
    printf("  Number of Channels: %d\r\n", header.NumChannels);
 800159e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80015a2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80015a6:	8adb      	ldrh	r3, [r3, #22]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4826      	ldr	r0, [pc, #152]	@ (8001644 <ReadWAVFileInfo+0x168>)
 80015ac:	f00d faa4 	bl	800eaf8 <iprintf>
    printf("  Sample Rate: %d Hz\r\n", header.SampleRate);
 80015b0:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80015b4:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	4619      	mov	r1, r3
 80015bc:	4822      	ldr	r0, [pc, #136]	@ (8001648 <ReadWAVFileInfo+0x16c>)
 80015be:	f00d fa9b 	bl	800eaf8 <iprintf>
    printf("  Byte Rate: %d\r\n", header.ByteRate);
 80015c2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80015c6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	4619      	mov	r1, r3
 80015ce:	481f      	ldr	r0, [pc, #124]	@ (800164c <ReadWAVFileInfo+0x170>)
 80015d0:	f00d fa92 	bl	800eaf8 <iprintf>
    printf("  Block Align: %d\r\n", header.BlockAlign);
 80015d4:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80015d8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80015dc:	8c1b      	ldrh	r3, [r3, #32]
 80015de:	4619      	mov	r1, r3
 80015e0:	481b      	ldr	r0, [pc, #108]	@ (8001650 <ReadWAVFileInfo+0x174>)
 80015e2:	f00d fa89 	bl	800eaf8 <iprintf>
    printf("  Bits Per Sample: %d\r\n", header.BitsPerSample);
 80015e6:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80015ea:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80015ee:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80015f0:	4619      	mov	r1, r3
 80015f2:	4818      	ldr	r0, [pc, #96]	@ (8001654 <ReadWAVFileInfo+0x178>)
 80015f4:	f00d fa80 	bl	800eaf8 <iprintf>
    printf("  Subchunk2ID: %.4s\r\n", header.Subchunk2ID);
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	3324      	adds	r3, #36	@ 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	4815      	ldr	r0, [pc, #84]	@ (8001658 <ReadWAVFileInfo+0x17c>)
 8001602:	f00d fa79 	bl	800eaf8 <iprintf>
    printf("  Subchunk2Size: %d bytes\r\n", header.Subchunk2Size);
 8001606:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800160a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001610:	4619      	mov	r1, r3
 8001612:	4812      	ldr	r0, [pc, #72]	@ (800165c <ReadWAVFileInfo+0x180>)
 8001614:	f00d fa70 	bl	800eaf8 <iprintf>

    // Close the file
    f_close(&file);
 8001618:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800161c:	4618      	mov	r0, r3
 800161e:	f00b fe97 	bl	800d350 <f_close>
}
 8001622:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	08010c10 	.word	0x08010c10
 8001630:	08010c40 	.word	0x08010c40
 8001634:	08010c74 	.word	0x08010c74
 8001638:	08010c84 	.word	0x08010c84
 800163c:	08010c98 	.word	0x08010c98
 8001640:	08010cac 	.word	0x08010cac
 8001644:	08010cc4 	.word	0x08010cc4
 8001648:	08010ce0 	.word	0x08010ce0
 800164c:	08010cf8 	.word	0x08010cf8
 8001650:	08010d0c 	.word	0x08010d0c
 8001654:	08010d20 	.word	0x08010d20
 8001658:	08010d38 	.word	0x08010d38
 800165c:	08010d50 	.word	0x08010d50

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <Error_Handler+0x8>

0800166c <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001670:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <MX_SAI1_Init+0xa4>)
 8001672:	4a28      	ldr	r2, [pc, #160]	@ (8001714 <MX_SAI1_Init+0xa8>)
 8001674:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001676:	4b26      	ldr	r3, [pc, #152]	@ (8001710 <MX_SAI1_Init+0xa4>)
 8001678:	2200      	movs	r2, #0
 800167a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 800167c:	4b24      	ldr	r3, [pc, #144]	@ (8001710 <MX_SAI1_Init+0xa4>)
 800167e:	2201      	movs	r2, #1
 8001680:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8001682:	4b23      	ldr	r3, [pc, #140]	@ (8001710 <MX_SAI1_Init+0xa4>)
 8001684:	2280      	movs	r2, #128	@ 0x80
 8001686:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001688:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <MX_SAI1_Init+0xa4>)
 800168a:	2200      	movs	r2, #0
 800168c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800168e:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <MX_SAI1_Init+0xa4>)
 8001690:	2200      	movs	r2, #0
 8001692:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001694:	4b1e      	ldr	r3, [pc, #120]	@ (8001710 <MX_SAI1_Init+0xa4>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800169a:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <MX_SAI1_Init+0xa4>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 80016ac:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016ae:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80016b2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80016b4:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80016ba:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80016c0:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 16;
 80016c6:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016c8:	2210      	movs	r2, #16
 80016ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80016cc:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80016d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80016d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80016de:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80016f0:	4b07      	ldr	r3, [pc, #28]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80016f6:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	@ (8001710 <MX_SAI1_Init+0xa4>)
 80016fe:	f005 fef9 	bl	80074f4 <HAL_SAI_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_SAI1_Init+0xa0>
  {
    Error_Handler();
 8001708:	f7ff ffaa 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000438 	.word	0x20000438
 8001714:	40015804 	.word	0x40015804

08001718 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b0aa      	sub	sp, #168	@ 0xa8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	2284      	movs	r2, #132	@ 0x84
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f00d fb2d 	bl	800ed88 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a41      	ldr	r2, [pc, #260]	@ (8001838 <HAL_SAI_MspInit+0x120>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d17b      	bne.n	8001830 <HAL_SAI_MspInit+0x118>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001738:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800173c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800173e:	2332      	movs	r3, #50	@ 0x32
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001742:	2302      	movs	r3, #2
 8001744:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001746:	2302      	movs	r3, #2
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800174a:	2300      	movs	r3, #0
 800174c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800174e:	2301      	movs	r3, #1
 8001750:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001752:	2300      	movs	r3, #0
 8001754:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001756:	2300      	movs	r3, #0
 8001758:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	4618      	mov	r0, r3
 8001760:	f005 f88c 	bl	800687c <HAL_RCCEx_PeriphCLKConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_SAI_MspInit+0x56>
    {
      Error_Handler();
 800176a:	f7ff ff79 	bl	8001660 <Error_Handler>
    }

    if (SAI1_client == 0)
 800176e:	4b33      	ldr	r3, [pc, #204]	@ (800183c <HAL_SAI_MspInit+0x124>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10b      	bne.n	800178e <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001776:	4b32      	ldr	r3, [pc, #200]	@ (8001840 <HAL_SAI_MspInit+0x128>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	4a31      	ldr	r2, [pc, #196]	@ (8001840 <HAL_SAI_MspInit+0x128>)
 800177c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001780:	6453      	str	r3, [r2, #68]	@ 0x44
 8001782:	4b2f      	ldr	r3, [pc, #188]	@ (8001840 <HAL_SAI_MspInit+0x128>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 800178e:	4b2b      	ldr	r3, [pc, #172]	@ (800183c <HAL_SAI_MspInit+0x124>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3301      	adds	r3, #1
 8001794:	4a29      	ldr	r2, [pc, #164]	@ (800183c <HAL_SAI_MspInit+0x124>)
 8001796:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001798:	2370      	movs	r3, #112	@ 0x70
 800179a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80017b0:	2306      	movs	r3, #6
 80017b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80017ba:	4619      	mov	r1, r3
 80017bc:	4821      	ldr	r0, [pc, #132]	@ (8001844 <HAL_SAI_MspInit+0x12c>)
 80017be:	f003 fa89 	bl	8004cd4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 80017c2:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <HAL_SAI_MspInit+0x130>)
 80017c4:	4a21      	ldr	r2, [pc, #132]	@ (800184c <HAL_SAI_MspInit+0x134>)
 80017c6:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 80017c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001848 <HAL_SAI_MspInit+0x130>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <HAL_SAI_MspInit+0x130>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001848 <HAL_SAI_MspInit+0x130>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80017da:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <HAL_SAI_MspInit+0x130>)
 80017dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017e0:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017e2:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <HAL_SAI_MspInit+0x130>)
 80017e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017e8:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ea:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <HAL_SAI_MspInit+0x130>)
 80017ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017f0:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <HAL_SAI_MspInit+0x130>)
 80017f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017f8:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <HAL_SAI_MspInit+0x130>)
 80017fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001800:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <HAL_SAI_MspInit+0x130>)
 8001804:	2200      	movs	r2, #0
 8001806:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001808:	480f      	ldr	r0, [pc, #60]	@ (8001848 <HAL_SAI_MspInit+0x130>)
 800180a:	f002 fdef 	bl	80043ec <HAL_DMA_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 8001814:	f7ff ff24 	bl	8001660 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a0b      	ldr	r2, [pc, #44]	@ (8001848 <HAL_SAI_MspInit+0x130>)
 800181c:	671a      	str	r2, [r3, #112]	@ 0x70
 800181e:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <HAL_SAI_MspInit+0x130>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a08      	ldr	r2, [pc, #32]	@ (8001848 <HAL_SAI_MspInit+0x130>)
 8001828:	66da      	str	r2, [r3, #108]	@ 0x6c
 800182a:	4a07      	ldr	r2, [pc, #28]	@ (8001848 <HAL_SAI_MspInit+0x130>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001830:	bf00      	nop
 8001832:	37a8      	adds	r7, #168	@ 0xa8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40015804 	.word	0x40015804
 800183c:	2000051c 	.word	0x2000051c
 8001840:	40023800 	.word	0x40023800
 8001844:	40021000 	.word	0x40021000
 8001848:	200004bc 	.word	0x200004bc
 800184c:	40026428 	.word	0x40026428

08001850 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a11      	ldr	r2, [pc, #68]	@ (80018a4 <HAL_SAI_MspDeInit+0x54>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d11c      	bne.n	800189c <HAL_SAI_MspDeInit+0x4c>
    {
    SAI1_client --;
 8001862:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <HAL_SAI_MspDeInit+0x58>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3b01      	subs	r3, #1
 8001868:	4a0f      	ldr	r2, [pc, #60]	@ (80018a8 <HAL_SAI_MspDeInit+0x58>)
 800186a:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 800186c:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <HAL_SAI_MspDeInit+0x58>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d105      	bne.n	8001880 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8001874:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <HAL_SAI_MspDeInit+0x5c>)
 8001876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001878:	4a0c      	ldr	r2, [pc, #48]	@ (80018ac <HAL_SAI_MspDeInit+0x5c>)
 800187a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800187e:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8001880:	2170      	movs	r1, #112	@ 0x70
 8001882:	480b      	ldr	r0, [pc, #44]	@ (80018b0 <HAL_SAI_MspDeInit+0x60>)
 8001884:	f003 fbd2 	bl	800502c <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800188c:	4618      	mov	r0, r3
 800188e:	f002 fe5b 	bl	8004548 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fe56 	bl	8004548 <HAL_DMA_DeInit>
    }
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40015804 	.word	0x40015804
 80018a8:	2000051c 	.word	0x2000051c
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40021000 	.word	0x40021000

080018b4 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <MX_SDMMC1_SD_Init+0x38>)
 80018ba:	4a0d      	ldr	r2, [pc, #52]	@ (80018f0 <MX_SDMMC1_SD_Init+0x3c>)
 80018bc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80018be:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <MX_SDMMC1_SD_Init+0x38>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80018c4:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <MX_SDMMC1_SD_Init+0x38>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80018ca:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <MX_SDMMC1_SD_Init+0x38>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <MX_SDMMC1_SD_Init+0x38>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80018d6:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <MX_SDMMC1_SD_Init+0x38>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <MX_SDMMC1_SD_Init+0x38>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	20000520 	.word	0x20000520
 80018f0:	40012c00 	.word	0x40012c00

080018f4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0ac      	sub	sp, #176	@ 0xb0
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	2284      	movs	r2, #132	@ 0x84
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f00d fa37 	bl	800ed88 <memset>
  if(sdHandle->Instance==SDMMC1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a74      	ldr	r2, [pc, #464]	@ (8001af0 <HAL_SD_MspInit+0x1fc>)
 8001920:	4293      	cmp	r3, r2
 8001922:	f040 80e0 	bne.w	8001ae6 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001926:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 800192a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001938:	f107 0318 	add.w	r3, r7, #24
 800193c:	4618      	mov	r0, r3
 800193e:	f004 ff9d 	bl	800687c <HAL_RCCEx_PeriphCLKConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001948:	f7ff fe8a 	bl	8001660 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800194c:	4b69      	ldr	r3, [pc, #420]	@ (8001af4 <HAL_SD_MspInit+0x200>)
 800194e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001950:	4a68      	ldr	r2, [pc, #416]	@ (8001af4 <HAL_SD_MspInit+0x200>)
 8001952:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001956:	6453      	str	r3, [r2, #68]	@ 0x44
 8001958:	4b66      	ldr	r3, [pc, #408]	@ (8001af4 <HAL_SD_MspInit+0x200>)
 800195a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001964:	4b63      	ldr	r3, [pc, #396]	@ (8001af4 <HAL_SD_MspInit+0x200>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001968:	4a62      	ldr	r2, [pc, #392]	@ (8001af4 <HAL_SD_MspInit+0x200>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001970:	4b60      	ldr	r3, [pc, #384]	@ (8001af4 <HAL_SD_MspInit+0x200>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800197c:	4b5d      	ldr	r3, [pc, #372]	@ (8001af4 <HAL_SD_MspInit+0x200>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001980:	4a5c      	ldr	r2, [pc, #368]	@ (8001af4 <HAL_SD_MspInit+0x200>)
 8001982:	f043 0308 	orr.w	r3, r3, #8
 8001986:	6313      	str	r3, [r2, #48]	@ 0x30
 8001988:	4b5a      	ldr	r3, [pc, #360]	@ (8001af4 <HAL_SD_MspInit+0x200>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8001994:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001998:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80019ae:	230c      	movs	r3, #12
 80019b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019b8:	4619      	mov	r1, r3
 80019ba:	484f      	ldr	r0, [pc, #316]	@ (8001af8 <HAL_SD_MspInit+0x204>)
 80019bc:	f003 f98a 	bl	8004cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019c0:	2304      	movs	r3, #4
 80019c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80019d8:	230c      	movs	r3, #12
 80019da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019de:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019e2:	4619      	mov	r1, r3
 80019e4:	4845      	ldr	r0, [pc, #276]	@ (8001afc <HAL_SD_MspInit+0x208>)
 80019e6:	f003 f975 	bl	8004cd4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80019ea:	4b45      	ldr	r3, [pc, #276]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 80019ec:	4a45      	ldr	r2, [pc, #276]	@ (8001b04 <HAL_SD_MspInit+0x210>)
 80019ee:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80019f0:	4b43      	ldr	r3, [pc, #268]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 80019f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019f6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019f8:	4b41      	ldr	r3, [pc, #260]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fe:	4b40      	ldr	r3, [pc, #256]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a04:	4b3e      	ldr	r3, [pc, #248]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 8001a06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a0a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 8001a0e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a12:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a14:	4b3a      	ldr	r3, [pc, #232]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 8001a16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a1a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001a1c:	4b38      	ldr	r3, [pc, #224]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 8001a1e:	2220      	movs	r2, #32
 8001a20:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a22:	4b37      	ldr	r3, [pc, #220]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a28:	4b35      	ldr	r3, [pc, #212]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a2e:	4b34      	ldr	r3, [pc, #208]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 8001a30:	2203      	movs	r2, #3
 8001a32:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001a34:	4b32      	ldr	r3, [pc, #200]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 8001a36:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001a3c:	4b30      	ldr	r3, [pc, #192]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 8001a3e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a42:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001a44:	482e      	ldr	r0, [pc, #184]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 8001a46:	f002 fcd1 	bl	80043ec <HAL_DMA_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001a50:	f7ff fe06 	bl	8001660 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a2a      	ldr	r2, [pc, #168]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 8001a58:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a5a:	4a29      	ldr	r2, [pc, #164]	@ (8001b00 <HAL_SD_MspInit+0x20c>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001a60:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001a62:	4a2a      	ldr	r2, [pc, #168]	@ (8001b0c <HAL_SD_MspInit+0x218>)
 8001a64:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001a66:	4b28      	ldr	r3, [pc, #160]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001a68:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a6c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a6e:	4b26      	ldr	r3, [pc, #152]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001a70:	2240      	movs	r2, #64	@ 0x40
 8001a72:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a74:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a7a:	4b23      	ldr	r3, [pc, #140]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001a7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a80:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a82:	4b21      	ldr	r3, [pc, #132]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001a84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a88:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001a8c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a90:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001a92:	4b1d      	ldr	r3, [pc, #116]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001a94:	2220      	movs	r2, #32
 8001a96:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001aaa:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001aac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001ab4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001ab8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001aba:	4813      	ldr	r0, [pc, #76]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001abc:	f002 fc96 	bl	80043ec <HAL_DMA_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001ac6:	f7ff fdcb 	bl	8001660 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a0e      	ldr	r2, [pc, #56]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001ace:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b08 <HAL_SD_MspInit+0x214>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 1, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2101      	movs	r1, #1
 8001ada:	2031      	movs	r0, #49	@ 0x31
 8001adc:	f002 fc4f 	bl	800437e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001ae0:	2031      	movs	r0, #49	@ 0x31
 8001ae2:	f002 fc68 	bl	80043b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	37b0      	adds	r7, #176	@ 0xb0
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40012c00 	.word	0x40012c00
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020800 	.word	0x40020800
 8001afc:	40020c00 	.word	0x40020c00
 8001b00:	200005a4 	.word	0x200005a4
 8001b04:	40026458 	.word	0x40026458
 8001b08:	20000604 	.word	0x20000604
 8001b0c:	400264a0 	.word	0x400264a0

08001b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <HAL_MspInit+0x44>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b54 <HAL_MspInit+0x44>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b22:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <HAL_MspInit+0x44>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <HAL_MspInit+0x44>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	4a08      	ldr	r2, [pc, #32]	@ (8001b54 <HAL_MspInit+0x44>)
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_MspInit+0x44>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <NMI_Handler+0x4>

08001b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <MemManage_Handler+0x4>

08001b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bae:	f002 fac7 	bl	8004140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001bba:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001bbe:	f003 fb8d 	bl	80052dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001bcc:	4802      	ldr	r0, [pc, #8]	@ (8001bd8 <SDMMC1_IRQHandler+0x10>)
 8001bce:	f006 fab3 	bl	8008138 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000520 	.word	0x20000520

08001bdc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001be0:	4802      	ldr	r0, [pc, #8]	@ (8001bec <DMA2_Stream1_IRQHandler+0x10>)
 8001be2:	f002 fe01 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200004bc 	.word	0x200004bc

08001bf0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001bf4:	4802      	ldr	r0, [pc, #8]	@ (8001c00 <DMA2_Stream3_IRQHandler+0x10>)
 8001bf6:	f002 fdf7 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200005a4 	.word	0x200005a4

08001c04 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <DMA2_Stream6_IRQHandler+0x10>)
 8001c0a:	f002 fded 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000604 	.word	0x20000604

08001c18 <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 Stream 7 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	//extern SAI_HandleTypeDef haudio_in_sai;
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001c1c:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <DMA2_Stream7_IRQHandler+0x14>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 fde1 	bl	80047e8 <HAL_DMA_IRQHandler>
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200007d4 	.word	0x200007d4

08001c30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return 1;
 8001c34:	2301      	movs	r3, #1
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_kill>:

int _kill(int pid, int sig)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c4a:	f00d f8ef 	bl	800ee2c <__errno>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2216      	movs	r2, #22
 8001c52:	601a      	str	r2, [r3, #0]
  return -1;
 8001c54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_exit>:

void _exit (int status)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ffe7 	bl	8001c40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c72:	bf00      	nop
 8001c74:	e7fd      	b.n	8001c72 <_exit+0x12>

08001c76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e00a      	b.n	8001c9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c88:	f3af 8000 	nop.w
 8001c8c:	4601      	mov	r1, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	60ba      	str	r2, [r7, #8]
 8001c94:	b2ca      	uxtb	r2, r1
 8001c96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	dbf0      	blt.n	8001c88 <_read+0x12>
  }

  return len;
 8001ca6:	687b      	ldr	r3, [r7, #4]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e009      	b.n	8001cd6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	60ba      	str	r2, [r7, #8]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fb74 	bl	80013b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	dbf1      	blt.n	8001cc2 <_write+0x12>
  }
  return len;
 8001cde:	687b      	ldr	r3, [r7, #4]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_close>:

int _close(int file)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d10:	605a      	str	r2, [r3, #4]
  return 0;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <_isatty>:

int _isatty(int file)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d28:	2301      	movs	r3, #1
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b085      	sub	sp, #20
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d58:	4a14      	ldr	r2, [pc, #80]	@ (8001dac <_sbrk+0x5c>)
 8001d5a:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <_sbrk+0x60>)
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d64:	4b13      	ldr	r3, [pc, #76]	@ (8001db4 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <_sbrk+0x64>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	@ (8001db8 <_sbrk+0x68>)
 8001d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d72:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d207      	bcs.n	8001d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d80:	f00d f854 	bl	800ee2c <__errno>
 8001d84:	4603      	mov	r3, r0
 8001d86:	220c      	movs	r2, #12
 8001d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	e009      	b.n	8001da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <_sbrk+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d96:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4a05      	ldr	r2, [pc, #20]	@ (8001db4 <_sbrk+0x64>)
 8001da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001da2:	68fb      	ldr	r3, [r7, #12]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20050000 	.word	0x20050000
 8001db0:	00000400 	.word	0x00000400
 8001db4:	20000664 	.word	0x20000664
 8001db8:	20005778 	.word	0x20005778

08001dbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc0:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <SystemInit+0x20>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc6:	4a05      	ldr	r2, [pc, #20]	@ (8001ddc <SystemInit+0x20>)
 8001dc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001de4:	4b14      	ldr	r3, [pc, #80]	@ (8001e38 <MX_USART1_UART_Init+0x58>)
 8001de6:	4a15      	ldr	r2, [pc, #84]	@ (8001e3c <MX_USART1_UART_Init+0x5c>)
 8001de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dea:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <MX_USART1_UART_Init+0x58>)
 8001dec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001df2:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <MX_USART1_UART_Init+0x58>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <MX_USART1_UART_Init+0x58>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <MX_USART1_UART_Init+0x58>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e04:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <MX_USART1_UART_Init+0x58>)
 8001e06:	220c      	movs	r2, #12
 8001e08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <MX_USART1_UART_Init+0x58>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e10:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <MX_USART1_UART_Init+0x58>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e16:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <MX_USART1_UART_Init+0x58>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <MX_USART1_UART_Init+0x58>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e22:	4805      	ldr	r0, [pc, #20]	@ (8001e38 <MX_USART1_UART_Init+0x58>)
 8001e24:	f007 f830 	bl	8008e88 <HAL_UART_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e2e:	f7ff fc17 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000668 	.word	0x20000668
 8001e3c:	40011000 	.word	0x40011000

08001e40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b0ac      	sub	sp, #176	@ 0xb0
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e58:	f107 0318 	add.w	r3, r7, #24
 8001e5c:	2284      	movs	r2, #132	@ 0x84
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f00c ff91 	bl	800ed88 <memset>
  if(uartHandle->Instance==USART1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a32      	ldr	r2, [pc, #200]	@ (8001f34 <HAL_UART_MspInit+0xf4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d15c      	bne.n	8001f2a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e70:	2340      	movs	r3, #64	@ 0x40
 8001e72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e74:	2300      	movs	r3, #0
 8001e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e78:	f107 0318 	add.w	r3, r7, #24
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f004 fcfd 	bl	800687c <HAL_RCCEx_PeriphCLKConfig>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e88:	f7ff fbea 	bl	8001660 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f38 <HAL_UART_MspInit+0xf8>)
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e90:	4a29      	ldr	r2, [pc, #164]	@ (8001f38 <HAL_UART_MspInit+0xf8>)
 8001e92:	f043 0310 	orr.w	r3, r3, #16
 8001e96:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e98:	4b27      	ldr	r3, [pc, #156]	@ (8001f38 <HAL_UART_MspInit+0xf8>)
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea4:	4b24      	ldr	r3, [pc, #144]	@ (8001f38 <HAL_UART_MspInit+0xf8>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea8:	4a23      	ldr	r2, [pc, #140]	@ (8001f38 <HAL_UART_MspInit+0xf8>)
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb0:	4b21      	ldr	r3, [pc, #132]	@ (8001f38 <HAL_UART_MspInit+0xf8>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f38 <HAL_UART_MspInit+0xf8>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f38 <HAL_UART_MspInit+0xf8>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <HAL_UART_MspInit+0xf8>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ed4:	2380      	movs	r3, #128	@ 0x80
 8001ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eec:	2307      	movs	r3, #7
 8001eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4810      	ldr	r0, [pc, #64]	@ (8001f3c <HAL_UART_MspInit+0xfc>)
 8001efa:	f002 feeb 	bl	8004cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001efe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f12:	2303      	movs	r3, #3
 8001f14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f18:	2307      	movs	r3, #7
 8001f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f22:	4619      	mov	r1, r3
 8001f24:	4806      	ldr	r0, [pc, #24]	@ (8001f40 <HAL_UART_MspInit+0x100>)
 8001f26:	f002 fed5 	bl	8004cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	37b0      	adds	r7, #176	@ 0xb0
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40011000 	.word	0x40011000
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020400 	.word	0x40020400
 8001f40:	40020000 	.word	0x40020000

08001f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f48:	f7ff ff38 	bl	8001dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f4c:	480c      	ldr	r0, [pc, #48]	@ (8001f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f4e:	490d      	ldr	r1, [pc, #52]	@ (8001f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f50:	4a0d      	ldr	r2, [pc, #52]	@ (8001f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f54:	e002      	b.n	8001f5c <LoopCopyDataInit>

08001f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5a:	3304      	adds	r3, #4

08001f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f60:	d3f9      	bcc.n	8001f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f62:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f64:	4c0a      	ldr	r4, [pc, #40]	@ (8001f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f68:	e001      	b.n	8001f6e <LoopFillZerobss>

08001f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f6c:	3204      	adds	r2, #4

08001f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f70:	d3fb      	bcc.n	8001f6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f72:	f00c ff61 	bl	800ee38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f76:	f7ff f94d 	bl	8001214 <main>
  bx  lr    
 8001f7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f7c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f84:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001f88:	080112f8 	.word	0x080112f8
  ldr r2, =_sbss
 8001f8c:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8001f90:	20005774 	.word	0x20005774

08001f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f94:	e7fe      	b.n	8001f94 <ADC_IRQHandler>
	...

08001f98 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	81fb      	strh	r3, [r7, #14]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	81bb      	strh	r3, [r7, #12]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8001fb0:	89bb      	ldrh	r3, [r7, #12]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001fb6:	89bb      	ldrh	r3, [r7, #12]
 8001fb8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fbc:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001fc2:	f001 fc71 	bl	80038a8 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001fc6:	89fb      	ldrh	r3, [r7, #14]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2203      	movs	r2, #3
 8001fcc:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f001 fafb 	bl	80035cc <CODEC_IO_Write>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	4413      	add	r3, r2
 8001fde:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8001fe0:	89fb      	ldrh	r3, [r7, #14]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f640 0117 	movw	r1, #2071	@ 0x817
 8001fea:	4618      	mov	r0, r3
 8001fec:	f001 faee 	bl	80035cc <CODEC_IO_Write>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8001ffa:	89fb      	ldrh	r3, [r7, #14]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2200      	movs	r2, #0
 8002000:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002004:	4618      	mov	r0, r3
 8002006:	f001 fae1 	bl	80035cc <CODEC_IO_Write>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	4413      	add	r3, r2
 8002012:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8002014:	89fb      	ldrh	r3, [r7, #14]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	226c      	movs	r2, #108	@ 0x6c
 800201a:	2139      	movs	r1, #57	@ 0x39
 800201c:	4618      	mov	r0, r3
 800201e:	f001 fad5 	bl	80035cc <CODEC_IO_Write>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 800202c:	8afb      	ldrh	r3, [r7, #22]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00c      	beq.n	800204c <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8002032:	89fb      	ldrh	r3, [r7, #14]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2213      	movs	r2, #19
 8002038:	2101      	movs	r1, #1
 800203a:	4618      	mov	r0, r3
 800203c:	f001 fac6 	bl	80035cc <CODEC_IO_Write>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	4413      	add	r3, r2
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	e00b      	b.n	8002064 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 800204c:	89fb      	ldrh	r3, [r7, #14]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2203      	movs	r2, #3
 8002052:	2101      	movs	r1, #1
 8002054:	4618      	mov	r0, r3
 8002056:	f001 fab9 	bl	80035cc <CODEC_IO_Write>
 800205a:	4603      	mov	r3, r0
 800205c:	461a      	mov	r2, r3
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4413      	add	r3, r2
 8002062:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002064:	2032      	movs	r0, #50	@ 0x32
 8002066:	f001 fc87 	bl	8003978 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800206a:	8b3b      	ldrh	r3, [r7, #24]
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 815f 	beq.w	8002330 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8002072:	4bae      	ldr	r3, [pc, #696]	@ (800232c <wm8994_Init+0x394>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002078:	8b3b      	ldrh	r3, [r7, #24]
 800207a:	2b03      	cmp	r3, #3
 800207c:	f000 808c 	beq.w	8002198 <wm8994_Init+0x200>
 8002080:	2b03      	cmp	r3, #3
 8002082:	f300 8111 	bgt.w	80022a8 <wm8994_Init+0x310>
 8002086:	2b01      	cmp	r3, #1
 8002088:	d002      	beq.n	8002090 <wm8994_Init+0xf8>
 800208a:	2b02      	cmp	r3, #2
 800208c:	d042      	beq.n	8002114 <wm8994_Init+0x17c>
 800208e:	e10b      	b.n	80022a8 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002090:	89fb      	ldrh	r3, [r7, #14]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8002098:	2105      	movs	r1, #5
 800209a:	4618      	mov	r0, r3
 800209c:	f001 fa96 	bl	80035cc <CODEC_IO_Write>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	4413      	add	r3, r2
 80020a8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80020aa:	89fb      	ldrh	r3, [r7, #14]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2200      	movs	r2, #0
 80020b0:	f240 6101 	movw	r1, #1537	@ 0x601
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 fa89 	bl	80035cc <CODEC_IO_Write>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461a      	mov	r2, r3
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	4413      	add	r3, r2
 80020c2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80020c4:	89fb      	ldrh	r3, [r7, #14]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2200      	movs	r2, #0
 80020ca:	f240 6102 	movw	r1, #1538	@ 0x602
 80020ce:	4618      	mov	r0, r3
 80020d0:	f001 fa7c 	bl	80035cc <CODEC_IO_Write>
 80020d4:	4603      	mov	r3, r0
 80020d6:	461a      	mov	r2, r3
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	4413      	add	r3, r2
 80020dc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80020de:	89fb      	ldrh	r3, [r7, #14]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2202      	movs	r2, #2
 80020e4:	f240 6104 	movw	r1, #1540	@ 0x604
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 fa6f 	bl	80035cc <CODEC_IO_Write>
 80020ee:	4603      	mov	r3, r0
 80020f0:	461a      	mov	r2, r3
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	4413      	add	r3, r2
 80020f6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80020f8:	89fb      	ldrh	r3, [r7, #14]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2202      	movs	r2, #2
 80020fe:	f240 6105 	movw	r1, #1541	@ 0x605
 8002102:	4618      	mov	r0, r3
 8002104:	f001 fa62 	bl	80035cc <CODEC_IO_Write>
 8002108:	4603      	mov	r3, r0
 800210a:	461a      	mov	r2, r3
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	4413      	add	r3, r2
 8002110:	61fb      	str	r3, [r7, #28]
      break;
 8002112:	e110      	b.n	8002336 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f240 3203 	movw	r2, #771	@ 0x303
 800211c:	2105      	movs	r1, #5
 800211e:	4618      	mov	r0, r3
 8002120:	f001 fa54 	bl	80035cc <CODEC_IO_Write>
 8002124:	4603      	mov	r3, r0
 8002126:	461a      	mov	r2, r3
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	4413      	add	r3, r2
 800212c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800212e:	89fb      	ldrh	r3, [r7, #14]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2201      	movs	r2, #1
 8002134:	f240 6101 	movw	r1, #1537	@ 0x601
 8002138:	4618      	mov	r0, r3
 800213a:	f001 fa47 	bl	80035cc <CODEC_IO_Write>
 800213e:	4603      	mov	r3, r0
 8002140:	461a      	mov	r2, r3
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	4413      	add	r3, r2
 8002146:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002148:	89fb      	ldrh	r3, [r7, #14]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2201      	movs	r2, #1
 800214e:	f240 6102 	movw	r1, #1538	@ 0x602
 8002152:	4618      	mov	r0, r3
 8002154:	f001 fa3a 	bl	80035cc <CODEC_IO_Write>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002162:	89fb      	ldrh	r3, [r7, #14]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2200      	movs	r2, #0
 8002168:	f240 6104 	movw	r1, #1540	@ 0x604
 800216c:	4618      	mov	r0, r3
 800216e:	f001 fa2d 	bl	80035cc <CODEC_IO_Write>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	4413      	add	r3, r2
 800217a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800217c:	89fb      	ldrh	r3, [r7, #14]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2200      	movs	r2, #0
 8002182:	f240 6105 	movw	r1, #1541	@ 0x605
 8002186:	4618      	mov	r0, r3
 8002188:	f001 fa20 	bl	80035cc <CODEC_IO_Write>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	4413      	add	r3, r2
 8002194:	61fb      	str	r3, [r7, #28]
      break;
 8002196:	e0ce      	b.n	8002336 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002198:	8afb      	ldrh	r3, [r7, #22]
 800219a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800219e:	d141      	bne.n	8002224 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80021a0:	89fb      	ldrh	r3, [r7, #14]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80021a8:	2105      	movs	r1, #5
 80021aa:	4618      	mov	r0, r3
 80021ac:	f001 fa0e 	bl	80035cc <CODEC_IO_Write>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	4413      	add	r3, r2
 80021b8:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80021ba:	89fb      	ldrh	r3, [r7, #14]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2203      	movs	r2, #3
 80021c0:	f240 6101 	movw	r1, #1537	@ 0x601
 80021c4:	4618      	mov	r0, r3
 80021c6:	f001 fa01 	bl	80035cc <CODEC_IO_Write>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	4413      	add	r3, r2
 80021d2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80021d4:	89fb      	ldrh	r3, [r7, #14]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2203      	movs	r2, #3
 80021da:	f240 6102 	movw	r1, #1538	@ 0x602
 80021de:	4618      	mov	r0, r3
 80021e0:	f001 f9f4 	bl	80035cc <CODEC_IO_Write>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	4413      	add	r3, r2
 80021ec:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80021ee:	89fb      	ldrh	r3, [r7, #14]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2203      	movs	r2, #3
 80021f4:	f240 6104 	movw	r1, #1540	@ 0x604
 80021f8:	4618      	mov	r0, r3
 80021fa:	f001 f9e7 	bl	80035cc <CODEC_IO_Write>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4413      	add	r3, r2
 8002206:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8002208:	89fb      	ldrh	r3, [r7, #14]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2203      	movs	r2, #3
 800220e:	f240 6105 	movw	r1, #1541	@ 0x605
 8002212:	4618      	mov	r0, r3
 8002214:	f001 f9da 	bl	80035cc <CODEC_IO_Write>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	4413      	add	r3, r2
 8002220:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8002222:	e088      	b.n	8002336 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002224:	89fb      	ldrh	r3, [r7, #14]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800222c:	2105      	movs	r1, #5
 800222e:	4618      	mov	r0, r3
 8002230:	f001 f9cc 	bl	80035cc <CODEC_IO_Write>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	4413      	add	r3, r2
 800223c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800223e:	89fb      	ldrh	r3, [r7, #14]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2201      	movs	r2, #1
 8002244:	f240 6101 	movw	r1, #1537	@ 0x601
 8002248:	4618      	mov	r0, r3
 800224a:	f001 f9bf 	bl	80035cc <CODEC_IO_Write>
 800224e:	4603      	mov	r3, r0
 8002250:	461a      	mov	r2, r3
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4413      	add	r3, r2
 8002256:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002258:	89fb      	ldrh	r3, [r7, #14]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2201      	movs	r2, #1
 800225e:	f240 6102 	movw	r1, #1538	@ 0x602
 8002262:	4618      	mov	r0, r3
 8002264:	f001 f9b2 	bl	80035cc <CODEC_IO_Write>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	4413      	add	r3, r2
 8002270:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002272:	89fb      	ldrh	r3, [r7, #14]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2202      	movs	r2, #2
 8002278:	f240 6104 	movw	r1, #1540	@ 0x604
 800227c:	4618      	mov	r0, r3
 800227e:	f001 f9a5 	bl	80035cc <CODEC_IO_Write>
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	4413      	add	r3, r2
 800228a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 800228c:	89fb      	ldrh	r3, [r7, #14]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2202      	movs	r2, #2
 8002292:	f240 6105 	movw	r1, #1541	@ 0x605
 8002296:	4618      	mov	r0, r3
 8002298:	f001 f998 	bl	80035cc <CODEC_IO_Write>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	4413      	add	r3, r2
 80022a4:	61fb      	str	r3, [r7, #28]
      break;
 80022a6:	e046      	b.n	8002336 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80022a8:	89fb      	ldrh	r3, [r7, #14]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f240 3203 	movw	r2, #771	@ 0x303
 80022b0:	2105      	movs	r1, #5
 80022b2:	4618      	mov	r0, r3
 80022b4:	f001 f98a 	bl	80035cc <CODEC_IO_Write>
 80022b8:	4603      	mov	r3, r0
 80022ba:	461a      	mov	r2, r3
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	4413      	add	r3, r2
 80022c0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80022c2:	89fb      	ldrh	r3, [r7, #14]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2201      	movs	r2, #1
 80022c8:	f240 6101 	movw	r1, #1537	@ 0x601
 80022cc:	4618      	mov	r0, r3
 80022ce:	f001 f97d 	bl	80035cc <CODEC_IO_Write>
 80022d2:	4603      	mov	r3, r0
 80022d4:	461a      	mov	r2, r3
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	4413      	add	r3, r2
 80022da:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80022dc:	89fb      	ldrh	r3, [r7, #14]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2201      	movs	r2, #1
 80022e2:	f240 6102 	movw	r1, #1538	@ 0x602
 80022e6:	4618      	mov	r0, r3
 80022e8:	f001 f970 	bl	80035cc <CODEC_IO_Write>
 80022ec:	4603      	mov	r3, r0
 80022ee:	461a      	mov	r2, r3
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	4413      	add	r3, r2
 80022f4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80022f6:	89fb      	ldrh	r3, [r7, #14]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2200      	movs	r2, #0
 80022fc:	f240 6104 	movw	r1, #1540	@ 0x604
 8002300:	4618      	mov	r0, r3
 8002302:	f001 f963 	bl	80035cc <CODEC_IO_Write>
 8002306:	4603      	mov	r3, r0
 8002308:	461a      	mov	r2, r3
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	4413      	add	r3, r2
 800230e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002310:	89fb      	ldrh	r3, [r7, #14]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2200      	movs	r2, #0
 8002316:	f240 6105 	movw	r1, #1541	@ 0x605
 800231a:	4618      	mov	r0, r3
 800231c:	f001 f956 	bl	80035cc <CODEC_IO_Write>
 8002320:	4603      	mov	r3, r0
 8002322:	461a      	mov	r2, r3
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	4413      	add	r3, r2
 8002328:	61fb      	str	r3, [r7, #28]
      break;
 800232a:	e004      	b.n	8002336 <wm8994_Init+0x39e>
 800232c:	200006f0 	.word	0x200006f0
    }
  }
  else
  {
    outputEnabled = 0;
 8002330:	4b99      	ldr	r3, [pc, #612]	@ (8002598 <wm8994_Init+0x600>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002336:	8afb      	ldrh	r3, [r7, #22]
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 81ab 	beq.w	8002694 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800233e:	4b97      	ldr	r3, [pc, #604]	@ (800259c <wm8994_Init+0x604>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002344:	8afb      	ldrh	r3, [r7, #22]
 8002346:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800234a:	f000 8129 	beq.w	80025a0 <wm8994_Init+0x608>
 800234e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002352:	f300 819b 	bgt.w	800268c <wm8994_Init+0x6f4>
 8002356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800235a:	d05a      	beq.n	8002412 <wm8994_Init+0x47a>
 800235c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002360:	f300 8194 	bgt.w	800268c <wm8994_Init+0x6f4>
 8002364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002368:	f000 80c6 	beq.w	80024f8 <wm8994_Init+0x560>
 800236c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002370:	f040 818c 	bne.w	800268c <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002374:	89fb      	ldrh	r3, [r7, #14]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 800237c:	2104      	movs	r1, #4
 800237e:	4618      	mov	r0, r3
 8002380:	f001 f924 	bl	80035cc <CODEC_IO_Write>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	4413      	add	r3, r2
 800238c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800238e:	89fb      	ldrh	r3, [r7, #14]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	22db      	movs	r2, #219	@ 0xdb
 8002394:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002398:	4618      	mov	r0, r3
 800239a:	f001 f917 	bl	80035cc <CODEC_IO_Write>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	4413      	add	r3, r2
 80023a6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80023a8:	89fb      	ldrh	r3, [r7, #14]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 80023b0:	2102      	movs	r1, #2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f001 f90a 	bl	80035cc <CODEC_IO_Write>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	4413      	add	r3, r2
 80023c0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80023c2:	89fb      	ldrh	r3, [r7, #14]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2202      	movs	r2, #2
 80023c8:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80023cc:	4618      	mov	r0, r3
 80023ce:	f001 f8fd 	bl	80035cc <CODEC_IO_Write>
 80023d2:	4603      	mov	r3, r0
 80023d4:	461a      	mov	r2, r3
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	4413      	add	r3, r2
 80023da:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80023dc:	89fb      	ldrh	r3, [r7, #14]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2202      	movs	r2, #2
 80023e2:	f240 6109 	movw	r1, #1545	@ 0x609
 80023e6:	4618      	mov	r0, r3
 80023e8:	f001 f8f0 	bl	80035cc <CODEC_IO_Write>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	4413      	add	r3, r2
 80023f4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	220e      	movs	r2, #14
 80023fc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002400:	4618      	mov	r0, r3
 8002402:	f001 f8e3 	bl	80035cc <CODEC_IO_Write>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	4413      	add	r3, r2
 800240e:	61fb      	str	r3, [r7, #28]
      break;
 8002410:	e143      	b.n	800269a <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8002412:	89fb      	ldrh	r3, [r7, #14]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2211      	movs	r2, #17
 8002418:	2128      	movs	r1, #40	@ 0x28
 800241a:	4618      	mov	r0, r3
 800241c:	f001 f8d6 	bl	80035cc <CODEC_IO_Write>
 8002420:	4603      	mov	r3, r0
 8002422:	461a      	mov	r2, r3
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	4413      	add	r3, r2
 8002428:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800242a:	89fb      	ldrh	r3, [r7, #14]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2235      	movs	r2, #53	@ 0x35
 8002430:	2129      	movs	r1, #41	@ 0x29
 8002432:	4618      	mov	r0, r3
 8002434:	f001 f8ca 	bl	80035cc <CODEC_IO_Write>
 8002438:	4603      	mov	r3, r0
 800243a:	461a      	mov	r2, r3
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	4413      	add	r3, r2
 8002440:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8002442:	89fb      	ldrh	r3, [r7, #14]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2235      	movs	r2, #53	@ 0x35
 8002448:	212a      	movs	r1, #42	@ 0x2a
 800244a:	4618      	mov	r0, r3
 800244c:	f001 f8be 	bl	80035cc <CODEC_IO_Write>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	4413      	add	r3, r2
 8002458:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800245a:	89fb      	ldrh	r3, [r7, #14]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f240 3203 	movw	r2, #771	@ 0x303
 8002462:	2104      	movs	r1, #4
 8002464:	4618      	mov	r0, r3
 8002466:	f001 f8b1 	bl	80035cc <CODEC_IO_Write>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	4413      	add	r3, r2
 8002472:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002474:	89fb      	ldrh	r3, [r7, #14]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	22db      	movs	r2, #219	@ 0xdb
 800247a:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800247e:	4618      	mov	r0, r3
 8002480:	f001 f8a4 	bl	80035cc <CODEC_IO_Write>
 8002484:	4603      	mov	r3, r0
 8002486:	461a      	mov	r2, r3
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800248e:	89fb      	ldrh	r3, [r7, #14]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002496:	2102      	movs	r1, #2
 8002498:	4618      	mov	r0, r3
 800249a:	f001 f897 	bl	80035cc <CODEC_IO_Write>
 800249e:	4603      	mov	r3, r0
 80024a0:	461a      	mov	r2, r3
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	4413      	add	r3, r2
 80024a6:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80024a8:	89fb      	ldrh	r3, [r7, #14]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2202      	movs	r2, #2
 80024ae:	f240 6106 	movw	r1, #1542	@ 0x606
 80024b2:	4618      	mov	r0, r3
 80024b4:	f001 f88a 	bl	80035cc <CODEC_IO_Write>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461a      	mov	r2, r3
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	4413      	add	r3, r2
 80024c0:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80024c2:	89fb      	ldrh	r3, [r7, #14]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2202      	movs	r2, #2
 80024c8:	f240 6107 	movw	r1, #1543	@ 0x607
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 f87d 	bl	80035cc <CODEC_IO_Write>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	4413      	add	r3, r2
 80024da:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80024dc:	89fb      	ldrh	r3, [r7, #14]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	220d      	movs	r2, #13
 80024e2:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 f870 	bl	80035cc <CODEC_IO_Write>
 80024ec:	4603      	mov	r3, r0
 80024ee:	461a      	mov	r2, r3
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	4413      	add	r3, r2
 80024f4:	61fb      	str	r3, [r7, #28]
      break;
 80024f6:	e0d0      	b.n	800269a <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80024f8:	89fb      	ldrh	r3, [r7, #14]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8002500:	2104      	movs	r1, #4
 8002502:	4618      	mov	r0, r3
 8002504:	f001 f862 	bl	80035cc <CODEC_IO_Write>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	4413      	add	r3, r2
 8002510:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002512:	89fb      	ldrh	r3, [r7, #14]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	22db      	movs	r2, #219	@ 0xdb
 8002518:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800251c:	4618      	mov	r0, r3
 800251e:	f001 f855 	bl	80035cc <CODEC_IO_Write>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	4413      	add	r3, r2
 800252a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800252c:	89fb      	ldrh	r3, [r7, #14]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002534:	2102      	movs	r1, #2
 8002536:	4618      	mov	r0, r3
 8002538:	f001 f848 	bl	80035cc <CODEC_IO_Write>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	4413      	add	r3, r2
 8002544:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002546:	89fb      	ldrh	r3, [r7, #14]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2202      	movs	r2, #2
 800254c:	f240 6106 	movw	r1, #1542	@ 0x606
 8002550:	4618      	mov	r0, r3
 8002552:	f001 f83b 	bl	80035cc <CODEC_IO_Write>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	4413      	add	r3, r2
 800255e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002560:	89fb      	ldrh	r3, [r7, #14]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2202      	movs	r2, #2
 8002566:	f240 6107 	movw	r1, #1543	@ 0x607
 800256a:	4618      	mov	r0, r3
 800256c:	f001 f82e 	bl	80035cc <CODEC_IO_Write>
 8002570:	4603      	mov	r3, r0
 8002572:	461a      	mov	r2, r3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	4413      	add	r3, r2
 8002578:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800257a:	89fb      	ldrh	r3, [r7, #14]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	220d      	movs	r2, #13
 8002580:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002584:	4618      	mov	r0, r3
 8002586:	f001 f821 	bl	80035cc <CODEC_IO_Write>
 800258a:	4603      	mov	r3, r0
 800258c:	461a      	mov	r2, r3
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	4413      	add	r3, r2
 8002592:	61fb      	str	r3, [r7, #28]
      break; 
 8002594:	e081      	b.n	800269a <wm8994_Init+0x702>
 8002596:	bf00      	nop
 8002598:	200006f0 	.word	0x200006f0
 800259c:	200006f4 	.word	0x200006f4
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80025a0:	89fb      	ldrh	r3, [r7, #14]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f640 723c 	movw	r2, #3900	@ 0xf3c
 80025a8:	2104      	movs	r1, #4
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 f80e 	bl	80035cc <CODEC_IO_Write>
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	4413      	add	r3, r2
 80025b8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80025ba:	89fb      	ldrh	r3, [r7, #14]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	22db      	movs	r2, #219	@ 0xdb
 80025c0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80025c4:	4618      	mov	r0, r3
 80025c6:	f001 f801 	bl	80035cc <CODEC_IO_Write>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80025d4:	89fb      	ldrh	r3, [r7, #14]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	22db      	movs	r2, #219	@ 0xdb
 80025da:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fff4 	bl	80035cc <CODEC_IO_Write>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	4413      	add	r3, r2
 80025ec:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80025ee:	89fb      	ldrh	r3, [r7, #14]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80025f6:	2102      	movs	r1, #2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 ffe7 	bl	80035cc <CODEC_IO_Write>
 80025fe:	4603      	mov	r3, r0
 8002600:	461a      	mov	r2, r3
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4413      	add	r3, r2
 8002606:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002608:	89fb      	ldrh	r3, [r7, #14]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2202      	movs	r2, #2
 800260e:	f240 6106 	movw	r1, #1542	@ 0x606
 8002612:	4618      	mov	r0, r3
 8002614:	f000 ffda 	bl	80035cc <CODEC_IO_Write>
 8002618:	4603      	mov	r3, r0
 800261a:	461a      	mov	r2, r3
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	4413      	add	r3, r2
 8002620:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002622:	89fb      	ldrh	r3, [r7, #14]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2202      	movs	r2, #2
 8002628:	f240 6107 	movw	r1, #1543	@ 0x607
 800262c:	4618      	mov	r0, r3
 800262e:	f000 ffcd 	bl	80035cc <CODEC_IO_Write>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	4413      	add	r3, r2
 800263a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800263c:	89fb      	ldrh	r3, [r7, #14]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2202      	movs	r2, #2
 8002642:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002646:	4618      	mov	r0, r3
 8002648:	f000 ffc0 	bl	80035cc <CODEC_IO_Write>
 800264c:	4603      	mov	r3, r0
 800264e:	461a      	mov	r2, r3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4413      	add	r3, r2
 8002654:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002656:	89fb      	ldrh	r3, [r7, #14]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2202      	movs	r2, #2
 800265c:	f240 6109 	movw	r1, #1545	@ 0x609
 8002660:	4618      	mov	r0, r3
 8002662:	f000 ffb3 	bl	80035cc <CODEC_IO_Write>
 8002666:	4603      	mov	r3, r0
 8002668:	461a      	mov	r2, r3
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002670:	89fb      	ldrh	r3, [r7, #14]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	220d      	movs	r2, #13
 8002676:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800267a:	4618      	mov	r0, r3
 800267c:	f000 ffa6 	bl	80035cc <CODEC_IO_Write>
 8002680:	4603      	mov	r3, r0
 8002682:	461a      	mov	r2, r3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	4413      	add	r3, r2
 8002688:	61fb      	str	r3, [r7, #28]
      break;    
 800268a:	e006      	b.n	800269a <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	3301      	adds	r3, #1
 8002690:	61fb      	str	r3, [r7, #28]
      break;
 8002692:	e002      	b.n	800269a <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002694:	4ba4      	ldr	r3, [pc, #656]	@ (8002928 <wm8994_Init+0x990>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4aa3      	ldr	r2, [pc, #652]	@ (800292c <wm8994_Init+0x994>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d079      	beq.n	8002796 <wm8994_Init+0x7fe>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4aa1      	ldr	r2, [pc, #644]	@ (800292c <wm8994_Init+0x994>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	f200 80ad 	bhi.w	8002806 <wm8994_Init+0x86e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d061      	beq.n	800277a <wm8994_Init+0x7e2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80026bc:	4293      	cmp	r3, r2
 80026be:	f200 80a2 	bhi.w	8002806 <wm8994_Init+0x86e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80026c8:	4293      	cmp	r3, r2
 80026ca:	f000 808e 	beq.w	80027ea <wm8994_Init+0x852>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80026d4:	4293      	cmp	r3, r2
 80026d6:	f200 8096 	bhi.w	8002806 <wm8994_Init+0x86e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80026e0:	d03d      	beq.n	800275e <wm8994_Init+0x7c6>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80026e8:	f200 808d 	bhi.w	8002806 <wm8994_Init+0x86e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f245 6222 	movw	r2, #22050	@ 0x5622
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d06b      	beq.n	80027ce <wm8994_Init+0x836>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f245 6222 	movw	r2, #22050	@ 0x5622
 80026fc:	4293      	cmp	r3, r2
 80026fe:	f200 8082 	bhi.w	8002806 <wm8994_Init+0x86e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002708:	d01b      	beq.n	8002742 <wm8994_Init+0x7aa>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002710:	d879      	bhi.n	8002806 <wm8994_Init+0x86e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002718:	d005      	beq.n	8002726 <wm8994_Init+0x78e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8002720:	4293      	cmp	r3, r2
 8002722:	d046      	beq.n	80027b2 <wm8994_Init+0x81a>
 8002724:	e06f      	b.n	8002806 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002726:	89fb      	ldrh	r3, [r7, #14]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2203      	movs	r2, #3
 800272c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002730:	4618      	mov	r0, r3
 8002732:	f000 ff4b 	bl	80035cc <CODEC_IO_Write>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	4413      	add	r3, r2
 800273e:	61fb      	str	r3, [r7, #28]
    break;
 8002740:	e06f      	b.n	8002822 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002742:	89fb      	ldrh	r3, [r7, #14]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2233      	movs	r2, #51	@ 0x33
 8002748:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800274c:	4618      	mov	r0, r3
 800274e:	f000 ff3d 	bl	80035cc <CODEC_IO_Write>
 8002752:	4603      	mov	r3, r0
 8002754:	461a      	mov	r2, r3
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	4413      	add	r3, r2
 800275a:	61fb      	str	r3, [r7, #28]
    break;
 800275c:	e061      	b.n	8002822 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800275e:	89fb      	ldrh	r3, [r7, #14]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2263      	movs	r2, #99	@ 0x63
 8002764:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002768:	4618      	mov	r0, r3
 800276a:	f000 ff2f 	bl	80035cc <CODEC_IO_Write>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	4413      	add	r3, r2
 8002776:	61fb      	str	r3, [r7, #28]
    break;
 8002778:	e053      	b.n	8002822 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800277a:	89fb      	ldrh	r3, [r7, #14]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2283      	movs	r2, #131	@ 0x83
 8002780:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002784:	4618      	mov	r0, r3
 8002786:	f000 ff21 	bl	80035cc <CODEC_IO_Write>
 800278a:	4603      	mov	r3, r0
 800278c:	461a      	mov	r2, r3
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	4413      	add	r3, r2
 8002792:	61fb      	str	r3, [r7, #28]
    break;
 8002794:	e045      	b.n	8002822 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002796:	89fb      	ldrh	r3, [r7, #14]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	22a3      	movs	r2, #163	@ 0xa3
 800279c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 ff13 	bl	80035cc <CODEC_IO_Write>
 80027a6:	4603      	mov	r3, r0
 80027a8:	461a      	mov	r2, r3
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	4413      	add	r3, r2
 80027ae:	61fb      	str	r3, [r7, #28]
    break;
 80027b0:	e037      	b.n	8002822 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80027b2:	89fb      	ldrh	r3, [r7, #14]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2213      	movs	r2, #19
 80027b8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 ff05 	bl	80035cc <CODEC_IO_Write>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461a      	mov	r2, r3
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	61fb      	str	r3, [r7, #28]
    break;
 80027cc:	e029      	b.n	8002822 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80027ce:	89fb      	ldrh	r3, [r7, #14]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2243      	movs	r2, #67	@ 0x43
 80027d4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fef7 	bl	80035cc <CODEC_IO_Write>
 80027de:	4603      	mov	r3, r0
 80027e0:	461a      	mov	r2, r3
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	4413      	add	r3, r2
 80027e6:	61fb      	str	r3, [r7, #28]
    break;
 80027e8:	e01b      	b.n	8002822 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80027ea:	89fb      	ldrh	r3, [r7, #14]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2273      	movs	r2, #115	@ 0x73
 80027f0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 fee9 	bl	80035cc <CODEC_IO_Write>
 80027fa:	4603      	mov	r3, r0
 80027fc:	461a      	mov	r2, r3
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	4413      	add	r3, r2
 8002802:	61fb      	str	r3, [r7, #28]
    break; 
 8002804:	e00d      	b.n	8002822 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002806:	89fb      	ldrh	r3, [r7, #14]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2283      	movs	r2, #131	@ 0x83
 800280c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fedb 	bl	80035cc <CODEC_IO_Write>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	4413      	add	r3, r2
 800281e:	61fb      	str	r3, [r7, #28]
    break; 
 8002820:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002822:	8afb      	ldrh	r3, [r7, #22]
 8002824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002828:	d10e      	bne.n	8002848 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800282a:	89fb      	ldrh	r3, [r7, #14]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f244 0218 	movw	r2, #16408	@ 0x4018
 8002832:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fec8 	bl	80035cc <CODEC_IO_Write>
 800283c:	4603      	mov	r3, r0
 800283e:	461a      	mov	r2, r3
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e00d      	b.n	8002864 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002848:	89fb      	ldrh	r3, [r7, #14]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f244 0210 	movw	r2, #16400	@ 0x4010
 8002850:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002854:	4618      	mov	r0, r3
 8002856:	f000 feb9 	bl	80035cc <CODEC_IO_Write>
 800285a:	4603      	mov	r3, r0
 800285c:	461a      	mov	r2, r3
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	4413      	add	r3, r2
 8002862:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002864:	89fb      	ldrh	r3, [r7, #14]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2200      	movs	r2, #0
 800286a:	f240 3102 	movw	r1, #770	@ 0x302
 800286e:	4618      	mov	r0, r3
 8002870:	f000 feac 	bl	80035cc <CODEC_IO_Write>
 8002874:	4603      	mov	r3, r0
 8002876:	461a      	mov	r2, r3
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	4413      	add	r3, r2
 800287c:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800287e:	89fb      	ldrh	r3, [r7, #14]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	220a      	movs	r2, #10
 8002884:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fe9f 	bl	80035cc <CODEC_IO_Write>
 800288e:	4603      	mov	r3, r0
 8002890:	461a      	mov	r2, r3
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4413      	add	r3, r2
 8002896:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2201      	movs	r2, #1
 800289e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fe92 	bl	80035cc <CODEC_IO_Write>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80028b2:	8b3b      	ldrh	r3, [r7, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 817b 	beq.w	8002bb0 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80028ba:	8b3b      	ldrh	r3, [r7, #24]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d157      	bne.n	8002970 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 80028c0:	89fb      	ldrh	r3, [r7, #14]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028c8:	212d      	movs	r1, #45	@ 0x2d
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fe7e 	bl	80035cc <CODEC_IO_Write>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	4413      	add	r3, r2
 80028d8:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 80028da:	89fb      	ldrh	r3, [r7, #14]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028e2:	212e      	movs	r1, #46	@ 0x2e
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fe71 	bl	80035cc <CODEC_IO_Write>
 80028ea:	4603      	mov	r3, r0
 80028ec:	461a      	mov	r2, r3
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	4413      	add	r3, r2
 80028f2:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 80028f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <wm8994_Init+0x998>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01b      	beq.n	8002934 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80028fc:	89fb      	ldrh	r3, [r7, #14]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8002904:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fe5f 	bl	80035cc <CODEC_IO_Write>
 800290e:	4603      	mov	r3, r0
 8002910:	461a      	mov	r2, r3
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	4413      	add	r3, r2
 8002916:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8002918:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <wm8994_Init+0x998>)
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 800291e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002922:	f001 f829 	bl	8003978 <AUDIO_IO_Delay>
 8002926:	e016      	b.n	8002956 <wm8994_Init+0x9be>
 8002928:	200006f4 	.word	0x200006f4
 800292c:	00017700 	.word	0x00017700
 8002930:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8002934:	89fb      	ldrh	r3, [r7, #14]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f248 1208 	movw	r2, #33032	@ 0x8108
 800293c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fe43 	bl	80035cc <CODEC_IO_Write>
 8002946:	4603      	mov	r3, r0
 8002948:	461a      	mov	r2, r3
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	4413      	add	r3, r2
 800294e:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8002950:	2032      	movs	r0, #50	@ 0x32
 8002952:	f001 f811 	bl	8003978 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8002956:	89fb      	ldrh	r3, [r7, #14]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2200      	movs	r2, #0
 800295c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fe33 	bl	80035cc <CODEC_IO_Write>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	4413      	add	r3, r2
 800296e:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8002970:	89fb      	ldrh	r3, [r7, #14]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002978:	2103      	movs	r1, #3
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fe26 	bl	80035cc <CODEC_IO_Write>
 8002980:	4603      	mov	r3, r0
 8002982:	461a      	mov	r2, r3
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	4413      	add	r3, r2
 8002988:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800298a:	89fb      	ldrh	r3, [r7, #14]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2200      	movs	r2, #0
 8002990:	2122      	movs	r1, #34	@ 0x22
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fe1a 	bl	80035cc <CODEC_IO_Write>
 8002998:	4603      	mov	r3, r0
 800299a:	461a      	mov	r2, r3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	4413      	add	r3, r2
 80029a0:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80029a2:	89fb      	ldrh	r3, [r7, #14]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2200      	movs	r2, #0
 80029a8:	2123      	movs	r1, #35	@ 0x23
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fe0e 	bl	80035cc <CODEC_IO_Write>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	4413      	add	r3, r2
 80029b8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80029ba:	89fb      	ldrh	r3, [r7, #14]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80029c2:	2136      	movs	r1, #54	@ 0x36
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fe01 	bl	80035cc <CODEC_IO_Write>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	4413      	add	r3, r2
 80029d2:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80029d4:	89fb      	ldrh	r3, [r7, #14]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f243 0203 	movw	r2, #12291	@ 0x3003
 80029dc:	2101      	movs	r1, #1
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fdf4 	bl	80035cc <CODEC_IO_Write>
 80029e4:	4603      	mov	r3, r0
 80029e6:	461a      	mov	r2, r3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	4413      	add	r3, r2
 80029ec:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80029ee:	8afb      	ldrh	r3, [r7, #22]
 80029f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029f4:	d10d      	bne.n	8002a12 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80029f6:	89fb      	ldrh	r3, [r7, #14]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	f240 2205 	movw	r2, #517	@ 0x205
 80029fe:	2151      	movs	r1, #81	@ 0x51
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fde3 	bl	80035cc <CODEC_IO_Write>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	e00b      	b.n	8002a2a <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8002a12:	89fb      	ldrh	r3, [r7, #14]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2205      	movs	r2, #5
 8002a18:	2151      	movs	r1, #81	@ 0x51
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fdd6 	bl	80035cc <CODEC_IO_Write>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4413      	add	r3, r2
 8002a28:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8002a2a:	8b7b      	ldrh	r3, [r7, #26]
 8002a2c:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8002a30:	f043 0303 	orr.w	r3, r3, #3
 8002a34:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002a36:	89fb      	ldrh	r3, [r7, #14]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	8b7a      	ldrh	r2, [r7, #26]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fdc4 	bl	80035cc <CODEC_IO_Write>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002a4e:	89fb      	ldrh	r3, [r7, #14]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2222      	movs	r2, #34	@ 0x22
 8002a54:	2160      	movs	r1, #96	@ 0x60
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fdb8 	bl	80035cc <CODEC_IO_Write>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	461a      	mov	r2, r3
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002a66:	89fb      	ldrh	r3, [r7, #14]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8002a6e:	214c      	movs	r1, #76	@ 0x4c
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fdab 	bl	80035cc <CODEC_IO_Write>
 8002a76:	4603      	mov	r3, r0
 8002a78:	461a      	mov	r2, r3
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8002a80:	200f      	movs	r0, #15
 8002a82:	f000 ff79 	bl	8003978 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002a86:	89fb      	ldrh	r3, [r7, #14]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	212d      	movs	r1, #45	@ 0x2d
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fd9c 	bl	80035cc <CODEC_IO_Write>
 8002a94:	4603      	mov	r3, r0
 8002a96:	461a      	mov	r2, r3
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8002a9e:	89fb      	ldrh	r3, [r7, #14]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	212e      	movs	r1, #46	@ 0x2e
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fd90 	bl	80035cc <CODEC_IO_Write>
 8002aac:	4603      	mov	r3, r0
 8002aae:	461a      	mov	r2, r3
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002ab6:	89fb      	ldrh	r3, [r7, #14]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8002abe:	2103      	movs	r1, #3
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fd83 	bl	80035cc <CODEC_IO_Write>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	461a      	mov	r2, r3
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002ad0:	89fb      	ldrh	r3, [r7, #14]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2233      	movs	r2, #51	@ 0x33
 8002ad6:	2154      	movs	r1, #84	@ 0x54
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fd77 	bl	80035cc <CODEC_IO_Write>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8002ae8:	f240 1001 	movw	r0, #257	@ 0x101
 8002aec:	f000 ff44 	bl	8003978 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8002af0:	89fb      	ldrh	r3, [r7, #14]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	22ee      	movs	r2, #238	@ 0xee
 8002af6:	2160      	movs	r1, #96	@ 0x60
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fd67 	bl	80035cc <CODEC_IO_Write>
 8002afe:	4603      	mov	r3, r0
 8002b00:	461a      	mov	r2, r3
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	4413      	add	r3, r2
 8002b06:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8002b08:	89fb      	ldrh	r3, [r7, #14]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	22c0      	movs	r2, #192	@ 0xc0
 8002b0e:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fd5a 	bl	80035cc <CODEC_IO_Write>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	4413      	add	r3, r2
 8002b20:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8002b22:	89fb      	ldrh	r3, [r7, #14]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	22c0      	movs	r2, #192	@ 0xc0
 8002b28:	f240 6111 	movw	r1, #1553	@ 0x611
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fd4d 	bl	80035cc <CODEC_IO_Write>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461a      	mov	r2, r3
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	4413      	add	r3, r2
 8002b3a:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8002b3c:	89fb      	ldrh	r3, [r7, #14]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2210      	movs	r2, #16
 8002b42:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fd40 	bl	80035cc <CODEC_IO_Write>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	4413      	add	r3, r2
 8002b54:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8002b56:	89fb      	ldrh	r3, [r7, #14]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	22c0      	movs	r2, #192	@ 0xc0
 8002b5c:	f240 6112 	movw	r1, #1554	@ 0x612
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fd33 	bl	80035cc <CODEC_IO_Write>
 8002b66:	4603      	mov	r3, r0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8002b70:	89fb      	ldrh	r3, [r7, #14]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	22c0      	movs	r2, #192	@ 0xc0
 8002b76:	f240 6113 	movw	r1, #1555	@ 0x613
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fd26 	bl	80035cc <CODEC_IO_Write>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	4413      	add	r3, r2
 8002b88:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8002b8a:	89fb      	ldrh	r3, [r7, #14]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2210      	movs	r2, #16
 8002b90:	f240 4122 	movw	r1, #1058	@ 0x422
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fd19 	bl	80035cc <CODEC_IO_Write>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002ba4:	7afa      	ldrb	r2, [r7, #11]
 8002ba6:	89fb      	ldrh	r3, [r7, #14]
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 f984 	bl	8002eb8 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8002bb0:	8afb      	ldrh	r3, [r7, #22]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80a6 	beq.w	8002d04 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8002bb8:	8afb      	ldrh	r3, [r7, #22]
 8002bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bbe:	d003      	beq.n	8002bc8 <wm8994_Init+0xc30>
 8002bc0:	8afb      	ldrh	r3, [r7, #22]
 8002bc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bc6:	d12b      	bne.n	8002c20 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002bc8:	8b7b      	ldrh	r3, [r7, #26]
 8002bca:	f043 0313 	orr.w	r3, r3, #19
 8002bce:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002bd0:	89fb      	ldrh	r3, [r7, #14]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	8b7a      	ldrh	r2, [r7, #26]
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fcf7 	bl	80035cc <CODEC_IO_Write>
 8002bde:	4603      	mov	r3, r0
 8002be0:	461a      	mov	r2, r3
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	4413      	add	r3, r2
 8002be6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002be8:	89fb      	ldrh	r3, [r7, #14]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2202      	movs	r2, #2
 8002bee:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fcea 	bl	80035cc <CODEC_IO_Write>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	4413      	add	r3, r2
 8002c00:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8002c02:	89fb      	ldrh	r3, [r7, #14]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002c0a:	f240 4111 	movw	r1, #1041	@ 0x411
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fcdc 	bl	80035cc <CODEC_IO_Write>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	e06b      	b.n	8002cf8 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002c20:	8afb      	ldrh	r3, [r7, #22]
 8002c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c26:	d139      	bne.n	8002c9c <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002c28:	8b7b      	ldrh	r3, [r7, #26]
 8002c2a:	f043 0313 	orr.w	r3, r3, #19
 8002c2e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002c30:	89fb      	ldrh	r3, [r7, #14]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	8b7a      	ldrh	r2, [r7, #26]
 8002c36:	2101      	movs	r1, #1
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fcc7 	bl	80035cc <CODEC_IO_Write>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	461a      	mov	r2, r3
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	4413      	add	r3, r2
 8002c46:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002c48:	89fb      	ldrh	r3, [r7, #14]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fcba 	bl	80035cc <CODEC_IO_Write>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	4413      	add	r3, r2
 8002c60:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002c62:	89fb      	ldrh	r3, [r7, #14]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002c6a:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fcac 	bl	80035cc <CODEC_IO_Write>
 8002c74:	4603      	mov	r3, r0
 8002c76:	461a      	mov	r2, r3
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8002c7e:	89fb      	ldrh	r3, [r7, #14]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002c86:	f240 4111 	movw	r1, #1041	@ 0x411
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fc9e 	bl	80035cc <CODEC_IO_Write>
 8002c90:	4603      	mov	r3, r0
 8002c92:	461a      	mov	r2, r3
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	e02d      	b.n	8002cf8 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8002c9c:	8afb      	ldrh	r3, [r7, #22]
 8002c9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ca2:	d003      	beq.n	8002cac <wm8994_Init+0xd14>
 8002ca4:	8afb      	ldrh	r3, [r7, #22]
 8002ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002caa:	d125      	bne.n	8002cf8 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8002cac:	89fb      	ldrh	r3, [r7, #14]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	220b      	movs	r2, #11
 8002cb2:	2118      	movs	r1, #24
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fc89 	bl	80035cc <CODEC_IO_Write>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8002cc4:	89fb      	ldrh	r3, [r7, #14]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	220b      	movs	r2, #11
 8002cca:	211a      	movs	r1, #26
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fc7d 	bl	80035cc <CODEC_IO_Write>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002cdc:	89fb      	ldrh	r3, [r7, #14]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002ce4:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fc6f 	bl	80035cc <CODEC_IO_Write>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002cf8:	7afa      	ldrb	r2, [r7, #11]
 8002cfa:	89fb      	ldrh	r3, [r7, #14]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f8da 	bl	8002eb8 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8002d04:	69fb      	ldr	r3, [r7, #28]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop

08002d10 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8002d14:	f000 fdd2 	bl	80038bc <AUDIO_IO_DeInit>
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002d26:	f000 fdbf 	bl	80038a8 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fdf5 	bl	8003920 <AUDIO_IO_Read>
 8002d36:	4603      	mov	r3, r0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	6039      	str	r1, [r7, #0]
 8002d4a:	80fb      	strh	r3, [r7, #6]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 f9d1 	bl	8003100 <wm8994_SetMute>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4413      	add	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	2101      	movs	r1, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f9bc 	bl	8003100 <wm8994_SetMute>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2201      	movs	r2, #1
 8002d96:	2102      	movs	r1, #2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fc17 	bl	80035cc <CODEC_IO_Write>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	461a      	mov	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4413      	add	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8002da8:	68fb      	ldr	r3, [r7, #12]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 f99b 	bl	8003100 <wm8994_SetMute>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4413      	add	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8002dec:	4b31      	ldr	r3, [pc, #196]	@ (8002eb4 <wm8994_Stop+0xd8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d05a      	beq.n	8002eaa <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	2101      	movs	r1, #1
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 f981 	bl	8003100 <wm8994_SetMute>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d04e      	beq.n	8002eaa <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002e0c:	88fb      	ldrh	r3, [r7, #6]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e14:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fbd7 	bl	80035cc <CODEC_IO_Write>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	461a      	mov	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4413      	add	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e30:	f240 4122 	movw	r1, #1058	@ 0x422
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fbc9 	bl	80035cc <CODEC_IO_Write>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4413      	add	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2200      	movs	r2, #0
 8002e4a:	212d      	movs	r1, #45	@ 0x2d
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fbbd 	bl	80035cc <CODEC_IO_Write>
 8002e52:	4603      	mov	r3, r0
 8002e54:	461a      	mov	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4413      	add	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2200      	movs	r2, #0
 8002e62:	212e      	movs	r1, #46	@ 0x2e
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fbb1 	bl	80035cc <CODEC_IO_Write>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4413      	add	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2105      	movs	r1, #5
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fba5 	bl	80035cc <CODEC_IO_Write>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4413      	add	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2200      	movs	r2, #0
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fb99 	bl	80035cc <CODEC_IO_Write>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8002ea4:	4b03      	ldr	r3, [pc, #12]	@ (8002eb4 <wm8994_Stop+0xd8>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	200006f0 	.word	0x200006f0

08002eb8 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	460a      	mov	r2, r1
 8002ec2:	80fb      	strh	r3, [r7, #6]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8002ecc:	797b      	ldrb	r3, [r7, #5]
 8002ece:	2b64      	cmp	r3, #100	@ 0x64
 8002ed0:	d80b      	bhi.n	8002eea <wm8994_SetVolume+0x32>
 8002ed2:	797a      	ldrb	r2, [r7, #5]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	019b      	lsls	r3, r3, #6
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	4a86      	ldr	r2, [pc, #536]	@ (80030f4 <wm8994_SetVolume+0x23c>)
 8002edc:	fb82 1203 	smull	r1, r2, r2, r3
 8002ee0:	1152      	asrs	r2, r2, #5
 8002ee2:	17db      	asrs	r3, r3, #31
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	e000      	b.n	8002eec <wm8994_SetVolume+0x34>
 8002eea:	2364      	movs	r3, #100	@ 0x64
 8002eec:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8002eee:	4b82      	ldr	r3, [pc, #520]	@ (80030f8 <wm8994_SetVolume+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 809b 	beq.w	800302e <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8002ef8:	7afb      	ldrb	r3, [r7, #11]
 8002efa:	2b3e      	cmp	r3, #62	@ 0x3e
 8002efc:	d93d      	bls.n	8002f7a <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f8fc 	bl	8003100 <wm8994_SetMute>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f240 127f 	movw	r2, #383	@ 0x17f
 8002f18:	211c      	movs	r1, #28
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fb56 	bl	80035cc <CODEC_IO_Write>
 8002f20:	4603      	mov	r3, r0
 8002f22:	461a      	mov	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4413      	add	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f240 127f 	movw	r2, #383	@ 0x17f
 8002f32:	211d      	movs	r1, #29
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fb49 	bl	80035cc <CODEC_IO_Write>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4413      	add	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f240 127f 	movw	r2, #383	@ 0x17f
 8002f4c:	2126      	movs	r1, #38	@ 0x26
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fb3c 	bl	80035cc <CODEC_IO_Write>
 8002f54:	4603      	mov	r3, r0
 8002f56:	461a      	mov	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f240 127f 	movw	r2, #383	@ 0x17f
 8002f66:	2127      	movs	r1, #39	@ 0x27
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fb2f 	bl	80035cc <CODEC_IO_Write>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	461a      	mov	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4413      	add	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e059      	b.n	800302e <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8002f7a:	797b      	ldrb	r3, [r7, #5]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	2101      	movs	r1, #1
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 f8bb 	bl	8003100 <wm8994_SetMute>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	e04c      	b.n	800302e <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	2100      	movs	r1, #0
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 f8b1 	bl	8003100 <wm8994_SetMute>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8002fa6:	88fb      	ldrh	r3, [r7, #6]
 8002fa8:	b2d8      	uxtb	r0, r3
 8002faa:	7afb      	ldrb	r3, [r7, #11]
 8002fac:	b21b      	sxth	r3, r3
 8002fae:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002fb2:	b21b      	sxth	r3, r3
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	211c      	movs	r1, #28
 8002fba:	f000 fb07 	bl	80035cc <CODEC_IO_Write>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	b2d8      	uxtb	r0, r3
 8002fcc:	7afb      	ldrb	r3, [r7, #11]
 8002fce:	b21b      	sxth	r3, r3
 8002fd0:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002fd4:	b21b      	sxth	r3, r3
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	211d      	movs	r1, #29
 8002fdc:	f000 faf6 	bl	80035cc <CODEC_IO_Write>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	b2d8      	uxtb	r0, r3
 8002fee:	7afb      	ldrb	r3, [r7, #11]
 8002ff0:	b21b      	sxth	r3, r3
 8002ff2:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002ff6:	b21b      	sxth	r3, r3
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2126      	movs	r1, #38	@ 0x26
 8002ffe:	f000 fae5 	bl	80035cc <CODEC_IO_Write>
 8003002:	4603      	mov	r3, r0
 8003004:	461a      	mov	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4413      	add	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	b2d8      	uxtb	r0, r3
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	b21b      	sxth	r3, r3
 8003014:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003018:	b21b      	sxth	r3, r3
 800301a:	b29b      	uxth	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	2127      	movs	r1, #39	@ 0x27
 8003020:	f000 fad4 	bl	80035cc <CODEC_IO_Write>
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4413      	add	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800302e:	4b33      	ldr	r3, [pc, #204]	@ (80030fc <wm8994_SetVolume+0x244>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d059      	beq.n	80030ea <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8003036:	797b      	ldrb	r3, [r7, #5]
 8003038:	2b63      	cmp	r3, #99	@ 0x63
 800303a:	d80c      	bhi.n	8003056 <wm8994_SetVolume+0x19e>
 800303c:	797a      	ldrb	r2, [r7, #5]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	4a2b      	ldr	r2, [pc, #172]	@ (80030f4 <wm8994_SetVolume+0x23c>)
 8003048:	fb82 1203 	smull	r1, r2, r2, r3
 800304c:	1152      	asrs	r2, r2, #5
 800304e:	17db      	asrs	r3, r3, #31
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	e000      	b.n	8003058 <wm8994_SetVolume+0x1a0>
 8003056:	23ef      	movs	r3, #239	@ 0xef
 8003058:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	b2d8      	uxtb	r0, r3
 800305e:	7afb      	ldrb	r3, [r7, #11]
 8003060:	b21b      	sxth	r3, r3
 8003062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003066:	b21b      	sxth	r3, r3
 8003068:	b29b      	uxth	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003070:	f000 faac 	bl	80035cc <CODEC_IO_Write>
 8003074:	4603      	mov	r3, r0
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	b2d8      	uxtb	r0, r3
 8003082:	7afb      	ldrb	r3, [r7, #11]
 8003084:	b21b      	sxth	r3, r3
 8003086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800308a:	b21b      	sxth	r3, r3
 800308c:	b29b      	uxth	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	f240 4101 	movw	r1, #1025	@ 0x401
 8003094:	f000 fa9a 	bl	80035cc <CODEC_IO_Write>
 8003098:	4603      	mov	r3, r0
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4413      	add	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	b2d8      	uxtb	r0, r3
 80030a6:	7afb      	ldrb	r3, [r7, #11]
 80030a8:	b21b      	sxth	r3, r3
 80030aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ae:	b21b      	sxth	r3, r3
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	f240 4104 	movw	r1, #1028	@ 0x404
 80030b8:	f000 fa88 	bl	80035cc <CODEC_IO_Write>
 80030bc:	4603      	mov	r3, r0
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	b2d8      	uxtb	r0, r3
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	b21b      	sxth	r3, r3
 80030ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d2:	b21b      	sxth	r3, r3
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	f240 4105 	movw	r1, #1029	@ 0x405
 80030dc:	f000 fa76 	bl	80035cc <CODEC_IO_Write>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80030ea:	68fb      	ldr	r3, [r7, #12]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	51eb851f 	.word	0x51eb851f
 80030f8:	200006f0 	.word	0x200006f0
 80030fc:	200006f4 	.word	0x200006f4

08003100 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	6039      	str	r1, [r7, #0]
 800310a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8003110:	4b21      	ldr	r3, [pc, #132]	@ (8003198 <wm8994_SetMute+0x98>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d039      	beq.n	800318c <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d11c      	bne.n	8003158 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003126:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fa4e 	bl	80035cc <CODEC_IO_Write>
 8003130:	4603      	mov	r3, r0
 8003132:	461a      	mov	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4413      	add	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800313a:	88fb      	ldrh	r3, [r7, #6]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003142:	f240 4122 	movw	r1, #1058	@ 0x422
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fa40 	bl	80035cc <CODEC_IO_Write>
 800314c:	4603      	mov	r3, r0
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	e019      	b.n	800318c <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2210      	movs	r2, #16
 800315e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fa32 	bl	80035cc <CODEC_IO_Write>
 8003168:	4603      	mov	r3, r0
 800316a:	461a      	mov	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2210      	movs	r2, #16
 8003178:	f240 4122 	movw	r1, #1058	@ 0x422
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fa25 	bl	80035cc <CODEC_IO_Write>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4413      	add	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 800318c:	68fb      	ldr	r3, [r7, #12]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	200006f0 	.word	0x200006f0

0800319c <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	460a      	mov	r2, r1
 80031a6:	80fb      	strh	r3, [r7, #6]
 80031a8:	4613      	mov	r3, r2
 80031aa:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80031b0:	797b      	ldrb	r3, [r7, #5]
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	f000 808c 	beq.w	80032d0 <wm8994_SetOutputMode+0x134>
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	f300 80cb 	bgt.w	8003354 <wm8994_SetOutputMode+0x1b8>
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d002      	beq.n	80031c8 <wm8994_SetOutputMode+0x2c>
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d042      	beq.n	800324c <wm8994_SetOutputMode+0xb0>
 80031c6:	e0c5      	b.n	8003354 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80031d0:	2105      	movs	r1, #5
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f9fa 	bl	80035cc <CODEC_IO_Write>
 80031d8:	4603      	mov	r3, r0
 80031da:	461a      	mov	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2200      	movs	r2, #0
 80031e8:	f240 6101 	movw	r1, #1537	@ 0x601
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f9ed 	bl	80035cc <CODEC_IO_Write>
 80031f2:	4603      	mov	r3, r0
 80031f4:	461a      	mov	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4413      	add	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2200      	movs	r2, #0
 8003202:	f240 6102 	movw	r1, #1538	@ 0x602
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f9e0 	bl	80035cc <CODEC_IO_Write>
 800320c:	4603      	mov	r3, r0
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2202      	movs	r2, #2
 800321c:	f240 6104 	movw	r1, #1540	@ 0x604
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f9d3 	bl	80035cc <CODEC_IO_Write>
 8003226:	4603      	mov	r3, r0
 8003228:	461a      	mov	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2202      	movs	r2, #2
 8003236:	f240 6105 	movw	r1, #1541	@ 0x605
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f9c6 	bl	80035cc <CODEC_IO_Write>
 8003240:	4603      	mov	r3, r0
 8003242:	461a      	mov	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
    break;
 800324a:	e0c5      	b.n	80033d8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f240 3203 	movw	r2, #771	@ 0x303
 8003254:	2105      	movs	r1, #5
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f9b8 	bl	80035cc <CODEC_IO_Write>
 800325c:	4603      	mov	r3, r0
 800325e:	461a      	mov	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2201      	movs	r2, #1
 800326c:	f240 6101 	movw	r1, #1537	@ 0x601
 8003270:	4618      	mov	r0, r3
 8003272:	f000 f9ab 	bl	80035cc <CODEC_IO_Write>
 8003276:	4603      	mov	r3, r0
 8003278:	461a      	mov	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4413      	add	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2201      	movs	r2, #1
 8003286:	f240 6102 	movw	r1, #1538	@ 0x602
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f99e 	bl	80035cc <CODEC_IO_Write>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2200      	movs	r2, #0
 80032a0:	f240 6104 	movw	r1, #1540	@ 0x604
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 f991 	bl	80035cc <CODEC_IO_Write>
 80032aa:	4603      	mov	r3, r0
 80032ac:	461a      	mov	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4413      	add	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2200      	movs	r2, #0
 80032ba:	f240 6105 	movw	r1, #1541	@ 0x605
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f984 	bl	80035cc <CODEC_IO_Write>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
    break;
 80032ce:	e083      	b.n	80033d8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80032d8:	2105      	movs	r1, #5
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f976 	bl	80035cc <CODEC_IO_Write>
 80032e0:	4603      	mov	r3, r0
 80032e2:	461a      	mov	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2201      	movs	r2, #1
 80032f0:	f240 6101 	movw	r1, #1537	@ 0x601
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 f969 	bl	80035cc <CODEC_IO_Write>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4413      	add	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2201      	movs	r2, #1
 800330a:	f240 6102 	movw	r1, #1538	@ 0x602
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f95c 	bl	80035cc <CODEC_IO_Write>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2202      	movs	r2, #2
 8003324:	f240 6104 	movw	r1, #1540	@ 0x604
 8003328:	4618      	mov	r0, r3
 800332a:	f000 f94f 	bl	80035cc <CODEC_IO_Write>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4413      	add	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2202      	movs	r2, #2
 800333e:	f240 6105 	movw	r1, #1541	@ 0x605
 8003342:	4618      	mov	r0, r3
 8003344:	f000 f942 	bl	80035cc <CODEC_IO_Write>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
    break;
 8003352:	e041      	b.n	80033d8 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f240 3203 	movw	r2, #771	@ 0x303
 800335c:	2105      	movs	r1, #5
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f934 	bl	80035cc <CODEC_IO_Write>
 8003364:	4603      	mov	r3, r0
 8003366:	461a      	mov	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2201      	movs	r2, #1
 8003374:	f240 6101 	movw	r1, #1537	@ 0x601
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f927 	bl	80035cc <CODEC_IO_Write>
 800337e:	4603      	mov	r3, r0
 8003380:	461a      	mov	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4413      	add	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2201      	movs	r2, #1
 800338e:	f240 6102 	movw	r1, #1538	@ 0x602
 8003392:	4618      	mov	r0, r3
 8003394:	f000 f91a 	bl	80035cc <CODEC_IO_Write>
 8003398:	4603      	mov	r3, r0
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2200      	movs	r2, #0
 80033a8:	f240 6104 	movw	r1, #1540	@ 0x604
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 f90d 	bl	80035cc <CODEC_IO_Write>
 80033b2:	4603      	mov	r3, r0
 80033b4:	461a      	mov	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4413      	add	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2200      	movs	r2, #0
 80033c2:	f240 6105 	movw	r1, #1541	@ 0x605
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f900 	bl	80035cc <CODEC_IO_Write>
 80033cc:	4603      	mov	r3, r0
 80033ce:	461a      	mov	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
    break;    
 80033d6:	bf00      	nop
  }  
  return counter;
 80033d8:	68fb      	ldr	r3, [r7, #12]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	4a64      	ldr	r2, [pc, #400]	@ (8003588 <wm8994_SetFrequency+0x1a4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d079      	beq.n	80034f0 <wm8994_SetFrequency+0x10c>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	4a62      	ldr	r2, [pc, #392]	@ (8003588 <wm8994_SetFrequency+0x1a4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	f200 80ad 	bhi.w	8003560 <wm8994_SetFrequency+0x17c>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800340c:	4293      	cmp	r3, r2
 800340e:	d061      	beq.n	80034d4 <wm8994_SetFrequency+0xf0>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003416:	4293      	cmp	r3, r2
 8003418:	f200 80a2 	bhi.w	8003560 <wm8994_SetFrequency+0x17c>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003422:	4293      	cmp	r3, r2
 8003424:	f000 808e 	beq.w	8003544 <wm8994_SetFrequency+0x160>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800342e:	4293      	cmp	r3, r2
 8003430:	f200 8096 	bhi.w	8003560 <wm8994_SetFrequency+0x17c>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800343a:	d03d      	beq.n	80034b8 <wm8994_SetFrequency+0xd4>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003442:	f200 808d 	bhi.w	8003560 <wm8994_SetFrequency+0x17c>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	f245 6222 	movw	r2, #22050	@ 0x5622
 800344c:	4293      	cmp	r3, r2
 800344e:	d06b      	beq.n	8003528 <wm8994_SetFrequency+0x144>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003456:	4293      	cmp	r3, r2
 8003458:	f200 8082 	bhi.w	8003560 <wm8994_SetFrequency+0x17c>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003462:	d01b      	beq.n	800349c <wm8994_SetFrequency+0xb8>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800346a:	d879      	bhi.n	8003560 <wm8994_SetFrequency+0x17c>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003472:	d005      	beq.n	8003480 <wm8994_SetFrequency+0x9c>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800347a:	4293      	cmp	r3, r2
 800347c:	d046      	beq.n	800350c <wm8994_SetFrequency+0x128>
 800347e:	e06f      	b.n	8003560 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2203      	movs	r2, #3
 8003486:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f89e 	bl	80035cc <CODEC_IO_Write>
 8003490:	4603      	mov	r3, r0
 8003492:	461a      	mov	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4413      	add	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
    break;
 800349a:	e06f      	b.n	800357c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2233      	movs	r2, #51	@ 0x33
 80034a2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f890 	bl	80035cc <CODEC_IO_Write>
 80034ac:	4603      	mov	r3, r0
 80034ae:	461a      	mov	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
    break;
 80034b6:	e061      	b.n	800357c <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2263      	movs	r2, #99	@ 0x63
 80034be:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f882 	bl	80035cc <CODEC_IO_Write>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
    break;
 80034d2:	e053      	b.n	800357c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2283      	movs	r2, #131	@ 0x83
 80034da:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f874 	bl	80035cc <CODEC_IO_Write>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4413      	add	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
    break;
 80034ee:	e045      	b.n	800357c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	22a3      	movs	r2, #163	@ 0xa3
 80034f6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f866 	bl	80035cc <CODEC_IO_Write>
 8003500:	4603      	mov	r3, r0
 8003502:	461a      	mov	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4413      	add	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
    break;
 800350a:	e037      	b.n	800357c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2213      	movs	r2, #19
 8003512:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f858 	bl	80035cc <CODEC_IO_Write>
 800351c:	4603      	mov	r3, r0
 800351e:	461a      	mov	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4413      	add	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
    break;
 8003526:	e029      	b.n	800357c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2243      	movs	r2, #67	@ 0x43
 800352e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f84a 	bl	80035cc <CODEC_IO_Write>
 8003538:	4603      	mov	r3, r0
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
    break;
 8003542:	e01b      	b.n	800357c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2273      	movs	r2, #115	@ 0x73
 800354a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f83c 	bl	80035cc <CODEC_IO_Write>
 8003554:	4603      	mov	r3, r0
 8003556:	461a      	mov	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4413      	add	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
    break; 
 800355e:	e00d      	b.n	800357c <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003560:	88fb      	ldrh	r3, [r7, #6]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2283      	movs	r2, #131	@ 0x83
 8003566:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800356a:	4618      	mov	r0, r3
 800356c:	f000 f82e 	bl	80035cc <CODEC_IO_Write>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
    break; 
 800357a:	bf00      	nop
  }
  return counter;
 800357c:	68fb      	ldr	r3, [r7, #12]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	00017700 	.word	0x00017700

0800358c <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2200      	movs	r2, #0
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f812 	bl	80035cc <CODEC_IO_Write>
 80035a8:	4603      	mov	r3, r0
 80035aa:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80035ac:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <wm8994_Reset+0x38>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80035b2:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <wm8994_Reset+0x3c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

  return counter;
 80035b8:	68fb      	ldr	r3, [r7, #12]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200006f0 	.word	0x200006f0
 80035c8:	200006f4 	.word	0x200006f4

080035cc <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
 80035d6:	460b      	mov	r3, r1
 80035d8:	80bb      	strh	r3, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80035e2:	887a      	ldrh	r2, [r7, #2]
 80035e4:	88b9      	ldrh	r1, [r7, #4]
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 f96f 	bl	80038cc <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	b2db      	uxtb	r3, r3
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	@ 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a51      	ldr	r2, [pc, #324]	@ (800374c <I2Cx_MspInit+0x150>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d14d      	bne.n	80036a8 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800360c:	4b50      	ldr	r3, [pc, #320]	@ (8003750 <I2Cx_MspInit+0x154>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003610:	4a4f      	ldr	r2, [pc, #316]	@ (8003750 <I2Cx_MspInit+0x154>)
 8003612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003616:	6313      	str	r3, [r2, #48]	@ 0x30
 8003618:	4b4d      	ldr	r3, [pc, #308]	@ (8003750 <I2Cx_MspInit+0x154>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003624:	2380      	movs	r3, #128	@ 0x80
 8003626:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003628:	2312      	movs	r3, #18
 800362a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003630:	2302      	movs	r3, #2
 8003632:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003634:	2304      	movs	r3, #4
 8003636:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003638:	f107 031c 	add.w	r3, r7, #28
 800363c:	4619      	mov	r1, r3
 800363e:	4845      	ldr	r0, [pc, #276]	@ (8003754 <I2Cx_MspInit+0x158>)
 8003640:	f001 fb48 	bl	8004cd4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800364a:	f107 031c 	add.w	r3, r7, #28
 800364e:	4619      	mov	r1, r3
 8003650:	4840      	ldr	r0, [pc, #256]	@ (8003754 <I2Cx_MspInit+0x158>)
 8003652:	f001 fb3f 	bl	8004cd4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003656:	4b3e      	ldr	r3, [pc, #248]	@ (8003750 <I2Cx_MspInit+0x154>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	4a3d      	ldr	r2, [pc, #244]	@ (8003750 <I2Cx_MspInit+0x154>)
 800365c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003660:	6413      	str	r3, [r2, #64]	@ 0x40
 8003662:	4b3b      	ldr	r3, [pc, #236]	@ (8003750 <I2Cx_MspInit+0x154>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800366e:	4b38      	ldr	r3, [pc, #224]	@ (8003750 <I2Cx_MspInit+0x154>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4a37      	ldr	r2, [pc, #220]	@ (8003750 <I2Cx_MspInit+0x154>)
 8003674:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003678:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800367a:	4b35      	ldr	r3, [pc, #212]	@ (8003750 <I2Cx_MspInit+0x154>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	4a34      	ldr	r2, [pc, #208]	@ (8003750 <I2Cx_MspInit+0x154>)
 8003680:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003684:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	210f      	movs	r1, #15
 800368a:	2048      	movs	r0, #72	@ 0x48
 800368c:	f000 fe77 	bl	800437e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003690:	2048      	movs	r0, #72	@ 0x48
 8003692:	f000 fe90 	bl	80043b6 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003696:	2200      	movs	r2, #0
 8003698:	210f      	movs	r1, #15
 800369a:	2049      	movs	r0, #73	@ 0x49
 800369c:	f000 fe6f 	bl	800437e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80036a0:	2049      	movs	r0, #73	@ 0x49
 80036a2:	f000 fe88 	bl	80043b6 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80036a6:	e04d      	b.n	8003744 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80036a8:	4b29      	ldr	r3, [pc, #164]	@ (8003750 <I2Cx_MspInit+0x154>)
 80036aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ac:	4a28      	ldr	r2, [pc, #160]	@ (8003750 <I2Cx_MspInit+0x154>)
 80036ae:	f043 0302 	orr.w	r3, r3, #2
 80036b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80036b4:	4b26      	ldr	r3, [pc, #152]	@ (8003750 <I2Cx_MspInit+0x154>)
 80036b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80036c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036c4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80036c6:	2312      	movs	r3, #18
 80036c8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80036ce:	2302      	movs	r3, #2
 80036d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80036d2:	2304      	movs	r3, #4
 80036d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80036d6:	f107 031c 	add.w	r3, r7, #28
 80036da:	4619      	mov	r1, r3
 80036dc:	481e      	ldr	r0, [pc, #120]	@ (8003758 <I2Cx_MspInit+0x15c>)
 80036de:	f001 faf9 	bl	8004cd4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80036e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80036e8:	f107 031c 	add.w	r3, r7, #28
 80036ec:	4619      	mov	r1, r3
 80036ee:	481a      	ldr	r0, [pc, #104]	@ (8003758 <I2Cx_MspInit+0x15c>)
 80036f0:	f001 faf0 	bl	8004cd4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80036f4:	4b16      	ldr	r3, [pc, #88]	@ (8003750 <I2Cx_MspInit+0x154>)
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	4a15      	ldr	r2, [pc, #84]	@ (8003750 <I2Cx_MspInit+0x154>)
 80036fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80036fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003700:	4b13      	ldr	r3, [pc, #76]	@ (8003750 <I2Cx_MspInit+0x154>)
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800370c:	4b10      	ldr	r3, [pc, #64]	@ (8003750 <I2Cx_MspInit+0x154>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4a0f      	ldr	r2, [pc, #60]	@ (8003750 <I2Cx_MspInit+0x154>)
 8003712:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003716:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003718:	4b0d      	ldr	r3, [pc, #52]	@ (8003750 <I2Cx_MspInit+0x154>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4a0c      	ldr	r2, [pc, #48]	@ (8003750 <I2Cx_MspInit+0x154>)
 800371e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003722:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003724:	2200      	movs	r2, #0
 8003726:	210f      	movs	r1, #15
 8003728:	201f      	movs	r0, #31
 800372a:	f000 fe28 	bl	800437e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800372e:	201f      	movs	r0, #31
 8003730:	f000 fe41 	bl	80043b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003734:	2200      	movs	r2, #0
 8003736:	210f      	movs	r1, #15
 8003738:	2020      	movs	r0, #32
 800373a:	f000 fe20 	bl	800437e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800373e:	2020      	movs	r0, #32
 8003740:	f000 fe39 	bl	80043b6 <HAL_NVIC_EnableIRQ>
}
 8003744:	bf00      	nop
 8003746:	3730      	adds	r7, #48	@ 0x30
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	200006f8 	.word	0x200006f8
 8003750:	40023800 	.word	0x40023800
 8003754:	40021c00 	.word	0x40021c00
 8003758:	40020400 	.word	0x40020400

0800375c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f002 f8df 	bl	8005928 <HAL_I2C_GetState>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d125      	bne.n	80037bc <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a14      	ldr	r2, [pc, #80]	@ (80037c4 <I2Cx_Init+0x68>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d103      	bne.n	8003780 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a13      	ldr	r2, [pc, #76]	@ (80037c8 <I2Cx_Init+0x6c>)
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e002      	b.n	8003786 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a12      	ldr	r2, [pc, #72]	@ (80037cc <I2Cx_Init+0x70>)
 8003784:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a11      	ldr	r2, [pc, #68]	@ (80037d0 <I2Cx_Init+0x74>)
 800378a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ff23 	bl	80035fc <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f001 fda8 	bl	800530c <HAL_I2C_Init>
  }
}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	200006f8 	.word	0x200006f8
 80037c8:	40005c00 	.word	0x40005c00
 80037cc:	40005400 	.word	0x40005400
 80037d0:	40912732 	.word	0x40912732

080037d4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	@ 0x28
 80037d8:	af04      	add	r7, sp, #16
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	4608      	mov	r0, r1
 80037de:	4611      	mov	r1, r2
 80037e0:	461a      	mov	r2, r3
 80037e2:	4603      	mov	r3, r0
 80037e4:	72fb      	strb	r3, [r7, #11]
 80037e6:	460b      	mov	r3, r1
 80037e8:	813b      	strh	r3, [r7, #8]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80037f2:	7afb      	ldrb	r3, [r7, #11]
 80037f4:	b299      	uxth	r1, r3
 80037f6:	88f8      	ldrh	r0, [r7, #6]
 80037f8:	893a      	ldrh	r2, [r7, #8]
 80037fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037fe:	9302      	str	r3, [sp, #8]
 8003800:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	4603      	mov	r3, r0
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f001 ff72 	bl	80056f4 <HAL_I2C_Mem_Read>
 8003810:	4603      	mov	r3, r0
 8003812:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d004      	beq.n	8003824 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800381a:	7afb      	ldrb	r3, [r7, #11]
 800381c:	4619      	mov	r1, r3
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f832 	bl	8003888 <I2Cx_Error>
  }
  return status;    
 8003824:	7dfb      	ldrb	r3, [r7, #23]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b08a      	sub	sp, #40	@ 0x28
 8003832:	af04      	add	r7, sp, #16
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	4608      	mov	r0, r1
 8003838:	4611      	mov	r1, r2
 800383a:	461a      	mov	r2, r3
 800383c:	4603      	mov	r3, r0
 800383e:	72fb      	strb	r3, [r7, #11]
 8003840:	460b      	mov	r3, r1
 8003842:	813b      	strh	r3, [r7, #8]
 8003844:	4613      	mov	r3, r2
 8003846:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800384c:	7afb      	ldrb	r3, [r7, #11]
 800384e:	b299      	uxth	r1, r3
 8003850:	88f8      	ldrh	r0, [r7, #6]
 8003852:	893a      	ldrh	r2, [r7, #8]
 8003854:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003858:	9302      	str	r3, [sp, #8]
 800385a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	4603      	mov	r3, r0
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f001 fe31 	bl	80054cc <HAL_I2C_Mem_Write>
 800386a:	4603      	mov	r3, r0
 800386c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003874:	7afb      	ldrb	r3, [r7, #11]
 8003876:	4619      	mov	r1, r3
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f805 	bl	8003888 <I2Cx_Error>
  }
  return status;
 800387e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f001 fdd5 	bl	8005444 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff ff5e 	bl	800375c <I2Cx_Init>
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80038ac:	4802      	ldr	r0, [pc, #8]	@ (80038b8 <AUDIO_IO_Init+0x10>)
 80038ae:	f7ff ff55 	bl	800375c <I2Cx_Init>
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	200006f8 	.word	0x200006f8

080038bc <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
 80038d6:	460b      	mov	r3, r1
 80038d8:	80bb      	strh	r3, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80038e2:	89fb      	ldrh	r3, [r7, #14]
 80038e4:	0a1b      	lsrs	r3, r3, #8
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80038ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	b21a      	sxth	r2, r3
 80038f2:	887b      	ldrh	r3, [r7, #2]
 80038f4:	b21b      	sxth	r3, r3
 80038f6:	4313      	orrs	r3, r2
 80038f8:	b21b      	sxth	r3, r3
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80038fe:	88ba      	ldrh	r2, [r7, #4]
 8003900:	79f9      	ldrb	r1, [r7, #7]
 8003902:	2302      	movs	r3, #2
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	1cbb      	adds	r3, r7, #2
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2302      	movs	r3, #2
 800390c:	4803      	ldr	r0, [pc, #12]	@ (800391c <AUDIO_IO_Write+0x50>)
 800390e:	f7ff ff8e 	bl	800382e <I2Cx_WriteMultiple>
}
 8003912:	bf00      	nop
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	200006f8 	.word	0x200006f8

08003920 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af02      	add	r7, sp, #8
 8003926:	4603      	mov	r3, r0
 8003928:	460a      	mov	r2, r1
 800392a:	71fb      	strb	r3, [r7, #7]
 800392c:	4613      	mov	r3, r2
 800392e:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	81bb      	strh	r3, [r7, #12]
 8003934:	2300      	movs	r3, #0
 8003936:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003938:	88ba      	ldrh	r2, [r7, #4]
 800393a:	79f9      	ldrb	r1, [r7, #7]
 800393c:	2302      	movs	r3, #2
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	f107 030c 	add.w	r3, r7, #12
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	2302      	movs	r3, #2
 8003948:	480a      	ldr	r0, [pc, #40]	@ (8003974 <AUDIO_IO_Read+0x54>)
 800394a:	f7ff ff43 	bl	80037d4 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 800394e:	89bb      	ldrh	r3, [r7, #12]
 8003950:	0a1b      	lsrs	r3, r3, #8
 8003952:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003954:	89bb      	ldrh	r3, [r7, #12]
 8003956:	b21b      	sxth	r3, r3
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	b21a      	sxth	r2, r3
 800395c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003960:	4313      	orrs	r3, r2
 8003962:	b21b      	sxth	r3, r3
 8003964:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8003966:	89fb      	ldrh	r3, [r7, #14]
 8003968:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 800396a:	89bb      	ldrh	r3, [r7, #12]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	200006f8 	.word	0x200006f8

08003978 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fbfd 	bl	8004180 <HAL_Delay>
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8003998:	480e      	ldr	r0, [pc, #56]	@ (80039d4 <HAL_SAI_ErrorCallback+0x44>)
 800399a:	f004 f85f 	bl	8007a5c <HAL_SAI_GetState>
 800399e:	4603      	mov	r3, r0
 80039a0:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80039a2:	480d      	ldr	r0, [pc, #52]	@ (80039d8 <HAL_SAI_ErrorCallback+0x48>)
 80039a4:	f004 f85a 	bl	8007a5c <HAL_SAI_GetState>
 80039a8:	4603      	mov	r3, r0
 80039aa:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d002      	beq.n	80039b8 <HAL_SAI_ErrorCallback+0x28>
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	2b12      	cmp	r3, #18
 80039b6:	d101      	bne.n	80039bc <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 80039b8:	f000 f810 	bl	80039dc <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 80039bc:	7bbb      	ldrb	r3, [r7, #14]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d002      	beq.n	80039c8 <HAL_SAI_ErrorCallback+0x38>
 80039c2:	7bbb      	ldrb	r3, [r7, #14]
 80039c4:	2b22      	cmp	r3, #34	@ 0x22
 80039c6:	d101      	bne.n	80039cc <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 80039c8:	f000 f9f6 	bl	8003db8 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000750 	.word	0x20000750
 80039d8:	200007d4 	.word	0x200007d4

080039dc <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08c      	sub	sp, #48	@ 0x30
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80039f6:	4b63      	ldr	r3, [pc, #396]	@ (8003b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	4a62      	ldr	r2, [pc, #392]	@ (8003b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 80039fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a02:	4b60      	ldr	r3, [pc, #384]	@ (8003b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8003a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	4a5c      	ldr	r2, [pc, #368]	@ (8003b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a1a:	4b5a      	ldr	r3, [pc, #360]	@ (8003b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8003a26:	4b57      	ldr	r3, [pc, #348]	@ (8003b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	4a56      	ldr	r2, [pc, #344]	@ (8003b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a32:	4b54      	ldr	r3, [pc, #336]	@ (8003b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8003a3e:	4b51      	ldr	r3, [pc, #324]	@ (8003b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	4a50      	ldr	r2, [pc, #320]	@ (8003b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8003a56:	2380      	movs	r3, #128	@ 0x80
 8003a58:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003a62:	2303      	movs	r3, #3
 8003a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003a66:	230a      	movs	r3, #10
 8003a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8003a6a:	f107 031c 	add.w	r3, r7, #28
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4845      	ldr	r0, [pc, #276]	@ (8003b88 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003a72:	f001 f92f 	bl	8004cd4 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8003a76:	2320      	movs	r3, #32
 8003a78:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8003a86:	230a      	movs	r3, #10
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003a8a:	f107 031c 	add.w	r3, r7, #28
 8003a8e:	4619      	mov	r1, r3
 8003a90:	483d      	ldr	r0, [pc, #244]	@ (8003b88 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003a92:	f001 f91f 	bl	8004cd4 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8003a96:	2340      	movs	r3, #64	@ 0x40
 8003a98:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003aa6:	230a      	movs	r3, #10
 8003aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003aaa:	f107 031c 	add.w	r3, r7, #28
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4835      	ldr	r0, [pc, #212]	@ (8003b88 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003ab2:	f001 f90f 	bl	8004cd4 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8003ab6:	2310      	movs	r3, #16
 8003ab8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003aba:	2302      	movs	r3, #2
 8003abc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003ac6:	230a      	movs	r3, #10
 8003ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8003aca:	f107 031c 	add.w	r3, r7, #28
 8003ace:	4619      	mov	r1, r3
 8003ad0:	482d      	ldr	r0, [pc, #180]	@ (8003b88 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003ad2:	f001 f8ff 	bl	8004cd4 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8003ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8003b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ada:	4a2a      	ldr	r2, [pc, #168]	@ (8003b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003adc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ae2:	4b28      	ldr	r3, [pc, #160]	@ (8003b84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a26      	ldr	r2, [pc, #152]	@ (8003b8c <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d138      	bne.n	8003b6a <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8003af8:	4b25      	ldr	r3, [pc, #148]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003afa:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003afe:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003b00:	4b23      	ldr	r3, [pc, #140]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b02:	2240      	movs	r2, #64	@ 0x40
 8003b04:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003b06:	4b22      	ldr	r3, [pc, #136]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003b0c:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b12:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003b14:	4b1e      	ldr	r3, [pc, #120]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b1a:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b22:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8003b24:	4b1a      	ldr	r3, [pc, #104]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b2a:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003b2c:	4b18      	ldr	r3, [pc, #96]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b32:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8003b34:	4b16      	ldr	r3, [pc, #88]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b36:	2204      	movs	r2, #4
 8003b38:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003b3a:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003b40:	4b13      	ldr	r3, [pc, #76]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003b46:	4b12      	ldr	r3, [pc, #72]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8003b4c:	4b10      	ldr	r3, [pc, #64]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b4e:	4a11      	ldr	r2, [pc, #68]	@ (8003b94 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8003b50:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a0e      	ldr	r2, [pc, #56]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b56:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003b58:	4a0d      	ldr	r2, [pc, #52]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8003b5e:	480c      	ldr	r0, [pc, #48]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b60:	f000 fcf2 	bl	8004548 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8003b64:	480a      	ldr	r0, [pc, #40]	@ (8003b90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003b66:	f000 fc41 	bl	80043ec <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	210e      	movs	r1, #14
 8003b6e:	203c      	movs	r0, #60	@ 0x3c
 8003b70:	f000 fc05 	bl	800437e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8003b74:	203c      	movs	r0, #60	@ 0x3c
 8003b76:	f000 fc1e 	bl	80043b6 <HAL_NVIC_EnableIRQ>
}
 8003b7a:	bf00      	nop
 8003b7c:	3730      	adds	r7, #48	@ 0x30
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023800 	.word	0x40023800
 8003b88:	40022000 	.word	0x40022000
 8003b8c:	40015c04 	.word	0x40015c04
 8003b90:	20000858 	.word	0x20000858
 8003b94:	40026470 	.word	0x40026470

08003b98 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b0a6      	sub	sp, #152	@ 0x98
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003ba4:	f107 0314 	add.w	r3, r7, #20
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f003 fa57 	bl	800705c <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d009      	beq.n	8003bcc <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d112      	bne.n	8003bf2 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003bcc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003bd0:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003bd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003bd6:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8003bd8:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8003bdc:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8003bde:	2302      	movs	r3, #2
 8003be0:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8003be2:	2313      	movs	r3, #19
 8003be4:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003be6:	f107 0314 	add.w	r3, r7, #20
 8003bea:	4618      	mov	r0, r3
 8003bec:	f002 fe46 	bl	800687c <HAL_RCCEx_PeriphCLKConfig>
 8003bf0:	e012      	b.n	8003c18 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003bf2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003bf6:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003bf8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003bfc:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8003bfe:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8003c02:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8003c04:	2307      	movs	r3, #7
 8003c06:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	4618      	mov	r0, r3
 8003c12:	f002 fe33 	bl	800687c <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8003c16:	bf00      	nop
 8003c18:	bf00      	nop
 8003c1a:	3798      	adds	r7, #152	@ 0x98
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	68f9      	ldr	r1, [r7, #12]
 8003c32:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003c36:	f000 f805 	bl	8003c44 <BSP_AUDIO_IN_InitEx>
 8003c3a:	4603      	mov	r3, r0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b089      	sub	sp, #36	@ 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4603      	mov	r3, r0
 8003c52:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8003c5c:	89fb      	ldrh	r3, [r7, #14]
 8003c5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c62:	d006      	beq.n	8003c72 <BSP_AUDIO_IN_InitEx+0x2e>
 8003c64:	89fb      	ldrh	r3, [r7, #14]
 8003c66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c6a:	d002      	beq.n	8003c72 <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	77fb      	strb	r3, [r7, #31]
 8003c70:	e046      	b.n	8003d00 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8003c72:	f000 fa11 	bl	8004098 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8003c76:	2200      	movs	r2, #0
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	4824      	ldr	r0, [pc, #144]	@ (8003d0c <BSP_AUDIO_IN_InitEx+0xc8>)
 8003c7c:	f7ff ff8c 	bl	8003b98 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003c80:	4b22      	ldr	r3, [pc, #136]	@ (8003d0c <BSP_AUDIO_IN_InitEx+0xc8>)
 8003c82:	4a23      	ldr	r2, [pc, #140]	@ (8003d10 <BSP_AUDIO_IN_InitEx+0xcc>)
 8003c84:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8003c86:	4821      	ldr	r0, [pc, #132]	@ (8003d0c <BSP_AUDIO_IN_InitEx+0xc8>)
 8003c88:	f003 fee8 	bl	8007a5c <HAL_SAI_GetState>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d107      	bne.n	8003ca2 <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8003c92:	2100      	movs	r1, #0
 8003c94:	481d      	ldr	r0, [pc, #116]	@ (8003d0c <BSP_AUDIO_IN_InitEx+0xc8>)
 8003c96:	f7ff fea9 	bl	80039ec <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	481b      	ldr	r0, [pc, #108]	@ (8003d0c <BSP_AUDIO_IN_InitEx+0xc8>)
 8003c9e:	f000 f893 	bl	8003dc8 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8003ca2:	89fb      	ldrh	r3, [r7, #14]
 8003ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ca8:	d102      	bne.n	8003cb0 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8003caa:	230a      	movs	r3, #10
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	e001      	b.n	8003cb4 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8003cb0:	2305      	movs	r3, #5
 8003cb2:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	69b9      	ldr	r1, [r7, #24]
 8003cb8:	2001      	movs	r0, #1
 8003cba:	f000 f937 	bl	8003f2c <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8003cbe:	4b15      	ldr	r3, [pc, #84]	@ (8003d14 <BSP_AUDIO_IN_InitEx+0xd0>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2034      	movs	r0, #52	@ 0x34
 8003cc4:	4798      	blx	r3
 8003cc6:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f648 1294 	movw	r2, #35220	@ 0x8994
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d109      	bne.n	8003ce6 <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8003cd2:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <BSP_AUDIO_IN_InitEx+0xd0>)
 8003cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd6:	2034      	movs	r0, #52	@ 0x34
 8003cd8:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8003cda:	4b0f      	ldr	r3, [pc, #60]	@ (8003d18 <BSP_AUDIO_IN_InitEx+0xd4>)
 8003cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8003d14 <BSP_AUDIO_IN_InitEx+0xd0>)
 8003cde:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e001      	b.n	8003cea <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8003cea:	7ffb      	ldrb	r3, [r7, #31]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d107      	bne.n	8003d00 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8003cf0:	4b09      	ldr	r3, [pc, #36]	@ (8003d18 <BSP_AUDIO_IN_InitEx+0xd4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681c      	ldr	r4, [r3, #0]
 8003cf6:	89f9      	ldrh	r1, [r7, #14]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2264      	movs	r2, #100	@ 0x64
 8003cfc:	2034      	movs	r0, #52	@ 0x34
 8003cfe:	47a0      	blx	r4
    }
  }
  return ret;
 8003d00:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3724      	adds	r7, #36	@ 0x24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd90      	pop	{r4, r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200007d4 	.word	0x200007d4
 8003d10:	40015c24 	.word	0x40015c24
 8003d14:	20000004 	.word	0x20000004
 8003d18:	2000074c 	.word	0x2000074c

08003d1c <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4805      	ldr	r0, [pc, #20]	@ (8003d48 <BSP_AUDIO_IN_Record+0x2c>)
 8003d34:	f003 fe04 	bl	8007940 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	b2db      	uxtb	r3, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	200007d4 	.word	0x200007d4

08003d4c <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8003d54:	480c      	ldr	r0, [pc, #48]	@ (8003d88 <BSP_AUDIO_IN_Stop+0x3c>)
 8003d56:	f003 fd80 	bl	800785a <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <BSP_AUDIO_IN_Stop+0x40>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	2034      	movs	r0, #52	@ 0x34
 8003d64:	4798      	blx	r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e006      	b.n	8003d7e <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d102      	bne.n	8003d7c <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 8003d76:	2001      	movs	r0, #1
 8003d78:	f000 fa02 	bl	8004180 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8003d7c:	2300      	movs	r3, #0
  }
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	200007d4 	.word	0x200007d4
 8003d8c:	2000074c 	.word	0x2000074c

08003d90 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8003d98:	f006 fc0a 	bl	800a5b0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8003dac:	f006 fc48 	bl	800a640 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	@ 0x30
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8003dd2:	4b50      	ldr	r3, [pc, #320]	@ (8003f14 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd6:	4a4f      	ldr	r2, [pc, #316]	@ (8003f14 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003dd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dde:	4b4d      	ldr	r3, [pc, #308]	@ (8003f14 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8003dea:	4b4a      	ldr	r3, [pc, #296]	@ (8003f14 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	4a49      	ldr	r2, [pc, #292]	@ (8003f14 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003df0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003df6:	4b47      	ldr	r3, [pc, #284]	@ (8003f14 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8003e02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e06:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003e10:	2302      	movs	r3, #2
 8003e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8003e14:	230a      	movs	r3, #10
 8003e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8003e18:	f107 031c 	add.w	r3, r7, #28
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	483e      	ldr	r0, [pc, #248]	@ (8003f18 <BSP_AUDIO_IN_MspInit+0x150>)
 8003e20:	f000 ff58 	bl	8004cd4 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8003e24:	4b3b      	ldr	r3, [pc, #236]	@ (8003f14 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e28:	4a3a      	ldr	r2, [pc, #232]	@ (8003f14 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e30:	4b38      	ldr	r3, [pc, #224]	@ (8003f14 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8003e3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e40:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003e42:	2300      	movs	r3, #0
 8003e44:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8003e4e:	f107 031c 	add.w	r3, r7, #28
 8003e52:	4619      	mov	r1, r3
 8003e54:	4831      	ldr	r0, [pc, #196]	@ (8003f1c <BSP_AUDIO_IN_MspInit+0x154>)
 8003e56:	f000 ff3d 	bl	8004cd4 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8003e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8003f14 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f14 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003e60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e66:	4b2b      	ldr	r3, [pc, #172]	@ (8003f14 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a2a      	ldr	r2, [pc, #168]	@ (8003f20 <BSP_AUDIO_IN_MspInit+0x158>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d137      	bne.n	8003eec <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8003e7c:	4b29      	ldr	r3, [pc, #164]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003e82:	4b28      	ldr	r3, [pc, #160]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003e88:	4b26      	ldr	r3, [pc, #152]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8003e8e:	4b25      	ldr	r3, [pc, #148]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003e90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e94:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003e96:	4b23      	ldr	r3, [pc, #140]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003e98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e9c:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8003e9e:	4b21      	ldr	r3, [pc, #132]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ea0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ea4:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8003ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ea8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003eac:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003eae:	4b1d      	ldr	r3, [pc, #116]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003eb0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003eb4:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003ebc:	4b19      	ldr	r3, [pc, #100]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003ec2:	4b18      	ldr	r3, [pc, #96]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8003ec8:	4b16      	ldr	r3, [pc, #88]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8003ece:	4b15      	ldr	r3, [pc, #84]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ed0:	4a15      	ldr	r2, [pc, #84]	@ (8003f28 <BSP_AUDIO_IN_MspInit+0x160>)
 8003ed2:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a13      	ldr	r2, [pc, #76]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ed8:	671a      	str	r2, [r3, #112]	@ 0x70
 8003eda:	4a12      	ldr	r2, [pc, #72]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8003ee0:	4810      	ldr	r0, [pc, #64]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ee2:	f000 fb31 	bl	8004548 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8003ee6:	480f      	ldr	r0, [pc, #60]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ee8:	f000 fa80 	bl	80043ec <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003eec:	2200      	movs	r2, #0
 8003eee:	210f      	movs	r1, #15
 8003ef0:	2046      	movs	r0, #70	@ 0x46
 8003ef2:	f000 fa44 	bl	800437e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8003ef6:	2046      	movs	r0, #70	@ 0x46
 8003ef8:	f000 fa5d 	bl	80043b6 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003efc:	2200      	movs	r2, #0
 8003efe:	210f      	movs	r1, #15
 8003f00:	2028      	movs	r0, #40	@ 0x28
 8003f02:	f000 fa3c 	bl	800437e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8003f06:	2028      	movs	r0, #40	@ 0x28
 8003f08:	f000 fa55 	bl	80043b6 <HAL_NVIC_EnableIRQ>
}
 8003f0c:	bf00      	nop
 8003f0e:	3730      	adds	r7, #48	@ 0x30
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40023800 	.word	0x40023800
 8003f18:	40021800 	.word	0x40021800
 8003f1c:	40021c00 	.word	0x40021c00
 8003f20:	40015c24 	.word	0x40015c24
 8003f24:	200008b8 	.word	0x200008b8
 8003f28:	400264b8 	.word	0x400264b8

08003f2c <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003f38:	4b53      	ldr	r3, [pc, #332]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f3a:	4a54      	ldr	r2, [pc, #336]	@ (800408c <SAIx_In_Init+0x160>)
 8003f3c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003f3e:	4b52      	ldr	r3, [pc, #328]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b50      	ldr	r3, [pc, #320]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8003f4e:	4a4e      	ldr	r2, [pc, #312]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8003f54:	4a4c      	ldr	r2, [pc, #304]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8003f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8003f60:	4b49      	ldr	r3, [pc, #292]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8003f66:	4b48      	ldr	r3, [pc, #288]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f68:	2280      	movs	r2, #128	@ 0x80
 8003f6a:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003f6c:	4b46      	ldr	r3, [pc, #280]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8003f72:	4b45      	ldr	r3, [pc, #276]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f74:	2201      	movs	r2, #1
 8003f76:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8003f78:	4b43      	ldr	r3, [pc, #268]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8003f7e:	4b42      	ldr	r3, [pc, #264]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f84:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003f86:	4b40      	ldr	r3, [pc, #256]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8003f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f8e:	2240      	movs	r2, #64	@ 0x40
 8003f90:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8003f92:	4b3d      	ldr	r3, [pc, #244]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f94:	2220      	movs	r2, #32
 8003f96:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8003f98:	4b3b      	ldr	r3, [pc, #236]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003f9a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003f9e:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003fa0:	4b39      	ldr	r3, [pc, #228]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8003fa6:	4b38      	ldr	r3, [pc, #224]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003fa8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003fac:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8003fae:	4b36      	ldr	r3, [pc, #216]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003fb4:	4b34      	ldr	r3, [pc, #208]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8003fba:	4b33      	ldr	r3, [pc, #204]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8003fc0:	4a31      	ldr	r2, [pc, #196]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8003fc6:	4830      	ldr	r0, [pc, #192]	@ (8004088 <SAIx_In_Init+0x15c>)
 8003fc8:	f003 fa94 	bl	80074f4 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003fcc:	4b30      	ldr	r3, [pc, #192]	@ (8004090 <SAIx_In_Init+0x164>)
 8003fce:	4a31      	ldr	r2, [pc, #196]	@ (8004094 <SAIx_In_Init+0x168>)
 8003fd0:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8003fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8004090 <SAIx_In_Init+0x164>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8004090 <SAIx_In_Init+0x164>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003fe0:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8003fe2:	4a2b      	ldr	r2, [pc, #172]	@ (8004090 <SAIx_In_Init+0x164>)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8003fe8:	4b29      	ldr	r3, [pc, #164]	@ (8004090 <SAIx_In_Init+0x164>)
 8003fea:	2203      	movs	r2, #3
 8003fec:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8003fee:	4b28      	ldr	r3, [pc, #160]	@ (8004090 <SAIx_In_Init+0x164>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8003ff4:	4b26      	ldr	r3, [pc, #152]	@ (8004090 <SAIx_In_Init+0x164>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8003ffa:	4b25      	ldr	r3, [pc, #148]	@ (8004090 <SAIx_In_Init+0x164>)
 8003ffc:	2280      	movs	r2, #128	@ 0x80
 8003ffe:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004000:	4b23      	ldr	r3, [pc, #140]	@ (8004090 <SAIx_In_Init+0x164>)
 8004002:	2200      	movs	r2, #0
 8004004:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004006:	4b22      	ldr	r3, [pc, #136]	@ (8004090 <SAIx_In_Init+0x164>)
 8004008:	2201      	movs	r2, #1
 800400a:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 800400c:	4b20      	ldr	r3, [pc, #128]	@ (8004090 <SAIx_In_Init+0x164>)
 800400e:	2201      	movs	r2, #1
 8004010:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8004012:	4b1f      	ldr	r3, [pc, #124]	@ (8004090 <SAIx_In_Init+0x164>)
 8004014:	2200      	movs	r2, #0
 8004016:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004018:	4b1d      	ldr	r3, [pc, #116]	@ (8004090 <SAIx_In_Init+0x164>)
 800401a:	2201      	movs	r2, #1
 800401c:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 800401e:	4b1c      	ldr	r3, [pc, #112]	@ (8004090 <SAIx_In_Init+0x164>)
 8004020:	2240      	movs	r2, #64	@ 0x40
 8004022:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8004024:	4b1a      	ldr	r3, [pc, #104]	@ (8004090 <SAIx_In_Init+0x164>)
 8004026:	2220      	movs	r2, #32
 8004028:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800402a:	4b19      	ldr	r3, [pc, #100]	@ (8004090 <SAIx_In_Init+0x164>)
 800402c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004030:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004032:	4b17      	ldr	r3, [pc, #92]	@ (8004090 <SAIx_In_Init+0x164>)
 8004034:	2200      	movs	r2, #0
 8004036:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004038:	4b15      	ldr	r3, [pc, #84]	@ (8004090 <SAIx_In_Init+0x164>)
 800403a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800403e:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8004040:	4b13      	ldr	r3, [pc, #76]	@ (8004090 <SAIx_In_Init+0x164>)
 8004042:	2200      	movs	r2, #0
 8004044:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004046:	4b12      	ldr	r3, [pc, #72]	@ (8004090 <SAIx_In_Init+0x164>)
 8004048:	2200      	movs	r2, #0
 800404a:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 800404c:	4b10      	ldr	r3, [pc, #64]	@ (8004090 <SAIx_In_Init+0x164>)
 800404e:	2204      	movs	r2, #4
 8004050:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8004052:	4a0f      	ldr	r2, [pc, #60]	@ (8004090 <SAIx_In_Init+0x164>)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8004058:	480d      	ldr	r0, [pc, #52]	@ (8004090 <SAIx_In_Init+0x164>)
 800405a:	f003 fa4b 	bl	80074f4 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800405e:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <SAIx_In_Init+0x15c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4b08      	ldr	r3, [pc, #32]	@ (8004088 <SAIx_In_Init+0x15c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800406c:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 800406e:	4b08      	ldr	r3, [pc, #32]	@ (8004090 <SAIx_In_Init+0x164>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <SAIx_In_Init+0x164>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800407c:	601a      	str	r2, [r3, #0]
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000750 	.word	0x20000750
 800408c:	40015c04 	.word	0x40015c04
 8004090:	200007d4 	.word	0x200007d4
 8004094:	40015c24 	.word	0x40015c24

08004098 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800409c:	4b07      	ldr	r3, [pc, #28]	@ (80040bc <SAIx_In_DeInit+0x24>)
 800409e:	4a08      	ldr	r2, [pc, #32]	@ (80040c0 <SAIx_In_DeInit+0x28>)
 80040a0:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80040a2:	4b06      	ldr	r3, [pc, #24]	@ (80040bc <SAIx_In_DeInit+0x24>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b04      	ldr	r3, [pc, #16]	@ (80040bc <SAIx_In_DeInit+0x24>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80040b0:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 80040b2:	4802      	ldr	r0, [pc, #8]	@ (80040bc <SAIx_In_DeInit+0x24>)
 80040b4:	f003 fb9c 	bl	80077f0 <HAL_SAI_DeInit>
}
 80040b8:	bf00      	nop
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	200007d4 	.word	0x200007d4
 80040c0:	40015c24 	.word	0x40015c24

080040c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040c8:	2003      	movs	r0, #3
 80040ca:	f000 f94d 	bl	8004368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040ce:	2000      	movs	r0, #0
 80040d0:	f000 f806 	bl	80040e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040d4:	f7fd fd1c 	bl	8001b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040e8:	4b12      	ldr	r3, [pc, #72]	@ (8004134 <HAL_InitTick+0x54>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4b12      	ldr	r3, [pc, #72]	@ (8004138 <HAL_InitTick+0x58>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	4619      	mov	r1, r3
 80040f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 f967 	bl	80043d2 <HAL_SYSTICK_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e00e      	b.n	800412c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b0f      	cmp	r3, #15
 8004112:	d80a      	bhi.n	800412a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004114:	2200      	movs	r2, #0
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	f04f 30ff 	mov.w	r0, #4294967295
 800411c:	f000 f92f 	bl	800437e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004120:	4a06      	ldr	r2, [pc, #24]	@ (800413c <HAL_InitTick+0x5c>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e000      	b.n	800412c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20000000 	.word	0x20000000
 8004138:	2000003c 	.word	0x2000003c
 800413c:	20000038 	.word	0x20000038

08004140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004144:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <HAL_IncTick+0x20>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	4b06      	ldr	r3, [pc, #24]	@ (8004164 <HAL_IncTick+0x24>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4413      	add	r3, r2
 8004150:	4a04      	ldr	r2, [pc, #16]	@ (8004164 <HAL_IncTick+0x24>)
 8004152:	6013      	str	r3, [r2, #0]
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	2000003c 	.word	0x2000003c
 8004164:	20000918 	.word	0x20000918

08004168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  return uwTick;
 800416c:	4b03      	ldr	r3, [pc, #12]	@ (800417c <HAL_GetTick+0x14>)
 800416e:	681b      	ldr	r3, [r3, #0]
}
 8004170:	4618      	mov	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	20000918 	.word	0x20000918

08004180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004188:	f7ff ffee 	bl	8004168 <HAL_GetTick>
 800418c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d005      	beq.n	80041a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800419a:	4b0a      	ldr	r3, [pc, #40]	@ (80041c4 <HAL_Delay+0x44>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041a6:	bf00      	nop
 80041a8:	f7ff ffde 	bl	8004168 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d8f7      	bhi.n	80041a8 <HAL_Delay+0x28>
  {
  }
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	2000003c 	.word	0x2000003c

080041c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004208 <__NVIC_SetPriorityGrouping+0x40>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041e4:	4013      	ands	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80041f0:	4b06      	ldr	r3, [pc, #24]	@ (800420c <__NVIC_SetPriorityGrouping+0x44>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041f6:	4a04      	ldr	r2, [pc, #16]	@ (8004208 <__NVIC_SetPriorityGrouping+0x40>)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	60d3      	str	r3, [r2, #12]
}
 80041fc:	bf00      	nop
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	e000ed00 	.word	0xe000ed00
 800420c:	05fa0000 	.word	0x05fa0000

08004210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004214:	4b04      	ldr	r3, [pc, #16]	@ (8004228 <__NVIC_GetPriorityGrouping+0x18>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	f003 0307 	and.w	r3, r3, #7
}
 800421e:	4618      	mov	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	2b00      	cmp	r3, #0
 800423c:	db0b      	blt.n	8004256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	f003 021f 	and.w	r2, r3, #31
 8004244:	4907      	ldr	r1, [pc, #28]	@ (8004264 <__NVIC_EnableIRQ+0x38>)
 8004246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	2001      	movs	r0, #1
 800424e:	fa00 f202 	lsl.w	r2, r0, r2
 8004252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	e000e100 	.word	0xe000e100

08004268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	6039      	str	r1, [r7, #0]
 8004272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004278:	2b00      	cmp	r3, #0
 800427a:	db0a      	blt.n	8004292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	b2da      	uxtb	r2, r3
 8004280:	490c      	ldr	r1, [pc, #48]	@ (80042b4 <__NVIC_SetPriority+0x4c>)
 8004282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004286:	0112      	lsls	r2, r2, #4
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	440b      	add	r3, r1
 800428c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004290:	e00a      	b.n	80042a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	b2da      	uxtb	r2, r3
 8004296:	4908      	ldr	r1, [pc, #32]	@ (80042b8 <__NVIC_SetPriority+0x50>)
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	3b04      	subs	r3, #4
 80042a0:	0112      	lsls	r2, r2, #4
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	440b      	add	r3, r1
 80042a6:	761a      	strb	r2, [r3, #24]
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	e000e100 	.word	0xe000e100
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042bc:	b480      	push	{r7}
 80042be:	b089      	sub	sp, #36	@ 0x24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f1c3 0307 	rsb	r3, r3, #7
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	bf28      	it	cs
 80042da:	2304      	movcs	r3, #4
 80042dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	3304      	adds	r3, #4
 80042e2:	2b06      	cmp	r3, #6
 80042e4:	d902      	bls.n	80042ec <NVIC_EncodePriority+0x30>
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	3b03      	subs	r3, #3
 80042ea:	e000      	b.n	80042ee <NVIC_EncodePriority+0x32>
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f0:	f04f 32ff 	mov.w	r2, #4294967295
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43da      	mvns	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	401a      	ands	r2, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004304:	f04f 31ff 	mov.w	r1, #4294967295
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	fa01 f303 	lsl.w	r3, r1, r3
 800430e:	43d9      	mvns	r1, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004314:	4313      	orrs	r3, r2
         );
}
 8004316:	4618      	mov	r0, r3
 8004318:	3724      	adds	r7, #36	@ 0x24
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3b01      	subs	r3, #1
 8004330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004334:	d301      	bcc.n	800433a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004336:	2301      	movs	r3, #1
 8004338:	e00f      	b.n	800435a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800433a:	4a0a      	ldr	r2, [pc, #40]	@ (8004364 <SysTick_Config+0x40>)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3b01      	subs	r3, #1
 8004340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004342:	210f      	movs	r1, #15
 8004344:	f04f 30ff 	mov.w	r0, #4294967295
 8004348:	f7ff ff8e 	bl	8004268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800434c:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <SysTick_Config+0x40>)
 800434e:	2200      	movs	r2, #0
 8004350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004352:	4b04      	ldr	r3, [pc, #16]	@ (8004364 <SysTick_Config+0x40>)
 8004354:	2207      	movs	r2, #7
 8004356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	e000e010 	.word	0xe000e010

08004368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ff29 	bl	80041c8 <__NVIC_SetPriorityGrouping>
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800437e:	b580      	push	{r7, lr}
 8004380:	b086      	sub	sp, #24
 8004382:	af00      	add	r7, sp, #0
 8004384:	4603      	mov	r3, r0
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004390:	f7ff ff3e 	bl	8004210 <__NVIC_GetPriorityGrouping>
 8004394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	6978      	ldr	r0, [r7, #20]
 800439c:	f7ff ff8e 	bl	80042bc <NVIC_EncodePriority>
 80043a0:	4602      	mov	r2, r0
 80043a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff ff5d 	bl	8004268 <__NVIC_SetPriority>
}
 80043ae:	bf00      	nop
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	4603      	mov	r3, r0
 80043be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff ff31 	bl	800422c <__NVIC_EnableIRQ>
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff ffa2 	bl	8004324 <SysTick_Config>
 80043e0:	4603      	mov	r3, r0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043f8:	f7ff feb6 	bl	8004168 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e099      	b.n	800453c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004428:	e00f      	b.n	800444a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800442a:	f7ff fe9d 	bl	8004168 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b05      	cmp	r3, #5
 8004436:	d908      	bls.n	800444a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2203      	movs	r2, #3
 8004442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e078      	b.n	800453c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e8      	bne.n	800442a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4b38      	ldr	r3, [pc, #224]	@ (8004544 <HAL_DMA_Init+0x158>)
 8004464:	4013      	ands	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004476:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800448e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d107      	bne.n	80044b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ac:	4313      	orrs	r3, r2
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0307 	bic.w	r3, r3, #7
 80044ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d117      	bne.n	800450e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00e      	beq.n	800450e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fb73 	bl	8004bdc <DMA_CheckFifoParam>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2240      	movs	r2, #64	@ 0x40
 8004500:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800450a:	2301      	movs	r3, #1
 800450c:	e016      	b.n	800453c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fb2a 	bl	8004b70 <DMA_CalcBaseAndBitshift>
 800451c:	4603      	mov	r3, r0
 800451e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004524:	223f      	movs	r2, #63	@ 0x3f
 8004526:	409a      	lsls	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	f010803f 	.word	0xf010803f

08004548 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e050      	b.n	80045fc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d101      	bne.n	800456a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004566:	2302      	movs	r3, #2
 8004568:	e048      	b.n	80045fc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0201 	bic.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2200      	movs	r2, #0
 8004588:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2200      	movs	r2, #0
 80045a0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2221      	movs	r2, #33	@ 0x21
 80045a8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fae0 	bl	8004b70 <DMA_CalcBaseAndBitshift>
 80045b0:	4603      	mov	r3, r0
 80045b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b8:	223f      	movs	r2, #63	@ 0x3f
 80045ba:	409a      	lsls	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_DMA_Start_IT+0x26>
 8004626:	2302      	movs	r3, #2
 8004628:	e048      	b.n	80046bc <HAL_DMA_Start_IT+0xb8>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b01      	cmp	r3, #1
 800463c:	d137      	bne.n	80046ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2202      	movs	r2, #2
 8004642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fa5e 	bl	8004b14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800465c:	223f      	movs	r2, #63	@ 0x3f
 800465e:	409a      	lsls	r2, r3
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0216 	orr.w	r2, r2, #22
 8004672:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004682:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0208 	orr.w	r2, r2, #8
 800469a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e005      	b.n	80046ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
 80046b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046d2:	f7ff fd49 	bl	8004168 <HAL_GetTick>
 80046d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d008      	beq.n	80046f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2280      	movs	r2, #128	@ 0x80
 80046e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e052      	b.n	800479c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0216 	bic.w	r2, r2, #22
 8004704:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004714:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_DMA_Abort+0x62>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0208 	bic.w	r2, r2, #8
 8004734:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0201 	bic.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004746:	e013      	b.n	8004770 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004748:	f7ff fd0e 	bl	8004168 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b05      	cmp	r3, #5
 8004754:	d90c      	bls.n	8004770 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2203      	movs	r2, #3
 8004760:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e015      	b.n	800479c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e4      	bne.n	8004748 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004782:	223f      	movs	r2, #63	@ 0x3f
 8004784:	409a      	lsls	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d004      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2280      	movs	r2, #128	@ 0x80
 80047bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e00c      	b.n	80047dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2205      	movs	r2, #5
 80047c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80047f4:	4b8e      	ldr	r3, [pc, #568]	@ (8004a30 <HAL_DMA_IRQHandler+0x248>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a8e      	ldr	r2, [pc, #568]	@ (8004a34 <HAL_DMA_IRQHandler+0x24c>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	0a9b      	lsrs	r3, r3, #10
 8004800:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004806:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004812:	2208      	movs	r2, #8
 8004814:	409a      	lsls	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4013      	ands	r3, r2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01a      	beq.n	8004854 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d013      	beq.n	8004854 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0204 	bic.w	r2, r2, #4
 800483a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004840:	2208      	movs	r2, #8
 8004842:	409a      	lsls	r2, r3
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484c:	f043 0201 	orr.w	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004858:	2201      	movs	r2, #1
 800485a:	409a      	lsls	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4013      	ands	r3, r2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d012      	beq.n	800488a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004876:	2201      	movs	r2, #1
 8004878:	409a      	lsls	r2, r3
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004882:	f043 0202 	orr.w	r2, r3, #2
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488e:	2204      	movs	r2, #4
 8004890:	409a      	lsls	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4013      	ands	r3, r2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d012      	beq.n	80048c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00b      	beq.n	80048c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ac:	2204      	movs	r2, #4
 80048ae:	409a      	lsls	r2, r3
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b8:	f043 0204 	orr.w	r2, r3, #4
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c4:	2210      	movs	r2, #16
 80048c6:	409a      	lsls	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d043      	beq.n	8004958 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d03c      	beq.n	8004958 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e2:	2210      	movs	r2, #16
 80048e4:	409a      	lsls	r2, r3
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d018      	beq.n	800492a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d108      	bne.n	8004918 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d024      	beq.n	8004958 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	4798      	blx	r3
 8004916:	e01f      	b.n	8004958 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01b      	beq.n	8004958 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	4798      	blx	r3
 8004928:	e016      	b.n	8004958 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d107      	bne.n	8004948 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0208 	bic.w	r2, r2, #8
 8004946:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800495c:	2220      	movs	r2, #32
 800495e:	409a      	lsls	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4013      	ands	r3, r2
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 808f 	beq.w	8004a88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8087 	beq.w	8004a88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497e:	2220      	movs	r2, #32
 8004980:	409a      	lsls	r2, r3
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b05      	cmp	r3, #5
 8004990:	d136      	bne.n	8004a00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0216 	bic.w	r2, r2, #22
 80049a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d103      	bne.n	80049c2 <HAL_DMA_IRQHandler+0x1da>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0208 	bic.w	r2, r2, #8
 80049d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d6:	223f      	movs	r2, #63	@ 0x3f
 80049d8:	409a      	lsls	r2, r3
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d07e      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	4798      	blx	r3
        }
        return;
 80049fe:	e079      	b.n	8004af4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d01d      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10d      	bne.n	8004a38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d031      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	4798      	blx	r3
 8004a2c:	e02c      	b.n	8004a88 <HAL_DMA_IRQHandler+0x2a0>
 8004a2e:	bf00      	nop
 8004a30:	20000000 	.word	0x20000000
 8004a34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d023      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
 8004a48:	e01e      	b.n	8004a88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10f      	bne.n	8004a78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0210 	bic.w	r2, r2, #16
 8004a66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d032      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d022      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2205      	movs	r2, #5
 8004aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0201 	bic.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d307      	bcc.n	8004ad0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f2      	bne.n	8004ab4 <HAL_DMA_IRQHandler+0x2cc>
 8004ace:	e000      	b.n	8004ad2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ad0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4798      	blx	r3
 8004af2:	e000      	b.n	8004af6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004af4:	bf00      	nop
    }
  }
}
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004b30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	2b40      	cmp	r3, #64	@ 0x40
 8004b40:	d108      	bne.n	8004b54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b52:	e007      	b.n	8004b64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	60da      	str	r2, [r3, #12]
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	3b10      	subs	r3, #16
 8004b80:	4a13      	ldr	r2, [pc, #76]	@ (8004bd0 <DMA_CalcBaseAndBitshift+0x60>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	091b      	lsrs	r3, r3, #4
 8004b88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b8a:	4a12      	ldr	r2, [pc, #72]	@ (8004bd4 <DMA_CalcBaseAndBitshift+0x64>)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d908      	bls.n	8004bb0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd8 <DMA_CalcBaseAndBitshift+0x68>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	1d1a      	adds	r2, r3, #4
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	659a      	str	r2, [r3, #88]	@ 0x58
 8004bae:	e006      	b.n	8004bbe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4b08      	ldr	r3, [pc, #32]	@ (8004bd8 <DMA_CalcBaseAndBitshift+0x68>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	aaaaaaab 	.word	0xaaaaaaab
 8004bd4:	08010ec0 	.word	0x08010ec0
 8004bd8:	fffffc00 	.word	0xfffffc00

08004bdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d11f      	bne.n	8004c36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d856      	bhi.n	8004caa <DMA_CheckFifoParam+0xce>
 8004bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8004c04 <DMA_CheckFifoParam+0x28>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c15 	.word	0x08004c15
 8004c08:	08004c27 	.word	0x08004c27
 8004c0c:	08004c15 	.word	0x08004c15
 8004c10:	08004cab 	.word	0x08004cab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d046      	beq.n	8004cae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c24:	e043      	b.n	8004cae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c2e:	d140      	bne.n	8004cb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c34:	e03d      	b.n	8004cb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c3e:	d121      	bne.n	8004c84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d837      	bhi.n	8004cb6 <DMA_CheckFifoParam+0xda>
 8004c46:	a201      	add	r2, pc, #4	@ (adr r2, 8004c4c <DMA_CheckFifoParam+0x70>)
 8004c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4c:	08004c5d 	.word	0x08004c5d
 8004c50:	08004c63 	.word	0x08004c63
 8004c54:	08004c5d 	.word	0x08004c5d
 8004c58:	08004c75 	.word	0x08004c75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c60:	e030      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d025      	beq.n	8004cba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c72:	e022      	b.n	8004cba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c7c:	d11f      	bne.n	8004cbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c82:	e01c      	b.n	8004cbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d903      	bls.n	8004c92 <DMA_CheckFifoParam+0xb6>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d003      	beq.n	8004c98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c90:	e018      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	73fb      	strb	r3, [r7, #15]
      break;
 8004c96:	e015      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00e      	beq.n	8004cc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca8:	e00b      	b.n	8004cc2 <DMA_CheckFifoParam+0xe6>
      break;
 8004caa:	bf00      	nop
 8004cac:	e00a      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cae:	bf00      	nop
 8004cb0:	e008      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e006      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cb6:	bf00      	nop
 8004cb8:	e004      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cba:	bf00      	nop
 8004cbc:	e002      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004cbe:	bf00      	nop
 8004cc0:	e000      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cc2:	bf00      	nop
    }
  } 
  
  return status; 
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop

08004cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b089      	sub	sp, #36	@ 0x24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	e175      	b.n	8004fe0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4013      	ands	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	f040 8164 	bne.w	8004fda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d005      	beq.n	8004d2a <HAL_GPIO_Init+0x56>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d130      	bne.n	8004d8c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	2203      	movs	r2, #3
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d60:	2201      	movs	r2, #1
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	091b      	lsrs	r3, r3, #4
 8004d76:	f003 0201 	and.w	r2, r3, #1
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d017      	beq.n	8004dc8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	2203      	movs	r2, #3
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	43db      	mvns	r3, r3
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	4013      	ands	r3, r2
 8004dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d123      	bne.n	8004e1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	08da      	lsrs	r2, r3, #3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3208      	adds	r2, #8
 8004ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	220f      	movs	r2, #15
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4013      	ands	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	08da      	lsrs	r2, r3, #3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3208      	adds	r2, #8
 8004e16:	69b9      	ldr	r1, [r7, #24]
 8004e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	2203      	movs	r2, #3
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	4013      	ands	r3, r2
 8004e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 0203 	and.w	r2, r3, #3
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80be 	beq.w	8004fda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e5e:	4b66      	ldr	r3, [pc, #408]	@ (8004ff8 <HAL_GPIO_Init+0x324>)
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	4a65      	ldr	r2, [pc, #404]	@ (8004ff8 <HAL_GPIO_Init+0x324>)
 8004e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e6a:	4b63      	ldr	r3, [pc, #396]	@ (8004ff8 <HAL_GPIO_Init+0x324>)
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004e76:	4a61      	ldr	r2, [pc, #388]	@ (8004ffc <HAL_GPIO_Init+0x328>)
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	089b      	lsrs	r3, r3, #2
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	220f      	movs	r2, #15
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	4013      	ands	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a58      	ldr	r2, [pc, #352]	@ (8005000 <HAL_GPIO_Init+0x32c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d037      	beq.n	8004f12 <HAL_GPIO_Init+0x23e>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a57      	ldr	r2, [pc, #348]	@ (8005004 <HAL_GPIO_Init+0x330>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d031      	beq.n	8004f0e <HAL_GPIO_Init+0x23a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a56      	ldr	r2, [pc, #344]	@ (8005008 <HAL_GPIO_Init+0x334>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d02b      	beq.n	8004f0a <HAL_GPIO_Init+0x236>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a55      	ldr	r2, [pc, #340]	@ (800500c <HAL_GPIO_Init+0x338>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d025      	beq.n	8004f06 <HAL_GPIO_Init+0x232>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a54      	ldr	r2, [pc, #336]	@ (8005010 <HAL_GPIO_Init+0x33c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01f      	beq.n	8004f02 <HAL_GPIO_Init+0x22e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a53      	ldr	r2, [pc, #332]	@ (8005014 <HAL_GPIO_Init+0x340>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d019      	beq.n	8004efe <HAL_GPIO_Init+0x22a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a52      	ldr	r2, [pc, #328]	@ (8005018 <HAL_GPIO_Init+0x344>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d013      	beq.n	8004efa <HAL_GPIO_Init+0x226>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a51      	ldr	r2, [pc, #324]	@ (800501c <HAL_GPIO_Init+0x348>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00d      	beq.n	8004ef6 <HAL_GPIO_Init+0x222>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a50      	ldr	r2, [pc, #320]	@ (8005020 <HAL_GPIO_Init+0x34c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d007      	beq.n	8004ef2 <HAL_GPIO_Init+0x21e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a4f      	ldr	r2, [pc, #316]	@ (8005024 <HAL_GPIO_Init+0x350>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d101      	bne.n	8004eee <HAL_GPIO_Init+0x21a>
 8004eea:	2309      	movs	r3, #9
 8004eec:	e012      	b.n	8004f14 <HAL_GPIO_Init+0x240>
 8004eee:	230a      	movs	r3, #10
 8004ef0:	e010      	b.n	8004f14 <HAL_GPIO_Init+0x240>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	e00e      	b.n	8004f14 <HAL_GPIO_Init+0x240>
 8004ef6:	2307      	movs	r3, #7
 8004ef8:	e00c      	b.n	8004f14 <HAL_GPIO_Init+0x240>
 8004efa:	2306      	movs	r3, #6
 8004efc:	e00a      	b.n	8004f14 <HAL_GPIO_Init+0x240>
 8004efe:	2305      	movs	r3, #5
 8004f00:	e008      	b.n	8004f14 <HAL_GPIO_Init+0x240>
 8004f02:	2304      	movs	r3, #4
 8004f04:	e006      	b.n	8004f14 <HAL_GPIO_Init+0x240>
 8004f06:	2303      	movs	r3, #3
 8004f08:	e004      	b.n	8004f14 <HAL_GPIO_Init+0x240>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e002      	b.n	8004f14 <HAL_GPIO_Init+0x240>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <HAL_GPIO_Init+0x240>
 8004f12:	2300      	movs	r3, #0
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	f002 0203 	and.w	r2, r2, #3
 8004f1a:	0092      	lsls	r2, r2, #2
 8004f1c:	4093      	lsls	r3, r2
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f24:	4935      	ldr	r1, [pc, #212]	@ (8004ffc <HAL_GPIO_Init+0x328>)
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	089b      	lsrs	r3, r3, #2
 8004f2a:	3302      	adds	r3, #2
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f32:	4b3d      	ldr	r3, [pc, #244]	@ (8005028 <HAL_GPIO_Init+0x354>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f56:	4a34      	ldr	r2, [pc, #208]	@ (8005028 <HAL_GPIO_Init+0x354>)
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f5c:	4b32      	ldr	r3, [pc, #200]	@ (8005028 <HAL_GPIO_Init+0x354>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	43db      	mvns	r3, r3
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f80:	4a29      	ldr	r2, [pc, #164]	@ (8005028 <HAL_GPIO_Init+0x354>)
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f86:	4b28      	ldr	r3, [pc, #160]	@ (8005028 <HAL_GPIO_Init+0x354>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4013      	ands	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004faa:	4a1f      	ldr	r2, [pc, #124]	@ (8005028 <HAL_GPIO_Init+0x354>)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005028 <HAL_GPIO_Init+0x354>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fd4:	4a14      	ldr	r2, [pc, #80]	@ (8005028 <HAL_GPIO_Init+0x354>)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b0f      	cmp	r3, #15
 8004fe4:	f67f ae86 	bls.w	8004cf4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004fe8:	bf00      	nop
 8004fea:	bf00      	nop
 8004fec:	3724      	adds	r7, #36	@ 0x24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	40013800 	.word	0x40013800
 8005000:	40020000 	.word	0x40020000
 8005004:	40020400 	.word	0x40020400
 8005008:	40020800 	.word	0x40020800
 800500c:	40020c00 	.word	0x40020c00
 8005010:	40021000 	.word	0x40021000
 8005014:	40021400 	.word	0x40021400
 8005018:	40021800 	.word	0x40021800
 800501c:	40021c00 	.word	0x40021c00
 8005020:	40022000 	.word	0x40022000
 8005024:	40022400 	.word	0x40022400
 8005028:	40013c00 	.word	0x40013c00

0800502c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005036:	2300      	movs	r3, #0
 8005038:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800503e:	2300      	movs	r3, #0
 8005040:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e0d9      	b.n	80051fc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005048:	2201      	movs	r2, #1
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	4013      	ands	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	429a      	cmp	r2, r3
 8005060:	f040 80c9 	bne.w	80051f6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005064:	4a6b      	ldr	r2, [pc, #428]	@ (8005214 <HAL_GPIO_DeInit+0x1e8>)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	089b      	lsrs	r3, r3, #2
 800506a:	3302      	adds	r3, #2
 800506c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005070:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	220f      	movs	r2, #15
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	4013      	ands	r3, r2
 8005084:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a63      	ldr	r2, [pc, #396]	@ (8005218 <HAL_GPIO_DeInit+0x1ec>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d037      	beq.n	80050fe <HAL_GPIO_DeInit+0xd2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a62      	ldr	r2, [pc, #392]	@ (800521c <HAL_GPIO_DeInit+0x1f0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d031      	beq.n	80050fa <HAL_GPIO_DeInit+0xce>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a61      	ldr	r2, [pc, #388]	@ (8005220 <HAL_GPIO_DeInit+0x1f4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d02b      	beq.n	80050f6 <HAL_GPIO_DeInit+0xca>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a60      	ldr	r2, [pc, #384]	@ (8005224 <HAL_GPIO_DeInit+0x1f8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d025      	beq.n	80050f2 <HAL_GPIO_DeInit+0xc6>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a5f      	ldr	r2, [pc, #380]	@ (8005228 <HAL_GPIO_DeInit+0x1fc>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d01f      	beq.n	80050ee <HAL_GPIO_DeInit+0xc2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a5e      	ldr	r2, [pc, #376]	@ (800522c <HAL_GPIO_DeInit+0x200>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d019      	beq.n	80050ea <HAL_GPIO_DeInit+0xbe>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a5d      	ldr	r2, [pc, #372]	@ (8005230 <HAL_GPIO_DeInit+0x204>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d013      	beq.n	80050e6 <HAL_GPIO_DeInit+0xba>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a5c      	ldr	r2, [pc, #368]	@ (8005234 <HAL_GPIO_DeInit+0x208>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00d      	beq.n	80050e2 <HAL_GPIO_DeInit+0xb6>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a5b      	ldr	r2, [pc, #364]	@ (8005238 <HAL_GPIO_DeInit+0x20c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d007      	beq.n	80050de <HAL_GPIO_DeInit+0xb2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a5a      	ldr	r2, [pc, #360]	@ (800523c <HAL_GPIO_DeInit+0x210>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d101      	bne.n	80050da <HAL_GPIO_DeInit+0xae>
 80050d6:	2309      	movs	r3, #9
 80050d8:	e012      	b.n	8005100 <HAL_GPIO_DeInit+0xd4>
 80050da:	230a      	movs	r3, #10
 80050dc:	e010      	b.n	8005100 <HAL_GPIO_DeInit+0xd4>
 80050de:	2308      	movs	r3, #8
 80050e0:	e00e      	b.n	8005100 <HAL_GPIO_DeInit+0xd4>
 80050e2:	2307      	movs	r3, #7
 80050e4:	e00c      	b.n	8005100 <HAL_GPIO_DeInit+0xd4>
 80050e6:	2306      	movs	r3, #6
 80050e8:	e00a      	b.n	8005100 <HAL_GPIO_DeInit+0xd4>
 80050ea:	2305      	movs	r3, #5
 80050ec:	e008      	b.n	8005100 <HAL_GPIO_DeInit+0xd4>
 80050ee:	2304      	movs	r3, #4
 80050f0:	e006      	b.n	8005100 <HAL_GPIO_DeInit+0xd4>
 80050f2:	2303      	movs	r3, #3
 80050f4:	e004      	b.n	8005100 <HAL_GPIO_DeInit+0xd4>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e002      	b.n	8005100 <HAL_GPIO_DeInit+0xd4>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <HAL_GPIO_DeInit+0xd4>
 80050fe:	2300      	movs	r3, #0
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	f002 0203 	and.w	r2, r2, #3
 8005106:	0092      	lsls	r2, r2, #2
 8005108:	4093      	lsls	r3, r2
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	429a      	cmp	r2, r3
 800510e:	d132      	bne.n	8005176 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005110:	4b4b      	ldr	r3, [pc, #300]	@ (8005240 <HAL_GPIO_DeInit+0x214>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	43db      	mvns	r3, r3
 8005118:	4949      	ldr	r1, [pc, #292]	@ (8005240 <HAL_GPIO_DeInit+0x214>)
 800511a:	4013      	ands	r3, r2
 800511c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800511e:	4b48      	ldr	r3, [pc, #288]	@ (8005240 <HAL_GPIO_DeInit+0x214>)
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	43db      	mvns	r3, r3
 8005126:	4946      	ldr	r1, [pc, #280]	@ (8005240 <HAL_GPIO_DeInit+0x214>)
 8005128:	4013      	ands	r3, r2
 800512a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800512c:	4b44      	ldr	r3, [pc, #272]	@ (8005240 <HAL_GPIO_DeInit+0x214>)
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	43db      	mvns	r3, r3
 8005134:	4942      	ldr	r1, [pc, #264]	@ (8005240 <HAL_GPIO_DeInit+0x214>)
 8005136:	4013      	ands	r3, r2
 8005138:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800513a:	4b41      	ldr	r3, [pc, #260]	@ (8005240 <HAL_GPIO_DeInit+0x214>)
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	43db      	mvns	r3, r3
 8005142:	493f      	ldr	r1, [pc, #252]	@ (8005240 <HAL_GPIO_DeInit+0x214>)
 8005144:	4013      	ands	r3, r2
 8005146:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	220f      	movs	r2, #15
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005158:	4a2e      	ldr	r2, [pc, #184]	@ (8005214 <HAL_GPIO_DeInit+0x1e8>)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	089b      	lsrs	r3, r3, #2
 800515e:	3302      	adds	r3, #2
 8005160:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	43da      	mvns	r2, r3
 8005168:	482a      	ldr	r0, [pc, #168]	@ (8005214 <HAL_GPIO_DeInit+0x1e8>)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	089b      	lsrs	r3, r3, #2
 800516e:	400a      	ands	r2, r1
 8005170:	3302      	adds	r3, #2
 8005172:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	2103      	movs	r1, #3
 8005180:	fa01 f303 	lsl.w	r3, r1, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	401a      	ands	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	08da      	lsrs	r2, r3, #3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3208      	adds	r2, #8
 8005194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	220f      	movs	r2, #15
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	43db      	mvns	r3, r3
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	08d2      	lsrs	r2, r2, #3
 80051ac:	4019      	ands	r1, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3208      	adds	r2, #8
 80051b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	2103      	movs	r1, #3
 80051c0:	fa01 f303 	lsl.w	r3, r1, r3
 80051c4:	43db      	mvns	r3, r3
 80051c6:	401a      	ands	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	2101      	movs	r1, #1
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	fa01 f303 	lsl.w	r3, r1, r3
 80051d8:	43db      	mvns	r3, r3
 80051da:	401a      	ands	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	2103      	movs	r1, #3
 80051ea:	fa01 f303 	lsl.w	r3, r1, r3
 80051ee:	43db      	mvns	r3, r3
 80051f0:	401a      	ands	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	3301      	adds	r3, #1
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2b0f      	cmp	r3, #15
 8005200:	f67f af22 	bls.w	8005048 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40013800 	.word	0x40013800
 8005218:	40020000 	.word	0x40020000
 800521c:	40020400 	.word	0x40020400
 8005220:	40020800 	.word	0x40020800
 8005224:	40020c00 	.word	0x40020c00
 8005228:	40021000 	.word	0x40021000
 800522c:	40021400 	.word	0x40021400
 8005230:	40021800 	.word	0x40021800
 8005234:	40021c00 	.word	0x40021c00
 8005238:	40022000 	.word	0x40022000
 800523c:	40022400 	.word	0x40022400
 8005240:	40013c00 	.word	0x40013c00

08005244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691a      	ldr	r2, [r3, #16]
 8005254:	887b      	ldrh	r3, [r7, #2]
 8005256:	4013      	ands	r3, r2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
 8005260:	e001      	b.n	8005266 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005262:	2300      	movs	r3, #0
 8005264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	807b      	strh	r3, [r7, #2]
 8005280:	4613      	mov	r3, r2
 8005282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005284:	787b      	ldrb	r3, [r7, #1]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800528a:	887a      	ldrh	r2, [r7, #2]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005290:	e003      	b.n	800529a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005292:	887b      	ldrh	r3, [r7, #2]
 8005294:	041a      	lsls	r2, r3, #16
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	619a      	str	r2, [r3, #24]
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b085      	sub	sp, #20
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052b8:	887a      	ldrh	r2, [r7, #2]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4013      	ands	r3, r2
 80052be:	041a      	lsls	r2, r3, #16
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	43d9      	mvns	r1, r3
 80052c4:	887b      	ldrh	r3, [r7, #2]
 80052c6:	400b      	ands	r3, r1
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	619a      	str	r2, [r3, #24]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80052e6:	4b08      	ldr	r3, [pc, #32]	@ (8005308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052e8:	695a      	ldr	r2, [r3, #20]
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d006      	beq.n	8005300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052f2:	4a05      	ldr	r2, [pc, #20]	@ (8005308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052f4:	88fb      	ldrh	r3, [r7, #6]
 80052f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052f8:	88fb      	ldrh	r3, [r7, #6]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fc f86e 	bl	80013dc <HAL_GPIO_EXTI_Callback>
  }
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40013c00 	.word	0x40013c00

0800530c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e08b      	b.n	8005436 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d106      	bne.n	8005338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f8b5 	bl	80054a2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2224      	movs	r2, #36	@ 0x24
 800533c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800535c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800536c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d107      	bne.n	8005386 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005382:	609a      	str	r2, [r3, #8]
 8005384:	e006      	b.n	8005394 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005392:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	2b02      	cmp	r3, #2
 800539a:	d108      	bne.n	80053ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053aa:	605a      	str	r2, [r3, #4]
 80053ac:	e007      	b.n	80053be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6859      	ldr	r1, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005440 <HAL_I2C_Init+0x134>)
 80053ca:	430b      	orrs	r3, r1
 80053cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69d9      	ldr	r1, [r3, #28]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1a      	ldr	r2, [r3, #32]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	02008000 	.word	0x02008000

08005444 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e021      	b.n	800549a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2224      	movs	r2, #36	@ 0x24
 800545a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0201 	bic.w	r2, r2, #1
 800546c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f821 	bl	80054b6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
	...

080054cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	4608      	mov	r0, r1
 80054d6:	4611      	mov	r1, r2
 80054d8:	461a      	mov	r2, r3
 80054da:	4603      	mov	r3, r0
 80054dc:	817b      	strh	r3, [r7, #10]
 80054de:	460b      	mov	r3, r1
 80054e0:	813b      	strh	r3, [r7, #8]
 80054e2:	4613      	mov	r3, r2
 80054e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	f040 80f9 	bne.w	80056e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_I2C_Mem_Write+0x34>
 80054fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d105      	bne.n	800550c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005506:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0ed      	b.n	80056e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_I2C_Mem_Write+0x4e>
 8005516:	2302      	movs	r3, #2
 8005518:	e0e6      	b.n	80056e8 <HAL_I2C_Mem_Write+0x21c>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005522:	f7fe fe21 	bl	8004168 <HAL_GetTick>
 8005526:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	2319      	movs	r3, #25
 800552e:	2201      	movs	r2, #1
 8005530:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 fad1 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0d1      	b.n	80056e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2221      	movs	r2, #33	@ 0x21
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2240      	movs	r2, #64	@ 0x40
 8005550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a3a      	ldr	r2, [r7, #32]
 800555e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005564:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800556c:	88f8      	ldrh	r0, [r7, #6]
 800556e:	893a      	ldrh	r2, [r7, #8]
 8005570:	8979      	ldrh	r1, [r7, #10]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	9301      	str	r3, [sp, #4]
 8005576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	4603      	mov	r3, r0
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f9e1 	bl	8005944 <I2C_RequestMemoryWrite>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0a9      	b.n	80056e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005598:	b29b      	uxth	r3, r3
 800559a:	2bff      	cmp	r3, #255	@ 0xff
 800559c:	d90e      	bls.n	80055bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	22ff      	movs	r2, #255	@ 0xff
 80055a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	8979      	ldrh	r1, [r7, #10]
 80055ac:	2300      	movs	r3, #0
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 fc55 	bl	8005e64 <I2C_TransferConfig>
 80055ba:	e00f      	b.n	80055dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	8979      	ldrh	r1, [r7, #10]
 80055ce:	2300      	movs	r3, #0
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 fc44 	bl	8005e64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fad4 	bl	8005b8e <I2C_WaitOnTXISFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e07b      	b.n	80056e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f4:	781a      	ldrb	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d034      	beq.n	8005694 <HAL_I2C_Mem_Write+0x1c8>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800562e:	2b00      	cmp	r3, #0
 8005630:	d130      	bne.n	8005694 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005638:	2200      	movs	r2, #0
 800563a:	2180      	movs	r1, #128	@ 0x80
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 fa4d 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e04d      	b.n	80056e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005650:	b29b      	uxth	r3, r3
 8005652:	2bff      	cmp	r3, #255	@ 0xff
 8005654:	d90e      	bls.n	8005674 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	22ff      	movs	r2, #255	@ 0xff
 800565a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005660:	b2da      	uxtb	r2, r3
 8005662:	8979      	ldrh	r1, [r7, #10]
 8005664:	2300      	movs	r3, #0
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 fbf9 	bl	8005e64 <I2C_TransferConfig>
 8005672:	e00f      	b.n	8005694 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005682:	b2da      	uxtb	r2, r3
 8005684:	8979      	ldrh	r1, [r7, #10]
 8005686:	2300      	movs	r3, #0
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 fbe8 	bl	8005e64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d19e      	bne.n	80055dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 faba 	bl	8005c1c <I2C_WaitOnSTOPFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e01a      	b.n	80056e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2220      	movs	r2, #32
 80056b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6859      	ldr	r1, [r3, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b0a      	ldr	r3, [pc, #40]	@ (80056f0 <HAL_I2C_Mem_Write+0x224>)
 80056c6:	400b      	ands	r3, r1
 80056c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	e000      	b.n	80056e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80056e6:	2302      	movs	r3, #2
  }
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	fe00e800 	.word	0xfe00e800

080056f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	4608      	mov	r0, r1
 80056fe:	4611      	mov	r1, r2
 8005700:	461a      	mov	r2, r3
 8005702:	4603      	mov	r3, r0
 8005704:	817b      	strh	r3, [r7, #10]
 8005706:	460b      	mov	r3, r1
 8005708:	813b      	strh	r3, [r7, #8]
 800570a:	4613      	mov	r3, r2
 800570c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b20      	cmp	r3, #32
 8005718:	f040 80fd 	bne.w	8005916 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_I2C_Mem_Read+0x34>
 8005722:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005724:	2b00      	cmp	r3, #0
 8005726:	d105      	bne.n	8005734 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800572e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e0f1      	b.n	8005918 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_I2C_Mem_Read+0x4e>
 800573e:	2302      	movs	r3, #2
 8005740:	e0ea      	b.n	8005918 <HAL_I2C_Mem_Read+0x224>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800574a:	f7fe fd0d 	bl	8004168 <HAL_GetTick>
 800574e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	2319      	movs	r3, #25
 8005756:	2201      	movs	r2, #1
 8005758:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f9bd 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0d5      	b.n	8005918 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2222      	movs	r2, #34	@ 0x22
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2240      	movs	r2, #64	@ 0x40
 8005778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a3a      	ldr	r2, [r7, #32]
 8005786:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800578c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005794:	88f8      	ldrh	r0, [r7, #6]
 8005796:	893a      	ldrh	r2, [r7, #8]
 8005798:	8979      	ldrh	r1, [r7, #10]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	9301      	str	r3, [sp, #4]
 800579e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	4603      	mov	r3, r0
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f921 	bl	80059ec <I2C_RequestMemoryRead>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0ad      	b.n	8005918 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2bff      	cmp	r3, #255	@ 0xff
 80057c4:	d90e      	bls.n	80057e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	8979      	ldrh	r1, [r7, #10]
 80057d4:	4b52      	ldr	r3, [pc, #328]	@ (8005920 <HAL_I2C_Mem_Read+0x22c>)
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fb41 	bl	8005e64 <I2C_TransferConfig>
 80057e2:	e00f      	b.n	8005804 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	8979      	ldrh	r1, [r7, #10]
 80057f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005920 <HAL_I2C_Mem_Read+0x22c>)
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 fb30 	bl	8005e64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580a:	2200      	movs	r2, #0
 800580c:	2104      	movs	r1, #4
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 f964 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e07c      	b.n	8005918 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d034      	beq.n	80058c4 <HAL_I2C_Mem_Read+0x1d0>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800585e:	2b00      	cmp	r3, #0
 8005860:	d130      	bne.n	80058c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005868:	2200      	movs	r2, #0
 800586a:	2180      	movs	r1, #128	@ 0x80
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f935 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e04d      	b.n	8005918 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005880:	b29b      	uxth	r3, r3
 8005882:	2bff      	cmp	r3, #255	@ 0xff
 8005884:	d90e      	bls.n	80058a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005890:	b2da      	uxtb	r2, r3
 8005892:	8979      	ldrh	r1, [r7, #10]
 8005894:	2300      	movs	r3, #0
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 fae1 	bl	8005e64 <I2C_TransferConfig>
 80058a2:	e00f      	b.n	80058c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	8979      	ldrh	r1, [r7, #10]
 80058b6:	2300      	movs	r3, #0
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 fad0 	bl	8005e64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d19a      	bne.n	8005804 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 f9a2 	bl	8005c1c <I2C_WaitOnSTOPFlagUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e01a      	b.n	8005918 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2220      	movs	r2, #32
 80058e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6859      	ldr	r1, [r3, #4]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005924 <HAL_I2C_Mem_Read+0x230>)
 80058f6:	400b      	ands	r3, r1
 80058f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	e000      	b.n	8005918 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005916:	2302      	movs	r3, #2
  }
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	80002400 	.word	0x80002400
 8005924:	fe00e800 	.word	0xfe00e800

08005928 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005936:	b2db      	uxtb	r3, r3
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	4608      	mov	r0, r1
 800594e:	4611      	mov	r1, r2
 8005950:	461a      	mov	r2, r3
 8005952:	4603      	mov	r3, r0
 8005954:	817b      	strh	r3, [r7, #10]
 8005956:	460b      	mov	r3, r1
 8005958:	813b      	strh	r3, [r7, #8]
 800595a:	4613      	mov	r3, r2
 800595c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	8979      	ldrh	r1, [r7, #10]
 8005964:	4b20      	ldr	r3, [pc, #128]	@ (80059e8 <I2C_RequestMemoryWrite+0xa4>)
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 fa79 	bl	8005e64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	69b9      	ldr	r1, [r7, #24]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 f909 	bl	8005b8e <I2C_WaitOnTXISFlagUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e02c      	b.n	80059e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005986:	88fb      	ldrh	r3, [r7, #6]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d105      	bne.n	8005998 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800598c:	893b      	ldrh	r3, [r7, #8]
 800598e:	b2da      	uxtb	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	629a      	str	r2, [r3, #40]	@ 0x28
 8005996:	e015      	b.n	80059c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005998:	893b      	ldrh	r3, [r7, #8]
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	b29b      	uxth	r3, r3
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	69b9      	ldr	r1, [r7, #24]
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f8ef 	bl	8005b8e <I2C_WaitOnTXISFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e012      	b.n	80059e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059ba:	893b      	ldrh	r3, [r7, #8]
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	2200      	movs	r2, #0
 80059cc:	2180      	movs	r1, #128	@ 0x80
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 f884 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e000      	b.n	80059e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	80002000 	.word	0x80002000

080059ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	4608      	mov	r0, r1
 80059f6:	4611      	mov	r1, r2
 80059f8:	461a      	mov	r2, r3
 80059fa:	4603      	mov	r3, r0
 80059fc:	817b      	strh	r3, [r7, #10]
 80059fe:	460b      	mov	r3, r1
 8005a00:	813b      	strh	r3, [r7, #8]
 8005a02:	4613      	mov	r3, r2
 8005a04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	8979      	ldrh	r1, [r7, #10]
 8005a0c:	4b20      	ldr	r3, [pc, #128]	@ (8005a90 <I2C_RequestMemoryRead+0xa4>)
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	2300      	movs	r3, #0
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 fa26 	bl	8005e64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	69b9      	ldr	r1, [r7, #24]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f8b6 	bl	8005b8e <I2C_WaitOnTXISFlagUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e02c      	b.n	8005a86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a2c:	88fb      	ldrh	r3, [r7, #6]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d105      	bne.n	8005a3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a32:	893b      	ldrh	r3, [r7, #8]
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a3c:	e015      	b.n	8005a6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a3e:	893b      	ldrh	r3, [r7, #8]
 8005a40:	0a1b      	lsrs	r3, r3, #8
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	69b9      	ldr	r1, [r7, #24]
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f89c 	bl	8005b8e <I2C_WaitOnTXISFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e012      	b.n	8005a86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a60:	893b      	ldrh	r3, [r7, #8]
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	2200      	movs	r2, #0
 8005a72:	2140      	movs	r1, #64	@ 0x40
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 f831 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e000      	b.n	8005a86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	80002000 	.word	0x80002000

08005a94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d103      	bne.n	8005ab2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d007      	beq.n	8005ad0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0201 	orr.w	r2, r2, #1
 8005ace:	619a      	str	r2, [r3, #24]
  }
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005aec:	e03b      	b.n	8005b66 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	6839      	ldr	r1, [r7, #0]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f8d6 	bl	8005ca4 <I2C_IsErrorOccurred>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e041      	b.n	8005b86 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b08:	d02d      	beq.n	8005b66 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0a:	f7fe fb2d 	bl	8004168 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d302      	bcc.n	8005b20 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d122      	bne.n	8005b66 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	bf0c      	ite	eq
 8005b30:	2301      	moveq	r3, #1
 8005b32:	2300      	movne	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d113      	bne.n	8005b66 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b42:	f043 0220 	orr.w	r2, r3, #32
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e00f      	b.n	8005b86 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699a      	ldr	r2, [r3, #24]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d0b4      	beq.n	8005aee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b9a:	e033      	b.n	8005c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f87f 	bl	8005ca4 <I2C_IsErrorOccurred>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e031      	b.n	8005c14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb6:	d025      	beq.n	8005c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb8:	f7fe fad6 	bl	8004168 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d302      	bcc.n	8005bce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d11a      	bne.n	8005c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d013      	beq.n	8005c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be0:	f043 0220 	orr.w	r2, r3, #32
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e007      	b.n	8005c14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d1c4      	bne.n	8005b9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c28:	e02f      	b.n	8005c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 f838 	bl	8005ca4 <I2C_IsErrorOccurred>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e02d      	b.n	8005c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c3e:	f7fe fa93 	bl	8004168 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d302      	bcc.n	8005c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d11a      	bne.n	8005c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	d013      	beq.n	8005c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c66:	f043 0220 	orr.w	r2, r3, #32
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e007      	b.n	8005c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d1c8      	bne.n	8005c2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08a      	sub	sp, #40	@ 0x28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d068      	beq.n	8005da2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2210      	movs	r2, #16
 8005cd6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005cd8:	e049      	b.n	8005d6e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d045      	beq.n	8005d6e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ce2:	f7fe fa41 	bl	8004168 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d302      	bcc.n	8005cf8 <I2C_IsErrorOccurred+0x54>
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d13a      	bne.n	8005d6e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d1a:	d121      	bne.n	8005d60 <I2C_IsErrorOccurred+0xbc>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d22:	d01d      	beq.n	8005d60 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005d24:	7cfb      	ldrb	r3, [r7, #19]
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	d01a      	beq.n	8005d60 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005d3a:	f7fe fa15 	bl	8004168 <HAL_GetTick>
 8005d3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d40:	e00e      	b.n	8005d60 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005d42:	f7fe fa11 	bl	8004168 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b19      	cmp	r3, #25
 8005d4e:	d907      	bls.n	8005d60 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	f043 0320 	orr.w	r3, r3, #32
 8005d56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005d5e:	e006      	b.n	8005d6e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	f003 0320 	and.w	r3, r3, #32
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	d1e9      	bne.n	8005d42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	d003      	beq.n	8005d84 <I2C_IsErrorOccurred+0xe0>
 8005d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0aa      	beq.n	8005cda <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005d84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d103      	bne.n	8005d94 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2220      	movs	r2, #32
 8005d92:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	f043 0304 	orr.w	r3, r3, #4
 8005d9a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00b      	beq.n	8005dcc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00b      	beq.n	8005dee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	f043 0308 	orr.w	r3, r3, #8
 8005ddc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005de6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00b      	beq.n	8005e10 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	f043 0302 	orr.w	r3, r3, #2
 8005dfe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005e10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01c      	beq.n	8005e52 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f7ff fe3b 	bl	8005a94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6859      	ldr	r1, [r3, #4]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	4b0d      	ldr	r3, [pc, #52]	@ (8005e60 <I2C_IsErrorOccurred+0x1bc>)
 8005e2a:	400b      	ands	r3, r1
 8005e2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	431a      	orrs	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005e52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3728      	adds	r7, #40	@ 0x28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	fe00e800 	.word	0xfe00e800

08005e64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	607b      	str	r3, [r7, #4]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	817b      	strh	r3, [r7, #10]
 8005e72:	4613      	mov	r3, r2
 8005e74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e76:	897b      	ldrh	r3, [r7, #10]
 8005e78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e7c:	7a7b      	ldrb	r3, [r7, #9]
 8005e7e:	041b      	lsls	r3, r3, #16
 8005e80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e84:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e92:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	0d5b      	lsrs	r3, r3, #21
 8005e9e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005ea2:	4b08      	ldr	r3, [pc, #32]	@ (8005ec4 <I2C_TransferConfig+0x60>)
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	ea02 0103 	and.w	r1, r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	03ff63ff 	.word	0x03ff63ff

08005ec8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005ed2:	4b23      	ldr	r3, [pc, #140]	@ (8005f60 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	4a22      	ldr	r2, [pc, #136]	@ (8005f60 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ede:	4b20      	ldr	r3, [pc, #128]	@ (8005f60 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ee6:	603b      	str	r3, [r7, #0]
 8005ee8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005eea:	4b1e      	ldr	r3, [pc, #120]	@ (8005f64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1d      	ldr	r2, [pc, #116]	@ (8005f64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ef4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ef6:	f7fe f937 	bl	8004168 <HAL_GetTick>
 8005efa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005efc:	e009      	b.n	8005f12 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005efe:	f7fe f933 	bl	8004168 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f0c:	d901      	bls.n	8005f12 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e022      	b.n	8005f58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f12:	4b14      	ldr	r3, [pc, #80]	@ (8005f64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f1e:	d1ee      	bne.n	8005efe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005f20:	4b10      	ldr	r3, [pc, #64]	@ (8005f64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a0f      	ldr	r2, [pc, #60]	@ (8005f64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f2c:	f7fe f91c 	bl	8004168 <HAL_GetTick>
 8005f30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f32:	e009      	b.n	8005f48 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f34:	f7fe f918 	bl	8004168 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f42:	d901      	bls.n	8005f48 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e007      	b.n	8005f58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f48:	4b06      	ldr	r3, [pc, #24]	@ (8005f64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f54:	d1ee      	bne.n	8005f34 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40023800 	.word	0x40023800
 8005f64:	40007000 	.word	0x40007000

08005f68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005f70:	2300      	movs	r3, #0
 8005f72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e291      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 8087 	beq.w	800609a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f8c:	4b96      	ldr	r3, [pc, #600]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 030c 	and.w	r3, r3, #12
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d00c      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f98:	4b93      	ldr	r3, [pc, #588]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 030c 	and.w	r3, r3, #12
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d112      	bne.n	8005fca <HAL_RCC_OscConfig+0x62>
 8005fa4:	4b90      	ldr	r3, [pc, #576]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fb0:	d10b      	bne.n	8005fca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb2:	4b8d      	ldr	r3, [pc, #564]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d06c      	beq.n	8006098 <HAL_RCC_OscConfig+0x130>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d168      	bne.n	8006098 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e26b      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fd2:	d106      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x7a>
 8005fd4:	4b84      	ldr	r3, [pc, #528]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a83      	ldr	r2, [pc, #524]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8005fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	e02e      	b.n	8006040 <HAL_RCC_OscConfig+0xd8>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10c      	bne.n	8006004 <HAL_RCC_OscConfig+0x9c>
 8005fea:	4b7f      	ldr	r3, [pc, #508]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a7e      	ldr	r2, [pc, #504]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8005ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a7b      	ldr	r2, [pc, #492]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8005ffc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	e01d      	b.n	8006040 <HAL_RCC_OscConfig+0xd8>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800600c:	d10c      	bne.n	8006028 <HAL_RCC_OscConfig+0xc0>
 800600e:	4b76      	ldr	r3, [pc, #472]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a75      	ldr	r2, [pc, #468]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8006014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	4b73      	ldr	r3, [pc, #460]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a72      	ldr	r2, [pc, #456]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8006020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	e00b      	b.n	8006040 <HAL_RCC_OscConfig+0xd8>
 8006028:	4b6f      	ldr	r3, [pc, #444]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a6e      	ldr	r2, [pc, #440]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 800602e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006032:	6013      	str	r3, [r2, #0]
 8006034:	4b6c      	ldr	r3, [pc, #432]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a6b      	ldr	r2, [pc, #428]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 800603a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800603e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d013      	beq.n	8006070 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006048:	f7fe f88e 	bl	8004168 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006050:	f7fe f88a 	bl	8004168 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b64      	cmp	r3, #100	@ 0x64
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e21f      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006062:	4b61      	ldr	r3, [pc, #388]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0f0      	beq.n	8006050 <HAL_RCC_OscConfig+0xe8>
 800606e:	e014      	b.n	800609a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006070:	f7fe f87a 	bl	8004168 <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006078:	f7fe f876 	bl	8004168 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b64      	cmp	r3, #100	@ 0x64
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e20b      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800608a:	4b57      	ldr	r3, [pc, #348]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f0      	bne.n	8006078 <HAL_RCC_OscConfig+0x110>
 8006096:	e000      	b.n	800609a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d069      	beq.n	800617a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060a6:	4b50      	ldr	r3, [pc, #320]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 030c 	and.w	r3, r3, #12
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00b      	beq.n	80060ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060b2:	4b4d      	ldr	r3, [pc, #308]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 030c 	and.w	r3, r3, #12
 80060ba:	2b08      	cmp	r3, #8
 80060bc:	d11c      	bne.n	80060f8 <HAL_RCC_OscConfig+0x190>
 80060be:	4b4a      	ldr	r3, [pc, #296]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d116      	bne.n	80060f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ca:	4b47      	ldr	r3, [pc, #284]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <HAL_RCC_OscConfig+0x17a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d001      	beq.n	80060e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e1df      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e2:	4b41      	ldr	r3, [pc, #260]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	493d      	ldr	r1, [pc, #244]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060f6:	e040      	b.n	800617a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d023      	beq.n	8006148 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006100:	4b39      	ldr	r3, [pc, #228]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a38      	ldr	r2, [pc, #224]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800610c:	f7fe f82c 	bl	8004168 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006112:	e008      	b.n	8006126 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006114:	f7fe f828 	bl	8004168 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e1bd      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006126:	4b30      	ldr	r3, [pc, #192]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0f0      	beq.n	8006114 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006132:	4b2d      	ldr	r3, [pc, #180]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	4929      	ldr	r1, [pc, #164]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8006142:	4313      	orrs	r3, r2
 8006144:	600b      	str	r3, [r1, #0]
 8006146:	e018      	b.n	800617a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006148:	4b27      	ldr	r3, [pc, #156]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a26      	ldr	r2, [pc, #152]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 800614e:	f023 0301 	bic.w	r3, r3, #1
 8006152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006154:	f7fe f808 	bl	8004168 <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800615c:	f7fe f804 	bl	8004168 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e199      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800616e:	4b1e      	ldr	r3, [pc, #120]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f0      	bne.n	800615c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	2b00      	cmp	r3, #0
 8006184:	d038      	beq.n	80061f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d019      	beq.n	80061c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800618e:	4b16      	ldr	r3, [pc, #88]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8006190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006192:	4a15      	ldr	r2, [pc, #84]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 8006194:	f043 0301 	orr.w	r3, r3, #1
 8006198:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800619a:	f7fd ffe5 	bl	8004168 <HAL_GetTick>
 800619e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061a0:	e008      	b.n	80061b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a2:	f7fd ffe1 	bl	8004168 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d901      	bls.n	80061b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e176      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061b4:	4b0c      	ldr	r3, [pc, #48]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 80061b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0f0      	beq.n	80061a2 <HAL_RCC_OscConfig+0x23a>
 80061c0:	e01a      	b.n	80061f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061c2:	4b09      	ldr	r3, [pc, #36]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 80061c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061c6:	4a08      	ldr	r2, [pc, #32]	@ (80061e8 <HAL_RCC_OscConfig+0x280>)
 80061c8:	f023 0301 	bic.w	r3, r3, #1
 80061cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ce:	f7fd ffcb 	bl	8004168 <HAL_GetTick>
 80061d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061d4:	e00a      	b.n	80061ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061d6:	f7fd ffc7 	bl	8004168 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d903      	bls.n	80061ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e15c      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>
 80061e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061ec:	4b91      	ldr	r3, [pc, #580]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 80061ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1ee      	bne.n	80061d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 80a4 	beq.w	800634e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006206:	4b8b      	ldr	r3, [pc, #556]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10d      	bne.n	800622e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006212:	4b88      	ldr	r3, [pc, #544]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006216:	4a87      	ldr	r2, [pc, #540]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800621c:	6413      	str	r3, [r2, #64]	@ 0x40
 800621e:	4b85      	ldr	r3, [pc, #532]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006226:	60bb      	str	r3, [r7, #8]
 8006228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800622a:	2301      	movs	r3, #1
 800622c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800622e:	4b82      	ldr	r3, [pc, #520]	@ (8006438 <HAL_RCC_OscConfig+0x4d0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006236:	2b00      	cmp	r3, #0
 8006238:	d118      	bne.n	800626c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800623a:	4b7f      	ldr	r3, [pc, #508]	@ (8006438 <HAL_RCC_OscConfig+0x4d0>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a7e      	ldr	r2, [pc, #504]	@ (8006438 <HAL_RCC_OscConfig+0x4d0>)
 8006240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006246:	f7fd ff8f 	bl	8004168 <HAL_GetTick>
 800624a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800624c:	e008      	b.n	8006260 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800624e:	f7fd ff8b 	bl	8004168 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b64      	cmp	r3, #100	@ 0x64
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e120      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006260:	4b75      	ldr	r3, [pc, #468]	@ (8006438 <HAL_RCC_OscConfig+0x4d0>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0f0      	beq.n	800624e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d106      	bne.n	8006282 <HAL_RCC_OscConfig+0x31a>
 8006274:	4b6f      	ldr	r3, [pc, #444]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006278:	4a6e      	ldr	r2, [pc, #440]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 800627a:	f043 0301 	orr.w	r3, r3, #1
 800627e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006280:	e02d      	b.n	80062de <HAL_RCC_OscConfig+0x376>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10c      	bne.n	80062a4 <HAL_RCC_OscConfig+0x33c>
 800628a:	4b6a      	ldr	r3, [pc, #424]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 800628c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800628e:	4a69      	ldr	r2, [pc, #420]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006290:	f023 0301 	bic.w	r3, r3, #1
 8006294:	6713      	str	r3, [r2, #112]	@ 0x70
 8006296:	4b67      	ldr	r3, [pc, #412]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629a:	4a66      	ldr	r2, [pc, #408]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 800629c:	f023 0304 	bic.w	r3, r3, #4
 80062a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80062a2:	e01c      	b.n	80062de <HAL_RCC_OscConfig+0x376>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2b05      	cmp	r3, #5
 80062aa:	d10c      	bne.n	80062c6 <HAL_RCC_OscConfig+0x35e>
 80062ac:	4b61      	ldr	r3, [pc, #388]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 80062ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b0:	4a60      	ldr	r2, [pc, #384]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 80062b2:	f043 0304 	orr.w	r3, r3, #4
 80062b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80062b8:	4b5e      	ldr	r3, [pc, #376]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 80062ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062bc:	4a5d      	ldr	r2, [pc, #372]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 80062be:	f043 0301 	orr.w	r3, r3, #1
 80062c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80062c4:	e00b      	b.n	80062de <HAL_RCC_OscConfig+0x376>
 80062c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 80062c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ca:	4a5a      	ldr	r2, [pc, #360]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 80062cc:	f023 0301 	bic.w	r3, r3, #1
 80062d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80062d2:	4b58      	ldr	r3, [pc, #352]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 80062d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d6:	4a57      	ldr	r2, [pc, #348]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 80062d8:	f023 0304 	bic.w	r3, r3, #4
 80062dc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d015      	beq.n	8006312 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e6:	f7fd ff3f 	bl	8004168 <HAL_GetTick>
 80062ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ec:	e00a      	b.n	8006304 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ee:	f7fd ff3b 	bl	8004168 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e0ce      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006304:	4b4b      	ldr	r3, [pc, #300]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0ee      	beq.n	80062ee <HAL_RCC_OscConfig+0x386>
 8006310:	e014      	b.n	800633c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006312:	f7fd ff29 	bl	8004168 <HAL_GetTick>
 8006316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006318:	e00a      	b.n	8006330 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631a:	f7fd ff25 	bl	8004168 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006328:	4293      	cmp	r3, r2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e0b8      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006330:	4b40      	ldr	r3, [pc, #256]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1ee      	bne.n	800631a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800633c:	7dfb      	ldrb	r3, [r7, #23]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d105      	bne.n	800634e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006342:	4b3c      	ldr	r3, [pc, #240]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006346:	4a3b      	ldr	r2, [pc, #236]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006348:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800634c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 80a4 	beq.w	80064a0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006358:	4b36      	ldr	r3, [pc, #216]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f003 030c 	and.w	r3, r3, #12
 8006360:	2b08      	cmp	r3, #8
 8006362:	d06b      	beq.n	800643c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d149      	bne.n	8006400 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800636c:	4b31      	ldr	r3, [pc, #196]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a30      	ldr	r2, [pc, #192]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006372:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fd fef6 	bl	8004168 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006380:	f7fd fef2 	bl	8004168 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e087      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006392:	4b28      	ldr	r3, [pc, #160]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f0      	bne.n	8006380 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69da      	ldr	r2, [r3, #28]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ac:	019b      	lsls	r3, r3, #6
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b4:	085b      	lsrs	r3, r3, #1
 80063b6:	3b01      	subs	r3, #1
 80063b8:	041b      	lsls	r3, r3, #16
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c0:	061b      	lsls	r3, r3, #24
 80063c2:	4313      	orrs	r3, r2
 80063c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 80063c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063ca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063cc:	4b19      	ldr	r3, [pc, #100]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a18      	ldr	r2, [pc, #96]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 80063d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d8:	f7fd fec6 	bl	8004168 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e0:	f7fd fec2 	bl	8004168 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e057      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063f2:	4b10      	ldr	r3, [pc, #64]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0f0      	beq.n	80063e0 <HAL_RCC_OscConfig+0x478>
 80063fe:	e04f      	b.n	80064a0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006400:	4b0c      	ldr	r3, [pc, #48]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a0b      	ldr	r2, [pc, #44]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006406:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800640a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640c:	f7fd feac 	bl	8004168 <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006414:	f7fd fea8 	bl	8004168 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e03d      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006426:	4b03      	ldr	r3, [pc, #12]	@ (8006434 <HAL_RCC_OscConfig+0x4cc>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f0      	bne.n	8006414 <HAL_RCC_OscConfig+0x4ac>
 8006432:	e035      	b.n	80064a0 <HAL_RCC_OscConfig+0x538>
 8006434:	40023800 	.word	0x40023800
 8006438:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800643c:	4b1b      	ldr	r3, [pc, #108]	@ (80064ac <HAL_RCC_OscConfig+0x544>)
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d028      	beq.n	800649c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006454:	429a      	cmp	r2, r3
 8006456:	d121      	bne.n	800649c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006462:	429a      	cmp	r2, r3
 8006464:	d11a      	bne.n	800649c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800646c:	4013      	ands	r3, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006472:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006474:	4293      	cmp	r3, r2
 8006476:	d111      	bne.n	800649c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006482:	085b      	lsrs	r3, r3, #1
 8006484:	3b01      	subs	r3, #1
 8006486:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006488:	429a      	cmp	r2, r3
 800648a:	d107      	bne.n	800649c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006496:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006498:	429a      	cmp	r2, r3
 800649a:	d001      	beq.n	80064a0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e000      	b.n	80064a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40023800 	.word	0x40023800

080064b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e0d0      	b.n	800666a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064c8:	4b6a      	ldr	r3, [pc, #424]	@ (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d910      	bls.n	80064f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064d6:	4b67      	ldr	r3, [pc, #412]	@ (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f023 020f 	bic.w	r2, r3, #15
 80064de:	4965      	ldr	r1, [pc, #404]	@ (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064e6:	4b63      	ldr	r3, [pc, #396]	@ (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d001      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0b8      	b.n	800666a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d020      	beq.n	8006546 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006510:	4b59      	ldr	r3, [pc, #356]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	4a58      	ldr	r2, [pc, #352]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006516:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800651a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006528:	4b53      	ldr	r3, [pc, #332]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	4a52      	ldr	r2, [pc, #328]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 800652e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006532:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006534:	4b50      	ldr	r3, [pc, #320]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	494d      	ldr	r1, [pc, #308]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006542:	4313      	orrs	r3, r2
 8006544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d040      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d107      	bne.n	800656a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800655a:	4b47      	ldr	r3, [pc, #284]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d115      	bne.n	8006592 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e07f      	b.n	800666a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d107      	bne.n	8006582 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006572:	4b41      	ldr	r3, [pc, #260]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e073      	b.n	800666a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006582:	4b3d      	ldr	r3, [pc, #244]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e06b      	b.n	800666a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006592:	4b39      	ldr	r3, [pc, #228]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f023 0203 	bic.w	r2, r3, #3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	4936      	ldr	r1, [pc, #216]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a4:	f7fd fde0 	bl	8004168 <HAL_GetTick>
 80065a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065aa:	e00a      	b.n	80065c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065ac:	f7fd fddc 	bl	8004168 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e053      	b.n	800666a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c2:	4b2d      	ldr	r3, [pc, #180]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 020c 	and.w	r2, r3, #12
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d1eb      	bne.n	80065ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065d4:	4b27      	ldr	r3, [pc, #156]	@ (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 030f 	and.w	r3, r3, #15
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d210      	bcs.n	8006604 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065e2:	4b24      	ldr	r3, [pc, #144]	@ (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f023 020f 	bic.w	r2, r3, #15
 80065ea:	4922      	ldr	r1, [pc, #136]	@ (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065f2:	4b20      	ldr	r3, [pc, #128]	@ (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 030f 	and.w	r3, r3, #15
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d001      	beq.n	8006604 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e032      	b.n	800666a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d008      	beq.n	8006622 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006610:	4b19      	ldr	r3, [pc, #100]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	4916      	ldr	r1, [pc, #88]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 800661e:	4313      	orrs	r3, r2
 8006620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d009      	beq.n	8006642 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800662e:	4b12      	ldr	r3, [pc, #72]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	490e      	ldr	r1, [pc, #56]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 800663e:	4313      	orrs	r3, r2
 8006640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006642:	f000 f821 	bl	8006688 <HAL_RCC_GetSysClockFreq>
 8006646:	4602      	mov	r2, r0
 8006648:	4b0b      	ldr	r3, [pc, #44]	@ (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	091b      	lsrs	r3, r3, #4
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	490a      	ldr	r1, [pc, #40]	@ (800667c <HAL_RCC_ClockConfig+0x1cc>)
 8006654:	5ccb      	ldrb	r3, [r1, r3]
 8006656:	fa22 f303 	lsr.w	r3, r2, r3
 800665a:	4a09      	ldr	r2, [pc, #36]	@ (8006680 <HAL_RCC_ClockConfig+0x1d0>)
 800665c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800665e:	4b09      	ldr	r3, [pc, #36]	@ (8006684 <HAL_RCC_ClockConfig+0x1d4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f7fd fd3c 	bl	80040e0 <HAL_InitTick>

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40023c00 	.word	0x40023c00
 8006678:	40023800 	.word	0x40023800
 800667c:	08010ea8 	.word	0x08010ea8
 8006680:	20000000 	.word	0x20000000
 8006684:	20000038 	.word	0x20000038

08006688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800668c:	b090      	sub	sp, #64	@ 0x40
 800668e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	637b      	str	r3, [r7, #52]	@ 0x34
 8006694:	2300      	movs	r3, #0
 8006696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006698:	2300      	movs	r3, #0
 800669a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800669c:	2300      	movs	r3, #0
 800669e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066a0:	4b59      	ldr	r3, [pc, #356]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x180>)
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f003 030c 	and.w	r3, r3, #12
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d00d      	beq.n	80066c8 <HAL_RCC_GetSysClockFreq+0x40>
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	f200 80a1 	bhi.w	80067f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <HAL_RCC_GetSysClockFreq+0x34>
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d003      	beq.n	80066c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80066ba:	e09b      	b.n	80067f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066bc:	4b53      	ldr	r3, [pc, #332]	@ (800680c <HAL_RCC_GetSysClockFreq+0x184>)
 80066be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80066c0:	e09b      	b.n	80067fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066c2:	4b53      	ldr	r3, [pc, #332]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x188>)
 80066c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80066c6:	e098      	b.n	80067fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066c8:	4b4f      	ldr	r3, [pc, #316]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x180>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80066d2:	4b4d      	ldr	r3, [pc, #308]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x180>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d028      	beq.n	8006730 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066de:	4b4a      	ldr	r3, [pc, #296]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x180>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	099b      	lsrs	r3, r3, #6
 80066e4:	2200      	movs	r2, #0
 80066e6:	623b      	str	r3, [r7, #32]
 80066e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80066f0:	2100      	movs	r1, #0
 80066f2:	4b47      	ldr	r3, [pc, #284]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x188>)
 80066f4:	fb03 f201 	mul.w	r2, r3, r1
 80066f8:	2300      	movs	r3, #0
 80066fa:	fb00 f303 	mul.w	r3, r0, r3
 80066fe:	4413      	add	r3, r2
 8006700:	4a43      	ldr	r2, [pc, #268]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x188>)
 8006702:	fba0 1202 	umull	r1, r2, r0, r2
 8006706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006708:	460a      	mov	r2, r1
 800670a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800670c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800670e:	4413      	add	r3, r2
 8006710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006714:	2200      	movs	r2, #0
 8006716:	61bb      	str	r3, [r7, #24]
 8006718:	61fa      	str	r2, [r7, #28]
 800671a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800671e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006722:	f7fa fa61 	bl	8000be8 <__aeabi_uldivmod>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4613      	mov	r3, r2
 800672c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800672e:	e053      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006730:	4b35      	ldr	r3, [pc, #212]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x180>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	099b      	lsrs	r3, r3, #6
 8006736:	2200      	movs	r2, #0
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	617a      	str	r2, [r7, #20]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006742:	f04f 0b00 	mov.w	fp, #0
 8006746:	4652      	mov	r2, sl
 8006748:	465b      	mov	r3, fp
 800674a:	f04f 0000 	mov.w	r0, #0
 800674e:	f04f 0100 	mov.w	r1, #0
 8006752:	0159      	lsls	r1, r3, #5
 8006754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006758:	0150      	lsls	r0, r2, #5
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	ebb2 080a 	subs.w	r8, r2, sl
 8006762:	eb63 090b 	sbc.w	r9, r3, fp
 8006766:	f04f 0200 	mov.w	r2, #0
 800676a:	f04f 0300 	mov.w	r3, #0
 800676e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006772:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006776:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800677a:	ebb2 0408 	subs.w	r4, r2, r8
 800677e:	eb63 0509 	sbc.w	r5, r3, r9
 8006782:	f04f 0200 	mov.w	r2, #0
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	00eb      	lsls	r3, r5, #3
 800678c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006790:	00e2      	lsls	r2, r4, #3
 8006792:	4614      	mov	r4, r2
 8006794:	461d      	mov	r5, r3
 8006796:	eb14 030a 	adds.w	r3, r4, sl
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	eb45 030b 	adc.w	r3, r5, fp
 80067a0:	607b      	str	r3, [r7, #4]
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067ae:	4629      	mov	r1, r5
 80067b0:	028b      	lsls	r3, r1, #10
 80067b2:	4621      	mov	r1, r4
 80067b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067b8:	4621      	mov	r1, r4
 80067ba:	028a      	lsls	r2, r1, #10
 80067bc:	4610      	mov	r0, r2
 80067be:	4619      	mov	r1, r3
 80067c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c2:	2200      	movs	r2, #0
 80067c4:	60bb      	str	r3, [r7, #8]
 80067c6:	60fa      	str	r2, [r7, #12]
 80067c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067cc:	f7fa fa0c 	bl	8000be8 <__aeabi_uldivmod>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4613      	mov	r3, r2
 80067d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80067d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x180>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	0c1b      	lsrs	r3, r3, #16
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	3301      	adds	r3, #1
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80067e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80067f2:	e002      	b.n	80067fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067f4:	4b05      	ldr	r3, [pc, #20]	@ (800680c <HAL_RCC_GetSysClockFreq+0x184>)
 80067f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80067f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3740      	adds	r7, #64	@ 0x40
 8006800:	46bd      	mov	sp, r7
 8006802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006806:	bf00      	nop
 8006808:	40023800 	.word	0x40023800
 800680c:	00f42400 	.word	0x00f42400
 8006810:	017d7840 	.word	0x017d7840

08006814 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006818:	4b03      	ldr	r3, [pc, #12]	@ (8006828 <HAL_RCC_GetHCLKFreq+0x14>)
 800681a:	681b      	ldr	r3, [r3, #0]
}
 800681c:	4618      	mov	r0, r3
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	20000000 	.word	0x20000000

0800682c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006830:	f7ff fff0 	bl	8006814 <HAL_RCC_GetHCLKFreq>
 8006834:	4602      	mov	r2, r0
 8006836:	4b05      	ldr	r3, [pc, #20]	@ (800684c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	0a9b      	lsrs	r3, r3, #10
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	4903      	ldr	r1, [pc, #12]	@ (8006850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006842:	5ccb      	ldrb	r3, [r1, r3]
 8006844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006848:	4618      	mov	r0, r3
 800684a:	bd80      	pop	{r7, pc}
 800684c:	40023800 	.word	0x40023800
 8006850:	08010eb8 	.word	0x08010eb8

08006854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006858:	f7ff ffdc 	bl	8006814 <HAL_RCC_GetHCLKFreq>
 800685c:	4602      	mov	r2, r0
 800685e:	4b05      	ldr	r3, [pc, #20]	@ (8006874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	0b5b      	lsrs	r3, r3, #13
 8006864:	f003 0307 	and.w	r3, r3, #7
 8006868:	4903      	ldr	r1, [pc, #12]	@ (8006878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800686a:	5ccb      	ldrb	r3, [r1, r3]
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006870:	4618      	mov	r0, r3
 8006872:	bd80      	pop	{r7, pc}
 8006874:	40023800 	.word	0x40023800
 8006878:	08010eb8 	.word	0x08010eb8

0800687c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b088      	sub	sp, #32
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006888:	2300      	movs	r3, #0
 800688a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d012      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80068a4:	4b69      	ldr	r3, [pc, #420]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	4a68      	ldr	r2, [pc, #416]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068aa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80068ae:	6093      	str	r3, [r2, #8]
 80068b0:	4b66      	ldr	r3, [pc, #408]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068b8:	4964      	ldr	r1, [pc, #400]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80068c6:	2301      	movs	r3, #1
 80068c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d017      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068d6:	4b5d      	ldr	r3, [pc, #372]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e4:	4959      	ldr	r1, [pc, #356]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068f4:	d101      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80068f6:	2301      	movs	r3, #1
 80068f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006902:	2301      	movs	r3, #1
 8006904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d017      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006912:	4b4e      	ldr	r3, [pc, #312]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006918:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006920:	494a      	ldr	r1, [pc, #296]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006922:	4313      	orrs	r3, r2
 8006924:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006930:	d101      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006932:	2301      	movs	r3, #1
 8006934:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800693e:	2301      	movs	r3, #1
 8006940:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800694e:	2301      	movs	r3, #1
 8006950:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 808b 	beq.w	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006960:	4b3a      	ldr	r3, [pc, #232]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006964:	4a39      	ldr	r2, [pc, #228]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800696a:	6413      	str	r3, [r2, #64]	@ 0x40
 800696c:	4b37      	ldr	r3, [pc, #220]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800696e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006978:	4b35      	ldr	r3, [pc, #212]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a34      	ldr	r2, [pc, #208]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800697e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006984:	f7fd fbf0 	bl	8004168 <HAL_GetTick>
 8006988:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800698a:	e008      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800698c:	f7fd fbec 	bl	8004168 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b64      	cmp	r3, #100	@ 0x64
 8006998:	d901      	bls.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e357      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800699e:	4b2c      	ldr	r3, [pc, #176]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0f0      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069aa:	4b28      	ldr	r3, [pc, #160]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d035      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d02e      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069c8:	4b20      	ldr	r3, [pc, #128]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069d2:	4b1e      	ldr	r3, [pc, #120]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d6:	4a1d      	ldr	r2, [pc, #116]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069dc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069de:	4b1b      	ldr	r3, [pc, #108]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e2:	4a1a      	ldr	r2, [pc, #104]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80069ea:	4a18      	ldr	r2, [pc, #96]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069f0:	4b16      	ldr	r3, [pc, #88]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d114      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fc:	f7fd fbb4 	bl	8004168 <HAL_GetTick>
 8006a00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a02:	e00a      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a04:	f7fd fbb0 	bl	8004168 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e319      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0ee      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a32:	d111      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006a34:	4b05      	ldr	r3, [pc, #20]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006a40:	4b04      	ldr	r3, [pc, #16]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a42:	400b      	ands	r3, r1
 8006a44:	4901      	ldr	r1, [pc, #4]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	608b      	str	r3, [r1, #8]
 8006a4a:	e00b      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006a4c:	40023800 	.word	0x40023800
 8006a50:	40007000 	.word	0x40007000
 8006a54:	0ffffcff 	.word	0x0ffffcff
 8006a58:	4baa      	ldr	r3, [pc, #680]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	4aa9      	ldr	r2, [pc, #676]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a5e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006a62:	6093      	str	r3, [r2, #8]
 8006a64:	4ba7      	ldr	r3, [pc, #668]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a70:	49a4      	ldr	r1, [pc, #656]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d010      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a82:	4ba0      	ldr	r3, [pc, #640]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a88:	4a9e      	ldr	r2, [pc, #632]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006a92:	4b9c      	ldr	r3, [pc, #624]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a94:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9c:	4999      	ldr	r1, [pc, #612]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00a      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ab0:	4b94      	ldr	r3, [pc, #592]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ab6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006abe:	4991      	ldr	r1, [pc, #580]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ad2:	4b8c      	ldr	r3, [pc, #560]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ae0:	4988      	ldr	r1, [pc, #544]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00a      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006af4:	4b83      	ldr	r3, [pc, #524]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006afa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b02:	4980      	ldr	r1, [pc, #512]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b16:	4b7b      	ldr	r3, [pc, #492]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b1c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b24:	4977      	ldr	r1, [pc, #476]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00a      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b38:	4b72      	ldr	r3, [pc, #456]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b3e:	f023 0203 	bic.w	r2, r3, #3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b46:	496f      	ldr	r1, [pc, #444]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b60:	f023 020c 	bic.w	r2, r3, #12
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b68:	4966      	ldr	r1, [pc, #408]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b7c:	4b61      	ldr	r3, [pc, #388]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b82:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b8a:	495e      	ldr	r1, [pc, #376]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b9e:	4b59      	ldr	r3, [pc, #356]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ba4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bac:	4955      	ldr	r1, [pc, #340]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00a      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006bc0:	4b50      	ldr	r3, [pc, #320]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bc6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bce:	494d      	ldr	r1, [pc, #308]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006be2:	4b48      	ldr	r3, [pc, #288]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006be8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf0:	4944      	ldr	r1, [pc, #272]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00a      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006c04:	4b3f      	ldr	r3, [pc, #252]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c0a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c12:	493c      	ldr	r1, [pc, #240]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00a      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006c26:	4b37      	ldr	r3, [pc, #220]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c34:	4933      	ldr	r1, [pc, #204]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c48:	4b2e      	ldr	r3, [pc, #184]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c4e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c56:	492b      	ldr	r1, [pc, #172]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d011      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c6a:	4b26      	ldr	r3, [pc, #152]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c70:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c78:	4922      	ldr	r1, [pc, #136]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c88:	d101      	bne.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0308 	and.w	r3, r3, #8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006caa:	4b16      	ldr	r3, [pc, #88]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cb0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb8:	4912      	ldr	r1, [pc, #72]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cd2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cdc:	4909      	ldr	r1, [pc, #36]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d006      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 80d9 	beq.w	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006cf8:	4b02      	ldr	r3, [pc, #8]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a01      	ldr	r2, [pc, #4]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cfe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d02:	e001      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006d04:	40023800 	.word	0x40023800
 8006d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d0a:	f7fd fa2d 	bl	8004168 <HAL_GetTick>
 8006d0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d10:	e008      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d12:	f7fd fa29 	bl	8004168 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b64      	cmp	r3, #100	@ 0x64
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e194      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d24:	4b6c      	ldr	r3, [pc, #432]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1f0      	bne.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d021      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d11d      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d44:	4b64      	ldr	r3, [pc, #400]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d4a:	0c1b      	lsrs	r3, r3, #16
 8006d4c:	f003 0303 	and.w	r3, r3, #3
 8006d50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d52:	4b61      	ldr	r3, [pc, #388]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d58:	0e1b      	lsrs	r3, r3, #24
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	019a      	lsls	r2, r3, #6
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	041b      	lsls	r3, r3, #16
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	061b      	lsls	r3, r3, #24
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	071b      	lsls	r3, r3, #28
 8006d78:	4957      	ldr	r1, [pc, #348]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d004      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d94:	d00a      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d02e      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006daa:	d129      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006dac:	4b4a      	ldr	r3, [pc, #296]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006db2:	0c1b      	lsrs	r3, r3, #16
 8006db4:	f003 0303 	and.w	r3, r3, #3
 8006db8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006dba:	4b47      	ldr	r3, [pc, #284]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dc0:	0f1b      	lsrs	r3, r3, #28
 8006dc2:	f003 0307 	and.w	r3, r3, #7
 8006dc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	019a      	lsls	r2, r3, #6
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	041b      	lsls	r3, r3, #16
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	061b      	lsls	r3, r3, #24
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	071b      	lsls	r3, r3, #28
 8006de0:	493d      	ldr	r1, [pc, #244]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006de8:	4b3b      	ldr	r3, [pc, #236]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dee:	f023 021f 	bic.w	r2, r3, #31
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df6:	3b01      	subs	r3, #1
 8006df8:	4937      	ldr	r1, [pc, #220]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01d      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e0c:	4b32      	ldr	r3, [pc, #200]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e12:	0e1b      	lsrs	r3, r3, #24
 8006e14:	f003 030f 	and.w	r3, r3, #15
 8006e18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e20:	0f1b      	lsrs	r3, r3, #28
 8006e22:	f003 0307 	and.w	r3, r3, #7
 8006e26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	019a      	lsls	r2, r3, #6
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	041b      	lsls	r3, r3, #16
 8006e34:	431a      	orrs	r2, r3
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	061b      	lsls	r3, r3, #24
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	071b      	lsls	r3, r3, #28
 8006e40:	4925      	ldr	r1, [pc, #148]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d011      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	019a      	lsls	r2, r3, #6
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	041b      	lsls	r3, r3, #16
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	061b      	lsls	r3, r3, #24
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	071b      	lsls	r3, r3, #28
 8006e70:	4919      	ldr	r1, [pc, #100]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e78:	4b17      	ldr	r3, [pc, #92]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a16      	ldr	r2, [pc, #88]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e84:	f7fd f970 	bl	8004168 <HAL_GetTick>
 8006e88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e8a:	e008      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e8c:	f7fd f96c 	bl	8004168 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b64      	cmp	r3, #100	@ 0x64
 8006e98:	d901      	bls.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e0d7      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0f0      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	f040 80cd 	bne.w	800704c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006eb2:	4b09      	ldr	r3, [pc, #36]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a08      	ldr	r2, [pc, #32]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ebe:	f7fd f953 	bl	8004168 <HAL_GetTick>
 8006ec2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ec4:	e00a      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ec6:	f7fd f94f 	bl	8004168 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b64      	cmp	r3, #100	@ 0x64
 8006ed2:	d903      	bls.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e0ba      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006ed8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006edc:	4b5e      	ldr	r3, [pc, #376]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ee8:	d0ed      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d009      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d02e      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d12a      	bne.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006f12:	4b51      	ldr	r3, [pc, #324]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f18:	0c1b      	lsrs	r3, r3, #16
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f20:	4b4d      	ldr	r3, [pc, #308]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f26:	0f1b      	lsrs	r3, r3, #28
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	019a      	lsls	r2, r3, #6
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	041b      	lsls	r3, r3, #16
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	061b      	lsls	r3, r3, #24
 8006f40:	431a      	orrs	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	071b      	lsls	r3, r3, #28
 8006f46:	4944      	ldr	r1, [pc, #272]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f4e:	4b42      	ldr	r3, [pc, #264]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f54:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	493d      	ldr	r1, [pc, #244]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d022      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f7c:	d11d      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f7e:	4b36      	ldr	r3, [pc, #216]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f84:	0e1b      	lsrs	r3, r3, #24
 8006f86:	f003 030f 	and.w	r3, r3, #15
 8006f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f8c:	4b32      	ldr	r3, [pc, #200]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f92:	0f1b      	lsrs	r3, r3, #28
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	019a      	lsls	r2, r3, #6
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	041b      	lsls	r3, r3, #16
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	061b      	lsls	r3, r3, #24
 8006fac:	431a      	orrs	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	071b      	lsls	r3, r3, #28
 8006fb2:	4929      	ldr	r1, [pc, #164]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0308 	and.w	r3, r3, #8
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d028      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006fc6:	4b24      	ldr	r3, [pc, #144]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fcc:	0e1b      	lsrs	r3, r3, #24
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006fd4:	4b20      	ldr	r3, [pc, #128]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fda:	0c1b      	lsrs	r3, r3, #16
 8006fdc:	f003 0303 	and.w	r3, r3, #3
 8006fe0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	019a      	lsls	r2, r3, #6
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	041b      	lsls	r3, r3, #16
 8006fec:	431a      	orrs	r2, r3
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	061b      	lsls	r3, r3, #24
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	071b      	lsls	r3, r3, #28
 8006ffa:	4917      	ldr	r1, [pc, #92]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007002:	4b15      	ldr	r3, [pc, #84]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007008:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	4911      	ldr	r1, [pc, #68]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007012:	4313      	orrs	r3, r2
 8007014:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007018:	4b0f      	ldr	r3, [pc, #60]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a0e      	ldr	r2, [pc, #56]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800701e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007024:	f7fd f8a0 	bl	8004168 <HAL_GetTick>
 8007028:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800702a:	e008      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800702c:	f7fd f89c 	bl	8004168 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b64      	cmp	r3, #100	@ 0x64
 8007038:	d901      	bls.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e007      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800703e:	4b06      	ldr	r3, [pc, #24]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800704a:	d1ef      	bne.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3720      	adds	r7, #32
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	40023800 	.word	0x40023800

0800705c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a80      	ldr	r2, [pc, #512]	@ (800726c <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800706c:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800706e:	4b80      	ldr	r3, [pc, #512]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007074:	099b      	lsrs	r3, r3, #6
 8007076:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800707e:	4b7c      	ldr	r3, [pc, #496]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007084:	0c1b      	lsrs	r3, r3, #16
 8007086:	f003 0203 	and.w	r2, r3, #3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800708e:	4b78      	ldr	r3, [pc, #480]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007094:	0e1b      	lsrs	r3, r3, #24
 8007096:	f003 020f 	and.w	r2, r3, #15
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800709e:	4b74      	ldr	r3, [pc, #464]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80070a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070a4:	0f1b      	lsrs	r3, r3, #28
 80070a6:	f003 0207 	and.w	r2, r3, #7
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 80070ae:	4b70      	ldr	r3, [pc, #448]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80070b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b4:	099b      	lsrs	r3, r3, #6
 80070b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80070be:	4b6c      	ldr	r3, [pc, #432]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80070c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c4:	0c1b      	lsrs	r3, r3, #16
 80070c6:	f003 0203 	and.w	r2, r3, #3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070ce:	4b68      	ldr	r3, [pc, #416]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80070d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d4:	0e1b      	lsrs	r3, r3, #24
 80070d6:	f003 020f 	and.w	r2, r3, #15
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070de:	4b64      	ldr	r3, [pc, #400]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80070e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e4:	0f1b      	lsrs	r3, r3, #28
 80070e6:	f003 0207 	and.w	r2, r3, #7
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 80070ee:	4b60      	ldr	r3, [pc, #384]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80070f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070f4:	f003 021f 	and.w	r2, r3, #31
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 80070fc:	4b5c      	ldr	r3, [pc, #368]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80070fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007102:	0a1b      	lsrs	r3, r3, #8
 8007104:	f003 021f 	and.w	r2, r3, #31
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800710c:	4b58      	ldr	r3, [pc, #352]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800710e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007112:	0c1b      	lsrs	r3, r3, #16
 8007114:	f003 0203 	and.w	r2, r3, #3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800711c:	4b54      	ldr	r3, [pc, #336]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800711e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007122:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800712a:	4b51      	ldr	r3, [pc, #324]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800712c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007130:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8007138:	4b4d      	ldr	r3, [pc, #308]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8007144:	4b4a      	ldr	r3, [pc, #296]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800714a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8007152:	4b47      	ldr	r3, [pc, #284]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007158:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8007160:	4b43      	ldr	r3, [pc, #268]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007166:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800716e:	4b40      	ldr	r3, [pc, #256]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007174:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800717c:	4b3c      	ldr	r3, [pc, #240]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800717e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007182:	f003 0203 	and.w	r2, r3, #3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800718a:	4b39      	ldr	r3, [pc, #228]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800718c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007190:	f003 020c 	and.w	r2, r3, #12
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8007198:	4b35      	ldr	r3, [pc, #212]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800719a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800719e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80071a6:	4b32      	ldr	r3, [pc, #200]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ac:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80071b4:	4b2e      	ldr	r3, [pc, #184]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ba:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80071c2:	4b2b      	ldr	r3, [pc, #172]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071c8:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80071d0:	4b27      	ldr	r3, [pc, #156]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071d6:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80071de:	4b24      	ldr	r3, [pc, #144]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071e4:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80071ec:	4b20      	ldr	r3, [pc, #128]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071f2:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80071fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007200:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8007208:	4b19      	ldr	r3, [pc, #100]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800720a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800720e:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007216:	4b16      	ldr	r3, [pc, #88]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800721c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007226:	4b12      	ldr	r3, [pc, #72]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800722e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007230:	4b0f      	ldr	r3, [pc, #60]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007234:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8007240:	4b0b      	ldr	r3, [pc, #44]	@ (8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007242:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007246:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d103      	bne.n	8007256 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8007254:	e003      	b.n	800725e <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800725c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800725e:	bf00      	nop
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	00fffff1 	.word	0x00fffff1
 8007270:	40023800 	.word	0x40023800

08007274 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007280:	2300      	movs	r3, #0
 8007282:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007284:	2300      	movs	r3, #0
 8007286:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007288:	2300      	movs	r3, #0
 800728a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007292:	f040 808d 	bne.w	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007296:	4b93      	ldr	r3, [pc, #588]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007298:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800729c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80072a4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072ac:	d07c      	beq.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072b4:	d87b      	bhi.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d004      	beq.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072c2:	d039      	beq.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80072c4:	e073      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80072c6:	4b87      	ldr	r3, [pc, #540]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d108      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80072d2:	4b84      	ldr	r3, [pc, #528]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072da:	4a83      	ldr	r2, [pc, #524]	@ (80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80072dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e0:	613b      	str	r3, [r7, #16]
 80072e2:	e007      	b.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80072e4:	4b7f      	ldr	r3, [pc, #508]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072ec:	4a7f      	ldr	r2, [pc, #508]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80072ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80072f4:	4b7b      	ldr	r3, [pc, #492]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80072f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072fa:	0e1b      	lsrs	r3, r3, #24
 80072fc:	f003 030f 	and.w	r3, r3, #15
 8007300:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007302:	4b78      	ldr	r3, [pc, #480]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007308:	099b      	lsrs	r3, r3, #6
 800730a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	fb03 f202 	mul.w	r2, r3, r2
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	fbb2 f3f3 	udiv	r3, r2, r3
 800731a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800731c:	4b71      	ldr	r3, [pc, #452]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800731e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007322:	0a1b      	lsrs	r3, r3, #8
 8007324:	f003 031f 	and.w	r3, r3, #31
 8007328:	3301      	adds	r3, #1
 800732a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	fbb2 f3f3 	udiv	r3, r2, r3
 8007334:	617b      	str	r3, [r7, #20]
        break;
 8007336:	e03b      	b.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007338:	4b6a      	ldr	r3, [pc, #424]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d108      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007344:	4b67      	ldr	r3, [pc, #412]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800734c:	4a66      	ldr	r2, [pc, #408]	@ (80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800734e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007352:	613b      	str	r3, [r7, #16]
 8007354:	e007      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007356:	4b63      	ldr	r3, [pc, #396]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800735e:	4a63      	ldr	r2, [pc, #396]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007360:	fbb2 f3f3 	udiv	r3, r2, r3
 8007364:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007366:	4b5f      	ldr	r3, [pc, #380]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800736c:	0e1b      	lsrs	r3, r3, #24
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007374:	4b5b      	ldr	r3, [pc, #364]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800737a:	099b      	lsrs	r3, r3, #6
 800737c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	fb03 f202 	mul.w	r2, r3, r2
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	fbb2 f3f3 	udiv	r3, r2, r3
 800738c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800738e:	4b55      	ldr	r3, [pc, #340]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007390:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007394:	f003 031f 	and.w	r3, r3, #31
 8007398:	3301      	adds	r3, #1
 800739a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a4:	617b      	str	r3, [r7, #20]
        break;
 80073a6:	e003      	b.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80073a8:	4b51      	ldr	r3, [pc, #324]	@ (80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80073aa:	617b      	str	r3, [r7, #20]
        break;
 80073ac:	e000      	b.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 80073ae:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073b6:	f040 808d 	bne.w	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 80073ba:	4b4a      	ldr	r3, [pc, #296]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80073bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073c0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80073c8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80073d0:	d07c      	beq.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80073d8:	d87b      	bhi.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d004      	beq.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073e6:	d039      	beq.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80073e8:	e073      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80073ea:	4b3e      	ldr	r3, [pc, #248]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d108      	bne.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80073f6:	4b3b      	ldr	r3, [pc, #236]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073fe:	4a3a      	ldr	r2, [pc, #232]	@ (80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007400:	fbb2 f3f3 	udiv	r3, r2, r3
 8007404:	613b      	str	r3, [r7, #16]
 8007406:	e007      	b.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007408:	4b36      	ldr	r3, [pc, #216]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007410:	4a36      	ldr	r2, [pc, #216]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007412:	fbb2 f3f3 	udiv	r3, r2, r3
 8007416:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007418:	4b32      	ldr	r3, [pc, #200]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800741a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800741e:	0e1b      	lsrs	r3, r3, #24
 8007420:	f003 030f 	and.w	r3, r3, #15
 8007424:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007426:	4b2f      	ldr	r3, [pc, #188]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800742c:	099b      	lsrs	r3, r3, #6
 800742e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	fb03 f202 	mul.w	r2, r3, r2
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	fbb2 f3f3 	udiv	r3, r2, r3
 800743e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007440:	4b28      	ldr	r3, [pc, #160]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007442:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007446:	0a1b      	lsrs	r3, r3, #8
 8007448:	f003 031f 	and.w	r3, r3, #31
 800744c:	3301      	adds	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	fbb2 f3f3 	udiv	r3, r2, r3
 8007458:	617b      	str	r3, [r7, #20]
        break;
 800745a:	e03b      	b.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800745c:	4b21      	ldr	r3, [pc, #132]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d108      	bne.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007468:	4b1e      	ldr	r3, [pc, #120]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007470:	4a1d      	ldr	r2, [pc, #116]	@ (80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007472:	fbb2 f3f3 	udiv	r3, r2, r3
 8007476:	613b      	str	r3, [r7, #16]
 8007478:	e007      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800747a:	4b1a      	ldr	r3, [pc, #104]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007482:	4a1a      	ldr	r2, [pc, #104]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007484:	fbb2 f3f3 	udiv	r3, r2, r3
 8007488:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800748a:	4b16      	ldr	r3, [pc, #88]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800748c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007490:	0e1b      	lsrs	r3, r3, #24
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007498:	4b12      	ldr	r3, [pc, #72]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800749a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800749e:	099b      	lsrs	r3, r3, #6
 80074a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	fb03 f202 	mul.w	r2, r3, r2
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80074b2:	4b0c      	ldr	r3, [pc, #48]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	3301      	adds	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c8:	617b      	str	r3, [r7, #20]
        break;
 80074ca:	e003      	b.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 80074cc:	4b08      	ldr	r3, [pc, #32]	@ (80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80074ce:	617b      	str	r3, [r7, #20]
        break;
 80074d0:	e000      	b.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 80074d2:	bf00      	nop
      }
    }
  }

  return frequency;
 80074d4:	697b      	ldr	r3, [r7, #20]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	40023800 	.word	0x40023800
 80074e8:	00f42400 	.word	0x00f42400
 80074ec:	017d7840 	.word	0x017d7840
 80074f0:	00bb8000 	.word	0x00bb8000

080074f4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80074fc:	2300      	movs	r3, #0
 80074fe:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e156      	b.n	80077c0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d106      	bne.n	800752c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7fa f8f6 	bl	8001718 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2202      	movs	r2, #2
 8007530:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fad5 	bl	8007ae4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	2b02      	cmp	r3, #2
 8007540:	d00c      	beq.n	800755c <HAL_SAI_Init+0x68>
 8007542:	2b02      	cmp	r3, #2
 8007544:	d80d      	bhi.n	8007562 <HAL_SAI_Init+0x6e>
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <HAL_SAI_Init+0x5c>
 800754a:	2b01      	cmp	r3, #1
 800754c:	d003      	beq.n	8007556 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800754e:	e008      	b.n	8007562 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	61fb      	str	r3, [r7, #28]
      break;
 8007554:	e006      	b.n	8007564 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007556:	2310      	movs	r3, #16
 8007558:	61fb      	str	r3, [r7, #28]
      break;
 800755a:	e003      	b.n	8007564 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800755c:	2320      	movs	r3, #32
 800755e:	61fb      	str	r3, [r7, #28]
      break;
 8007560:	e000      	b.n	8007564 <HAL_SAI_Init+0x70>
      break;
 8007562:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	2b03      	cmp	r3, #3
 800756a:	d81e      	bhi.n	80075aa <HAL_SAI_Init+0xb6>
 800756c:	a201      	add	r2, pc, #4	@ (adr r2, 8007574 <HAL_SAI_Init+0x80>)
 800756e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007572:	bf00      	nop
 8007574:	08007585 	.word	0x08007585
 8007578:	0800758b 	.word	0x0800758b
 800757c:	08007593 	.word	0x08007593
 8007580:	0800759b 	.word	0x0800759b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8007584:	2300      	movs	r3, #0
 8007586:	617b      	str	r3, [r7, #20]
    }
    break;
 8007588:	e010      	b.n	80075ac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800758a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800758e:	617b      	str	r3, [r7, #20]
    }
    break;
 8007590:	e00c      	b.n	80075ac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007592:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007596:	617b      	str	r3, [r7, #20]
    }
    break;
 8007598:	e008      	b.n	80075ac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800759a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800759e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	f043 0301 	orr.w	r3, r3, #1
 80075a6:	61fb      	str	r3, [r7, #28]
    }
    break;
 80075a8:	e000      	b.n	80075ac <HAL_SAI_Init+0xb8>
    default:
      break;
 80075aa:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a85      	ldr	r2, [pc, #532]	@ (80077c8 <HAL_SAI_Init+0x2d4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d004      	beq.n	80075c0 <HAL_SAI_Init+0xcc>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a84      	ldr	r2, [pc, #528]	@ (80077cc <HAL_SAI_Init+0x2d8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d103      	bne.n	80075c8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80075c0:	4a83      	ldr	r2, [pc, #524]	@ (80077d0 <HAL_SAI_Init+0x2dc>)
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	e002      	b.n	80075ce <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80075c8:	4a82      	ldr	r2, [pc, #520]	@ (80077d4 <HAL_SAI_Init+0x2e0>)
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d04c      	beq.n	8007670 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a7a      	ldr	r2, [pc, #488]	@ (80077c8 <HAL_SAI_Init+0x2d4>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d004      	beq.n	80075ee <HAL_SAI_Init+0xfa>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a78      	ldr	r2, [pc, #480]	@ (80077cc <HAL_SAI_Init+0x2d8>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d104      	bne.n	80075f8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80075ee:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80075f2:	f7ff fe3f 	bl	8007274 <HAL_RCCEx_GetPeriphCLKFreq>
 80075f6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a76      	ldr	r2, [pc, #472]	@ (80077d8 <HAL_SAI_Init+0x2e4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d004      	beq.n	800760c <HAL_SAI_Init+0x118>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a75      	ldr	r2, [pc, #468]	@ (80077dc <HAL_SAI_Init+0x2e8>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d104      	bne.n	8007616 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800760c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007610:	f7ff fe30 	bl	8007274 <HAL_RCCEx_GetPeriphCLKFreq>
 8007614:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4613      	mov	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	461a      	mov	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	025b      	lsls	r3, r3, #9
 8007628:	fbb2 f3f3 	udiv	r3, r2, r3
 800762c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4a6b      	ldr	r2, [pc, #428]	@ (80077e0 <HAL_SAI_Init+0x2ec>)
 8007632:	fba2 2303 	umull	r2, r3, r2, r3
 8007636:	08da      	lsrs	r2, r3, #3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800763c:	68f9      	ldr	r1, [r7, #12]
 800763e:	4b68      	ldr	r3, [pc, #416]	@ (80077e0 <HAL_SAI_Init+0x2ec>)
 8007640:	fba3 2301 	umull	r2, r3, r3, r1
 8007644:	08da      	lsrs	r2, r3, #3
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	1aca      	subs	r2, r1, r3
 8007650:	2a08      	cmp	r2, #8
 8007652:	d904      	bls.n	800765e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007662:	2b04      	cmp	r3, #4
 8007664:	d104      	bne.n	8007670 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	085a      	lsrs	r2, r3, #1
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <HAL_SAI_Init+0x18c>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	2b02      	cmp	r3, #2
 800767e:	d109      	bne.n	8007694 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007684:	2b01      	cmp	r3, #1
 8007686:	d101      	bne.n	800768c <HAL_SAI_Init+0x198>
 8007688:	2300      	movs	r3, #0
 800768a:	e001      	b.n	8007690 <HAL_SAI_Init+0x19c>
 800768c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007690:	61bb      	str	r3, [r7, #24]
 8007692:	e008      	b.n	80076a6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007698:	2b01      	cmp	r3, #1
 800769a:	d102      	bne.n	80076a2 <HAL_SAI_Init+0x1ae>
 800769c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076a0:	e000      	b.n	80076a4 <HAL_SAI_Init+0x1b0>
 80076a2:	2300      	movs	r3, #0
 80076a4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6819      	ldr	r1, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	4b4c      	ldr	r3, [pc, #304]	@ (80077e4 <HAL_SAI_Init+0x2f0>)
 80076b2:	400b      	ands	r3, r1
 80076b4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6819      	ldr	r1, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80076ca:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d0:	431a      	orrs	r2, r3
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 80076de:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80076ea:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	051b      	lsls	r3, r3, #20
 80076f2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6859      	ldr	r1, [r3, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	4b38      	ldr	r3, [pc, #224]	@ (80077e8 <HAL_SAI_Init+0x2f4>)
 8007708:	400b      	ands	r3, r1
 800770a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6859      	ldr	r1, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	699a      	ldr	r2, [r3, #24]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771a:	431a      	orrs	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007720:	431a      	orrs	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6899      	ldr	r1, [r3, #8]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	4b2d      	ldr	r3, [pc, #180]	@ (80077ec <HAL_SAI_Init+0x2f8>)
 8007736:	400b      	ands	r3, r1
 8007738:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6899      	ldr	r1, [r3, #8]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007744:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800774a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8007750:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8007756:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800775c:	3b01      	subs	r3, #1
 800775e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007760:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	430a      	orrs	r2, r1
 8007768:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68d9      	ldr	r1, [r3, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007778:	400b      	ands	r3, r1
 800777a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68d9      	ldr	r1, [r3, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800778a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007790:	041b      	lsls	r3, r3, #16
 8007792:	431a      	orrs	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007798:	3b01      	subs	r3, #1
 800779a:	021b      	lsls	r3, r3, #8
 800779c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3720      	adds	r7, #32
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	40015804 	.word	0x40015804
 80077cc:	40015824 	.word	0x40015824
 80077d0:	40015800 	.word	0x40015800
 80077d4:	40015c00 	.word	0x40015c00
 80077d8:	40015c04 	.word	0x40015c04
 80077dc:	40015c24 	.word	0x40015c24
 80077e0:	cccccccd 	.word	0xcccccccd
 80077e4:	ff05c010 	.word	0xff05c010
 80077e8:	ffff1ff0 	.word	0xffff1ff0
 80077ec:	fff88000 	.word	0xfff88000

080077f0 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e027      	b.n	8007852 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2202      	movs	r2, #2
 8007806:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2200      	movs	r2, #0
 8007810:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f04f 32ff 	mov.w	r2, #4294967295
 800781a:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f961 	bl	8007ae4 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f042 0208 	orr.w	r2, r2, #8
 8007830:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7fa f80c 	bl	8001850 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800786c:	2b01      	cmp	r3, #1
 800786e:	d101      	bne.n	8007874 <HAL_SAI_DMAStop+0x1a>
 8007870:	2302      	movs	r3, #2
 8007872:	e061      	b.n	8007938 <HAL_SAI_DMAStop+0xde>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f931 	bl	8007ae4 <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007890:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007896:	2b00      	cmp	r3, #0
 8007898:	d01c      	beq.n	80078d4 <HAL_SAI_DMAStop+0x7a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b12      	cmp	r3, #18
 80078a4:	d116      	bne.n	80078d4 <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fc ff0a 	bl	80046c4 <HAL_DMA_Abort>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00e      	beq.n	80078d4 <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078bc:	2b80      	cmp	r3, #128	@ 0x80
 80078be:	d009      	beq.n	80078d4 <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d01c      	beq.n	8007916 <HAL_SAI_DMAStop+0xbc>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b22      	cmp	r3, #34	@ 0x22
 80078e6:	d116      	bne.n	8007916 <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fc fee9 	bl	80046c4 <HAL_DMA_Abort>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00e      	beq.n	8007916 <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078fe:	2b80      	cmp	r3, #128	@ 0x80
 8007900:	d009      	beq.n	8007916 <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800790c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f042 0208 	orr.w	r2, r2, #8
 8007924:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8007936:	7bfb      	ldrb	r3, [r7, #15]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	4613      	mov	r3, r2
 800794c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <HAL_SAI_Receive_DMA+0x1a>
 8007954:	88fb      	ldrh	r3, [r7, #6]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e074      	b.n	8007a48 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b01      	cmp	r3, #1
 8007968:	d16d      	bne.n	8007a46 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007970:	2b01      	cmp	r3, #1
 8007972:	d101      	bne.n	8007978 <HAL_SAI_Receive_DMA+0x38>
 8007974:	2302      	movs	r3, #2
 8007976:	e067      	b.n	8007a48 <HAL_SAI_Receive_DMA+0x108>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	88fa      	ldrh	r2, [r7, #6]
 800798a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	88fa      	ldrh	r2, [r7, #6]
 8007992:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2222      	movs	r2, #34	@ 0x22
 80079a2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079aa:	4a29      	ldr	r2, [pc, #164]	@ (8007a50 <HAL_SAI_Receive_DMA+0x110>)
 80079ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b2:	4a28      	ldr	r2, [pc, #160]	@ (8007a54 <HAL_SAI_Receive_DMA+0x114>)
 80079b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ba:	4a27      	ldr	r2, [pc, #156]	@ (8007a58 <HAL_SAI_Receive_DMA+0x118>)
 80079bc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079c2:	2200      	movs	r2, #0
 80079c4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	331c      	adds	r3, #28
 80079d0:	4619      	mov	r1, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079d6:	461a      	mov	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80079de:	f7fc fe11 	bl	8004604 <HAL_DMA_Start_IT>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d005      	beq.n	80079f4 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e029      	b.n	8007a48 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80079f4:	2100      	movs	r1, #0
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 f83e 	bl	8007a78 <SAI_InterruptFlag>
 80079fc:	4601      	mov	r1, r0
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	691a      	ldr	r2, [r3, #16]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007a1a:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d107      	bne.n	8007a3a <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007a38:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	e000      	b.n	8007a48 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8007a46:	2302      	movs	r3, #2
  }
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	08007bb5 	.word	0x08007bb5
 8007a54:	08007b55 	.word	0x08007b55
 8007a58:	08007bd1 	.word	0x08007bd1

08007a5c <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007a6a:	b2db      	uxtb	r3, r3
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d103      	bne.n	8007a94 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f043 0308 	orr.w	r3, r3, #8
 8007a92:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d10b      	bne.n	8007ab4 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d003      	beq.n	8007aac <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d103      	bne.n	8007ab4 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f043 0310 	orr.w	r3, r3, #16
 8007ab2:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d003      	beq.n	8007ac4 <SAI_InterruptFlag+0x4c>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d104      	bne.n	8007ace <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	e003      	b.n	8007ad6 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f043 0304 	orr.w	r3, r3, #4
 8007ad4:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8007aec:	4b17      	ldr	r3, [pc, #92]	@ (8007b4c <SAI_Disable+0x68>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a17      	ldr	r2, [pc, #92]	@ (8007b50 <SAI_Disable+0x6c>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	0b1b      	lsrs	r3, r3, #12
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007b0e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	1e5a      	subs	r2, r3, #1
 8007b14:	60fa      	str	r2, [r7, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	72fb      	strb	r3, [r7, #11]
      break;
 8007b2e:	e006      	b.n	8007b3e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e8      	bne.n	8007b10 <SAI_Disable+0x2c>

  return status;
 8007b3e:	7afb      	ldrb	r3, [r7, #11]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	20000000 	.word	0x20000000
 8007b50:	95cbec1b 	.word	0x95cbec1b

08007b54 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b60:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b6a:	d01c      	beq.n	8007ba6 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007b7a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007b84:	2100      	movs	r1, #0
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f7ff ff76 	bl	8007a78 <SAI_InterruptFlag>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	43d9      	mvns	r1, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691a      	ldr	r2, [r3, #16]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	400a      	ands	r2, r1
 8007b9c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f7fc f8f2 	bl	8003d90 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007bac:	bf00      	nop
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f7fc f8ee 	bl	8003da4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007bc8:	bf00      	nop
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007be4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d004      	beq.n	8007c02 <SAI_DMAError+0x32>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d112      	bne.n	8007c28 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007c10:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f7ff ff66 	bl	8007ae4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7fb feb1 	bl	8003990 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007c2e:	bf00      	nop
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e022      	b.n	8007c8e <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d105      	bne.n	8007c60 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7f9 fe4a 	bl	80018f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2203      	movs	r2, #3
 8007c64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f815 	bl	8007c98 <HAL_SD_InitCard>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e00a      	b.n	8007c8e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c98:	b5b0      	push	{r4, r5, r7, lr}
 8007c9a:	b08e      	sub	sp, #56	@ 0x38
 8007c9c:	af04      	add	r7, sp, #16
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007cac:	2300      	movs	r3, #0
 8007cae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007cb4:	2376      	movs	r3, #118	@ 0x76
 8007cb6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681d      	ldr	r5, [r3, #0]
 8007cbc:	466c      	mov	r4, sp
 8007cbe:	f107 0314 	add.w	r3, r7, #20
 8007cc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007cc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007cca:	f107 0308 	add.w	r3, r7, #8
 8007cce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f001 fddf 	bl	8009894 <SDMMC_Init>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e059      	b.n	8007d9c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007cf6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f001 fe13 	bl	8009928 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d10:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007d12:	2002      	movs	r0, #2
 8007d14:	f7fc fa34 	bl	8004180 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 ff59 	bl	8008bd0 <SD_PowerON>
 8007d1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	431a      	orrs	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e02e      	b.n	8007d9c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fe78 	bl	8008a34 <SD_InitCard>
 8007d44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e01b      	b.n	8007d9c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f001 fe6d 	bl	8009a4c <SDMMC_CmdBlockLength>
 8007d72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00f      	beq.n	8007d9a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a09      	ldr	r2, [pc, #36]	@ (8007da4 <HAL_SD_InitCard+0x10c>)
 8007d80:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e000      	b.n	8007d9c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3728      	adds	r7, #40	@ 0x28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bdb0      	pop	{r4, r5, r7, pc}
 8007da4:	004005ff 	.word	0x004005ff

08007da8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08c      	sub	sp, #48	@ 0x30
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d107      	bne.n	8007dd0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e0c3      	b.n	8007f58 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	f040 80bc 	bne.w	8007f56 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007de4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	441a      	add	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d907      	bls.n	8007e02 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e0aa      	b.n	8007f58 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2203      	movs	r2, #3
 8007e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8007e20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e26:	4a4e      	ldr	r2, [pc, #312]	@ (8007f60 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007e28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e2e:	4a4d      	ldr	r2, [pc, #308]	@ (8007f64 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007e30:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e36:	2200      	movs	r2, #0
 8007e38:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3e:	2200      	movs	r2, #0
 8007e40:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3380      	adds	r3, #128	@ 0x80
 8007e68:	4619      	mov	r1, r3
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	025b      	lsls	r3, r3, #9
 8007e70:	089b      	lsrs	r3, r3, #2
 8007e72:	f7fc fbc7 	bl	8004604 <HAL_DMA_Start_IT>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d017      	beq.n	8007eac <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8007e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a35      	ldr	r2, [pc, #212]	@ (8007f68 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007e92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e98:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e055      	b.n	8007f58 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0208 	orr.w	r2, r2, #8
 8007eba:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d002      	beq.n	8007eca <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8007ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec6:	025b      	lsls	r3, r3, #9
 8007ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007eca:	f04f 33ff 	mov.w	r3, #4294967295
 8007ece:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	025b      	lsls	r3, r3, #9
 8007ed4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007ed6:	2390      	movs	r3, #144	@ 0x90
 8007ed8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007eda:	2302      	movs	r3, #2
 8007edc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f107 0210 	add.w	r2, r7, #16
 8007eee:	4611      	mov	r1, r2
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f001 fd7f 	bl	80099f4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d90a      	bls.n	8007f12 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2282      	movs	r2, #130	@ 0x82
 8007f00:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f001 fde3 	bl	8009ad4 <SDMMC_CmdReadMultiBlock>
 8007f0e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007f10:	e009      	b.n	8007f26 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2281      	movs	r2, #129	@ 0x81
 8007f16:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f001 fdb6 	bl	8009a90 <SDMMC_CmdReadSingleBlock>
 8007f24:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d012      	beq.n	8007f52 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a0d      	ldr	r2, [pc, #52]	@ (8007f68 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007f32:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e002      	b.n	8007f58 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	e000      	b.n	8007f58 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8007f56:	2302      	movs	r3, #2
  }
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3730      	adds	r7, #48	@ 0x30
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	08008843 	.word	0x08008843
 8007f64:	080088b5 	.word	0x080088b5
 8007f68:	004005ff 	.word	0x004005ff

08007f6c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08c      	sub	sp, #48	@ 0x30
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d107      	bne.n	8007f94 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f88:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e0c6      	b.n	8008122 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	f040 80bf 	bne.w	8008120 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007fa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	441a      	add	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d907      	bls.n	8007fc6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fba:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e0ad      	b.n	8008122 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2203      	movs	r2, #3
 8007fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 021a 	orr.w	r2, r2, #26
 8007fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fea:	4a50      	ldr	r2, [pc, #320]	@ (800812c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007fec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff2:	4a4f      	ldr	r2, [pc, #316]	@ (8008130 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007ff4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008002:	2b01      	cmp	r3, #1
 8008004:	d002      	beq.n	800800c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008008:	025b      	lsls	r3, r3, #9
 800800a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d90a      	bls.n	8008028 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	22a0      	movs	r2, #160	@ 0xa0
 8008016:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800801e:	4618      	mov	r0, r3
 8008020:	f001 fd9c 	bl	8009b5c <SDMMC_CmdWriteMultiBlock>
 8008024:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008026:	e009      	b.n	800803c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2290      	movs	r2, #144	@ 0x90
 800802c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008034:	4618      	mov	r0, r3
 8008036:	f001 fd6f 	bl	8009b18 <SDMMC_CmdWriteSingleBlock>
 800803a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800803c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d012      	beq.n	8008068 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a3b      	ldr	r2, [pc, #236]	@ (8008134 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008048:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800804e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008050:	431a      	orrs	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e05c      	b.n	8008122 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0208 	orr.w	r2, r2, #8
 8008076:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807c:	2240      	movs	r2, #64	@ 0x40
 800807e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008090:	689a      	ldr	r2, [r3, #8]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	430a      	orrs	r2, r1
 800809a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80080a0:	68b9      	ldr	r1, [r7, #8]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3380      	adds	r3, #128	@ 0x80
 80080a8:	461a      	mov	r2, r3
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	025b      	lsls	r3, r3, #9
 80080ae:	089b      	lsrs	r3, r3, #2
 80080b0:	f7fc faa8 	bl	8004604 <HAL_DMA_Start_IT>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d01a      	beq.n	80080f0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 021a 	bic.w	r2, r2, #26
 80080c8:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a19      	ldr	r2, [pc, #100]	@ (8008134 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80080d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e018      	b.n	8008122 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80080f0:	f04f 33ff 	mov.w	r3, #4294967295
 80080f4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	025b      	lsls	r3, r3, #9
 80080fa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80080fc:	2390      	movs	r3, #144	@ 0x90
 80080fe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008100:	2300      	movs	r3, #0
 8008102:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008104:	2300      	movs	r3, #0
 8008106:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008108:	2301      	movs	r3, #1
 800810a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f107 0210 	add.w	r2, r7, #16
 8008114:	4611      	mov	r1, r2
 8008116:	4618      	mov	r0, r3
 8008118:	f001 fc6c 	bl	80099f4 <SDMMC_ConfigData>

      return HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	e000      	b.n	8008122 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008120:	2302      	movs	r3, #2
  }
}
 8008122:	4618      	mov	r0, r3
 8008124:	3730      	adds	r7, #48	@ 0x30
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	08008819 	.word	0x08008819
 8008130:	080088b5 	.word	0x080088b5
 8008134:	004005ff 	.word	0x004005ff

08008138 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008144:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800814c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d008      	beq.n	8008166 <HAL_SD_IRQHandler+0x2e>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f003 0308 	and.w	r3, r3, #8
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fdec 	bl	8008d3c <SD_Read_IT>
 8008164:	e15a      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800816c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 808d 	beq.w	8008290 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800817e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	4b9a      	ldr	r3, [pc, #616]	@ (80083f4 <HAL_SD_IRQHandler+0x2bc>)
 800818c:	400b      	ands	r3, r1
 800818e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0201 	bic.w	r2, r2, #1
 800819e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f003 0308 	and.w	r3, r3, #8
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d039      	beq.n	800821e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d104      	bne.n	80081be <HAL_SD_IRQHandler+0x86>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d011      	beq.n	80081e2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f001 fcec 	bl	8009ba0 <SDMMC_CmdStopTransfer>
 80081c8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d008      	beq.n	80081e2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	431a      	orrs	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f921 	bl	8008424 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80081ea:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <HAL_SD_IRQHandler+0xd6>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f002 fc76 	bl	800ab00 <HAL_SD_RxCpltCallback>
 8008214:	e102      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f002 fc68 	bl	800aaec <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800821c:	e0fe      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 80f9 	beq.w	800841c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f003 0320 	and.w	r3, r3, #32
 8008230:	2b00      	cmp	r3, #0
 8008232:	d011      	beq.n	8008258 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4618      	mov	r0, r3
 800823a:	f001 fcb1 	bl	8009ba0 <SDMMC_CmdStopTransfer>
 800823e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d008      	beq.n	8008258 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	431a      	orrs	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f8e6 	bl	8008424 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	f040 80dc 	bne.w	800841c <HAL_SD_IRQHandler+0x2e4>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b00      	cmp	r3, #0
 800826c:	f040 80d6 	bne.w	800841c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f022 0208 	bic.w	r2, r2, #8
 800827e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f002 fc2f 	bl	800aaec <HAL_SD_TxCpltCallback>
}
 800828e:	e0c5      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d008      	beq.n	80082b0 <HAL_SD_IRQHandler+0x178>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f003 0308 	and.w	r3, r3, #8
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fd98 	bl	8008dde <SD_Write_IT>
 80082ae:	e0b5      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082b6:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 80ae 	beq.w	800841c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d2:	f043 0202 	orr.w	r2, r3, #2
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ec:	f043 0208 	orr.w	r2, r3, #8
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082fa:	f003 0320 	and.w	r3, r3, #32
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d005      	beq.n	800830e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008306:	f043 0220 	orr.w	r2, r3, #32
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008320:	f043 0210 	orr.w	r2, r3, #16
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008330:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008340:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f001 fc2a 	bl	8009ba0 <SDMMC_CmdStopTransfer>
 800834c:	4602      	mov	r2, r0
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f003 0308 	and.w	r3, r3, #8
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f857 	bl	8008424 <HAL_SD_ErrorCallback>
}
 8008376:	e051      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800837e:	2b00      	cmp	r3, #0
 8008380:	d04c      	beq.n	800841c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f003 0310 	and.w	r3, r3, #16
 8008388:	2b00      	cmp	r3, #0
 800838a:	d104      	bne.n	8008396 <HAL_SD_IRQHandler+0x25e>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f003 0320 	and.w	r3, r3, #32
 8008392:	2b00      	cmp	r3, #0
 8008394:	d011      	beq.n	80083ba <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800839a:	4a17      	ldr	r2, [pc, #92]	@ (80083f8 <HAL_SD_IRQHandler+0x2c0>)
 800839c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fc f9fe 	bl	80047a4 <HAL_DMA_Abort_IT>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d036      	beq.n	800841c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fad0 	bl	8008958 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80083b8:	e030      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d104      	bne.n	80083ce <HAL_SD_IRQHandler+0x296>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d018      	beq.n	8008400 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d2:	4a0a      	ldr	r2, [pc, #40]	@ (80083fc <HAL_SD_IRQHandler+0x2c4>)
 80083d4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fc f9e2 	bl	80047a4 <HAL_DMA_Abort_IT>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d01a      	beq.n	800841c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 faeb 	bl	80089c6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80083f0:	e014      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
 80083f2:	bf00      	nop
 80083f4:	ffff3ec5 	.word	0xffff3ec5
 80083f8:	08008959 	.word	0x08008959
 80083fc:	080089c7 	.word	0x080089c7
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f002 fb5f 	bl	800aad8 <HAL_SD_AbortCallback>
}
 800841a:	e7ff      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
 800841c:	bf00      	nop
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008446:	0f9b      	lsrs	r3, r3, #30
 8008448:	b2da      	uxtb	r2, r3
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008452:	0e9b      	lsrs	r3, r3, #26
 8008454:	b2db      	uxtb	r3, r3
 8008456:	f003 030f 	and.w	r3, r3, #15
 800845a:	b2da      	uxtb	r2, r3
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008464:	0e1b      	lsrs	r3, r3, #24
 8008466:	b2db      	uxtb	r3, r3
 8008468:	f003 0303 	and.w	r3, r3, #3
 800846c:	b2da      	uxtb	r2, r3
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008476:	0c1b      	lsrs	r3, r3, #16
 8008478:	b2da      	uxtb	r2, r3
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008482:	0a1b      	lsrs	r3, r3, #8
 8008484:	b2da      	uxtb	r2, r3
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800848e:	b2da      	uxtb	r2, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008498:	0d1b      	lsrs	r3, r3, #20
 800849a:	b29a      	uxth	r2, r3
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084a4:	0c1b      	lsrs	r3, r3, #16
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	f003 030f 	and.w	r3, r3, #15
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084b6:	0bdb      	lsrs	r3, r3, #15
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084c8:	0b9b      	lsrs	r3, r3, #14
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084da:	0b5b      	lsrs	r3, r3, #13
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084ec:	0b1b      	lsrs	r3, r3, #12
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2200      	movs	r2, #0
 80084fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008504:	2b00      	cmp	r3, #0
 8008506:	d163      	bne.n	80085d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800850c:	009a      	lsls	r2, r3, #2
 800850e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008512:	4013      	ands	r3, r2
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008518:	0f92      	lsrs	r2, r2, #30
 800851a:	431a      	orrs	r2, r3
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008524:	0edb      	lsrs	r3, r3, #27
 8008526:	b2db      	uxtb	r3, r3
 8008528:	f003 0307 	and.w	r3, r3, #7
 800852c:	b2da      	uxtb	r2, r3
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008536:	0e1b      	lsrs	r3, r3, #24
 8008538:	b2db      	uxtb	r3, r3
 800853a:	f003 0307 	and.w	r3, r3, #7
 800853e:	b2da      	uxtb	r2, r3
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008548:	0d5b      	lsrs	r3, r3, #21
 800854a:	b2db      	uxtb	r3, r3
 800854c:	f003 0307 	and.w	r3, r3, #7
 8008550:	b2da      	uxtb	r2, r3
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800855a:	0c9b      	lsrs	r3, r3, #18
 800855c:	b2db      	uxtb	r3, r3
 800855e:	f003 0307 	and.w	r3, r3, #7
 8008562:	b2da      	uxtb	r2, r3
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800856c:	0bdb      	lsrs	r3, r3, #15
 800856e:	b2db      	uxtb	r3, r3
 8008570:	f003 0307 	and.w	r3, r3, #7
 8008574:	b2da      	uxtb	r2, r3
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	1c5a      	adds	r2, r3, #1
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	7e1b      	ldrb	r3, [r3, #24]
 8008588:	b2db      	uxtb	r3, r3
 800858a:	f003 0307 	and.w	r3, r3, #7
 800858e:	3302      	adds	r3, #2
 8008590:	2201      	movs	r2, #1
 8008592:	fa02 f303 	lsl.w	r3, r2, r3
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800859a:	fb03 f202 	mul.w	r2, r3, r2
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	7a1b      	ldrb	r3, [r3, #8]
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	f003 030f 	and.w	r3, r3, #15
 80085ac:	2201      	movs	r2, #1
 80085ae:	409a      	lsls	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80085bc:	0a52      	lsrs	r2, r2, #9
 80085be:	fb03 f202 	mul.w	r2, r3, r2
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085cc:	661a      	str	r2, [r3, #96]	@ 0x60
 80085ce:	e031      	b.n	8008634 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d11d      	bne.n	8008614 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085dc:	041b      	lsls	r3, r3, #16
 80085de:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085e6:	0c1b      	lsrs	r3, r3, #16
 80085e8:	431a      	orrs	r2, r3
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	3301      	adds	r3, #1
 80085f4:	029a      	lsls	r2, r3, #10
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008608:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	661a      	str	r2, [r3, #96]	@ 0x60
 8008612:	e00f      	b.n	8008634 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a58      	ldr	r2, [pc, #352]	@ (800877c <HAL_SD_GetCardCSD+0x344>)
 800861a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008620:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e09d      	b.n	8008770 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008638:	0b9b      	lsrs	r3, r3, #14
 800863a:	b2db      	uxtb	r3, r3
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	b2da      	uxtb	r2, r3
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800864a:	09db      	lsrs	r3, r3, #7
 800864c:	b2db      	uxtb	r3, r3
 800864e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008652:	b2da      	uxtb	r2, r3
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800865c:	b2db      	uxtb	r3, r3
 800865e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008662:	b2da      	uxtb	r2, r3
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800866c:	0fdb      	lsrs	r3, r3, #31
 800866e:	b2da      	uxtb	r2, r3
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008678:	0f5b      	lsrs	r3, r3, #29
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	b2da      	uxtb	r2, r3
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800868a:	0e9b      	lsrs	r3, r3, #26
 800868c:	b2db      	uxtb	r3, r3
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	b2da      	uxtb	r2, r3
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800869c:	0d9b      	lsrs	r3, r3, #22
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	f003 030f 	and.w	r3, r3, #15
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ae:	0d5b      	lsrs	r3, r3, #21
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ca:	0c1b      	lsrs	r3, r3, #16
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086de:	0bdb      	lsrs	r3, r3, #15
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f2:	0b9b      	lsrs	r3, r3, #14
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008706:	0b5b      	lsrs	r3, r3, #13
 8008708:	b2db      	uxtb	r3, r3
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	b2da      	uxtb	r2, r3
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800871a:	0b1b      	lsrs	r3, r3, #12
 800871c:	b2db      	uxtb	r3, r3
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	b2da      	uxtb	r2, r3
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800872e:	0a9b      	lsrs	r3, r3, #10
 8008730:	b2db      	uxtb	r3, r3
 8008732:	f003 0303 	and.w	r3, r3, #3
 8008736:	b2da      	uxtb	r2, r3
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008742:	0a1b      	lsrs	r3, r3, #8
 8008744:	b2db      	uxtb	r3, r3
 8008746:	f003 0303 	and.w	r3, r3, #3
 800874a:	b2da      	uxtb	r2, r3
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008756:	085b      	lsrs	r3, r3, #1
 8008758:	b2db      	uxtb	r3, r3
 800875a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800875e:	b2da      	uxtb	r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	004005ff 	.word	0x004005ff

08008780 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80087e4:	f107 030c 	add.w	r3, r7, #12
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fa7e 	bl	8008cec <SD_SendStatus>
 80087f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	431a      	orrs	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	0a5b      	lsrs	r3, r3, #9
 8008808:	f003 030f 	and.w	r3, r3, #15
 800880c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800880e:	693b      	ldr	r3, [r7, #16]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3718      	adds	r7, #24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008824:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008834:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8008836:	bf00      	nop
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008854:	2b82      	cmp	r3, #130	@ 0x82
 8008856:	d111      	bne.n	800887c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4618      	mov	r0, r3
 800885e:	f001 f99f 	bl	8009ba0 <SDMMC_CmdStopTransfer>
 8008862:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d008      	beq.n	800887c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	431a      	orrs	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f7ff fdd4 	bl	8008424 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f022 0208 	bic.w	r2, r2, #8
 800888a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008894:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f002 f92b 	bl	800ab00 <HAL_SD_RxCpltCallback>
#endif
}
 80088aa:	bf00      	nop
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7fc f91a 	bl	8004afc <HAL_DMA_GetError>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d03e      	beq.n	800894c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088dc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d002      	beq.n	80088ea <SD_DMAError+0x36>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d12d      	bne.n	8008946 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a19      	ldr	r2, [pc, #100]	@ (8008954 <SD_DMAError+0xa0>)
 80088f0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008900:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008906:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800890e:	6978      	ldr	r0, [r7, #20]
 8008910:	f7ff ff62 	bl	80087d8 <HAL_SD_GetCardState>
 8008914:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b06      	cmp	r3, #6
 800891a:	d002      	beq.n	8008922 <SD_DMAError+0x6e>
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b05      	cmp	r3, #5
 8008920:	d10a      	bne.n	8008938 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4618      	mov	r0, r3
 8008928:	f001 f93a 	bl	8009ba0 <SDMMC_CmdStopTransfer>
 800892c:	4602      	mov	r2, r0
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008932:	431a      	orrs	r2, r3
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2200      	movs	r2, #0
 8008944:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008946:	6978      	ldr	r0, [r7, #20]
 8008948:	f7ff fd6c 	bl	8008424 <HAL_SD_ErrorCallback>
#endif
  }
}
 800894c:	bf00      	nop
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	004005ff 	.word	0x004005ff

08008958 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008964:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800896e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f7ff ff31 	bl	80087d8 <HAL_SD_GetCardState>
 8008976:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b06      	cmp	r3, #6
 800898a:	d002      	beq.n	8008992 <SD_DMATxAbort+0x3a>
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b05      	cmp	r3, #5
 8008990:	d10a      	bne.n	80089a8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4618      	mov	r0, r3
 8008998:	f001 f902 	bl	8009ba0 <SDMMC_CmdStopTransfer>
 800899c:	4602      	mov	r2, r0
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a2:	431a      	orrs	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d103      	bne.n	80089b8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f002 f891 	bl	800aad8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80089b6:	e002      	b.n	80089be <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f7ff fd33 	bl	8008424 <HAL_SD_ErrorCallback>
}
 80089be:	bf00      	nop
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80089dc:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f7ff fefa 	bl	80087d8 <HAL_SD_GetCardState>
 80089e4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2b06      	cmp	r3, #6
 80089f8:	d002      	beq.n	8008a00 <SD_DMARxAbort+0x3a>
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b05      	cmp	r3, #5
 80089fe:	d10a      	bne.n	8008a16 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f001 f8cb 	bl	8009ba0 <SDMMC_CmdStopTransfer>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a10:	431a      	orrs	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d103      	bne.n	8008a26 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f002 f85a 	bl	800aad8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008a24:	e002      	b.n	8008a2c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f7ff fcfc 	bl	8008424 <HAL_SD_ErrorCallback>
}
 8008a2c:	bf00      	nop
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008a34:	b5b0      	push	{r4, r5, r7, lr}
 8008a36:	b094      	sub	sp, #80	@ 0x50
 8008a38:	af04      	add	r7, sp, #16
 8008a3a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 ff7d 	bl	8009944 <SDMMC_GetPowerState>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d102      	bne.n	8008a56 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008a50:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008a54:	e0b8      	b.n	8008bc8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a5a:	2b03      	cmp	r3, #3
 8008a5c:	d02f      	beq.n	8008abe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f001 f964 	bl	8009d30 <SDMMC_CmdSendCID>
 8008a68:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <SD_InitCard+0x40>
    {
      return errorstate;
 8008a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a72:	e0a9      	b.n	8008bc8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 ffa7 	bl	80099ce <SDMMC_GetResponse>
 8008a80:	4602      	mov	r2, r0
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2104      	movs	r1, #4
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f000 ff9e 	bl	80099ce <SDMMC_GetResponse>
 8008a92:	4602      	mov	r2, r0
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2108      	movs	r1, #8
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 ff95 	bl	80099ce <SDMMC_GetResponse>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	210c      	movs	r1, #12
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 ff8c 	bl	80099ce <SDMMC_GetResponse>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d00d      	beq.n	8008ae2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f107 020e 	add.w	r2, r7, #14
 8008ace:	4611      	mov	r1, r2
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f001 f96a 	bl	8009daa <SDMMC_CmdSetRelAdd>
 8008ad6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <SD_InitCard+0xae>
    {
      return errorstate;
 8008ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae0:	e072      	b.n	8008bc8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d036      	beq.n	8008b58 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008aea:	89fb      	ldrh	r3, [r7, #14]
 8008aec:	461a      	mov	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008afa:	041b      	lsls	r3, r3, #16
 8008afc:	4619      	mov	r1, r3
 8008afe:	4610      	mov	r0, r2
 8008b00:	f001 f934 	bl	8009d6c <SDMMC_CmdSendCSD>
 8008b04:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b0e:	e05b      	b.n	8008bc8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2100      	movs	r1, #0
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 ff59 	bl	80099ce <SDMMC_GetResponse>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2104      	movs	r1, #4
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 ff50 	bl	80099ce <SDMMC_GetResponse>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2108      	movs	r1, #8
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 ff47 	bl	80099ce <SDMMC_GetResponse>
 8008b40:	4602      	mov	r2, r0
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	210c      	movs	r1, #12
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 ff3e 	bl	80099ce <SDMMC_GetResponse>
 8008b52:	4602      	mov	r2, r0
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2104      	movs	r1, #4
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 ff35 	bl	80099ce <SDMMC_GetResponse>
 8008b64:	4603      	mov	r3, r0
 8008b66:	0d1a      	lsrs	r2, r3, #20
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008b6c:	f107 0310 	add.w	r3, r7, #16
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7ff fc60 	bl	8008438 <HAL_SD_GetCardCSD>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b7e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008b82:	e021      	b.n	8008bc8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6819      	ldr	r1, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b8c:	041b      	lsls	r3, r3, #16
 8008b8e:	2200      	movs	r2, #0
 8008b90:	461c      	mov	r4, r3
 8008b92:	4615      	mov	r5, r2
 8008b94:	4622      	mov	r2, r4
 8008b96:	462b      	mov	r3, r5
 8008b98:	4608      	mov	r0, r1
 8008b9a:	f001 f823 	bl	8009be4 <SDMMC_CmdSelDesel>
 8008b9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <SD_InitCard+0x176>
  {
    return errorstate;
 8008ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ba8:	e00e      	b.n	8008bc8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681d      	ldr	r5, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	466c      	mov	r4, sp
 8008bb2:	f103 0210 	add.w	r2, r3, #16
 8008bb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8008bb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f000 fe67 	bl	8009894 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3740      	adds	r7, #64	@ 0x40
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bdb0      	pop	{r4, r5, r7, pc}

08008bd0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	617b      	str	r3, [r7, #20]
 8008be0:	2300      	movs	r3, #0
 8008be2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f001 f81e 	bl	8009c2a <SDMMC_CmdGoIdleState>
 8008bee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <SD_PowerON+0x2a>
  {
    return errorstate;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	e072      	b.n	8008ce0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f001 f831 	bl	8009c66 <SDMMC_CmdOperCond>
 8008c04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00d      	beq.n	8008c28 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f001 f807 	bl	8009c2a <SDMMC_CmdGoIdleState>
 8008c1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	e05b      	b.n	8008ce0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d137      	bne.n	8008ca6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f001 f831 	bl	8009ca4 <SDMMC_CmdAppCommand>
 8008c42:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d02d      	beq.n	8008ca6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c4a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008c4e:	e047      	b.n	8008ce0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2100      	movs	r1, #0
 8008c56:	4618      	mov	r0, r3
 8008c58:	f001 f824 	bl	8009ca4 <SDMMC_CmdAppCommand>
 8008c5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <SD_PowerON+0x98>
    {
      return errorstate;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	e03b      	b.n	8008ce0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	491e      	ldr	r1, [pc, #120]	@ (8008ce8 <SD_PowerON+0x118>)
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f001 f83a 	bl	8009ce8 <SDMMC_CmdAppOperCommand>
 8008c74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c7c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008c80:	e02e      	b.n	8008ce0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2100      	movs	r1, #0
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 fea0 	bl	80099ce <SDMMC_GetResponse>
 8008c8e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	0fdb      	lsrs	r3, r3, #31
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d101      	bne.n	8008c9c <SD_PowerON+0xcc>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e000      	b.n	8008c9e <SD_PowerON+0xce>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	613b      	str	r3, [r7, #16]

    count++;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d802      	bhi.n	8008cb6 <SD_PowerON+0xe6>
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d0cc      	beq.n	8008c50 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d902      	bls.n	8008cc6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008cc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008cc4:	e00c      	b.n	8008ce0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d003      	beq.n	8008cd8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	645a      	str	r2, [r3, #68]	@ 0x44
 8008cd6:	e002      	b.n	8008cde <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	c1100000 	.word	0xc1100000

08008cec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d102      	bne.n	8008d02 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008cfc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008d00:	e018      	b.n	8008d34 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d0a:	041b      	lsls	r3, r3, #16
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f001 f86c 	bl	8009dec <SDMMC_CmdSendStatus>
 8008d14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	e009      	b.n	8008d34 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2100      	movs	r1, #0
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 fe51 	bl	80099ce <SDMMC_GetResponse>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d48:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d03f      	beq.n	8008dd6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008d56:	2300      	movs	r3, #0
 8008d58:	617b      	str	r3, [r7, #20]
 8008d5a:	e033      	b.n	8008dc4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 fdc3 	bl	80098ec <SDMMC_ReadFIFO>
 8008d66:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3301      	adds	r3, #1
 8008d74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	0a1b      	lsrs	r3, r3, #8
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	0c1b      	lsrs	r3, r3, #16
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	0e1b      	lsrs	r3, r3, #24
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3301      	adds	r3, #1
 8008db6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	617b      	str	r3, [r7, #20]
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	2b07      	cmp	r3, #7
 8008dc8:	d9c8      	bls.n	8008d5c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8008dd6:	bf00      	nop
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b086      	sub	sp, #24
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d043      	beq.n	8008e80 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008df8:	2300      	movs	r3, #0
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	e037      	b.n	8008e6e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3301      	adds	r3, #1
 8008e08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	021a      	lsls	r2, r3, #8
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	041a      	lsls	r2, r3, #16
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	061a      	lsls	r2, r3, #24
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	3b01      	subs	r3, #1
 8008e56:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f107 0208 	add.w	r2, r7, #8
 8008e60:	4611      	mov	r1, r2
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 fd4f 	bl	8009906 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	617b      	str	r3, [r7, #20]
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2b07      	cmp	r3, #7
 8008e72:	d9c4      	bls.n	8008dfe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8008e80:	bf00      	nop
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e040      	b.n	8008f1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d106      	bne.n	8008eb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7f8 ffc8 	bl	8001e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2224      	movs	r2, #36	@ 0x24
 8008eb4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f022 0201 	bic.w	r2, r2, #1
 8008ec4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d002      	beq.n	8008ed4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fb16 	bl	8009500 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f8af 	bl	8009038 <UART_SetConfig>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d101      	bne.n	8008ee4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e01b      	b.n	8008f1c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685a      	ldr	r2, [r3, #4]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ef2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689a      	ldr	r2, [r3, #8]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f042 0201 	orr.w	r2, r2, #1
 8008f12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fb95 	bl	8009644 <UART_CheckIdleState>
 8008f1a:	4603      	mov	r3, r0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08a      	sub	sp, #40	@ 0x28
 8008f28:	af02      	add	r7, sp, #8
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	603b      	str	r3, [r7, #0]
 8008f30:	4613      	mov	r3, r2
 8008f32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f38:	2b20      	cmp	r3, #32
 8008f3a:	d177      	bne.n	800902c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d002      	beq.n	8008f48 <HAL_UART_Transmit+0x24>
 8008f42:	88fb      	ldrh	r3, [r7, #6]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d101      	bne.n	8008f4c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e070      	b.n	800902e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2221      	movs	r2, #33	@ 0x21
 8008f58:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f5a:	f7fb f905 	bl	8004168 <HAL_GetTick>
 8008f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	88fa      	ldrh	r2, [r7, #6]
 8008f64:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	88fa      	ldrh	r2, [r7, #6]
 8008f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f78:	d108      	bne.n	8008f8c <HAL_UART_Transmit+0x68>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d104      	bne.n	8008f8c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	61bb      	str	r3, [r7, #24]
 8008f8a:	e003      	b.n	8008f94 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f90:	2300      	movs	r3, #0
 8008f92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f94:	e02f      	b.n	8008ff6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2180      	movs	r1, #128	@ 0x80
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 fba6 	bl	80096f2 <UART_WaitOnFlagUntilTimeout>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d004      	beq.n	8008fb6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2220      	movs	r2, #32
 8008fb0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e03b      	b.n	800902e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10b      	bne.n	8008fd4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	3302      	adds	r3, #2
 8008fd0:	61bb      	str	r3, [r7, #24]
 8008fd2:	e007      	b.n	8008fe4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	781a      	ldrb	r2, [r3, #0]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	3b01      	subs	r3, #1
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1c9      	bne.n	8008f96 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2200      	movs	r2, #0
 800900a:	2140      	movs	r1, #64	@ 0x40
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 fb70 	bl	80096f2 <UART_WaitOnFlagUntilTimeout>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d004      	beq.n	8009022 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2220      	movs	r2, #32
 800901c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e005      	b.n	800902e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2220      	movs	r2, #32
 8009026:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	e000      	b.n	800902e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800902c:	2302      	movs	r3, #2
  }
}
 800902e:	4618      	mov	r0, r3
 8009030:	3720      	adds	r7, #32
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b088      	sub	sp, #32
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	689a      	ldr	r2, [r3, #8]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	431a      	orrs	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	431a      	orrs	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	4313      	orrs	r3, r2
 800905a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	4ba6      	ldr	r3, [pc, #664]	@ (80092fc <UART_SetConfig+0x2c4>)
 8009064:	4013      	ands	r3, r2
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	6812      	ldr	r2, [r2, #0]
 800906a:	6979      	ldr	r1, [r7, #20]
 800906c:	430b      	orrs	r3, r1
 800906e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68da      	ldr	r2, [r3, #12]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	430a      	orrs	r2, r1
 8009084:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a1b      	ldr	r3, [r3, #32]
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	4313      	orrs	r3, r2
 8009094:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a94      	ldr	r2, [pc, #592]	@ (8009300 <UART_SetConfig+0x2c8>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d120      	bne.n	80090f6 <UART_SetConfig+0xbe>
 80090b4:	4b93      	ldr	r3, [pc, #588]	@ (8009304 <UART_SetConfig+0x2cc>)
 80090b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ba:	f003 0303 	and.w	r3, r3, #3
 80090be:	2b03      	cmp	r3, #3
 80090c0:	d816      	bhi.n	80090f0 <UART_SetConfig+0xb8>
 80090c2:	a201      	add	r2, pc, #4	@ (adr r2, 80090c8 <UART_SetConfig+0x90>)
 80090c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c8:	080090d9 	.word	0x080090d9
 80090cc:	080090e5 	.word	0x080090e5
 80090d0:	080090df 	.word	0x080090df
 80090d4:	080090eb 	.word	0x080090eb
 80090d8:	2301      	movs	r3, #1
 80090da:	77fb      	strb	r3, [r7, #31]
 80090dc:	e150      	b.n	8009380 <UART_SetConfig+0x348>
 80090de:	2302      	movs	r3, #2
 80090e0:	77fb      	strb	r3, [r7, #31]
 80090e2:	e14d      	b.n	8009380 <UART_SetConfig+0x348>
 80090e4:	2304      	movs	r3, #4
 80090e6:	77fb      	strb	r3, [r7, #31]
 80090e8:	e14a      	b.n	8009380 <UART_SetConfig+0x348>
 80090ea:	2308      	movs	r3, #8
 80090ec:	77fb      	strb	r3, [r7, #31]
 80090ee:	e147      	b.n	8009380 <UART_SetConfig+0x348>
 80090f0:	2310      	movs	r3, #16
 80090f2:	77fb      	strb	r3, [r7, #31]
 80090f4:	e144      	b.n	8009380 <UART_SetConfig+0x348>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a83      	ldr	r2, [pc, #524]	@ (8009308 <UART_SetConfig+0x2d0>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d132      	bne.n	8009166 <UART_SetConfig+0x12e>
 8009100:	4b80      	ldr	r3, [pc, #512]	@ (8009304 <UART_SetConfig+0x2cc>)
 8009102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009106:	f003 030c 	and.w	r3, r3, #12
 800910a:	2b0c      	cmp	r3, #12
 800910c:	d828      	bhi.n	8009160 <UART_SetConfig+0x128>
 800910e:	a201      	add	r2, pc, #4	@ (adr r2, 8009114 <UART_SetConfig+0xdc>)
 8009110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009114:	08009149 	.word	0x08009149
 8009118:	08009161 	.word	0x08009161
 800911c:	08009161 	.word	0x08009161
 8009120:	08009161 	.word	0x08009161
 8009124:	08009155 	.word	0x08009155
 8009128:	08009161 	.word	0x08009161
 800912c:	08009161 	.word	0x08009161
 8009130:	08009161 	.word	0x08009161
 8009134:	0800914f 	.word	0x0800914f
 8009138:	08009161 	.word	0x08009161
 800913c:	08009161 	.word	0x08009161
 8009140:	08009161 	.word	0x08009161
 8009144:	0800915b 	.word	0x0800915b
 8009148:	2300      	movs	r3, #0
 800914a:	77fb      	strb	r3, [r7, #31]
 800914c:	e118      	b.n	8009380 <UART_SetConfig+0x348>
 800914e:	2302      	movs	r3, #2
 8009150:	77fb      	strb	r3, [r7, #31]
 8009152:	e115      	b.n	8009380 <UART_SetConfig+0x348>
 8009154:	2304      	movs	r3, #4
 8009156:	77fb      	strb	r3, [r7, #31]
 8009158:	e112      	b.n	8009380 <UART_SetConfig+0x348>
 800915a:	2308      	movs	r3, #8
 800915c:	77fb      	strb	r3, [r7, #31]
 800915e:	e10f      	b.n	8009380 <UART_SetConfig+0x348>
 8009160:	2310      	movs	r3, #16
 8009162:	77fb      	strb	r3, [r7, #31]
 8009164:	e10c      	b.n	8009380 <UART_SetConfig+0x348>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a68      	ldr	r2, [pc, #416]	@ (800930c <UART_SetConfig+0x2d4>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d120      	bne.n	80091b2 <UART_SetConfig+0x17a>
 8009170:	4b64      	ldr	r3, [pc, #400]	@ (8009304 <UART_SetConfig+0x2cc>)
 8009172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009176:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800917a:	2b30      	cmp	r3, #48	@ 0x30
 800917c:	d013      	beq.n	80091a6 <UART_SetConfig+0x16e>
 800917e:	2b30      	cmp	r3, #48	@ 0x30
 8009180:	d814      	bhi.n	80091ac <UART_SetConfig+0x174>
 8009182:	2b20      	cmp	r3, #32
 8009184:	d009      	beq.n	800919a <UART_SetConfig+0x162>
 8009186:	2b20      	cmp	r3, #32
 8009188:	d810      	bhi.n	80091ac <UART_SetConfig+0x174>
 800918a:	2b00      	cmp	r3, #0
 800918c:	d002      	beq.n	8009194 <UART_SetConfig+0x15c>
 800918e:	2b10      	cmp	r3, #16
 8009190:	d006      	beq.n	80091a0 <UART_SetConfig+0x168>
 8009192:	e00b      	b.n	80091ac <UART_SetConfig+0x174>
 8009194:	2300      	movs	r3, #0
 8009196:	77fb      	strb	r3, [r7, #31]
 8009198:	e0f2      	b.n	8009380 <UART_SetConfig+0x348>
 800919a:	2302      	movs	r3, #2
 800919c:	77fb      	strb	r3, [r7, #31]
 800919e:	e0ef      	b.n	8009380 <UART_SetConfig+0x348>
 80091a0:	2304      	movs	r3, #4
 80091a2:	77fb      	strb	r3, [r7, #31]
 80091a4:	e0ec      	b.n	8009380 <UART_SetConfig+0x348>
 80091a6:	2308      	movs	r3, #8
 80091a8:	77fb      	strb	r3, [r7, #31]
 80091aa:	e0e9      	b.n	8009380 <UART_SetConfig+0x348>
 80091ac:	2310      	movs	r3, #16
 80091ae:	77fb      	strb	r3, [r7, #31]
 80091b0:	e0e6      	b.n	8009380 <UART_SetConfig+0x348>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a56      	ldr	r2, [pc, #344]	@ (8009310 <UART_SetConfig+0x2d8>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d120      	bne.n	80091fe <UART_SetConfig+0x1c6>
 80091bc:	4b51      	ldr	r3, [pc, #324]	@ (8009304 <UART_SetConfig+0x2cc>)
 80091be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80091c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80091c8:	d013      	beq.n	80091f2 <UART_SetConfig+0x1ba>
 80091ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80091cc:	d814      	bhi.n	80091f8 <UART_SetConfig+0x1c0>
 80091ce:	2b80      	cmp	r3, #128	@ 0x80
 80091d0:	d009      	beq.n	80091e6 <UART_SetConfig+0x1ae>
 80091d2:	2b80      	cmp	r3, #128	@ 0x80
 80091d4:	d810      	bhi.n	80091f8 <UART_SetConfig+0x1c0>
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d002      	beq.n	80091e0 <UART_SetConfig+0x1a8>
 80091da:	2b40      	cmp	r3, #64	@ 0x40
 80091dc:	d006      	beq.n	80091ec <UART_SetConfig+0x1b4>
 80091de:	e00b      	b.n	80091f8 <UART_SetConfig+0x1c0>
 80091e0:	2300      	movs	r3, #0
 80091e2:	77fb      	strb	r3, [r7, #31]
 80091e4:	e0cc      	b.n	8009380 <UART_SetConfig+0x348>
 80091e6:	2302      	movs	r3, #2
 80091e8:	77fb      	strb	r3, [r7, #31]
 80091ea:	e0c9      	b.n	8009380 <UART_SetConfig+0x348>
 80091ec:	2304      	movs	r3, #4
 80091ee:	77fb      	strb	r3, [r7, #31]
 80091f0:	e0c6      	b.n	8009380 <UART_SetConfig+0x348>
 80091f2:	2308      	movs	r3, #8
 80091f4:	77fb      	strb	r3, [r7, #31]
 80091f6:	e0c3      	b.n	8009380 <UART_SetConfig+0x348>
 80091f8:	2310      	movs	r3, #16
 80091fa:	77fb      	strb	r3, [r7, #31]
 80091fc:	e0c0      	b.n	8009380 <UART_SetConfig+0x348>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a44      	ldr	r2, [pc, #272]	@ (8009314 <UART_SetConfig+0x2dc>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d125      	bne.n	8009254 <UART_SetConfig+0x21c>
 8009208:	4b3e      	ldr	r3, [pc, #248]	@ (8009304 <UART_SetConfig+0x2cc>)
 800920a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800920e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009212:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009216:	d017      	beq.n	8009248 <UART_SetConfig+0x210>
 8009218:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800921c:	d817      	bhi.n	800924e <UART_SetConfig+0x216>
 800921e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009222:	d00b      	beq.n	800923c <UART_SetConfig+0x204>
 8009224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009228:	d811      	bhi.n	800924e <UART_SetConfig+0x216>
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <UART_SetConfig+0x1fe>
 800922e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009232:	d006      	beq.n	8009242 <UART_SetConfig+0x20a>
 8009234:	e00b      	b.n	800924e <UART_SetConfig+0x216>
 8009236:	2300      	movs	r3, #0
 8009238:	77fb      	strb	r3, [r7, #31]
 800923a:	e0a1      	b.n	8009380 <UART_SetConfig+0x348>
 800923c:	2302      	movs	r3, #2
 800923e:	77fb      	strb	r3, [r7, #31]
 8009240:	e09e      	b.n	8009380 <UART_SetConfig+0x348>
 8009242:	2304      	movs	r3, #4
 8009244:	77fb      	strb	r3, [r7, #31]
 8009246:	e09b      	b.n	8009380 <UART_SetConfig+0x348>
 8009248:	2308      	movs	r3, #8
 800924a:	77fb      	strb	r3, [r7, #31]
 800924c:	e098      	b.n	8009380 <UART_SetConfig+0x348>
 800924e:	2310      	movs	r3, #16
 8009250:	77fb      	strb	r3, [r7, #31]
 8009252:	e095      	b.n	8009380 <UART_SetConfig+0x348>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a2f      	ldr	r2, [pc, #188]	@ (8009318 <UART_SetConfig+0x2e0>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d125      	bne.n	80092aa <UART_SetConfig+0x272>
 800925e:	4b29      	ldr	r3, [pc, #164]	@ (8009304 <UART_SetConfig+0x2cc>)
 8009260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009264:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009268:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800926c:	d017      	beq.n	800929e <UART_SetConfig+0x266>
 800926e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009272:	d817      	bhi.n	80092a4 <UART_SetConfig+0x26c>
 8009274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009278:	d00b      	beq.n	8009292 <UART_SetConfig+0x25a>
 800927a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800927e:	d811      	bhi.n	80092a4 <UART_SetConfig+0x26c>
 8009280:	2b00      	cmp	r3, #0
 8009282:	d003      	beq.n	800928c <UART_SetConfig+0x254>
 8009284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009288:	d006      	beq.n	8009298 <UART_SetConfig+0x260>
 800928a:	e00b      	b.n	80092a4 <UART_SetConfig+0x26c>
 800928c:	2301      	movs	r3, #1
 800928e:	77fb      	strb	r3, [r7, #31]
 8009290:	e076      	b.n	8009380 <UART_SetConfig+0x348>
 8009292:	2302      	movs	r3, #2
 8009294:	77fb      	strb	r3, [r7, #31]
 8009296:	e073      	b.n	8009380 <UART_SetConfig+0x348>
 8009298:	2304      	movs	r3, #4
 800929a:	77fb      	strb	r3, [r7, #31]
 800929c:	e070      	b.n	8009380 <UART_SetConfig+0x348>
 800929e:	2308      	movs	r3, #8
 80092a0:	77fb      	strb	r3, [r7, #31]
 80092a2:	e06d      	b.n	8009380 <UART_SetConfig+0x348>
 80092a4:	2310      	movs	r3, #16
 80092a6:	77fb      	strb	r3, [r7, #31]
 80092a8:	e06a      	b.n	8009380 <UART_SetConfig+0x348>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a1b      	ldr	r2, [pc, #108]	@ (800931c <UART_SetConfig+0x2e4>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d138      	bne.n	8009326 <UART_SetConfig+0x2ee>
 80092b4:	4b13      	ldr	r3, [pc, #76]	@ (8009304 <UART_SetConfig+0x2cc>)
 80092b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80092be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092c2:	d017      	beq.n	80092f4 <UART_SetConfig+0x2bc>
 80092c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092c8:	d82a      	bhi.n	8009320 <UART_SetConfig+0x2e8>
 80092ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ce:	d00b      	beq.n	80092e8 <UART_SetConfig+0x2b0>
 80092d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092d4:	d824      	bhi.n	8009320 <UART_SetConfig+0x2e8>
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <UART_SetConfig+0x2aa>
 80092da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092de:	d006      	beq.n	80092ee <UART_SetConfig+0x2b6>
 80092e0:	e01e      	b.n	8009320 <UART_SetConfig+0x2e8>
 80092e2:	2300      	movs	r3, #0
 80092e4:	77fb      	strb	r3, [r7, #31]
 80092e6:	e04b      	b.n	8009380 <UART_SetConfig+0x348>
 80092e8:	2302      	movs	r3, #2
 80092ea:	77fb      	strb	r3, [r7, #31]
 80092ec:	e048      	b.n	8009380 <UART_SetConfig+0x348>
 80092ee:	2304      	movs	r3, #4
 80092f0:	77fb      	strb	r3, [r7, #31]
 80092f2:	e045      	b.n	8009380 <UART_SetConfig+0x348>
 80092f4:	2308      	movs	r3, #8
 80092f6:	77fb      	strb	r3, [r7, #31]
 80092f8:	e042      	b.n	8009380 <UART_SetConfig+0x348>
 80092fa:	bf00      	nop
 80092fc:	efff69f3 	.word	0xefff69f3
 8009300:	40011000 	.word	0x40011000
 8009304:	40023800 	.word	0x40023800
 8009308:	40004400 	.word	0x40004400
 800930c:	40004800 	.word	0x40004800
 8009310:	40004c00 	.word	0x40004c00
 8009314:	40005000 	.word	0x40005000
 8009318:	40011400 	.word	0x40011400
 800931c:	40007800 	.word	0x40007800
 8009320:	2310      	movs	r3, #16
 8009322:	77fb      	strb	r3, [r7, #31]
 8009324:	e02c      	b.n	8009380 <UART_SetConfig+0x348>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a72      	ldr	r2, [pc, #456]	@ (80094f4 <UART_SetConfig+0x4bc>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d125      	bne.n	800937c <UART_SetConfig+0x344>
 8009330:	4b71      	ldr	r3, [pc, #452]	@ (80094f8 <UART_SetConfig+0x4c0>)
 8009332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009336:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800933a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800933e:	d017      	beq.n	8009370 <UART_SetConfig+0x338>
 8009340:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009344:	d817      	bhi.n	8009376 <UART_SetConfig+0x33e>
 8009346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800934a:	d00b      	beq.n	8009364 <UART_SetConfig+0x32c>
 800934c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009350:	d811      	bhi.n	8009376 <UART_SetConfig+0x33e>
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <UART_SetConfig+0x326>
 8009356:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800935a:	d006      	beq.n	800936a <UART_SetConfig+0x332>
 800935c:	e00b      	b.n	8009376 <UART_SetConfig+0x33e>
 800935e:	2300      	movs	r3, #0
 8009360:	77fb      	strb	r3, [r7, #31]
 8009362:	e00d      	b.n	8009380 <UART_SetConfig+0x348>
 8009364:	2302      	movs	r3, #2
 8009366:	77fb      	strb	r3, [r7, #31]
 8009368:	e00a      	b.n	8009380 <UART_SetConfig+0x348>
 800936a:	2304      	movs	r3, #4
 800936c:	77fb      	strb	r3, [r7, #31]
 800936e:	e007      	b.n	8009380 <UART_SetConfig+0x348>
 8009370:	2308      	movs	r3, #8
 8009372:	77fb      	strb	r3, [r7, #31]
 8009374:	e004      	b.n	8009380 <UART_SetConfig+0x348>
 8009376:	2310      	movs	r3, #16
 8009378:	77fb      	strb	r3, [r7, #31]
 800937a:	e001      	b.n	8009380 <UART_SetConfig+0x348>
 800937c:	2310      	movs	r3, #16
 800937e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	69db      	ldr	r3, [r3, #28]
 8009384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009388:	d15b      	bne.n	8009442 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800938a:	7ffb      	ldrb	r3, [r7, #31]
 800938c:	2b08      	cmp	r3, #8
 800938e:	d828      	bhi.n	80093e2 <UART_SetConfig+0x3aa>
 8009390:	a201      	add	r2, pc, #4	@ (adr r2, 8009398 <UART_SetConfig+0x360>)
 8009392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009396:	bf00      	nop
 8009398:	080093bd 	.word	0x080093bd
 800939c:	080093c5 	.word	0x080093c5
 80093a0:	080093cd 	.word	0x080093cd
 80093a4:	080093e3 	.word	0x080093e3
 80093a8:	080093d3 	.word	0x080093d3
 80093ac:	080093e3 	.word	0x080093e3
 80093b0:	080093e3 	.word	0x080093e3
 80093b4:	080093e3 	.word	0x080093e3
 80093b8:	080093db 	.word	0x080093db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093bc:	f7fd fa36 	bl	800682c <HAL_RCC_GetPCLK1Freq>
 80093c0:	61b8      	str	r0, [r7, #24]
        break;
 80093c2:	e013      	b.n	80093ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093c4:	f7fd fa46 	bl	8006854 <HAL_RCC_GetPCLK2Freq>
 80093c8:	61b8      	str	r0, [r7, #24]
        break;
 80093ca:	e00f      	b.n	80093ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093cc:	4b4b      	ldr	r3, [pc, #300]	@ (80094fc <UART_SetConfig+0x4c4>)
 80093ce:	61bb      	str	r3, [r7, #24]
        break;
 80093d0:	e00c      	b.n	80093ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093d2:	f7fd f959 	bl	8006688 <HAL_RCC_GetSysClockFreq>
 80093d6:	61b8      	str	r0, [r7, #24]
        break;
 80093d8:	e008      	b.n	80093ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093de:	61bb      	str	r3, [r7, #24]
        break;
 80093e0:	e004      	b.n	80093ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80093e2:	2300      	movs	r3, #0
 80093e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	77bb      	strb	r3, [r7, #30]
        break;
 80093ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d074      	beq.n	80094dc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	005a      	lsls	r2, r3, #1
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	085b      	lsrs	r3, r3, #1
 80093fc:	441a      	add	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	fbb2 f3f3 	udiv	r3, r2, r3
 8009406:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	2b0f      	cmp	r3, #15
 800940c:	d916      	bls.n	800943c <UART_SetConfig+0x404>
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009414:	d212      	bcs.n	800943c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	b29b      	uxth	r3, r3
 800941a:	f023 030f 	bic.w	r3, r3, #15
 800941e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	085b      	lsrs	r3, r3, #1
 8009424:	b29b      	uxth	r3, r3
 8009426:	f003 0307 	and.w	r3, r3, #7
 800942a:	b29a      	uxth	r2, r3
 800942c:	89fb      	ldrh	r3, [r7, #14]
 800942e:	4313      	orrs	r3, r2
 8009430:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	89fa      	ldrh	r2, [r7, #14]
 8009438:	60da      	str	r2, [r3, #12]
 800943a:	e04f      	b.n	80094dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	77bb      	strb	r3, [r7, #30]
 8009440:	e04c      	b.n	80094dc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009442:	7ffb      	ldrb	r3, [r7, #31]
 8009444:	2b08      	cmp	r3, #8
 8009446:	d828      	bhi.n	800949a <UART_SetConfig+0x462>
 8009448:	a201      	add	r2, pc, #4	@ (adr r2, 8009450 <UART_SetConfig+0x418>)
 800944a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944e:	bf00      	nop
 8009450:	08009475 	.word	0x08009475
 8009454:	0800947d 	.word	0x0800947d
 8009458:	08009485 	.word	0x08009485
 800945c:	0800949b 	.word	0x0800949b
 8009460:	0800948b 	.word	0x0800948b
 8009464:	0800949b 	.word	0x0800949b
 8009468:	0800949b 	.word	0x0800949b
 800946c:	0800949b 	.word	0x0800949b
 8009470:	08009493 	.word	0x08009493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009474:	f7fd f9da 	bl	800682c <HAL_RCC_GetPCLK1Freq>
 8009478:	61b8      	str	r0, [r7, #24]
        break;
 800947a:	e013      	b.n	80094a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800947c:	f7fd f9ea 	bl	8006854 <HAL_RCC_GetPCLK2Freq>
 8009480:	61b8      	str	r0, [r7, #24]
        break;
 8009482:	e00f      	b.n	80094a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009484:	4b1d      	ldr	r3, [pc, #116]	@ (80094fc <UART_SetConfig+0x4c4>)
 8009486:	61bb      	str	r3, [r7, #24]
        break;
 8009488:	e00c      	b.n	80094a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800948a:	f7fd f8fd 	bl	8006688 <HAL_RCC_GetSysClockFreq>
 800948e:	61b8      	str	r0, [r7, #24]
        break;
 8009490:	e008      	b.n	80094a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009496:	61bb      	str	r3, [r7, #24]
        break;
 8009498:	e004      	b.n	80094a4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800949a:	2300      	movs	r3, #0
 800949c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	77bb      	strb	r3, [r7, #30]
        break;
 80094a2:	bf00      	nop
    }

    if (pclk != 0U)
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d018      	beq.n	80094dc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	085a      	lsrs	r2, r3, #1
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	441a      	add	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	2b0f      	cmp	r3, #15
 80094c2:	d909      	bls.n	80094d8 <UART_SetConfig+0x4a0>
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094ca:	d205      	bcs.n	80094d8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	60da      	str	r2, [r3, #12]
 80094d6:	e001      	b.n	80094dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80094e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3720      	adds	r7, #32
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	40007c00 	.word	0x40007c00
 80094f8:	40023800 	.word	0x40023800
 80094fc:	00f42400 	.word	0x00f42400

08009500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800950c:	f003 0308 	and.w	r3, r3, #8
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00a      	beq.n	800952a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	430a      	orrs	r2, r1
 8009528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00a      	beq.n	800954c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	430a      	orrs	r2, r1
 800954a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00a      	beq.n	800956e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009572:	f003 0304 	and.w	r3, r3, #4
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00a      	beq.n	8009590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	430a      	orrs	r2, r1
 800958e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009594:	f003 0310 	and.w	r3, r3, #16
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00a      	beq.n	80095b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	430a      	orrs	r2, r1
 80095b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b6:	f003 0320 	and.w	r3, r3, #32
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00a      	beq.n	80095d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	430a      	orrs	r2, r1
 80095d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d01a      	beq.n	8009616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	430a      	orrs	r2, r1
 80095f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095fe:	d10a      	bne.n	8009616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	430a      	orrs	r2, r1
 8009614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800961a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00a      	beq.n	8009638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	430a      	orrs	r2, r1
 8009636:	605a      	str	r2, [r3, #4]
  }
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b08c      	sub	sp, #48	@ 0x30
 8009648:	af02      	add	r7, sp, #8
 800964a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009654:	f7fa fd88 	bl	8004168 <HAL_GetTick>
 8009658:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0308 	and.w	r3, r3, #8
 8009664:	2b08      	cmp	r3, #8
 8009666:	d12e      	bne.n	80096c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009668:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009670:	2200      	movs	r2, #0
 8009672:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f83b 	bl	80096f2 <UART_WaitOnFlagUntilTimeout>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d021      	beq.n	80096c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	e853 3f00 	ldrex	r3, [r3]
 800968e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009696:	623b      	str	r3, [r7, #32]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	461a      	mov	r2, r3
 800969e:	6a3b      	ldr	r3, [r7, #32]
 80096a0:	61fb      	str	r3, [r7, #28]
 80096a2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a4:	69b9      	ldr	r1, [r7, #24]
 80096a6:	69fa      	ldr	r2, [r7, #28]
 80096a8:	e841 2300 	strex	r3, r2, [r1]
 80096ac:	617b      	str	r3, [r7, #20]
   return(result);
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e6      	bne.n	8009682 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2220      	movs	r2, #32
 80096b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e011      	b.n	80096ea <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2220      	movs	r2, #32
 80096ca:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2220      	movs	r2, #32
 80096d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3728      	adds	r7, #40	@ 0x28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	60b9      	str	r1, [r7, #8]
 80096fc:	603b      	str	r3, [r7, #0]
 80096fe:	4613      	mov	r3, r2
 8009700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009702:	e04f      	b.n	80097a4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970a:	d04b      	beq.n	80097a4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800970c:	f7fa fd2c 	bl	8004168 <HAL_GetTick>
 8009710:	4602      	mov	r2, r0
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	69ba      	ldr	r2, [r7, #24]
 8009718:	429a      	cmp	r2, r3
 800971a:	d302      	bcc.n	8009722 <UART_WaitOnFlagUntilTimeout+0x30>
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e04e      	b.n	80097c4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d037      	beq.n	80097a4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	2b80      	cmp	r3, #128	@ 0x80
 8009738:	d034      	beq.n	80097a4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2b40      	cmp	r3, #64	@ 0x40
 800973e:	d031      	beq.n	80097a4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	69db      	ldr	r3, [r3, #28]
 8009746:	f003 0308 	and.w	r3, r3, #8
 800974a:	2b08      	cmp	r3, #8
 800974c:	d110      	bne.n	8009770 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2208      	movs	r2, #8
 8009754:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f000 f838 	bl	80097cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2208      	movs	r2, #8
 8009760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e029      	b.n	80097c4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800977a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800977e:	d111      	bne.n	80097a4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009788:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f000 f81e 	bl	80097cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2220      	movs	r2, #32
 8009794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80097a0:	2303      	movs	r3, #3
 80097a2:	e00f      	b.n	80097c4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	69da      	ldr	r2, [r3, #28]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	4013      	ands	r3, r2
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	bf0c      	ite	eq
 80097b4:	2301      	moveq	r3, #1
 80097b6:	2300      	movne	r3, #0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	461a      	mov	r2, r3
 80097bc:	79fb      	ldrb	r3, [r7, #7]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d0a0      	beq.n	8009704 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b095      	sub	sp, #84	@ 0x54
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097dc:	e853 3f00 	ldrex	r3, [r3]
 80097e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	461a      	mov	r2, r3
 80097f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80097f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097fa:	e841 2300 	strex	r3, r2, [r1]
 80097fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1e6      	bne.n	80097d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3308      	adds	r3, #8
 800980c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980e:	6a3b      	ldr	r3, [r7, #32]
 8009810:	e853 3f00 	ldrex	r3, [r3]
 8009814:	61fb      	str	r3, [r7, #28]
   return(result);
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	f023 0301 	bic.w	r3, r3, #1
 800981c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	3308      	adds	r3, #8
 8009824:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009826:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009828:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800982c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800982e:	e841 2300 	strex	r3, r2, [r1]
 8009832:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1e5      	bne.n	8009806 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800983e:	2b01      	cmp	r3, #1
 8009840:	d118      	bne.n	8009874 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	e853 3f00 	ldrex	r3, [r3]
 800984e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	f023 0310 	bic.w	r3, r3, #16
 8009856:	647b      	str	r3, [r7, #68]	@ 0x44
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	461a      	mov	r2, r3
 800985e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009860:	61bb      	str	r3, [r7, #24]
 8009862:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009864:	6979      	ldr	r1, [r7, #20]
 8009866:	69ba      	ldr	r2, [r7, #24]
 8009868:	e841 2300 	strex	r3, r2, [r1]
 800986c:	613b      	str	r3, [r7, #16]
   return(result);
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1e6      	bne.n	8009842 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009888:	bf00      	nop
 800988a:	3754      	adds	r7, #84	@ 0x54
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009894:	b084      	sub	sp, #16
 8009896:	b480      	push	{r7}
 8009898:	b085      	sub	sp, #20
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	f107 001c 	add.w	r0, r7, #28
 80098a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80098aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80098ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80098ae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80098b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80098b2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80098b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80098b6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80098b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80098ba:	431a      	orrs	r2, r3
             Init.ClockDiv
 80098bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80098be:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	4b07      	ldr	r3, [pc, #28]	@ (80098e8 <SDMMC_Init+0x54>)
 80098cc:	4013      	ands	r3, r2
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	431a      	orrs	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	b004      	add	sp, #16
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	ffff8100 	.word	0xffff8100

080098ec <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009906:	b480      	push	{r7}
 8009908:	b083      	sub	sp, #12
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2203      	movs	r2, #3
 8009934:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 0303 	and.w	r3, r3, #3
}
 8009954:	4618      	mov	r0, r3
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800997e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009984:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800998a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	4313      	orrs	r3, r2
 8009990:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	68da      	ldr	r2, [r3, #12]
 8009996:	4b06      	ldr	r3, [pc, #24]	@ (80099b0 <SDMMC_SendCommand+0x50>)
 8009998:	4013      	ands	r3, r2
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	431a      	orrs	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3714      	adds	r7, #20
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	fffff000 	.word	0xfffff000

080099b4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	b2db      	uxtb	r3, r3
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	370c      	adds	r7, #12
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b085      	sub	sp, #20
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	3314      	adds	r3, #20
 80099dc:	461a      	mov	r2, r3
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	4413      	add	r3, r2
 80099e2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
}  
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a1a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009a20:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009a26:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a32:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	431a      	orrs	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0

}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009a5a:	2310      	movs	r3, #16
 8009a5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a5e:	2340      	movs	r3, #64	@ 0x40
 8009a60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a62:	2300      	movs	r3, #0
 8009a64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a6c:	f107 0308 	add.w	r3, r7, #8
 8009a70:	4619      	mov	r1, r3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7ff ff74 	bl	8009960 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a7c:	2110      	movs	r1, #16
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f9d6 	bl	8009e30 <SDMMC_GetCmdResp1>
 8009a84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a86:	69fb      	ldr	r3, [r7, #28]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3720      	adds	r7, #32
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b088      	sub	sp, #32
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009a9e:	2311      	movs	r3, #17
 8009aa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009aa2:	2340      	movs	r3, #64	@ 0x40
 8009aa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009aae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ab0:	f107 0308 	add.w	r3, r7, #8
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7ff ff52 	bl	8009960 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ac0:	2111      	movs	r1, #17
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f9b4 	bl	8009e30 <SDMMC_GetCmdResp1>
 8009ac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aca:	69fb      	ldr	r3, [r7, #28]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3720      	adds	r7, #32
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009ae2:	2312      	movs	r3, #18
 8009ae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ae6:	2340      	movs	r3, #64	@ 0x40
 8009ae8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aea:	2300      	movs	r3, #0
 8009aec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009af2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009af4:	f107 0308 	add.w	r3, r7, #8
 8009af8:	4619      	mov	r1, r3
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7ff ff30 	bl	8009960 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b04:	2112      	movs	r1, #18
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f992 	bl	8009e30 <SDMMC_GetCmdResp1>
 8009b0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b0e:	69fb      	ldr	r3, [r7, #28]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3720      	adds	r7, #32
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b088      	sub	sp, #32
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009b26:	2318      	movs	r3, #24
 8009b28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b2a:	2340      	movs	r3, #64	@ 0x40
 8009b2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b38:	f107 0308 	add.w	r3, r7, #8
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7ff ff0e 	bl	8009960 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b48:	2118      	movs	r1, #24
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f970 	bl	8009e30 <SDMMC_GetCmdResp1>
 8009b50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b52:	69fb      	ldr	r3, [r7, #28]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3720      	adds	r7, #32
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009b6a:	2319      	movs	r3, #25
 8009b6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b6e:	2340      	movs	r3, #64	@ 0x40
 8009b70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b72:	2300      	movs	r3, #0
 8009b74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b7c:	f107 0308 	add.w	r3, r7, #8
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff feec 	bl	8009960 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b8c:	2119      	movs	r1, #25
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f94e 	bl	8009e30 <SDMMC_GetCmdResp1>
 8009b94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b96:	69fb      	ldr	r3, [r7, #28]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3720      	adds	r7, #32
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b088      	sub	sp, #32
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009bac:	230c      	movs	r3, #12
 8009bae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bb0:	2340      	movs	r3, #64	@ 0x40
 8009bb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bbe:	f107 0308 	add.w	r3, r7, #8
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7ff fecb 	bl	8009960 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009bca:	4a05      	ldr	r2, [pc, #20]	@ (8009be0 <SDMMC_CmdStopTransfer+0x40>)
 8009bcc:	210c      	movs	r1, #12
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f92e 	bl	8009e30 <SDMMC_GetCmdResp1>
 8009bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3720      	adds	r7, #32
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	05f5e100 	.word	0x05f5e100

08009be4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b08a      	sub	sp, #40	@ 0x28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009bf4:	2307      	movs	r3, #7
 8009bf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bf8:	2340      	movs	r3, #64	@ 0x40
 8009bfa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c04:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c06:	f107 0310 	add.w	r3, r7, #16
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f7ff fea7 	bl	8009960 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c16:	2107      	movs	r1, #7
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f000 f909 	bl	8009e30 <SDMMC_GetCmdResp1>
 8009c1e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3728      	adds	r7, #40	@ 0x28
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b088      	sub	sp, #32
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009c32:	2300      	movs	r3, #0
 8009c34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009c36:	2300      	movs	r3, #0
 8009c38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c48:	f107 0308 	add.w	r3, r7, #8
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff fe86 	bl	8009960 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fb23 	bl	800a2a0 <SDMMC_GetCmdError>
 8009c5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c5c:	69fb      	ldr	r3, [r7, #28]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3720      	adds	r7, #32
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b088      	sub	sp, #32
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009c6e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009c72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009c74:	2308      	movs	r3, #8
 8009c76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c78:	2340      	movs	r3, #64	@ 0x40
 8009c7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c86:	f107 0308 	add.w	r3, r7, #8
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7ff fe67 	bl	8009960 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fab6 	bl	800a204 <SDMMC_GetCmdResp7>
 8009c98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c9a:	69fb      	ldr	r3, [r7, #28]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3720      	adds	r7, #32
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b088      	sub	sp, #32
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009cb2:	2337      	movs	r3, #55	@ 0x37
 8009cb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cb6:	2340      	movs	r3, #64	@ 0x40
 8009cb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cc4:	f107 0308 	add.w	r3, r7, #8
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7ff fe48 	bl	8009960 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cd4:	2137      	movs	r1, #55	@ 0x37
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f8aa 	bl	8009e30 <SDMMC_GetCmdResp1>
 8009cdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cde:	69fb      	ldr	r3, [r7, #28]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3720      	adds	r7, #32
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8009d2c <SDMMC_CmdAppOperCommand+0x44>)
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009cfa:	2329      	movs	r3, #41	@ 0x29
 8009cfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cfe:	2340      	movs	r3, #64	@ 0x40
 8009d00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d02:	2300      	movs	r3, #0
 8009d04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d0c:	f107 0308 	add.w	r3, r7, #8
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7ff fe24 	bl	8009960 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f9bf 	bl	800a09c <SDMMC_GetCmdResp3>
 8009d1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d20:	69fb      	ldr	r3, [r7, #28]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3720      	adds	r7, #32
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	80100000 	.word	0x80100000

08009d30 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b088      	sub	sp, #32
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009d40:	23c0      	movs	r3, #192	@ 0xc0
 8009d42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d44:	2300      	movs	r3, #0
 8009d46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d4e:	f107 0308 	add.w	r3, r7, #8
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7ff fe03 	bl	8009960 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f956 	bl	800a00c <SDMMC_GetCmdResp2>
 8009d60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d62:	69fb      	ldr	r3, [r7, #28]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3720      	adds	r7, #32
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b088      	sub	sp, #32
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009d7a:	2309      	movs	r3, #9
 8009d7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009d7e:	23c0      	movs	r3, #192	@ 0xc0
 8009d80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d82:	2300      	movs	r3, #0
 8009d84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d8c:	f107 0308 	add.w	r3, r7, #8
 8009d90:	4619      	mov	r1, r3
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f7ff fde4 	bl	8009960 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f937 	bl	800a00c <SDMMC_GetCmdResp2>
 8009d9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009da0:	69fb      	ldr	r3, [r7, #28]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3720      	adds	r7, #32
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b088      	sub	sp, #32
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
 8009db2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009db8:	2303      	movs	r3, #3
 8009dba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dbc:	2340      	movs	r3, #64	@ 0x40
 8009dbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dca:	f107 0308 	add.w	r3, r7, #8
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff fdc5 	bl	8009960 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	2103      	movs	r1, #3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f99c 	bl	800a118 <SDMMC_GetCmdResp6>
 8009de0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009de2:	69fb      	ldr	r3, [r7, #28]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3720      	adds	r7, #32
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b088      	sub	sp, #32
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009dfa:	230d      	movs	r3, #13
 8009dfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dfe:	2340      	movs	r3, #64	@ 0x40
 8009e00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e02:	2300      	movs	r3, #0
 8009e04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e0c:	f107 0308 	add.w	r3, r7, #8
 8009e10:	4619      	mov	r1, r3
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7ff fda4 	bl	8009960 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e1c:	210d      	movs	r1, #13
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f806 	bl	8009e30 <SDMMC_GetCmdResp1>
 8009e24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e26:	69fb      	ldr	r3, [r7, #28]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3720      	adds	r7, #32
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b088      	sub	sp, #32
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	607a      	str	r2, [r7, #4]
 8009e3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009e3e:	4b70      	ldr	r3, [pc, #448]	@ (800a000 <SDMMC_GetCmdResp1+0x1d0>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a70      	ldr	r2, [pc, #448]	@ (800a004 <SDMMC_GetCmdResp1+0x1d4>)
 8009e44:	fba2 2303 	umull	r2, r3, r2, r3
 8009e48:	0a5a      	lsrs	r2, r3, #9
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	fb02 f303 	mul.w	r3, r2, r3
 8009e50:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	1e5a      	subs	r2, r3, #1
 8009e56:	61fa      	str	r2, [r7, #28]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d102      	bne.n	8009e62 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009e60:	e0c9      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e66:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d0ef      	beq.n	8009e52 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1ea      	bne.n	8009e52 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e80:	f003 0304 	and.w	r3, r3, #4
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d004      	beq.n	8009e92 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2204      	movs	r2, #4
 8009e8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e8e:	2304      	movs	r3, #4
 8009e90:	e0b1      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e96:	f003 0301 	and.w	r3, r3, #1
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d004      	beq.n	8009ea8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e0a6      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	22c5      	movs	r2, #197	@ 0xc5
 8009eac:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f7ff fd80 	bl	80099b4 <SDMMC_GetCommandResponse>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	7afb      	ldrb	r3, [r7, #11]
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d001      	beq.n	8009ec2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e099      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f7ff fd82 	bl	80099ce <SDMMC_GetResponse>
 8009eca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	4b4e      	ldr	r3, [pc, #312]	@ (800a008 <SDMMC_GetCmdResp1+0x1d8>)
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d101      	bne.n	8009eda <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	e08d      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	da02      	bge.n	8009ee6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009ee0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009ee4:	e087      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d001      	beq.n	8009ef4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009ef0:	2340      	movs	r3, #64	@ 0x40
 8009ef2:	e080      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009efe:	2380      	movs	r3, #128	@ 0x80
 8009f00:	e079      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009f0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f10:	e071      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009f1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f20:	e069      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009f2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f30:	e061      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009f3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f40:	e059      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009f4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f50:	e051      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009f5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009f60:	e049      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009f6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009f70:	e041      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009f7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f80:	e039      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009f8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009f90:	e031      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d002      	beq.n	8009fa2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009f9c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009fa0:	e029      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009fac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009fb0:	e021      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009fbc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009fc0:	e019      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009fcc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009fd0:	e011      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009fdc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009fe0:	e009      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f003 0308 	and.w	r3, r3, #8
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009fec:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009ff0:	e001      	b.n	8009ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ff2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3720      	adds	r7, #32
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	20000000 	.word	0x20000000
 800a004:	10624dd3 	.word	0x10624dd3
 800a008:	fdffe008 	.word	0xfdffe008

0800a00c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a014:	4b1f      	ldr	r3, [pc, #124]	@ (800a094 <SDMMC_GetCmdResp2+0x88>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a1f      	ldr	r2, [pc, #124]	@ (800a098 <SDMMC_GetCmdResp2+0x8c>)
 800a01a:	fba2 2303 	umull	r2, r3, r2, r3
 800a01e:	0a5b      	lsrs	r3, r3, #9
 800a020:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a024:	fb02 f303 	mul.w	r3, r2, r3
 800a028:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	1e5a      	subs	r2, r3, #1
 800a02e:	60fa      	str	r2, [r7, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d102      	bne.n	800a03a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a034:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a038:	e026      	b.n	800a088 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a03e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a046:	2b00      	cmp	r3, #0
 800a048:	d0ef      	beq.n	800a02a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1ea      	bne.n	800a02a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a058:	f003 0304 	and.w	r3, r3, #4
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d004      	beq.n	800a06a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2204      	movs	r2, #4
 800a064:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a066:	2304      	movs	r3, #4
 800a068:	e00e      	b.n	800a088 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b00      	cmp	r3, #0
 800a074:	d004      	beq.n	800a080 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2201      	movs	r2, #1
 800a07a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e003      	b.n	800a088 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	22c5      	movs	r2, #197	@ 0xc5
 800a084:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3714      	adds	r7, #20
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr
 800a094:	20000000 	.word	0x20000000
 800a098:	10624dd3 	.word	0x10624dd3

0800a09c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a0a4:	4b1a      	ldr	r3, [pc, #104]	@ (800a110 <SDMMC_GetCmdResp3+0x74>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a1a      	ldr	r2, [pc, #104]	@ (800a114 <SDMMC_GetCmdResp3+0x78>)
 800a0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ae:	0a5b      	lsrs	r3, r3, #9
 800a0b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0b4:	fb02 f303 	mul.w	r3, r2, r3
 800a0b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	1e5a      	subs	r2, r3, #1
 800a0be:	60fa      	str	r2, [r7, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d102      	bne.n	800a0ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a0c8:	e01b      	b.n	800a102 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d0ef      	beq.n	800a0ba <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1ea      	bne.n	800a0ba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0e8:	f003 0304 	and.w	r3, r3, #4
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d004      	beq.n	800a0fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2204      	movs	r2, #4
 800a0f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0f6:	2304      	movs	r3, #4
 800a0f8:	e003      	b.n	800a102 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	22c5      	movs	r2, #197	@ 0xc5
 800a0fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3714      	adds	r7, #20
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	20000000 	.word	0x20000000
 800a114:	10624dd3 	.word	0x10624dd3

0800a118 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b088      	sub	sp, #32
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	460b      	mov	r3, r1
 800a122:	607a      	str	r2, [r7, #4]
 800a124:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a126:	4b35      	ldr	r3, [pc, #212]	@ (800a1fc <SDMMC_GetCmdResp6+0xe4>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a35      	ldr	r2, [pc, #212]	@ (800a200 <SDMMC_GetCmdResp6+0xe8>)
 800a12c:	fba2 2303 	umull	r2, r3, r2, r3
 800a130:	0a5b      	lsrs	r3, r3, #9
 800a132:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a136:	fb02 f303 	mul.w	r3, r2, r3
 800a13a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	1e5a      	subs	r2, r3, #1
 800a140:	61fa      	str	r2, [r7, #28]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d102      	bne.n	800a14c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a146:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a14a:	e052      	b.n	800a1f2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a150:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d0ef      	beq.n	800a13c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1ea      	bne.n	800a13c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a16a:	f003 0304 	and.w	r3, r3, #4
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d004      	beq.n	800a17c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2204      	movs	r2, #4
 800a176:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a178:	2304      	movs	r3, #4
 800a17a:	e03a      	b.n	800a1f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	2b00      	cmp	r3, #0
 800a186:	d004      	beq.n	800a192 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2201      	movs	r2, #1
 800a18c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a18e:	2301      	movs	r3, #1
 800a190:	e02f      	b.n	800a1f2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f7ff fc0e 	bl	80099b4 <SDMMC_GetCommandResponse>
 800a198:	4603      	mov	r3, r0
 800a19a:	461a      	mov	r2, r3
 800a19c:	7afb      	ldrb	r3, [r7, #11]
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d001      	beq.n	800a1a6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e025      	b.n	800a1f2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	22c5      	movs	r2, #197	@ 0xc5
 800a1aa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f7ff fc0d 	bl	80099ce <SDMMC_GetResponse>
 800a1b4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d106      	bne.n	800a1ce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	0c1b      	lsrs	r3, r3, #16
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e011      	b.n	800a1f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a1d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a1dc:	e009      	b.n	800a1f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d002      	beq.n	800a1ee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a1e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a1ec:	e001      	b.n	800a1f2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a1ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3720      	adds	r7, #32
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000000 	.word	0x20000000
 800a200:	10624dd3 	.word	0x10624dd3

0800a204 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a20c:	4b22      	ldr	r3, [pc, #136]	@ (800a298 <SDMMC_GetCmdResp7+0x94>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a22      	ldr	r2, [pc, #136]	@ (800a29c <SDMMC_GetCmdResp7+0x98>)
 800a212:	fba2 2303 	umull	r2, r3, r2, r3
 800a216:	0a5b      	lsrs	r3, r3, #9
 800a218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a21c:	fb02 f303 	mul.w	r3, r2, r3
 800a220:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	1e5a      	subs	r2, r3, #1
 800a226:	60fa      	str	r2, [r7, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d102      	bne.n	800a232 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a22c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a230:	e02c      	b.n	800a28c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a236:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d0ef      	beq.n	800a222 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1ea      	bne.n	800a222 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a250:	f003 0304 	and.w	r3, r3, #4
 800a254:	2b00      	cmp	r3, #0
 800a256:	d004      	beq.n	800a262 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2204      	movs	r2, #4
 800a25c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a25e:	2304      	movs	r3, #4
 800a260:	e014      	b.n	800a28c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d004      	beq.n	800a278 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a274:	2301      	movs	r3, #1
 800a276:	e009      	b.n	800a28c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a27c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2240      	movs	r2, #64	@ 0x40
 800a288:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a28a:	2300      	movs	r3, #0
  
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr
 800a298:	20000000 	.word	0x20000000
 800a29c:	10624dd3 	.word	0x10624dd3

0800a2a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2a8:	4b11      	ldr	r3, [pc, #68]	@ (800a2f0 <SDMMC_GetCmdError+0x50>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a11      	ldr	r2, [pc, #68]	@ (800a2f4 <SDMMC_GetCmdError+0x54>)
 800a2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b2:	0a5b      	lsrs	r3, r3, #9
 800a2b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2b8:	fb02 f303 	mul.w	r3, r2, r3
 800a2bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	1e5a      	subs	r2, r3, #1
 800a2c2:	60fa      	str	r2, [r7, #12]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d102      	bne.n	800a2ce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a2cc:	e009      	b.n	800a2e2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d0f1      	beq.n	800a2be <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	22c5      	movs	r2, #197	@ 0xc5
 800a2de:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3714      	adds	r7, #20
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	20000000 	.word	0x20000000
 800a2f4:	10624dd3 	.word	0x10624dd3

0800a2f8 <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b090      	sub	sp, #64	@ 0x40
 800a2fc:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800a2fe:	2300      	movs	r3, #0
 800a300:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20];

  uwVolume = 100;
 800a302:	4b33      	ldr	r3, [pc, #204]	@ (800a3d0 <AUDIO_REC_Start+0xd8>)
 800a304:	2264      	movs	r2, #100	@ 0x64
 800a306:	601a      	str	r2, [r3, #0]

  /* Create a new file system */
  if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 800a308:	2200      	movs	r2, #0
 800a30a:	4932      	ldr	r1, [pc, #200]	@ (800a3d4 <AUDIO_REC_Start+0xdc>)
 800a30c:	4832      	ldr	r0, [pc, #200]	@ (800a3d8 <AUDIO_REC_Start+0xe0>)
 800a30e:	f002 faed 	bl	800c8ec <f_mount>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d002      	beq.n	800a31e <AUDIO_REC_Start+0x26>
    	Error_Handler(); /* FatFs Initialization Error */
 800a318:	f7f7 f9a2 	bl	8001660 <Error_Handler>
 800a31c:	e052      	b.n	800a3c4 <AUDIO_REC_Start+0xcc>
  } else {
	  printf("SD card mounted\r\n");
 800a31e:	482f      	ldr	r0, [pc, #188]	@ (800a3dc <AUDIO_REC_Start+0xe4>)
 800a320:	f004 fc52 	bl	800ebc8 <puts>
		  	  sizeof(workBuffer)) != FR_OK) {
		  Error_Handler(); / * FatFs Format Error */
//	  } else {
//	  */

	  printf("WAV file created\r\n");
 800a324:	482e      	ldr	r0, [pc, #184]	@ (800a3e0 <AUDIO_REC_Start+0xe8>)
 800a326:	f004 fc4f 	bl	800ebc8 <puts>
	  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800a32a:	220a      	movs	r2, #10
 800a32c:	492d      	ldr	r1, [pc, #180]	@ (800a3e4 <AUDIO_REC_Start+0xec>)
 800a32e:	482e      	ldr	r0, [pc, #184]	@ (800a3e8 <AUDIO_REC_Start+0xf0>)
 800a330:	f002 fb22 	bl	800c978 <f_open>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d144      	bne.n	800a3c4 <AUDIO_REC_Start+0xcc>
	  {
		/* Initialize header file */
		WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 800a33a:	492c      	ldr	r1, [pc, #176]	@ (800a3ec <AUDIO_REC_Start+0xf4>)
 800a33c:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800a340:	f000 f9c6 	bl	800a6d0 <WavProcess_EncInit>

		/* Write header file */
		if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 800a344:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a348:	222c      	movs	r2, #44	@ 0x2c
 800a34a:	4928      	ldr	r1, [pc, #160]	@ (800a3ec <AUDIO_REC_Start+0xf4>)
 800a34c:	4826      	ldr	r0, [pc, #152]	@ (800a3e8 <AUDIO_REC_Start+0xf0>)
 800a34e:	f002 fe0c 	bl	800cf6a <f_write>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d135      	bne.n	800a3c4 <AUDIO_REC_Start+0xcc>
		{
		  printf("State : ready to record\r\n");
 800a358:	4825      	ldr	r0, [pc, #148]	@ (800a3f0 <AUDIO_REC_Start+0xf8>)
 800a35a:	f004 fc35 	bl	800ebc8 <puts>
		  AudioState = AUDIO_STATE_RECORD;
 800a35e:	4b25      	ldr	r3, [pc, #148]	@ (800a3f4 <AUDIO_REC_Start+0xfc>)
 800a360:	2205      	movs	r2, #5
 800a362:	701a      	strb	r2, [r3, #0]

			if(byteswritten != 0)
 800a364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a366:	2b00      	cmp	r3, #0
 800a368:	d02c      	beq.n	800a3c4 <AUDIO_REC_Start+0xcc>
			{
			  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 800a36a:	2202      	movs	r2, #2
 800a36c:	2110      	movs	r1, #16
 800a36e:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800a372:	f7f9 fc55 	bl	8003c20 <BSP_AUDIO_IN_Init>
			  printf("Recording config initialized\r\n");
 800a376:	4820      	ldr	r0, [pc, #128]	@ (800a3f8 <AUDIO_REC_Start+0x100>)
 800a378:	f004 fc26 	bl	800ebc8 <puts>
			  BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
 800a37c:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 800a380:	481e      	ldr	r0, [pc, #120]	@ (800a3fc <AUDIO_REC_Start+0x104>)
 800a382:	f7f9 fccb 	bl	8003d1c <BSP_AUDIO_IN_Record>
			  printf("Recording started...\r\n");
 800a386:	481e      	ldr	r0, [pc, #120]	@ (800a400 <AUDIO_REC_Start+0x108>)
 800a388:	f004 fc1e 	bl	800ebc8 <puts>
			  BufferCtl.fptr = byteswritten;
 800a38c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a38e:	4a1b      	ldr	r2, [pc, #108]	@ (800a3fc <AUDIO_REC_Start+0x104>)
 800a390:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800a394:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
			  BufferCtl.pcm_ptr = 0;
 800a398:	4b18      	ldr	r3, [pc, #96]	@ (800a3fc <AUDIO_REC_Start+0x104>)
 800a39a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a39e:	461a      	mov	r2, r3
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
			  BufferCtl.offset = 0;
 800a3a6:	4b15      	ldr	r3, [pc, #84]	@ (800a3fc <AUDIO_REC_Start+0x104>)
 800a3a8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
			  BufferCtl.wr_state = BUFFER_EMPTY;
 800a3b4:	4b11      	ldr	r3, [pc, #68]	@ (800a3fc <AUDIO_REC_Start+0x104>)
 800a3b6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			  return AUDIO_ERROR_NONE;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	e000      	b.n	800a3c6 <AUDIO_REC_Start+0xce>
			}
		}
	  }
	  //}
  }
  return AUDIO_ERROR_IO;
 800a3c4:	2301      	movs	r3, #1
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3740      	adds	r7, #64	@ 0x40
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	20000040 	.word	0x20000040
 800a3d4:	200053b8 	.word	0x200053b8
 800a3d8:	200053bc 	.word	0x200053bc
 800a3dc:	08010d6c 	.word	0x08010d6c
 800a3e0:	08010d80 	.word	0x08010d80
 800a3e4:	08010d94 	.word	0x08010d94
 800a3e8:	20005184 	.word	0x20005184
 800a3ec:	2000091c 	.word	0x2000091c
 800a3f0:	08010da0 	.word	0x08010da0
 800a3f4:	20000230 	.word	0x20000230
 800a3f8:	08010dbc 	.word	0x08010dbc
 800a3fc:	20000948 	.word	0x20000948
 800a400:	08010ddc 	.word	0x08010ddc

0800a404 <AUDIO_REC_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_REC_Process(void)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b088      	sub	sp, #32
 800a408:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	617b      	str	r3, [r7, #20]
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 800a40e:	2300      	movs	r3, #0
 800a410:	77fb      	strb	r3, [r7, #31]
  uint32_t elapsed_time; 
  static uint32_t prev_elapsed_time = 0xFFFFFFFF;
  uint8_t str[16];
  //static TS_StateTypeDef  TS_State={0};
  //printf("PRE SWITCH\r\n");
  switch(AudioState)
 800a412:	4b59      	ldr	r3, [pc, #356]	@ (800a578 <AUDIO_REC_Process+0x174>)
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	2b05      	cmp	r3, #5
 800a418:	d002      	beq.n	800a420 <AUDIO_REC_Process+0x1c>
 800a41a:	2b0a      	cmp	r3, #10
 800a41c:	d079      	beq.n	800a512 <AUDIO_REC_Process+0x10e>

  	case AUDIO_STATE_IDLE:
  	case AUDIO_STATE_INIT:
  	default:
      /* Do Nothing */
      break;
 800a41e:	e0a7      	b.n	800a570 <AUDIO_REC_Process+0x16c>
      if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
 800a420:	4b56      	ldr	r3, [pc, #344]	@ (800a57c <AUDIO_REC_Process+0x178>)
 800a422:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a426:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a42a:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 800a42e:	d303      	bcc.n	800a438 <AUDIO_REC_Process+0x34>
        AudioState = AUDIO_STATE_STOP;
 800a430:	4b51      	ldr	r3, [pc, #324]	@ (800a578 <AUDIO_REC_Process+0x174>)
 800a432:	220a      	movs	r2, #10
 800a434:	701a      	strb	r2, [r3, #0]
        break;
 800a436:	e09b      	b.n	800a570 <AUDIO_REC_Process+0x16c>
      if(BufferCtl.wr_state == BUFFER_FULL)
 800a438:	4b50      	ldr	r3, [pc, #320]	@ (800a57c <AUDIO_REC_Process+0x178>)
 800a43a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a43e:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 800a442:	2b01      	cmp	r3, #1
 800a444:	d128      	bne.n	800a498 <AUDIO_REC_Process+0x94>
        if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset),
 800a446:	4b4d      	ldr	r3, [pc, #308]	@ (800a57c <AUDIO_REC_Process+0x178>)
 800a448:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a44c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800a450:	005b      	lsls	r3, r3, #1
 800a452:	4a4a      	ldr	r2, [pc, #296]	@ (800a57c <AUDIO_REC_Process+0x178>)
 800a454:	1899      	adds	r1, r3, r2
 800a456:	f107 0314 	add.w	r3, r7, #20
 800a45a:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 800a45e:	4848      	ldr	r0, [pc, #288]	@ (800a580 <AUDIO_REC_Process+0x17c>)
 800a460:	f002 fd83 	bl	800cf6a <f_write>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d004      	beq.n	800a474 <AUDIO_REC_Process+0x70>
          printf("recording failed\r\n");
 800a46a:	4846      	ldr	r0, [pc, #280]	@ (800a584 <AUDIO_REC_Process+0x180>)
 800a46c:	f004 fbac 	bl	800ebc8 <puts>
          return AUDIO_ERROR_IO;
 800a470:	2301      	movs	r3, #1
 800a472:	e07d      	b.n	800a570 <AUDIO_REC_Process+0x16c>
        BufferCtl.fptr += byteswritten;
 800a474:	4b41      	ldr	r3, [pc, #260]	@ (800a57c <AUDIO_REC_Process+0x178>)
 800a476:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a47a:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	4413      	add	r3, r2
 800a482:	4a3e      	ldr	r2, [pc, #248]	@ (800a57c <AUDIO_REC_Process+0x178>)
 800a484:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800a488:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
        BufferCtl.wr_state =  BUFFER_EMPTY;
 800a48c:	4b3b      	ldr	r3, [pc, #236]	@ (800a57c <AUDIO_REC_Process+0x178>)
 800a48e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a492:	2200      	movs	r2, #0
 800a494:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
      elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2);
 800a498:	4b38      	ldr	r3, [pc, #224]	@ (800a57c <AUDIO_REC_Process+0x178>)
 800a49a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a49e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a4a2:	4a39      	ldr	r2, [pc, #228]	@ (800a588 <AUDIO_REC_Process+0x184>)
 800a4a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4a8:	0b1b      	lsrs	r3, r3, #12
 800a4aa:	61bb      	str	r3, [r7, #24]
      if(prev_elapsed_time != elapsed_time)
 800a4ac:	4b37      	ldr	r3, [pc, #220]	@ (800a58c <AUDIO_REC_Process+0x188>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	69ba      	ldr	r2, [r7, #24]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d05b      	beq.n	800a56e <AUDIO_REC_Process+0x16a>
        prev_elapsed_time = elapsed_time;
 800a4b6:	4a35      	ldr	r2, [pc, #212]	@ (800a58c <AUDIO_REC_Process+0x188>)
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	6013      	str	r3, [r2, #0]
        printf("Elapsed time : \r\n");
 800a4bc:	4834      	ldr	r0, [pc, #208]	@ (800a590 <AUDIO_REC_Process+0x18c>)
 800a4be:	f004 fb83 	bl	800ebc8 <puts>
        printf("[%02d:%02d]\r\n", (int)(elapsed_time /60), (int)(elapsed_time%60));
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	4a33      	ldr	r2, [pc, #204]	@ (800a594 <AUDIO_REC_Process+0x190>)
 800a4c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ca:	095b      	lsrs	r3, r3, #5
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	69b9      	ldr	r1, [r7, #24]
 800a4d0:	4b30      	ldr	r3, [pc, #192]	@ (800a594 <AUDIO_REC_Process+0x190>)
 800a4d2:	fba3 2301 	umull	r2, r3, r3, r1
 800a4d6:	095a      	lsrs	r2, r3, #5
 800a4d8:	4613      	mov	r3, r2
 800a4da:	011b      	lsls	r3, r3, #4
 800a4dc:	1a9b      	subs	r3, r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	1aca      	subs	r2, r1, r3
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	4601      	mov	r1, r0
 800a4e8:	482b      	ldr	r0, [pc, #172]	@ (800a598 <AUDIO_REC_Process+0x194>)
 800a4ea:	f004 fb05 	bl	800eaf8 <iprintf>
        printf("File size : \r\n");
 800a4ee:	482b      	ldr	r0, [pc, #172]	@ (800a59c <AUDIO_REC_Process+0x198>)
 800a4f0:	f004 fb6a 	bl	800ebc8 <puts>
        printf("%4d KB\r\n", (int)((int32_t)BufferCtl.fptr/1024));
 800a4f4:	4b21      	ldr	r3, [pc, #132]	@ (800a57c <AUDIO_REC_Process+0x178>)
 800a4f6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a4fa:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	da01      	bge.n	800a506 <AUDIO_REC_Process+0x102>
 800a502:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800a506:	129b      	asrs	r3, r3, #10
 800a508:	4619      	mov	r1, r3
 800a50a:	4825      	ldr	r0, [pc, #148]	@ (800a5a0 <AUDIO_REC_Process+0x19c>)
 800a50c:	f004 faf4 	bl	800eaf8 <iprintf>
      break;
 800a510:	e02d      	b.n	800a56e <AUDIO_REC_Process+0x16a>
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800a512:	2002      	movs	r0, #2
 800a514:	f7f9 fc1a 	bl	8003d4c <BSP_AUDIO_IN_Stop>
      HAL_Delay(300);
 800a518:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a51c:	f7f9 fe30 	bl	8004180 <HAL_Delay>
      if(f_lseek(&WavFile, 0) == FR_OK)
 800a520:	2100      	movs	r1, #0
 800a522:	4817      	ldr	r0, [pc, #92]	@ (800a580 <AUDIO_REC_Process+0x17c>)
 800a524:	f002 ff3e 	bl	800d3a4 <f_lseek>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d113      	bne.n	800a556 <AUDIO_REC_Process+0x152>
        WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 800a52e:	491d      	ldr	r1, [pc, #116]	@ (800a5a4 <AUDIO_REC_Process+0x1a0>)
 800a530:	481d      	ldr	r0, [pc, #116]	@ (800a5a8 <AUDIO_REC_Process+0x1a4>)
 800a532:	f000 f9e5 	bl	800a900 <WavProcess_HeaderUpdate>
        if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 800a536:	f107 0314 	add.w	r3, r7, #20
 800a53a:	222c      	movs	r2, #44	@ 0x2c
 800a53c:	491a      	ldr	r1, [pc, #104]	@ (800a5a8 <AUDIO_REC_Process+0x1a4>)
 800a53e:	4810      	ldr	r0, [pc, #64]	@ (800a580 <AUDIO_REC_Process+0x17c>)
 800a540:	f002 fd13 	bl	800cf6a <f_write>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d102      	bne.n	800a550 <AUDIO_REC_Process+0x14c>
          audio_error = AUDIO_ERROR_EOF;
 800a54a:	2302      	movs	r3, #2
 800a54c:	77fb      	strb	r3, [r7, #31]
 800a54e:	e004      	b.n	800a55a <AUDIO_REC_Process+0x156>
          audio_error = AUDIO_ERROR_IO;
 800a550:	2301      	movs	r3, #1
 800a552:	77fb      	strb	r3, [r7, #31]
 800a554:	e001      	b.n	800a55a <AUDIO_REC_Process+0x156>
        audio_error = AUDIO_ERROR_IO;
 800a556:	2301      	movs	r3, #1
 800a558:	77fb      	strb	r3, [r7, #31]
      AudioState = AUDIO_STATE_IDLE;
 800a55a:	4b07      	ldr	r3, [pc, #28]	@ (800a578 <AUDIO_REC_Process+0x174>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	701a      	strb	r2, [r3, #0]
      f_close(&WavFile);
 800a560:	4807      	ldr	r0, [pc, #28]	@ (800a580 <AUDIO_REC_Process+0x17c>)
 800a562:	f002 fef5 	bl	800d350 <f_close>
      printf("wave file closed success\r\n");
 800a566:	4811      	ldr	r0, [pc, #68]	@ (800a5ac <AUDIO_REC_Process+0x1a8>)
 800a568:	f004 fb2e 	bl	800ebc8 <puts>
      break;
 800a56c:	e000      	b.n	800a570 <AUDIO_REC_Process+0x16c>
      break;
 800a56e:	bf00      	nop
      return audio_error;
    }
}
 800a570:	4618      	mov	r0, r3
 800a572:	3720      	adds	r7, #32
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	20000230 	.word	0x20000230
 800a57c:	20000948 	.word	0x20000948
 800a580:	20005184 	.word	0x20005184
 800a584:	08010df4 	.word	0x08010df4
 800a588:	10624dd3 	.word	0x10624dd3
 800a58c:	20000044 	.word	0x20000044
 800a590:	08010e08 	.word	0x08010e08
 800a594:	88888889 	.word	0x88888889
 800a598:	08010e1c 	.word	0x08010e1c
 800a59c:	08010e2c 	.word	0x08010e2c
 800a5a0:	08010e3c 	.word	0x08010e3c
 800a5a4:	20005158 	.word	0x20005158
 800a5a8:	2000091c 	.word	0x2000091c
 800a5ac:	08010e48 	.word	0x08010e48

0800a5b0 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800a5b4:	4b21      	ldr	r3, [pc, #132]	@ (800a63c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a5b6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a5ba:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a5be:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800a5c2:	4a1e      	ldr	r2, [pc, #120]	@ (800a63c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a5c4:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800a5c8:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800a5cc:	4b1b      	ldr	r3, [pc, #108]	@ (800a63c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a5ce:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a5d2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a5d6:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800a5da:	d10c      	bne.n	800a5f6 <BSP_AUDIO_IN_TransferComplete_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800a5dc:	4b17      	ldr	r3, [pc, #92]	@ (800a63c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a5de:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800a5e8:	4b14      	ldr	r3, [pc, #80]	@ (800a63c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a5ea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800a5f6:	4b11      	ldr	r3, [pc, #68]	@ (800a63c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a5f8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a5fc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a600:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800a604:	d314      	bcc.n	800a630 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800a606:	4b0d      	ldr	r3, [pc, #52]	@ (800a63c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a608:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800a612:	4b0a      	ldr	r3, [pc, #40]	@ (800a63c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a614:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a618:	461a      	mov	r2, r3
 800a61a:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800a61e:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800a622:	4b06      	ldr	r3, [pc, #24]	@ (800a63c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a624:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a628:	461a      	mov	r2, r3
 800a62a:	2300      	movs	r3, #0
 800a62c:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800a630:	bf00      	nop
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	20000948 	.word	0x20000948

0800a640 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 800a640:	b480      	push	{r7}
 800a642:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800a644:	4b21      	ldr	r3, [pc, #132]	@ (800a6cc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a646:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a64a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a64e:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800a652:	4a1e      	ldr	r2, [pc, #120]	@ (800a6cc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a654:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800a658:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800a65c:	4b1b      	ldr	r3, [pc, #108]	@ (800a6cc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a65e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a662:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a666:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800a66a:	d10c      	bne.n	800a686 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800a66c:	4b17      	ldr	r3, [pc, #92]	@ (800a6cc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a66e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a672:	2201      	movs	r2, #1
 800a674:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800a678:	4b14      	ldr	r3, [pc, #80]	@ (800a6cc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a67a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a67e:	461a      	mov	r2, r3
 800a680:	2300      	movs	r3, #0
 800a682:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800a686:	4b11      	ldr	r3, [pc, #68]	@ (800a6cc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a688:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a68c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a690:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800a694:	d314      	bcc.n	800a6c0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800a696:	4b0d      	ldr	r3, [pc, #52]	@ (800a6cc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a698:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a69c:	2201      	movs	r2, #1
 800a69e:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800a6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a6cc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a6a4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800a6ae:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800a6b2:	4b06      	ldr	r3, [pc, #24]	@ (800a6cc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a6b4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800a6c0:	bf00      	nop
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	20000948 	.word	0x20000948

0800a6d0 <WavProcess_EncInit>:
  * @param  Freq: Sampling frequency.
  * @param  pHeader: Pointer to the WAV file header to be written.  
  * @retval 0 if success, !0 else.
  */
static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{  
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 800a6da:	4a1b      	ldr	r2, [pc, #108]	@ (800a748 <WavProcess_EncInit+0x78>)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800a6e0:	4b19      	ldr	r3, [pc, #100]	@ (800a748 <WavProcess_EncInit+0x78>)
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800a6e6:	4b18      	ldr	r3, [pc, #96]	@ (800a748 <WavProcess_EncInit+0x78>)
 800a6e8:	2210      	movs	r2, #16
 800a6ea:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800a6ec:	4b16      	ldr	r3, [pc, #88]	@ (800a748 <WavProcess_EncInit+0x78>)
 800a6ee:	4a17      	ldr	r2, [pc, #92]	@ (800a74c <WavProcess_EncInit+0x7c>)
 800a6f0:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800a6f2:	4b15      	ldr	r3, [pc, #84]	@ (800a748 <WavProcess_EncInit+0x78>)
 800a6f4:	222c      	movs	r2, #44	@ 0x2c
 800a6f6:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800a6f8:	4b13      	ldr	r3, [pc, #76]	@ (800a748 <WavProcess_EncInit+0x78>)
 800a6fa:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800a6fc:	4a12      	ldr	r2, [pc, #72]	@ (800a748 <WavProcess_EncInit+0x78>)
 800a6fe:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800a700:	08d2      	lsrs	r2, r2, #3
 800a702:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800a704:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800a708:	4a0f      	ldr	r2, [pc, #60]	@ (800a748 <WavProcess_EncInit+0x78>)
 800a70a:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800a70c:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800a710:	4a0d      	ldr	r2, [pc, #52]	@ (800a748 <WavProcess_EncInit+0x78>)
 800a712:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800a714:	4b0c      	ldr	r3, [pc, #48]	@ (800a748 <WavProcess_EncInit+0x78>)
 800a716:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800a718:	4b0b      	ldr	r3, [pc, #44]	@ (800a748 <WavProcess_EncInit+0x78>)
 800a71a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800a71c:	08db      	lsrs	r3, r3, #3
 800a71e:	b29b      	uxth	r3, r3
 800a720:	fb12 f303 	smulbb	r3, r2, r3
 800a724:	b29a      	uxth	r2, r3
 800a726:	4b08      	ldr	r3, [pc, #32]	@ (800a748 <WavProcess_EncInit+0x78>)
 800a728:	841a      	strh	r2, [r3, #32]
  
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 800a72a:	4907      	ldr	r1, [pc, #28]	@ (800a748 <WavProcess_EncInit+0x78>)
 800a72c:	6838      	ldr	r0, [r7, #0]
 800a72e:	f000 f80f 	bl	800a750 <WavProcess_HeaderInit>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <WavProcess_EncInit+0x6c>
  {
    return 1;
 800a738:	2301      	movs	r3, #1
 800a73a:	e000      	b.n	800a73e <WavProcess_EncInit+0x6e>
  }
  return 0;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	20005158 	.word	0x20005158
 800a74c:	001d4c00 	.word	0x001d4c00

0800a750 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2252      	movs	r2, #82	@ 0x52
 800a75e:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3301      	adds	r3, #1
 800a764:	2249      	movs	r2, #73	@ 0x49
 800a766:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	3302      	adds	r3, #2
 800a76c:	2246      	movs	r2, #70	@ 0x46
 800a76e:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	3303      	adds	r3, #3
 800a774:	2246      	movs	r2, #70	@ 0x46
 800a776:	701a      	strb	r2, [r3, #0]
  
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	3304      	adds	r3, #4
 800a77c:	2200      	movs	r2, #0
 800a77e:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	3305      	adds	r3, #5
 800a784:	224c      	movs	r2, #76	@ 0x4c
 800a786:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	3306      	adds	r3, #6
 800a78c:	221d      	movs	r2, #29
 800a78e:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	3307      	adds	r3, #7
 800a794:	2200      	movs	r2, #0
 800a796:	701a      	strb	r2, [r3, #0]
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3308      	adds	r3, #8
 800a79c:	2257      	movs	r2, #87	@ 0x57
 800a79e:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3309      	adds	r3, #9
 800a7a4:	2241      	movs	r2, #65	@ 0x41
 800a7a6:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	330a      	adds	r3, #10
 800a7ac:	2256      	movs	r2, #86	@ 0x56
 800a7ae:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	330b      	adds	r3, #11
 800a7b4:	2245      	movs	r2, #69	@ 0x45
 800a7b6:	701a      	strb	r2, [r3, #0]
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	330c      	adds	r3, #12
 800a7bc:	2266      	movs	r2, #102	@ 0x66
 800a7be:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	330d      	adds	r3, #13
 800a7c4:	226d      	movs	r2, #109	@ 0x6d
 800a7c6:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	330e      	adds	r3, #14
 800a7cc:	2274      	movs	r2, #116	@ 0x74
 800a7ce:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	330f      	adds	r3, #15
 800a7d4:	2220      	movs	r2, #32
 800a7d6:	701a      	strb	r2, [r3, #0]
  
  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	3310      	adds	r3, #16
 800a7dc:	2210      	movs	r2, #16
 800a7de:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	3311      	adds	r3, #17
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	3312      	adds	r3, #18
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	3313      	adds	r3, #19
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	701a      	strb	r2, [r3, #0]
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	3314      	adds	r3, #20
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3315      	adds	r3, #21
 800a804:	2200      	movs	r2, #0
 800a806:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	8ada      	ldrh	r2, [r3, #22]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	3316      	adds	r3, #22
 800a810:	b2d2      	uxtb	r2, r2
 800a812:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	3317      	adds	r3, #23
 800a818:	2200      	movs	r2, #0
 800a81a:	701a      	strb	r2, [r3, #0]
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	699a      	ldr	r2, [r3, #24]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	3318      	adds	r3, #24
 800a824:	b2d2      	uxtb	r2, r2
 800a826:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	0a1a      	lsrs	r2, r3, #8
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	3319      	adds	r3, #25
 800a832:	b2d2      	uxtb	r2, r2
 800a834:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	0c1a      	lsrs	r2, r3, #16
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	331a      	adds	r3, #26
 800a840:	b2d2      	uxtb	r2, r2
 800a842:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	0e1a      	lsrs	r2, r3, #24
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	331b      	adds	r3, #27
 800a84e:	b2d2      	uxtb	r2, r2
 800a850:	701a      	strb	r2, [r3, #0]
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	69da      	ldr	r2, [r3, #28]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	331c      	adds	r3, #28
 800a85a:	b2d2      	uxtb	r2, r2
 800a85c:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	69db      	ldr	r3, [r3, #28]
 800a862:	0a1a      	lsrs	r2, r3, #8
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	331d      	adds	r3, #29
 800a868:	b2d2      	uxtb	r2, r2
 800a86a:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	69db      	ldr	r3, [r3, #28]
 800a870:	0c1a      	lsrs	r2, r3, #16
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	331e      	adds	r3, #30
 800a876:	b2d2      	uxtb	r2, r2
 800a878:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	0e1a      	lsrs	r2, r3, #24
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	331f      	adds	r3, #31
 800a884:	b2d2      	uxtb	r2, r2
 800a886:	701a      	strb	r2, [r3, #0]
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	8c1a      	ldrh	r2, [r3, #32]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	3320      	adds	r3, #32
 800a890:	b2d2      	uxtb	r2, r2
 800a892:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	3321      	adds	r3, #33	@ 0x21
 800a898:	2200      	movs	r2, #0
 800a89a:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	3322      	adds	r3, #34	@ 0x22
 800a8a4:	b2d2      	uxtb	r2, r2
 800a8a6:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3323      	adds	r3, #35	@ 0x23
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	701a      	strb	r2, [r3, #0]
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3324      	adds	r3, #36	@ 0x24
 800a8b4:	2264      	movs	r2, #100	@ 0x64
 800a8b6:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3325      	adds	r3, #37	@ 0x25
 800a8bc:	2261      	movs	r2, #97	@ 0x61
 800a8be:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	3326      	adds	r3, #38	@ 0x26
 800a8c4:	2274      	movs	r2, #116	@ 0x74
 800a8c6:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	3327      	adds	r3, #39	@ 0x27
 800a8cc:	2261      	movs	r2, #97	@ 0x61
 800a8ce:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	3328      	adds	r3, #40	@ 0x28
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	3329      	adds	r3, #41	@ 0x29
 800a8dc:	224c      	movs	r2, #76	@ 0x4c
 800a8de:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	332a      	adds	r3, #42	@ 0x2a
 800a8e4:	221d      	movs	r2, #29
 800a8e6:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	332b      	adds	r3, #43	@ 0x2b
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	370c      	adds	r7, #12
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
	...

0800a900 <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 800a90a:	4b30      	ldr	r3, [pc, #192]	@ (800a9cc <WavProcess_HeaderUpdate+0xcc>)
 800a90c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a910:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	3304      	adds	r3, #4
 800a918:	b2d2      	uxtb	r2, r2
 800a91a:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 800a91c:	4b2b      	ldr	r3, [pc, #172]	@ (800a9cc <WavProcess_HeaderUpdate+0xcc>)
 800a91e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a922:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a926:	0a1a      	lsrs	r2, r3, #8
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3305      	adds	r3, #5
 800a92c:	b2d2      	uxtb	r2, r2
 800a92e:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 800a930:	4b26      	ldr	r3, [pc, #152]	@ (800a9cc <WavProcess_HeaderUpdate+0xcc>)
 800a932:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a936:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a93a:	0c1a      	lsrs	r2, r3, #16
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	3306      	adds	r3, #6
 800a940:	b2d2      	uxtb	r2, r2
 800a942:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 800a944:	4b21      	ldr	r3, [pc, #132]	@ (800a9cc <WavProcess_HeaderUpdate+0xcc>)
 800a946:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a94a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a94e:	0e1a      	lsrs	r2, r3, #24
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	3307      	adds	r3, #7
 800a954:	b2d2      	uxtb	r2, r2
 800a956:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 800a958:	4b1c      	ldr	r3, [pc, #112]	@ (800a9cc <WavProcess_HeaderUpdate+0xcc>)
 800a95a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a95e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a962:	3b2c      	subs	r3, #44	@ 0x2c
 800a964:	4a19      	ldr	r2, [pc, #100]	@ (800a9cc <WavProcess_HeaderUpdate+0xcc>)
 800a966:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800a96a:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 800a96e:	4b17      	ldr	r3, [pc, #92]	@ (800a9cc <WavProcess_HeaderUpdate+0xcc>)
 800a970:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a974:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	3328      	adds	r3, #40	@ 0x28
 800a97c:	b2d2      	uxtb	r2, r2
 800a97e:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 800a980:	4b12      	ldr	r3, [pc, #72]	@ (800a9cc <WavProcess_HeaderUpdate+0xcc>)
 800a982:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a986:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a98a:	0a1a      	lsrs	r2, r3, #8
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	3329      	adds	r3, #41	@ 0x29
 800a990:	b2d2      	uxtb	r2, r2
 800a992:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 800a994:	4b0d      	ldr	r3, [pc, #52]	@ (800a9cc <WavProcess_HeaderUpdate+0xcc>)
 800a996:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a99a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a99e:	0c1a      	lsrs	r2, r3, #16
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	332a      	adds	r3, #42	@ 0x2a
 800a9a4:	b2d2      	uxtb	r2, r2
 800a9a6:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 800a9a8:	4b08      	ldr	r3, [pc, #32]	@ (800a9cc <WavProcess_HeaderUpdate+0xcc>)
 800a9aa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a9ae:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a9b2:	0e1a      	lsrs	r2, r3, #24
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	332b      	adds	r3, #43	@ 0x2b
 800a9b8:	b2d2      	uxtb	r2, r2
 800a9ba:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	20000948 	.word	0x20000948

0800a9d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a9d4:	4904      	ldr	r1, [pc, #16]	@ (800a9e8 <MX_FATFS_Init+0x18>)
 800a9d6:	4805      	ldr	r0, [pc, #20]	@ (800a9ec <MX_FATFS_Init+0x1c>)
 800a9d8:	f003 fb66 	bl	800e0a8 <FATFS_LinkDriver>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	461a      	mov	r2, r3
 800a9e0:	4b03      	ldr	r3, [pc, #12]	@ (800a9f0 <MX_FATFS_Init+0x20>)
 800a9e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a9e4:	bf00      	nop
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	200053b8 	.word	0x200053b8
 800a9ec:	08010ec8 	.word	0x08010ec8
 800a9f0:	200053b4 	.word	0x200053b4

0800a9f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a9f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800aa0e:	f000 f888 	bl	800ab22 <BSP_SD_IsDetected>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d001      	beq.n	800aa1c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800aa18:	2302      	movs	r3, #2
 800aa1a:	e005      	b.n	800aa28 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800aa1c:	4804      	ldr	r0, [pc, #16]	@ (800aa30 <BSP_SD_Init+0x2c>)
 800aa1e:	f7fd f90a 	bl	8007c36 <HAL_SD_Init>
 800aa22:	4603      	mov	r3, r0
 800aa24:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800aa26:	79fb      	ldrb	r3, [r7, #7]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	20000520 	.word	0x20000520

0800aa34 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	68f9      	ldr	r1, [r7, #12]
 800aa4a:	4806      	ldr	r0, [pc, #24]	@ (800aa64 <BSP_SD_ReadBlocks_DMA+0x30>)
 800aa4c:	f7fd f9ac 	bl	8007da8 <HAL_SD_ReadBlocks_DMA>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aa5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3718      	adds	r7, #24
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	20000520 	.word	0x20000520

0800aa68 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b086      	sub	sp, #24
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	68f9      	ldr	r1, [r7, #12]
 800aa7e:	4806      	ldr	r0, [pc, #24]	@ (800aa98 <BSP_SD_WriteBlocks_DMA+0x30>)
 800aa80:	f7fd fa74 	bl	8007f6c <HAL_SD_WriteBlocks_DMA>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aa8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3718      	adds	r7, #24
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	20000520 	.word	0x20000520

0800aa9c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800aaa0:	4805      	ldr	r0, [pc, #20]	@ (800aab8 <BSP_SD_GetCardState+0x1c>)
 800aaa2:	f7fd fe99 	bl	80087d8 <HAL_SD_GetCardState>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b04      	cmp	r3, #4
 800aaaa:	bf14      	ite	ne
 800aaac:	2301      	movne	r3, #1
 800aaae:	2300      	moveq	r3, #0
 800aab0:	b2db      	uxtb	r3, r3
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	20000520 	.word	0x20000520

0800aabc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800aac4:	6879      	ldr	r1, [r7, #4]
 800aac6:	4803      	ldr	r0, [pc, #12]	@ (800aad4 <BSP_SD_GetCardInfo+0x18>)
 800aac8:	f7fd fe5a 	bl	8008780 <HAL_SD_GetCardInfo>
}
 800aacc:	bf00      	nop
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	20000520 	.word	0x20000520

0800aad8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800aae0:	f000 f818 	bl	800ab14 <BSP_SD_AbortCallback>
}
 800aae4:	bf00      	nop
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800aaf4:	f000 f9a8 	bl	800ae48 <BSP_SD_WriteCpltCallback>
}
 800aaf8:	bf00      	nop
 800aafa:	3708      	adds	r7, #8
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ab08:	f000 f9aa 	bl	800ae60 <BSP_SD_ReadCpltCallback>
}
 800ab0c:	bf00      	nop
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ab14:	b480      	push	{r7}
 800ab16:	af00      	add	r7, sp, #0

}
 800ab18:	bf00      	nop
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b082      	sub	sp, #8
 800ab26:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ab2c:	f000 f80c 	bl	800ab48 <BSP_PlatformIsDetected>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d101      	bne.n	800ab3a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ab36:	2300      	movs	r3, #0
 800ab38:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ab3a:	79fb      	ldrb	r3, [r7, #7]
 800ab3c:	b2db      	uxtb	r3, r3
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
	...

0800ab48 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ab52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ab56:	4806      	ldr	r0, [pc, #24]	@ (800ab70 <BSP_PlatformIsDetected+0x28>)
 800ab58:	f7fa fb74 	bl	8005244 <HAL_GPIO_ReadPin>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ab62:	2300      	movs	r3, #0
 800ab64:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ab66:	79fb      	ldrb	r3, [r7, #7]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	40020800 	.word	0x40020800

0800ab74 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ab7c:	f7f9 faf4 	bl	8004168 <HAL_GetTick>
 800ab80:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ab82:	e006      	b.n	800ab92 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ab84:	f7ff ff8a 	bl	800aa9c <BSP_SD_GetCardState>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	e009      	b.n	800aba6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ab92:	f7f9 fae9 	bl	8004168 <HAL_GetTick>
 800ab96:	4602      	mov	r2, r0
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d8f0      	bhi.n	800ab84 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800aba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
	...

0800abb0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	4603      	mov	r3, r0
 800abb8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800abba:	4b0b      	ldr	r3, [pc, #44]	@ (800abe8 <SD_CheckStatus+0x38>)
 800abbc:	2201      	movs	r2, #1
 800abbe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800abc0:	f7ff ff6c 	bl	800aa9c <BSP_SD_GetCardState>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d107      	bne.n	800abda <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800abca:	4b07      	ldr	r3, [pc, #28]	@ (800abe8 <SD_CheckStatus+0x38>)
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	f023 0301 	bic.w	r3, r3, #1
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	4b04      	ldr	r3, [pc, #16]	@ (800abe8 <SD_CheckStatus+0x38>)
 800abd8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800abda:	4b03      	ldr	r3, [pc, #12]	@ (800abe8 <SD_CheckStatus+0x38>)
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	b2db      	uxtb	r3, r3
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	20000048 	.word	0x20000048

0800abec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	4603      	mov	r3, r0
 800abf4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800abf6:	f7ff ff05 	bl	800aa04 <BSP_SD_Init>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d107      	bne.n	800ac10 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ac00:	79fb      	ldrb	r3, [r7, #7]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7ff ffd4 	bl	800abb0 <SD_CheckStatus>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	4b04      	ldr	r3, [pc, #16]	@ (800ac20 <SD_initialize+0x34>)
 800ac0e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ac10:	4b03      	ldr	r3, [pc, #12]	@ (800ac20 <SD_initialize+0x34>)
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	b2db      	uxtb	r3, r3
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	20000048 	.word	0x20000048

0800ac24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ac2e:	79fb      	ldrb	r3, [r7, #7]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7ff ffbd 	bl	800abb0 <SD_CheckStatus>
 800ac36:	4603      	mov	r3, r0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60b9      	str	r1, [r7, #8]
 800ac48:	607a      	str	r2, [r7, #4]
 800ac4a:	603b      	str	r3, [r7, #0]
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ac50:	2301      	movs	r3, #1
 800ac52:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ac54:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ac58:	f7ff ff8c 	bl	800ab74 <SD_CheckStatusWithTimeout>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	da01      	bge.n	800ac66 <SD_read+0x26>
  {
    return res;
 800ac62:	7dfb      	ldrb	r3, [r7, #23]
 800ac64:	e03b      	b.n	800acde <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	6879      	ldr	r1, [r7, #4]
 800ac6a:	68b8      	ldr	r0, [r7, #8]
 800ac6c:	f7ff fee2 	bl	800aa34 <BSP_SD_ReadBlocks_DMA>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d132      	bne.n	800acdc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ac76:	4b1c      	ldr	r3, [pc, #112]	@ (800ace8 <SD_read+0xa8>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ac7c:	f7f9 fa74 	bl	8004168 <HAL_GetTick>
 800ac80:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ac82:	bf00      	nop
 800ac84:	4b18      	ldr	r3, [pc, #96]	@ (800ace8 <SD_read+0xa8>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d108      	bne.n	800ac9e <SD_read+0x5e>
 800ac8c:	f7f9 fa6c 	bl	8004168 <HAL_GetTick>
 800ac90:	4602      	mov	r2, r0
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d9f2      	bls.n	800ac84 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800ac9e:	4b12      	ldr	r3, [pc, #72]	@ (800ace8 <SD_read+0xa8>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d102      	bne.n	800acac <SD_read+0x6c>
      {
        res = RES_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	75fb      	strb	r3, [r7, #23]
 800acaa:	e017      	b.n	800acdc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800acac:	4b0e      	ldr	r3, [pc, #56]	@ (800ace8 <SD_read+0xa8>)
 800acae:	2200      	movs	r2, #0
 800acb0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800acb2:	f7f9 fa59 	bl	8004168 <HAL_GetTick>
 800acb6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800acb8:	e007      	b.n	800acca <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800acba:	f7ff feef 	bl	800aa9c <BSP_SD_GetCardState>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d102      	bne.n	800acca <SD_read+0x8a>
          {
            res = RES_OK;
 800acc4:	2300      	movs	r3, #0
 800acc6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800acc8:	e008      	b.n	800acdc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800acca:	f7f9 fa4d 	bl	8004168 <HAL_GetTick>
 800acce:	4602      	mov	r2, r0
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	1ad3      	subs	r3, r2, r3
 800acd4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800acd8:	4293      	cmp	r3, r2
 800acda:	d9ee      	bls.n	800acba <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800acdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3718      	adds	r7, #24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	200055f0 	.word	0x200055f0

0800acec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b086      	sub	sp, #24
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60b9      	str	r1, [r7, #8]
 800acf4:	607a      	str	r2, [r7, #4]
 800acf6:	603b      	str	r3, [r7, #0]
 800acf8:	4603      	mov	r3, r0
 800acfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ad00:	4b24      	ldr	r3, [pc, #144]	@ (800ad94 <SD_write+0xa8>)
 800ad02:	2200      	movs	r2, #0
 800ad04:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ad06:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ad0a:	f7ff ff33 	bl	800ab74 <SD_CheckStatusWithTimeout>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	da01      	bge.n	800ad18 <SD_write+0x2c>
  {
    return res;
 800ad14:	7dfb      	ldrb	r3, [r7, #23]
 800ad16:	e038      	b.n	800ad8a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ad18:	683a      	ldr	r2, [r7, #0]
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	68b8      	ldr	r0, [r7, #8]
 800ad1e:	f7ff fea3 	bl	800aa68 <BSP_SD_WriteBlocks_DMA>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d12f      	bne.n	800ad88 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ad28:	f7f9 fa1e 	bl	8004168 <HAL_GetTick>
 800ad2c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ad2e:	bf00      	nop
 800ad30:	4b18      	ldr	r3, [pc, #96]	@ (800ad94 <SD_write+0xa8>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d108      	bne.n	800ad4a <SD_write+0x5e>
 800ad38:	f7f9 fa16 	bl	8004168 <HAL_GetTick>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d9f2      	bls.n	800ad30 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800ad4a:	4b12      	ldr	r3, [pc, #72]	@ (800ad94 <SD_write+0xa8>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d102      	bne.n	800ad58 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	75fb      	strb	r3, [r7, #23]
 800ad56:	e017      	b.n	800ad88 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ad58:	4b0e      	ldr	r3, [pc, #56]	@ (800ad94 <SD_write+0xa8>)
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ad5e:	f7f9 fa03 	bl	8004168 <HAL_GetTick>
 800ad62:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ad64:	e007      	b.n	800ad76 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ad66:	f7ff fe99 	bl	800aa9c <BSP_SD_GetCardState>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d102      	bne.n	800ad76 <SD_write+0x8a>
          {
            res = RES_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	75fb      	strb	r3, [r7, #23]
            break;
 800ad74:	e008      	b.n	800ad88 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ad76:	f7f9 f9f7 	bl	8004168 <HAL_GetTick>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	1ad3      	subs	r3, r2, r3
 800ad80:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d9ee      	bls.n	800ad66 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ad88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3718      	adds	r7, #24
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	200055ec 	.word	0x200055ec

0800ad98 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b08c      	sub	sp, #48	@ 0x30
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	4603      	mov	r3, r0
 800ada0:	603a      	str	r2, [r7, #0]
 800ada2:	71fb      	strb	r3, [r7, #7]
 800ada4:	460b      	mov	r3, r1
 800ada6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800adae:	4b25      	ldr	r3, [pc, #148]	@ (800ae44 <SD_ioctl+0xac>)
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	f003 0301 	and.w	r3, r3, #1
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <SD_ioctl+0x28>
 800adbc:	2303      	movs	r3, #3
 800adbe:	e03c      	b.n	800ae3a <SD_ioctl+0xa2>

  switch (cmd)
 800adc0:	79bb      	ldrb	r3, [r7, #6]
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d834      	bhi.n	800ae30 <SD_ioctl+0x98>
 800adc6:	a201      	add	r2, pc, #4	@ (adr r2, 800adcc <SD_ioctl+0x34>)
 800adc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adcc:	0800addd 	.word	0x0800addd
 800add0:	0800ade5 	.word	0x0800ade5
 800add4:	0800adfd 	.word	0x0800adfd
 800add8:	0800ae17 	.word	0x0800ae17
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ade2:	e028      	b.n	800ae36 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ade4:	f107 030c 	add.w	r3, r7, #12
 800ade8:	4618      	mov	r0, r3
 800adea:	f7ff fe67 	bl	800aabc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800adee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800adfa:	e01c      	b.n	800ae36 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800adfc:	f107 030c 	add.w	r3, r7, #12
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7ff fe5b 	bl	800aabc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ae06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ae14:	e00f      	b.n	800ae36 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ae16:	f107 030c 	add.w	r3, r7, #12
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7ff fe4e 	bl	800aabc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ae20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae22:	0a5a      	lsrs	r2, r3, #9
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ae2e:	e002      	b.n	800ae36 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ae30:	2304      	movs	r3, #4
 800ae32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800ae36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3730      	adds	r7, #48	@ 0x30
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	20000048 	.word	0x20000048

0800ae48 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ae4c:	4b03      	ldr	r3, [pc, #12]	@ (800ae5c <BSP_SD_WriteCpltCallback+0x14>)
 800ae4e:	2201      	movs	r2, #1
 800ae50:	601a      	str	r2, [r3, #0]
}
 800ae52:	bf00      	nop
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	200055ec 	.word	0x200055ec

0800ae60 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ae60:	b480      	push	{r7}
 800ae62:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ae64:	4b03      	ldr	r3, [pc, #12]	@ (800ae74 <BSP_SD_ReadCpltCallback+0x14>)
 800ae66:	2201      	movs	r2, #1
 800ae68:	601a      	str	r2, [r3, #0]
}
 800ae6a:	bf00      	nop
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr
 800ae74:	200055f0 	.word	0x200055f0

0800ae78 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	4603      	mov	r3, r0
 800ae80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ae82:	79fb      	ldrb	r3, [r7, #7]
 800ae84:	4a08      	ldr	r2, [pc, #32]	@ (800aea8 <disk_status+0x30>)
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4413      	add	r3, r2
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	79fa      	ldrb	r2, [r7, #7]
 800ae90:	4905      	ldr	r1, [pc, #20]	@ (800aea8 <disk_status+0x30>)
 800ae92:	440a      	add	r2, r1
 800ae94:	7a12      	ldrb	r2, [r2, #8]
 800ae96:	4610      	mov	r0, r2
 800ae98:	4798      	blx	r3
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	2000561c 	.word	0x2000561c

0800aeac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800aeba:	79fb      	ldrb	r3, [r7, #7]
 800aebc:	4a0d      	ldr	r2, [pc, #52]	@ (800aef4 <disk_initialize+0x48>)
 800aebe:	5cd3      	ldrb	r3, [r2, r3]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d111      	bne.n	800aee8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800aec4:	79fb      	ldrb	r3, [r7, #7]
 800aec6:	4a0b      	ldr	r2, [pc, #44]	@ (800aef4 <disk_initialize+0x48>)
 800aec8:	2101      	movs	r1, #1
 800aeca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800aecc:	79fb      	ldrb	r3, [r7, #7]
 800aece:	4a09      	ldr	r2, [pc, #36]	@ (800aef4 <disk_initialize+0x48>)
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	4413      	add	r3, r2
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	79fa      	ldrb	r2, [r7, #7]
 800aeda:	4906      	ldr	r1, [pc, #24]	@ (800aef4 <disk_initialize+0x48>)
 800aedc:	440a      	add	r2, r1
 800aede:	7a12      	ldrb	r2, [r2, #8]
 800aee0:	4610      	mov	r0, r2
 800aee2:	4798      	blx	r3
 800aee4:	4603      	mov	r3, r0
 800aee6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	2000561c 	.word	0x2000561c

0800aef8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aef8:	b590      	push	{r4, r7, lr}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60b9      	str	r1, [r7, #8]
 800af00:	607a      	str	r2, [r7, #4]
 800af02:	603b      	str	r3, [r7, #0]
 800af04:	4603      	mov	r3, r0
 800af06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800af08:	7bfb      	ldrb	r3, [r7, #15]
 800af0a:	4a0a      	ldr	r2, [pc, #40]	@ (800af34 <disk_read+0x3c>)
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	4413      	add	r3, r2
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	689c      	ldr	r4, [r3, #8]
 800af14:	7bfb      	ldrb	r3, [r7, #15]
 800af16:	4a07      	ldr	r2, [pc, #28]	@ (800af34 <disk_read+0x3c>)
 800af18:	4413      	add	r3, r2
 800af1a:	7a18      	ldrb	r0, [r3, #8]
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	68b9      	ldr	r1, [r7, #8]
 800af22:	47a0      	blx	r4
 800af24:	4603      	mov	r3, r0
 800af26:	75fb      	strb	r3, [r7, #23]
  return res;
 800af28:	7dfb      	ldrb	r3, [r7, #23]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	371c      	adds	r7, #28
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd90      	pop	{r4, r7, pc}
 800af32:	bf00      	nop
 800af34:	2000561c 	.word	0x2000561c

0800af38 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800af38:	b590      	push	{r4, r7, lr}
 800af3a:	b087      	sub	sp, #28
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60b9      	str	r1, [r7, #8]
 800af40:	607a      	str	r2, [r7, #4]
 800af42:	603b      	str	r3, [r7, #0]
 800af44:	4603      	mov	r3, r0
 800af46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800af48:	7bfb      	ldrb	r3, [r7, #15]
 800af4a:	4a0a      	ldr	r2, [pc, #40]	@ (800af74 <disk_write+0x3c>)
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4413      	add	r3, r2
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	68dc      	ldr	r4, [r3, #12]
 800af54:	7bfb      	ldrb	r3, [r7, #15]
 800af56:	4a07      	ldr	r2, [pc, #28]	@ (800af74 <disk_write+0x3c>)
 800af58:	4413      	add	r3, r2
 800af5a:	7a18      	ldrb	r0, [r3, #8]
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	68b9      	ldr	r1, [r7, #8]
 800af62:	47a0      	blx	r4
 800af64:	4603      	mov	r3, r0
 800af66:	75fb      	strb	r3, [r7, #23]
  return res;
 800af68:	7dfb      	ldrb	r3, [r7, #23]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	371c      	adds	r7, #28
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd90      	pop	{r4, r7, pc}
 800af72:	bf00      	nop
 800af74:	2000561c 	.word	0x2000561c

0800af78 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	603a      	str	r2, [r7, #0]
 800af82:	71fb      	strb	r3, [r7, #7]
 800af84:	460b      	mov	r3, r1
 800af86:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800af88:	79fb      	ldrb	r3, [r7, #7]
 800af8a:	4a09      	ldr	r2, [pc, #36]	@ (800afb0 <disk_ioctl+0x38>)
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	79fa      	ldrb	r2, [r7, #7]
 800af96:	4906      	ldr	r1, [pc, #24]	@ (800afb0 <disk_ioctl+0x38>)
 800af98:	440a      	add	r2, r1
 800af9a:	7a10      	ldrb	r0, [r2, #8]
 800af9c:	79b9      	ldrb	r1, [r7, #6]
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	4798      	blx	r3
 800afa2:	4603      	mov	r3, r0
 800afa4:	73fb      	strb	r3, [r7, #15]
  return res;
 800afa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	2000561c 	.word	0x2000561c

0800afb4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3301      	adds	r3, #1
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800afc4:	89fb      	ldrh	r3, [r7, #14]
 800afc6:	021b      	lsls	r3, r3, #8
 800afc8:	b21a      	sxth	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	b21b      	sxth	r3, r3
 800afd0:	4313      	orrs	r3, r2
 800afd2:	b21b      	sxth	r3, r3
 800afd4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800afd6:	89fb      	ldrh	r3, [r7, #14]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3714      	adds	r7, #20
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	3303      	adds	r3, #3
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	021b      	lsls	r3, r3, #8
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	3202      	adds	r2, #2
 800affc:	7812      	ldrb	r2, [r2, #0]
 800affe:	4313      	orrs	r3, r2
 800b000:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	021b      	lsls	r3, r3, #8
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	3201      	adds	r2, #1
 800b00a:	7812      	ldrb	r2, [r2, #0]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	021b      	lsls	r3, r3, #8
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	7812      	ldrb	r2, [r2, #0]
 800b018:	4313      	orrs	r3, r2
 800b01a:	60fb      	str	r3, [r7, #12]
	return rv;
 800b01c:	68fb      	ldr	r3, [r7, #12]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr

0800b02a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b02a:	b480      	push	{r7}
 800b02c:	b083      	sub	sp, #12
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
 800b032:	460b      	mov	r3, r1
 800b034:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	1c5a      	adds	r2, r3, #1
 800b03a:	607a      	str	r2, [r7, #4]
 800b03c:	887a      	ldrh	r2, [r7, #2]
 800b03e:	b2d2      	uxtb	r2, r2
 800b040:	701a      	strb	r2, [r3, #0]
 800b042:	887b      	ldrh	r3, [r7, #2]
 800b044:	0a1b      	lsrs	r3, r3, #8
 800b046:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	1c5a      	adds	r2, r3, #1
 800b04c:	607a      	str	r2, [r7, #4]
 800b04e:	887a      	ldrh	r2, [r7, #2]
 800b050:	b2d2      	uxtb	r2, r2
 800b052:	701a      	strb	r2, [r3, #0]
}
 800b054:	bf00      	nop
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	1c5a      	adds	r2, r3, #1
 800b06e:	607a      	str	r2, [r7, #4]
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	b2d2      	uxtb	r2, r2
 800b074:	701a      	strb	r2, [r3, #0]
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	0a1b      	lsrs	r3, r3, #8
 800b07a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	607a      	str	r2, [r7, #4]
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	b2d2      	uxtb	r2, r2
 800b086:	701a      	strb	r2, [r3, #0]
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	0a1b      	lsrs	r3, r3, #8
 800b08c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	1c5a      	adds	r2, r3, #1
 800b092:	607a      	str	r2, [r7, #4]
 800b094:	683a      	ldr	r2, [r7, #0]
 800b096:	b2d2      	uxtb	r2, r2
 800b098:	701a      	strb	r2, [r3, #0]
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	0a1b      	lsrs	r3, r3, #8
 800b09e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	1c5a      	adds	r2, r3, #1
 800b0a4:	607a      	str	r2, [r7, #4]
 800b0a6:	683a      	ldr	r2, [r7, #0]
 800b0a8:	b2d2      	uxtb	r2, r2
 800b0aa:	701a      	strb	r2, [r3, #0]
}
 800b0ac:	bf00      	nop
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b0b8:	b480      	push	{r7}
 800b0ba:	b087      	sub	sp, #28
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00d      	beq.n	800b0ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b0d2:	693a      	ldr	r2, [r7, #16]
 800b0d4:	1c53      	adds	r3, r2, #1
 800b0d6:	613b      	str	r3, [r7, #16]
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	1c59      	adds	r1, r3, #1
 800b0dc:	6179      	str	r1, [r7, #20]
 800b0de:	7812      	ldrb	r2, [r2, #0]
 800b0e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	607b      	str	r3, [r7, #4]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1f1      	bne.n	800b0d2 <mem_cpy+0x1a>
	}
}
 800b0ee:	bf00      	nop
 800b0f0:	371c      	adds	r7, #28
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b0fa:	b480      	push	{r7}
 800b0fc:	b087      	sub	sp, #28
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	60f8      	str	r0, [r7, #12]
 800b102:	60b9      	str	r1, [r7, #8]
 800b104:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	1c5a      	adds	r2, r3, #1
 800b10e:	617a      	str	r2, [r7, #20]
 800b110:	68ba      	ldr	r2, [r7, #8]
 800b112:	b2d2      	uxtb	r2, r2
 800b114:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	3b01      	subs	r3, #1
 800b11a:	607b      	str	r3, [r7, #4]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1f3      	bne.n	800b10a <mem_set+0x10>
}
 800b122:	bf00      	nop
 800b124:	bf00      	nop
 800b126:	371c      	adds	r7, #28
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b130:	b480      	push	{r7}
 800b132:	b089      	sub	sp, #36	@ 0x24
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	61fb      	str	r3, [r7, #28]
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b144:	2300      	movs	r3, #0
 800b146:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	1c5a      	adds	r2, r3, #1
 800b14c:	61fa      	str	r2, [r7, #28]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	4619      	mov	r1, r3
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	1c5a      	adds	r2, r3, #1
 800b156:	61ba      	str	r2, [r7, #24]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	1acb      	subs	r3, r1, r3
 800b15c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3b01      	subs	r3, #1
 800b162:	607b      	str	r3, [r7, #4]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d002      	beq.n	800b170 <mem_cmp+0x40>
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d0eb      	beq.n	800b148 <mem_cmp+0x18>

	return r;
 800b170:	697b      	ldr	r3, [r7, #20]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3724      	adds	r7, #36	@ 0x24
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b17e:	b480      	push	{r7}
 800b180:	b083      	sub	sp, #12
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b188:	e002      	b.n	800b190 <chk_chr+0x12>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3301      	adds	r3, #1
 800b18e:	607b      	str	r3, [r7, #4]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d005      	beq.n	800b1a4 <chk_chr+0x26>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	461a      	mov	r2, r3
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d1f2      	bne.n	800b18a <chk_chr+0xc>
	return *str;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	781b      	ldrb	r3, [r3, #0]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b1be:	2300      	movs	r3, #0
 800b1c0:	60bb      	str	r3, [r7, #8]
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	60fb      	str	r3, [r7, #12]
 800b1c6:	e029      	b.n	800b21c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b1c8:	4a27      	ldr	r2, [pc, #156]	@ (800b268 <chk_lock+0xb4>)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	011b      	lsls	r3, r3, #4
 800b1ce:	4413      	add	r3, r2
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d01d      	beq.n	800b212 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b1d6:	4a24      	ldr	r2, [pc, #144]	@ (800b268 <chk_lock+0xb4>)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	011b      	lsls	r3, r3, #4
 800b1dc:	4413      	add	r3, r2
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d116      	bne.n	800b216 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b1e8:	4a1f      	ldr	r2, [pc, #124]	@ (800b268 <chk_lock+0xb4>)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	011b      	lsls	r3, r3, #4
 800b1ee:	4413      	add	r3, r2
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d10c      	bne.n	800b216 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b1fc:	4a1a      	ldr	r2, [pc, #104]	@ (800b268 <chk_lock+0xb4>)
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	011b      	lsls	r3, r3, #4
 800b202:	4413      	add	r3, r2
 800b204:	3308      	adds	r3, #8
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d102      	bne.n	800b216 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b210:	e007      	b.n	800b222 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b212:	2301      	movs	r3, #1
 800b214:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3301      	adds	r3, #1
 800b21a:	60fb      	str	r3, [r7, #12]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d9d2      	bls.n	800b1c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2b02      	cmp	r3, #2
 800b226:	d109      	bne.n	800b23c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d102      	bne.n	800b234 <chk_lock+0x80>
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	2b02      	cmp	r3, #2
 800b232:	d101      	bne.n	800b238 <chk_lock+0x84>
 800b234:	2300      	movs	r3, #0
 800b236:	e010      	b.n	800b25a <chk_lock+0xa6>
 800b238:	2312      	movs	r3, #18
 800b23a:	e00e      	b.n	800b25a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d108      	bne.n	800b254 <chk_lock+0xa0>
 800b242:	4a09      	ldr	r2, [pc, #36]	@ (800b268 <chk_lock+0xb4>)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	011b      	lsls	r3, r3, #4
 800b248:	4413      	add	r3, r2
 800b24a:	330c      	adds	r3, #12
 800b24c:	881b      	ldrh	r3, [r3, #0]
 800b24e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b252:	d101      	bne.n	800b258 <chk_lock+0xa4>
 800b254:	2310      	movs	r3, #16
 800b256:	e000      	b.n	800b25a <chk_lock+0xa6>
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	200055fc 	.word	0x200055fc

0800b26c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b272:	2300      	movs	r3, #0
 800b274:	607b      	str	r3, [r7, #4]
 800b276:	e002      	b.n	800b27e <enq_lock+0x12>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	3301      	adds	r3, #1
 800b27c:	607b      	str	r3, [r7, #4]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d806      	bhi.n	800b292 <enq_lock+0x26>
 800b284:	4a09      	ldr	r2, [pc, #36]	@ (800b2ac <enq_lock+0x40>)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	011b      	lsls	r3, r3, #4
 800b28a:	4413      	add	r3, r2
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1f2      	bne.n	800b278 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2b02      	cmp	r3, #2
 800b296:	bf14      	ite	ne
 800b298:	2301      	movne	r3, #1
 800b29a:	2300      	moveq	r3, #0
 800b29c:	b2db      	uxtb	r3, r3
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	200055fc 	.word	0x200055fc

0800b2b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	60fb      	str	r3, [r7, #12]
 800b2be:	e01f      	b.n	800b300 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b2c0:	4a41      	ldr	r2, [pc, #260]	@ (800b3c8 <inc_lock+0x118>)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	011b      	lsls	r3, r3, #4
 800b2c6:	4413      	add	r3, r2
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d113      	bne.n	800b2fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b2d2:	4a3d      	ldr	r2, [pc, #244]	@ (800b3c8 <inc_lock+0x118>)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	011b      	lsls	r3, r3, #4
 800b2d8:	4413      	add	r3, r2
 800b2da:	3304      	adds	r3, #4
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d109      	bne.n	800b2fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b2e6:	4a38      	ldr	r2, [pc, #224]	@ (800b3c8 <inc_lock+0x118>)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	011b      	lsls	r3, r3, #4
 800b2ec:	4413      	add	r3, r2
 800b2ee:	3308      	adds	r3, #8
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d006      	beq.n	800b308 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	60fb      	str	r3, [r7, #12]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2b01      	cmp	r3, #1
 800b304:	d9dc      	bls.n	800b2c0 <inc_lock+0x10>
 800b306:	e000      	b.n	800b30a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b308:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d132      	bne.n	800b376 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b310:	2300      	movs	r3, #0
 800b312:	60fb      	str	r3, [r7, #12]
 800b314:	e002      	b.n	800b31c <inc_lock+0x6c>
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3301      	adds	r3, #1
 800b31a:	60fb      	str	r3, [r7, #12]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d806      	bhi.n	800b330 <inc_lock+0x80>
 800b322:	4a29      	ldr	r2, [pc, #164]	@ (800b3c8 <inc_lock+0x118>)
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	011b      	lsls	r3, r3, #4
 800b328:	4413      	add	r3, r2
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1f2      	bne.n	800b316 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2b02      	cmp	r3, #2
 800b334:	d101      	bne.n	800b33a <inc_lock+0x8a>
 800b336:	2300      	movs	r3, #0
 800b338:	e040      	b.n	800b3bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	4922      	ldr	r1, [pc, #136]	@ (800b3c8 <inc_lock+0x118>)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	011b      	lsls	r3, r3, #4
 800b344:	440b      	add	r3, r1
 800b346:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	689a      	ldr	r2, [r3, #8]
 800b34c:	491e      	ldr	r1, [pc, #120]	@ (800b3c8 <inc_lock+0x118>)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	011b      	lsls	r3, r3, #4
 800b352:	440b      	add	r3, r1
 800b354:	3304      	adds	r3, #4
 800b356:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	695a      	ldr	r2, [r3, #20]
 800b35c:	491a      	ldr	r1, [pc, #104]	@ (800b3c8 <inc_lock+0x118>)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	011b      	lsls	r3, r3, #4
 800b362:	440b      	add	r3, r1
 800b364:	3308      	adds	r3, #8
 800b366:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b368:	4a17      	ldr	r2, [pc, #92]	@ (800b3c8 <inc_lock+0x118>)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	011b      	lsls	r3, r3, #4
 800b36e:	4413      	add	r3, r2
 800b370:	330c      	adds	r3, #12
 800b372:	2200      	movs	r2, #0
 800b374:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d009      	beq.n	800b390 <inc_lock+0xe0>
 800b37c:	4a12      	ldr	r2, [pc, #72]	@ (800b3c8 <inc_lock+0x118>)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	011b      	lsls	r3, r3, #4
 800b382:	4413      	add	r3, r2
 800b384:	330c      	adds	r3, #12
 800b386:	881b      	ldrh	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <inc_lock+0xe0>
 800b38c:	2300      	movs	r3, #0
 800b38e:	e015      	b.n	800b3bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d108      	bne.n	800b3a8 <inc_lock+0xf8>
 800b396:	4a0c      	ldr	r2, [pc, #48]	@ (800b3c8 <inc_lock+0x118>)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	011b      	lsls	r3, r3, #4
 800b39c:	4413      	add	r3, r2
 800b39e:	330c      	adds	r3, #12
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	e001      	b.n	800b3ac <inc_lock+0xfc>
 800b3a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b3ac:	4906      	ldr	r1, [pc, #24]	@ (800b3c8 <inc_lock+0x118>)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	011b      	lsls	r3, r3, #4
 800b3b2:	440b      	add	r3, r1
 800b3b4:	330c      	adds	r3, #12
 800b3b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	3301      	adds	r3, #1
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr
 800b3c8:	200055fc 	.word	0x200055fc

0800b3cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	607b      	str	r3, [r7, #4]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d825      	bhi.n	800b42c <dec_lock+0x60>
		n = Files[i].ctr;
 800b3e0:	4a17      	ldr	r2, [pc, #92]	@ (800b440 <dec_lock+0x74>)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	011b      	lsls	r3, r3, #4
 800b3e6:	4413      	add	r3, r2
 800b3e8:	330c      	adds	r3, #12
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b3ee:	89fb      	ldrh	r3, [r7, #14]
 800b3f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3f4:	d101      	bne.n	800b3fa <dec_lock+0x2e>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b3fa:	89fb      	ldrh	r3, [r7, #14]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d002      	beq.n	800b406 <dec_lock+0x3a>
 800b400:	89fb      	ldrh	r3, [r7, #14]
 800b402:	3b01      	subs	r3, #1
 800b404:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b406:	4a0e      	ldr	r2, [pc, #56]	@ (800b440 <dec_lock+0x74>)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	011b      	lsls	r3, r3, #4
 800b40c:	4413      	add	r3, r2
 800b40e:	330c      	adds	r3, #12
 800b410:	89fa      	ldrh	r2, [r7, #14]
 800b412:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b414:	89fb      	ldrh	r3, [r7, #14]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d105      	bne.n	800b426 <dec_lock+0x5a>
 800b41a:	4a09      	ldr	r2, [pc, #36]	@ (800b440 <dec_lock+0x74>)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	011b      	lsls	r3, r3, #4
 800b420:	4413      	add	r3, r2
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b426:	2300      	movs	r3, #0
 800b428:	737b      	strb	r3, [r7, #13]
 800b42a:	e001      	b.n	800b430 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b42c:	2302      	movs	r3, #2
 800b42e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b430:	7b7b      	ldrb	r3, [r7, #13]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3714      	adds	r7, #20
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	200055fc 	.word	0x200055fc

0800b444 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b44c:	2300      	movs	r3, #0
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	e010      	b.n	800b474 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b452:	4a0d      	ldr	r2, [pc, #52]	@ (800b488 <clear_lock+0x44>)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	011b      	lsls	r3, r3, #4
 800b458:	4413      	add	r3, r2
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d105      	bne.n	800b46e <clear_lock+0x2a>
 800b462:	4a09      	ldr	r2, [pc, #36]	@ (800b488 <clear_lock+0x44>)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	011b      	lsls	r3, r3, #4
 800b468:	4413      	add	r3, r2
 800b46a:	2200      	movs	r2, #0
 800b46c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	3301      	adds	r3, #1
 800b472:	60fb      	str	r3, [r7, #12]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2b01      	cmp	r3, #1
 800b478:	d9eb      	bls.n	800b452 <clear_lock+0xe>
	}
}
 800b47a:	bf00      	nop
 800b47c:	bf00      	nop
 800b47e:	3714      	adds	r7, #20
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr
 800b488:	200055fc 	.word	0x200055fc

0800b48c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b086      	sub	sp, #24
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b494:	2300      	movs	r3, #0
 800b496:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	78db      	ldrb	r3, [r3, #3]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d034      	beq.n	800b50a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	7858      	ldrb	r0, [r3, #1]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	f7ff fd40 	bl	800af38 <disk_write>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	73fb      	strb	r3, [r7, #15]
 800b4c2:	e022      	b.n	800b50a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a1b      	ldr	r3, [r3, #32]
 800b4ce:	697a      	ldr	r2, [r7, #20]
 800b4d0:	1ad2      	subs	r2, r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	699b      	ldr	r3, [r3, #24]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d217      	bcs.n	800b50a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	789b      	ldrb	r3, [r3, #2]
 800b4de:	613b      	str	r3, [r7, #16]
 800b4e0:	e010      	b.n	800b504 <sync_window+0x78>
					wsect += fs->fsize;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	7858      	ldrb	r0, [r3, #1]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	697a      	ldr	r2, [r7, #20]
 800b4fa:	f7ff fd1d 	bl	800af38 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	3b01      	subs	r3, #1
 800b502:	613b      	str	r3, [r7, #16]
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	2b01      	cmp	r3, #1
 800b508:	d8eb      	bhi.n	800b4e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b50a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3718      	adds	r7, #24
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b51e:	2300      	movs	r3, #0
 800b520:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d01b      	beq.n	800b564 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7ff ffad 	bl	800b48c <sync_window>
 800b532:	4603      	mov	r3, r0
 800b534:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b536:	7bfb      	ldrb	r3, [r7, #15]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d113      	bne.n	800b564 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	7858      	ldrb	r0, [r3, #1]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b546:	2301      	movs	r3, #1
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	f7ff fcd5 	bl	800aef8 <disk_read>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d004      	beq.n	800b55e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b554:	f04f 33ff 	mov.w	r3, #4294967295
 800b558:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	683a      	ldr	r2, [r7, #0]
 800b562:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800b564:	7bfb      	ldrb	r3, [r7, #15]
}
 800b566:	4618      	mov	r0, r3
 800b568:	3710      	adds	r7, #16
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
	...

0800b570 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f7ff ff87 	bl	800b48c <sync_window>
 800b57e:	4603      	mov	r3, r0
 800b580:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b582:	7bfb      	ldrb	r3, [r7, #15]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d158      	bne.n	800b63a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	2b03      	cmp	r3, #3
 800b58e:	d148      	bne.n	800b622 <sync_fs+0xb2>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	791b      	ldrb	r3, [r3, #4]
 800b594:	2b01      	cmp	r3, #1
 800b596:	d144      	bne.n	800b622 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3330      	adds	r3, #48	@ 0x30
 800b59c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7ff fda9 	bl	800b0fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	3330      	adds	r3, #48	@ 0x30
 800b5ac:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b5b0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7ff fd38 	bl	800b02a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	3330      	adds	r3, #48	@ 0x30
 800b5be:	4921      	ldr	r1, [pc, #132]	@ (800b644 <sync_fs+0xd4>)
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7ff fd4d 	bl	800b060 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	3330      	adds	r3, #48	@ 0x30
 800b5ca:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b5ce:	491e      	ldr	r1, [pc, #120]	@ (800b648 <sync_fs+0xd8>)
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7ff fd45 	bl	800b060 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	3330      	adds	r3, #48	@ 0x30
 800b5da:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	4610      	mov	r0, r2
 800b5e6:	f7ff fd3b 	bl	800b060 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	3330      	adds	r3, #48	@ 0x30
 800b5ee:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	f7ff fd31 	bl	800b060 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	69db      	ldr	r3, [r3, #28]
 800b602:	1c5a      	adds	r2, r3, #1
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	7858      	ldrb	r0, [r3, #1]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b616:	2301      	movs	r3, #1
 800b618:	f7ff fc8e 	bl	800af38 <disk_write>
			fs->fsi_flag = 0;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	785b      	ldrb	r3, [r3, #1]
 800b626:	2200      	movs	r2, #0
 800b628:	2100      	movs	r1, #0
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7ff fca4 	bl	800af78 <disk_ioctl>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <sync_fs+0xca>
 800b636:	2301      	movs	r3, #1
 800b638:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	41615252 	.word	0x41615252
 800b648:	61417272 	.word	0x61417272

0800b64c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	3b02      	subs	r3, #2
 800b65a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	695b      	ldr	r3, [r3, #20]
 800b660:	3b02      	subs	r3, #2
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	429a      	cmp	r2, r3
 800b666:	d301      	bcc.n	800b66c <clust2sect+0x20>
 800b668:	2300      	movs	r3, #0
 800b66a:	e008      	b.n	800b67e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	895b      	ldrh	r3, [r3, #10]
 800b670:	461a      	mov	r2, r3
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	fb03 f202 	mul.w	r2, r3, r2
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b67c:	4413      	add	r3, r2
}
 800b67e:	4618      	mov	r0, r3
 800b680:	370c      	adds	r7, #12
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b086      	sub	sp, #24
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d904      	bls.n	800b6aa <get_fat+0x20>
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	695b      	ldr	r3, [r3, #20]
 800b6a4:	683a      	ldr	r2, [r7, #0]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d302      	bcc.n	800b6b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	617b      	str	r3, [r7, #20]
 800b6ae:	e08e      	b.n	800b7ce <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	2b03      	cmp	r3, #3
 800b6bc:	d061      	beq.n	800b782 <get_fat+0xf8>
 800b6be:	2b03      	cmp	r3, #3
 800b6c0:	dc7b      	bgt.n	800b7ba <get_fat+0x130>
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d002      	beq.n	800b6cc <get_fat+0x42>
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	d041      	beq.n	800b74e <get_fat+0xc4>
 800b6ca:	e076      	b.n	800b7ba <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	60fb      	str	r3, [r7, #12]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	085b      	lsrs	r3, r3, #1
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	6a1a      	ldr	r2, [r3, #32]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	0a5b      	lsrs	r3, r3, #9
 800b6e2:	4413      	add	r3, r2
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	6938      	ldr	r0, [r7, #16]
 800b6e8:	f7ff ff14 	bl	800b514 <move_window>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d166      	bne.n	800b7c0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	1c5a      	adds	r2, r3, #1
 800b6f6:	60fa      	str	r2, [r7, #12]
 800b6f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6fc:	693a      	ldr	r2, [r7, #16]
 800b6fe:	4413      	add	r3, r2
 800b700:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b704:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	6a1a      	ldr	r2, [r3, #32]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	0a5b      	lsrs	r3, r3, #9
 800b70e:	4413      	add	r3, r2
 800b710:	4619      	mov	r1, r3
 800b712:	6938      	ldr	r0, [r7, #16]
 800b714:	f7ff fefe 	bl	800b514 <move_window>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d152      	bne.n	800b7c4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	4413      	add	r3, r2
 800b728:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b72c:	021b      	lsls	r3, r3, #8
 800b72e:	68ba      	ldr	r2, [r7, #8]
 800b730:	4313      	orrs	r3, r2
 800b732:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	f003 0301 	and.w	r3, r3, #1
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d002      	beq.n	800b744 <get_fat+0xba>
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	091b      	lsrs	r3, r3, #4
 800b742:	e002      	b.n	800b74a <get_fat+0xc0>
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b74a:	617b      	str	r3, [r7, #20]
			break;
 800b74c:	e03f      	b.n	800b7ce <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	6a1a      	ldr	r2, [r3, #32]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	0a1b      	lsrs	r3, r3, #8
 800b756:	4413      	add	r3, r2
 800b758:	4619      	mov	r1, r3
 800b75a:	6938      	ldr	r0, [r7, #16]
 800b75c:	f7ff feda 	bl	800b514 <move_window>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d130      	bne.n	800b7c8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	005b      	lsls	r3, r3, #1
 800b770:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b774:	4413      	add	r3, r2
 800b776:	4618      	mov	r0, r3
 800b778:	f7ff fc1c 	bl	800afb4 <ld_word>
 800b77c:	4603      	mov	r3, r0
 800b77e:	617b      	str	r3, [r7, #20]
			break;
 800b780:	e025      	b.n	800b7ce <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	6a1a      	ldr	r2, [r3, #32]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	09db      	lsrs	r3, r3, #7
 800b78a:	4413      	add	r3, r2
 800b78c:	4619      	mov	r1, r3
 800b78e:	6938      	ldr	r0, [r7, #16]
 800b790:	f7ff fec0 	bl	800b514 <move_window>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d118      	bne.n	800b7cc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b7a8:	4413      	add	r3, r2
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7ff fc1a 	bl	800afe4 <ld_dword>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b7b6:	617b      	str	r3, [r7, #20]
			break;
 800b7b8:	e009      	b.n	800b7ce <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	617b      	str	r3, [r7, #20]
 800b7be:	e006      	b.n	800b7ce <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7c0:	bf00      	nop
 800b7c2:	e004      	b.n	800b7ce <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7c4:	bf00      	nop
 800b7c6:	e002      	b.n	800b7ce <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b7c8:	bf00      	nop
 800b7ca:	e000      	b.n	800b7ce <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b7cc:	bf00      	nop
		}
	}

	return val;
 800b7ce:	697b      	ldr	r3, [r7, #20]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3718      	adds	r7, #24
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b7d8:	b590      	push	{r4, r7, lr}
 800b7da:	b089      	sub	sp, #36	@ 0x24
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	f240 80d9 	bls.w	800b9a2 <put_fat+0x1ca>
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	695b      	ldr	r3, [r3, #20]
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	f080 80d3 	bcs.w	800b9a2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	2b03      	cmp	r3, #3
 800b802:	f000 8096 	beq.w	800b932 <put_fat+0x15a>
 800b806:	2b03      	cmp	r3, #3
 800b808:	f300 80cb 	bgt.w	800b9a2 <put_fat+0x1ca>
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d002      	beq.n	800b816 <put_fat+0x3e>
 800b810:	2b02      	cmp	r3, #2
 800b812:	d06e      	beq.n	800b8f2 <put_fat+0x11a>
 800b814:	e0c5      	b.n	800b9a2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	61bb      	str	r3, [r7, #24]
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	085b      	lsrs	r3, r3, #1
 800b81e:	69ba      	ldr	r2, [r7, #24]
 800b820:	4413      	add	r3, r2
 800b822:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6a1a      	ldr	r2, [r3, #32]
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	0a5b      	lsrs	r3, r3, #9
 800b82c:	4413      	add	r3, r2
 800b82e:	4619      	mov	r1, r3
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f7ff fe6f 	bl	800b514 <move_window>
 800b836:	4603      	mov	r3, r0
 800b838:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b83a:	7ffb      	ldrb	r3, [r7, #31]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f040 80a9 	bne.w	800b994 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	1c59      	adds	r1, r3, #1
 800b84c:	61b9      	str	r1, [r7, #24]
 800b84e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b852:	4413      	add	r3, r2
 800b854:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	f003 0301 	and.w	r3, r3, #1
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00d      	beq.n	800b87c <put_fat+0xa4>
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	b25b      	sxtb	r3, r3
 800b866:	f003 030f 	and.w	r3, r3, #15
 800b86a:	b25a      	sxtb	r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	011b      	lsls	r3, r3, #4
 800b872:	b25b      	sxtb	r3, r3
 800b874:	4313      	orrs	r3, r2
 800b876:	b25b      	sxtb	r3, r3
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	e001      	b.n	800b880 <put_fat+0xa8>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	697a      	ldr	r2, [r7, #20]
 800b882:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2201      	movs	r2, #1
 800b888:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6a1a      	ldr	r2, [r3, #32]
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	0a5b      	lsrs	r3, r3, #9
 800b892:	4413      	add	r3, r2
 800b894:	4619      	mov	r1, r3
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f7ff fe3c 	bl	800b514 <move_window>
 800b89c:	4603      	mov	r3, r0
 800b89e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b8a0:	7ffb      	ldrb	r3, [r7, #31]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d178      	bne.n	800b998 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8b2:	4413      	add	r3, r2
 800b8b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	f003 0301 	and.w	r3, r3, #1
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d003      	beq.n	800b8c8 <put_fat+0xf0>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	091b      	lsrs	r3, r3, #4
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	e00e      	b.n	800b8e6 <put_fat+0x10e>
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	b25b      	sxtb	r3, r3
 800b8ce:	f023 030f 	bic.w	r3, r3, #15
 800b8d2:	b25a      	sxtb	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	0a1b      	lsrs	r3, r3, #8
 800b8d8:	b25b      	sxtb	r3, r3
 800b8da:	f003 030f 	and.w	r3, r3, #15
 800b8de:	b25b      	sxtb	r3, r3
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	b25b      	sxtb	r3, r3
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	70da      	strb	r2, [r3, #3]
			break;
 800b8f0:	e057      	b.n	800b9a2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6a1a      	ldr	r2, [r3, #32]
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	0a1b      	lsrs	r3, r3, #8
 800b8fa:	4413      	add	r3, r2
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f7ff fe08 	bl	800b514 <move_window>
 800b904:	4603      	mov	r3, r0
 800b906:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b908:	7ffb      	ldrb	r3, [r7, #31]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d146      	bne.n	800b99c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	005b      	lsls	r3, r3, #1
 800b918:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b91c:	4413      	add	r3, r2
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	b292      	uxth	r2, r2
 800b922:	4611      	mov	r1, r2
 800b924:	4618      	mov	r0, r3
 800b926:	f7ff fb80 	bl	800b02a <st_word>
			fs->wflag = 1;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2201      	movs	r2, #1
 800b92e:	70da      	strb	r2, [r3, #3]
			break;
 800b930:	e037      	b.n	800b9a2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6a1a      	ldr	r2, [r3, #32]
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	09db      	lsrs	r3, r3, #7
 800b93a:	4413      	add	r3, r2
 800b93c:	4619      	mov	r1, r3
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f7ff fde8 	bl	800b514 <move_window>
 800b944:	4603      	mov	r3, r0
 800b946:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b948:	7ffb      	ldrb	r3, [r7, #31]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d128      	bne.n	800b9a0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b962:	4413      	add	r3, r2
 800b964:	4618      	mov	r0, r3
 800b966:	f7ff fb3d 	bl	800afe4 <ld_dword>
 800b96a:	4603      	mov	r3, r0
 800b96c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b970:	4323      	orrs	r3, r4
 800b972:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b982:	4413      	add	r3, r2
 800b984:	6879      	ldr	r1, [r7, #4]
 800b986:	4618      	mov	r0, r3
 800b988:	f7ff fb6a 	bl	800b060 <st_dword>
			fs->wflag = 1;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2201      	movs	r2, #1
 800b990:	70da      	strb	r2, [r3, #3]
			break;
 800b992:	e006      	b.n	800b9a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b994:	bf00      	nop
 800b996:	e004      	b.n	800b9a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b998:	bf00      	nop
 800b99a:	e002      	b.n	800b9a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b99c:	bf00      	nop
 800b99e:	e000      	b.n	800b9a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b9a0:	bf00      	nop
		}
	}
	return res;
 800b9a2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3724      	adds	r7, #36	@ 0x24
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd90      	pop	{r4, r7, pc}

0800b9ac <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b088      	sub	sp, #32
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d904      	bls.n	800b9d2 <remove_chain+0x26>
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	695b      	ldr	r3, [r3, #20]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d301      	bcc.n	800b9d6 <remove_chain+0x2a>
 800b9d2:	2302      	movs	r3, #2
 800b9d4:	e04b      	b.n	800ba6e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d00c      	beq.n	800b9f6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b9dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9e0:	6879      	ldr	r1, [r7, #4]
 800b9e2:	69b8      	ldr	r0, [r7, #24]
 800b9e4:	f7ff fef8 	bl	800b7d8 <put_fat>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b9ec:	7ffb      	ldrb	r3, [r7, #31]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d001      	beq.n	800b9f6 <remove_chain+0x4a>
 800b9f2:	7ffb      	ldrb	r3, [r7, #31]
 800b9f4:	e03b      	b.n	800ba6e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b9f6:	68b9      	ldr	r1, [r7, #8]
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f7ff fe46 	bl	800b68a <get_fat>
 800b9fe:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d031      	beq.n	800ba6a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d101      	bne.n	800ba10 <remove_chain+0x64>
 800ba0c:	2302      	movs	r3, #2
 800ba0e:	e02e      	b.n	800ba6e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba16:	d101      	bne.n	800ba1c <remove_chain+0x70>
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e028      	b.n	800ba6e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	68b9      	ldr	r1, [r7, #8]
 800ba20:	69b8      	ldr	r0, [r7, #24]
 800ba22:	f7ff fed9 	bl	800b7d8 <put_fat>
 800ba26:	4603      	mov	r3, r0
 800ba28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ba2a:	7ffb      	ldrb	r3, [r7, #31]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <remove_chain+0x88>
 800ba30:	7ffb      	ldrb	r3, [r7, #31]
 800ba32:	e01c      	b.n	800ba6e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	691a      	ldr	r2, [r3, #16]
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	3b02      	subs	r3, #2
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d20b      	bcs.n	800ba5a <remove_chain+0xae>
			fs->free_clst++;
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	1c5a      	adds	r2, r3, #1
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	791b      	ldrb	r3, [r3, #4]
 800ba50:	f043 0301 	orr.w	r3, r3, #1
 800ba54:	b2da      	uxtb	r2, r3
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	695b      	ldr	r3, [r3, #20]
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d3c6      	bcc.n	800b9f6 <remove_chain+0x4a>
 800ba68:	e000      	b.n	800ba6c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ba6a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3720      	adds	r7, #32
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b088      	sub	sp, #32
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10d      	bne.n	800baa8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d004      	beq.n	800baa2 <create_chain+0x2c>
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	695b      	ldr	r3, [r3, #20]
 800ba9c:	69ba      	ldr	r2, [r7, #24]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d31b      	bcc.n	800bada <create_chain+0x64>
 800baa2:	2301      	movs	r3, #1
 800baa4:	61bb      	str	r3, [r7, #24]
 800baa6:	e018      	b.n	800bada <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800baa8:	6839      	ldr	r1, [r7, #0]
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7ff fded 	bl	800b68a <get_fat>
 800bab0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d801      	bhi.n	800babc <create_chain+0x46>
 800bab8:	2301      	movs	r3, #1
 800baba:	e070      	b.n	800bb9e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac2:	d101      	bne.n	800bac8 <create_chain+0x52>
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	e06a      	b.n	800bb9e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	695b      	ldr	r3, [r3, #20]
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d201      	bcs.n	800bad6 <create_chain+0x60>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	e063      	b.n	800bb9e <create_chain+0x128>
		scl = clst;
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	3301      	adds	r3, #1
 800bae2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	695b      	ldr	r3, [r3, #20]
 800bae8:	69fa      	ldr	r2, [r7, #28]
 800baea:	429a      	cmp	r2, r3
 800baec:	d307      	bcc.n	800bafe <create_chain+0x88>
				ncl = 2;
 800baee:	2302      	movs	r3, #2
 800baf0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800baf2:	69fa      	ldr	r2, [r7, #28]
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d901      	bls.n	800bafe <create_chain+0x88>
 800bafa:	2300      	movs	r3, #0
 800bafc:	e04f      	b.n	800bb9e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bafe:	69f9      	ldr	r1, [r7, #28]
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f7ff fdc2 	bl	800b68a <get_fat>
 800bb06:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00e      	beq.n	800bb2c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d003      	beq.n	800bb1c <create_chain+0xa6>
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1a:	d101      	bne.n	800bb20 <create_chain+0xaa>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	e03e      	b.n	800bb9e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bb20:	69fa      	ldr	r2, [r7, #28]
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d1da      	bne.n	800bade <create_chain+0x68>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	e038      	b.n	800bb9e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bb2c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bb2e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb32:	69f9      	ldr	r1, [r7, #28]
 800bb34:	6938      	ldr	r0, [r7, #16]
 800bb36:	f7ff fe4f 	bl	800b7d8 <put_fat>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d109      	bne.n	800bb58 <create_chain+0xe2>
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d006      	beq.n	800bb58 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bb4a:	69fa      	ldr	r2, [r7, #28]
 800bb4c:	6839      	ldr	r1, [r7, #0]
 800bb4e:	6938      	ldr	r0, [r7, #16]
 800bb50:	f7ff fe42 	bl	800b7d8 <put_fat>
 800bb54:	4603      	mov	r3, r0
 800bb56:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bb58:	7dfb      	ldrb	r3, [r7, #23]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d116      	bne.n	800bb8c <create_chain+0x116>
		fs->last_clst = ncl;
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	69fa      	ldr	r2, [r7, #28]
 800bb62:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	691a      	ldr	r2, [r3, #16]
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	695b      	ldr	r3, [r3, #20]
 800bb6c:	3b02      	subs	r3, #2
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d804      	bhi.n	800bb7c <create_chain+0x106>
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	1e5a      	subs	r2, r3, #1
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	791b      	ldrb	r3, [r3, #4]
 800bb80:	f043 0301 	orr.w	r3, r3, #1
 800bb84:	b2da      	uxtb	r2, r3
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	711a      	strb	r2, [r3, #4]
 800bb8a:	e007      	b.n	800bb9c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bb8c:	7dfb      	ldrb	r3, [r7, #23]
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d102      	bne.n	800bb98 <create_chain+0x122>
 800bb92:	f04f 33ff 	mov.w	r3, #4294967295
 800bb96:	e000      	b.n	800bb9a <create_chain+0x124>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bb9c:	69fb      	ldr	r3, [r7, #28]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3720      	adds	r7, #32
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bba6:	b480      	push	{r7}
 800bba8:	b087      	sub	sp, #28
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbba:	3304      	adds	r3, #4
 800bbbc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	0a5b      	lsrs	r3, r3, #9
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	8952      	ldrh	r2, [r2, #10]
 800bbc6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	1d1a      	adds	r2, r3, #4
 800bbd0:	613a      	str	r2, [r7, #16]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d101      	bne.n	800bbe0 <clmt_clust+0x3a>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	e010      	b.n	800bc02 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bbe0:	697a      	ldr	r2, [r7, #20]
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d307      	bcc.n	800bbf8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bbe8:	697a      	ldr	r2, [r7, #20]
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	617b      	str	r3, [r7, #20]
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	3304      	adds	r3, #4
 800bbf4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bbf6:	e7e9      	b.n	800bbcc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bbf8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	4413      	add	r3, r2
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	371c      	adds	r7, #28
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b086      	sub	sp, #24
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc24:	d204      	bcs.n	800bc30 <dir_sdi+0x22>
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	f003 031f 	and.w	r3, r3, #31
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d001      	beq.n	800bc34 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bc30:	2302      	movs	r3, #2
 800bc32:	e063      	b.n	800bcfc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d106      	bne.n	800bc54 <dir_sdi+0x46>
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	d902      	bls.n	800bc54 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc52:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10c      	bne.n	800bc74 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	095b      	lsrs	r3, r3, #5
 800bc5e:	693a      	ldr	r2, [r7, #16]
 800bc60:	8912      	ldrh	r2, [r2, #8]
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d301      	bcc.n	800bc6a <dir_sdi+0x5c>
 800bc66:	2302      	movs	r3, #2
 800bc68:	e048      	b.n	800bcfc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	61da      	str	r2, [r3, #28]
 800bc72:	e029      	b.n	800bcc8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	895b      	ldrh	r3, [r3, #10]
 800bc78:	025b      	lsls	r3, r3, #9
 800bc7a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bc7c:	e019      	b.n	800bcb2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6979      	ldr	r1, [r7, #20]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff fd01 	bl	800b68a <get_fat>
 800bc88:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc90:	d101      	bne.n	800bc96 <dir_sdi+0x88>
 800bc92:	2301      	movs	r3, #1
 800bc94:	e032      	b.n	800bcfc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d904      	bls.n	800bca6 <dir_sdi+0x98>
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	695b      	ldr	r3, [r3, #20]
 800bca0:	697a      	ldr	r2, [r7, #20]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d301      	bcc.n	800bcaa <dir_sdi+0x9c>
 800bca6:	2302      	movs	r3, #2
 800bca8:	e028      	b.n	800bcfc <dir_sdi+0xee>
			ofs -= csz;
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bcb2:	683a      	ldr	r2, [r7, #0]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d2e1      	bcs.n	800bc7e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800bcba:	6979      	ldr	r1, [r7, #20]
 800bcbc:	6938      	ldr	r0, [r7, #16]
 800bcbe:	f7ff fcc5 	bl	800b64c <clust2sect>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	697a      	ldr	r2, [r7, #20]
 800bccc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d101      	bne.n	800bcda <dir_sdi+0xcc>
 800bcd6:	2302      	movs	r3, #2
 800bcd8:	e010      	b.n	800bcfc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	69da      	ldr	r2, [r3, #28]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	0a5b      	lsrs	r3, r3, #9
 800bce2:	441a      	add	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcf4:	441a      	add	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bcfa:	2300      	movs	r3, #0
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3718      	adds	r7, #24
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	695b      	ldr	r3, [r3, #20]
 800bd18:	3320      	adds	r3, #32
 800bd1a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	69db      	ldr	r3, [r3, #28]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d003      	beq.n	800bd2c <dir_next+0x28>
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd2a:	d301      	bcc.n	800bd30 <dir_next+0x2c>
 800bd2c:	2304      	movs	r3, #4
 800bd2e:	e0aa      	b.n	800be86 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f040 8098 	bne.w	800be6c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	69db      	ldr	r3, [r3, #28]
 800bd40:	1c5a      	adds	r2, r3, #1
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10b      	bne.n	800bd66 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	095b      	lsrs	r3, r3, #5
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	8912      	ldrh	r2, [r2, #8]
 800bd56:	4293      	cmp	r3, r2
 800bd58:	f0c0 8088 	bcc.w	800be6c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	61da      	str	r2, [r3, #28]
 800bd62:	2304      	movs	r3, #4
 800bd64:	e08f      	b.n	800be86 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	0a5b      	lsrs	r3, r3, #9
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	8952      	ldrh	r2, [r2, #10]
 800bd6e:	3a01      	subs	r2, #1
 800bd70:	4013      	ands	r3, r2
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d17a      	bne.n	800be6c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	699b      	ldr	r3, [r3, #24]
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	4610      	mov	r0, r2
 800bd80:	f7ff fc83 	bl	800b68a <get_fat>
 800bd84:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d801      	bhi.n	800bd90 <dir_next+0x8c>
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	e07a      	b.n	800be86 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd96:	d101      	bne.n	800bd9c <dir_next+0x98>
 800bd98:	2301      	movs	r3, #1
 800bd9a:	e074      	b.n	800be86 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	695b      	ldr	r3, [r3, #20]
 800bda0:	697a      	ldr	r2, [r7, #20]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d358      	bcc.n	800be58 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d104      	bne.n	800bdb6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	61da      	str	r2, [r3, #28]
 800bdb2:	2304      	movs	r3, #4
 800bdb4:	e067      	b.n	800be86 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	699b      	ldr	r3, [r3, #24]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	4610      	mov	r0, r2
 800bdc0:	f7ff fe59 	bl	800ba76 <create_chain>
 800bdc4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d101      	bne.n	800bdd0 <dir_next+0xcc>
 800bdcc:	2307      	movs	r3, #7
 800bdce:	e05a      	b.n	800be86 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d101      	bne.n	800bdda <dir_next+0xd6>
 800bdd6:	2302      	movs	r3, #2
 800bdd8:	e055      	b.n	800be86 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde0:	d101      	bne.n	800bde6 <dir_next+0xe2>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e04f      	b.n	800be86 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f7ff fb50 	bl	800b48c <sync_window>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d001      	beq.n	800bdf6 <dir_next+0xf2>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e047      	b.n	800be86 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	3330      	adds	r3, #48	@ 0x30
 800bdfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bdfe:	2100      	movs	r1, #0
 800be00:	4618      	mov	r0, r3
 800be02:	f7ff f97a 	bl	800b0fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800be06:	2300      	movs	r3, #0
 800be08:	613b      	str	r3, [r7, #16]
 800be0a:	6979      	ldr	r1, [r7, #20]
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f7ff fc1d 	bl	800b64c <clust2sect>
 800be12:	4602      	mov	r2, r0
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	62da      	str	r2, [r3, #44]	@ 0x2c
 800be18:	e012      	b.n	800be40 <dir_next+0x13c>
						fs->wflag = 1;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2201      	movs	r2, #1
 800be1e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f7ff fb33 	bl	800b48c <sync_window>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d001      	beq.n	800be30 <dir_next+0x12c>
 800be2c:	2301      	movs	r3, #1
 800be2e:	e02a      	b.n	800be86 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	3301      	adds	r3, #1
 800be34:	613b      	str	r3, [r7, #16]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be3a:	1c5a      	adds	r2, r3, #1
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	895b      	ldrh	r3, [r3, #10]
 800be44:	461a      	mov	r2, r3
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	4293      	cmp	r3, r2
 800be4a:	d3e6      	bcc.n	800be1a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	1ad2      	subs	r2, r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	697a      	ldr	r2, [r7, #20]
 800be5c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800be5e:	6979      	ldr	r1, [r7, #20]
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f7ff fbf3 	bl	800b64c <clust2sect>
 800be66:	4602      	mov	r2, r0
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	68ba      	ldr	r2, [r7, #8]
 800be70:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be7e:	441a      	add	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b086      	sub	sp, #24
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800be9e:	2100      	movs	r1, #0
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f7ff feb4 	bl	800bc0e <dir_sdi>
 800bea6:	4603      	mov	r3, r0
 800bea8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800beaa:	7dfb      	ldrb	r3, [r7, #23]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d12b      	bne.n	800bf08 <dir_alloc+0x7a>
		n = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	69db      	ldr	r3, [r3, #28]
 800beb8:	4619      	mov	r1, r3
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f7ff fb2a 	bl	800b514 <move_window>
 800bec0:	4603      	mov	r3, r0
 800bec2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bec4:	7dfb      	ldrb	r3, [r7, #23]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d11d      	bne.n	800bf06 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a1b      	ldr	r3, [r3, #32]
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	2be5      	cmp	r3, #229	@ 0xe5
 800bed2:	d004      	beq.n	800bede <dir_alloc+0x50>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6a1b      	ldr	r3, [r3, #32]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d107      	bne.n	800beee <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	3301      	adds	r3, #1
 800bee2:	613b      	str	r3, [r7, #16]
 800bee4:	693a      	ldr	r2, [r7, #16]
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d102      	bne.n	800bef2 <dir_alloc+0x64>
 800beec:	e00c      	b.n	800bf08 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800beee:	2300      	movs	r3, #0
 800bef0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bef2:	2101      	movs	r1, #1
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7ff ff05 	bl	800bd04 <dir_next>
 800befa:	4603      	mov	r3, r0
 800befc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800befe:	7dfb      	ldrb	r3, [r7, #23]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d0d7      	beq.n	800beb4 <dir_alloc+0x26>
 800bf04:	e000      	b.n	800bf08 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bf06:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bf08:	7dfb      	ldrb	r3, [r7, #23]
 800bf0a:	2b04      	cmp	r3, #4
 800bf0c:	d101      	bne.n	800bf12 <dir_alloc+0x84>
 800bf0e:	2307      	movs	r3, #7
 800bf10:	75fb      	strb	r3, [r7, #23]
	return res;
 800bf12:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3718      	adds	r7, #24
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	331a      	adds	r3, #26
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7ff f842 	bl	800afb4 <ld_word>
 800bf30:	4603      	mov	r3, r0
 800bf32:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	2b03      	cmp	r3, #3
 800bf3a:	d109      	bne.n	800bf50 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	3314      	adds	r3, #20
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7ff f837 	bl	800afb4 <ld_word>
 800bf46:	4603      	mov	r3, r0
 800bf48:	041b      	lsls	r3, r3, #16
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bf50:	68fb      	ldr	r3, [r7, #12]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b084      	sub	sp, #16
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	60f8      	str	r0, [r7, #12]
 800bf62:	60b9      	str	r1, [r7, #8]
 800bf64:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	331a      	adds	r3, #26
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	b292      	uxth	r2, r2
 800bf6e:	4611      	mov	r1, r2
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7ff f85a 	bl	800b02a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	2b03      	cmp	r3, #3
 800bf7c:	d109      	bne.n	800bf92 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	f103 0214 	add.w	r2, r3, #20
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	0c1b      	lsrs	r3, r3, #16
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	4610      	mov	r0, r2
 800bf8e:	f7ff f84c 	bl	800b02a <st_word>
	}
}
 800bf92:	bf00      	nop
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b086      	sub	sp, #24
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f7ff fe2f 	bl	800bc0e <dir_sdi>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bfb4:	7dfb      	ldrb	r3, [r7, #23]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d001      	beq.n	800bfbe <dir_find+0x24>
 800bfba:	7dfb      	ldrb	r3, [r7, #23]
 800bfbc:	e03e      	b.n	800c03c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	69db      	ldr	r3, [r3, #28]
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	6938      	ldr	r0, [r7, #16]
 800bfc6:	f7ff faa5 	bl	800b514 <move_window>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bfce:	7dfb      	ldrb	r3, [r7, #23]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d12f      	bne.n	800c034 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6a1b      	ldr	r3, [r3, #32]
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bfdc:	7bfb      	ldrb	r3, [r7, #15]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d102      	bne.n	800bfe8 <dir_find+0x4e>
 800bfe2:	2304      	movs	r3, #4
 800bfe4:	75fb      	strb	r3, [r7, #23]
 800bfe6:	e028      	b.n	800c03a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6a1b      	ldr	r3, [r3, #32]
 800bfec:	330b      	adds	r3, #11
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bff4:	b2da      	uxtb	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	330b      	adds	r3, #11
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	f003 0308 	and.w	r3, r3, #8
 800c006:	2b00      	cmp	r3, #0
 800c008:	d10a      	bne.n	800c020 <dir_find+0x86>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a18      	ldr	r0, [r3, #32]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	3324      	adds	r3, #36	@ 0x24
 800c012:	220b      	movs	r2, #11
 800c014:	4619      	mov	r1, r3
 800c016:	f7ff f88b 	bl	800b130 <mem_cmp>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00b      	beq.n	800c038 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c020:	2100      	movs	r1, #0
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f7ff fe6e 	bl	800bd04 <dir_next>
 800c028:	4603      	mov	r3, r0
 800c02a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c02c:	7dfb      	ldrb	r3, [r7, #23]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d0c5      	beq.n	800bfbe <dir_find+0x24>
 800c032:	e002      	b.n	800c03a <dir_find+0xa0>
		if (res != FR_OK) break;
 800c034:	bf00      	nop
 800c036:	e000      	b.n	800c03a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c038:	bf00      	nop

	return res;
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3718      	adds	r7, #24
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c052:	2101      	movs	r1, #1
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f7ff ff1a 	bl	800be8e <dir_alloc>
 800c05a:	4603      	mov	r3, r0
 800c05c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c05e:	7bfb      	ldrb	r3, [r7, #15]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d11c      	bne.n	800c09e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	69db      	ldr	r3, [r3, #28]
 800c068:	4619      	mov	r1, r3
 800c06a:	68b8      	ldr	r0, [r7, #8]
 800c06c:	f7ff fa52 	bl	800b514 <move_window>
 800c070:	4603      	mov	r3, r0
 800c072:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c074:	7bfb      	ldrb	r3, [r7, #15]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d111      	bne.n	800c09e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	2220      	movs	r2, #32
 800c080:	2100      	movs	r1, #0
 800c082:	4618      	mov	r0, r3
 800c084:	f7ff f839 	bl	800b0fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a18      	ldr	r0, [r3, #32]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	3324      	adds	r3, #36	@ 0x24
 800c090:	220b      	movs	r2, #11
 800c092:	4619      	mov	r1, r3
 800c094:	f7ff f810 	bl	800b0b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	2201      	movs	r2, #1
 800c09c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b088      	sub	sp, #32
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	60fb      	str	r3, [r7, #12]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	3324      	adds	r3, #36	@ 0x24
 800c0bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c0be:	220b      	movs	r2, #11
 800c0c0:	2120      	movs	r1, #32
 800c0c2:	68b8      	ldr	r0, [r7, #8]
 800c0c4:	f7ff f819 	bl	800b0fa <mem_set>
	si = i = 0; ni = 8;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	613b      	str	r3, [r7, #16]
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	61fb      	str	r3, [r7, #28]
 800c0d0:	2308      	movs	r3, #8
 800c0d2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	1c5a      	adds	r2, r3, #1
 800c0d8:	61fa      	str	r2, [r7, #28]
 800c0da:	68fa      	ldr	r2, [r7, #12]
 800c0dc:	4413      	add	r3, r2
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c0e2:	7efb      	ldrb	r3, [r7, #27]
 800c0e4:	2b20      	cmp	r3, #32
 800c0e6:	d94e      	bls.n	800c186 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c0e8:	7efb      	ldrb	r3, [r7, #27]
 800c0ea:	2b2f      	cmp	r3, #47	@ 0x2f
 800c0ec:	d006      	beq.n	800c0fc <create_name+0x54>
 800c0ee:	7efb      	ldrb	r3, [r7, #27]
 800c0f0:	2b5c      	cmp	r3, #92	@ 0x5c
 800c0f2:	d110      	bne.n	800c116 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c0f4:	e002      	b.n	800c0fc <create_name+0x54>
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	61fb      	str	r3, [r7, #28]
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	69fb      	ldr	r3, [r7, #28]
 800c100:	4413      	add	r3, r2
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	2b2f      	cmp	r3, #47	@ 0x2f
 800c106:	d0f6      	beq.n	800c0f6 <create_name+0x4e>
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	4413      	add	r3, r2
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	2b5c      	cmp	r3, #92	@ 0x5c
 800c112:	d0f0      	beq.n	800c0f6 <create_name+0x4e>
			break;
 800c114:	e038      	b.n	800c188 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c116:	7efb      	ldrb	r3, [r7, #27]
 800c118:	2b2e      	cmp	r3, #46	@ 0x2e
 800c11a:	d003      	beq.n	800c124 <create_name+0x7c>
 800c11c:	693a      	ldr	r2, [r7, #16]
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	429a      	cmp	r2, r3
 800c122:	d30c      	bcc.n	800c13e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	2b0b      	cmp	r3, #11
 800c128:	d002      	beq.n	800c130 <create_name+0x88>
 800c12a:	7efb      	ldrb	r3, [r7, #27]
 800c12c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c12e:	d001      	beq.n	800c134 <create_name+0x8c>
 800c130:	2306      	movs	r3, #6
 800c132:	e044      	b.n	800c1be <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c134:	2308      	movs	r3, #8
 800c136:	613b      	str	r3, [r7, #16]
 800c138:	230b      	movs	r3, #11
 800c13a:	617b      	str	r3, [r7, #20]
			continue;
 800c13c:	e022      	b.n	800c184 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c13e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c142:	2b00      	cmp	r3, #0
 800c144:	da04      	bge.n	800c150 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c146:	7efb      	ldrb	r3, [r7, #27]
 800c148:	3b80      	subs	r3, #128	@ 0x80
 800c14a:	4a1f      	ldr	r2, [pc, #124]	@ (800c1c8 <create_name+0x120>)
 800c14c:	5cd3      	ldrb	r3, [r2, r3]
 800c14e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c150:	7efb      	ldrb	r3, [r7, #27]
 800c152:	4619      	mov	r1, r3
 800c154:	481d      	ldr	r0, [pc, #116]	@ (800c1cc <create_name+0x124>)
 800c156:	f7ff f812 	bl	800b17e <chk_chr>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <create_name+0xbc>
 800c160:	2306      	movs	r3, #6
 800c162:	e02c      	b.n	800c1be <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c164:	7efb      	ldrb	r3, [r7, #27]
 800c166:	2b60      	cmp	r3, #96	@ 0x60
 800c168:	d905      	bls.n	800c176 <create_name+0xce>
 800c16a:	7efb      	ldrb	r3, [r7, #27]
 800c16c:	2b7a      	cmp	r3, #122	@ 0x7a
 800c16e:	d802      	bhi.n	800c176 <create_name+0xce>
 800c170:	7efb      	ldrb	r3, [r7, #27]
 800c172:	3b20      	subs	r3, #32
 800c174:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	1c5a      	adds	r2, r3, #1
 800c17a:	613a      	str	r2, [r7, #16]
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	4413      	add	r3, r2
 800c180:	7efa      	ldrb	r2, [r7, #27]
 800c182:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c184:	e7a6      	b.n	800c0d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c186:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	441a      	add	r2, r3
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d101      	bne.n	800c19c <create_name+0xf4>
 800c198:	2306      	movs	r3, #6
 800c19a:	e010      	b.n	800c1be <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	2be5      	cmp	r3, #229	@ 0xe5
 800c1a2:	d102      	bne.n	800c1aa <create_name+0x102>
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	2205      	movs	r2, #5
 800c1a8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c1aa:	7efb      	ldrb	r3, [r7, #27]
 800c1ac:	2b20      	cmp	r3, #32
 800c1ae:	d801      	bhi.n	800c1b4 <create_name+0x10c>
 800c1b0:	2204      	movs	r2, #4
 800c1b2:	e000      	b.n	800c1b6 <create_name+0x10e>
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	330b      	adds	r3, #11
 800c1ba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c1bc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3720      	adds	r7, #32
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	08010edc 	.word	0x08010edc
 800c1cc:	08010e64 	.word	0x08010e64

0800c1d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c1e4:	e002      	b.n	800c1ec <follow_path+0x1c>
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	603b      	str	r3, [r7, #0]
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	2b2f      	cmp	r3, #47	@ 0x2f
 800c1f2:	d0f8      	beq.n	800c1e6 <follow_path+0x16>
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	2b5c      	cmp	r3, #92	@ 0x5c
 800c1fa:	d0f4      	beq.n	800c1e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	2200      	movs	r2, #0
 800c200:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	2b1f      	cmp	r3, #31
 800c208:	d80a      	bhi.n	800c220 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2280      	movs	r2, #128	@ 0x80
 800c20e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c212:	2100      	movs	r1, #0
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f7ff fcfa 	bl	800bc0e <dir_sdi>
 800c21a:	4603      	mov	r3, r0
 800c21c:	75fb      	strb	r3, [r7, #23]
 800c21e:	e043      	b.n	800c2a8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c220:	463b      	mov	r3, r7
 800c222:	4619      	mov	r1, r3
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f7ff ff3f 	bl	800c0a8 <create_name>
 800c22a:	4603      	mov	r3, r0
 800c22c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d134      	bne.n	800c29e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f7ff feb0 	bl	800bf9a <dir_find>
 800c23a:	4603      	mov	r3, r0
 800c23c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c244:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c246:	7dfb      	ldrb	r3, [r7, #23]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00a      	beq.n	800c262 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c24c:	7dfb      	ldrb	r3, [r7, #23]
 800c24e:	2b04      	cmp	r3, #4
 800c250:	d127      	bne.n	800c2a2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c252:	7afb      	ldrb	r3, [r7, #11]
 800c254:	f003 0304 	and.w	r3, r3, #4
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d122      	bne.n	800c2a2 <follow_path+0xd2>
 800c25c:	2305      	movs	r3, #5
 800c25e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c260:	e01f      	b.n	800c2a2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c262:	7afb      	ldrb	r3, [r7, #11]
 800c264:	f003 0304 	and.w	r3, r3, #4
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d11c      	bne.n	800c2a6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	799b      	ldrb	r3, [r3, #6]
 800c270:	f003 0310 	and.w	r3, r3, #16
 800c274:	2b00      	cmp	r3, #0
 800c276:	d102      	bne.n	800c27e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c278:	2305      	movs	r3, #5
 800c27a:	75fb      	strb	r3, [r7, #23]
 800c27c:	e014      	b.n	800c2a8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	695b      	ldr	r3, [r3, #20]
 800c288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c28c:	4413      	add	r3, r2
 800c28e:	4619      	mov	r1, r3
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	f7ff fe43 	bl	800bf1c <ld_clust>
 800c296:	4602      	mov	r2, r0
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c29c:	e7c0      	b.n	800c220 <follow_path+0x50>
			if (res != FR_OK) break;
 800c29e:	bf00      	nop
 800c2a0:	e002      	b.n	800c2a8 <follow_path+0xd8>
				break;
 800c2a2:	bf00      	nop
 800c2a4:	e000      	b.n	800c2a8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c2a6:	bf00      	nop
			}
		}
	}

	return res;
 800c2a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3718      	adds	r7, #24
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c2b2:	b480      	push	{r7}
 800c2b4:	b087      	sub	sp, #28
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c2be:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d031      	beq.n	800c32c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	617b      	str	r3, [r7, #20]
 800c2ce:	e002      	b.n	800c2d6 <get_ldnumber+0x24>
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	617b      	str	r3, [r7, #20]
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	2b20      	cmp	r3, #32
 800c2dc:	d903      	bls.n	800c2e6 <get_ldnumber+0x34>
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	2b3a      	cmp	r3, #58	@ 0x3a
 800c2e4:	d1f4      	bne.n	800c2d0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	2b3a      	cmp	r3, #58	@ 0x3a
 800c2ec:	d11c      	bne.n	800c328 <get_ldnumber+0x76>
			tp = *path;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	1c5a      	adds	r2, r3, #1
 800c2f8:	60fa      	str	r2, [r7, #12]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	3b30      	subs	r3, #48	@ 0x30
 800c2fe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	2b09      	cmp	r3, #9
 800c304:	d80e      	bhi.n	800c324 <get_ldnumber+0x72>
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d10a      	bne.n	800c324 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d107      	bne.n	800c324 <get_ldnumber+0x72>
					vol = (int)i;
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	3301      	adds	r3, #1
 800c31c:	617b      	str	r3, [r7, #20]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	e002      	b.n	800c32e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c328:	2300      	movs	r3, #0
 800c32a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c32c:	693b      	ldr	r3, [r7, #16]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	371c      	adds	r7, #28
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr
	...

0800c33c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	70da      	strb	r2, [r3, #3]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f04f 32ff 	mov.w	r2, #4294967295
 800c352:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7ff f8dc 	bl	800b514 <move_window>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <check_fs+0x2a>
 800c362:	2304      	movs	r3, #4
 800c364:	e038      	b.n	800c3d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	3330      	adds	r3, #48	@ 0x30
 800c36a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fe fe20 	bl	800afb4 <ld_word>
 800c374:	4603      	mov	r3, r0
 800c376:	461a      	mov	r2, r3
 800c378:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d001      	beq.n	800c384 <check_fs+0x48>
 800c380:	2303      	movs	r3, #3
 800c382:	e029      	b.n	800c3d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c38a:	2be9      	cmp	r3, #233	@ 0xe9
 800c38c:	d009      	beq.n	800c3a2 <check_fs+0x66>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c394:	2beb      	cmp	r3, #235	@ 0xeb
 800c396:	d11e      	bne.n	800c3d6 <check_fs+0x9a>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c39e:	2b90      	cmp	r3, #144	@ 0x90
 800c3a0:	d119      	bne.n	800c3d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	3330      	adds	r3, #48	@ 0x30
 800c3a6:	3336      	adds	r3, #54	@ 0x36
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7fe fe1b 	bl	800afe4 <ld_dword>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c3b4:	4a0a      	ldr	r2, [pc, #40]	@ (800c3e0 <check_fs+0xa4>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d101      	bne.n	800c3be <check_fs+0x82>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	e00c      	b.n	800c3d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	3330      	adds	r3, #48	@ 0x30
 800c3c2:	3352      	adds	r3, #82	@ 0x52
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7fe fe0d 	bl	800afe4 <ld_dword>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	4a05      	ldr	r2, [pc, #20]	@ (800c3e4 <check_fs+0xa8>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d101      	bne.n	800c3d6 <check_fs+0x9a>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	e000      	b.n	800c3d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c3d6:	2302      	movs	r3, #2
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	00544146 	.word	0x00544146
 800c3e4:	33544146 	.word	0x33544146

0800c3e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b096      	sub	sp, #88	@ 0x58
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f7ff ff58 	bl	800c2b2 <get_ldnumber>
 800c402:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c406:	2b00      	cmp	r3, #0
 800c408:	da01      	bge.n	800c40e <find_volume+0x26>
 800c40a:	230b      	movs	r3, #11
 800c40c:	e22d      	b.n	800c86a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c40e:	4aa1      	ldr	r2, [pc, #644]	@ (800c694 <find_volume+0x2ac>)
 800c410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c416:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <find_volume+0x3a>
 800c41e:	230c      	movs	r3, #12
 800c420:	e223      	b.n	800c86a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c426:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c428:	79fb      	ldrb	r3, [r7, #7]
 800c42a:	f023 0301 	bic.w	r3, r3, #1
 800c42e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d01a      	beq.n	800c46e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c43a:	785b      	ldrb	r3, [r3, #1]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fe fd1b 	bl	800ae78 <disk_status>
 800c442:	4603      	mov	r3, r0
 800c444:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c448:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c44c:	f003 0301 	and.w	r3, r3, #1
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10c      	bne.n	800c46e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c454:	79fb      	ldrb	r3, [r7, #7]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d007      	beq.n	800c46a <find_volume+0x82>
 800c45a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c45e:	f003 0304 	and.w	r3, r3, #4
 800c462:	2b00      	cmp	r3, #0
 800c464:	d001      	beq.n	800c46a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c466:	230a      	movs	r3, #10
 800c468:	e1ff      	b.n	800c86a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c46a:	2300      	movs	r3, #0
 800c46c:	e1fd      	b.n	800c86a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c470:	2200      	movs	r2, #0
 800c472:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c476:	b2da      	uxtb	r2, r3
 800c478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c47a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c47e:	785b      	ldrb	r3, [r3, #1]
 800c480:	4618      	mov	r0, r3
 800c482:	f7fe fd13 	bl	800aeac <disk_initialize>
 800c486:	4603      	mov	r3, r0
 800c488:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c48c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c490:	f003 0301 	and.w	r3, r3, #1
 800c494:	2b00      	cmp	r3, #0
 800c496:	d001      	beq.n	800c49c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c498:	2303      	movs	r3, #3
 800c49a:	e1e6      	b.n	800c86a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c49c:	79fb      	ldrb	r3, [r7, #7]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d007      	beq.n	800c4b2 <find_volume+0xca>
 800c4a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c4a6:	f003 0304 	and.w	r3, r3, #4
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d001      	beq.n	800c4b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c4ae:	230a      	movs	r3, #10
 800c4b0:	e1db      	b.n	800c86a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c4b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c4ba:	f7ff ff3f 	bl	800c33c <check_fs>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c4c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c4c8:	2b02      	cmp	r3, #2
 800c4ca:	d149      	bne.n	800c560 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4d0:	e01e      	b.n	800c510 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c4d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4da:	011b      	lsls	r3, r3, #4
 800c4dc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c4e0:	4413      	add	r3, r2
 800c4e2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e6:	3304      	adds	r3, #4
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d006      	beq.n	800c4fc <find_volume+0x114>
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f0:	3308      	adds	r3, #8
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fe fd76 	bl	800afe4 <ld_dword>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	e000      	b.n	800c4fe <find_volume+0x116>
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	3358      	adds	r3, #88	@ 0x58
 800c504:	443b      	add	r3, r7
 800c506:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c50a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c50c:	3301      	adds	r3, #1
 800c50e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c512:	2b03      	cmp	r3, #3
 800c514:	d9dd      	bls.n	800c4d2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c516:	2300      	movs	r3, #0
 800c518:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c51a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d002      	beq.n	800c526 <find_volume+0x13e>
 800c520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c522:	3b01      	subs	r3, #1
 800c524:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	3358      	adds	r3, #88	@ 0x58
 800c52c:	443b      	add	r3, r7
 800c52e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c532:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c536:	2b00      	cmp	r3, #0
 800c538:	d005      	beq.n	800c546 <find_volume+0x15e>
 800c53a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c53c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c53e:	f7ff fefd 	bl	800c33c <check_fs>
 800c542:	4603      	mov	r3, r0
 800c544:	e000      	b.n	800c548 <find_volume+0x160>
 800c546:	2303      	movs	r3, #3
 800c548:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c54c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c550:	2b01      	cmp	r3, #1
 800c552:	d905      	bls.n	800c560 <find_volume+0x178>
 800c554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c556:	3301      	adds	r3, #1
 800c558:	643b      	str	r3, [r7, #64]	@ 0x40
 800c55a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c55c:	2b03      	cmp	r3, #3
 800c55e:	d9e2      	bls.n	800c526 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c560:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c564:	2b04      	cmp	r3, #4
 800c566:	d101      	bne.n	800c56c <find_volume+0x184>
 800c568:	2301      	movs	r3, #1
 800c56a:	e17e      	b.n	800c86a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c56c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c570:	2b01      	cmp	r3, #1
 800c572:	d901      	bls.n	800c578 <find_volume+0x190>
 800c574:	230d      	movs	r3, #13
 800c576:	e178      	b.n	800c86a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c57a:	3330      	adds	r3, #48	@ 0x30
 800c57c:	330b      	adds	r3, #11
 800c57e:	4618      	mov	r0, r3
 800c580:	f7fe fd18 	bl	800afb4 <ld_word>
 800c584:	4603      	mov	r3, r0
 800c586:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c58a:	d001      	beq.n	800c590 <find_volume+0x1a8>
 800c58c:	230d      	movs	r3, #13
 800c58e:	e16c      	b.n	800c86a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c592:	3330      	adds	r3, #48	@ 0x30
 800c594:	3316      	adds	r3, #22
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe fd0c 	bl	800afb4 <ld_word>
 800c59c:	4603      	mov	r3, r0
 800c59e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c5a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d106      	bne.n	800c5b4 <find_volume+0x1cc>
 800c5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a8:	3330      	adds	r3, #48	@ 0x30
 800c5aa:	3324      	adds	r3, #36	@ 0x24
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fe fd19 	bl	800afe4 <ld_dword>
 800c5b2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c5b8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5bc:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c6:	789b      	ldrb	r3, [r3, #2]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d005      	beq.n	800c5d8 <find_volume+0x1f0>
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ce:	789b      	ldrb	r3, [r3, #2]
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	d001      	beq.n	800c5d8 <find_volume+0x1f0>
 800c5d4:	230d      	movs	r3, #13
 800c5d6:	e148      	b.n	800c86a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5da:	789b      	ldrb	r3, [r3, #2]
 800c5dc:	461a      	mov	r2, r3
 800c5de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5e0:	fb02 f303 	mul.w	r3, r2, r3
 800c5e4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f4:	895b      	ldrh	r3, [r3, #10]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d008      	beq.n	800c60c <find_volume+0x224>
 800c5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5fc:	895b      	ldrh	r3, [r3, #10]
 800c5fe:	461a      	mov	r2, r3
 800c600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c602:	895b      	ldrh	r3, [r3, #10]
 800c604:	3b01      	subs	r3, #1
 800c606:	4013      	ands	r3, r2
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d001      	beq.n	800c610 <find_volume+0x228>
 800c60c:	230d      	movs	r3, #13
 800c60e:	e12c      	b.n	800c86a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c612:	3330      	adds	r3, #48	@ 0x30
 800c614:	3311      	adds	r3, #17
 800c616:	4618      	mov	r0, r3
 800c618:	f7fe fccc 	bl	800afb4 <ld_word>
 800c61c:	4603      	mov	r3, r0
 800c61e:	461a      	mov	r2, r3
 800c620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c622:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c626:	891b      	ldrh	r3, [r3, #8]
 800c628:	f003 030f 	and.w	r3, r3, #15
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d001      	beq.n	800c636 <find_volume+0x24e>
 800c632:	230d      	movs	r3, #13
 800c634:	e119      	b.n	800c86a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c638:	3330      	adds	r3, #48	@ 0x30
 800c63a:	3313      	adds	r3, #19
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7fe fcb9 	bl	800afb4 <ld_word>
 800c642:	4603      	mov	r3, r0
 800c644:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d106      	bne.n	800c65a <find_volume+0x272>
 800c64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c64e:	3330      	adds	r3, #48	@ 0x30
 800c650:	3320      	adds	r3, #32
 800c652:	4618      	mov	r0, r3
 800c654:	f7fe fcc6 	bl	800afe4 <ld_dword>
 800c658:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c65c:	3330      	adds	r3, #48	@ 0x30
 800c65e:	330e      	adds	r3, #14
 800c660:	4618      	mov	r0, r3
 800c662:	f7fe fca7 	bl	800afb4 <ld_word>
 800c666:	4603      	mov	r3, r0
 800c668:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c66a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d101      	bne.n	800c674 <find_volume+0x28c>
 800c670:	230d      	movs	r3, #13
 800c672:	e0fa      	b.n	800c86a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c674:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c678:	4413      	add	r3, r2
 800c67a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c67c:	8912      	ldrh	r2, [r2, #8]
 800c67e:	0912      	lsrs	r2, r2, #4
 800c680:	b292      	uxth	r2, r2
 800c682:	4413      	add	r3, r2
 800c684:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d204      	bcs.n	800c698 <find_volume+0x2b0>
 800c68e:	230d      	movs	r3, #13
 800c690:	e0eb      	b.n	800c86a <find_volume+0x482>
 800c692:	bf00      	nop
 800c694:	200055f4 	.word	0x200055f4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c698:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6a0:	8952      	ldrh	r2, [r2, #10]
 800c6a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6a6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d101      	bne.n	800c6b2 <find_volume+0x2ca>
 800c6ae:	230d      	movs	r3, #13
 800c6b0:	e0db      	b.n	800c86a <find_volume+0x482>
		fmt = FS_FAT32;
 800c6b2:	2303      	movs	r3, #3
 800c6b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ba:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d802      	bhi.n	800c6c8 <find_volume+0x2e0>
 800c6c2:	2302      	movs	r3, #2
 800c6c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ca:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d802      	bhi.n	800c6d8 <find_volume+0x2f0>
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6da:	1c9a      	adds	r2, r3, #2
 800c6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6de:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c6e4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c6e6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c6e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6ea:	441a      	add	r2, r3
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ee:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c6f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f4:	441a      	add	r2, r3
 800c6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6f8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800c6fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c6fe:	2b03      	cmp	r3, #3
 800c700:	d11e      	bne.n	800c740 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c704:	3330      	adds	r3, #48	@ 0x30
 800c706:	332a      	adds	r3, #42	@ 0x2a
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fe fc53 	bl	800afb4 <ld_word>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	d001      	beq.n	800c718 <find_volume+0x330>
 800c714:	230d      	movs	r3, #13
 800c716:	e0a8      	b.n	800c86a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c71a:	891b      	ldrh	r3, [r3, #8]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d001      	beq.n	800c724 <find_volume+0x33c>
 800c720:	230d      	movs	r3, #13
 800c722:	e0a2      	b.n	800c86a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c726:	3330      	adds	r3, #48	@ 0x30
 800c728:	332c      	adds	r3, #44	@ 0x2c
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fe fc5a 	bl	800afe4 <ld_dword>
 800c730:	4602      	mov	r2, r0
 800c732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c734:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c738:	695b      	ldr	r3, [r3, #20]
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c73e:	e01f      	b.n	800c780 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c742:	891b      	ldrh	r3, [r3, #8]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d101      	bne.n	800c74c <find_volume+0x364>
 800c748:	230d      	movs	r3, #13
 800c74a:	e08e      	b.n	800c86a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74e:	6a1a      	ldr	r2, [r3, #32]
 800c750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c752:	441a      	add	r2, r3
 800c754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c756:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c758:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c75c:	2b02      	cmp	r3, #2
 800c75e:	d103      	bne.n	800c768 <find_volume+0x380>
 800c760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c762:	695b      	ldr	r3, [r3, #20]
 800c764:	005b      	lsls	r3, r3, #1
 800c766:	e00a      	b.n	800c77e <find_volume+0x396>
 800c768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76a:	695a      	ldr	r2, [r3, #20]
 800c76c:	4613      	mov	r3, r2
 800c76e:	005b      	lsls	r3, r3, #1
 800c770:	4413      	add	r3, r2
 800c772:	085a      	lsrs	r2, r3, #1
 800c774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c776:	695b      	ldr	r3, [r3, #20]
 800c778:	f003 0301 	and.w	r3, r3, #1
 800c77c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c77e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c782:	699a      	ldr	r2, [r3, #24]
 800c784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c786:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c78a:	0a5b      	lsrs	r3, r3, #9
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d201      	bcs.n	800c794 <find_volume+0x3ac>
 800c790:	230d      	movs	r3, #13
 800c792:	e06a      	b.n	800c86a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c796:	f04f 32ff 	mov.w	r2, #4294967295
 800c79a:	611a      	str	r2, [r3, #16]
 800c79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79e:	691a      	ldr	r2, [r3, #16]
 800c7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a6:	2280      	movs	r2, #128	@ 0x80
 800c7a8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c7aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	d149      	bne.n	800c846 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b4:	3330      	adds	r3, #48	@ 0x30
 800c7b6:	3330      	adds	r3, #48	@ 0x30
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fe fbfb 	bl	800afb4 <ld_word>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d140      	bne.n	800c846 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c7c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c7cc:	f7fe fea2 	bl	800b514 <move_window>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d137      	bne.n	800c846 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d8:	2200      	movs	r2, #0
 800c7da:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7de:	3330      	adds	r3, #48	@ 0x30
 800c7e0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7fe fbe5 	bl	800afb4 <ld_word>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d127      	bne.n	800c846 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f8:	3330      	adds	r3, #48	@ 0x30
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fe fbf2 	bl	800afe4 <ld_dword>
 800c800:	4603      	mov	r3, r0
 800c802:	4a1c      	ldr	r2, [pc, #112]	@ (800c874 <find_volume+0x48c>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d11e      	bne.n	800c846 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c80a:	3330      	adds	r3, #48	@ 0x30
 800c80c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c810:	4618      	mov	r0, r3
 800c812:	f7fe fbe7 	bl	800afe4 <ld_dword>
 800c816:	4603      	mov	r3, r0
 800c818:	4a17      	ldr	r2, [pc, #92]	@ (800c878 <find_volume+0x490>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d113      	bne.n	800c846 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c820:	3330      	adds	r3, #48	@ 0x30
 800c822:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c826:	4618      	mov	r0, r3
 800c828:	f7fe fbdc 	bl	800afe4 <ld_dword>
 800c82c:	4602      	mov	r2, r0
 800c82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c830:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c834:	3330      	adds	r3, #48	@ 0x30
 800c836:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fe fbd2 	bl	800afe4 <ld_dword>
 800c840:	4602      	mov	r2, r0
 800c842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c844:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c848:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c84c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c84e:	4b0b      	ldr	r3, [pc, #44]	@ (800c87c <find_volume+0x494>)
 800c850:	881b      	ldrh	r3, [r3, #0]
 800c852:	3301      	adds	r3, #1
 800c854:	b29a      	uxth	r2, r3
 800c856:	4b09      	ldr	r3, [pc, #36]	@ (800c87c <find_volume+0x494>)
 800c858:	801a      	strh	r2, [r3, #0]
 800c85a:	4b08      	ldr	r3, [pc, #32]	@ (800c87c <find_volume+0x494>)
 800c85c:	881a      	ldrh	r2, [r3, #0]
 800c85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c860:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c862:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c864:	f7fe fdee 	bl	800b444 <clear_lock>
#endif
	return FR_OK;
 800c868:	2300      	movs	r3, #0
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3758      	adds	r7, #88	@ 0x58
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	41615252 	.word	0x41615252
 800c878:	61417272 	.word	0x61417272
 800c87c:	200055f8 	.word	0x200055f8

0800c880 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c88a:	2309      	movs	r3, #9
 800c88c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d01c      	beq.n	800c8ce <validate+0x4e>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d018      	beq.n	800c8ce <validate+0x4e>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d013      	beq.n	800c8ce <validate+0x4e>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	889a      	ldrh	r2, [r3, #4]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	88db      	ldrh	r3, [r3, #6]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d10c      	bne.n	800c8ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	785b      	ldrb	r3, [r3, #1]
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fe fadc 	bl	800ae78 <disk_status>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	f003 0301 	and.w	r3, r3, #1
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d101      	bne.n	800c8ce <validate+0x4e>
			res = FR_OK;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c8ce:	7bfb      	ldrb	r3, [r7, #15]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d102      	bne.n	800c8da <validate+0x5a>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	e000      	b.n	800c8dc <validate+0x5c>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	683a      	ldr	r2, [r7, #0]
 800c8de:	6013      	str	r3, [r2, #0]
	return res;
 800c8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3710      	adds	r7, #16
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
	...

0800c8ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b088      	sub	sp, #32
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	4613      	mov	r3, r2
 800c8f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c8fe:	f107 0310 	add.w	r3, r7, #16
 800c902:	4618      	mov	r0, r3
 800c904:	f7ff fcd5 	bl	800c2b2 <get_ldnumber>
 800c908:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	da01      	bge.n	800c914 <f_mount+0x28>
 800c910:	230b      	movs	r3, #11
 800c912:	e02b      	b.n	800c96c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c914:	4a17      	ldr	r2, [pc, #92]	@ (800c974 <f_mount+0x88>)
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c91c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d005      	beq.n	800c930 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c924:	69b8      	ldr	r0, [r7, #24]
 800c926:	f7fe fd8d 	bl	800b444 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	2200      	movs	r2, #0
 800c92e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d002      	beq.n	800c93c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2200      	movs	r2, #0
 800c93a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	490d      	ldr	r1, [pc, #52]	@ (800c974 <f_mount+0x88>)
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d002      	beq.n	800c952 <f_mount+0x66>
 800c94c:	79fb      	ldrb	r3, [r7, #7]
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d001      	beq.n	800c956 <f_mount+0x6a>
 800c952:	2300      	movs	r3, #0
 800c954:	e00a      	b.n	800c96c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c956:	f107 010c 	add.w	r1, r7, #12
 800c95a:	f107 0308 	add.w	r3, r7, #8
 800c95e:	2200      	movs	r2, #0
 800c960:	4618      	mov	r0, r3
 800c962:	f7ff fd41 	bl	800c3e8 <find_volume>
 800c966:	4603      	mov	r3, r0
 800c968:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c96a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3720      	adds	r7, #32
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	200055f4 	.word	0x200055f4

0800c978 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b098      	sub	sp, #96	@ 0x60
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	60b9      	str	r1, [r7, #8]
 800c982:	4613      	mov	r3, r2
 800c984:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d101      	bne.n	800c990 <f_open+0x18>
 800c98c:	2309      	movs	r3, #9
 800c98e:	e1a9      	b.n	800cce4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c990:	79fb      	ldrb	r3, [r7, #7]
 800c992:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c996:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c998:	79fa      	ldrb	r2, [r7, #7]
 800c99a:	f107 0110 	add.w	r1, r7, #16
 800c99e:	f107 0308 	add.w	r3, r7, #8
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7ff fd20 	bl	800c3e8 <find_volume>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c9ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f040 818d 	bne.w	800ccd2 <f_open+0x35a>
		dj.obj.fs = fs;
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	f107 0314 	add.w	r3, r7, #20
 800c9c2:	4611      	mov	r1, r2
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7ff fc03 	bl	800c1d0 <follow_path>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c9d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d118      	bne.n	800ca0a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c9d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c9dc:	b25b      	sxtb	r3, r3
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	da03      	bge.n	800c9ea <f_open+0x72>
				res = FR_INVALID_NAME;
 800c9e2:	2306      	movs	r3, #6
 800c9e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c9e8:	e00f      	b.n	800ca0a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c9ea:	79fb      	ldrb	r3, [r7, #7]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	bf8c      	ite	hi
 800c9f0:	2301      	movhi	r3, #1
 800c9f2:	2300      	movls	r3, #0
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	f107 0314 	add.w	r3, r7, #20
 800c9fc:	4611      	mov	r1, r2
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fe fbd8 	bl	800b1b4 <chk_lock>
 800ca04:	4603      	mov	r3, r0
 800ca06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ca0a:	79fb      	ldrb	r3, [r7, #7]
 800ca0c:	f003 031c 	and.w	r3, r3, #28
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d07f      	beq.n	800cb14 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ca14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d017      	beq.n	800ca4c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ca1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca20:	2b04      	cmp	r3, #4
 800ca22:	d10e      	bne.n	800ca42 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ca24:	f7fe fc22 	bl	800b26c <enq_lock>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d006      	beq.n	800ca3c <f_open+0xc4>
 800ca2e:	f107 0314 	add.w	r3, r7, #20
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7ff fb06 	bl	800c044 <dir_register>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	e000      	b.n	800ca3e <f_open+0xc6>
 800ca3c:	2312      	movs	r3, #18
 800ca3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ca42:	79fb      	ldrb	r3, [r7, #7]
 800ca44:	f043 0308 	orr.w	r3, r3, #8
 800ca48:	71fb      	strb	r3, [r7, #7]
 800ca4a:	e010      	b.n	800ca6e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ca4c:	7ebb      	ldrb	r3, [r7, #26]
 800ca4e:	f003 0311 	and.w	r3, r3, #17
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d003      	beq.n	800ca5e <f_open+0xe6>
					res = FR_DENIED;
 800ca56:	2307      	movs	r3, #7
 800ca58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ca5c:	e007      	b.n	800ca6e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ca5e:	79fb      	ldrb	r3, [r7, #7]
 800ca60:	f003 0304 	and.w	r3, r3, #4
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d002      	beq.n	800ca6e <f_open+0xf6>
 800ca68:	2308      	movs	r3, #8
 800ca6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ca6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d168      	bne.n	800cb48 <f_open+0x1d0>
 800ca76:	79fb      	ldrb	r3, [r7, #7]
 800ca78:	f003 0308 	and.w	r3, r3, #8
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d063      	beq.n	800cb48 <f_open+0x1d0>
				dw = GET_FATTIME();
 800ca80:	f7fd ffb8 	bl	800a9f4 <get_fattime>
 800ca84:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ca86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca88:	330e      	adds	r3, #14
 800ca8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7fe fae7 	bl	800b060 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ca92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca94:	3316      	adds	r3, #22
 800ca96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7fe fae1 	bl	800b060 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ca9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caa0:	330b      	adds	r3, #11
 800caa2:	2220      	movs	r2, #32
 800caa4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800caaa:	4611      	mov	r1, r2
 800caac:	4618      	mov	r0, r3
 800caae:	f7ff fa35 	bl	800bf1c <ld_clust>
 800cab2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cab8:	2200      	movs	r2, #0
 800caba:	4618      	mov	r0, r3
 800cabc:	f7ff fa4d 	bl	800bf5a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac2:	331c      	adds	r3, #28
 800cac4:	2100      	movs	r1, #0
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fe faca 	bl	800b060 <st_dword>
					fs->wflag = 1;
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	2201      	movs	r2, #1
 800cad0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d037      	beq.n	800cb48 <f_open+0x1d0>
						dw = fs->winsect;
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cadc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cade:	f107 0314 	add.w	r3, r7, #20
 800cae2:	2200      	movs	r2, #0
 800cae4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fe ff60 	bl	800b9ac <remove_chain>
 800caec:	4603      	mov	r3, r0
 800caee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800caf2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d126      	bne.n	800cb48 <f_open+0x1d0>
							res = move_window(fs, dw);
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fe fd08 	bl	800b514 <move_window>
 800cb04:	4603      	mov	r3, r0
 800cb06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb0e:	3a01      	subs	r2, #1
 800cb10:	60da      	str	r2, [r3, #12]
 800cb12:	e019      	b.n	800cb48 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cb14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d115      	bne.n	800cb48 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cb1c:	7ebb      	ldrb	r3, [r7, #26]
 800cb1e:	f003 0310 	and.w	r3, r3, #16
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d003      	beq.n	800cb2e <f_open+0x1b6>
					res = FR_NO_FILE;
 800cb26:	2304      	movs	r3, #4
 800cb28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cb2c:	e00c      	b.n	800cb48 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cb2e:	79fb      	ldrb	r3, [r7, #7]
 800cb30:	f003 0302 	and.w	r3, r3, #2
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d007      	beq.n	800cb48 <f_open+0x1d0>
 800cb38:	7ebb      	ldrb	r3, [r7, #26]
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d002      	beq.n	800cb48 <f_open+0x1d0>
						res = FR_DENIED;
 800cb42:	2307      	movs	r3, #7
 800cb44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cb48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d126      	bne.n	800cb9e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cb50:	79fb      	ldrb	r3, [r7, #7]
 800cb52:	f003 0308 	and.w	r3, r3, #8
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d003      	beq.n	800cb62 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800cb5a:	79fb      	ldrb	r3, [r7, #7]
 800cb5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb60:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800cb6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cb70:	79fb      	ldrb	r3, [r7, #7]
 800cb72:	2b01      	cmp	r3, #1
 800cb74:	bf8c      	ite	hi
 800cb76:	2301      	movhi	r3, #1
 800cb78:	2300      	movls	r3, #0
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	f107 0314 	add.w	r3, r7, #20
 800cb82:	4611      	mov	r1, r2
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7fe fb93 	bl	800b2b0 <inc_lock>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	691b      	ldr	r3, [r3, #16]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d102      	bne.n	800cb9e <f_open+0x226>
 800cb98:	2302      	movs	r3, #2
 800cb9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cb9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f040 8095 	bne.w	800ccd2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbac:	4611      	mov	r1, r2
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7ff f9b4 	bl	800bf1c <ld_clust>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cbba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbbc:	331c      	adds	r3, #28
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fe fa10 	bl	800afe4 <ld_dword>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cbd0:	693a      	ldr	r2, [r7, #16]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	88da      	ldrh	r2, [r3, #6]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	79fa      	ldrb	r2, [r7, #7]
 800cbe2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2200      	movs	r2, #0
 800cbee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	3330      	adds	r3, #48	@ 0x30
 800cbfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbfe:	2100      	movs	r1, #0
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7fe fa7a 	bl	800b0fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cc06:	79fb      	ldrb	r3, [r7, #7]
 800cc08:	f003 0320 	and.w	r3, r3, #32
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d060      	beq.n	800ccd2 <f_open+0x35a>
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d05c      	beq.n	800ccd2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	68da      	ldr	r2, [r3, #12]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	895b      	ldrh	r3, [r3, #10]
 800cc24:	025b      	lsls	r3, r3, #9
 800cc26:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc34:	e016      	b.n	800cc64 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7fe fd25 	bl	800b68a <get_fat>
 800cc40:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800cc42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d802      	bhi.n	800cc4e <f_open+0x2d6>
 800cc48:	2302      	movs	r3, #2
 800cc4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cc4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc54:	d102      	bne.n	800cc5c <f_open+0x2e4>
 800cc56:	2301      	movs	r3, #1
 800cc58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cc5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d103      	bne.n	800cc74 <f_open+0x2fc>
 800cc6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d8e0      	bhi.n	800cc36 <f_open+0x2be>
				}
				fp->clust = clst;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc78:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cc7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d127      	bne.n	800ccd2 <f_open+0x35a>
 800cc82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d022      	beq.n	800ccd2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7fe fcdb 	bl	800b64c <clust2sect>
 800cc96:	6478      	str	r0, [r7, #68]	@ 0x44
 800cc98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d103      	bne.n	800cca6 <f_open+0x32e>
						res = FR_INT_ERR;
 800cc9e:	2302      	movs	r3, #2
 800cca0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cca4:	e015      	b.n	800ccd2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cca8:	0a5a      	lsrs	r2, r3, #9
 800ccaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccac:	441a      	add	r2, r3
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	7858      	ldrb	r0, [r3, #1]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	6a1a      	ldr	r2, [r3, #32]
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	f7fe f919 	bl	800aef8 <disk_read>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d002      	beq.n	800ccd2 <f_open+0x35a>
 800cccc:	2301      	movs	r3, #1
 800ccce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ccd2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d002      	beq.n	800cce0 <f_open+0x368>
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cce0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3760      	adds	r7, #96	@ 0x60
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b08e      	sub	sp, #56	@ 0x38
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	60f8      	str	r0, [r7, #12]
 800ccf4:	60b9      	str	r1, [r7, #8]
 800ccf6:	607a      	str	r2, [r7, #4]
 800ccf8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	2200      	movs	r2, #0
 800cd02:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f107 0214 	add.w	r2, r7, #20
 800cd0a:	4611      	mov	r1, r2
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7ff fdb7 	bl	800c880 <validate>
 800cd12:	4603      	mov	r3, r0
 800cd14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cd18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d107      	bne.n	800cd30 <f_read+0x44>
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	7d5b      	ldrb	r3, [r3, #21]
 800cd24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cd28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d002      	beq.n	800cd36 <f_read+0x4a>
 800cd30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd34:	e115      	b.n	800cf62 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	7d1b      	ldrb	r3, [r3, #20]
 800cd3a:	f003 0301 	and.w	r3, r3, #1
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d101      	bne.n	800cd46 <f_read+0x5a>
 800cd42:	2307      	movs	r3, #7
 800cd44:	e10d      	b.n	800cf62 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	68da      	ldr	r2, [r3, #12]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	699b      	ldr	r3, [r3, #24]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	6a3b      	ldr	r3, [r7, #32]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	f240 80fe 	bls.w	800cf58 <f_read+0x26c>
 800cd5c:	6a3b      	ldr	r3, [r7, #32]
 800cd5e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cd60:	e0fa      	b.n	800cf58 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	699b      	ldr	r3, [r3, #24]
 800cd66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	f040 80c6 	bne.w	800cefc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	699b      	ldr	r3, [r3, #24]
 800cd74:	0a5b      	lsrs	r3, r3, #9
 800cd76:	697a      	ldr	r2, [r7, #20]
 800cd78:	8952      	ldrh	r2, [r2, #10]
 800cd7a:	3a01      	subs	r2, #1
 800cd7c:	4013      	ands	r3, r2
 800cd7e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d12f      	bne.n	800cde6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d103      	bne.n	800cd96 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	689b      	ldr	r3, [r3, #8]
 800cd92:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd94:	e013      	b.n	800cdbe <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d007      	beq.n	800cdae <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	699b      	ldr	r3, [r3, #24]
 800cda2:	4619      	mov	r1, r3
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	f7fe fefe 	bl	800bba6 <clmt_clust>
 800cdaa:	6338      	str	r0, [r7, #48]	@ 0x30
 800cdac:	e007      	b.n	800cdbe <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	69db      	ldr	r3, [r3, #28]
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	4610      	mov	r0, r2
 800cdb8:	f7fe fc67 	bl	800b68a <get_fat>
 800cdbc:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d804      	bhi.n	800cdce <f_read+0xe2>
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2202      	movs	r2, #2
 800cdc8:	755a      	strb	r2, [r3, #21]
 800cdca:	2302      	movs	r3, #2
 800cdcc:	e0c9      	b.n	800cf62 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd4:	d104      	bne.n	800cde0 <f_read+0xf4>
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2201      	movs	r2, #1
 800cdda:	755a      	strb	r2, [r3, #21]
 800cddc:	2301      	movs	r3, #1
 800cdde:	e0c0      	b.n	800cf62 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cde4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cde6:	697a      	ldr	r2, [r7, #20]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	69db      	ldr	r3, [r3, #28]
 800cdec:	4619      	mov	r1, r3
 800cdee:	4610      	mov	r0, r2
 800cdf0:	f7fe fc2c 	bl	800b64c <clust2sect>
 800cdf4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d104      	bne.n	800ce06 <f_read+0x11a>
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2202      	movs	r2, #2
 800ce00:	755a      	strb	r2, [r3, #21]
 800ce02:	2302      	movs	r3, #2
 800ce04:	e0ad      	b.n	800cf62 <f_read+0x276>
			sect += csect;
 800ce06:	69ba      	ldr	r2, [r7, #24]
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	0a5b      	lsrs	r3, r3, #9
 800ce12:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ce14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d039      	beq.n	800ce8e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ce1a:	69fa      	ldr	r2, [r7, #28]
 800ce1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce1e:	4413      	add	r3, r2
 800ce20:	697a      	ldr	r2, [r7, #20]
 800ce22:	8952      	ldrh	r2, [r2, #10]
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d905      	bls.n	800ce34 <f_read+0x148>
					cc = fs->csize - csect;
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	895b      	ldrh	r3, [r3, #10]
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	7858      	ldrb	r0, [r3, #1]
 800ce38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce3a:	69ba      	ldr	r2, [r7, #24]
 800ce3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ce3e:	f7fe f85b 	bl	800aef8 <disk_read>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d004      	beq.n	800ce52 <f_read+0x166>
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	755a      	strb	r2, [r3, #21]
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e087      	b.n	800cf62 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	7d1b      	ldrb	r3, [r3, #20]
 800ce56:	b25b      	sxtb	r3, r3
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	da14      	bge.n	800ce86 <f_read+0x19a>
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6a1a      	ldr	r2, [r3, #32]
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	1ad3      	subs	r3, r2, r3
 800ce64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d90d      	bls.n	800ce86 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6a1a      	ldr	r2, [r3, #32]
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	025b      	lsls	r3, r3, #9
 800ce74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce76:	18d0      	adds	r0, r2, r3
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	3330      	adds	r3, #48	@ 0x30
 800ce7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce80:	4619      	mov	r1, r3
 800ce82:	f7fe f919 	bl	800b0b8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ce86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce88:	025b      	lsls	r3, r3, #9
 800ce8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ce8c:	e050      	b.n	800cf30 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	69ba      	ldr	r2, [r7, #24]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d02e      	beq.n	800cef6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	7d1b      	ldrb	r3, [r3, #20]
 800ce9c:	b25b      	sxtb	r3, r3
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	da18      	bge.n	800ced4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	7858      	ldrb	r0, [r3, #1]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6a1a      	ldr	r2, [r3, #32]
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	f7fe f841 	bl	800af38 <disk_write>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d004      	beq.n	800cec6 <f_read+0x1da>
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2201      	movs	r2, #1
 800cec0:	755a      	strb	r2, [r3, #21]
 800cec2:	2301      	movs	r3, #1
 800cec4:	e04d      	b.n	800cf62 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	7d1b      	ldrb	r3, [r3, #20]
 800ceca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cece:	b2da      	uxtb	r2, r3
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	7858      	ldrb	r0, [r3, #1]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cede:	2301      	movs	r3, #1
 800cee0:	69ba      	ldr	r2, [r7, #24]
 800cee2:	f7fe f809 	bl	800aef8 <disk_read>
 800cee6:	4603      	mov	r3, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d004      	beq.n	800cef6 <f_read+0x20a>
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2201      	movs	r2, #1
 800cef0:	755a      	strb	r2, [r3, #21]
 800cef2:	2301      	movs	r3, #1
 800cef4:	e035      	b.n	800cf62 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	69ba      	ldr	r2, [r7, #24]
 800cefa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	699b      	ldr	r3, [r3, #24]
 800cf00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf04:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cf08:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cf0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d901      	bls.n	800cf16 <f_read+0x22a>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	699b      	ldr	r3, [r3, #24]
 800cf20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf24:	4413      	add	r3, r2
 800cf26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf28:	4619      	mov	r1, r3
 800cf2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf2c:	f7fe f8c4 	bl	800b0b8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cf30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf34:	4413      	add	r3, r2
 800cf36:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	699a      	ldr	r2, [r3, #24]
 800cf3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf3e:	441a      	add	r2, r3
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	619a      	str	r2, [r3, #24]
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf4a:	441a      	add	r2, r3
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	601a      	str	r2, [r3, #0]
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f47f af01 	bne.w	800cd62 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3738      	adds	r7, #56	@ 0x38
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b08c      	sub	sp, #48	@ 0x30
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	60f8      	str	r0, [r7, #12]
 800cf72:	60b9      	str	r1, [r7, #8]
 800cf74:	607a      	str	r2, [r7, #4]
 800cf76:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f107 0210 	add.w	r2, r7, #16
 800cf88:	4611      	mov	r1, r2
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7ff fc78 	bl	800c880 <validate>
 800cf90:	4603      	mov	r3, r0
 800cf92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cf96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d107      	bne.n	800cfae <f_write+0x44>
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	7d5b      	ldrb	r3, [r3, #21]
 800cfa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cfa6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d002      	beq.n	800cfb4 <f_write+0x4a>
 800cfae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cfb2:	e14b      	b.n	800d24c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	7d1b      	ldrb	r3, [r3, #20]
 800cfb8:	f003 0302 	and.w	r3, r3, #2
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d101      	bne.n	800cfc4 <f_write+0x5a>
 800cfc0:	2307      	movs	r3, #7
 800cfc2:	e143      	b.n	800d24c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	699a      	ldr	r2, [r3, #24]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	441a      	add	r2, r3
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	699b      	ldr	r3, [r3, #24]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	f080 812d 	bcs.w	800d230 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	43db      	mvns	r3, r3
 800cfdc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cfde:	e127      	b.n	800d230 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	699b      	ldr	r3, [r3, #24]
 800cfe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f040 80e3 	bne.w	800d1b4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	699b      	ldr	r3, [r3, #24]
 800cff2:	0a5b      	lsrs	r3, r3, #9
 800cff4:	693a      	ldr	r2, [r7, #16]
 800cff6:	8952      	ldrh	r2, [r2, #10]
 800cff8:	3a01      	subs	r2, #1
 800cffa:	4013      	ands	r3, r2
 800cffc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cffe:	69bb      	ldr	r3, [r7, #24]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d143      	bne.n	800d08c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	699b      	ldr	r3, [r3, #24]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d10c      	bne.n	800d026 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d014:	2b00      	cmp	r3, #0
 800d016:	d11a      	bne.n	800d04e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2100      	movs	r1, #0
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7fe fd2a 	bl	800ba76 <create_chain>
 800d022:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d024:	e013      	b.n	800d04e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d007      	beq.n	800d03e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	699b      	ldr	r3, [r3, #24]
 800d032:	4619      	mov	r1, r3
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f7fe fdb6 	bl	800bba6 <clmt_clust>
 800d03a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d03c:	e007      	b.n	800d04e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d03e:	68fa      	ldr	r2, [r7, #12]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	69db      	ldr	r3, [r3, #28]
 800d044:	4619      	mov	r1, r3
 800d046:	4610      	mov	r0, r2
 800d048:	f7fe fd15 	bl	800ba76 <create_chain>
 800d04c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d050:	2b00      	cmp	r3, #0
 800d052:	f000 80f2 	beq.w	800d23a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d104      	bne.n	800d066 <f_write+0xfc>
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2202      	movs	r2, #2
 800d060:	755a      	strb	r2, [r3, #21]
 800d062:	2302      	movs	r3, #2
 800d064:	e0f2      	b.n	800d24c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d06c:	d104      	bne.n	800d078 <f_write+0x10e>
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2201      	movs	r2, #1
 800d072:	755a      	strb	r2, [r3, #21]
 800d074:	2301      	movs	r3, #1
 800d076:	e0e9      	b.n	800d24c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d07c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	689b      	ldr	r3, [r3, #8]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d102      	bne.n	800d08c <f_write+0x122>
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d08a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	7d1b      	ldrb	r3, [r3, #20]
 800d090:	b25b      	sxtb	r3, r3
 800d092:	2b00      	cmp	r3, #0
 800d094:	da18      	bge.n	800d0c8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	7858      	ldrb	r0, [r3, #1]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	6a1a      	ldr	r2, [r3, #32]
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	f7fd ff47 	bl	800af38 <disk_write>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d004      	beq.n	800d0ba <f_write+0x150>
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	755a      	strb	r2, [r3, #21]
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e0c8      	b.n	800d24c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	7d1b      	ldrb	r3, [r3, #20]
 800d0be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0c2:	b2da      	uxtb	r2, r3
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d0c8:	693a      	ldr	r2, [r7, #16]
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	69db      	ldr	r3, [r3, #28]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	f7fe fabb 	bl	800b64c <clust2sect>
 800d0d6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d104      	bne.n	800d0e8 <f_write+0x17e>
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2202      	movs	r2, #2
 800d0e2:	755a      	strb	r2, [r3, #21]
 800d0e4:	2302      	movs	r3, #2
 800d0e6:	e0b1      	b.n	800d24c <f_write+0x2e2>
			sect += csect;
 800d0e8:	697a      	ldr	r2, [r7, #20]
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	0a5b      	lsrs	r3, r3, #9
 800d0f4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d0f6:	6a3b      	ldr	r3, [r7, #32]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d03c      	beq.n	800d176 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d0fc:	69ba      	ldr	r2, [r7, #24]
 800d0fe:	6a3b      	ldr	r3, [r7, #32]
 800d100:	4413      	add	r3, r2
 800d102:	693a      	ldr	r2, [r7, #16]
 800d104:	8952      	ldrh	r2, [r2, #10]
 800d106:	4293      	cmp	r3, r2
 800d108:	d905      	bls.n	800d116 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	895b      	ldrh	r3, [r3, #10]
 800d10e:	461a      	mov	r2, r3
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	1ad3      	subs	r3, r2, r3
 800d114:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	7858      	ldrb	r0, [r3, #1]
 800d11a:	6a3b      	ldr	r3, [r7, #32]
 800d11c:	697a      	ldr	r2, [r7, #20]
 800d11e:	69f9      	ldr	r1, [r7, #28]
 800d120:	f7fd ff0a 	bl	800af38 <disk_write>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d004      	beq.n	800d134 <f_write+0x1ca>
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2201      	movs	r2, #1
 800d12e:	755a      	strb	r2, [r3, #21]
 800d130:	2301      	movs	r3, #1
 800d132:	e08b      	b.n	800d24c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	6a1a      	ldr	r2, [r3, #32]
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	6a3a      	ldr	r2, [r7, #32]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d915      	bls.n	800d16e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6a1a      	ldr	r2, [r3, #32]
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	1ad3      	subs	r3, r2, r3
 800d150:	025b      	lsls	r3, r3, #9
 800d152:	69fa      	ldr	r2, [r7, #28]
 800d154:	4413      	add	r3, r2
 800d156:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d15a:	4619      	mov	r1, r3
 800d15c:	f7fd ffac 	bl	800b0b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	7d1b      	ldrb	r3, [r3, #20]
 800d164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d168:	b2da      	uxtb	r2, r3
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d16e:	6a3b      	ldr	r3, [r7, #32]
 800d170:	025b      	lsls	r3, r3, #9
 800d172:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d174:	e03f      	b.n	800d1f6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	6a1b      	ldr	r3, [r3, #32]
 800d17a:	697a      	ldr	r2, [r7, #20]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d016      	beq.n	800d1ae <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	699a      	ldr	r2, [r3, #24]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d188:	429a      	cmp	r2, r3
 800d18a:	d210      	bcs.n	800d1ae <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	7858      	ldrb	r0, [r3, #1]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d196:	2301      	movs	r3, #1
 800d198:	697a      	ldr	r2, [r7, #20]
 800d19a:	f7fd fead 	bl	800aef8 <disk_read>
 800d19e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d004      	beq.n	800d1ae <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	755a      	strb	r2, [r3, #21]
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	e04e      	b.n	800d24c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	697a      	ldr	r2, [r7, #20]
 800d1b2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	699b      	ldr	r3, [r3, #24]
 800d1b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1bc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d1c0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d1c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d901      	bls.n	800d1ce <f_write+0x264>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	699b      	ldr	r3, [r3, #24]
 800d1d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1dc:	4413      	add	r3, r2
 800d1de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1e0:	69f9      	ldr	r1, [r7, #28]
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7fd ff68 	bl	800b0b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	7d1b      	ldrb	r3, [r3, #20]
 800d1ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d1f0:	b2da      	uxtb	r2, r3
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d1f6:	69fa      	ldr	r2, [r7, #28]
 800d1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1fa:	4413      	add	r3, r2
 800d1fc:	61fb      	str	r3, [r7, #28]
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	699a      	ldr	r2, [r3, #24]
 800d202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d204:	441a      	add	r2, r3
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	619a      	str	r2, [r3, #24]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	68da      	ldr	r2, [r3, #12]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	699b      	ldr	r3, [r3, #24]
 800d212:	429a      	cmp	r2, r3
 800d214:	bf38      	it	cc
 800d216:	461a      	movcc	r2, r3
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	60da      	str	r2, [r3, #12]
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d222:	441a      	add	r2, r3
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	601a      	str	r2, [r3, #0]
 800d228:	687a      	ldr	r2, [r7, #4]
 800d22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22c:	1ad3      	subs	r3, r2, r3
 800d22e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2b00      	cmp	r3, #0
 800d234:	f47f aed4 	bne.w	800cfe0 <f_write+0x76>
 800d238:	e000      	b.n	800d23c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d23a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	7d1b      	ldrb	r3, [r3, #20]
 800d240:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d244:	b2da      	uxtb	r2, r3
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d24a:	2300      	movs	r3, #0
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3730      	adds	r7, #48	@ 0x30
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f107 0208 	add.w	r2, r7, #8
 800d262:	4611      	mov	r1, r2
 800d264:	4618      	mov	r0, r3
 800d266:	f7ff fb0b 	bl	800c880 <validate>
 800d26a:	4603      	mov	r3, r0
 800d26c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d26e:	7dfb      	ldrb	r3, [r7, #23]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d168      	bne.n	800d346 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	7d1b      	ldrb	r3, [r3, #20]
 800d278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d062      	beq.n	800d346 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	7d1b      	ldrb	r3, [r3, #20]
 800d284:	b25b      	sxtb	r3, r3
 800d286:	2b00      	cmp	r3, #0
 800d288:	da15      	bge.n	800d2b6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	7858      	ldrb	r0, [r3, #1]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6a1a      	ldr	r2, [r3, #32]
 800d298:	2301      	movs	r3, #1
 800d29a:	f7fd fe4d 	bl	800af38 <disk_write>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d001      	beq.n	800d2a8 <f_sync+0x54>
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	e04f      	b.n	800d348 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	7d1b      	ldrb	r3, [r3, #20]
 800d2ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2b0:	b2da      	uxtb	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d2b6:	f7fd fb9d 	bl	800a9f4 <get_fattime>
 800d2ba:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d2bc:	68ba      	ldr	r2, [r7, #8]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	4610      	mov	r0, r2
 800d2c6:	f7fe f925 	bl	800b514 <move_window>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d2ce:	7dfb      	ldrb	r3, [r7, #23]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d138      	bne.n	800d346 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2d8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	330b      	adds	r3, #11
 800d2de:	781a      	ldrb	r2, [r3, #0]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	330b      	adds	r3, #11
 800d2e4:	f042 0220 	orr.w	r2, r2, #32
 800d2e8:	b2d2      	uxtb	r2, r2
 800d2ea:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6818      	ldr	r0, [r3, #0]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	68f9      	ldr	r1, [r7, #12]
 800d2f8:	f7fe fe2f 	bl	800bf5a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f103 021c 	add.w	r2, r3, #28
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	4619      	mov	r1, r3
 800d308:	4610      	mov	r0, r2
 800d30a:	f7fd fea9 	bl	800b060 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	3316      	adds	r3, #22
 800d312:	6939      	ldr	r1, [r7, #16]
 800d314:	4618      	mov	r0, r3
 800d316:	f7fd fea3 	bl	800b060 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	3312      	adds	r3, #18
 800d31e:	2100      	movs	r1, #0
 800d320:	4618      	mov	r0, r3
 800d322:	f7fd fe82 	bl	800b02a <st_word>
					fs->wflag = 1;
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	2201      	movs	r2, #1
 800d32a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fe f91e 	bl	800b570 <sync_fs>
 800d334:	4603      	mov	r3, r0
 800d336:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	7d1b      	ldrb	r3, [r3, #20]
 800d33c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d340:	b2da      	uxtb	r2, r3
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d346:	7dfb      	ldrb	r3, [r7, #23]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3718      	adds	r7, #24
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7ff ff7b 	bl	800d254 <f_sync>
 800d35e:	4603      	mov	r3, r0
 800d360:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d362:	7bfb      	ldrb	r3, [r7, #15]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d118      	bne.n	800d39a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f107 0208 	add.w	r2, r7, #8
 800d36e:	4611      	mov	r1, r2
 800d370:	4618      	mov	r0, r3
 800d372:	f7ff fa85 	bl	800c880 <validate>
 800d376:	4603      	mov	r3, r0
 800d378:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d37a:	7bfb      	ldrb	r3, [r7, #15]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d10c      	bne.n	800d39a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	4618      	mov	r0, r3
 800d386:	f7fe f821 	bl	800b3cc <dec_lock>
 800d38a:	4603      	mov	r3, r0
 800d38c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d38e:	7bfb      	ldrb	r3, [r7, #15]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d102      	bne.n	800d39a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2200      	movs	r2, #0
 800d398:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3710      	adds	r7, #16
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b090      	sub	sp, #64	@ 0x40
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f107 0208 	add.w	r2, r7, #8
 800d3b4:	4611      	mov	r1, r2
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7ff fa62 	bl	800c880 <validate>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d3c2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d103      	bne.n	800d3d2 <f_lseek+0x2e>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	7d5b      	ldrb	r3, [r3, #21]
 800d3ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d3d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d002      	beq.n	800d3e0 <f_lseek+0x3c>
 800d3da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d3de:	e1e6      	b.n	800d7ae <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f000 80d1 	beq.w	800d58c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3f0:	d15a      	bne.n	800d4a8 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3f6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3fa:	1d1a      	adds	r2, r3, #4
 800d3fc:	627a      	str	r2, [r7, #36]	@ 0x24
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	617b      	str	r3, [r7, #20]
 800d402:	2302      	movs	r3, #2
 800d404:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d03a      	beq.n	800d488 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d414:	613b      	str	r3, [r7, #16]
 800d416:	2300      	movs	r3, #0
 800d418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d41c:	3302      	adds	r3, #2
 800d41e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d422:	60fb      	str	r3, [r7, #12]
 800d424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d426:	3301      	adds	r3, #1
 800d428:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fe f92b 	bl	800b68a <get_fat>
 800d434:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d804      	bhi.n	800d446 <f_lseek+0xa2>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2202      	movs	r2, #2
 800d440:	755a      	strb	r2, [r3, #21]
 800d442:	2302      	movs	r3, #2
 800d444:	e1b3      	b.n	800d7ae <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44c:	d104      	bne.n	800d458 <f_lseek+0xb4>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2201      	movs	r2, #1
 800d452:	755a      	strb	r2, [r3, #21]
 800d454:	2301      	movs	r3, #1
 800d456:	e1aa      	b.n	800d7ae <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	3301      	adds	r3, #1
 800d45c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d45e:	429a      	cmp	r2, r3
 800d460:	d0de      	beq.n	800d420 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	429a      	cmp	r2, r3
 800d468:	d809      	bhi.n	800d47e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d46c:	1d1a      	adds	r2, r3, #4
 800d46e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d470:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d472:	601a      	str	r2, [r3, #0]
 800d474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d476:	1d1a      	adds	r2, r3, #4
 800d478:	627a      	str	r2, [r7, #36]	@ 0x24
 800d47a:	693a      	ldr	r2, [r7, #16]
 800d47c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	695b      	ldr	r3, [r3, #20]
 800d482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d484:	429a      	cmp	r2, r3
 800d486:	d3c4      	bcc.n	800d412 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d48c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d48e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d490:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	429a      	cmp	r2, r3
 800d496:	d803      	bhi.n	800d4a0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d49a:	2200      	movs	r2, #0
 800d49c:	601a      	str	r2, [r3, #0]
 800d49e:	e184      	b.n	800d7aa <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d4a0:	2311      	movs	r3, #17
 800d4a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d4a6:	e180      	b.n	800d7aa <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	683a      	ldr	r2, [r7, #0]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d902      	bls.n	800d4b8 <f_lseek+0x114>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	f000 8172 	beq.w	800d7aa <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f7fe fb6a 	bl	800bba6 <clmt_clust>
 800d4d2:	4602      	mov	r2, r0
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d4d8:	68ba      	ldr	r2, [r7, #8]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	69db      	ldr	r3, [r3, #28]
 800d4de:	4619      	mov	r1, r3
 800d4e0:	4610      	mov	r0, r2
 800d4e2:	f7fe f8b3 	bl	800b64c <clust2sect>
 800d4e6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d4e8:	69bb      	ldr	r3, [r7, #24]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d104      	bne.n	800d4f8 <f_lseek+0x154>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2202      	movs	r2, #2
 800d4f2:	755a      	strb	r2, [r3, #21]
 800d4f4:	2302      	movs	r3, #2
 800d4f6:	e15a      	b.n	800d7ae <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	3b01      	subs	r3, #1
 800d4fc:	0a5b      	lsrs	r3, r3, #9
 800d4fe:	68ba      	ldr	r2, [r7, #8]
 800d500:	8952      	ldrh	r2, [r2, #10]
 800d502:	3a01      	subs	r2, #1
 800d504:	4013      	ands	r3, r2
 800d506:	69ba      	ldr	r2, [r7, #24]
 800d508:	4413      	add	r3, r2
 800d50a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	699b      	ldr	r3, [r3, #24]
 800d510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d514:	2b00      	cmp	r3, #0
 800d516:	f000 8148 	beq.w	800d7aa <f_lseek+0x406>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a1b      	ldr	r3, [r3, #32]
 800d51e:	69ba      	ldr	r2, [r7, #24]
 800d520:	429a      	cmp	r2, r3
 800d522:	f000 8142 	beq.w	800d7aa <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	7d1b      	ldrb	r3, [r3, #20]
 800d52a:	b25b      	sxtb	r3, r3
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	da18      	bge.n	800d562 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	7858      	ldrb	r0, [r3, #1]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6a1a      	ldr	r2, [r3, #32]
 800d53e:	2301      	movs	r3, #1
 800d540:	f7fd fcfa 	bl	800af38 <disk_write>
 800d544:	4603      	mov	r3, r0
 800d546:	2b00      	cmp	r3, #0
 800d548:	d004      	beq.n	800d554 <f_lseek+0x1b0>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2201      	movs	r2, #1
 800d54e:	755a      	strb	r2, [r3, #21]
 800d550:	2301      	movs	r3, #1
 800d552:	e12c      	b.n	800d7ae <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	7d1b      	ldrb	r3, [r3, #20]
 800d558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d55c:	b2da      	uxtb	r2, r3
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	7858      	ldrb	r0, [r3, #1]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d56c:	2301      	movs	r3, #1
 800d56e:	69ba      	ldr	r2, [r7, #24]
 800d570:	f7fd fcc2 	bl	800aef8 <disk_read>
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d004      	beq.n	800d584 <f_lseek+0x1e0>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2201      	movs	r2, #1
 800d57e:	755a      	strb	r2, [r3, #21]
 800d580:	2301      	movs	r3, #1
 800d582:	e114      	b.n	800d7ae <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	69ba      	ldr	r2, [r7, #24]
 800d588:	621a      	str	r2, [r3, #32]
 800d58a:	e10e      	b.n	800d7aa <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	68db      	ldr	r3, [r3, #12]
 800d590:	683a      	ldr	r2, [r7, #0]
 800d592:	429a      	cmp	r2, r3
 800d594:	d908      	bls.n	800d5a8 <f_lseek+0x204>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	7d1b      	ldrb	r3, [r3, #20]
 800d59a:	f003 0302 	and.w	r3, r3, #2
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d102      	bne.n	800d5a8 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	699b      	ldr	r3, [r3, #24]
 800d5ac:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5b6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	f000 80a7 	beq.w	800d70e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	895b      	ldrh	r3, [r3, #10]
 800d5c4:	025b      	lsls	r3, r3, #9
 800d5c6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d5c8:	6a3b      	ldr	r3, [r7, #32]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d01b      	beq.n	800d606 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	1e5a      	subs	r2, r3, #1
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	fbb2 f2f3 	udiv	r2, r2, r3
 800d5d8:	6a3b      	ldr	r3, [r7, #32]
 800d5da:	1e59      	subs	r1, r3, #1
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d30f      	bcc.n	800d606 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d5e6:	6a3b      	ldr	r3, [r7, #32]
 800d5e8:	1e5a      	subs	r2, r3, #1
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	425b      	negs	r3, r3
 800d5ee:	401a      	ands	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	699b      	ldr	r3, [r3, #24]
 800d5f8:	683a      	ldr	r2, [r7, #0]
 800d5fa:	1ad3      	subs	r3, r2, r3
 800d5fc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	69db      	ldr	r3, [r3, #28]
 800d602:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d604:	e022      	b.n	800d64c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	689b      	ldr	r3, [r3, #8]
 800d60a:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d119      	bne.n	800d646 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2100      	movs	r1, #0
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe fa2d 	bl	800ba76 <create_chain>
 800d61c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d620:	2b01      	cmp	r3, #1
 800d622:	d104      	bne.n	800d62e <f_lseek+0x28a>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2202      	movs	r2, #2
 800d628:	755a      	strb	r2, [r3, #21]
 800d62a:	2302      	movs	r3, #2
 800d62c:	e0bf      	b.n	800d7ae <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d634:	d104      	bne.n	800d640 <f_lseek+0x29c>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2201      	movs	r2, #1
 800d63a:	755a      	strb	r2, [r3, #21]
 800d63c:	2301      	movs	r3, #1
 800d63e:	e0b6      	b.n	800d7ae <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d644:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d64a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d05d      	beq.n	800d70e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d652:	e03a      	b.n	800d6ca <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d654:	683a      	ldr	r2, [r7, #0]
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	1ad3      	subs	r3, r2, r3
 800d65a:	603b      	str	r3, [r7, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	699a      	ldr	r2, [r3, #24]
 800d660:	69fb      	ldr	r3, [r7, #28]
 800d662:	441a      	add	r2, r3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	7d1b      	ldrb	r3, [r3, #20]
 800d66c:	f003 0302 	and.w	r3, r3, #2
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00b      	beq.n	800d68c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d678:	4618      	mov	r0, r3
 800d67a:	f7fe f9fc 	bl	800ba76 <create_chain>
 800d67e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d682:	2b00      	cmp	r3, #0
 800d684:	d108      	bne.n	800d698 <f_lseek+0x2f4>
							ofs = 0; break;
 800d686:	2300      	movs	r3, #0
 800d688:	603b      	str	r3, [r7, #0]
 800d68a:	e022      	b.n	800d6d2 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d690:	4618      	mov	r0, r3
 800d692:	f7fd fffa 	bl	800b68a <get_fat>
 800d696:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d69e:	d104      	bne.n	800d6aa <f_lseek+0x306>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	755a      	strb	r2, [r3, #21]
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	e081      	b.n	800d7ae <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d904      	bls.n	800d6ba <f_lseek+0x316>
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	695b      	ldr	r3, [r3, #20]
 800d6b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d304      	bcc.n	800d6c4 <f_lseek+0x320>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2202      	movs	r2, #2
 800d6be:	755a      	strb	r2, [r3, #21]
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	e074      	b.n	800d7ae <f_lseek+0x40a>
					fp->clust = clst;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d6c8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d8c0      	bhi.n	800d654 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	699a      	ldr	r2, [r3, #24]
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	441a      	add	r2, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d012      	beq.n	800d70e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7fd ffad 	bl	800b64c <clust2sect>
 800d6f2:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d6f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d104      	bne.n	800d704 <f_lseek+0x360>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2202      	movs	r2, #2
 800d6fe:	755a      	strb	r2, [r3, #21]
 800d700:	2302      	movs	r3, #2
 800d702:	e054      	b.n	800d7ae <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	0a5b      	lsrs	r3, r3, #9
 800d708:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d70a:	4413      	add	r3, r2
 800d70c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	699a      	ldr	r2, [r3, #24]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	429a      	cmp	r2, r3
 800d718:	d90a      	bls.n	800d730 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	699a      	ldr	r2, [r3, #24]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	7d1b      	ldrb	r3, [r3, #20]
 800d726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d72a:	b2da      	uxtb	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	699b      	ldr	r3, [r3, #24]
 800d734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d036      	beq.n	800d7aa <f_lseek+0x406>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6a1b      	ldr	r3, [r3, #32]
 800d740:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d742:	429a      	cmp	r2, r3
 800d744:	d031      	beq.n	800d7aa <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	7d1b      	ldrb	r3, [r3, #20]
 800d74a:	b25b      	sxtb	r3, r3
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	da18      	bge.n	800d782 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	7858      	ldrb	r0, [r3, #1]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6a1a      	ldr	r2, [r3, #32]
 800d75e:	2301      	movs	r3, #1
 800d760:	f7fd fbea 	bl	800af38 <disk_write>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d004      	beq.n	800d774 <f_lseek+0x3d0>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2201      	movs	r2, #1
 800d76e:	755a      	strb	r2, [r3, #21]
 800d770:	2301      	movs	r3, #1
 800d772:	e01c      	b.n	800d7ae <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	7d1b      	ldrb	r3, [r3, #20]
 800d778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d77c:	b2da      	uxtb	r2, r3
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	7858      	ldrb	r0, [r3, #1]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d78c:	2301      	movs	r3, #1
 800d78e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d790:	f7fd fbb2 	bl	800aef8 <disk_read>
 800d794:	4603      	mov	r3, r0
 800d796:	2b00      	cmp	r3, #0
 800d798:	d004      	beq.n	800d7a4 <f_lseek+0x400>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2201      	movs	r2, #1
 800d79e:	755a      	strb	r2, [r3, #21]
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e004      	b.n	800d7ae <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7a8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d7aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3740      	adds	r7, #64	@ 0x40
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
	...

0800d7b8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800d7b8:	b590      	push	{r4, r7, lr}
 800d7ba:	b09d      	sub	sp, #116	@ 0x74
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	607a      	str	r2, [r7, #4]
 800d7c2:	603b      	str	r3, [r7, #0]
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800d7cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d7d0:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800d7d2:	f107 030c 	add.w	r3, r7, #12
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7fe fd6b 	bl	800c2b2 <get_ldnumber>
 800d7dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	da02      	bge.n	800d7ea <f_mkfs+0x32>
 800d7e4:	230b      	movs	r3, #11
 800d7e6:	f000 bc0d 	b.w	800e004 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800d7ea:	4a94      	ldr	r2, [pc, #592]	@ (800da3c <f_mkfs+0x284>)
 800d7ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d005      	beq.n	800d802 <f_mkfs+0x4a>
 800d7f6:	4a91      	ldr	r2, [pc, #580]	@ (800da3c <f_mkfs+0x284>)
 800d7f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7fe:	2200      	movs	r2, #0
 800d800:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800d802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d804:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800d808:	2300      	movs	r3, #0
 800d80a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800d80e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d812:	4618      	mov	r0, r3
 800d814:	f7fd fb4a 	bl	800aeac <disk_initialize>
 800d818:	4603      	mov	r3, r0
 800d81a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800d81e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d822:	f003 0301 	and.w	r3, r3, #1
 800d826:	2b00      	cmp	r3, #0
 800d828:	d001      	beq.n	800d82e <f_mkfs+0x76>
 800d82a:	2303      	movs	r3, #3
 800d82c:	e3ea      	b.n	800e004 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800d82e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d832:	f003 0304 	and.w	r3, r3, #4
 800d836:	2b00      	cmp	r3, #0
 800d838:	d001      	beq.n	800d83e <f_mkfs+0x86>
 800d83a:	230a      	movs	r3, #10
 800d83c:	e3e2      	b.n	800e004 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800d83e:	f107 0214 	add.w	r2, r7, #20
 800d842:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d846:	2103      	movs	r1, #3
 800d848:	4618      	mov	r0, r3
 800d84a:	f7fd fb95 	bl	800af78 <disk_ioctl>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10c      	bne.n	800d86e <f_mkfs+0xb6>
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d009      	beq.n	800d86e <f_mkfs+0xb6>
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d860:	d805      	bhi.n	800d86e <f_mkfs+0xb6>
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	1e5a      	subs	r2, r3, #1
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	4013      	ands	r3, r2
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d001      	beq.n	800d872 <f_mkfs+0xba>
 800d86e:	2301      	movs	r3, #1
 800d870:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800d872:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d876:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d003      	beq.n	800d886 <f_mkfs+0xce>
 800d87e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	429a      	cmp	r2, r3
 800d884:	d309      	bcc.n	800d89a <f_mkfs+0xe2>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d88c:	d805      	bhi.n	800d89a <f_mkfs+0xe2>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	1e5a      	subs	r2, r3, #1
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	4013      	ands	r3, r2
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <f_mkfs+0xe6>
 800d89a:	2313      	movs	r3, #19
 800d89c:	e3b2      	b.n	800e004 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800d89e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8a6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800d8ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d8ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d8b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800d8b8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8bc:	fb02 f303 	mul.w	r3, r2, r3
 800d8c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800d8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d101      	bne.n	800d8cc <f_mkfs+0x114>
 800d8c8:	230e      	movs	r3, #14
 800d8ca:	e39b      	b.n	800e004 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800d8cc:	f107 0210 	add.w	r2, r7, #16
 800d8d0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d8d4:	2101      	movs	r1, #1
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7fd fb4e 	bl	800af78 <disk_ioctl>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d001      	beq.n	800d8e6 <f_mkfs+0x12e>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e38e      	b.n	800e004 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800d8e6:	7afb      	ldrb	r3, [r7, #11]
 800d8e8:	f003 0308 	and.w	r3, r3, #8
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d001      	beq.n	800d8f4 <f_mkfs+0x13c>
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	e000      	b.n	800d8f6 <f_mkfs+0x13e>
 800d8f4:	233f      	movs	r3, #63	@ 0x3f
 800d8f6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d901      	bls.n	800d904 <f_mkfs+0x14c>
 800d900:	230e      	movs	r3, #14
 800d902:	e37f      	b.n	800e004 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800d904:	693a      	ldr	r2, [r7, #16]
 800d906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d908:	1ad3      	subs	r3, r2, r3
 800d90a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d910:	d801      	bhi.n	800d916 <f_mkfs+0x15e>
 800d912:	230e      	movs	r3, #14
 800d914:	e376      	b.n	800e004 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2b80      	cmp	r3, #128	@ 0x80
 800d91a:	d901      	bls.n	800d920 <f_mkfs+0x168>
 800d91c:	2313      	movs	r3, #19
 800d91e:	e371      	b.n	800e004 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800d920:	7afb      	ldrb	r3, [r7, #11]
 800d922:	f003 0302 	and.w	r3, r3, #2
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00d      	beq.n	800d946 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800d92a:	7afb      	ldrb	r3, [r7, #11]
 800d92c:	f003 0307 	and.w	r3, r3, #7
 800d930:	2b02      	cmp	r3, #2
 800d932:	d004      	beq.n	800d93e <f_mkfs+0x186>
 800d934:	7afb      	ldrb	r3, [r7, #11]
 800d936:	f003 0301 	and.w	r3, r3, #1
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d103      	bne.n	800d946 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800d93e:	2303      	movs	r3, #3
 800d940:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800d944:	e009      	b.n	800d95a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800d946:	7afb      	ldrb	r3, [r7, #11]
 800d948:	f003 0301 	and.w	r3, r3, #1
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d101      	bne.n	800d954 <f_mkfs+0x19c>
 800d950:	2313      	movs	r3, #19
 800d952:	e357      	b.n	800e004 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800d954:	2302      	movs	r3, #2
 800d956:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800d95e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d962:	2b03      	cmp	r3, #3
 800d964:	d13c      	bne.n	800d9e0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800d966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d11b      	bne.n	800d9a4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	0c5b      	lsrs	r3, r3, #17
 800d970:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d972:	2300      	movs	r3, #0
 800d974:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d976:	2301      	movs	r3, #1
 800d978:	653b      	str	r3, [r7, #80]	@ 0x50
 800d97a:	e005      	b.n	800d988 <f_mkfs+0x1d0>
 800d97c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d97e:	3301      	adds	r3, #1
 800d980:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d982:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d984:	005b      	lsls	r3, r3, #1
 800d986:	653b      	str	r3, [r7, #80]	@ 0x50
 800d988:	4a2d      	ldr	r2, [pc, #180]	@ (800da40 <f_mkfs+0x288>)
 800d98a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d98c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d007      	beq.n	800d9a4 <f_mkfs+0x1ec>
 800d994:	4a2a      	ldr	r2, [pc, #168]	@ (800da40 <f_mkfs+0x288>)
 800d996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d99c:	461a      	mov	r2, r3
 800d99e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d2eb      	bcs.n	800d97c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800d9a4:	693a      	ldr	r2, [r7, #16]
 800d9a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9ac:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800d9ae:	6a3b      	ldr	r3, [r7, #32]
 800d9b0:	3302      	adds	r3, #2
 800d9b2:	009a      	lsls	r2, r3, #2
 800d9b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d9b6:	4413      	add	r3, r2
 800d9b8:	1e5a      	subs	r2, r3, #1
 800d9ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d9bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9c0:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800d9c2:	2320      	movs	r3, #32
 800d9c4:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800d9ca:	6a3b      	ldr	r3, [r7, #32]
 800d9cc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d903      	bls.n	800d9dc <f_mkfs+0x224>
 800d9d4:	6a3b      	ldr	r3, [r7, #32]
 800d9d6:	4a1b      	ldr	r2, [pc, #108]	@ (800da44 <f_mkfs+0x28c>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d952      	bls.n	800da82 <f_mkfs+0x2ca>
 800d9dc:	230e      	movs	r3, #14
 800d9de:	e311      	b.n	800e004 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800d9e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d11b      	bne.n	800da1e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	0b1b      	lsrs	r3, r3, #12
 800d9ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800d9f4:	e005      	b.n	800da02 <f_mkfs+0x24a>
 800d9f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9fe:	005b      	lsls	r3, r3, #1
 800da00:	653b      	str	r3, [r7, #80]	@ 0x50
 800da02:	4a11      	ldr	r2, [pc, #68]	@ (800da48 <f_mkfs+0x290>)
 800da04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d007      	beq.n	800da1e <f_mkfs+0x266>
 800da0e:	4a0e      	ldr	r2, [pc, #56]	@ (800da48 <f_mkfs+0x290>)
 800da10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da16:	461a      	mov	r2, r3
 800da18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d2eb      	bcs.n	800d9f6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800da1e:	693a      	ldr	r2, [r7, #16]
 800da20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da22:	fbb2 f3f3 	udiv	r3, r2, r3
 800da26:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800da28:	6a3b      	ldr	r3, [r7, #32]
 800da2a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800da2e:	4293      	cmp	r3, r2
 800da30:	d90c      	bls.n	800da4c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800da32:	6a3b      	ldr	r3, [r7, #32]
 800da34:	3302      	adds	r3, #2
 800da36:	005b      	lsls	r3, r3, #1
 800da38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da3a:	e012      	b.n	800da62 <f_mkfs+0x2aa>
 800da3c:	200055f4 	.word	0x200055f4
 800da40:	08010f5c 	.word	0x08010f5c
 800da44:	0ffffff5 	.word	0x0ffffff5
 800da48:	08010f6c 	.word	0x08010f6c
				} else {
					fmt = FS_FAT12;
 800da4c:	2301      	movs	r3, #1
 800da4e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800da52:	6a3a      	ldr	r2, [r7, #32]
 800da54:	4613      	mov	r3, r2
 800da56:	005b      	lsls	r3, r3, #1
 800da58:	4413      	add	r3, r2
 800da5a:	3301      	adds	r3, #1
 800da5c:	085b      	lsrs	r3, r3, #1
 800da5e:	3303      	adds	r3, #3
 800da60:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800da62:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800da64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da66:	4413      	add	r3, r2
 800da68:	1e5a      	subs	r2, r3, #1
 800da6a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800da6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da70:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800da72:	2301      	movs	r3, #1
 800da74:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800da76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da78:	015a      	lsls	r2, r3, #5
 800da7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800da7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da80:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800da82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da86:	4413      	add	r3, r2
 800da88:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800da8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800da8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da8e:	fb03 f202 	mul.w	r2, r3, r2
 800da92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800da94:	4413      	add	r3, r2
 800da96:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800da98:	4413      	add	r3, r2
 800da9a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800da9c:	697a      	ldr	r2, [r7, #20]
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	4413      	add	r3, r2
 800daa2:	1e5a      	subs	r2, r3, #1
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	425b      	negs	r3, r3
 800daa8:	401a      	ands	r2, r3
 800daaa:	69fb      	ldr	r3, [r7, #28]
 800daac:	1ad3      	subs	r3, r2, r3
 800daae:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800dab0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dab4:	2b03      	cmp	r3, #3
 800dab6:	d108      	bne.n	800daca <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800dab8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800daba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dabc:	4413      	add	r3, r2
 800dabe:	657b      	str	r3, [r7, #84]	@ 0x54
 800dac0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dac4:	4413      	add	r3, r2
 800dac6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dac8:	e006      	b.n	800dad8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800daca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800dacc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dace:	fbb2 f3f3 	udiv	r3, r2, r3
 800dad2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800dad4:	4413      	add	r3, r2
 800dad6:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800dad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dada:	011a      	lsls	r2, r3, #4
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	441a      	add	r2, r3
 800dae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dae2:	1ad2      	subs	r2, r2, r3
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d901      	bls.n	800daee <f_mkfs+0x336>
 800daea:	230e      	movs	r3, #14
 800daec:	e28a      	b.n	800e004 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800daee:	693a      	ldr	r2, [r7, #16]
 800daf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daf2:	1ad2      	subs	r2, r2, r3
 800daf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800daf6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800daf8:	fb01 f303 	mul.w	r3, r1, r3
 800dafc:	1ad2      	subs	r2, r2, r3
 800dafe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db00:	1ad2      	subs	r2, r2, r3
 800db02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db04:	fbb2 f3f3 	udiv	r3, r2, r3
 800db08:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800db0a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800db0e:	2b03      	cmp	r3, #3
 800db10:	d10f      	bne.n	800db32 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800db12:	6a3b      	ldr	r3, [r7, #32]
 800db14:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800db18:	4293      	cmp	r3, r2
 800db1a:	d80a      	bhi.n	800db32 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d105      	bne.n	800db2e <f_mkfs+0x376>
 800db22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db24:	085b      	lsrs	r3, r3, #1
 800db26:	607b      	str	r3, [r7, #4]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d144      	bne.n	800dbb8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800db2e:	230e      	movs	r3, #14
 800db30:	e268      	b.n	800e004 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800db32:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800db36:	2b02      	cmp	r3, #2
 800db38:	d133      	bne.n	800dba2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800db3a:	6a3b      	ldr	r3, [r7, #32]
 800db3c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800db40:	4293      	cmp	r3, r2
 800db42:	d91e      	bls.n	800db82 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d107      	bne.n	800db5a <f_mkfs+0x3a2>
 800db4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db4c:	005b      	lsls	r3, r3, #1
 800db4e:	2b40      	cmp	r3, #64	@ 0x40
 800db50:	d803      	bhi.n	800db5a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800db52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db54:	005b      	lsls	r3, r3, #1
 800db56:	607b      	str	r3, [r7, #4]
 800db58:	e033      	b.n	800dbc2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800db5a:	7afb      	ldrb	r3, [r7, #11]
 800db5c:	f003 0302 	and.w	r3, r3, #2
 800db60:	2b00      	cmp	r3, #0
 800db62:	d003      	beq.n	800db6c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800db64:	2303      	movs	r3, #3
 800db66:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800db6a:	e02a      	b.n	800dbc2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d105      	bne.n	800db7e <f_mkfs+0x3c6>
 800db72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db74:	005b      	lsls	r3, r3, #1
 800db76:	607b      	str	r3, [r7, #4]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2b80      	cmp	r3, #128	@ 0x80
 800db7c:	d91e      	bls.n	800dbbc <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800db7e:	230e      	movs	r3, #14
 800db80:	e240      	b.n	800e004 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800db82:	6a3b      	ldr	r3, [r7, #32]
 800db84:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800db88:	4293      	cmp	r3, r2
 800db8a:	d80a      	bhi.n	800dba2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d105      	bne.n	800db9e <f_mkfs+0x3e6>
 800db92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db94:	005b      	lsls	r3, r3, #1
 800db96:	607b      	str	r3, [r7, #4]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2b80      	cmp	r3, #128	@ 0x80
 800db9c:	d910      	bls.n	800dbc0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800db9e:	230e      	movs	r3, #14
 800dba0:	e230      	b.n	800e004 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800dba2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d10c      	bne.n	800dbc4 <f_mkfs+0x40c>
 800dbaa:	6a3b      	ldr	r3, [r7, #32]
 800dbac:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d907      	bls.n	800dbc4 <f_mkfs+0x40c>
 800dbb4:	230e      	movs	r3, #14
 800dbb6:	e225      	b.n	800e004 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800dbb8:	bf00      	nop
 800dbba:	e6ce      	b.n	800d95a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800dbbc:	bf00      	nop
 800dbbe:	e6cc      	b.n	800d95a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800dbc0:	bf00      	nop
			pau = au;
 800dbc2:	e6ca      	b.n	800d95a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800dbc4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800dbc6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dbc8:	461a      	mov	r2, r3
 800dbca:	2100      	movs	r1, #0
 800dbcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dbce:	f7fd fa94 	bl	800b0fa <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800dbd2:	220b      	movs	r2, #11
 800dbd4:	49b2      	ldr	r1, [pc, #712]	@ (800dea0 <f_mkfs+0x6e8>)
 800dbd6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dbd8:	f7fd fa6e 	bl	800b0b8 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800dbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbde:	330b      	adds	r3, #11
 800dbe0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dbe2:	4611      	mov	r1, r2
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7fd fa20 	bl	800b02a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800dbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbec:	330d      	adds	r3, #13
 800dbee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dbf0:	b2d2      	uxtb	r2, r2
 800dbf2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800dbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf6:	330e      	adds	r3, #14
 800dbf8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dbfa:	b292      	uxth	r2, r2
 800dbfc:	4611      	mov	r1, r2
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fd fa13 	bl	800b02a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800dc04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc06:	3310      	adds	r3, #16
 800dc08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dc0a:	b2d2      	uxtb	r2, r2
 800dc0c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800dc0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc10:	f103 0211 	add.w	r2, r3, #17
 800dc14:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dc18:	2b03      	cmp	r3, #3
 800dc1a:	d002      	beq.n	800dc22 <f_mkfs+0x46a>
 800dc1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	e000      	b.n	800dc24 <f_mkfs+0x46c>
 800dc22:	2300      	movs	r3, #0
 800dc24:	4619      	mov	r1, r3
 800dc26:	4610      	mov	r0, r2
 800dc28:	f7fd f9ff 	bl	800b02a <st_word>
		if (sz_vol < 0x10000) {
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc32:	d208      	bcs.n	800dc46 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800dc34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc36:	3313      	adds	r3, #19
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	b292      	uxth	r2, r2
 800dc3c:	4611      	mov	r1, r2
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7fd f9f3 	bl	800b02a <st_word>
 800dc44:	e006      	b.n	800dc54 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800dc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc48:	3320      	adds	r3, #32
 800dc4a:	693a      	ldr	r2, [r7, #16]
 800dc4c:	4611      	mov	r1, r2
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fd fa06 	bl	800b060 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800dc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc56:	3315      	adds	r3, #21
 800dc58:	22f8      	movs	r2, #248	@ 0xf8
 800dc5a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800dc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc5e:	3318      	adds	r3, #24
 800dc60:	213f      	movs	r1, #63	@ 0x3f
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7fd f9e1 	bl	800b02a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800dc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc6a:	331a      	adds	r3, #26
 800dc6c:	21ff      	movs	r1, #255	@ 0xff
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7fd f9db 	bl	800b02a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800dc74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc76:	331c      	adds	r3, #28
 800dc78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fd f9f0 	bl	800b060 <st_dword>
		if (fmt == FS_FAT32) {
 800dc80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dc84:	2b03      	cmp	r3, #3
 800dc86:	d131      	bne.n	800dcec <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800dc88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc8a:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800dc8e:	f7fc feb1 	bl	800a9f4 <get_fattime>
 800dc92:	4603      	mov	r3, r0
 800dc94:	4619      	mov	r1, r3
 800dc96:	4620      	mov	r0, r4
 800dc98:	f7fd f9e2 	bl	800b060 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800dc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9e:	3324      	adds	r3, #36	@ 0x24
 800dca0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7fd f9dc 	bl	800b060 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800dca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcaa:	332c      	adds	r3, #44	@ 0x2c
 800dcac:	2102      	movs	r1, #2
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7fd f9d6 	bl	800b060 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800dcb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcb6:	3330      	adds	r3, #48	@ 0x30
 800dcb8:	2101      	movs	r1, #1
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fd f9b5 	bl	800b02a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800dcc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc2:	3332      	adds	r3, #50	@ 0x32
 800dcc4:	2106      	movs	r1, #6
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7fd f9af 	bl	800b02a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800dccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcce:	3340      	adds	r3, #64	@ 0x40
 800dcd0:	2280      	movs	r2, #128	@ 0x80
 800dcd2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800dcd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd6:	3342      	adds	r3, #66	@ 0x42
 800dcd8:	2229      	movs	r2, #41	@ 0x29
 800dcda:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800dcdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcde:	3347      	adds	r3, #71	@ 0x47
 800dce0:	2213      	movs	r2, #19
 800dce2:	4970      	ldr	r1, [pc, #448]	@ (800dea4 <f_mkfs+0x6ec>)
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7fd f9e7 	bl	800b0b8 <mem_cpy>
 800dcea:	e020      	b.n	800dd2e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800dcec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcee:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800dcf2:	f7fc fe7f 	bl	800a9f4 <get_fattime>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	f7fd f9b0 	bl	800b060 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800dd00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd02:	3316      	adds	r3, #22
 800dd04:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800dd06:	b292      	uxth	r2, r2
 800dd08:	4611      	mov	r1, r2
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7fd f98d 	bl	800b02a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800dd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd12:	3324      	adds	r3, #36	@ 0x24
 800dd14:	2280      	movs	r2, #128	@ 0x80
 800dd16:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800dd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd1a:	3326      	adds	r3, #38	@ 0x26
 800dd1c:	2229      	movs	r2, #41	@ 0x29
 800dd1e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800dd20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd22:	332b      	adds	r3, #43	@ 0x2b
 800dd24:	2213      	movs	r2, #19
 800dd26:	4960      	ldr	r1, [pc, #384]	@ (800dea8 <f_mkfs+0x6f0>)
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7fd f9c5 	bl	800b0b8 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800dd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd30:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dd34:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7fd f976 	bl	800b02a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800dd3e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800dd42:	2301      	movs	r3, #1
 800dd44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dd48:	f7fd f8f6 	bl	800af38 <disk_write>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d001      	beq.n	800dd56 <f_mkfs+0x59e>
 800dd52:	2301      	movs	r3, #1
 800dd54:	e156      	b.n	800e004 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800dd56:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dd5a:	2b03      	cmp	r3, #3
 800dd5c:	d140      	bne.n	800dde0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd60:	1d9a      	adds	r2, r3, #6
 800dd62:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800dd66:	2301      	movs	r3, #1
 800dd68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dd6a:	f7fd f8e5 	bl	800af38 <disk_write>
			mem_set(buf, 0, ss);
 800dd6e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dd70:	461a      	mov	r2, r3
 800dd72:	2100      	movs	r1, #0
 800dd74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd76:	f7fd f9c0 	bl	800b0fa <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800dd7a:	494c      	ldr	r1, [pc, #304]	@ (800deac <f_mkfs+0x6f4>)
 800dd7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd7e:	f7fd f96f 	bl	800b060 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800dd82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd84:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800dd88:	4949      	ldr	r1, [pc, #292]	@ (800deb0 <f_mkfs+0x6f8>)
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7fd f968 	bl	800b060 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800dd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd92:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800dd96:	6a3b      	ldr	r3, [r7, #32]
 800dd98:	3b01      	subs	r3, #1
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	4610      	mov	r0, r2
 800dd9e:	f7fd f95f 	bl	800b060 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800dda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800dda8:	2102      	movs	r1, #2
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7fd f958 	bl	800b060 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800ddb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ddb6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fd f935 	bl	800b02a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800ddc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc2:	1dda      	adds	r2, r3, #7
 800ddc4:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800ddc8:	2301      	movs	r3, #1
 800ddca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ddcc:	f7fd f8b4 	bl	800af38 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd2:	1c5a      	adds	r2, r3, #1
 800ddd4:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800ddd8:	2301      	movs	r3, #1
 800ddda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dddc:	f7fd f8ac 	bl	800af38 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800dde0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dde2:	2100      	movs	r1, #0
 800dde4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dde6:	f7fd f988 	bl	800b0fa <mem_set>
		sect = b_fat;		/* FAT start sector */
 800ddea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ddec:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ddee:	2300      	movs	r3, #0
 800ddf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ddf2:	e04b      	b.n	800de8c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800ddf4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ddf8:	2b03      	cmp	r3, #3
 800ddfa:	d113      	bne.n	800de24 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800ddfc:	f06f 0107 	mvn.w	r1, #7
 800de00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de02:	f7fd f92d 	bl	800b060 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800de06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de08:	3304      	adds	r3, #4
 800de0a:	f04f 31ff 	mov.w	r1, #4294967295
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fd f926 	bl	800b060 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800de14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de16:	3308      	adds	r3, #8
 800de18:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7fd f91f 	bl	800b060 <st_dword>
 800de22:	e00b      	b.n	800de3c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800de24:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d101      	bne.n	800de30 <f_mkfs+0x678>
 800de2c:	4b21      	ldr	r3, [pc, #132]	@ (800deb4 <f_mkfs+0x6fc>)
 800de2e:	e001      	b.n	800de34 <f_mkfs+0x67c>
 800de30:	f06f 0307 	mvn.w	r3, #7
 800de34:	4619      	mov	r1, r3
 800de36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de38:	f7fd f912 	bl	800b060 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800de3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de3e:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800de40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800de42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de44:	4293      	cmp	r3, r2
 800de46:	bf28      	it	cs
 800de48:	4613      	movcs	r3, r2
 800de4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800de4c:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800de50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de52:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800de54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800de56:	f7fd f86f 	bl	800af38 <disk_write>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d001      	beq.n	800de64 <f_mkfs+0x6ac>
 800de60:	2301      	movs	r3, #1
 800de62:	e0cf      	b.n	800e004 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800de64:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800de66:	461a      	mov	r2, r3
 800de68:	2100      	movs	r1, #0
 800de6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de6c:	f7fd f945 	bl	800b0fa <mem_set>
				sect += n; nsect -= n;
 800de70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800de72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de74:	4413      	add	r3, r2
 800de76:	667b      	str	r3, [r7, #100]	@ 0x64
 800de78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800de7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de7c:	1ad3      	subs	r3, r2, r3
 800de7e:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 800de80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1dc      	bne.n	800de40 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800de86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de88:	3301      	adds	r3, #1
 800de8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de90:	429a      	cmp	r2, r3
 800de92:	d3af      	bcc.n	800ddf4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800de94:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800de98:	2b03      	cmp	r3, #3
 800de9a:	d10d      	bne.n	800deb8 <f_mkfs+0x700>
 800de9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de9e:	e00c      	b.n	800deba <f_mkfs+0x702>
 800dea0:	08010e74 	.word	0x08010e74
 800dea4:	08010e80 	.word	0x08010e80
 800dea8:	08010e94 	.word	0x08010e94
 800deac:	41615252 	.word	0x41615252
 800deb0:	61417272 	.word	0x61417272
 800deb4:	00fffff8 	.word	0x00fffff8
 800deb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800deba:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800debc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800debe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec0:	4293      	cmp	r3, r2
 800dec2:	bf28      	it	cs
 800dec4:	4613      	movcs	r3, r2
 800dec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800dec8:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800decc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dece:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ded0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ded2:	f7fd f831 	bl	800af38 <disk_write>
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d001      	beq.n	800dee0 <f_mkfs+0x728>
 800dedc:	2301      	movs	r3, #1
 800dede:	e091      	b.n	800e004 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800dee0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dee4:	4413      	add	r3, r2
 800dee6:	667b      	str	r3, [r7, #100]	@ 0x64
 800dee8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800deea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800deec:	1ad3      	subs	r3, r2, r3
 800deee:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 800def0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800def2:	2b00      	cmp	r3, #0
 800def4:	d1e2      	bne.n	800debc <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800def6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800defa:	2b03      	cmp	r3, #3
 800defc:	d103      	bne.n	800df06 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800defe:	230c      	movs	r3, #12
 800df00:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800df04:	e010      	b.n	800df28 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df0c:	d303      	bcc.n	800df16 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800df0e:	2306      	movs	r3, #6
 800df10:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800df14:	e008      	b.n	800df28 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800df16:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800df1a:	2b02      	cmp	r3, #2
 800df1c:	d101      	bne.n	800df22 <f_mkfs+0x76a>
 800df1e:	2304      	movs	r3, #4
 800df20:	e000      	b.n	800df24 <f_mkfs+0x76c>
 800df22:	2301      	movs	r3, #1
 800df24:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800df28:	7afb      	ldrb	r3, [r7, #11]
 800df2a:	f003 0308 	and.w	r3, r3, #8
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d15b      	bne.n	800dfea <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800df32:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800df34:	461a      	mov	r2, r3
 800df36:	2100      	movs	r1, #0
 800df38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df3a:	f7fd f8de 	bl	800b0fa <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800df3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df40:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800df44:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fd f86e 	bl	800b02a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800df4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df50:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800df54:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	2200      	movs	r2, #0
 800df5a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	3301      	adds	r3, #1
 800df60:	2201      	movs	r2, #1
 800df62:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800df64:	69bb      	ldr	r3, [r7, #24]
 800df66:	3302      	adds	r3, #2
 800df68:	2201      	movs	r2, #1
 800df6a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800df6c:	69bb      	ldr	r3, [r7, #24]
 800df6e:	3303      	adds	r3, #3
 800df70:	2200      	movs	r2, #0
 800df72:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800df74:	69bb      	ldr	r3, [r7, #24]
 800df76:	3304      	adds	r3, #4
 800df78:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800df7c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df82:	441a      	add	r2, r3
 800df84:	4b21      	ldr	r3, [pc, #132]	@ (800e00c <f_mkfs+0x854>)
 800df86:	fba3 1302 	umull	r1, r3, r3, r2
 800df8a:	1ad2      	subs	r2, r2, r3
 800df8c:	0852      	lsrs	r2, r2, #1
 800df8e:	4413      	add	r3, r2
 800df90:	0b5b      	lsrs	r3, r3, #13
 800df92:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	3305      	adds	r3, #5
 800df98:	22fe      	movs	r2, #254	@ 0xfe
 800df9a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800df9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df9e:	089b      	lsrs	r3, r3, #2
 800dfa0:	b2da      	uxtb	r2, r3
 800dfa2:	69bb      	ldr	r3, [r7, #24]
 800dfa4:	3306      	adds	r3, #6
 800dfa6:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800dfaa:	b2d2      	uxtb	r2, r2
 800dfac:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	3307      	adds	r3, #7
 800dfb2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800dfb4:	b2d2      	uxtb	r2, r2
 800dfb6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	3308      	adds	r3, #8
 800dfbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fd f84e 	bl	800b060 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	330c      	adds	r3, #12
 800dfc8:	693a      	ldr	r2, [r7, #16]
 800dfca:	4611      	mov	r1, r2
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7fd f847 	bl	800b060 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800dfd2:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	2200      	movs	r2, #0
 800dfda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dfdc:	f7fc ffac 	bl	800af38 <disk_write>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d001      	beq.n	800dfea <f_mkfs+0x832>
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	e00c      	b.n	800e004 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800dfea:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800dfee:	2200      	movs	r2, #0
 800dff0:	2100      	movs	r1, #0
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7fc ffc0 	bl	800af78 <disk_ioctl>
 800dff8:	4603      	mov	r3, r0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d001      	beq.n	800e002 <f_mkfs+0x84a>
 800dffe:	2301      	movs	r3, #1
 800e000:	e000      	b.n	800e004 <f_mkfs+0x84c>

	return FR_OK;
 800e002:	2300      	movs	r3, #0
}
 800e004:	4618      	mov	r0, r3
 800e006:	3774      	adds	r7, #116	@ 0x74
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd90      	pop	{r4, r7, pc}
 800e00c:	0515565b 	.word	0x0515565b

0800e010 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e010:	b480      	push	{r7}
 800e012:	b087      	sub	sp, #28
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	4613      	mov	r3, r2
 800e01c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e01e:	2301      	movs	r3, #1
 800e020:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e022:	2300      	movs	r3, #0
 800e024:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e026:	4b1f      	ldr	r3, [pc, #124]	@ (800e0a4 <FATFS_LinkDriverEx+0x94>)
 800e028:	7a5b      	ldrb	r3, [r3, #9]
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d131      	bne.n	800e094 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e030:	4b1c      	ldr	r3, [pc, #112]	@ (800e0a4 <FATFS_LinkDriverEx+0x94>)
 800e032:	7a5b      	ldrb	r3, [r3, #9]
 800e034:	b2db      	uxtb	r3, r3
 800e036:	461a      	mov	r2, r3
 800e038:	4b1a      	ldr	r3, [pc, #104]	@ (800e0a4 <FATFS_LinkDriverEx+0x94>)
 800e03a:	2100      	movs	r1, #0
 800e03c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e03e:	4b19      	ldr	r3, [pc, #100]	@ (800e0a4 <FATFS_LinkDriverEx+0x94>)
 800e040:	7a5b      	ldrb	r3, [r3, #9]
 800e042:	b2db      	uxtb	r3, r3
 800e044:	4a17      	ldr	r2, [pc, #92]	@ (800e0a4 <FATFS_LinkDriverEx+0x94>)
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	4413      	add	r3, r2
 800e04a:	68fa      	ldr	r2, [r7, #12]
 800e04c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e04e:	4b15      	ldr	r3, [pc, #84]	@ (800e0a4 <FATFS_LinkDriverEx+0x94>)
 800e050:	7a5b      	ldrb	r3, [r3, #9]
 800e052:	b2db      	uxtb	r3, r3
 800e054:	461a      	mov	r2, r3
 800e056:	4b13      	ldr	r3, [pc, #76]	@ (800e0a4 <FATFS_LinkDriverEx+0x94>)
 800e058:	4413      	add	r3, r2
 800e05a:	79fa      	ldrb	r2, [r7, #7]
 800e05c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e05e:	4b11      	ldr	r3, [pc, #68]	@ (800e0a4 <FATFS_LinkDriverEx+0x94>)
 800e060:	7a5b      	ldrb	r3, [r3, #9]
 800e062:	b2db      	uxtb	r3, r3
 800e064:	1c5a      	adds	r2, r3, #1
 800e066:	b2d1      	uxtb	r1, r2
 800e068:	4a0e      	ldr	r2, [pc, #56]	@ (800e0a4 <FATFS_LinkDriverEx+0x94>)
 800e06a:	7251      	strb	r1, [r2, #9]
 800e06c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e06e:	7dbb      	ldrb	r3, [r7, #22]
 800e070:	3330      	adds	r3, #48	@ 0x30
 800e072:	b2da      	uxtb	r2, r3
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	3301      	adds	r3, #1
 800e07c:	223a      	movs	r2, #58	@ 0x3a
 800e07e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	3302      	adds	r3, #2
 800e084:	222f      	movs	r2, #47	@ 0x2f
 800e086:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	3303      	adds	r3, #3
 800e08c:	2200      	movs	r2, #0
 800e08e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e090:	2300      	movs	r3, #0
 800e092:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e094:	7dfb      	ldrb	r3, [r7, #23]
}
 800e096:	4618      	mov	r0, r3
 800e098:	371c      	adds	r7, #28
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr
 800e0a2:	bf00      	nop
 800e0a4:	2000561c 	.word	0x2000561c

0800e0a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	6839      	ldr	r1, [r7, #0]
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f7ff ffaa 	bl	800e010 <FATFS_LinkDriverEx>
 800e0bc:	4603      	mov	r3, r0
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3708      	adds	r7, #8
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <__cvt>:
 800e0c6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0ca:	ec57 6b10 	vmov	r6, r7, d0
 800e0ce:	2f00      	cmp	r7, #0
 800e0d0:	460c      	mov	r4, r1
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	463b      	mov	r3, r7
 800e0d6:	bfbb      	ittet	lt
 800e0d8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e0dc:	461f      	movlt	r7, r3
 800e0de:	2300      	movge	r3, #0
 800e0e0:	232d      	movlt	r3, #45	@ 0x2d
 800e0e2:	700b      	strb	r3, [r1, #0]
 800e0e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0e6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e0ea:	4691      	mov	r9, r2
 800e0ec:	f023 0820 	bic.w	r8, r3, #32
 800e0f0:	bfbc      	itt	lt
 800e0f2:	4632      	movlt	r2, r6
 800e0f4:	4616      	movlt	r6, r2
 800e0f6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e0fa:	d005      	beq.n	800e108 <__cvt+0x42>
 800e0fc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e100:	d100      	bne.n	800e104 <__cvt+0x3e>
 800e102:	3401      	adds	r4, #1
 800e104:	2102      	movs	r1, #2
 800e106:	e000      	b.n	800e10a <__cvt+0x44>
 800e108:	2103      	movs	r1, #3
 800e10a:	ab03      	add	r3, sp, #12
 800e10c:	9301      	str	r3, [sp, #4]
 800e10e:	ab02      	add	r3, sp, #8
 800e110:	9300      	str	r3, [sp, #0]
 800e112:	ec47 6b10 	vmov	d0, r6, r7
 800e116:	4653      	mov	r3, sl
 800e118:	4622      	mov	r2, r4
 800e11a:	f000 ff3d 	bl	800ef98 <_dtoa_r>
 800e11e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e122:	4605      	mov	r5, r0
 800e124:	d119      	bne.n	800e15a <__cvt+0x94>
 800e126:	f019 0f01 	tst.w	r9, #1
 800e12a:	d00e      	beq.n	800e14a <__cvt+0x84>
 800e12c:	eb00 0904 	add.w	r9, r0, r4
 800e130:	2200      	movs	r2, #0
 800e132:	2300      	movs	r3, #0
 800e134:	4630      	mov	r0, r6
 800e136:	4639      	mov	r1, r7
 800e138:	f7f2 fce6 	bl	8000b08 <__aeabi_dcmpeq>
 800e13c:	b108      	cbz	r0, 800e142 <__cvt+0x7c>
 800e13e:	f8cd 900c 	str.w	r9, [sp, #12]
 800e142:	2230      	movs	r2, #48	@ 0x30
 800e144:	9b03      	ldr	r3, [sp, #12]
 800e146:	454b      	cmp	r3, r9
 800e148:	d31e      	bcc.n	800e188 <__cvt+0xc2>
 800e14a:	9b03      	ldr	r3, [sp, #12]
 800e14c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e14e:	1b5b      	subs	r3, r3, r5
 800e150:	4628      	mov	r0, r5
 800e152:	6013      	str	r3, [r2, #0]
 800e154:	b004      	add	sp, #16
 800e156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e15a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e15e:	eb00 0904 	add.w	r9, r0, r4
 800e162:	d1e5      	bne.n	800e130 <__cvt+0x6a>
 800e164:	7803      	ldrb	r3, [r0, #0]
 800e166:	2b30      	cmp	r3, #48	@ 0x30
 800e168:	d10a      	bne.n	800e180 <__cvt+0xba>
 800e16a:	2200      	movs	r2, #0
 800e16c:	2300      	movs	r3, #0
 800e16e:	4630      	mov	r0, r6
 800e170:	4639      	mov	r1, r7
 800e172:	f7f2 fcc9 	bl	8000b08 <__aeabi_dcmpeq>
 800e176:	b918      	cbnz	r0, 800e180 <__cvt+0xba>
 800e178:	f1c4 0401 	rsb	r4, r4, #1
 800e17c:	f8ca 4000 	str.w	r4, [sl]
 800e180:	f8da 3000 	ldr.w	r3, [sl]
 800e184:	4499      	add	r9, r3
 800e186:	e7d3      	b.n	800e130 <__cvt+0x6a>
 800e188:	1c59      	adds	r1, r3, #1
 800e18a:	9103      	str	r1, [sp, #12]
 800e18c:	701a      	strb	r2, [r3, #0]
 800e18e:	e7d9      	b.n	800e144 <__cvt+0x7e>

0800e190 <__exponent>:
 800e190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e192:	2900      	cmp	r1, #0
 800e194:	bfba      	itte	lt
 800e196:	4249      	neglt	r1, r1
 800e198:	232d      	movlt	r3, #45	@ 0x2d
 800e19a:	232b      	movge	r3, #43	@ 0x2b
 800e19c:	2909      	cmp	r1, #9
 800e19e:	7002      	strb	r2, [r0, #0]
 800e1a0:	7043      	strb	r3, [r0, #1]
 800e1a2:	dd29      	ble.n	800e1f8 <__exponent+0x68>
 800e1a4:	f10d 0307 	add.w	r3, sp, #7
 800e1a8:	461d      	mov	r5, r3
 800e1aa:	270a      	movs	r7, #10
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	fbb1 f6f7 	udiv	r6, r1, r7
 800e1b2:	fb07 1416 	mls	r4, r7, r6, r1
 800e1b6:	3430      	adds	r4, #48	@ 0x30
 800e1b8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e1bc:	460c      	mov	r4, r1
 800e1be:	2c63      	cmp	r4, #99	@ 0x63
 800e1c0:	f103 33ff 	add.w	r3, r3, #4294967295
 800e1c4:	4631      	mov	r1, r6
 800e1c6:	dcf1      	bgt.n	800e1ac <__exponent+0x1c>
 800e1c8:	3130      	adds	r1, #48	@ 0x30
 800e1ca:	1e94      	subs	r4, r2, #2
 800e1cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e1d0:	1c41      	adds	r1, r0, #1
 800e1d2:	4623      	mov	r3, r4
 800e1d4:	42ab      	cmp	r3, r5
 800e1d6:	d30a      	bcc.n	800e1ee <__exponent+0x5e>
 800e1d8:	f10d 0309 	add.w	r3, sp, #9
 800e1dc:	1a9b      	subs	r3, r3, r2
 800e1de:	42ac      	cmp	r4, r5
 800e1e0:	bf88      	it	hi
 800e1e2:	2300      	movhi	r3, #0
 800e1e4:	3302      	adds	r3, #2
 800e1e6:	4403      	add	r3, r0
 800e1e8:	1a18      	subs	r0, r3, r0
 800e1ea:	b003      	add	sp, #12
 800e1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1ee:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e1f2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e1f6:	e7ed      	b.n	800e1d4 <__exponent+0x44>
 800e1f8:	2330      	movs	r3, #48	@ 0x30
 800e1fa:	3130      	adds	r1, #48	@ 0x30
 800e1fc:	7083      	strb	r3, [r0, #2]
 800e1fe:	70c1      	strb	r1, [r0, #3]
 800e200:	1d03      	adds	r3, r0, #4
 800e202:	e7f1      	b.n	800e1e8 <__exponent+0x58>

0800e204 <_printf_float>:
 800e204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e208:	b08d      	sub	sp, #52	@ 0x34
 800e20a:	460c      	mov	r4, r1
 800e20c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e210:	4616      	mov	r6, r2
 800e212:	461f      	mov	r7, r3
 800e214:	4605      	mov	r5, r0
 800e216:	f000 fdbf 	bl	800ed98 <_localeconv_r>
 800e21a:	6803      	ldr	r3, [r0, #0]
 800e21c:	9304      	str	r3, [sp, #16]
 800e21e:	4618      	mov	r0, r3
 800e220:	f7f2 f846 	bl	80002b0 <strlen>
 800e224:	2300      	movs	r3, #0
 800e226:	930a      	str	r3, [sp, #40]	@ 0x28
 800e228:	f8d8 3000 	ldr.w	r3, [r8]
 800e22c:	9005      	str	r0, [sp, #20]
 800e22e:	3307      	adds	r3, #7
 800e230:	f023 0307 	bic.w	r3, r3, #7
 800e234:	f103 0208 	add.w	r2, r3, #8
 800e238:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e23c:	f8d4 b000 	ldr.w	fp, [r4]
 800e240:	f8c8 2000 	str.w	r2, [r8]
 800e244:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e248:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e24c:	9307      	str	r3, [sp, #28]
 800e24e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e252:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e256:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e25a:	4b9c      	ldr	r3, [pc, #624]	@ (800e4cc <_printf_float+0x2c8>)
 800e25c:	f04f 32ff 	mov.w	r2, #4294967295
 800e260:	f7f2 fc84 	bl	8000b6c <__aeabi_dcmpun>
 800e264:	bb70      	cbnz	r0, 800e2c4 <_printf_float+0xc0>
 800e266:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e26a:	4b98      	ldr	r3, [pc, #608]	@ (800e4cc <_printf_float+0x2c8>)
 800e26c:	f04f 32ff 	mov.w	r2, #4294967295
 800e270:	f7f2 fc5e 	bl	8000b30 <__aeabi_dcmple>
 800e274:	bb30      	cbnz	r0, 800e2c4 <_printf_float+0xc0>
 800e276:	2200      	movs	r2, #0
 800e278:	2300      	movs	r3, #0
 800e27a:	4640      	mov	r0, r8
 800e27c:	4649      	mov	r1, r9
 800e27e:	f7f2 fc4d 	bl	8000b1c <__aeabi_dcmplt>
 800e282:	b110      	cbz	r0, 800e28a <_printf_float+0x86>
 800e284:	232d      	movs	r3, #45	@ 0x2d
 800e286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e28a:	4a91      	ldr	r2, [pc, #580]	@ (800e4d0 <_printf_float+0x2cc>)
 800e28c:	4b91      	ldr	r3, [pc, #580]	@ (800e4d4 <_printf_float+0x2d0>)
 800e28e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e292:	bf94      	ite	ls
 800e294:	4690      	movls	r8, r2
 800e296:	4698      	movhi	r8, r3
 800e298:	2303      	movs	r3, #3
 800e29a:	6123      	str	r3, [r4, #16]
 800e29c:	f02b 0304 	bic.w	r3, fp, #4
 800e2a0:	6023      	str	r3, [r4, #0]
 800e2a2:	f04f 0900 	mov.w	r9, #0
 800e2a6:	9700      	str	r7, [sp, #0]
 800e2a8:	4633      	mov	r3, r6
 800e2aa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e2ac:	4621      	mov	r1, r4
 800e2ae:	4628      	mov	r0, r5
 800e2b0:	f000 f9d2 	bl	800e658 <_printf_common>
 800e2b4:	3001      	adds	r0, #1
 800e2b6:	f040 808d 	bne.w	800e3d4 <_printf_float+0x1d0>
 800e2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e2be:	b00d      	add	sp, #52	@ 0x34
 800e2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c4:	4642      	mov	r2, r8
 800e2c6:	464b      	mov	r3, r9
 800e2c8:	4640      	mov	r0, r8
 800e2ca:	4649      	mov	r1, r9
 800e2cc:	f7f2 fc4e 	bl	8000b6c <__aeabi_dcmpun>
 800e2d0:	b140      	cbz	r0, 800e2e4 <_printf_float+0xe0>
 800e2d2:	464b      	mov	r3, r9
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	bfbc      	itt	lt
 800e2d8:	232d      	movlt	r3, #45	@ 0x2d
 800e2da:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e2de:	4a7e      	ldr	r2, [pc, #504]	@ (800e4d8 <_printf_float+0x2d4>)
 800e2e0:	4b7e      	ldr	r3, [pc, #504]	@ (800e4dc <_printf_float+0x2d8>)
 800e2e2:	e7d4      	b.n	800e28e <_printf_float+0x8a>
 800e2e4:	6863      	ldr	r3, [r4, #4]
 800e2e6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e2ea:	9206      	str	r2, [sp, #24]
 800e2ec:	1c5a      	adds	r2, r3, #1
 800e2ee:	d13b      	bne.n	800e368 <_printf_float+0x164>
 800e2f0:	2306      	movs	r3, #6
 800e2f2:	6063      	str	r3, [r4, #4]
 800e2f4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	6022      	str	r2, [r4, #0]
 800e2fc:	9303      	str	r3, [sp, #12]
 800e2fe:	ab0a      	add	r3, sp, #40	@ 0x28
 800e300:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e304:	ab09      	add	r3, sp, #36	@ 0x24
 800e306:	9300      	str	r3, [sp, #0]
 800e308:	6861      	ldr	r1, [r4, #4]
 800e30a:	ec49 8b10 	vmov	d0, r8, r9
 800e30e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e312:	4628      	mov	r0, r5
 800e314:	f7ff fed7 	bl	800e0c6 <__cvt>
 800e318:	9b06      	ldr	r3, [sp, #24]
 800e31a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e31c:	2b47      	cmp	r3, #71	@ 0x47
 800e31e:	4680      	mov	r8, r0
 800e320:	d129      	bne.n	800e376 <_printf_float+0x172>
 800e322:	1cc8      	adds	r0, r1, #3
 800e324:	db02      	blt.n	800e32c <_printf_float+0x128>
 800e326:	6863      	ldr	r3, [r4, #4]
 800e328:	4299      	cmp	r1, r3
 800e32a:	dd41      	ble.n	800e3b0 <_printf_float+0x1ac>
 800e32c:	f1aa 0a02 	sub.w	sl, sl, #2
 800e330:	fa5f fa8a 	uxtb.w	sl, sl
 800e334:	3901      	subs	r1, #1
 800e336:	4652      	mov	r2, sl
 800e338:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e33c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e33e:	f7ff ff27 	bl	800e190 <__exponent>
 800e342:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e344:	1813      	adds	r3, r2, r0
 800e346:	2a01      	cmp	r2, #1
 800e348:	4681      	mov	r9, r0
 800e34a:	6123      	str	r3, [r4, #16]
 800e34c:	dc02      	bgt.n	800e354 <_printf_float+0x150>
 800e34e:	6822      	ldr	r2, [r4, #0]
 800e350:	07d2      	lsls	r2, r2, #31
 800e352:	d501      	bpl.n	800e358 <_printf_float+0x154>
 800e354:	3301      	adds	r3, #1
 800e356:	6123      	str	r3, [r4, #16]
 800e358:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d0a2      	beq.n	800e2a6 <_printf_float+0xa2>
 800e360:	232d      	movs	r3, #45	@ 0x2d
 800e362:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e366:	e79e      	b.n	800e2a6 <_printf_float+0xa2>
 800e368:	9a06      	ldr	r2, [sp, #24]
 800e36a:	2a47      	cmp	r2, #71	@ 0x47
 800e36c:	d1c2      	bne.n	800e2f4 <_printf_float+0xf0>
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d1c0      	bne.n	800e2f4 <_printf_float+0xf0>
 800e372:	2301      	movs	r3, #1
 800e374:	e7bd      	b.n	800e2f2 <_printf_float+0xee>
 800e376:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e37a:	d9db      	bls.n	800e334 <_printf_float+0x130>
 800e37c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e380:	d118      	bne.n	800e3b4 <_printf_float+0x1b0>
 800e382:	2900      	cmp	r1, #0
 800e384:	6863      	ldr	r3, [r4, #4]
 800e386:	dd0b      	ble.n	800e3a0 <_printf_float+0x19c>
 800e388:	6121      	str	r1, [r4, #16]
 800e38a:	b913      	cbnz	r3, 800e392 <_printf_float+0x18e>
 800e38c:	6822      	ldr	r2, [r4, #0]
 800e38e:	07d0      	lsls	r0, r2, #31
 800e390:	d502      	bpl.n	800e398 <_printf_float+0x194>
 800e392:	3301      	adds	r3, #1
 800e394:	440b      	add	r3, r1
 800e396:	6123      	str	r3, [r4, #16]
 800e398:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e39a:	f04f 0900 	mov.w	r9, #0
 800e39e:	e7db      	b.n	800e358 <_printf_float+0x154>
 800e3a0:	b913      	cbnz	r3, 800e3a8 <_printf_float+0x1a4>
 800e3a2:	6822      	ldr	r2, [r4, #0]
 800e3a4:	07d2      	lsls	r2, r2, #31
 800e3a6:	d501      	bpl.n	800e3ac <_printf_float+0x1a8>
 800e3a8:	3302      	adds	r3, #2
 800e3aa:	e7f4      	b.n	800e396 <_printf_float+0x192>
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e7f2      	b.n	800e396 <_printf_float+0x192>
 800e3b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e3b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3b6:	4299      	cmp	r1, r3
 800e3b8:	db05      	blt.n	800e3c6 <_printf_float+0x1c2>
 800e3ba:	6823      	ldr	r3, [r4, #0]
 800e3bc:	6121      	str	r1, [r4, #16]
 800e3be:	07d8      	lsls	r0, r3, #31
 800e3c0:	d5ea      	bpl.n	800e398 <_printf_float+0x194>
 800e3c2:	1c4b      	adds	r3, r1, #1
 800e3c4:	e7e7      	b.n	800e396 <_printf_float+0x192>
 800e3c6:	2900      	cmp	r1, #0
 800e3c8:	bfd4      	ite	le
 800e3ca:	f1c1 0202 	rsble	r2, r1, #2
 800e3ce:	2201      	movgt	r2, #1
 800e3d0:	4413      	add	r3, r2
 800e3d2:	e7e0      	b.n	800e396 <_printf_float+0x192>
 800e3d4:	6823      	ldr	r3, [r4, #0]
 800e3d6:	055a      	lsls	r2, r3, #21
 800e3d8:	d407      	bmi.n	800e3ea <_printf_float+0x1e6>
 800e3da:	6923      	ldr	r3, [r4, #16]
 800e3dc:	4642      	mov	r2, r8
 800e3de:	4631      	mov	r1, r6
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	47b8      	blx	r7
 800e3e4:	3001      	adds	r0, #1
 800e3e6:	d12b      	bne.n	800e440 <_printf_float+0x23c>
 800e3e8:	e767      	b.n	800e2ba <_printf_float+0xb6>
 800e3ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e3ee:	f240 80dd 	bls.w	800e5ac <_printf_float+0x3a8>
 800e3f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	f7f2 fb85 	bl	8000b08 <__aeabi_dcmpeq>
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d033      	beq.n	800e46a <_printf_float+0x266>
 800e402:	4a37      	ldr	r2, [pc, #220]	@ (800e4e0 <_printf_float+0x2dc>)
 800e404:	2301      	movs	r3, #1
 800e406:	4631      	mov	r1, r6
 800e408:	4628      	mov	r0, r5
 800e40a:	47b8      	blx	r7
 800e40c:	3001      	adds	r0, #1
 800e40e:	f43f af54 	beq.w	800e2ba <_printf_float+0xb6>
 800e412:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e416:	4543      	cmp	r3, r8
 800e418:	db02      	blt.n	800e420 <_printf_float+0x21c>
 800e41a:	6823      	ldr	r3, [r4, #0]
 800e41c:	07d8      	lsls	r0, r3, #31
 800e41e:	d50f      	bpl.n	800e440 <_printf_float+0x23c>
 800e420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e424:	4631      	mov	r1, r6
 800e426:	4628      	mov	r0, r5
 800e428:	47b8      	blx	r7
 800e42a:	3001      	adds	r0, #1
 800e42c:	f43f af45 	beq.w	800e2ba <_printf_float+0xb6>
 800e430:	f04f 0900 	mov.w	r9, #0
 800e434:	f108 38ff 	add.w	r8, r8, #4294967295
 800e438:	f104 0a1a 	add.w	sl, r4, #26
 800e43c:	45c8      	cmp	r8, r9
 800e43e:	dc09      	bgt.n	800e454 <_printf_float+0x250>
 800e440:	6823      	ldr	r3, [r4, #0]
 800e442:	079b      	lsls	r3, r3, #30
 800e444:	f100 8103 	bmi.w	800e64e <_printf_float+0x44a>
 800e448:	68e0      	ldr	r0, [r4, #12]
 800e44a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e44c:	4298      	cmp	r0, r3
 800e44e:	bfb8      	it	lt
 800e450:	4618      	movlt	r0, r3
 800e452:	e734      	b.n	800e2be <_printf_float+0xba>
 800e454:	2301      	movs	r3, #1
 800e456:	4652      	mov	r2, sl
 800e458:	4631      	mov	r1, r6
 800e45a:	4628      	mov	r0, r5
 800e45c:	47b8      	blx	r7
 800e45e:	3001      	adds	r0, #1
 800e460:	f43f af2b 	beq.w	800e2ba <_printf_float+0xb6>
 800e464:	f109 0901 	add.w	r9, r9, #1
 800e468:	e7e8      	b.n	800e43c <_printf_float+0x238>
 800e46a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	dc39      	bgt.n	800e4e4 <_printf_float+0x2e0>
 800e470:	4a1b      	ldr	r2, [pc, #108]	@ (800e4e0 <_printf_float+0x2dc>)
 800e472:	2301      	movs	r3, #1
 800e474:	4631      	mov	r1, r6
 800e476:	4628      	mov	r0, r5
 800e478:	47b8      	blx	r7
 800e47a:	3001      	adds	r0, #1
 800e47c:	f43f af1d 	beq.w	800e2ba <_printf_float+0xb6>
 800e480:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e484:	ea59 0303 	orrs.w	r3, r9, r3
 800e488:	d102      	bne.n	800e490 <_printf_float+0x28c>
 800e48a:	6823      	ldr	r3, [r4, #0]
 800e48c:	07d9      	lsls	r1, r3, #31
 800e48e:	d5d7      	bpl.n	800e440 <_printf_float+0x23c>
 800e490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e494:	4631      	mov	r1, r6
 800e496:	4628      	mov	r0, r5
 800e498:	47b8      	blx	r7
 800e49a:	3001      	adds	r0, #1
 800e49c:	f43f af0d 	beq.w	800e2ba <_printf_float+0xb6>
 800e4a0:	f04f 0a00 	mov.w	sl, #0
 800e4a4:	f104 0b1a 	add.w	fp, r4, #26
 800e4a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4aa:	425b      	negs	r3, r3
 800e4ac:	4553      	cmp	r3, sl
 800e4ae:	dc01      	bgt.n	800e4b4 <_printf_float+0x2b0>
 800e4b0:	464b      	mov	r3, r9
 800e4b2:	e793      	b.n	800e3dc <_printf_float+0x1d8>
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	465a      	mov	r2, fp
 800e4b8:	4631      	mov	r1, r6
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	47b8      	blx	r7
 800e4be:	3001      	adds	r0, #1
 800e4c0:	f43f aefb 	beq.w	800e2ba <_printf_float+0xb6>
 800e4c4:	f10a 0a01 	add.w	sl, sl, #1
 800e4c8:	e7ee      	b.n	800e4a8 <_printf_float+0x2a4>
 800e4ca:	bf00      	nop
 800e4cc:	7fefffff 	.word	0x7fefffff
 800e4d0:	08010f7a 	.word	0x08010f7a
 800e4d4:	08010f7e 	.word	0x08010f7e
 800e4d8:	08010f82 	.word	0x08010f82
 800e4dc:	08010f86 	.word	0x08010f86
 800e4e0:	08010f8a 	.word	0x08010f8a
 800e4e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e4e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e4ea:	4553      	cmp	r3, sl
 800e4ec:	bfa8      	it	ge
 800e4ee:	4653      	movge	r3, sl
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	4699      	mov	r9, r3
 800e4f4:	dc36      	bgt.n	800e564 <_printf_float+0x360>
 800e4f6:	f04f 0b00 	mov.w	fp, #0
 800e4fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4fe:	f104 021a 	add.w	r2, r4, #26
 800e502:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e504:	9306      	str	r3, [sp, #24]
 800e506:	eba3 0309 	sub.w	r3, r3, r9
 800e50a:	455b      	cmp	r3, fp
 800e50c:	dc31      	bgt.n	800e572 <_printf_float+0x36e>
 800e50e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e510:	459a      	cmp	sl, r3
 800e512:	dc3a      	bgt.n	800e58a <_printf_float+0x386>
 800e514:	6823      	ldr	r3, [r4, #0]
 800e516:	07da      	lsls	r2, r3, #31
 800e518:	d437      	bmi.n	800e58a <_printf_float+0x386>
 800e51a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e51c:	ebaa 0903 	sub.w	r9, sl, r3
 800e520:	9b06      	ldr	r3, [sp, #24]
 800e522:	ebaa 0303 	sub.w	r3, sl, r3
 800e526:	4599      	cmp	r9, r3
 800e528:	bfa8      	it	ge
 800e52a:	4699      	movge	r9, r3
 800e52c:	f1b9 0f00 	cmp.w	r9, #0
 800e530:	dc33      	bgt.n	800e59a <_printf_float+0x396>
 800e532:	f04f 0800 	mov.w	r8, #0
 800e536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e53a:	f104 0b1a 	add.w	fp, r4, #26
 800e53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e540:	ebaa 0303 	sub.w	r3, sl, r3
 800e544:	eba3 0309 	sub.w	r3, r3, r9
 800e548:	4543      	cmp	r3, r8
 800e54a:	f77f af79 	ble.w	800e440 <_printf_float+0x23c>
 800e54e:	2301      	movs	r3, #1
 800e550:	465a      	mov	r2, fp
 800e552:	4631      	mov	r1, r6
 800e554:	4628      	mov	r0, r5
 800e556:	47b8      	blx	r7
 800e558:	3001      	adds	r0, #1
 800e55a:	f43f aeae 	beq.w	800e2ba <_printf_float+0xb6>
 800e55e:	f108 0801 	add.w	r8, r8, #1
 800e562:	e7ec      	b.n	800e53e <_printf_float+0x33a>
 800e564:	4642      	mov	r2, r8
 800e566:	4631      	mov	r1, r6
 800e568:	4628      	mov	r0, r5
 800e56a:	47b8      	blx	r7
 800e56c:	3001      	adds	r0, #1
 800e56e:	d1c2      	bne.n	800e4f6 <_printf_float+0x2f2>
 800e570:	e6a3      	b.n	800e2ba <_printf_float+0xb6>
 800e572:	2301      	movs	r3, #1
 800e574:	4631      	mov	r1, r6
 800e576:	4628      	mov	r0, r5
 800e578:	9206      	str	r2, [sp, #24]
 800e57a:	47b8      	blx	r7
 800e57c:	3001      	adds	r0, #1
 800e57e:	f43f ae9c 	beq.w	800e2ba <_printf_float+0xb6>
 800e582:	9a06      	ldr	r2, [sp, #24]
 800e584:	f10b 0b01 	add.w	fp, fp, #1
 800e588:	e7bb      	b.n	800e502 <_printf_float+0x2fe>
 800e58a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e58e:	4631      	mov	r1, r6
 800e590:	4628      	mov	r0, r5
 800e592:	47b8      	blx	r7
 800e594:	3001      	adds	r0, #1
 800e596:	d1c0      	bne.n	800e51a <_printf_float+0x316>
 800e598:	e68f      	b.n	800e2ba <_printf_float+0xb6>
 800e59a:	9a06      	ldr	r2, [sp, #24]
 800e59c:	464b      	mov	r3, r9
 800e59e:	4442      	add	r2, r8
 800e5a0:	4631      	mov	r1, r6
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	47b8      	blx	r7
 800e5a6:	3001      	adds	r0, #1
 800e5a8:	d1c3      	bne.n	800e532 <_printf_float+0x32e>
 800e5aa:	e686      	b.n	800e2ba <_printf_float+0xb6>
 800e5ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e5b0:	f1ba 0f01 	cmp.w	sl, #1
 800e5b4:	dc01      	bgt.n	800e5ba <_printf_float+0x3b6>
 800e5b6:	07db      	lsls	r3, r3, #31
 800e5b8:	d536      	bpl.n	800e628 <_printf_float+0x424>
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	4642      	mov	r2, r8
 800e5be:	4631      	mov	r1, r6
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	47b8      	blx	r7
 800e5c4:	3001      	adds	r0, #1
 800e5c6:	f43f ae78 	beq.w	800e2ba <_printf_float+0xb6>
 800e5ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5ce:	4631      	mov	r1, r6
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	47b8      	blx	r7
 800e5d4:	3001      	adds	r0, #1
 800e5d6:	f43f ae70 	beq.w	800e2ba <_printf_float+0xb6>
 800e5da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e5de:	2200      	movs	r2, #0
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e5e6:	f7f2 fa8f 	bl	8000b08 <__aeabi_dcmpeq>
 800e5ea:	b9c0      	cbnz	r0, 800e61e <_printf_float+0x41a>
 800e5ec:	4653      	mov	r3, sl
 800e5ee:	f108 0201 	add.w	r2, r8, #1
 800e5f2:	4631      	mov	r1, r6
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	47b8      	blx	r7
 800e5f8:	3001      	adds	r0, #1
 800e5fa:	d10c      	bne.n	800e616 <_printf_float+0x412>
 800e5fc:	e65d      	b.n	800e2ba <_printf_float+0xb6>
 800e5fe:	2301      	movs	r3, #1
 800e600:	465a      	mov	r2, fp
 800e602:	4631      	mov	r1, r6
 800e604:	4628      	mov	r0, r5
 800e606:	47b8      	blx	r7
 800e608:	3001      	adds	r0, #1
 800e60a:	f43f ae56 	beq.w	800e2ba <_printf_float+0xb6>
 800e60e:	f108 0801 	add.w	r8, r8, #1
 800e612:	45d0      	cmp	r8, sl
 800e614:	dbf3      	blt.n	800e5fe <_printf_float+0x3fa>
 800e616:	464b      	mov	r3, r9
 800e618:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e61c:	e6df      	b.n	800e3de <_printf_float+0x1da>
 800e61e:	f04f 0800 	mov.w	r8, #0
 800e622:	f104 0b1a 	add.w	fp, r4, #26
 800e626:	e7f4      	b.n	800e612 <_printf_float+0x40e>
 800e628:	2301      	movs	r3, #1
 800e62a:	4642      	mov	r2, r8
 800e62c:	e7e1      	b.n	800e5f2 <_printf_float+0x3ee>
 800e62e:	2301      	movs	r3, #1
 800e630:	464a      	mov	r2, r9
 800e632:	4631      	mov	r1, r6
 800e634:	4628      	mov	r0, r5
 800e636:	47b8      	blx	r7
 800e638:	3001      	adds	r0, #1
 800e63a:	f43f ae3e 	beq.w	800e2ba <_printf_float+0xb6>
 800e63e:	f108 0801 	add.w	r8, r8, #1
 800e642:	68e3      	ldr	r3, [r4, #12]
 800e644:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e646:	1a5b      	subs	r3, r3, r1
 800e648:	4543      	cmp	r3, r8
 800e64a:	dcf0      	bgt.n	800e62e <_printf_float+0x42a>
 800e64c:	e6fc      	b.n	800e448 <_printf_float+0x244>
 800e64e:	f04f 0800 	mov.w	r8, #0
 800e652:	f104 0919 	add.w	r9, r4, #25
 800e656:	e7f4      	b.n	800e642 <_printf_float+0x43e>

0800e658 <_printf_common>:
 800e658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e65c:	4616      	mov	r6, r2
 800e65e:	4698      	mov	r8, r3
 800e660:	688a      	ldr	r2, [r1, #8]
 800e662:	690b      	ldr	r3, [r1, #16]
 800e664:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e668:	4293      	cmp	r3, r2
 800e66a:	bfb8      	it	lt
 800e66c:	4613      	movlt	r3, r2
 800e66e:	6033      	str	r3, [r6, #0]
 800e670:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e674:	4607      	mov	r7, r0
 800e676:	460c      	mov	r4, r1
 800e678:	b10a      	cbz	r2, 800e67e <_printf_common+0x26>
 800e67a:	3301      	adds	r3, #1
 800e67c:	6033      	str	r3, [r6, #0]
 800e67e:	6823      	ldr	r3, [r4, #0]
 800e680:	0699      	lsls	r1, r3, #26
 800e682:	bf42      	ittt	mi
 800e684:	6833      	ldrmi	r3, [r6, #0]
 800e686:	3302      	addmi	r3, #2
 800e688:	6033      	strmi	r3, [r6, #0]
 800e68a:	6825      	ldr	r5, [r4, #0]
 800e68c:	f015 0506 	ands.w	r5, r5, #6
 800e690:	d106      	bne.n	800e6a0 <_printf_common+0x48>
 800e692:	f104 0a19 	add.w	sl, r4, #25
 800e696:	68e3      	ldr	r3, [r4, #12]
 800e698:	6832      	ldr	r2, [r6, #0]
 800e69a:	1a9b      	subs	r3, r3, r2
 800e69c:	42ab      	cmp	r3, r5
 800e69e:	dc26      	bgt.n	800e6ee <_printf_common+0x96>
 800e6a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e6a4:	6822      	ldr	r2, [r4, #0]
 800e6a6:	3b00      	subs	r3, #0
 800e6a8:	bf18      	it	ne
 800e6aa:	2301      	movne	r3, #1
 800e6ac:	0692      	lsls	r2, r2, #26
 800e6ae:	d42b      	bmi.n	800e708 <_printf_common+0xb0>
 800e6b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e6b4:	4641      	mov	r1, r8
 800e6b6:	4638      	mov	r0, r7
 800e6b8:	47c8      	blx	r9
 800e6ba:	3001      	adds	r0, #1
 800e6bc:	d01e      	beq.n	800e6fc <_printf_common+0xa4>
 800e6be:	6823      	ldr	r3, [r4, #0]
 800e6c0:	6922      	ldr	r2, [r4, #16]
 800e6c2:	f003 0306 	and.w	r3, r3, #6
 800e6c6:	2b04      	cmp	r3, #4
 800e6c8:	bf02      	ittt	eq
 800e6ca:	68e5      	ldreq	r5, [r4, #12]
 800e6cc:	6833      	ldreq	r3, [r6, #0]
 800e6ce:	1aed      	subeq	r5, r5, r3
 800e6d0:	68a3      	ldr	r3, [r4, #8]
 800e6d2:	bf0c      	ite	eq
 800e6d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6d8:	2500      	movne	r5, #0
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	bfc4      	itt	gt
 800e6de:	1a9b      	subgt	r3, r3, r2
 800e6e0:	18ed      	addgt	r5, r5, r3
 800e6e2:	2600      	movs	r6, #0
 800e6e4:	341a      	adds	r4, #26
 800e6e6:	42b5      	cmp	r5, r6
 800e6e8:	d11a      	bne.n	800e720 <_printf_common+0xc8>
 800e6ea:	2000      	movs	r0, #0
 800e6ec:	e008      	b.n	800e700 <_printf_common+0xa8>
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	4652      	mov	r2, sl
 800e6f2:	4641      	mov	r1, r8
 800e6f4:	4638      	mov	r0, r7
 800e6f6:	47c8      	blx	r9
 800e6f8:	3001      	adds	r0, #1
 800e6fa:	d103      	bne.n	800e704 <_printf_common+0xac>
 800e6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e704:	3501      	adds	r5, #1
 800e706:	e7c6      	b.n	800e696 <_printf_common+0x3e>
 800e708:	18e1      	adds	r1, r4, r3
 800e70a:	1c5a      	adds	r2, r3, #1
 800e70c:	2030      	movs	r0, #48	@ 0x30
 800e70e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e712:	4422      	add	r2, r4
 800e714:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e718:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e71c:	3302      	adds	r3, #2
 800e71e:	e7c7      	b.n	800e6b0 <_printf_common+0x58>
 800e720:	2301      	movs	r3, #1
 800e722:	4622      	mov	r2, r4
 800e724:	4641      	mov	r1, r8
 800e726:	4638      	mov	r0, r7
 800e728:	47c8      	blx	r9
 800e72a:	3001      	adds	r0, #1
 800e72c:	d0e6      	beq.n	800e6fc <_printf_common+0xa4>
 800e72e:	3601      	adds	r6, #1
 800e730:	e7d9      	b.n	800e6e6 <_printf_common+0x8e>
	...

0800e734 <_printf_i>:
 800e734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e738:	7e0f      	ldrb	r7, [r1, #24]
 800e73a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e73c:	2f78      	cmp	r7, #120	@ 0x78
 800e73e:	4691      	mov	r9, r2
 800e740:	4680      	mov	r8, r0
 800e742:	460c      	mov	r4, r1
 800e744:	469a      	mov	sl, r3
 800e746:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e74a:	d807      	bhi.n	800e75c <_printf_i+0x28>
 800e74c:	2f62      	cmp	r7, #98	@ 0x62
 800e74e:	d80a      	bhi.n	800e766 <_printf_i+0x32>
 800e750:	2f00      	cmp	r7, #0
 800e752:	f000 80d2 	beq.w	800e8fa <_printf_i+0x1c6>
 800e756:	2f58      	cmp	r7, #88	@ 0x58
 800e758:	f000 80b9 	beq.w	800e8ce <_printf_i+0x19a>
 800e75c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e760:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e764:	e03a      	b.n	800e7dc <_printf_i+0xa8>
 800e766:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e76a:	2b15      	cmp	r3, #21
 800e76c:	d8f6      	bhi.n	800e75c <_printf_i+0x28>
 800e76e:	a101      	add	r1, pc, #4	@ (adr r1, 800e774 <_printf_i+0x40>)
 800e770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e774:	0800e7cd 	.word	0x0800e7cd
 800e778:	0800e7e1 	.word	0x0800e7e1
 800e77c:	0800e75d 	.word	0x0800e75d
 800e780:	0800e75d 	.word	0x0800e75d
 800e784:	0800e75d 	.word	0x0800e75d
 800e788:	0800e75d 	.word	0x0800e75d
 800e78c:	0800e7e1 	.word	0x0800e7e1
 800e790:	0800e75d 	.word	0x0800e75d
 800e794:	0800e75d 	.word	0x0800e75d
 800e798:	0800e75d 	.word	0x0800e75d
 800e79c:	0800e75d 	.word	0x0800e75d
 800e7a0:	0800e8e1 	.word	0x0800e8e1
 800e7a4:	0800e80b 	.word	0x0800e80b
 800e7a8:	0800e89b 	.word	0x0800e89b
 800e7ac:	0800e75d 	.word	0x0800e75d
 800e7b0:	0800e75d 	.word	0x0800e75d
 800e7b4:	0800e903 	.word	0x0800e903
 800e7b8:	0800e75d 	.word	0x0800e75d
 800e7bc:	0800e80b 	.word	0x0800e80b
 800e7c0:	0800e75d 	.word	0x0800e75d
 800e7c4:	0800e75d 	.word	0x0800e75d
 800e7c8:	0800e8a3 	.word	0x0800e8a3
 800e7cc:	6833      	ldr	r3, [r6, #0]
 800e7ce:	1d1a      	adds	r2, r3, #4
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	6032      	str	r2, [r6, #0]
 800e7d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e7dc:	2301      	movs	r3, #1
 800e7de:	e09d      	b.n	800e91c <_printf_i+0x1e8>
 800e7e0:	6833      	ldr	r3, [r6, #0]
 800e7e2:	6820      	ldr	r0, [r4, #0]
 800e7e4:	1d19      	adds	r1, r3, #4
 800e7e6:	6031      	str	r1, [r6, #0]
 800e7e8:	0606      	lsls	r6, r0, #24
 800e7ea:	d501      	bpl.n	800e7f0 <_printf_i+0xbc>
 800e7ec:	681d      	ldr	r5, [r3, #0]
 800e7ee:	e003      	b.n	800e7f8 <_printf_i+0xc4>
 800e7f0:	0645      	lsls	r5, r0, #25
 800e7f2:	d5fb      	bpl.n	800e7ec <_printf_i+0xb8>
 800e7f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e7f8:	2d00      	cmp	r5, #0
 800e7fa:	da03      	bge.n	800e804 <_printf_i+0xd0>
 800e7fc:	232d      	movs	r3, #45	@ 0x2d
 800e7fe:	426d      	negs	r5, r5
 800e800:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e804:	4859      	ldr	r0, [pc, #356]	@ (800e96c <_printf_i+0x238>)
 800e806:	230a      	movs	r3, #10
 800e808:	e011      	b.n	800e82e <_printf_i+0xfa>
 800e80a:	6821      	ldr	r1, [r4, #0]
 800e80c:	6833      	ldr	r3, [r6, #0]
 800e80e:	0608      	lsls	r0, r1, #24
 800e810:	f853 5b04 	ldr.w	r5, [r3], #4
 800e814:	d402      	bmi.n	800e81c <_printf_i+0xe8>
 800e816:	0649      	lsls	r1, r1, #25
 800e818:	bf48      	it	mi
 800e81a:	b2ad      	uxthmi	r5, r5
 800e81c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e81e:	4853      	ldr	r0, [pc, #332]	@ (800e96c <_printf_i+0x238>)
 800e820:	6033      	str	r3, [r6, #0]
 800e822:	bf14      	ite	ne
 800e824:	230a      	movne	r3, #10
 800e826:	2308      	moveq	r3, #8
 800e828:	2100      	movs	r1, #0
 800e82a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e82e:	6866      	ldr	r6, [r4, #4]
 800e830:	60a6      	str	r6, [r4, #8]
 800e832:	2e00      	cmp	r6, #0
 800e834:	bfa2      	ittt	ge
 800e836:	6821      	ldrge	r1, [r4, #0]
 800e838:	f021 0104 	bicge.w	r1, r1, #4
 800e83c:	6021      	strge	r1, [r4, #0]
 800e83e:	b90d      	cbnz	r5, 800e844 <_printf_i+0x110>
 800e840:	2e00      	cmp	r6, #0
 800e842:	d04b      	beq.n	800e8dc <_printf_i+0x1a8>
 800e844:	4616      	mov	r6, r2
 800e846:	fbb5 f1f3 	udiv	r1, r5, r3
 800e84a:	fb03 5711 	mls	r7, r3, r1, r5
 800e84e:	5dc7      	ldrb	r7, [r0, r7]
 800e850:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e854:	462f      	mov	r7, r5
 800e856:	42bb      	cmp	r3, r7
 800e858:	460d      	mov	r5, r1
 800e85a:	d9f4      	bls.n	800e846 <_printf_i+0x112>
 800e85c:	2b08      	cmp	r3, #8
 800e85e:	d10b      	bne.n	800e878 <_printf_i+0x144>
 800e860:	6823      	ldr	r3, [r4, #0]
 800e862:	07df      	lsls	r7, r3, #31
 800e864:	d508      	bpl.n	800e878 <_printf_i+0x144>
 800e866:	6923      	ldr	r3, [r4, #16]
 800e868:	6861      	ldr	r1, [r4, #4]
 800e86a:	4299      	cmp	r1, r3
 800e86c:	bfde      	ittt	le
 800e86e:	2330      	movle	r3, #48	@ 0x30
 800e870:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e874:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e878:	1b92      	subs	r2, r2, r6
 800e87a:	6122      	str	r2, [r4, #16]
 800e87c:	f8cd a000 	str.w	sl, [sp]
 800e880:	464b      	mov	r3, r9
 800e882:	aa03      	add	r2, sp, #12
 800e884:	4621      	mov	r1, r4
 800e886:	4640      	mov	r0, r8
 800e888:	f7ff fee6 	bl	800e658 <_printf_common>
 800e88c:	3001      	adds	r0, #1
 800e88e:	d14a      	bne.n	800e926 <_printf_i+0x1f2>
 800e890:	f04f 30ff 	mov.w	r0, #4294967295
 800e894:	b004      	add	sp, #16
 800e896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e89a:	6823      	ldr	r3, [r4, #0]
 800e89c:	f043 0320 	orr.w	r3, r3, #32
 800e8a0:	6023      	str	r3, [r4, #0]
 800e8a2:	4833      	ldr	r0, [pc, #204]	@ (800e970 <_printf_i+0x23c>)
 800e8a4:	2778      	movs	r7, #120	@ 0x78
 800e8a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e8aa:	6823      	ldr	r3, [r4, #0]
 800e8ac:	6831      	ldr	r1, [r6, #0]
 800e8ae:	061f      	lsls	r7, r3, #24
 800e8b0:	f851 5b04 	ldr.w	r5, [r1], #4
 800e8b4:	d402      	bmi.n	800e8bc <_printf_i+0x188>
 800e8b6:	065f      	lsls	r7, r3, #25
 800e8b8:	bf48      	it	mi
 800e8ba:	b2ad      	uxthmi	r5, r5
 800e8bc:	6031      	str	r1, [r6, #0]
 800e8be:	07d9      	lsls	r1, r3, #31
 800e8c0:	bf44      	itt	mi
 800e8c2:	f043 0320 	orrmi.w	r3, r3, #32
 800e8c6:	6023      	strmi	r3, [r4, #0]
 800e8c8:	b11d      	cbz	r5, 800e8d2 <_printf_i+0x19e>
 800e8ca:	2310      	movs	r3, #16
 800e8cc:	e7ac      	b.n	800e828 <_printf_i+0xf4>
 800e8ce:	4827      	ldr	r0, [pc, #156]	@ (800e96c <_printf_i+0x238>)
 800e8d0:	e7e9      	b.n	800e8a6 <_printf_i+0x172>
 800e8d2:	6823      	ldr	r3, [r4, #0]
 800e8d4:	f023 0320 	bic.w	r3, r3, #32
 800e8d8:	6023      	str	r3, [r4, #0]
 800e8da:	e7f6      	b.n	800e8ca <_printf_i+0x196>
 800e8dc:	4616      	mov	r6, r2
 800e8de:	e7bd      	b.n	800e85c <_printf_i+0x128>
 800e8e0:	6833      	ldr	r3, [r6, #0]
 800e8e2:	6825      	ldr	r5, [r4, #0]
 800e8e4:	6961      	ldr	r1, [r4, #20]
 800e8e6:	1d18      	adds	r0, r3, #4
 800e8e8:	6030      	str	r0, [r6, #0]
 800e8ea:	062e      	lsls	r6, r5, #24
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	d501      	bpl.n	800e8f4 <_printf_i+0x1c0>
 800e8f0:	6019      	str	r1, [r3, #0]
 800e8f2:	e002      	b.n	800e8fa <_printf_i+0x1c6>
 800e8f4:	0668      	lsls	r0, r5, #25
 800e8f6:	d5fb      	bpl.n	800e8f0 <_printf_i+0x1bc>
 800e8f8:	8019      	strh	r1, [r3, #0]
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	6123      	str	r3, [r4, #16]
 800e8fe:	4616      	mov	r6, r2
 800e900:	e7bc      	b.n	800e87c <_printf_i+0x148>
 800e902:	6833      	ldr	r3, [r6, #0]
 800e904:	1d1a      	adds	r2, r3, #4
 800e906:	6032      	str	r2, [r6, #0]
 800e908:	681e      	ldr	r6, [r3, #0]
 800e90a:	6862      	ldr	r2, [r4, #4]
 800e90c:	2100      	movs	r1, #0
 800e90e:	4630      	mov	r0, r6
 800e910:	f7f1 fc7e 	bl	8000210 <memchr>
 800e914:	b108      	cbz	r0, 800e91a <_printf_i+0x1e6>
 800e916:	1b80      	subs	r0, r0, r6
 800e918:	6060      	str	r0, [r4, #4]
 800e91a:	6863      	ldr	r3, [r4, #4]
 800e91c:	6123      	str	r3, [r4, #16]
 800e91e:	2300      	movs	r3, #0
 800e920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e924:	e7aa      	b.n	800e87c <_printf_i+0x148>
 800e926:	6923      	ldr	r3, [r4, #16]
 800e928:	4632      	mov	r2, r6
 800e92a:	4649      	mov	r1, r9
 800e92c:	4640      	mov	r0, r8
 800e92e:	47d0      	blx	sl
 800e930:	3001      	adds	r0, #1
 800e932:	d0ad      	beq.n	800e890 <_printf_i+0x15c>
 800e934:	6823      	ldr	r3, [r4, #0]
 800e936:	079b      	lsls	r3, r3, #30
 800e938:	d413      	bmi.n	800e962 <_printf_i+0x22e>
 800e93a:	68e0      	ldr	r0, [r4, #12]
 800e93c:	9b03      	ldr	r3, [sp, #12]
 800e93e:	4298      	cmp	r0, r3
 800e940:	bfb8      	it	lt
 800e942:	4618      	movlt	r0, r3
 800e944:	e7a6      	b.n	800e894 <_printf_i+0x160>
 800e946:	2301      	movs	r3, #1
 800e948:	4632      	mov	r2, r6
 800e94a:	4649      	mov	r1, r9
 800e94c:	4640      	mov	r0, r8
 800e94e:	47d0      	blx	sl
 800e950:	3001      	adds	r0, #1
 800e952:	d09d      	beq.n	800e890 <_printf_i+0x15c>
 800e954:	3501      	adds	r5, #1
 800e956:	68e3      	ldr	r3, [r4, #12]
 800e958:	9903      	ldr	r1, [sp, #12]
 800e95a:	1a5b      	subs	r3, r3, r1
 800e95c:	42ab      	cmp	r3, r5
 800e95e:	dcf2      	bgt.n	800e946 <_printf_i+0x212>
 800e960:	e7eb      	b.n	800e93a <_printf_i+0x206>
 800e962:	2500      	movs	r5, #0
 800e964:	f104 0619 	add.w	r6, r4, #25
 800e968:	e7f5      	b.n	800e956 <_printf_i+0x222>
 800e96a:	bf00      	nop
 800e96c:	08010f8c 	.word	0x08010f8c
 800e970:	08010f9d 	.word	0x08010f9d

0800e974 <std>:
 800e974:	2300      	movs	r3, #0
 800e976:	b510      	push	{r4, lr}
 800e978:	4604      	mov	r4, r0
 800e97a:	e9c0 3300 	strd	r3, r3, [r0]
 800e97e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e982:	6083      	str	r3, [r0, #8]
 800e984:	8181      	strh	r1, [r0, #12]
 800e986:	6643      	str	r3, [r0, #100]	@ 0x64
 800e988:	81c2      	strh	r2, [r0, #14]
 800e98a:	6183      	str	r3, [r0, #24]
 800e98c:	4619      	mov	r1, r3
 800e98e:	2208      	movs	r2, #8
 800e990:	305c      	adds	r0, #92	@ 0x5c
 800e992:	f000 f9f9 	bl	800ed88 <memset>
 800e996:	4b0d      	ldr	r3, [pc, #52]	@ (800e9cc <std+0x58>)
 800e998:	6263      	str	r3, [r4, #36]	@ 0x24
 800e99a:	4b0d      	ldr	r3, [pc, #52]	@ (800e9d0 <std+0x5c>)
 800e99c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e99e:	4b0d      	ldr	r3, [pc, #52]	@ (800e9d4 <std+0x60>)
 800e9a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e9d8 <std+0x64>)
 800e9a4:	6323      	str	r3, [r4, #48]	@ 0x30
 800e9a6:	4b0d      	ldr	r3, [pc, #52]	@ (800e9dc <std+0x68>)
 800e9a8:	6224      	str	r4, [r4, #32]
 800e9aa:	429c      	cmp	r4, r3
 800e9ac:	d006      	beq.n	800e9bc <std+0x48>
 800e9ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e9b2:	4294      	cmp	r4, r2
 800e9b4:	d002      	beq.n	800e9bc <std+0x48>
 800e9b6:	33d0      	adds	r3, #208	@ 0xd0
 800e9b8:	429c      	cmp	r4, r3
 800e9ba:	d105      	bne.n	800e9c8 <std+0x54>
 800e9bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9c4:	f000 ba5c 	b.w	800ee80 <__retarget_lock_init_recursive>
 800e9c8:	bd10      	pop	{r4, pc}
 800e9ca:	bf00      	nop
 800e9cc:	0800ebd9 	.word	0x0800ebd9
 800e9d0:	0800ebfb 	.word	0x0800ebfb
 800e9d4:	0800ec33 	.word	0x0800ec33
 800e9d8:	0800ec57 	.word	0x0800ec57
 800e9dc:	20005628 	.word	0x20005628

0800e9e0 <stdio_exit_handler>:
 800e9e0:	4a02      	ldr	r2, [pc, #8]	@ (800e9ec <stdio_exit_handler+0xc>)
 800e9e2:	4903      	ldr	r1, [pc, #12]	@ (800e9f0 <stdio_exit_handler+0x10>)
 800e9e4:	4803      	ldr	r0, [pc, #12]	@ (800e9f4 <stdio_exit_handler+0x14>)
 800e9e6:	f000 b869 	b.w	800eabc <_fwalk_sglue>
 800e9ea:	bf00      	nop
 800e9ec:	2000004c 	.word	0x2000004c
 800e9f0:	080107b1 	.word	0x080107b1
 800e9f4:	2000005c 	.word	0x2000005c

0800e9f8 <cleanup_stdio>:
 800e9f8:	6841      	ldr	r1, [r0, #4]
 800e9fa:	4b0c      	ldr	r3, [pc, #48]	@ (800ea2c <cleanup_stdio+0x34>)
 800e9fc:	4299      	cmp	r1, r3
 800e9fe:	b510      	push	{r4, lr}
 800ea00:	4604      	mov	r4, r0
 800ea02:	d001      	beq.n	800ea08 <cleanup_stdio+0x10>
 800ea04:	f001 fed4 	bl	80107b0 <_fflush_r>
 800ea08:	68a1      	ldr	r1, [r4, #8]
 800ea0a:	4b09      	ldr	r3, [pc, #36]	@ (800ea30 <cleanup_stdio+0x38>)
 800ea0c:	4299      	cmp	r1, r3
 800ea0e:	d002      	beq.n	800ea16 <cleanup_stdio+0x1e>
 800ea10:	4620      	mov	r0, r4
 800ea12:	f001 fecd 	bl	80107b0 <_fflush_r>
 800ea16:	68e1      	ldr	r1, [r4, #12]
 800ea18:	4b06      	ldr	r3, [pc, #24]	@ (800ea34 <cleanup_stdio+0x3c>)
 800ea1a:	4299      	cmp	r1, r3
 800ea1c:	d004      	beq.n	800ea28 <cleanup_stdio+0x30>
 800ea1e:	4620      	mov	r0, r4
 800ea20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea24:	f001 bec4 	b.w	80107b0 <_fflush_r>
 800ea28:	bd10      	pop	{r4, pc}
 800ea2a:	bf00      	nop
 800ea2c:	20005628 	.word	0x20005628
 800ea30:	20005690 	.word	0x20005690
 800ea34:	200056f8 	.word	0x200056f8

0800ea38 <global_stdio_init.part.0>:
 800ea38:	b510      	push	{r4, lr}
 800ea3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ea68 <global_stdio_init.part.0+0x30>)
 800ea3c:	4c0b      	ldr	r4, [pc, #44]	@ (800ea6c <global_stdio_init.part.0+0x34>)
 800ea3e:	4a0c      	ldr	r2, [pc, #48]	@ (800ea70 <global_stdio_init.part.0+0x38>)
 800ea40:	601a      	str	r2, [r3, #0]
 800ea42:	4620      	mov	r0, r4
 800ea44:	2200      	movs	r2, #0
 800ea46:	2104      	movs	r1, #4
 800ea48:	f7ff ff94 	bl	800e974 <std>
 800ea4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ea50:	2201      	movs	r2, #1
 800ea52:	2109      	movs	r1, #9
 800ea54:	f7ff ff8e 	bl	800e974 <std>
 800ea58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ea5c:	2202      	movs	r2, #2
 800ea5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea62:	2112      	movs	r1, #18
 800ea64:	f7ff bf86 	b.w	800e974 <std>
 800ea68:	20005760 	.word	0x20005760
 800ea6c:	20005628 	.word	0x20005628
 800ea70:	0800e9e1 	.word	0x0800e9e1

0800ea74 <__sfp_lock_acquire>:
 800ea74:	4801      	ldr	r0, [pc, #4]	@ (800ea7c <__sfp_lock_acquire+0x8>)
 800ea76:	f000 ba04 	b.w	800ee82 <__retarget_lock_acquire_recursive>
 800ea7a:	bf00      	nop
 800ea7c:	20005769 	.word	0x20005769

0800ea80 <__sfp_lock_release>:
 800ea80:	4801      	ldr	r0, [pc, #4]	@ (800ea88 <__sfp_lock_release+0x8>)
 800ea82:	f000 b9ff 	b.w	800ee84 <__retarget_lock_release_recursive>
 800ea86:	bf00      	nop
 800ea88:	20005769 	.word	0x20005769

0800ea8c <__sinit>:
 800ea8c:	b510      	push	{r4, lr}
 800ea8e:	4604      	mov	r4, r0
 800ea90:	f7ff fff0 	bl	800ea74 <__sfp_lock_acquire>
 800ea94:	6a23      	ldr	r3, [r4, #32]
 800ea96:	b11b      	cbz	r3, 800eaa0 <__sinit+0x14>
 800ea98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea9c:	f7ff bff0 	b.w	800ea80 <__sfp_lock_release>
 800eaa0:	4b04      	ldr	r3, [pc, #16]	@ (800eab4 <__sinit+0x28>)
 800eaa2:	6223      	str	r3, [r4, #32]
 800eaa4:	4b04      	ldr	r3, [pc, #16]	@ (800eab8 <__sinit+0x2c>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d1f5      	bne.n	800ea98 <__sinit+0xc>
 800eaac:	f7ff ffc4 	bl	800ea38 <global_stdio_init.part.0>
 800eab0:	e7f2      	b.n	800ea98 <__sinit+0xc>
 800eab2:	bf00      	nop
 800eab4:	0800e9f9 	.word	0x0800e9f9
 800eab8:	20005760 	.word	0x20005760

0800eabc <_fwalk_sglue>:
 800eabc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eac0:	4607      	mov	r7, r0
 800eac2:	4688      	mov	r8, r1
 800eac4:	4614      	mov	r4, r2
 800eac6:	2600      	movs	r6, #0
 800eac8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eacc:	f1b9 0901 	subs.w	r9, r9, #1
 800ead0:	d505      	bpl.n	800eade <_fwalk_sglue+0x22>
 800ead2:	6824      	ldr	r4, [r4, #0]
 800ead4:	2c00      	cmp	r4, #0
 800ead6:	d1f7      	bne.n	800eac8 <_fwalk_sglue+0xc>
 800ead8:	4630      	mov	r0, r6
 800eada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eade:	89ab      	ldrh	r3, [r5, #12]
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d907      	bls.n	800eaf4 <_fwalk_sglue+0x38>
 800eae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eae8:	3301      	adds	r3, #1
 800eaea:	d003      	beq.n	800eaf4 <_fwalk_sglue+0x38>
 800eaec:	4629      	mov	r1, r5
 800eaee:	4638      	mov	r0, r7
 800eaf0:	47c0      	blx	r8
 800eaf2:	4306      	orrs	r6, r0
 800eaf4:	3568      	adds	r5, #104	@ 0x68
 800eaf6:	e7e9      	b.n	800eacc <_fwalk_sglue+0x10>

0800eaf8 <iprintf>:
 800eaf8:	b40f      	push	{r0, r1, r2, r3}
 800eafa:	b507      	push	{r0, r1, r2, lr}
 800eafc:	4906      	ldr	r1, [pc, #24]	@ (800eb18 <iprintf+0x20>)
 800eafe:	ab04      	add	r3, sp, #16
 800eb00:	6808      	ldr	r0, [r1, #0]
 800eb02:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb06:	6881      	ldr	r1, [r0, #8]
 800eb08:	9301      	str	r3, [sp, #4]
 800eb0a:	f001 fcb5 	bl	8010478 <_vfiprintf_r>
 800eb0e:	b003      	add	sp, #12
 800eb10:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb14:	b004      	add	sp, #16
 800eb16:	4770      	bx	lr
 800eb18:	20000058 	.word	0x20000058

0800eb1c <_puts_r>:
 800eb1c:	6a03      	ldr	r3, [r0, #32]
 800eb1e:	b570      	push	{r4, r5, r6, lr}
 800eb20:	6884      	ldr	r4, [r0, #8]
 800eb22:	4605      	mov	r5, r0
 800eb24:	460e      	mov	r6, r1
 800eb26:	b90b      	cbnz	r3, 800eb2c <_puts_r+0x10>
 800eb28:	f7ff ffb0 	bl	800ea8c <__sinit>
 800eb2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb2e:	07db      	lsls	r3, r3, #31
 800eb30:	d405      	bmi.n	800eb3e <_puts_r+0x22>
 800eb32:	89a3      	ldrh	r3, [r4, #12]
 800eb34:	0598      	lsls	r0, r3, #22
 800eb36:	d402      	bmi.n	800eb3e <_puts_r+0x22>
 800eb38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb3a:	f000 f9a2 	bl	800ee82 <__retarget_lock_acquire_recursive>
 800eb3e:	89a3      	ldrh	r3, [r4, #12]
 800eb40:	0719      	lsls	r1, r3, #28
 800eb42:	d502      	bpl.n	800eb4a <_puts_r+0x2e>
 800eb44:	6923      	ldr	r3, [r4, #16]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d135      	bne.n	800ebb6 <_puts_r+0x9a>
 800eb4a:	4621      	mov	r1, r4
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	f000 f8c5 	bl	800ecdc <__swsetup_r>
 800eb52:	b380      	cbz	r0, 800ebb6 <_puts_r+0x9a>
 800eb54:	f04f 35ff 	mov.w	r5, #4294967295
 800eb58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb5a:	07da      	lsls	r2, r3, #31
 800eb5c:	d405      	bmi.n	800eb6a <_puts_r+0x4e>
 800eb5e:	89a3      	ldrh	r3, [r4, #12]
 800eb60:	059b      	lsls	r3, r3, #22
 800eb62:	d402      	bmi.n	800eb6a <_puts_r+0x4e>
 800eb64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb66:	f000 f98d 	bl	800ee84 <__retarget_lock_release_recursive>
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	bd70      	pop	{r4, r5, r6, pc}
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	da04      	bge.n	800eb7c <_puts_r+0x60>
 800eb72:	69a2      	ldr	r2, [r4, #24]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	dc17      	bgt.n	800eba8 <_puts_r+0x8c>
 800eb78:	290a      	cmp	r1, #10
 800eb7a:	d015      	beq.n	800eba8 <_puts_r+0x8c>
 800eb7c:	6823      	ldr	r3, [r4, #0]
 800eb7e:	1c5a      	adds	r2, r3, #1
 800eb80:	6022      	str	r2, [r4, #0]
 800eb82:	7019      	strb	r1, [r3, #0]
 800eb84:	68a3      	ldr	r3, [r4, #8]
 800eb86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eb8a:	3b01      	subs	r3, #1
 800eb8c:	60a3      	str	r3, [r4, #8]
 800eb8e:	2900      	cmp	r1, #0
 800eb90:	d1ed      	bne.n	800eb6e <_puts_r+0x52>
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	da11      	bge.n	800ebba <_puts_r+0x9e>
 800eb96:	4622      	mov	r2, r4
 800eb98:	210a      	movs	r1, #10
 800eb9a:	4628      	mov	r0, r5
 800eb9c:	f000 f85f 	bl	800ec5e <__swbuf_r>
 800eba0:	3001      	adds	r0, #1
 800eba2:	d0d7      	beq.n	800eb54 <_puts_r+0x38>
 800eba4:	250a      	movs	r5, #10
 800eba6:	e7d7      	b.n	800eb58 <_puts_r+0x3c>
 800eba8:	4622      	mov	r2, r4
 800ebaa:	4628      	mov	r0, r5
 800ebac:	f000 f857 	bl	800ec5e <__swbuf_r>
 800ebb0:	3001      	adds	r0, #1
 800ebb2:	d1e7      	bne.n	800eb84 <_puts_r+0x68>
 800ebb4:	e7ce      	b.n	800eb54 <_puts_r+0x38>
 800ebb6:	3e01      	subs	r6, #1
 800ebb8:	e7e4      	b.n	800eb84 <_puts_r+0x68>
 800ebba:	6823      	ldr	r3, [r4, #0]
 800ebbc:	1c5a      	adds	r2, r3, #1
 800ebbe:	6022      	str	r2, [r4, #0]
 800ebc0:	220a      	movs	r2, #10
 800ebc2:	701a      	strb	r2, [r3, #0]
 800ebc4:	e7ee      	b.n	800eba4 <_puts_r+0x88>
	...

0800ebc8 <puts>:
 800ebc8:	4b02      	ldr	r3, [pc, #8]	@ (800ebd4 <puts+0xc>)
 800ebca:	4601      	mov	r1, r0
 800ebcc:	6818      	ldr	r0, [r3, #0]
 800ebce:	f7ff bfa5 	b.w	800eb1c <_puts_r>
 800ebd2:	bf00      	nop
 800ebd4:	20000058 	.word	0x20000058

0800ebd8 <__sread>:
 800ebd8:	b510      	push	{r4, lr}
 800ebda:	460c      	mov	r4, r1
 800ebdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebe0:	f000 f900 	bl	800ede4 <_read_r>
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	bfab      	itete	ge
 800ebe8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ebea:	89a3      	ldrhlt	r3, [r4, #12]
 800ebec:	181b      	addge	r3, r3, r0
 800ebee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ebf2:	bfac      	ite	ge
 800ebf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ebf6:	81a3      	strhlt	r3, [r4, #12]
 800ebf8:	bd10      	pop	{r4, pc}

0800ebfa <__swrite>:
 800ebfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebfe:	461f      	mov	r7, r3
 800ec00:	898b      	ldrh	r3, [r1, #12]
 800ec02:	05db      	lsls	r3, r3, #23
 800ec04:	4605      	mov	r5, r0
 800ec06:	460c      	mov	r4, r1
 800ec08:	4616      	mov	r6, r2
 800ec0a:	d505      	bpl.n	800ec18 <__swrite+0x1e>
 800ec0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec10:	2302      	movs	r3, #2
 800ec12:	2200      	movs	r2, #0
 800ec14:	f000 f8d4 	bl	800edc0 <_lseek_r>
 800ec18:	89a3      	ldrh	r3, [r4, #12]
 800ec1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec22:	81a3      	strh	r3, [r4, #12]
 800ec24:	4632      	mov	r2, r6
 800ec26:	463b      	mov	r3, r7
 800ec28:	4628      	mov	r0, r5
 800ec2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec2e:	f000 b8eb 	b.w	800ee08 <_write_r>

0800ec32 <__sseek>:
 800ec32:	b510      	push	{r4, lr}
 800ec34:	460c      	mov	r4, r1
 800ec36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec3a:	f000 f8c1 	bl	800edc0 <_lseek_r>
 800ec3e:	1c43      	adds	r3, r0, #1
 800ec40:	89a3      	ldrh	r3, [r4, #12]
 800ec42:	bf15      	itete	ne
 800ec44:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ec46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ec4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ec4e:	81a3      	strheq	r3, [r4, #12]
 800ec50:	bf18      	it	ne
 800ec52:	81a3      	strhne	r3, [r4, #12]
 800ec54:	bd10      	pop	{r4, pc}

0800ec56 <__sclose>:
 800ec56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec5a:	f000 b8a1 	b.w	800eda0 <_close_r>

0800ec5e <__swbuf_r>:
 800ec5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec60:	460e      	mov	r6, r1
 800ec62:	4614      	mov	r4, r2
 800ec64:	4605      	mov	r5, r0
 800ec66:	b118      	cbz	r0, 800ec70 <__swbuf_r+0x12>
 800ec68:	6a03      	ldr	r3, [r0, #32]
 800ec6a:	b90b      	cbnz	r3, 800ec70 <__swbuf_r+0x12>
 800ec6c:	f7ff ff0e 	bl	800ea8c <__sinit>
 800ec70:	69a3      	ldr	r3, [r4, #24]
 800ec72:	60a3      	str	r3, [r4, #8]
 800ec74:	89a3      	ldrh	r3, [r4, #12]
 800ec76:	071a      	lsls	r2, r3, #28
 800ec78:	d501      	bpl.n	800ec7e <__swbuf_r+0x20>
 800ec7a:	6923      	ldr	r3, [r4, #16]
 800ec7c:	b943      	cbnz	r3, 800ec90 <__swbuf_r+0x32>
 800ec7e:	4621      	mov	r1, r4
 800ec80:	4628      	mov	r0, r5
 800ec82:	f000 f82b 	bl	800ecdc <__swsetup_r>
 800ec86:	b118      	cbz	r0, 800ec90 <__swbuf_r+0x32>
 800ec88:	f04f 37ff 	mov.w	r7, #4294967295
 800ec8c:	4638      	mov	r0, r7
 800ec8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec90:	6823      	ldr	r3, [r4, #0]
 800ec92:	6922      	ldr	r2, [r4, #16]
 800ec94:	1a98      	subs	r0, r3, r2
 800ec96:	6963      	ldr	r3, [r4, #20]
 800ec98:	b2f6      	uxtb	r6, r6
 800ec9a:	4283      	cmp	r3, r0
 800ec9c:	4637      	mov	r7, r6
 800ec9e:	dc05      	bgt.n	800ecac <__swbuf_r+0x4e>
 800eca0:	4621      	mov	r1, r4
 800eca2:	4628      	mov	r0, r5
 800eca4:	f001 fd84 	bl	80107b0 <_fflush_r>
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	d1ed      	bne.n	800ec88 <__swbuf_r+0x2a>
 800ecac:	68a3      	ldr	r3, [r4, #8]
 800ecae:	3b01      	subs	r3, #1
 800ecb0:	60a3      	str	r3, [r4, #8]
 800ecb2:	6823      	ldr	r3, [r4, #0]
 800ecb4:	1c5a      	adds	r2, r3, #1
 800ecb6:	6022      	str	r2, [r4, #0]
 800ecb8:	701e      	strb	r6, [r3, #0]
 800ecba:	6962      	ldr	r2, [r4, #20]
 800ecbc:	1c43      	adds	r3, r0, #1
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d004      	beq.n	800eccc <__swbuf_r+0x6e>
 800ecc2:	89a3      	ldrh	r3, [r4, #12]
 800ecc4:	07db      	lsls	r3, r3, #31
 800ecc6:	d5e1      	bpl.n	800ec8c <__swbuf_r+0x2e>
 800ecc8:	2e0a      	cmp	r6, #10
 800ecca:	d1df      	bne.n	800ec8c <__swbuf_r+0x2e>
 800eccc:	4621      	mov	r1, r4
 800ecce:	4628      	mov	r0, r5
 800ecd0:	f001 fd6e 	bl	80107b0 <_fflush_r>
 800ecd4:	2800      	cmp	r0, #0
 800ecd6:	d0d9      	beq.n	800ec8c <__swbuf_r+0x2e>
 800ecd8:	e7d6      	b.n	800ec88 <__swbuf_r+0x2a>
	...

0800ecdc <__swsetup_r>:
 800ecdc:	b538      	push	{r3, r4, r5, lr}
 800ecde:	4b29      	ldr	r3, [pc, #164]	@ (800ed84 <__swsetup_r+0xa8>)
 800ece0:	4605      	mov	r5, r0
 800ece2:	6818      	ldr	r0, [r3, #0]
 800ece4:	460c      	mov	r4, r1
 800ece6:	b118      	cbz	r0, 800ecf0 <__swsetup_r+0x14>
 800ece8:	6a03      	ldr	r3, [r0, #32]
 800ecea:	b90b      	cbnz	r3, 800ecf0 <__swsetup_r+0x14>
 800ecec:	f7ff fece 	bl	800ea8c <__sinit>
 800ecf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecf4:	0719      	lsls	r1, r3, #28
 800ecf6:	d422      	bmi.n	800ed3e <__swsetup_r+0x62>
 800ecf8:	06da      	lsls	r2, r3, #27
 800ecfa:	d407      	bmi.n	800ed0c <__swsetup_r+0x30>
 800ecfc:	2209      	movs	r2, #9
 800ecfe:	602a      	str	r2, [r5, #0]
 800ed00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed04:	81a3      	strh	r3, [r4, #12]
 800ed06:	f04f 30ff 	mov.w	r0, #4294967295
 800ed0a:	e033      	b.n	800ed74 <__swsetup_r+0x98>
 800ed0c:	0758      	lsls	r0, r3, #29
 800ed0e:	d512      	bpl.n	800ed36 <__swsetup_r+0x5a>
 800ed10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed12:	b141      	cbz	r1, 800ed26 <__swsetup_r+0x4a>
 800ed14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed18:	4299      	cmp	r1, r3
 800ed1a:	d002      	beq.n	800ed22 <__swsetup_r+0x46>
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	f000 feff 	bl	800fb20 <_free_r>
 800ed22:	2300      	movs	r3, #0
 800ed24:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed26:	89a3      	ldrh	r3, [r4, #12]
 800ed28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ed2c:	81a3      	strh	r3, [r4, #12]
 800ed2e:	2300      	movs	r3, #0
 800ed30:	6063      	str	r3, [r4, #4]
 800ed32:	6923      	ldr	r3, [r4, #16]
 800ed34:	6023      	str	r3, [r4, #0]
 800ed36:	89a3      	ldrh	r3, [r4, #12]
 800ed38:	f043 0308 	orr.w	r3, r3, #8
 800ed3c:	81a3      	strh	r3, [r4, #12]
 800ed3e:	6923      	ldr	r3, [r4, #16]
 800ed40:	b94b      	cbnz	r3, 800ed56 <__swsetup_r+0x7a>
 800ed42:	89a3      	ldrh	r3, [r4, #12]
 800ed44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ed48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed4c:	d003      	beq.n	800ed56 <__swsetup_r+0x7a>
 800ed4e:	4621      	mov	r1, r4
 800ed50:	4628      	mov	r0, r5
 800ed52:	f001 fd7b 	bl	801084c <__smakebuf_r>
 800ed56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed5a:	f013 0201 	ands.w	r2, r3, #1
 800ed5e:	d00a      	beq.n	800ed76 <__swsetup_r+0x9a>
 800ed60:	2200      	movs	r2, #0
 800ed62:	60a2      	str	r2, [r4, #8]
 800ed64:	6962      	ldr	r2, [r4, #20]
 800ed66:	4252      	negs	r2, r2
 800ed68:	61a2      	str	r2, [r4, #24]
 800ed6a:	6922      	ldr	r2, [r4, #16]
 800ed6c:	b942      	cbnz	r2, 800ed80 <__swsetup_r+0xa4>
 800ed6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ed72:	d1c5      	bne.n	800ed00 <__swsetup_r+0x24>
 800ed74:	bd38      	pop	{r3, r4, r5, pc}
 800ed76:	0799      	lsls	r1, r3, #30
 800ed78:	bf58      	it	pl
 800ed7a:	6962      	ldrpl	r2, [r4, #20]
 800ed7c:	60a2      	str	r2, [r4, #8]
 800ed7e:	e7f4      	b.n	800ed6a <__swsetup_r+0x8e>
 800ed80:	2000      	movs	r0, #0
 800ed82:	e7f7      	b.n	800ed74 <__swsetup_r+0x98>
 800ed84:	20000058 	.word	0x20000058

0800ed88 <memset>:
 800ed88:	4402      	add	r2, r0
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d100      	bne.n	800ed92 <memset+0xa>
 800ed90:	4770      	bx	lr
 800ed92:	f803 1b01 	strb.w	r1, [r3], #1
 800ed96:	e7f9      	b.n	800ed8c <memset+0x4>

0800ed98 <_localeconv_r>:
 800ed98:	4800      	ldr	r0, [pc, #0]	@ (800ed9c <_localeconv_r+0x4>)
 800ed9a:	4770      	bx	lr
 800ed9c:	20000198 	.word	0x20000198

0800eda0 <_close_r>:
 800eda0:	b538      	push	{r3, r4, r5, lr}
 800eda2:	4d06      	ldr	r5, [pc, #24]	@ (800edbc <_close_r+0x1c>)
 800eda4:	2300      	movs	r3, #0
 800eda6:	4604      	mov	r4, r0
 800eda8:	4608      	mov	r0, r1
 800edaa:	602b      	str	r3, [r5, #0]
 800edac:	f7f2 ff9c 	bl	8001ce8 <_close>
 800edb0:	1c43      	adds	r3, r0, #1
 800edb2:	d102      	bne.n	800edba <_close_r+0x1a>
 800edb4:	682b      	ldr	r3, [r5, #0]
 800edb6:	b103      	cbz	r3, 800edba <_close_r+0x1a>
 800edb8:	6023      	str	r3, [r4, #0]
 800edba:	bd38      	pop	{r3, r4, r5, pc}
 800edbc:	20005764 	.word	0x20005764

0800edc0 <_lseek_r>:
 800edc0:	b538      	push	{r3, r4, r5, lr}
 800edc2:	4d07      	ldr	r5, [pc, #28]	@ (800ede0 <_lseek_r+0x20>)
 800edc4:	4604      	mov	r4, r0
 800edc6:	4608      	mov	r0, r1
 800edc8:	4611      	mov	r1, r2
 800edca:	2200      	movs	r2, #0
 800edcc:	602a      	str	r2, [r5, #0]
 800edce:	461a      	mov	r2, r3
 800edd0:	f7f2 ffb1 	bl	8001d36 <_lseek>
 800edd4:	1c43      	adds	r3, r0, #1
 800edd6:	d102      	bne.n	800edde <_lseek_r+0x1e>
 800edd8:	682b      	ldr	r3, [r5, #0]
 800edda:	b103      	cbz	r3, 800edde <_lseek_r+0x1e>
 800eddc:	6023      	str	r3, [r4, #0]
 800edde:	bd38      	pop	{r3, r4, r5, pc}
 800ede0:	20005764 	.word	0x20005764

0800ede4 <_read_r>:
 800ede4:	b538      	push	{r3, r4, r5, lr}
 800ede6:	4d07      	ldr	r5, [pc, #28]	@ (800ee04 <_read_r+0x20>)
 800ede8:	4604      	mov	r4, r0
 800edea:	4608      	mov	r0, r1
 800edec:	4611      	mov	r1, r2
 800edee:	2200      	movs	r2, #0
 800edf0:	602a      	str	r2, [r5, #0]
 800edf2:	461a      	mov	r2, r3
 800edf4:	f7f2 ff3f 	bl	8001c76 <_read>
 800edf8:	1c43      	adds	r3, r0, #1
 800edfa:	d102      	bne.n	800ee02 <_read_r+0x1e>
 800edfc:	682b      	ldr	r3, [r5, #0]
 800edfe:	b103      	cbz	r3, 800ee02 <_read_r+0x1e>
 800ee00:	6023      	str	r3, [r4, #0]
 800ee02:	bd38      	pop	{r3, r4, r5, pc}
 800ee04:	20005764 	.word	0x20005764

0800ee08 <_write_r>:
 800ee08:	b538      	push	{r3, r4, r5, lr}
 800ee0a:	4d07      	ldr	r5, [pc, #28]	@ (800ee28 <_write_r+0x20>)
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	4608      	mov	r0, r1
 800ee10:	4611      	mov	r1, r2
 800ee12:	2200      	movs	r2, #0
 800ee14:	602a      	str	r2, [r5, #0]
 800ee16:	461a      	mov	r2, r3
 800ee18:	f7f2 ff4a 	bl	8001cb0 <_write>
 800ee1c:	1c43      	adds	r3, r0, #1
 800ee1e:	d102      	bne.n	800ee26 <_write_r+0x1e>
 800ee20:	682b      	ldr	r3, [r5, #0]
 800ee22:	b103      	cbz	r3, 800ee26 <_write_r+0x1e>
 800ee24:	6023      	str	r3, [r4, #0]
 800ee26:	bd38      	pop	{r3, r4, r5, pc}
 800ee28:	20005764 	.word	0x20005764

0800ee2c <__errno>:
 800ee2c:	4b01      	ldr	r3, [pc, #4]	@ (800ee34 <__errno+0x8>)
 800ee2e:	6818      	ldr	r0, [r3, #0]
 800ee30:	4770      	bx	lr
 800ee32:	bf00      	nop
 800ee34:	20000058 	.word	0x20000058

0800ee38 <__libc_init_array>:
 800ee38:	b570      	push	{r4, r5, r6, lr}
 800ee3a:	4d0d      	ldr	r5, [pc, #52]	@ (800ee70 <__libc_init_array+0x38>)
 800ee3c:	4c0d      	ldr	r4, [pc, #52]	@ (800ee74 <__libc_init_array+0x3c>)
 800ee3e:	1b64      	subs	r4, r4, r5
 800ee40:	10a4      	asrs	r4, r4, #2
 800ee42:	2600      	movs	r6, #0
 800ee44:	42a6      	cmp	r6, r4
 800ee46:	d109      	bne.n	800ee5c <__libc_init_array+0x24>
 800ee48:	4d0b      	ldr	r5, [pc, #44]	@ (800ee78 <__libc_init_array+0x40>)
 800ee4a:	4c0c      	ldr	r4, [pc, #48]	@ (800ee7c <__libc_init_array+0x44>)
 800ee4c:	f001 fe2a 	bl	8010aa4 <_init>
 800ee50:	1b64      	subs	r4, r4, r5
 800ee52:	10a4      	asrs	r4, r4, #2
 800ee54:	2600      	movs	r6, #0
 800ee56:	42a6      	cmp	r6, r4
 800ee58:	d105      	bne.n	800ee66 <__libc_init_array+0x2e>
 800ee5a:	bd70      	pop	{r4, r5, r6, pc}
 800ee5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee60:	4798      	blx	r3
 800ee62:	3601      	adds	r6, #1
 800ee64:	e7ee      	b.n	800ee44 <__libc_init_array+0xc>
 800ee66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee6a:	4798      	blx	r3
 800ee6c:	3601      	adds	r6, #1
 800ee6e:	e7f2      	b.n	800ee56 <__libc_init_array+0x1e>
 800ee70:	080112f0 	.word	0x080112f0
 800ee74:	080112f0 	.word	0x080112f0
 800ee78:	080112f0 	.word	0x080112f0
 800ee7c:	080112f4 	.word	0x080112f4

0800ee80 <__retarget_lock_init_recursive>:
 800ee80:	4770      	bx	lr

0800ee82 <__retarget_lock_acquire_recursive>:
 800ee82:	4770      	bx	lr

0800ee84 <__retarget_lock_release_recursive>:
 800ee84:	4770      	bx	lr

0800ee86 <quorem>:
 800ee86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee8a:	6903      	ldr	r3, [r0, #16]
 800ee8c:	690c      	ldr	r4, [r1, #16]
 800ee8e:	42a3      	cmp	r3, r4
 800ee90:	4607      	mov	r7, r0
 800ee92:	db7e      	blt.n	800ef92 <quorem+0x10c>
 800ee94:	3c01      	subs	r4, #1
 800ee96:	f101 0814 	add.w	r8, r1, #20
 800ee9a:	00a3      	lsls	r3, r4, #2
 800ee9c:	f100 0514 	add.w	r5, r0, #20
 800eea0:	9300      	str	r3, [sp, #0]
 800eea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eea6:	9301      	str	r3, [sp, #4]
 800eea8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eeac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eeb8:	fbb2 f6f3 	udiv	r6, r2, r3
 800eebc:	d32e      	bcc.n	800ef1c <quorem+0x96>
 800eebe:	f04f 0a00 	mov.w	sl, #0
 800eec2:	46c4      	mov	ip, r8
 800eec4:	46ae      	mov	lr, r5
 800eec6:	46d3      	mov	fp, sl
 800eec8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eecc:	b298      	uxth	r0, r3
 800eece:	fb06 a000 	mla	r0, r6, r0, sl
 800eed2:	0c02      	lsrs	r2, r0, #16
 800eed4:	0c1b      	lsrs	r3, r3, #16
 800eed6:	fb06 2303 	mla	r3, r6, r3, r2
 800eeda:	f8de 2000 	ldr.w	r2, [lr]
 800eede:	b280      	uxth	r0, r0
 800eee0:	b292      	uxth	r2, r2
 800eee2:	1a12      	subs	r2, r2, r0
 800eee4:	445a      	add	r2, fp
 800eee6:	f8de 0000 	ldr.w	r0, [lr]
 800eeea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800eef4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eef8:	b292      	uxth	r2, r2
 800eefa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800eefe:	45e1      	cmp	r9, ip
 800ef00:	f84e 2b04 	str.w	r2, [lr], #4
 800ef04:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ef08:	d2de      	bcs.n	800eec8 <quorem+0x42>
 800ef0a:	9b00      	ldr	r3, [sp, #0]
 800ef0c:	58eb      	ldr	r3, [r5, r3]
 800ef0e:	b92b      	cbnz	r3, 800ef1c <quorem+0x96>
 800ef10:	9b01      	ldr	r3, [sp, #4]
 800ef12:	3b04      	subs	r3, #4
 800ef14:	429d      	cmp	r5, r3
 800ef16:	461a      	mov	r2, r3
 800ef18:	d32f      	bcc.n	800ef7a <quorem+0xf4>
 800ef1a:	613c      	str	r4, [r7, #16]
 800ef1c:	4638      	mov	r0, r7
 800ef1e:	f001 f979 	bl	8010214 <__mcmp>
 800ef22:	2800      	cmp	r0, #0
 800ef24:	db25      	blt.n	800ef72 <quorem+0xec>
 800ef26:	4629      	mov	r1, r5
 800ef28:	2000      	movs	r0, #0
 800ef2a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef2e:	f8d1 c000 	ldr.w	ip, [r1]
 800ef32:	fa1f fe82 	uxth.w	lr, r2
 800ef36:	fa1f f38c 	uxth.w	r3, ip
 800ef3a:	eba3 030e 	sub.w	r3, r3, lr
 800ef3e:	4403      	add	r3, r0
 800ef40:	0c12      	lsrs	r2, r2, #16
 800ef42:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ef46:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef50:	45c1      	cmp	r9, r8
 800ef52:	f841 3b04 	str.w	r3, [r1], #4
 800ef56:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ef5a:	d2e6      	bcs.n	800ef2a <quorem+0xa4>
 800ef5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef64:	b922      	cbnz	r2, 800ef70 <quorem+0xea>
 800ef66:	3b04      	subs	r3, #4
 800ef68:	429d      	cmp	r5, r3
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	d30b      	bcc.n	800ef86 <quorem+0x100>
 800ef6e:	613c      	str	r4, [r7, #16]
 800ef70:	3601      	adds	r6, #1
 800ef72:	4630      	mov	r0, r6
 800ef74:	b003      	add	sp, #12
 800ef76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef7a:	6812      	ldr	r2, [r2, #0]
 800ef7c:	3b04      	subs	r3, #4
 800ef7e:	2a00      	cmp	r2, #0
 800ef80:	d1cb      	bne.n	800ef1a <quorem+0x94>
 800ef82:	3c01      	subs	r4, #1
 800ef84:	e7c6      	b.n	800ef14 <quorem+0x8e>
 800ef86:	6812      	ldr	r2, [r2, #0]
 800ef88:	3b04      	subs	r3, #4
 800ef8a:	2a00      	cmp	r2, #0
 800ef8c:	d1ef      	bne.n	800ef6e <quorem+0xe8>
 800ef8e:	3c01      	subs	r4, #1
 800ef90:	e7ea      	b.n	800ef68 <quorem+0xe2>
 800ef92:	2000      	movs	r0, #0
 800ef94:	e7ee      	b.n	800ef74 <quorem+0xee>
	...

0800ef98 <_dtoa_r>:
 800ef98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef9c:	69c7      	ldr	r7, [r0, #28]
 800ef9e:	b099      	sub	sp, #100	@ 0x64
 800efa0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800efa4:	ec55 4b10 	vmov	r4, r5, d0
 800efa8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800efaa:	9109      	str	r1, [sp, #36]	@ 0x24
 800efac:	4683      	mov	fp, r0
 800efae:	920e      	str	r2, [sp, #56]	@ 0x38
 800efb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800efb2:	b97f      	cbnz	r7, 800efd4 <_dtoa_r+0x3c>
 800efb4:	2010      	movs	r0, #16
 800efb6:	f000 fdfd 	bl	800fbb4 <malloc>
 800efba:	4602      	mov	r2, r0
 800efbc:	f8cb 001c 	str.w	r0, [fp, #28]
 800efc0:	b920      	cbnz	r0, 800efcc <_dtoa_r+0x34>
 800efc2:	4ba7      	ldr	r3, [pc, #668]	@ (800f260 <_dtoa_r+0x2c8>)
 800efc4:	21ef      	movs	r1, #239	@ 0xef
 800efc6:	48a7      	ldr	r0, [pc, #668]	@ (800f264 <_dtoa_r+0x2cc>)
 800efc8:	f001 fcbc 	bl	8010944 <__assert_func>
 800efcc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800efd0:	6007      	str	r7, [r0, #0]
 800efd2:	60c7      	str	r7, [r0, #12]
 800efd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800efd8:	6819      	ldr	r1, [r3, #0]
 800efda:	b159      	cbz	r1, 800eff4 <_dtoa_r+0x5c>
 800efdc:	685a      	ldr	r2, [r3, #4]
 800efde:	604a      	str	r2, [r1, #4]
 800efe0:	2301      	movs	r3, #1
 800efe2:	4093      	lsls	r3, r2
 800efe4:	608b      	str	r3, [r1, #8]
 800efe6:	4658      	mov	r0, fp
 800efe8:	f000 feda 	bl	800fda0 <_Bfree>
 800efec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800eff0:	2200      	movs	r2, #0
 800eff2:	601a      	str	r2, [r3, #0]
 800eff4:	1e2b      	subs	r3, r5, #0
 800eff6:	bfb9      	ittee	lt
 800eff8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800effc:	9303      	strlt	r3, [sp, #12]
 800effe:	2300      	movge	r3, #0
 800f000:	6033      	strge	r3, [r6, #0]
 800f002:	9f03      	ldr	r7, [sp, #12]
 800f004:	4b98      	ldr	r3, [pc, #608]	@ (800f268 <_dtoa_r+0x2d0>)
 800f006:	bfbc      	itt	lt
 800f008:	2201      	movlt	r2, #1
 800f00a:	6032      	strlt	r2, [r6, #0]
 800f00c:	43bb      	bics	r3, r7
 800f00e:	d112      	bne.n	800f036 <_dtoa_r+0x9e>
 800f010:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f012:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f016:	6013      	str	r3, [r2, #0]
 800f018:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f01c:	4323      	orrs	r3, r4
 800f01e:	f000 854d 	beq.w	800fabc <_dtoa_r+0xb24>
 800f022:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f024:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f27c <_dtoa_r+0x2e4>
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f000 854f 	beq.w	800facc <_dtoa_r+0xb34>
 800f02e:	f10a 0303 	add.w	r3, sl, #3
 800f032:	f000 bd49 	b.w	800fac8 <_dtoa_r+0xb30>
 800f036:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f03a:	2200      	movs	r2, #0
 800f03c:	ec51 0b17 	vmov	r0, r1, d7
 800f040:	2300      	movs	r3, #0
 800f042:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f046:	f7f1 fd5f 	bl	8000b08 <__aeabi_dcmpeq>
 800f04a:	4680      	mov	r8, r0
 800f04c:	b158      	cbz	r0, 800f066 <_dtoa_r+0xce>
 800f04e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f050:	2301      	movs	r3, #1
 800f052:	6013      	str	r3, [r2, #0]
 800f054:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f056:	b113      	cbz	r3, 800f05e <_dtoa_r+0xc6>
 800f058:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f05a:	4b84      	ldr	r3, [pc, #528]	@ (800f26c <_dtoa_r+0x2d4>)
 800f05c:	6013      	str	r3, [r2, #0]
 800f05e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f280 <_dtoa_r+0x2e8>
 800f062:	f000 bd33 	b.w	800facc <_dtoa_r+0xb34>
 800f066:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f06a:	aa16      	add	r2, sp, #88	@ 0x58
 800f06c:	a917      	add	r1, sp, #92	@ 0x5c
 800f06e:	4658      	mov	r0, fp
 800f070:	f001 f980 	bl	8010374 <__d2b>
 800f074:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f078:	4681      	mov	r9, r0
 800f07a:	2e00      	cmp	r6, #0
 800f07c:	d077      	beq.n	800f16e <_dtoa_r+0x1d6>
 800f07e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f080:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f08c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f090:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f094:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f098:	4619      	mov	r1, r3
 800f09a:	2200      	movs	r2, #0
 800f09c:	4b74      	ldr	r3, [pc, #464]	@ (800f270 <_dtoa_r+0x2d8>)
 800f09e:	f7f1 f913 	bl	80002c8 <__aeabi_dsub>
 800f0a2:	a369      	add	r3, pc, #420	@ (adr r3, 800f248 <_dtoa_r+0x2b0>)
 800f0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a8:	f7f1 fac6 	bl	8000638 <__aeabi_dmul>
 800f0ac:	a368      	add	r3, pc, #416	@ (adr r3, 800f250 <_dtoa_r+0x2b8>)
 800f0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b2:	f7f1 f90b 	bl	80002cc <__adddf3>
 800f0b6:	4604      	mov	r4, r0
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	460d      	mov	r5, r1
 800f0bc:	f7f1 fa52 	bl	8000564 <__aeabi_i2d>
 800f0c0:	a365      	add	r3, pc, #404	@ (adr r3, 800f258 <_dtoa_r+0x2c0>)
 800f0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c6:	f7f1 fab7 	bl	8000638 <__aeabi_dmul>
 800f0ca:	4602      	mov	r2, r0
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	4629      	mov	r1, r5
 800f0d2:	f7f1 f8fb 	bl	80002cc <__adddf3>
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	460d      	mov	r5, r1
 800f0da:	f7f1 fd5d 	bl	8000b98 <__aeabi_d2iz>
 800f0de:	2200      	movs	r2, #0
 800f0e0:	4607      	mov	r7, r0
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	4629      	mov	r1, r5
 800f0e8:	f7f1 fd18 	bl	8000b1c <__aeabi_dcmplt>
 800f0ec:	b140      	cbz	r0, 800f100 <_dtoa_r+0x168>
 800f0ee:	4638      	mov	r0, r7
 800f0f0:	f7f1 fa38 	bl	8000564 <__aeabi_i2d>
 800f0f4:	4622      	mov	r2, r4
 800f0f6:	462b      	mov	r3, r5
 800f0f8:	f7f1 fd06 	bl	8000b08 <__aeabi_dcmpeq>
 800f0fc:	b900      	cbnz	r0, 800f100 <_dtoa_r+0x168>
 800f0fe:	3f01      	subs	r7, #1
 800f100:	2f16      	cmp	r7, #22
 800f102:	d851      	bhi.n	800f1a8 <_dtoa_r+0x210>
 800f104:	4b5b      	ldr	r3, [pc, #364]	@ (800f274 <_dtoa_r+0x2dc>)
 800f106:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f112:	f7f1 fd03 	bl	8000b1c <__aeabi_dcmplt>
 800f116:	2800      	cmp	r0, #0
 800f118:	d048      	beq.n	800f1ac <_dtoa_r+0x214>
 800f11a:	3f01      	subs	r7, #1
 800f11c:	2300      	movs	r3, #0
 800f11e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f120:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f122:	1b9b      	subs	r3, r3, r6
 800f124:	1e5a      	subs	r2, r3, #1
 800f126:	bf44      	itt	mi
 800f128:	f1c3 0801 	rsbmi	r8, r3, #1
 800f12c:	2300      	movmi	r3, #0
 800f12e:	9208      	str	r2, [sp, #32]
 800f130:	bf54      	ite	pl
 800f132:	f04f 0800 	movpl.w	r8, #0
 800f136:	9308      	strmi	r3, [sp, #32]
 800f138:	2f00      	cmp	r7, #0
 800f13a:	db39      	blt.n	800f1b0 <_dtoa_r+0x218>
 800f13c:	9b08      	ldr	r3, [sp, #32]
 800f13e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f140:	443b      	add	r3, r7
 800f142:	9308      	str	r3, [sp, #32]
 800f144:	2300      	movs	r3, #0
 800f146:	930a      	str	r3, [sp, #40]	@ 0x28
 800f148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f14a:	2b09      	cmp	r3, #9
 800f14c:	d864      	bhi.n	800f218 <_dtoa_r+0x280>
 800f14e:	2b05      	cmp	r3, #5
 800f150:	bfc4      	itt	gt
 800f152:	3b04      	subgt	r3, #4
 800f154:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f158:	f1a3 0302 	sub.w	r3, r3, #2
 800f15c:	bfcc      	ite	gt
 800f15e:	2400      	movgt	r4, #0
 800f160:	2401      	movle	r4, #1
 800f162:	2b03      	cmp	r3, #3
 800f164:	d863      	bhi.n	800f22e <_dtoa_r+0x296>
 800f166:	e8df f003 	tbb	[pc, r3]
 800f16a:	372a      	.short	0x372a
 800f16c:	5535      	.short	0x5535
 800f16e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f172:	441e      	add	r6, r3
 800f174:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f178:	2b20      	cmp	r3, #32
 800f17a:	bfc1      	itttt	gt
 800f17c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f180:	409f      	lslgt	r7, r3
 800f182:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f186:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f18a:	bfd6      	itet	le
 800f18c:	f1c3 0320 	rsble	r3, r3, #32
 800f190:	ea47 0003 	orrgt.w	r0, r7, r3
 800f194:	fa04 f003 	lslle.w	r0, r4, r3
 800f198:	f7f1 f9d4 	bl	8000544 <__aeabi_ui2d>
 800f19c:	2201      	movs	r2, #1
 800f19e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f1a2:	3e01      	subs	r6, #1
 800f1a4:	9214      	str	r2, [sp, #80]	@ 0x50
 800f1a6:	e777      	b.n	800f098 <_dtoa_r+0x100>
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	e7b8      	b.n	800f11e <_dtoa_r+0x186>
 800f1ac:	9012      	str	r0, [sp, #72]	@ 0x48
 800f1ae:	e7b7      	b.n	800f120 <_dtoa_r+0x188>
 800f1b0:	427b      	negs	r3, r7
 800f1b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	eba8 0807 	sub.w	r8, r8, r7
 800f1ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f1bc:	e7c4      	b.n	800f148 <_dtoa_r+0x1b0>
 800f1be:	2300      	movs	r3, #0
 800f1c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f1c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	dc35      	bgt.n	800f234 <_dtoa_r+0x29c>
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	9300      	str	r3, [sp, #0]
 800f1cc:	9307      	str	r3, [sp, #28]
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f1d2:	e00b      	b.n	800f1ec <_dtoa_r+0x254>
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	e7f3      	b.n	800f1c0 <_dtoa_r+0x228>
 800f1d8:	2300      	movs	r3, #0
 800f1da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f1dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1de:	18fb      	adds	r3, r7, r3
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	9307      	str	r3, [sp, #28]
 800f1e8:	bfb8      	it	lt
 800f1ea:	2301      	movlt	r3, #1
 800f1ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	2204      	movs	r2, #4
 800f1f4:	f102 0514 	add.w	r5, r2, #20
 800f1f8:	429d      	cmp	r5, r3
 800f1fa:	d91f      	bls.n	800f23c <_dtoa_r+0x2a4>
 800f1fc:	6041      	str	r1, [r0, #4]
 800f1fe:	4658      	mov	r0, fp
 800f200:	f000 fd8e 	bl	800fd20 <_Balloc>
 800f204:	4682      	mov	sl, r0
 800f206:	2800      	cmp	r0, #0
 800f208:	d13c      	bne.n	800f284 <_dtoa_r+0x2ec>
 800f20a:	4b1b      	ldr	r3, [pc, #108]	@ (800f278 <_dtoa_r+0x2e0>)
 800f20c:	4602      	mov	r2, r0
 800f20e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f212:	e6d8      	b.n	800efc6 <_dtoa_r+0x2e>
 800f214:	2301      	movs	r3, #1
 800f216:	e7e0      	b.n	800f1da <_dtoa_r+0x242>
 800f218:	2401      	movs	r4, #1
 800f21a:	2300      	movs	r3, #0
 800f21c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f21e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f220:	f04f 33ff 	mov.w	r3, #4294967295
 800f224:	9300      	str	r3, [sp, #0]
 800f226:	9307      	str	r3, [sp, #28]
 800f228:	2200      	movs	r2, #0
 800f22a:	2312      	movs	r3, #18
 800f22c:	e7d0      	b.n	800f1d0 <_dtoa_r+0x238>
 800f22e:	2301      	movs	r3, #1
 800f230:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f232:	e7f5      	b.n	800f220 <_dtoa_r+0x288>
 800f234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f236:	9300      	str	r3, [sp, #0]
 800f238:	9307      	str	r3, [sp, #28]
 800f23a:	e7d7      	b.n	800f1ec <_dtoa_r+0x254>
 800f23c:	3101      	adds	r1, #1
 800f23e:	0052      	lsls	r2, r2, #1
 800f240:	e7d8      	b.n	800f1f4 <_dtoa_r+0x25c>
 800f242:	bf00      	nop
 800f244:	f3af 8000 	nop.w
 800f248:	636f4361 	.word	0x636f4361
 800f24c:	3fd287a7 	.word	0x3fd287a7
 800f250:	8b60c8b3 	.word	0x8b60c8b3
 800f254:	3fc68a28 	.word	0x3fc68a28
 800f258:	509f79fb 	.word	0x509f79fb
 800f25c:	3fd34413 	.word	0x3fd34413
 800f260:	08010fbb 	.word	0x08010fbb
 800f264:	08010fd2 	.word	0x08010fd2
 800f268:	7ff00000 	.word	0x7ff00000
 800f26c:	08010f8b 	.word	0x08010f8b
 800f270:	3ff80000 	.word	0x3ff80000
 800f274:	080110c8 	.word	0x080110c8
 800f278:	0801102a 	.word	0x0801102a
 800f27c:	08010fb7 	.word	0x08010fb7
 800f280:	08010f8a 	.word	0x08010f8a
 800f284:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f288:	6018      	str	r0, [r3, #0]
 800f28a:	9b07      	ldr	r3, [sp, #28]
 800f28c:	2b0e      	cmp	r3, #14
 800f28e:	f200 80a4 	bhi.w	800f3da <_dtoa_r+0x442>
 800f292:	2c00      	cmp	r4, #0
 800f294:	f000 80a1 	beq.w	800f3da <_dtoa_r+0x442>
 800f298:	2f00      	cmp	r7, #0
 800f29a:	dd33      	ble.n	800f304 <_dtoa_r+0x36c>
 800f29c:	4bad      	ldr	r3, [pc, #692]	@ (800f554 <_dtoa_r+0x5bc>)
 800f29e:	f007 020f 	and.w	r2, r7, #15
 800f2a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2a6:	ed93 7b00 	vldr	d7, [r3]
 800f2aa:	05f8      	lsls	r0, r7, #23
 800f2ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f2b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f2b4:	d516      	bpl.n	800f2e4 <_dtoa_r+0x34c>
 800f2b6:	4ba8      	ldr	r3, [pc, #672]	@ (800f558 <_dtoa_r+0x5c0>)
 800f2b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f2c0:	f7f1 fae4 	bl	800088c <__aeabi_ddiv>
 800f2c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2c8:	f004 040f 	and.w	r4, r4, #15
 800f2cc:	2603      	movs	r6, #3
 800f2ce:	4da2      	ldr	r5, [pc, #648]	@ (800f558 <_dtoa_r+0x5c0>)
 800f2d0:	b954      	cbnz	r4, 800f2e8 <_dtoa_r+0x350>
 800f2d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2da:	f7f1 fad7 	bl	800088c <__aeabi_ddiv>
 800f2de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2e2:	e028      	b.n	800f336 <_dtoa_r+0x39e>
 800f2e4:	2602      	movs	r6, #2
 800f2e6:	e7f2      	b.n	800f2ce <_dtoa_r+0x336>
 800f2e8:	07e1      	lsls	r1, r4, #31
 800f2ea:	d508      	bpl.n	800f2fe <_dtoa_r+0x366>
 800f2ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f2f4:	f7f1 f9a0 	bl	8000638 <__aeabi_dmul>
 800f2f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f2fc:	3601      	adds	r6, #1
 800f2fe:	1064      	asrs	r4, r4, #1
 800f300:	3508      	adds	r5, #8
 800f302:	e7e5      	b.n	800f2d0 <_dtoa_r+0x338>
 800f304:	f000 80d2 	beq.w	800f4ac <_dtoa_r+0x514>
 800f308:	427c      	negs	r4, r7
 800f30a:	4b92      	ldr	r3, [pc, #584]	@ (800f554 <_dtoa_r+0x5bc>)
 800f30c:	4d92      	ldr	r5, [pc, #584]	@ (800f558 <_dtoa_r+0x5c0>)
 800f30e:	f004 020f 	and.w	r2, r4, #15
 800f312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f31e:	f7f1 f98b 	bl	8000638 <__aeabi_dmul>
 800f322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f326:	1124      	asrs	r4, r4, #4
 800f328:	2300      	movs	r3, #0
 800f32a:	2602      	movs	r6, #2
 800f32c:	2c00      	cmp	r4, #0
 800f32e:	f040 80b2 	bne.w	800f496 <_dtoa_r+0x4fe>
 800f332:	2b00      	cmp	r3, #0
 800f334:	d1d3      	bne.n	800f2de <_dtoa_r+0x346>
 800f336:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f338:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	f000 80b7 	beq.w	800f4b0 <_dtoa_r+0x518>
 800f342:	4b86      	ldr	r3, [pc, #536]	@ (800f55c <_dtoa_r+0x5c4>)
 800f344:	2200      	movs	r2, #0
 800f346:	4620      	mov	r0, r4
 800f348:	4629      	mov	r1, r5
 800f34a:	f7f1 fbe7 	bl	8000b1c <__aeabi_dcmplt>
 800f34e:	2800      	cmp	r0, #0
 800f350:	f000 80ae 	beq.w	800f4b0 <_dtoa_r+0x518>
 800f354:	9b07      	ldr	r3, [sp, #28]
 800f356:	2b00      	cmp	r3, #0
 800f358:	f000 80aa 	beq.w	800f4b0 <_dtoa_r+0x518>
 800f35c:	9b00      	ldr	r3, [sp, #0]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	dd37      	ble.n	800f3d2 <_dtoa_r+0x43a>
 800f362:	1e7b      	subs	r3, r7, #1
 800f364:	9304      	str	r3, [sp, #16]
 800f366:	4620      	mov	r0, r4
 800f368:	4b7d      	ldr	r3, [pc, #500]	@ (800f560 <_dtoa_r+0x5c8>)
 800f36a:	2200      	movs	r2, #0
 800f36c:	4629      	mov	r1, r5
 800f36e:	f7f1 f963 	bl	8000638 <__aeabi_dmul>
 800f372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f376:	9c00      	ldr	r4, [sp, #0]
 800f378:	3601      	adds	r6, #1
 800f37a:	4630      	mov	r0, r6
 800f37c:	f7f1 f8f2 	bl	8000564 <__aeabi_i2d>
 800f380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f384:	f7f1 f958 	bl	8000638 <__aeabi_dmul>
 800f388:	4b76      	ldr	r3, [pc, #472]	@ (800f564 <_dtoa_r+0x5cc>)
 800f38a:	2200      	movs	r2, #0
 800f38c:	f7f0 ff9e 	bl	80002cc <__adddf3>
 800f390:	4605      	mov	r5, r0
 800f392:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f396:	2c00      	cmp	r4, #0
 800f398:	f040 808d 	bne.w	800f4b6 <_dtoa_r+0x51e>
 800f39c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3a0:	4b71      	ldr	r3, [pc, #452]	@ (800f568 <_dtoa_r+0x5d0>)
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	f7f0 ff90 	bl	80002c8 <__aeabi_dsub>
 800f3a8:	4602      	mov	r2, r0
 800f3aa:	460b      	mov	r3, r1
 800f3ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f3b0:	462a      	mov	r2, r5
 800f3b2:	4633      	mov	r3, r6
 800f3b4:	f7f1 fbd0 	bl	8000b58 <__aeabi_dcmpgt>
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	f040 828b 	bne.w	800f8d4 <_dtoa_r+0x93c>
 800f3be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3c2:	462a      	mov	r2, r5
 800f3c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f3c8:	f7f1 fba8 	bl	8000b1c <__aeabi_dcmplt>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	f040 8128 	bne.w	800f622 <_dtoa_r+0x68a>
 800f3d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f3d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f3da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	f2c0 815a 	blt.w	800f696 <_dtoa_r+0x6fe>
 800f3e2:	2f0e      	cmp	r7, #14
 800f3e4:	f300 8157 	bgt.w	800f696 <_dtoa_r+0x6fe>
 800f3e8:	4b5a      	ldr	r3, [pc, #360]	@ (800f554 <_dtoa_r+0x5bc>)
 800f3ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f3ee:	ed93 7b00 	vldr	d7, [r3]
 800f3f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	ed8d 7b00 	vstr	d7, [sp]
 800f3fa:	da03      	bge.n	800f404 <_dtoa_r+0x46c>
 800f3fc:	9b07      	ldr	r3, [sp, #28]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	f340 8101 	ble.w	800f606 <_dtoa_r+0x66e>
 800f404:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f408:	4656      	mov	r6, sl
 800f40a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f40e:	4620      	mov	r0, r4
 800f410:	4629      	mov	r1, r5
 800f412:	f7f1 fa3b 	bl	800088c <__aeabi_ddiv>
 800f416:	f7f1 fbbf 	bl	8000b98 <__aeabi_d2iz>
 800f41a:	4680      	mov	r8, r0
 800f41c:	f7f1 f8a2 	bl	8000564 <__aeabi_i2d>
 800f420:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f424:	f7f1 f908 	bl	8000638 <__aeabi_dmul>
 800f428:	4602      	mov	r2, r0
 800f42a:	460b      	mov	r3, r1
 800f42c:	4620      	mov	r0, r4
 800f42e:	4629      	mov	r1, r5
 800f430:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f434:	f7f0 ff48 	bl	80002c8 <__aeabi_dsub>
 800f438:	f806 4b01 	strb.w	r4, [r6], #1
 800f43c:	9d07      	ldr	r5, [sp, #28]
 800f43e:	eba6 040a 	sub.w	r4, r6, sl
 800f442:	42a5      	cmp	r5, r4
 800f444:	4602      	mov	r2, r0
 800f446:	460b      	mov	r3, r1
 800f448:	f040 8117 	bne.w	800f67a <_dtoa_r+0x6e2>
 800f44c:	f7f0 ff3e 	bl	80002cc <__adddf3>
 800f450:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f454:	4604      	mov	r4, r0
 800f456:	460d      	mov	r5, r1
 800f458:	f7f1 fb7e 	bl	8000b58 <__aeabi_dcmpgt>
 800f45c:	2800      	cmp	r0, #0
 800f45e:	f040 80f9 	bne.w	800f654 <_dtoa_r+0x6bc>
 800f462:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f466:	4620      	mov	r0, r4
 800f468:	4629      	mov	r1, r5
 800f46a:	f7f1 fb4d 	bl	8000b08 <__aeabi_dcmpeq>
 800f46e:	b118      	cbz	r0, 800f478 <_dtoa_r+0x4e0>
 800f470:	f018 0f01 	tst.w	r8, #1
 800f474:	f040 80ee 	bne.w	800f654 <_dtoa_r+0x6bc>
 800f478:	4649      	mov	r1, r9
 800f47a:	4658      	mov	r0, fp
 800f47c:	f000 fc90 	bl	800fda0 <_Bfree>
 800f480:	2300      	movs	r3, #0
 800f482:	7033      	strb	r3, [r6, #0]
 800f484:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f486:	3701      	adds	r7, #1
 800f488:	601f      	str	r7, [r3, #0]
 800f48a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	f000 831d 	beq.w	800facc <_dtoa_r+0xb34>
 800f492:	601e      	str	r6, [r3, #0]
 800f494:	e31a      	b.n	800facc <_dtoa_r+0xb34>
 800f496:	07e2      	lsls	r2, r4, #31
 800f498:	d505      	bpl.n	800f4a6 <_dtoa_r+0x50e>
 800f49a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f49e:	f7f1 f8cb 	bl	8000638 <__aeabi_dmul>
 800f4a2:	3601      	adds	r6, #1
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	1064      	asrs	r4, r4, #1
 800f4a8:	3508      	adds	r5, #8
 800f4aa:	e73f      	b.n	800f32c <_dtoa_r+0x394>
 800f4ac:	2602      	movs	r6, #2
 800f4ae:	e742      	b.n	800f336 <_dtoa_r+0x39e>
 800f4b0:	9c07      	ldr	r4, [sp, #28]
 800f4b2:	9704      	str	r7, [sp, #16]
 800f4b4:	e761      	b.n	800f37a <_dtoa_r+0x3e2>
 800f4b6:	4b27      	ldr	r3, [pc, #156]	@ (800f554 <_dtoa_r+0x5bc>)
 800f4b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f4ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f4be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f4c2:	4454      	add	r4, sl
 800f4c4:	2900      	cmp	r1, #0
 800f4c6:	d053      	beq.n	800f570 <_dtoa_r+0x5d8>
 800f4c8:	4928      	ldr	r1, [pc, #160]	@ (800f56c <_dtoa_r+0x5d4>)
 800f4ca:	2000      	movs	r0, #0
 800f4cc:	f7f1 f9de 	bl	800088c <__aeabi_ddiv>
 800f4d0:	4633      	mov	r3, r6
 800f4d2:	462a      	mov	r2, r5
 800f4d4:	f7f0 fef8 	bl	80002c8 <__aeabi_dsub>
 800f4d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f4dc:	4656      	mov	r6, sl
 800f4de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4e2:	f7f1 fb59 	bl	8000b98 <__aeabi_d2iz>
 800f4e6:	4605      	mov	r5, r0
 800f4e8:	f7f1 f83c 	bl	8000564 <__aeabi_i2d>
 800f4ec:	4602      	mov	r2, r0
 800f4ee:	460b      	mov	r3, r1
 800f4f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4f4:	f7f0 fee8 	bl	80002c8 <__aeabi_dsub>
 800f4f8:	3530      	adds	r5, #48	@ 0x30
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f502:	f806 5b01 	strb.w	r5, [r6], #1
 800f506:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f50a:	f7f1 fb07 	bl	8000b1c <__aeabi_dcmplt>
 800f50e:	2800      	cmp	r0, #0
 800f510:	d171      	bne.n	800f5f6 <_dtoa_r+0x65e>
 800f512:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f516:	4911      	ldr	r1, [pc, #68]	@ (800f55c <_dtoa_r+0x5c4>)
 800f518:	2000      	movs	r0, #0
 800f51a:	f7f0 fed5 	bl	80002c8 <__aeabi_dsub>
 800f51e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f522:	f7f1 fafb 	bl	8000b1c <__aeabi_dcmplt>
 800f526:	2800      	cmp	r0, #0
 800f528:	f040 8095 	bne.w	800f656 <_dtoa_r+0x6be>
 800f52c:	42a6      	cmp	r6, r4
 800f52e:	f43f af50 	beq.w	800f3d2 <_dtoa_r+0x43a>
 800f532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f536:	4b0a      	ldr	r3, [pc, #40]	@ (800f560 <_dtoa_r+0x5c8>)
 800f538:	2200      	movs	r2, #0
 800f53a:	f7f1 f87d 	bl	8000638 <__aeabi_dmul>
 800f53e:	4b08      	ldr	r3, [pc, #32]	@ (800f560 <_dtoa_r+0x5c8>)
 800f540:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f544:	2200      	movs	r2, #0
 800f546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f54a:	f7f1 f875 	bl	8000638 <__aeabi_dmul>
 800f54e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f552:	e7c4      	b.n	800f4de <_dtoa_r+0x546>
 800f554:	080110c8 	.word	0x080110c8
 800f558:	080110a0 	.word	0x080110a0
 800f55c:	3ff00000 	.word	0x3ff00000
 800f560:	40240000 	.word	0x40240000
 800f564:	401c0000 	.word	0x401c0000
 800f568:	40140000 	.word	0x40140000
 800f56c:	3fe00000 	.word	0x3fe00000
 800f570:	4631      	mov	r1, r6
 800f572:	4628      	mov	r0, r5
 800f574:	f7f1 f860 	bl	8000638 <__aeabi_dmul>
 800f578:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f57c:	9415      	str	r4, [sp, #84]	@ 0x54
 800f57e:	4656      	mov	r6, sl
 800f580:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f584:	f7f1 fb08 	bl	8000b98 <__aeabi_d2iz>
 800f588:	4605      	mov	r5, r0
 800f58a:	f7f0 ffeb 	bl	8000564 <__aeabi_i2d>
 800f58e:	4602      	mov	r2, r0
 800f590:	460b      	mov	r3, r1
 800f592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f596:	f7f0 fe97 	bl	80002c8 <__aeabi_dsub>
 800f59a:	3530      	adds	r5, #48	@ 0x30
 800f59c:	f806 5b01 	strb.w	r5, [r6], #1
 800f5a0:	4602      	mov	r2, r0
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	42a6      	cmp	r6, r4
 800f5a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f5aa:	f04f 0200 	mov.w	r2, #0
 800f5ae:	d124      	bne.n	800f5fa <_dtoa_r+0x662>
 800f5b0:	4bac      	ldr	r3, [pc, #688]	@ (800f864 <_dtoa_r+0x8cc>)
 800f5b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f5b6:	f7f0 fe89 	bl	80002cc <__adddf3>
 800f5ba:	4602      	mov	r2, r0
 800f5bc:	460b      	mov	r3, r1
 800f5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5c2:	f7f1 fac9 	bl	8000b58 <__aeabi_dcmpgt>
 800f5c6:	2800      	cmp	r0, #0
 800f5c8:	d145      	bne.n	800f656 <_dtoa_r+0x6be>
 800f5ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f5ce:	49a5      	ldr	r1, [pc, #660]	@ (800f864 <_dtoa_r+0x8cc>)
 800f5d0:	2000      	movs	r0, #0
 800f5d2:	f7f0 fe79 	bl	80002c8 <__aeabi_dsub>
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	460b      	mov	r3, r1
 800f5da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5de:	f7f1 fa9d 	bl	8000b1c <__aeabi_dcmplt>
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	f43f aef5 	beq.w	800f3d2 <_dtoa_r+0x43a>
 800f5e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f5ea:	1e73      	subs	r3, r6, #1
 800f5ec:	9315      	str	r3, [sp, #84]	@ 0x54
 800f5ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f5f2:	2b30      	cmp	r3, #48	@ 0x30
 800f5f4:	d0f8      	beq.n	800f5e8 <_dtoa_r+0x650>
 800f5f6:	9f04      	ldr	r7, [sp, #16]
 800f5f8:	e73e      	b.n	800f478 <_dtoa_r+0x4e0>
 800f5fa:	4b9b      	ldr	r3, [pc, #620]	@ (800f868 <_dtoa_r+0x8d0>)
 800f5fc:	f7f1 f81c 	bl	8000638 <__aeabi_dmul>
 800f600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f604:	e7bc      	b.n	800f580 <_dtoa_r+0x5e8>
 800f606:	d10c      	bne.n	800f622 <_dtoa_r+0x68a>
 800f608:	4b98      	ldr	r3, [pc, #608]	@ (800f86c <_dtoa_r+0x8d4>)
 800f60a:	2200      	movs	r2, #0
 800f60c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f610:	f7f1 f812 	bl	8000638 <__aeabi_dmul>
 800f614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f618:	f7f1 fa94 	bl	8000b44 <__aeabi_dcmpge>
 800f61c:	2800      	cmp	r0, #0
 800f61e:	f000 8157 	beq.w	800f8d0 <_dtoa_r+0x938>
 800f622:	2400      	movs	r4, #0
 800f624:	4625      	mov	r5, r4
 800f626:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f628:	43db      	mvns	r3, r3
 800f62a:	9304      	str	r3, [sp, #16]
 800f62c:	4656      	mov	r6, sl
 800f62e:	2700      	movs	r7, #0
 800f630:	4621      	mov	r1, r4
 800f632:	4658      	mov	r0, fp
 800f634:	f000 fbb4 	bl	800fda0 <_Bfree>
 800f638:	2d00      	cmp	r5, #0
 800f63a:	d0dc      	beq.n	800f5f6 <_dtoa_r+0x65e>
 800f63c:	b12f      	cbz	r7, 800f64a <_dtoa_r+0x6b2>
 800f63e:	42af      	cmp	r7, r5
 800f640:	d003      	beq.n	800f64a <_dtoa_r+0x6b2>
 800f642:	4639      	mov	r1, r7
 800f644:	4658      	mov	r0, fp
 800f646:	f000 fbab 	bl	800fda0 <_Bfree>
 800f64a:	4629      	mov	r1, r5
 800f64c:	4658      	mov	r0, fp
 800f64e:	f000 fba7 	bl	800fda0 <_Bfree>
 800f652:	e7d0      	b.n	800f5f6 <_dtoa_r+0x65e>
 800f654:	9704      	str	r7, [sp, #16]
 800f656:	4633      	mov	r3, r6
 800f658:	461e      	mov	r6, r3
 800f65a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f65e:	2a39      	cmp	r2, #57	@ 0x39
 800f660:	d107      	bne.n	800f672 <_dtoa_r+0x6da>
 800f662:	459a      	cmp	sl, r3
 800f664:	d1f8      	bne.n	800f658 <_dtoa_r+0x6c0>
 800f666:	9a04      	ldr	r2, [sp, #16]
 800f668:	3201      	adds	r2, #1
 800f66a:	9204      	str	r2, [sp, #16]
 800f66c:	2230      	movs	r2, #48	@ 0x30
 800f66e:	f88a 2000 	strb.w	r2, [sl]
 800f672:	781a      	ldrb	r2, [r3, #0]
 800f674:	3201      	adds	r2, #1
 800f676:	701a      	strb	r2, [r3, #0]
 800f678:	e7bd      	b.n	800f5f6 <_dtoa_r+0x65e>
 800f67a:	4b7b      	ldr	r3, [pc, #492]	@ (800f868 <_dtoa_r+0x8d0>)
 800f67c:	2200      	movs	r2, #0
 800f67e:	f7f0 ffdb 	bl	8000638 <__aeabi_dmul>
 800f682:	2200      	movs	r2, #0
 800f684:	2300      	movs	r3, #0
 800f686:	4604      	mov	r4, r0
 800f688:	460d      	mov	r5, r1
 800f68a:	f7f1 fa3d 	bl	8000b08 <__aeabi_dcmpeq>
 800f68e:	2800      	cmp	r0, #0
 800f690:	f43f aebb 	beq.w	800f40a <_dtoa_r+0x472>
 800f694:	e6f0      	b.n	800f478 <_dtoa_r+0x4e0>
 800f696:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f698:	2a00      	cmp	r2, #0
 800f69a:	f000 80db 	beq.w	800f854 <_dtoa_r+0x8bc>
 800f69e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f6a0:	2a01      	cmp	r2, #1
 800f6a2:	f300 80bf 	bgt.w	800f824 <_dtoa_r+0x88c>
 800f6a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f6a8:	2a00      	cmp	r2, #0
 800f6aa:	f000 80b7 	beq.w	800f81c <_dtoa_r+0x884>
 800f6ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f6b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f6b4:	4646      	mov	r6, r8
 800f6b6:	9a08      	ldr	r2, [sp, #32]
 800f6b8:	2101      	movs	r1, #1
 800f6ba:	441a      	add	r2, r3
 800f6bc:	4658      	mov	r0, fp
 800f6be:	4498      	add	r8, r3
 800f6c0:	9208      	str	r2, [sp, #32]
 800f6c2:	f000 fc21 	bl	800ff08 <__i2b>
 800f6c6:	4605      	mov	r5, r0
 800f6c8:	b15e      	cbz	r6, 800f6e2 <_dtoa_r+0x74a>
 800f6ca:	9b08      	ldr	r3, [sp, #32]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	dd08      	ble.n	800f6e2 <_dtoa_r+0x74a>
 800f6d0:	42b3      	cmp	r3, r6
 800f6d2:	9a08      	ldr	r2, [sp, #32]
 800f6d4:	bfa8      	it	ge
 800f6d6:	4633      	movge	r3, r6
 800f6d8:	eba8 0803 	sub.w	r8, r8, r3
 800f6dc:	1af6      	subs	r6, r6, r3
 800f6de:	1ad3      	subs	r3, r2, r3
 800f6e0:	9308      	str	r3, [sp, #32]
 800f6e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6e4:	b1f3      	cbz	r3, 800f724 <_dtoa_r+0x78c>
 800f6e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	f000 80b7 	beq.w	800f85c <_dtoa_r+0x8c4>
 800f6ee:	b18c      	cbz	r4, 800f714 <_dtoa_r+0x77c>
 800f6f0:	4629      	mov	r1, r5
 800f6f2:	4622      	mov	r2, r4
 800f6f4:	4658      	mov	r0, fp
 800f6f6:	f000 fcc7 	bl	8010088 <__pow5mult>
 800f6fa:	464a      	mov	r2, r9
 800f6fc:	4601      	mov	r1, r0
 800f6fe:	4605      	mov	r5, r0
 800f700:	4658      	mov	r0, fp
 800f702:	f000 fc17 	bl	800ff34 <__multiply>
 800f706:	4649      	mov	r1, r9
 800f708:	9004      	str	r0, [sp, #16]
 800f70a:	4658      	mov	r0, fp
 800f70c:	f000 fb48 	bl	800fda0 <_Bfree>
 800f710:	9b04      	ldr	r3, [sp, #16]
 800f712:	4699      	mov	r9, r3
 800f714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f716:	1b1a      	subs	r2, r3, r4
 800f718:	d004      	beq.n	800f724 <_dtoa_r+0x78c>
 800f71a:	4649      	mov	r1, r9
 800f71c:	4658      	mov	r0, fp
 800f71e:	f000 fcb3 	bl	8010088 <__pow5mult>
 800f722:	4681      	mov	r9, r0
 800f724:	2101      	movs	r1, #1
 800f726:	4658      	mov	r0, fp
 800f728:	f000 fbee 	bl	800ff08 <__i2b>
 800f72c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f72e:	4604      	mov	r4, r0
 800f730:	2b00      	cmp	r3, #0
 800f732:	f000 81cf 	beq.w	800fad4 <_dtoa_r+0xb3c>
 800f736:	461a      	mov	r2, r3
 800f738:	4601      	mov	r1, r0
 800f73a:	4658      	mov	r0, fp
 800f73c:	f000 fca4 	bl	8010088 <__pow5mult>
 800f740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f742:	2b01      	cmp	r3, #1
 800f744:	4604      	mov	r4, r0
 800f746:	f300 8095 	bgt.w	800f874 <_dtoa_r+0x8dc>
 800f74a:	9b02      	ldr	r3, [sp, #8]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	f040 8087 	bne.w	800f860 <_dtoa_r+0x8c8>
 800f752:	9b03      	ldr	r3, [sp, #12]
 800f754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f758:	2b00      	cmp	r3, #0
 800f75a:	f040 8089 	bne.w	800f870 <_dtoa_r+0x8d8>
 800f75e:	9b03      	ldr	r3, [sp, #12]
 800f760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f764:	0d1b      	lsrs	r3, r3, #20
 800f766:	051b      	lsls	r3, r3, #20
 800f768:	b12b      	cbz	r3, 800f776 <_dtoa_r+0x7de>
 800f76a:	9b08      	ldr	r3, [sp, #32]
 800f76c:	3301      	adds	r3, #1
 800f76e:	9308      	str	r3, [sp, #32]
 800f770:	f108 0801 	add.w	r8, r8, #1
 800f774:	2301      	movs	r3, #1
 800f776:	930a      	str	r3, [sp, #40]	@ 0x28
 800f778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	f000 81b0 	beq.w	800fae0 <_dtoa_r+0xb48>
 800f780:	6923      	ldr	r3, [r4, #16]
 800f782:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f786:	6918      	ldr	r0, [r3, #16]
 800f788:	f000 fb72 	bl	800fe70 <__hi0bits>
 800f78c:	f1c0 0020 	rsb	r0, r0, #32
 800f790:	9b08      	ldr	r3, [sp, #32]
 800f792:	4418      	add	r0, r3
 800f794:	f010 001f 	ands.w	r0, r0, #31
 800f798:	d077      	beq.n	800f88a <_dtoa_r+0x8f2>
 800f79a:	f1c0 0320 	rsb	r3, r0, #32
 800f79e:	2b04      	cmp	r3, #4
 800f7a0:	dd6b      	ble.n	800f87a <_dtoa_r+0x8e2>
 800f7a2:	9b08      	ldr	r3, [sp, #32]
 800f7a4:	f1c0 001c 	rsb	r0, r0, #28
 800f7a8:	4403      	add	r3, r0
 800f7aa:	4480      	add	r8, r0
 800f7ac:	4406      	add	r6, r0
 800f7ae:	9308      	str	r3, [sp, #32]
 800f7b0:	f1b8 0f00 	cmp.w	r8, #0
 800f7b4:	dd05      	ble.n	800f7c2 <_dtoa_r+0x82a>
 800f7b6:	4649      	mov	r1, r9
 800f7b8:	4642      	mov	r2, r8
 800f7ba:	4658      	mov	r0, fp
 800f7bc:	f000 fcbe 	bl	801013c <__lshift>
 800f7c0:	4681      	mov	r9, r0
 800f7c2:	9b08      	ldr	r3, [sp, #32]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	dd05      	ble.n	800f7d4 <_dtoa_r+0x83c>
 800f7c8:	4621      	mov	r1, r4
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	4658      	mov	r0, fp
 800f7ce:	f000 fcb5 	bl	801013c <__lshift>
 800f7d2:	4604      	mov	r4, r0
 800f7d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d059      	beq.n	800f88e <_dtoa_r+0x8f6>
 800f7da:	4621      	mov	r1, r4
 800f7dc:	4648      	mov	r0, r9
 800f7de:	f000 fd19 	bl	8010214 <__mcmp>
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	da53      	bge.n	800f88e <_dtoa_r+0x8f6>
 800f7e6:	1e7b      	subs	r3, r7, #1
 800f7e8:	9304      	str	r3, [sp, #16]
 800f7ea:	4649      	mov	r1, r9
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	220a      	movs	r2, #10
 800f7f0:	4658      	mov	r0, fp
 800f7f2:	f000 faf7 	bl	800fde4 <__multadd>
 800f7f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7f8:	4681      	mov	r9, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f000 8172 	beq.w	800fae4 <_dtoa_r+0xb4c>
 800f800:	2300      	movs	r3, #0
 800f802:	4629      	mov	r1, r5
 800f804:	220a      	movs	r2, #10
 800f806:	4658      	mov	r0, fp
 800f808:	f000 faec 	bl	800fde4 <__multadd>
 800f80c:	9b00      	ldr	r3, [sp, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	4605      	mov	r5, r0
 800f812:	dc67      	bgt.n	800f8e4 <_dtoa_r+0x94c>
 800f814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f816:	2b02      	cmp	r3, #2
 800f818:	dc41      	bgt.n	800f89e <_dtoa_r+0x906>
 800f81a:	e063      	b.n	800f8e4 <_dtoa_r+0x94c>
 800f81c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f81e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f822:	e746      	b.n	800f6b2 <_dtoa_r+0x71a>
 800f824:	9b07      	ldr	r3, [sp, #28]
 800f826:	1e5c      	subs	r4, r3, #1
 800f828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f82a:	42a3      	cmp	r3, r4
 800f82c:	bfbf      	itttt	lt
 800f82e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f830:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f832:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f834:	1ae3      	sublt	r3, r4, r3
 800f836:	bfb4      	ite	lt
 800f838:	18d2      	addlt	r2, r2, r3
 800f83a:	1b1c      	subge	r4, r3, r4
 800f83c:	9b07      	ldr	r3, [sp, #28]
 800f83e:	bfbc      	itt	lt
 800f840:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f842:	2400      	movlt	r4, #0
 800f844:	2b00      	cmp	r3, #0
 800f846:	bfb5      	itete	lt
 800f848:	eba8 0603 	sublt.w	r6, r8, r3
 800f84c:	9b07      	ldrge	r3, [sp, #28]
 800f84e:	2300      	movlt	r3, #0
 800f850:	4646      	movge	r6, r8
 800f852:	e730      	b.n	800f6b6 <_dtoa_r+0x71e>
 800f854:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f856:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f858:	4646      	mov	r6, r8
 800f85a:	e735      	b.n	800f6c8 <_dtoa_r+0x730>
 800f85c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f85e:	e75c      	b.n	800f71a <_dtoa_r+0x782>
 800f860:	2300      	movs	r3, #0
 800f862:	e788      	b.n	800f776 <_dtoa_r+0x7de>
 800f864:	3fe00000 	.word	0x3fe00000
 800f868:	40240000 	.word	0x40240000
 800f86c:	40140000 	.word	0x40140000
 800f870:	9b02      	ldr	r3, [sp, #8]
 800f872:	e780      	b.n	800f776 <_dtoa_r+0x7de>
 800f874:	2300      	movs	r3, #0
 800f876:	930a      	str	r3, [sp, #40]	@ 0x28
 800f878:	e782      	b.n	800f780 <_dtoa_r+0x7e8>
 800f87a:	d099      	beq.n	800f7b0 <_dtoa_r+0x818>
 800f87c:	9a08      	ldr	r2, [sp, #32]
 800f87e:	331c      	adds	r3, #28
 800f880:	441a      	add	r2, r3
 800f882:	4498      	add	r8, r3
 800f884:	441e      	add	r6, r3
 800f886:	9208      	str	r2, [sp, #32]
 800f888:	e792      	b.n	800f7b0 <_dtoa_r+0x818>
 800f88a:	4603      	mov	r3, r0
 800f88c:	e7f6      	b.n	800f87c <_dtoa_r+0x8e4>
 800f88e:	9b07      	ldr	r3, [sp, #28]
 800f890:	9704      	str	r7, [sp, #16]
 800f892:	2b00      	cmp	r3, #0
 800f894:	dc20      	bgt.n	800f8d8 <_dtoa_r+0x940>
 800f896:	9300      	str	r3, [sp, #0]
 800f898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f89a:	2b02      	cmp	r3, #2
 800f89c:	dd1e      	ble.n	800f8dc <_dtoa_r+0x944>
 800f89e:	9b00      	ldr	r3, [sp, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	f47f aec0 	bne.w	800f626 <_dtoa_r+0x68e>
 800f8a6:	4621      	mov	r1, r4
 800f8a8:	2205      	movs	r2, #5
 800f8aa:	4658      	mov	r0, fp
 800f8ac:	f000 fa9a 	bl	800fde4 <__multadd>
 800f8b0:	4601      	mov	r1, r0
 800f8b2:	4604      	mov	r4, r0
 800f8b4:	4648      	mov	r0, r9
 800f8b6:	f000 fcad 	bl	8010214 <__mcmp>
 800f8ba:	2800      	cmp	r0, #0
 800f8bc:	f77f aeb3 	ble.w	800f626 <_dtoa_r+0x68e>
 800f8c0:	4656      	mov	r6, sl
 800f8c2:	2331      	movs	r3, #49	@ 0x31
 800f8c4:	f806 3b01 	strb.w	r3, [r6], #1
 800f8c8:	9b04      	ldr	r3, [sp, #16]
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	9304      	str	r3, [sp, #16]
 800f8ce:	e6ae      	b.n	800f62e <_dtoa_r+0x696>
 800f8d0:	9c07      	ldr	r4, [sp, #28]
 800f8d2:	9704      	str	r7, [sp, #16]
 800f8d4:	4625      	mov	r5, r4
 800f8d6:	e7f3      	b.n	800f8c0 <_dtoa_r+0x928>
 800f8d8:	9b07      	ldr	r3, [sp, #28]
 800f8da:	9300      	str	r3, [sp, #0]
 800f8dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f000 8104 	beq.w	800faec <_dtoa_r+0xb54>
 800f8e4:	2e00      	cmp	r6, #0
 800f8e6:	dd05      	ble.n	800f8f4 <_dtoa_r+0x95c>
 800f8e8:	4629      	mov	r1, r5
 800f8ea:	4632      	mov	r2, r6
 800f8ec:	4658      	mov	r0, fp
 800f8ee:	f000 fc25 	bl	801013c <__lshift>
 800f8f2:	4605      	mov	r5, r0
 800f8f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d05a      	beq.n	800f9b0 <_dtoa_r+0xa18>
 800f8fa:	6869      	ldr	r1, [r5, #4]
 800f8fc:	4658      	mov	r0, fp
 800f8fe:	f000 fa0f 	bl	800fd20 <_Balloc>
 800f902:	4606      	mov	r6, r0
 800f904:	b928      	cbnz	r0, 800f912 <_dtoa_r+0x97a>
 800f906:	4b84      	ldr	r3, [pc, #528]	@ (800fb18 <_dtoa_r+0xb80>)
 800f908:	4602      	mov	r2, r0
 800f90a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f90e:	f7ff bb5a 	b.w	800efc6 <_dtoa_r+0x2e>
 800f912:	692a      	ldr	r2, [r5, #16]
 800f914:	3202      	adds	r2, #2
 800f916:	0092      	lsls	r2, r2, #2
 800f918:	f105 010c 	add.w	r1, r5, #12
 800f91c:	300c      	adds	r0, #12
 800f91e:	f001 f803 	bl	8010928 <memcpy>
 800f922:	2201      	movs	r2, #1
 800f924:	4631      	mov	r1, r6
 800f926:	4658      	mov	r0, fp
 800f928:	f000 fc08 	bl	801013c <__lshift>
 800f92c:	f10a 0301 	add.w	r3, sl, #1
 800f930:	9307      	str	r3, [sp, #28]
 800f932:	9b00      	ldr	r3, [sp, #0]
 800f934:	4453      	add	r3, sl
 800f936:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f938:	9b02      	ldr	r3, [sp, #8]
 800f93a:	f003 0301 	and.w	r3, r3, #1
 800f93e:	462f      	mov	r7, r5
 800f940:	930a      	str	r3, [sp, #40]	@ 0x28
 800f942:	4605      	mov	r5, r0
 800f944:	9b07      	ldr	r3, [sp, #28]
 800f946:	4621      	mov	r1, r4
 800f948:	3b01      	subs	r3, #1
 800f94a:	4648      	mov	r0, r9
 800f94c:	9300      	str	r3, [sp, #0]
 800f94e:	f7ff fa9a 	bl	800ee86 <quorem>
 800f952:	4639      	mov	r1, r7
 800f954:	9002      	str	r0, [sp, #8]
 800f956:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f95a:	4648      	mov	r0, r9
 800f95c:	f000 fc5a 	bl	8010214 <__mcmp>
 800f960:	462a      	mov	r2, r5
 800f962:	9008      	str	r0, [sp, #32]
 800f964:	4621      	mov	r1, r4
 800f966:	4658      	mov	r0, fp
 800f968:	f000 fc70 	bl	801024c <__mdiff>
 800f96c:	68c2      	ldr	r2, [r0, #12]
 800f96e:	4606      	mov	r6, r0
 800f970:	bb02      	cbnz	r2, 800f9b4 <_dtoa_r+0xa1c>
 800f972:	4601      	mov	r1, r0
 800f974:	4648      	mov	r0, r9
 800f976:	f000 fc4d 	bl	8010214 <__mcmp>
 800f97a:	4602      	mov	r2, r0
 800f97c:	4631      	mov	r1, r6
 800f97e:	4658      	mov	r0, fp
 800f980:	920e      	str	r2, [sp, #56]	@ 0x38
 800f982:	f000 fa0d 	bl	800fda0 <_Bfree>
 800f986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f988:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f98a:	9e07      	ldr	r6, [sp, #28]
 800f98c:	ea43 0102 	orr.w	r1, r3, r2
 800f990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f992:	4319      	orrs	r1, r3
 800f994:	d110      	bne.n	800f9b8 <_dtoa_r+0xa20>
 800f996:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f99a:	d029      	beq.n	800f9f0 <_dtoa_r+0xa58>
 800f99c:	9b08      	ldr	r3, [sp, #32]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	dd02      	ble.n	800f9a8 <_dtoa_r+0xa10>
 800f9a2:	9b02      	ldr	r3, [sp, #8]
 800f9a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f9a8:	9b00      	ldr	r3, [sp, #0]
 800f9aa:	f883 8000 	strb.w	r8, [r3]
 800f9ae:	e63f      	b.n	800f630 <_dtoa_r+0x698>
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	e7bb      	b.n	800f92c <_dtoa_r+0x994>
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	e7e1      	b.n	800f97c <_dtoa_r+0x9e4>
 800f9b8:	9b08      	ldr	r3, [sp, #32]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	db04      	blt.n	800f9c8 <_dtoa_r+0xa30>
 800f9be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f9c0:	430b      	orrs	r3, r1
 800f9c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f9c4:	430b      	orrs	r3, r1
 800f9c6:	d120      	bne.n	800fa0a <_dtoa_r+0xa72>
 800f9c8:	2a00      	cmp	r2, #0
 800f9ca:	dded      	ble.n	800f9a8 <_dtoa_r+0xa10>
 800f9cc:	4649      	mov	r1, r9
 800f9ce:	2201      	movs	r2, #1
 800f9d0:	4658      	mov	r0, fp
 800f9d2:	f000 fbb3 	bl	801013c <__lshift>
 800f9d6:	4621      	mov	r1, r4
 800f9d8:	4681      	mov	r9, r0
 800f9da:	f000 fc1b 	bl	8010214 <__mcmp>
 800f9de:	2800      	cmp	r0, #0
 800f9e0:	dc03      	bgt.n	800f9ea <_dtoa_r+0xa52>
 800f9e2:	d1e1      	bne.n	800f9a8 <_dtoa_r+0xa10>
 800f9e4:	f018 0f01 	tst.w	r8, #1
 800f9e8:	d0de      	beq.n	800f9a8 <_dtoa_r+0xa10>
 800f9ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f9ee:	d1d8      	bne.n	800f9a2 <_dtoa_r+0xa0a>
 800f9f0:	9a00      	ldr	r2, [sp, #0]
 800f9f2:	2339      	movs	r3, #57	@ 0x39
 800f9f4:	7013      	strb	r3, [r2, #0]
 800f9f6:	4633      	mov	r3, r6
 800f9f8:	461e      	mov	r6, r3
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fa00:	2a39      	cmp	r2, #57	@ 0x39
 800fa02:	d052      	beq.n	800faaa <_dtoa_r+0xb12>
 800fa04:	3201      	adds	r2, #1
 800fa06:	701a      	strb	r2, [r3, #0]
 800fa08:	e612      	b.n	800f630 <_dtoa_r+0x698>
 800fa0a:	2a00      	cmp	r2, #0
 800fa0c:	dd07      	ble.n	800fa1e <_dtoa_r+0xa86>
 800fa0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa12:	d0ed      	beq.n	800f9f0 <_dtoa_r+0xa58>
 800fa14:	9a00      	ldr	r2, [sp, #0]
 800fa16:	f108 0301 	add.w	r3, r8, #1
 800fa1a:	7013      	strb	r3, [r2, #0]
 800fa1c:	e608      	b.n	800f630 <_dtoa_r+0x698>
 800fa1e:	9b07      	ldr	r3, [sp, #28]
 800fa20:	9a07      	ldr	r2, [sp, #28]
 800fa22:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fa26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d028      	beq.n	800fa7e <_dtoa_r+0xae6>
 800fa2c:	4649      	mov	r1, r9
 800fa2e:	2300      	movs	r3, #0
 800fa30:	220a      	movs	r2, #10
 800fa32:	4658      	mov	r0, fp
 800fa34:	f000 f9d6 	bl	800fde4 <__multadd>
 800fa38:	42af      	cmp	r7, r5
 800fa3a:	4681      	mov	r9, r0
 800fa3c:	f04f 0300 	mov.w	r3, #0
 800fa40:	f04f 020a 	mov.w	r2, #10
 800fa44:	4639      	mov	r1, r7
 800fa46:	4658      	mov	r0, fp
 800fa48:	d107      	bne.n	800fa5a <_dtoa_r+0xac2>
 800fa4a:	f000 f9cb 	bl	800fde4 <__multadd>
 800fa4e:	4607      	mov	r7, r0
 800fa50:	4605      	mov	r5, r0
 800fa52:	9b07      	ldr	r3, [sp, #28]
 800fa54:	3301      	adds	r3, #1
 800fa56:	9307      	str	r3, [sp, #28]
 800fa58:	e774      	b.n	800f944 <_dtoa_r+0x9ac>
 800fa5a:	f000 f9c3 	bl	800fde4 <__multadd>
 800fa5e:	4629      	mov	r1, r5
 800fa60:	4607      	mov	r7, r0
 800fa62:	2300      	movs	r3, #0
 800fa64:	220a      	movs	r2, #10
 800fa66:	4658      	mov	r0, fp
 800fa68:	f000 f9bc 	bl	800fde4 <__multadd>
 800fa6c:	4605      	mov	r5, r0
 800fa6e:	e7f0      	b.n	800fa52 <_dtoa_r+0xaba>
 800fa70:	9b00      	ldr	r3, [sp, #0]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	bfcc      	ite	gt
 800fa76:	461e      	movgt	r6, r3
 800fa78:	2601      	movle	r6, #1
 800fa7a:	4456      	add	r6, sl
 800fa7c:	2700      	movs	r7, #0
 800fa7e:	4649      	mov	r1, r9
 800fa80:	2201      	movs	r2, #1
 800fa82:	4658      	mov	r0, fp
 800fa84:	f000 fb5a 	bl	801013c <__lshift>
 800fa88:	4621      	mov	r1, r4
 800fa8a:	4681      	mov	r9, r0
 800fa8c:	f000 fbc2 	bl	8010214 <__mcmp>
 800fa90:	2800      	cmp	r0, #0
 800fa92:	dcb0      	bgt.n	800f9f6 <_dtoa_r+0xa5e>
 800fa94:	d102      	bne.n	800fa9c <_dtoa_r+0xb04>
 800fa96:	f018 0f01 	tst.w	r8, #1
 800fa9a:	d1ac      	bne.n	800f9f6 <_dtoa_r+0xa5e>
 800fa9c:	4633      	mov	r3, r6
 800fa9e:	461e      	mov	r6, r3
 800faa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800faa4:	2a30      	cmp	r2, #48	@ 0x30
 800faa6:	d0fa      	beq.n	800fa9e <_dtoa_r+0xb06>
 800faa8:	e5c2      	b.n	800f630 <_dtoa_r+0x698>
 800faaa:	459a      	cmp	sl, r3
 800faac:	d1a4      	bne.n	800f9f8 <_dtoa_r+0xa60>
 800faae:	9b04      	ldr	r3, [sp, #16]
 800fab0:	3301      	adds	r3, #1
 800fab2:	9304      	str	r3, [sp, #16]
 800fab4:	2331      	movs	r3, #49	@ 0x31
 800fab6:	f88a 3000 	strb.w	r3, [sl]
 800faba:	e5b9      	b.n	800f630 <_dtoa_r+0x698>
 800fabc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fabe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fb1c <_dtoa_r+0xb84>
 800fac2:	b11b      	cbz	r3, 800facc <_dtoa_r+0xb34>
 800fac4:	f10a 0308 	add.w	r3, sl, #8
 800fac8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800faca:	6013      	str	r3, [r2, #0]
 800facc:	4650      	mov	r0, sl
 800face:	b019      	add	sp, #100	@ 0x64
 800fad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fad6:	2b01      	cmp	r3, #1
 800fad8:	f77f ae37 	ble.w	800f74a <_dtoa_r+0x7b2>
 800fadc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fade:	930a      	str	r3, [sp, #40]	@ 0x28
 800fae0:	2001      	movs	r0, #1
 800fae2:	e655      	b.n	800f790 <_dtoa_r+0x7f8>
 800fae4:	9b00      	ldr	r3, [sp, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	f77f aed6 	ble.w	800f898 <_dtoa_r+0x900>
 800faec:	4656      	mov	r6, sl
 800faee:	4621      	mov	r1, r4
 800faf0:	4648      	mov	r0, r9
 800faf2:	f7ff f9c8 	bl	800ee86 <quorem>
 800faf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fafa:	f806 8b01 	strb.w	r8, [r6], #1
 800fafe:	9b00      	ldr	r3, [sp, #0]
 800fb00:	eba6 020a 	sub.w	r2, r6, sl
 800fb04:	4293      	cmp	r3, r2
 800fb06:	ddb3      	ble.n	800fa70 <_dtoa_r+0xad8>
 800fb08:	4649      	mov	r1, r9
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	220a      	movs	r2, #10
 800fb0e:	4658      	mov	r0, fp
 800fb10:	f000 f968 	bl	800fde4 <__multadd>
 800fb14:	4681      	mov	r9, r0
 800fb16:	e7ea      	b.n	800faee <_dtoa_r+0xb56>
 800fb18:	0801102a 	.word	0x0801102a
 800fb1c:	08010fae 	.word	0x08010fae

0800fb20 <_free_r>:
 800fb20:	b538      	push	{r3, r4, r5, lr}
 800fb22:	4605      	mov	r5, r0
 800fb24:	2900      	cmp	r1, #0
 800fb26:	d041      	beq.n	800fbac <_free_r+0x8c>
 800fb28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb2c:	1f0c      	subs	r4, r1, #4
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	bfb8      	it	lt
 800fb32:	18e4      	addlt	r4, r4, r3
 800fb34:	f000 f8e8 	bl	800fd08 <__malloc_lock>
 800fb38:	4a1d      	ldr	r2, [pc, #116]	@ (800fbb0 <_free_r+0x90>)
 800fb3a:	6813      	ldr	r3, [r2, #0]
 800fb3c:	b933      	cbnz	r3, 800fb4c <_free_r+0x2c>
 800fb3e:	6063      	str	r3, [r4, #4]
 800fb40:	6014      	str	r4, [r2, #0]
 800fb42:	4628      	mov	r0, r5
 800fb44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb48:	f000 b8e4 	b.w	800fd14 <__malloc_unlock>
 800fb4c:	42a3      	cmp	r3, r4
 800fb4e:	d908      	bls.n	800fb62 <_free_r+0x42>
 800fb50:	6820      	ldr	r0, [r4, #0]
 800fb52:	1821      	adds	r1, r4, r0
 800fb54:	428b      	cmp	r3, r1
 800fb56:	bf01      	itttt	eq
 800fb58:	6819      	ldreq	r1, [r3, #0]
 800fb5a:	685b      	ldreq	r3, [r3, #4]
 800fb5c:	1809      	addeq	r1, r1, r0
 800fb5e:	6021      	streq	r1, [r4, #0]
 800fb60:	e7ed      	b.n	800fb3e <_free_r+0x1e>
 800fb62:	461a      	mov	r2, r3
 800fb64:	685b      	ldr	r3, [r3, #4]
 800fb66:	b10b      	cbz	r3, 800fb6c <_free_r+0x4c>
 800fb68:	42a3      	cmp	r3, r4
 800fb6a:	d9fa      	bls.n	800fb62 <_free_r+0x42>
 800fb6c:	6811      	ldr	r1, [r2, #0]
 800fb6e:	1850      	adds	r0, r2, r1
 800fb70:	42a0      	cmp	r0, r4
 800fb72:	d10b      	bne.n	800fb8c <_free_r+0x6c>
 800fb74:	6820      	ldr	r0, [r4, #0]
 800fb76:	4401      	add	r1, r0
 800fb78:	1850      	adds	r0, r2, r1
 800fb7a:	4283      	cmp	r3, r0
 800fb7c:	6011      	str	r1, [r2, #0]
 800fb7e:	d1e0      	bne.n	800fb42 <_free_r+0x22>
 800fb80:	6818      	ldr	r0, [r3, #0]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	6053      	str	r3, [r2, #4]
 800fb86:	4408      	add	r0, r1
 800fb88:	6010      	str	r0, [r2, #0]
 800fb8a:	e7da      	b.n	800fb42 <_free_r+0x22>
 800fb8c:	d902      	bls.n	800fb94 <_free_r+0x74>
 800fb8e:	230c      	movs	r3, #12
 800fb90:	602b      	str	r3, [r5, #0]
 800fb92:	e7d6      	b.n	800fb42 <_free_r+0x22>
 800fb94:	6820      	ldr	r0, [r4, #0]
 800fb96:	1821      	adds	r1, r4, r0
 800fb98:	428b      	cmp	r3, r1
 800fb9a:	bf04      	itt	eq
 800fb9c:	6819      	ldreq	r1, [r3, #0]
 800fb9e:	685b      	ldreq	r3, [r3, #4]
 800fba0:	6063      	str	r3, [r4, #4]
 800fba2:	bf04      	itt	eq
 800fba4:	1809      	addeq	r1, r1, r0
 800fba6:	6021      	streq	r1, [r4, #0]
 800fba8:	6054      	str	r4, [r2, #4]
 800fbaa:	e7ca      	b.n	800fb42 <_free_r+0x22>
 800fbac:	bd38      	pop	{r3, r4, r5, pc}
 800fbae:	bf00      	nop
 800fbb0:	20005770 	.word	0x20005770

0800fbb4 <malloc>:
 800fbb4:	4b02      	ldr	r3, [pc, #8]	@ (800fbc0 <malloc+0xc>)
 800fbb6:	4601      	mov	r1, r0
 800fbb8:	6818      	ldr	r0, [r3, #0]
 800fbba:	f000 b825 	b.w	800fc08 <_malloc_r>
 800fbbe:	bf00      	nop
 800fbc0:	20000058 	.word	0x20000058

0800fbc4 <sbrk_aligned>:
 800fbc4:	b570      	push	{r4, r5, r6, lr}
 800fbc6:	4e0f      	ldr	r6, [pc, #60]	@ (800fc04 <sbrk_aligned+0x40>)
 800fbc8:	460c      	mov	r4, r1
 800fbca:	6831      	ldr	r1, [r6, #0]
 800fbcc:	4605      	mov	r5, r0
 800fbce:	b911      	cbnz	r1, 800fbd6 <sbrk_aligned+0x12>
 800fbd0:	f000 fe9a 	bl	8010908 <_sbrk_r>
 800fbd4:	6030      	str	r0, [r6, #0]
 800fbd6:	4621      	mov	r1, r4
 800fbd8:	4628      	mov	r0, r5
 800fbda:	f000 fe95 	bl	8010908 <_sbrk_r>
 800fbde:	1c43      	adds	r3, r0, #1
 800fbe0:	d103      	bne.n	800fbea <sbrk_aligned+0x26>
 800fbe2:	f04f 34ff 	mov.w	r4, #4294967295
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	bd70      	pop	{r4, r5, r6, pc}
 800fbea:	1cc4      	adds	r4, r0, #3
 800fbec:	f024 0403 	bic.w	r4, r4, #3
 800fbf0:	42a0      	cmp	r0, r4
 800fbf2:	d0f8      	beq.n	800fbe6 <sbrk_aligned+0x22>
 800fbf4:	1a21      	subs	r1, r4, r0
 800fbf6:	4628      	mov	r0, r5
 800fbf8:	f000 fe86 	bl	8010908 <_sbrk_r>
 800fbfc:	3001      	adds	r0, #1
 800fbfe:	d1f2      	bne.n	800fbe6 <sbrk_aligned+0x22>
 800fc00:	e7ef      	b.n	800fbe2 <sbrk_aligned+0x1e>
 800fc02:	bf00      	nop
 800fc04:	2000576c 	.word	0x2000576c

0800fc08 <_malloc_r>:
 800fc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc0c:	1ccd      	adds	r5, r1, #3
 800fc0e:	f025 0503 	bic.w	r5, r5, #3
 800fc12:	3508      	adds	r5, #8
 800fc14:	2d0c      	cmp	r5, #12
 800fc16:	bf38      	it	cc
 800fc18:	250c      	movcc	r5, #12
 800fc1a:	2d00      	cmp	r5, #0
 800fc1c:	4606      	mov	r6, r0
 800fc1e:	db01      	blt.n	800fc24 <_malloc_r+0x1c>
 800fc20:	42a9      	cmp	r1, r5
 800fc22:	d904      	bls.n	800fc2e <_malloc_r+0x26>
 800fc24:	230c      	movs	r3, #12
 800fc26:	6033      	str	r3, [r6, #0]
 800fc28:	2000      	movs	r0, #0
 800fc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fd04 <_malloc_r+0xfc>
 800fc32:	f000 f869 	bl	800fd08 <__malloc_lock>
 800fc36:	f8d8 3000 	ldr.w	r3, [r8]
 800fc3a:	461c      	mov	r4, r3
 800fc3c:	bb44      	cbnz	r4, 800fc90 <_malloc_r+0x88>
 800fc3e:	4629      	mov	r1, r5
 800fc40:	4630      	mov	r0, r6
 800fc42:	f7ff ffbf 	bl	800fbc4 <sbrk_aligned>
 800fc46:	1c43      	adds	r3, r0, #1
 800fc48:	4604      	mov	r4, r0
 800fc4a:	d158      	bne.n	800fcfe <_malloc_r+0xf6>
 800fc4c:	f8d8 4000 	ldr.w	r4, [r8]
 800fc50:	4627      	mov	r7, r4
 800fc52:	2f00      	cmp	r7, #0
 800fc54:	d143      	bne.n	800fcde <_malloc_r+0xd6>
 800fc56:	2c00      	cmp	r4, #0
 800fc58:	d04b      	beq.n	800fcf2 <_malloc_r+0xea>
 800fc5a:	6823      	ldr	r3, [r4, #0]
 800fc5c:	4639      	mov	r1, r7
 800fc5e:	4630      	mov	r0, r6
 800fc60:	eb04 0903 	add.w	r9, r4, r3
 800fc64:	f000 fe50 	bl	8010908 <_sbrk_r>
 800fc68:	4581      	cmp	r9, r0
 800fc6a:	d142      	bne.n	800fcf2 <_malloc_r+0xea>
 800fc6c:	6821      	ldr	r1, [r4, #0]
 800fc6e:	1a6d      	subs	r5, r5, r1
 800fc70:	4629      	mov	r1, r5
 800fc72:	4630      	mov	r0, r6
 800fc74:	f7ff ffa6 	bl	800fbc4 <sbrk_aligned>
 800fc78:	3001      	adds	r0, #1
 800fc7a:	d03a      	beq.n	800fcf2 <_malloc_r+0xea>
 800fc7c:	6823      	ldr	r3, [r4, #0]
 800fc7e:	442b      	add	r3, r5
 800fc80:	6023      	str	r3, [r4, #0]
 800fc82:	f8d8 3000 	ldr.w	r3, [r8]
 800fc86:	685a      	ldr	r2, [r3, #4]
 800fc88:	bb62      	cbnz	r2, 800fce4 <_malloc_r+0xdc>
 800fc8a:	f8c8 7000 	str.w	r7, [r8]
 800fc8e:	e00f      	b.n	800fcb0 <_malloc_r+0xa8>
 800fc90:	6822      	ldr	r2, [r4, #0]
 800fc92:	1b52      	subs	r2, r2, r5
 800fc94:	d420      	bmi.n	800fcd8 <_malloc_r+0xd0>
 800fc96:	2a0b      	cmp	r2, #11
 800fc98:	d917      	bls.n	800fcca <_malloc_r+0xc2>
 800fc9a:	1961      	adds	r1, r4, r5
 800fc9c:	42a3      	cmp	r3, r4
 800fc9e:	6025      	str	r5, [r4, #0]
 800fca0:	bf18      	it	ne
 800fca2:	6059      	strne	r1, [r3, #4]
 800fca4:	6863      	ldr	r3, [r4, #4]
 800fca6:	bf08      	it	eq
 800fca8:	f8c8 1000 	streq.w	r1, [r8]
 800fcac:	5162      	str	r2, [r4, r5]
 800fcae:	604b      	str	r3, [r1, #4]
 800fcb0:	4630      	mov	r0, r6
 800fcb2:	f000 f82f 	bl	800fd14 <__malloc_unlock>
 800fcb6:	f104 000b 	add.w	r0, r4, #11
 800fcba:	1d23      	adds	r3, r4, #4
 800fcbc:	f020 0007 	bic.w	r0, r0, #7
 800fcc0:	1ac2      	subs	r2, r0, r3
 800fcc2:	bf1c      	itt	ne
 800fcc4:	1a1b      	subne	r3, r3, r0
 800fcc6:	50a3      	strne	r3, [r4, r2]
 800fcc8:	e7af      	b.n	800fc2a <_malloc_r+0x22>
 800fcca:	6862      	ldr	r2, [r4, #4]
 800fccc:	42a3      	cmp	r3, r4
 800fcce:	bf0c      	ite	eq
 800fcd0:	f8c8 2000 	streq.w	r2, [r8]
 800fcd4:	605a      	strne	r2, [r3, #4]
 800fcd6:	e7eb      	b.n	800fcb0 <_malloc_r+0xa8>
 800fcd8:	4623      	mov	r3, r4
 800fcda:	6864      	ldr	r4, [r4, #4]
 800fcdc:	e7ae      	b.n	800fc3c <_malloc_r+0x34>
 800fcde:	463c      	mov	r4, r7
 800fce0:	687f      	ldr	r7, [r7, #4]
 800fce2:	e7b6      	b.n	800fc52 <_malloc_r+0x4a>
 800fce4:	461a      	mov	r2, r3
 800fce6:	685b      	ldr	r3, [r3, #4]
 800fce8:	42a3      	cmp	r3, r4
 800fcea:	d1fb      	bne.n	800fce4 <_malloc_r+0xdc>
 800fcec:	2300      	movs	r3, #0
 800fcee:	6053      	str	r3, [r2, #4]
 800fcf0:	e7de      	b.n	800fcb0 <_malloc_r+0xa8>
 800fcf2:	230c      	movs	r3, #12
 800fcf4:	6033      	str	r3, [r6, #0]
 800fcf6:	4630      	mov	r0, r6
 800fcf8:	f000 f80c 	bl	800fd14 <__malloc_unlock>
 800fcfc:	e794      	b.n	800fc28 <_malloc_r+0x20>
 800fcfe:	6005      	str	r5, [r0, #0]
 800fd00:	e7d6      	b.n	800fcb0 <_malloc_r+0xa8>
 800fd02:	bf00      	nop
 800fd04:	20005770 	.word	0x20005770

0800fd08 <__malloc_lock>:
 800fd08:	4801      	ldr	r0, [pc, #4]	@ (800fd10 <__malloc_lock+0x8>)
 800fd0a:	f7ff b8ba 	b.w	800ee82 <__retarget_lock_acquire_recursive>
 800fd0e:	bf00      	nop
 800fd10:	20005768 	.word	0x20005768

0800fd14 <__malloc_unlock>:
 800fd14:	4801      	ldr	r0, [pc, #4]	@ (800fd1c <__malloc_unlock+0x8>)
 800fd16:	f7ff b8b5 	b.w	800ee84 <__retarget_lock_release_recursive>
 800fd1a:	bf00      	nop
 800fd1c:	20005768 	.word	0x20005768

0800fd20 <_Balloc>:
 800fd20:	b570      	push	{r4, r5, r6, lr}
 800fd22:	69c6      	ldr	r6, [r0, #28]
 800fd24:	4604      	mov	r4, r0
 800fd26:	460d      	mov	r5, r1
 800fd28:	b976      	cbnz	r6, 800fd48 <_Balloc+0x28>
 800fd2a:	2010      	movs	r0, #16
 800fd2c:	f7ff ff42 	bl	800fbb4 <malloc>
 800fd30:	4602      	mov	r2, r0
 800fd32:	61e0      	str	r0, [r4, #28]
 800fd34:	b920      	cbnz	r0, 800fd40 <_Balloc+0x20>
 800fd36:	4b18      	ldr	r3, [pc, #96]	@ (800fd98 <_Balloc+0x78>)
 800fd38:	4818      	ldr	r0, [pc, #96]	@ (800fd9c <_Balloc+0x7c>)
 800fd3a:	216b      	movs	r1, #107	@ 0x6b
 800fd3c:	f000 fe02 	bl	8010944 <__assert_func>
 800fd40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd44:	6006      	str	r6, [r0, #0]
 800fd46:	60c6      	str	r6, [r0, #12]
 800fd48:	69e6      	ldr	r6, [r4, #28]
 800fd4a:	68f3      	ldr	r3, [r6, #12]
 800fd4c:	b183      	cbz	r3, 800fd70 <_Balloc+0x50>
 800fd4e:	69e3      	ldr	r3, [r4, #28]
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd56:	b9b8      	cbnz	r0, 800fd88 <_Balloc+0x68>
 800fd58:	2101      	movs	r1, #1
 800fd5a:	fa01 f605 	lsl.w	r6, r1, r5
 800fd5e:	1d72      	adds	r2, r6, #5
 800fd60:	0092      	lsls	r2, r2, #2
 800fd62:	4620      	mov	r0, r4
 800fd64:	f000 fe0c 	bl	8010980 <_calloc_r>
 800fd68:	b160      	cbz	r0, 800fd84 <_Balloc+0x64>
 800fd6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd6e:	e00e      	b.n	800fd8e <_Balloc+0x6e>
 800fd70:	2221      	movs	r2, #33	@ 0x21
 800fd72:	2104      	movs	r1, #4
 800fd74:	4620      	mov	r0, r4
 800fd76:	f000 fe03 	bl	8010980 <_calloc_r>
 800fd7a:	69e3      	ldr	r3, [r4, #28]
 800fd7c:	60f0      	str	r0, [r6, #12]
 800fd7e:	68db      	ldr	r3, [r3, #12]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d1e4      	bne.n	800fd4e <_Balloc+0x2e>
 800fd84:	2000      	movs	r0, #0
 800fd86:	bd70      	pop	{r4, r5, r6, pc}
 800fd88:	6802      	ldr	r2, [r0, #0]
 800fd8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd8e:	2300      	movs	r3, #0
 800fd90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd94:	e7f7      	b.n	800fd86 <_Balloc+0x66>
 800fd96:	bf00      	nop
 800fd98:	08010fbb 	.word	0x08010fbb
 800fd9c:	0801103b 	.word	0x0801103b

0800fda0 <_Bfree>:
 800fda0:	b570      	push	{r4, r5, r6, lr}
 800fda2:	69c6      	ldr	r6, [r0, #28]
 800fda4:	4605      	mov	r5, r0
 800fda6:	460c      	mov	r4, r1
 800fda8:	b976      	cbnz	r6, 800fdc8 <_Bfree+0x28>
 800fdaa:	2010      	movs	r0, #16
 800fdac:	f7ff ff02 	bl	800fbb4 <malloc>
 800fdb0:	4602      	mov	r2, r0
 800fdb2:	61e8      	str	r0, [r5, #28]
 800fdb4:	b920      	cbnz	r0, 800fdc0 <_Bfree+0x20>
 800fdb6:	4b09      	ldr	r3, [pc, #36]	@ (800fddc <_Bfree+0x3c>)
 800fdb8:	4809      	ldr	r0, [pc, #36]	@ (800fde0 <_Bfree+0x40>)
 800fdba:	218f      	movs	r1, #143	@ 0x8f
 800fdbc:	f000 fdc2 	bl	8010944 <__assert_func>
 800fdc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdc4:	6006      	str	r6, [r0, #0]
 800fdc6:	60c6      	str	r6, [r0, #12]
 800fdc8:	b13c      	cbz	r4, 800fdda <_Bfree+0x3a>
 800fdca:	69eb      	ldr	r3, [r5, #28]
 800fdcc:	6862      	ldr	r2, [r4, #4]
 800fdce:	68db      	ldr	r3, [r3, #12]
 800fdd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fdd4:	6021      	str	r1, [r4, #0]
 800fdd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fdda:	bd70      	pop	{r4, r5, r6, pc}
 800fddc:	08010fbb 	.word	0x08010fbb
 800fde0:	0801103b 	.word	0x0801103b

0800fde4 <__multadd>:
 800fde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fde8:	690d      	ldr	r5, [r1, #16]
 800fdea:	4607      	mov	r7, r0
 800fdec:	460c      	mov	r4, r1
 800fdee:	461e      	mov	r6, r3
 800fdf0:	f101 0c14 	add.w	ip, r1, #20
 800fdf4:	2000      	movs	r0, #0
 800fdf6:	f8dc 3000 	ldr.w	r3, [ip]
 800fdfa:	b299      	uxth	r1, r3
 800fdfc:	fb02 6101 	mla	r1, r2, r1, r6
 800fe00:	0c1e      	lsrs	r6, r3, #16
 800fe02:	0c0b      	lsrs	r3, r1, #16
 800fe04:	fb02 3306 	mla	r3, r2, r6, r3
 800fe08:	b289      	uxth	r1, r1
 800fe0a:	3001      	adds	r0, #1
 800fe0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fe10:	4285      	cmp	r5, r0
 800fe12:	f84c 1b04 	str.w	r1, [ip], #4
 800fe16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe1a:	dcec      	bgt.n	800fdf6 <__multadd+0x12>
 800fe1c:	b30e      	cbz	r6, 800fe62 <__multadd+0x7e>
 800fe1e:	68a3      	ldr	r3, [r4, #8]
 800fe20:	42ab      	cmp	r3, r5
 800fe22:	dc19      	bgt.n	800fe58 <__multadd+0x74>
 800fe24:	6861      	ldr	r1, [r4, #4]
 800fe26:	4638      	mov	r0, r7
 800fe28:	3101      	adds	r1, #1
 800fe2a:	f7ff ff79 	bl	800fd20 <_Balloc>
 800fe2e:	4680      	mov	r8, r0
 800fe30:	b928      	cbnz	r0, 800fe3e <__multadd+0x5a>
 800fe32:	4602      	mov	r2, r0
 800fe34:	4b0c      	ldr	r3, [pc, #48]	@ (800fe68 <__multadd+0x84>)
 800fe36:	480d      	ldr	r0, [pc, #52]	@ (800fe6c <__multadd+0x88>)
 800fe38:	21ba      	movs	r1, #186	@ 0xba
 800fe3a:	f000 fd83 	bl	8010944 <__assert_func>
 800fe3e:	6922      	ldr	r2, [r4, #16]
 800fe40:	3202      	adds	r2, #2
 800fe42:	f104 010c 	add.w	r1, r4, #12
 800fe46:	0092      	lsls	r2, r2, #2
 800fe48:	300c      	adds	r0, #12
 800fe4a:	f000 fd6d 	bl	8010928 <memcpy>
 800fe4e:	4621      	mov	r1, r4
 800fe50:	4638      	mov	r0, r7
 800fe52:	f7ff ffa5 	bl	800fda0 <_Bfree>
 800fe56:	4644      	mov	r4, r8
 800fe58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe5c:	3501      	adds	r5, #1
 800fe5e:	615e      	str	r6, [r3, #20]
 800fe60:	6125      	str	r5, [r4, #16]
 800fe62:	4620      	mov	r0, r4
 800fe64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe68:	0801102a 	.word	0x0801102a
 800fe6c:	0801103b 	.word	0x0801103b

0800fe70 <__hi0bits>:
 800fe70:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fe74:	4603      	mov	r3, r0
 800fe76:	bf36      	itet	cc
 800fe78:	0403      	lslcc	r3, r0, #16
 800fe7a:	2000      	movcs	r0, #0
 800fe7c:	2010      	movcc	r0, #16
 800fe7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fe82:	bf3c      	itt	cc
 800fe84:	021b      	lslcc	r3, r3, #8
 800fe86:	3008      	addcc	r0, #8
 800fe88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe8c:	bf3c      	itt	cc
 800fe8e:	011b      	lslcc	r3, r3, #4
 800fe90:	3004      	addcc	r0, #4
 800fe92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe96:	bf3c      	itt	cc
 800fe98:	009b      	lslcc	r3, r3, #2
 800fe9a:	3002      	addcc	r0, #2
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	db05      	blt.n	800feac <__hi0bits+0x3c>
 800fea0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fea4:	f100 0001 	add.w	r0, r0, #1
 800fea8:	bf08      	it	eq
 800feaa:	2020      	moveq	r0, #32
 800feac:	4770      	bx	lr

0800feae <__lo0bits>:
 800feae:	6803      	ldr	r3, [r0, #0]
 800feb0:	4602      	mov	r2, r0
 800feb2:	f013 0007 	ands.w	r0, r3, #7
 800feb6:	d00b      	beq.n	800fed0 <__lo0bits+0x22>
 800feb8:	07d9      	lsls	r1, r3, #31
 800feba:	d421      	bmi.n	800ff00 <__lo0bits+0x52>
 800febc:	0798      	lsls	r0, r3, #30
 800febe:	bf49      	itett	mi
 800fec0:	085b      	lsrmi	r3, r3, #1
 800fec2:	089b      	lsrpl	r3, r3, #2
 800fec4:	2001      	movmi	r0, #1
 800fec6:	6013      	strmi	r3, [r2, #0]
 800fec8:	bf5c      	itt	pl
 800feca:	6013      	strpl	r3, [r2, #0]
 800fecc:	2002      	movpl	r0, #2
 800fece:	4770      	bx	lr
 800fed0:	b299      	uxth	r1, r3
 800fed2:	b909      	cbnz	r1, 800fed8 <__lo0bits+0x2a>
 800fed4:	0c1b      	lsrs	r3, r3, #16
 800fed6:	2010      	movs	r0, #16
 800fed8:	b2d9      	uxtb	r1, r3
 800feda:	b909      	cbnz	r1, 800fee0 <__lo0bits+0x32>
 800fedc:	3008      	adds	r0, #8
 800fede:	0a1b      	lsrs	r3, r3, #8
 800fee0:	0719      	lsls	r1, r3, #28
 800fee2:	bf04      	itt	eq
 800fee4:	091b      	lsreq	r3, r3, #4
 800fee6:	3004      	addeq	r0, #4
 800fee8:	0799      	lsls	r1, r3, #30
 800feea:	bf04      	itt	eq
 800feec:	089b      	lsreq	r3, r3, #2
 800feee:	3002      	addeq	r0, #2
 800fef0:	07d9      	lsls	r1, r3, #31
 800fef2:	d403      	bmi.n	800fefc <__lo0bits+0x4e>
 800fef4:	085b      	lsrs	r3, r3, #1
 800fef6:	f100 0001 	add.w	r0, r0, #1
 800fefa:	d003      	beq.n	800ff04 <__lo0bits+0x56>
 800fefc:	6013      	str	r3, [r2, #0]
 800fefe:	4770      	bx	lr
 800ff00:	2000      	movs	r0, #0
 800ff02:	4770      	bx	lr
 800ff04:	2020      	movs	r0, #32
 800ff06:	4770      	bx	lr

0800ff08 <__i2b>:
 800ff08:	b510      	push	{r4, lr}
 800ff0a:	460c      	mov	r4, r1
 800ff0c:	2101      	movs	r1, #1
 800ff0e:	f7ff ff07 	bl	800fd20 <_Balloc>
 800ff12:	4602      	mov	r2, r0
 800ff14:	b928      	cbnz	r0, 800ff22 <__i2b+0x1a>
 800ff16:	4b05      	ldr	r3, [pc, #20]	@ (800ff2c <__i2b+0x24>)
 800ff18:	4805      	ldr	r0, [pc, #20]	@ (800ff30 <__i2b+0x28>)
 800ff1a:	f240 1145 	movw	r1, #325	@ 0x145
 800ff1e:	f000 fd11 	bl	8010944 <__assert_func>
 800ff22:	2301      	movs	r3, #1
 800ff24:	6144      	str	r4, [r0, #20]
 800ff26:	6103      	str	r3, [r0, #16]
 800ff28:	bd10      	pop	{r4, pc}
 800ff2a:	bf00      	nop
 800ff2c:	0801102a 	.word	0x0801102a
 800ff30:	0801103b 	.word	0x0801103b

0800ff34 <__multiply>:
 800ff34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff38:	4614      	mov	r4, r2
 800ff3a:	690a      	ldr	r2, [r1, #16]
 800ff3c:	6923      	ldr	r3, [r4, #16]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	bfa8      	it	ge
 800ff42:	4623      	movge	r3, r4
 800ff44:	460f      	mov	r7, r1
 800ff46:	bfa4      	itt	ge
 800ff48:	460c      	movge	r4, r1
 800ff4a:	461f      	movge	r7, r3
 800ff4c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ff50:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ff54:	68a3      	ldr	r3, [r4, #8]
 800ff56:	6861      	ldr	r1, [r4, #4]
 800ff58:	eb0a 0609 	add.w	r6, sl, r9
 800ff5c:	42b3      	cmp	r3, r6
 800ff5e:	b085      	sub	sp, #20
 800ff60:	bfb8      	it	lt
 800ff62:	3101      	addlt	r1, #1
 800ff64:	f7ff fedc 	bl	800fd20 <_Balloc>
 800ff68:	b930      	cbnz	r0, 800ff78 <__multiply+0x44>
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	4b44      	ldr	r3, [pc, #272]	@ (8010080 <__multiply+0x14c>)
 800ff6e:	4845      	ldr	r0, [pc, #276]	@ (8010084 <__multiply+0x150>)
 800ff70:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ff74:	f000 fce6 	bl	8010944 <__assert_func>
 800ff78:	f100 0514 	add.w	r5, r0, #20
 800ff7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff80:	462b      	mov	r3, r5
 800ff82:	2200      	movs	r2, #0
 800ff84:	4543      	cmp	r3, r8
 800ff86:	d321      	bcc.n	800ffcc <__multiply+0x98>
 800ff88:	f107 0114 	add.w	r1, r7, #20
 800ff8c:	f104 0214 	add.w	r2, r4, #20
 800ff90:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ff94:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ff98:	9302      	str	r3, [sp, #8]
 800ff9a:	1b13      	subs	r3, r2, r4
 800ff9c:	3b15      	subs	r3, #21
 800ff9e:	f023 0303 	bic.w	r3, r3, #3
 800ffa2:	3304      	adds	r3, #4
 800ffa4:	f104 0715 	add.w	r7, r4, #21
 800ffa8:	42ba      	cmp	r2, r7
 800ffaa:	bf38      	it	cc
 800ffac:	2304      	movcc	r3, #4
 800ffae:	9301      	str	r3, [sp, #4]
 800ffb0:	9b02      	ldr	r3, [sp, #8]
 800ffb2:	9103      	str	r1, [sp, #12]
 800ffb4:	428b      	cmp	r3, r1
 800ffb6:	d80c      	bhi.n	800ffd2 <__multiply+0x9e>
 800ffb8:	2e00      	cmp	r6, #0
 800ffba:	dd03      	ble.n	800ffc4 <__multiply+0x90>
 800ffbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d05b      	beq.n	801007c <__multiply+0x148>
 800ffc4:	6106      	str	r6, [r0, #16]
 800ffc6:	b005      	add	sp, #20
 800ffc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffcc:	f843 2b04 	str.w	r2, [r3], #4
 800ffd0:	e7d8      	b.n	800ff84 <__multiply+0x50>
 800ffd2:	f8b1 a000 	ldrh.w	sl, [r1]
 800ffd6:	f1ba 0f00 	cmp.w	sl, #0
 800ffda:	d024      	beq.n	8010026 <__multiply+0xf2>
 800ffdc:	f104 0e14 	add.w	lr, r4, #20
 800ffe0:	46a9      	mov	r9, r5
 800ffe2:	f04f 0c00 	mov.w	ip, #0
 800ffe6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ffea:	f8d9 3000 	ldr.w	r3, [r9]
 800ffee:	fa1f fb87 	uxth.w	fp, r7
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	fb0a 330b 	mla	r3, sl, fp, r3
 800fff8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fffc:	f8d9 7000 	ldr.w	r7, [r9]
 8010000:	4463      	add	r3, ip
 8010002:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010006:	fb0a c70b 	mla	r7, sl, fp, ip
 801000a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801000e:	b29b      	uxth	r3, r3
 8010010:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010014:	4572      	cmp	r2, lr
 8010016:	f849 3b04 	str.w	r3, [r9], #4
 801001a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801001e:	d8e2      	bhi.n	800ffe6 <__multiply+0xb2>
 8010020:	9b01      	ldr	r3, [sp, #4]
 8010022:	f845 c003 	str.w	ip, [r5, r3]
 8010026:	9b03      	ldr	r3, [sp, #12]
 8010028:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801002c:	3104      	adds	r1, #4
 801002e:	f1b9 0f00 	cmp.w	r9, #0
 8010032:	d021      	beq.n	8010078 <__multiply+0x144>
 8010034:	682b      	ldr	r3, [r5, #0]
 8010036:	f104 0c14 	add.w	ip, r4, #20
 801003a:	46ae      	mov	lr, r5
 801003c:	f04f 0a00 	mov.w	sl, #0
 8010040:	f8bc b000 	ldrh.w	fp, [ip]
 8010044:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010048:	fb09 770b 	mla	r7, r9, fp, r7
 801004c:	4457      	add	r7, sl
 801004e:	b29b      	uxth	r3, r3
 8010050:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010054:	f84e 3b04 	str.w	r3, [lr], #4
 8010058:	f85c 3b04 	ldr.w	r3, [ip], #4
 801005c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010060:	f8be 3000 	ldrh.w	r3, [lr]
 8010064:	fb09 330a 	mla	r3, r9, sl, r3
 8010068:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801006c:	4562      	cmp	r2, ip
 801006e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010072:	d8e5      	bhi.n	8010040 <__multiply+0x10c>
 8010074:	9f01      	ldr	r7, [sp, #4]
 8010076:	51eb      	str	r3, [r5, r7]
 8010078:	3504      	adds	r5, #4
 801007a:	e799      	b.n	800ffb0 <__multiply+0x7c>
 801007c:	3e01      	subs	r6, #1
 801007e:	e79b      	b.n	800ffb8 <__multiply+0x84>
 8010080:	0801102a 	.word	0x0801102a
 8010084:	0801103b 	.word	0x0801103b

08010088 <__pow5mult>:
 8010088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801008c:	4615      	mov	r5, r2
 801008e:	f012 0203 	ands.w	r2, r2, #3
 8010092:	4607      	mov	r7, r0
 8010094:	460e      	mov	r6, r1
 8010096:	d007      	beq.n	80100a8 <__pow5mult+0x20>
 8010098:	4c25      	ldr	r4, [pc, #148]	@ (8010130 <__pow5mult+0xa8>)
 801009a:	3a01      	subs	r2, #1
 801009c:	2300      	movs	r3, #0
 801009e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80100a2:	f7ff fe9f 	bl	800fde4 <__multadd>
 80100a6:	4606      	mov	r6, r0
 80100a8:	10ad      	asrs	r5, r5, #2
 80100aa:	d03d      	beq.n	8010128 <__pow5mult+0xa0>
 80100ac:	69fc      	ldr	r4, [r7, #28]
 80100ae:	b97c      	cbnz	r4, 80100d0 <__pow5mult+0x48>
 80100b0:	2010      	movs	r0, #16
 80100b2:	f7ff fd7f 	bl	800fbb4 <malloc>
 80100b6:	4602      	mov	r2, r0
 80100b8:	61f8      	str	r0, [r7, #28]
 80100ba:	b928      	cbnz	r0, 80100c8 <__pow5mult+0x40>
 80100bc:	4b1d      	ldr	r3, [pc, #116]	@ (8010134 <__pow5mult+0xac>)
 80100be:	481e      	ldr	r0, [pc, #120]	@ (8010138 <__pow5mult+0xb0>)
 80100c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80100c4:	f000 fc3e 	bl	8010944 <__assert_func>
 80100c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100cc:	6004      	str	r4, [r0, #0]
 80100ce:	60c4      	str	r4, [r0, #12]
 80100d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80100d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80100d8:	b94c      	cbnz	r4, 80100ee <__pow5mult+0x66>
 80100da:	f240 2171 	movw	r1, #625	@ 0x271
 80100de:	4638      	mov	r0, r7
 80100e0:	f7ff ff12 	bl	800ff08 <__i2b>
 80100e4:	2300      	movs	r3, #0
 80100e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80100ea:	4604      	mov	r4, r0
 80100ec:	6003      	str	r3, [r0, #0]
 80100ee:	f04f 0900 	mov.w	r9, #0
 80100f2:	07eb      	lsls	r3, r5, #31
 80100f4:	d50a      	bpl.n	801010c <__pow5mult+0x84>
 80100f6:	4631      	mov	r1, r6
 80100f8:	4622      	mov	r2, r4
 80100fa:	4638      	mov	r0, r7
 80100fc:	f7ff ff1a 	bl	800ff34 <__multiply>
 8010100:	4631      	mov	r1, r6
 8010102:	4680      	mov	r8, r0
 8010104:	4638      	mov	r0, r7
 8010106:	f7ff fe4b 	bl	800fda0 <_Bfree>
 801010a:	4646      	mov	r6, r8
 801010c:	106d      	asrs	r5, r5, #1
 801010e:	d00b      	beq.n	8010128 <__pow5mult+0xa0>
 8010110:	6820      	ldr	r0, [r4, #0]
 8010112:	b938      	cbnz	r0, 8010124 <__pow5mult+0x9c>
 8010114:	4622      	mov	r2, r4
 8010116:	4621      	mov	r1, r4
 8010118:	4638      	mov	r0, r7
 801011a:	f7ff ff0b 	bl	800ff34 <__multiply>
 801011e:	6020      	str	r0, [r4, #0]
 8010120:	f8c0 9000 	str.w	r9, [r0]
 8010124:	4604      	mov	r4, r0
 8010126:	e7e4      	b.n	80100f2 <__pow5mult+0x6a>
 8010128:	4630      	mov	r0, r6
 801012a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801012e:	bf00      	nop
 8010130:	08011094 	.word	0x08011094
 8010134:	08010fbb 	.word	0x08010fbb
 8010138:	0801103b 	.word	0x0801103b

0801013c <__lshift>:
 801013c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010140:	460c      	mov	r4, r1
 8010142:	6849      	ldr	r1, [r1, #4]
 8010144:	6923      	ldr	r3, [r4, #16]
 8010146:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801014a:	68a3      	ldr	r3, [r4, #8]
 801014c:	4607      	mov	r7, r0
 801014e:	4691      	mov	r9, r2
 8010150:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010154:	f108 0601 	add.w	r6, r8, #1
 8010158:	42b3      	cmp	r3, r6
 801015a:	db0b      	blt.n	8010174 <__lshift+0x38>
 801015c:	4638      	mov	r0, r7
 801015e:	f7ff fddf 	bl	800fd20 <_Balloc>
 8010162:	4605      	mov	r5, r0
 8010164:	b948      	cbnz	r0, 801017a <__lshift+0x3e>
 8010166:	4602      	mov	r2, r0
 8010168:	4b28      	ldr	r3, [pc, #160]	@ (801020c <__lshift+0xd0>)
 801016a:	4829      	ldr	r0, [pc, #164]	@ (8010210 <__lshift+0xd4>)
 801016c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010170:	f000 fbe8 	bl	8010944 <__assert_func>
 8010174:	3101      	adds	r1, #1
 8010176:	005b      	lsls	r3, r3, #1
 8010178:	e7ee      	b.n	8010158 <__lshift+0x1c>
 801017a:	2300      	movs	r3, #0
 801017c:	f100 0114 	add.w	r1, r0, #20
 8010180:	f100 0210 	add.w	r2, r0, #16
 8010184:	4618      	mov	r0, r3
 8010186:	4553      	cmp	r3, sl
 8010188:	db33      	blt.n	80101f2 <__lshift+0xb6>
 801018a:	6920      	ldr	r0, [r4, #16]
 801018c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010190:	f104 0314 	add.w	r3, r4, #20
 8010194:	f019 091f 	ands.w	r9, r9, #31
 8010198:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801019c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80101a0:	d02b      	beq.n	80101fa <__lshift+0xbe>
 80101a2:	f1c9 0e20 	rsb	lr, r9, #32
 80101a6:	468a      	mov	sl, r1
 80101a8:	2200      	movs	r2, #0
 80101aa:	6818      	ldr	r0, [r3, #0]
 80101ac:	fa00 f009 	lsl.w	r0, r0, r9
 80101b0:	4310      	orrs	r0, r2
 80101b2:	f84a 0b04 	str.w	r0, [sl], #4
 80101b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80101ba:	459c      	cmp	ip, r3
 80101bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80101c0:	d8f3      	bhi.n	80101aa <__lshift+0x6e>
 80101c2:	ebac 0304 	sub.w	r3, ip, r4
 80101c6:	3b15      	subs	r3, #21
 80101c8:	f023 0303 	bic.w	r3, r3, #3
 80101cc:	3304      	adds	r3, #4
 80101ce:	f104 0015 	add.w	r0, r4, #21
 80101d2:	4584      	cmp	ip, r0
 80101d4:	bf38      	it	cc
 80101d6:	2304      	movcc	r3, #4
 80101d8:	50ca      	str	r2, [r1, r3]
 80101da:	b10a      	cbz	r2, 80101e0 <__lshift+0xa4>
 80101dc:	f108 0602 	add.w	r6, r8, #2
 80101e0:	3e01      	subs	r6, #1
 80101e2:	4638      	mov	r0, r7
 80101e4:	612e      	str	r6, [r5, #16]
 80101e6:	4621      	mov	r1, r4
 80101e8:	f7ff fdda 	bl	800fda0 <_Bfree>
 80101ec:	4628      	mov	r0, r5
 80101ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80101f6:	3301      	adds	r3, #1
 80101f8:	e7c5      	b.n	8010186 <__lshift+0x4a>
 80101fa:	3904      	subs	r1, #4
 80101fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010200:	f841 2f04 	str.w	r2, [r1, #4]!
 8010204:	459c      	cmp	ip, r3
 8010206:	d8f9      	bhi.n	80101fc <__lshift+0xc0>
 8010208:	e7ea      	b.n	80101e0 <__lshift+0xa4>
 801020a:	bf00      	nop
 801020c:	0801102a 	.word	0x0801102a
 8010210:	0801103b 	.word	0x0801103b

08010214 <__mcmp>:
 8010214:	690a      	ldr	r2, [r1, #16]
 8010216:	4603      	mov	r3, r0
 8010218:	6900      	ldr	r0, [r0, #16]
 801021a:	1a80      	subs	r0, r0, r2
 801021c:	b530      	push	{r4, r5, lr}
 801021e:	d10e      	bne.n	801023e <__mcmp+0x2a>
 8010220:	3314      	adds	r3, #20
 8010222:	3114      	adds	r1, #20
 8010224:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010228:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801022c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010230:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010234:	4295      	cmp	r5, r2
 8010236:	d003      	beq.n	8010240 <__mcmp+0x2c>
 8010238:	d205      	bcs.n	8010246 <__mcmp+0x32>
 801023a:	f04f 30ff 	mov.w	r0, #4294967295
 801023e:	bd30      	pop	{r4, r5, pc}
 8010240:	42a3      	cmp	r3, r4
 8010242:	d3f3      	bcc.n	801022c <__mcmp+0x18>
 8010244:	e7fb      	b.n	801023e <__mcmp+0x2a>
 8010246:	2001      	movs	r0, #1
 8010248:	e7f9      	b.n	801023e <__mcmp+0x2a>
	...

0801024c <__mdiff>:
 801024c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010250:	4689      	mov	r9, r1
 8010252:	4606      	mov	r6, r0
 8010254:	4611      	mov	r1, r2
 8010256:	4648      	mov	r0, r9
 8010258:	4614      	mov	r4, r2
 801025a:	f7ff ffdb 	bl	8010214 <__mcmp>
 801025e:	1e05      	subs	r5, r0, #0
 8010260:	d112      	bne.n	8010288 <__mdiff+0x3c>
 8010262:	4629      	mov	r1, r5
 8010264:	4630      	mov	r0, r6
 8010266:	f7ff fd5b 	bl	800fd20 <_Balloc>
 801026a:	4602      	mov	r2, r0
 801026c:	b928      	cbnz	r0, 801027a <__mdiff+0x2e>
 801026e:	4b3f      	ldr	r3, [pc, #252]	@ (801036c <__mdiff+0x120>)
 8010270:	f240 2137 	movw	r1, #567	@ 0x237
 8010274:	483e      	ldr	r0, [pc, #248]	@ (8010370 <__mdiff+0x124>)
 8010276:	f000 fb65 	bl	8010944 <__assert_func>
 801027a:	2301      	movs	r3, #1
 801027c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010280:	4610      	mov	r0, r2
 8010282:	b003      	add	sp, #12
 8010284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010288:	bfbc      	itt	lt
 801028a:	464b      	movlt	r3, r9
 801028c:	46a1      	movlt	r9, r4
 801028e:	4630      	mov	r0, r6
 8010290:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010294:	bfba      	itte	lt
 8010296:	461c      	movlt	r4, r3
 8010298:	2501      	movlt	r5, #1
 801029a:	2500      	movge	r5, #0
 801029c:	f7ff fd40 	bl	800fd20 <_Balloc>
 80102a0:	4602      	mov	r2, r0
 80102a2:	b918      	cbnz	r0, 80102ac <__mdiff+0x60>
 80102a4:	4b31      	ldr	r3, [pc, #196]	@ (801036c <__mdiff+0x120>)
 80102a6:	f240 2145 	movw	r1, #581	@ 0x245
 80102aa:	e7e3      	b.n	8010274 <__mdiff+0x28>
 80102ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80102b0:	6926      	ldr	r6, [r4, #16]
 80102b2:	60c5      	str	r5, [r0, #12]
 80102b4:	f109 0310 	add.w	r3, r9, #16
 80102b8:	f109 0514 	add.w	r5, r9, #20
 80102bc:	f104 0e14 	add.w	lr, r4, #20
 80102c0:	f100 0b14 	add.w	fp, r0, #20
 80102c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80102c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80102cc:	9301      	str	r3, [sp, #4]
 80102ce:	46d9      	mov	r9, fp
 80102d0:	f04f 0c00 	mov.w	ip, #0
 80102d4:	9b01      	ldr	r3, [sp, #4]
 80102d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80102da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80102de:	9301      	str	r3, [sp, #4]
 80102e0:	fa1f f38a 	uxth.w	r3, sl
 80102e4:	4619      	mov	r1, r3
 80102e6:	b283      	uxth	r3, r0
 80102e8:	1acb      	subs	r3, r1, r3
 80102ea:	0c00      	lsrs	r0, r0, #16
 80102ec:	4463      	add	r3, ip
 80102ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80102f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80102fc:	4576      	cmp	r6, lr
 80102fe:	f849 3b04 	str.w	r3, [r9], #4
 8010302:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010306:	d8e5      	bhi.n	80102d4 <__mdiff+0x88>
 8010308:	1b33      	subs	r3, r6, r4
 801030a:	3b15      	subs	r3, #21
 801030c:	f023 0303 	bic.w	r3, r3, #3
 8010310:	3415      	adds	r4, #21
 8010312:	3304      	adds	r3, #4
 8010314:	42a6      	cmp	r6, r4
 8010316:	bf38      	it	cc
 8010318:	2304      	movcc	r3, #4
 801031a:	441d      	add	r5, r3
 801031c:	445b      	add	r3, fp
 801031e:	461e      	mov	r6, r3
 8010320:	462c      	mov	r4, r5
 8010322:	4544      	cmp	r4, r8
 8010324:	d30e      	bcc.n	8010344 <__mdiff+0xf8>
 8010326:	f108 0103 	add.w	r1, r8, #3
 801032a:	1b49      	subs	r1, r1, r5
 801032c:	f021 0103 	bic.w	r1, r1, #3
 8010330:	3d03      	subs	r5, #3
 8010332:	45a8      	cmp	r8, r5
 8010334:	bf38      	it	cc
 8010336:	2100      	movcc	r1, #0
 8010338:	440b      	add	r3, r1
 801033a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801033e:	b191      	cbz	r1, 8010366 <__mdiff+0x11a>
 8010340:	6117      	str	r7, [r2, #16]
 8010342:	e79d      	b.n	8010280 <__mdiff+0x34>
 8010344:	f854 1b04 	ldr.w	r1, [r4], #4
 8010348:	46e6      	mov	lr, ip
 801034a:	0c08      	lsrs	r0, r1, #16
 801034c:	fa1c fc81 	uxtah	ip, ip, r1
 8010350:	4471      	add	r1, lr
 8010352:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010356:	b289      	uxth	r1, r1
 8010358:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801035c:	f846 1b04 	str.w	r1, [r6], #4
 8010360:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010364:	e7dd      	b.n	8010322 <__mdiff+0xd6>
 8010366:	3f01      	subs	r7, #1
 8010368:	e7e7      	b.n	801033a <__mdiff+0xee>
 801036a:	bf00      	nop
 801036c:	0801102a 	.word	0x0801102a
 8010370:	0801103b 	.word	0x0801103b

08010374 <__d2b>:
 8010374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010378:	460f      	mov	r7, r1
 801037a:	2101      	movs	r1, #1
 801037c:	ec59 8b10 	vmov	r8, r9, d0
 8010380:	4616      	mov	r6, r2
 8010382:	f7ff fccd 	bl	800fd20 <_Balloc>
 8010386:	4604      	mov	r4, r0
 8010388:	b930      	cbnz	r0, 8010398 <__d2b+0x24>
 801038a:	4602      	mov	r2, r0
 801038c:	4b23      	ldr	r3, [pc, #140]	@ (801041c <__d2b+0xa8>)
 801038e:	4824      	ldr	r0, [pc, #144]	@ (8010420 <__d2b+0xac>)
 8010390:	f240 310f 	movw	r1, #783	@ 0x30f
 8010394:	f000 fad6 	bl	8010944 <__assert_func>
 8010398:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801039c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80103a0:	b10d      	cbz	r5, 80103a6 <__d2b+0x32>
 80103a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80103a6:	9301      	str	r3, [sp, #4]
 80103a8:	f1b8 0300 	subs.w	r3, r8, #0
 80103ac:	d023      	beq.n	80103f6 <__d2b+0x82>
 80103ae:	4668      	mov	r0, sp
 80103b0:	9300      	str	r3, [sp, #0]
 80103b2:	f7ff fd7c 	bl	800feae <__lo0bits>
 80103b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80103ba:	b1d0      	cbz	r0, 80103f2 <__d2b+0x7e>
 80103bc:	f1c0 0320 	rsb	r3, r0, #32
 80103c0:	fa02 f303 	lsl.w	r3, r2, r3
 80103c4:	430b      	orrs	r3, r1
 80103c6:	40c2      	lsrs	r2, r0
 80103c8:	6163      	str	r3, [r4, #20]
 80103ca:	9201      	str	r2, [sp, #4]
 80103cc:	9b01      	ldr	r3, [sp, #4]
 80103ce:	61a3      	str	r3, [r4, #24]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	bf0c      	ite	eq
 80103d4:	2201      	moveq	r2, #1
 80103d6:	2202      	movne	r2, #2
 80103d8:	6122      	str	r2, [r4, #16]
 80103da:	b1a5      	cbz	r5, 8010406 <__d2b+0x92>
 80103dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80103e0:	4405      	add	r5, r0
 80103e2:	603d      	str	r5, [r7, #0]
 80103e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80103e8:	6030      	str	r0, [r6, #0]
 80103ea:	4620      	mov	r0, r4
 80103ec:	b003      	add	sp, #12
 80103ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103f2:	6161      	str	r1, [r4, #20]
 80103f4:	e7ea      	b.n	80103cc <__d2b+0x58>
 80103f6:	a801      	add	r0, sp, #4
 80103f8:	f7ff fd59 	bl	800feae <__lo0bits>
 80103fc:	9b01      	ldr	r3, [sp, #4]
 80103fe:	6163      	str	r3, [r4, #20]
 8010400:	3020      	adds	r0, #32
 8010402:	2201      	movs	r2, #1
 8010404:	e7e8      	b.n	80103d8 <__d2b+0x64>
 8010406:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801040a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801040e:	6038      	str	r0, [r7, #0]
 8010410:	6918      	ldr	r0, [r3, #16]
 8010412:	f7ff fd2d 	bl	800fe70 <__hi0bits>
 8010416:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801041a:	e7e5      	b.n	80103e8 <__d2b+0x74>
 801041c:	0801102a 	.word	0x0801102a
 8010420:	0801103b 	.word	0x0801103b

08010424 <__sfputc_r>:
 8010424:	6893      	ldr	r3, [r2, #8]
 8010426:	3b01      	subs	r3, #1
 8010428:	2b00      	cmp	r3, #0
 801042a:	b410      	push	{r4}
 801042c:	6093      	str	r3, [r2, #8]
 801042e:	da08      	bge.n	8010442 <__sfputc_r+0x1e>
 8010430:	6994      	ldr	r4, [r2, #24]
 8010432:	42a3      	cmp	r3, r4
 8010434:	db01      	blt.n	801043a <__sfputc_r+0x16>
 8010436:	290a      	cmp	r1, #10
 8010438:	d103      	bne.n	8010442 <__sfputc_r+0x1e>
 801043a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801043e:	f7fe bc0e 	b.w	800ec5e <__swbuf_r>
 8010442:	6813      	ldr	r3, [r2, #0]
 8010444:	1c58      	adds	r0, r3, #1
 8010446:	6010      	str	r0, [r2, #0]
 8010448:	7019      	strb	r1, [r3, #0]
 801044a:	4608      	mov	r0, r1
 801044c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010450:	4770      	bx	lr

08010452 <__sfputs_r>:
 8010452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010454:	4606      	mov	r6, r0
 8010456:	460f      	mov	r7, r1
 8010458:	4614      	mov	r4, r2
 801045a:	18d5      	adds	r5, r2, r3
 801045c:	42ac      	cmp	r4, r5
 801045e:	d101      	bne.n	8010464 <__sfputs_r+0x12>
 8010460:	2000      	movs	r0, #0
 8010462:	e007      	b.n	8010474 <__sfputs_r+0x22>
 8010464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010468:	463a      	mov	r2, r7
 801046a:	4630      	mov	r0, r6
 801046c:	f7ff ffda 	bl	8010424 <__sfputc_r>
 8010470:	1c43      	adds	r3, r0, #1
 8010472:	d1f3      	bne.n	801045c <__sfputs_r+0xa>
 8010474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010478 <_vfiprintf_r>:
 8010478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801047c:	460d      	mov	r5, r1
 801047e:	b09d      	sub	sp, #116	@ 0x74
 8010480:	4614      	mov	r4, r2
 8010482:	4698      	mov	r8, r3
 8010484:	4606      	mov	r6, r0
 8010486:	b118      	cbz	r0, 8010490 <_vfiprintf_r+0x18>
 8010488:	6a03      	ldr	r3, [r0, #32]
 801048a:	b90b      	cbnz	r3, 8010490 <_vfiprintf_r+0x18>
 801048c:	f7fe fafe 	bl	800ea8c <__sinit>
 8010490:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010492:	07d9      	lsls	r1, r3, #31
 8010494:	d405      	bmi.n	80104a2 <_vfiprintf_r+0x2a>
 8010496:	89ab      	ldrh	r3, [r5, #12]
 8010498:	059a      	lsls	r2, r3, #22
 801049a:	d402      	bmi.n	80104a2 <_vfiprintf_r+0x2a>
 801049c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801049e:	f7fe fcf0 	bl	800ee82 <__retarget_lock_acquire_recursive>
 80104a2:	89ab      	ldrh	r3, [r5, #12]
 80104a4:	071b      	lsls	r3, r3, #28
 80104a6:	d501      	bpl.n	80104ac <_vfiprintf_r+0x34>
 80104a8:	692b      	ldr	r3, [r5, #16]
 80104aa:	b99b      	cbnz	r3, 80104d4 <_vfiprintf_r+0x5c>
 80104ac:	4629      	mov	r1, r5
 80104ae:	4630      	mov	r0, r6
 80104b0:	f7fe fc14 	bl	800ecdc <__swsetup_r>
 80104b4:	b170      	cbz	r0, 80104d4 <_vfiprintf_r+0x5c>
 80104b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80104b8:	07dc      	lsls	r4, r3, #31
 80104ba:	d504      	bpl.n	80104c6 <_vfiprintf_r+0x4e>
 80104bc:	f04f 30ff 	mov.w	r0, #4294967295
 80104c0:	b01d      	add	sp, #116	@ 0x74
 80104c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c6:	89ab      	ldrh	r3, [r5, #12]
 80104c8:	0598      	lsls	r0, r3, #22
 80104ca:	d4f7      	bmi.n	80104bc <_vfiprintf_r+0x44>
 80104cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80104ce:	f7fe fcd9 	bl	800ee84 <__retarget_lock_release_recursive>
 80104d2:	e7f3      	b.n	80104bc <_vfiprintf_r+0x44>
 80104d4:	2300      	movs	r3, #0
 80104d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80104d8:	2320      	movs	r3, #32
 80104da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80104de:	f8cd 800c 	str.w	r8, [sp, #12]
 80104e2:	2330      	movs	r3, #48	@ 0x30
 80104e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010694 <_vfiprintf_r+0x21c>
 80104e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80104ec:	f04f 0901 	mov.w	r9, #1
 80104f0:	4623      	mov	r3, r4
 80104f2:	469a      	mov	sl, r3
 80104f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104f8:	b10a      	cbz	r2, 80104fe <_vfiprintf_r+0x86>
 80104fa:	2a25      	cmp	r2, #37	@ 0x25
 80104fc:	d1f9      	bne.n	80104f2 <_vfiprintf_r+0x7a>
 80104fe:	ebba 0b04 	subs.w	fp, sl, r4
 8010502:	d00b      	beq.n	801051c <_vfiprintf_r+0xa4>
 8010504:	465b      	mov	r3, fp
 8010506:	4622      	mov	r2, r4
 8010508:	4629      	mov	r1, r5
 801050a:	4630      	mov	r0, r6
 801050c:	f7ff ffa1 	bl	8010452 <__sfputs_r>
 8010510:	3001      	adds	r0, #1
 8010512:	f000 80a7 	beq.w	8010664 <_vfiprintf_r+0x1ec>
 8010516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010518:	445a      	add	r2, fp
 801051a:	9209      	str	r2, [sp, #36]	@ 0x24
 801051c:	f89a 3000 	ldrb.w	r3, [sl]
 8010520:	2b00      	cmp	r3, #0
 8010522:	f000 809f 	beq.w	8010664 <_vfiprintf_r+0x1ec>
 8010526:	2300      	movs	r3, #0
 8010528:	f04f 32ff 	mov.w	r2, #4294967295
 801052c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010530:	f10a 0a01 	add.w	sl, sl, #1
 8010534:	9304      	str	r3, [sp, #16]
 8010536:	9307      	str	r3, [sp, #28]
 8010538:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801053c:	931a      	str	r3, [sp, #104]	@ 0x68
 801053e:	4654      	mov	r4, sl
 8010540:	2205      	movs	r2, #5
 8010542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010546:	4853      	ldr	r0, [pc, #332]	@ (8010694 <_vfiprintf_r+0x21c>)
 8010548:	f7ef fe62 	bl	8000210 <memchr>
 801054c:	9a04      	ldr	r2, [sp, #16]
 801054e:	b9d8      	cbnz	r0, 8010588 <_vfiprintf_r+0x110>
 8010550:	06d1      	lsls	r1, r2, #27
 8010552:	bf44      	itt	mi
 8010554:	2320      	movmi	r3, #32
 8010556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801055a:	0713      	lsls	r3, r2, #28
 801055c:	bf44      	itt	mi
 801055e:	232b      	movmi	r3, #43	@ 0x2b
 8010560:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010564:	f89a 3000 	ldrb.w	r3, [sl]
 8010568:	2b2a      	cmp	r3, #42	@ 0x2a
 801056a:	d015      	beq.n	8010598 <_vfiprintf_r+0x120>
 801056c:	9a07      	ldr	r2, [sp, #28]
 801056e:	4654      	mov	r4, sl
 8010570:	2000      	movs	r0, #0
 8010572:	f04f 0c0a 	mov.w	ip, #10
 8010576:	4621      	mov	r1, r4
 8010578:	f811 3b01 	ldrb.w	r3, [r1], #1
 801057c:	3b30      	subs	r3, #48	@ 0x30
 801057e:	2b09      	cmp	r3, #9
 8010580:	d94b      	bls.n	801061a <_vfiprintf_r+0x1a2>
 8010582:	b1b0      	cbz	r0, 80105b2 <_vfiprintf_r+0x13a>
 8010584:	9207      	str	r2, [sp, #28]
 8010586:	e014      	b.n	80105b2 <_vfiprintf_r+0x13a>
 8010588:	eba0 0308 	sub.w	r3, r0, r8
 801058c:	fa09 f303 	lsl.w	r3, r9, r3
 8010590:	4313      	orrs	r3, r2
 8010592:	9304      	str	r3, [sp, #16]
 8010594:	46a2      	mov	sl, r4
 8010596:	e7d2      	b.n	801053e <_vfiprintf_r+0xc6>
 8010598:	9b03      	ldr	r3, [sp, #12]
 801059a:	1d19      	adds	r1, r3, #4
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	9103      	str	r1, [sp, #12]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	bfbb      	ittet	lt
 80105a4:	425b      	neglt	r3, r3
 80105a6:	f042 0202 	orrlt.w	r2, r2, #2
 80105aa:	9307      	strge	r3, [sp, #28]
 80105ac:	9307      	strlt	r3, [sp, #28]
 80105ae:	bfb8      	it	lt
 80105b0:	9204      	strlt	r2, [sp, #16]
 80105b2:	7823      	ldrb	r3, [r4, #0]
 80105b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80105b6:	d10a      	bne.n	80105ce <_vfiprintf_r+0x156>
 80105b8:	7863      	ldrb	r3, [r4, #1]
 80105ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80105bc:	d132      	bne.n	8010624 <_vfiprintf_r+0x1ac>
 80105be:	9b03      	ldr	r3, [sp, #12]
 80105c0:	1d1a      	adds	r2, r3, #4
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	9203      	str	r2, [sp, #12]
 80105c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80105ca:	3402      	adds	r4, #2
 80105cc:	9305      	str	r3, [sp, #20]
 80105ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80106a4 <_vfiprintf_r+0x22c>
 80105d2:	7821      	ldrb	r1, [r4, #0]
 80105d4:	2203      	movs	r2, #3
 80105d6:	4650      	mov	r0, sl
 80105d8:	f7ef fe1a 	bl	8000210 <memchr>
 80105dc:	b138      	cbz	r0, 80105ee <_vfiprintf_r+0x176>
 80105de:	9b04      	ldr	r3, [sp, #16]
 80105e0:	eba0 000a 	sub.w	r0, r0, sl
 80105e4:	2240      	movs	r2, #64	@ 0x40
 80105e6:	4082      	lsls	r2, r0
 80105e8:	4313      	orrs	r3, r2
 80105ea:	3401      	adds	r4, #1
 80105ec:	9304      	str	r3, [sp, #16]
 80105ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105f2:	4829      	ldr	r0, [pc, #164]	@ (8010698 <_vfiprintf_r+0x220>)
 80105f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80105f8:	2206      	movs	r2, #6
 80105fa:	f7ef fe09 	bl	8000210 <memchr>
 80105fe:	2800      	cmp	r0, #0
 8010600:	d03f      	beq.n	8010682 <_vfiprintf_r+0x20a>
 8010602:	4b26      	ldr	r3, [pc, #152]	@ (801069c <_vfiprintf_r+0x224>)
 8010604:	bb1b      	cbnz	r3, 801064e <_vfiprintf_r+0x1d6>
 8010606:	9b03      	ldr	r3, [sp, #12]
 8010608:	3307      	adds	r3, #7
 801060a:	f023 0307 	bic.w	r3, r3, #7
 801060e:	3308      	adds	r3, #8
 8010610:	9303      	str	r3, [sp, #12]
 8010612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010614:	443b      	add	r3, r7
 8010616:	9309      	str	r3, [sp, #36]	@ 0x24
 8010618:	e76a      	b.n	80104f0 <_vfiprintf_r+0x78>
 801061a:	fb0c 3202 	mla	r2, ip, r2, r3
 801061e:	460c      	mov	r4, r1
 8010620:	2001      	movs	r0, #1
 8010622:	e7a8      	b.n	8010576 <_vfiprintf_r+0xfe>
 8010624:	2300      	movs	r3, #0
 8010626:	3401      	adds	r4, #1
 8010628:	9305      	str	r3, [sp, #20]
 801062a:	4619      	mov	r1, r3
 801062c:	f04f 0c0a 	mov.w	ip, #10
 8010630:	4620      	mov	r0, r4
 8010632:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010636:	3a30      	subs	r2, #48	@ 0x30
 8010638:	2a09      	cmp	r2, #9
 801063a:	d903      	bls.n	8010644 <_vfiprintf_r+0x1cc>
 801063c:	2b00      	cmp	r3, #0
 801063e:	d0c6      	beq.n	80105ce <_vfiprintf_r+0x156>
 8010640:	9105      	str	r1, [sp, #20]
 8010642:	e7c4      	b.n	80105ce <_vfiprintf_r+0x156>
 8010644:	fb0c 2101 	mla	r1, ip, r1, r2
 8010648:	4604      	mov	r4, r0
 801064a:	2301      	movs	r3, #1
 801064c:	e7f0      	b.n	8010630 <_vfiprintf_r+0x1b8>
 801064e:	ab03      	add	r3, sp, #12
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	462a      	mov	r2, r5
 8010654:	4b12      	ldr	r3, [pc, #72]	@ (80106a0 <_vfiprintf_r+0x228>)
 8010656:	a904      	add	r1, sp, #16
 8010658:	4630      	mov	r0, r6
 801065a:	f7fd fdd3 	bl	800e204 <_printf_float>
 801065e:	4607      	mov	r7, r0
 8010660:	1c78      	adds	r0, r7, #1
 8010662:	d1d6      	bne.n	8010612 <_vfiprintf_r+0x19a>
 8010664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010666:	07d9      	lsls	r1, r3, #31
 8010668:	d405      	bmi.n	8010676 <_vfiprintf_r+0x1fe>
 801066a:	89ab      	ldrh	r3, [r5, #12]
 801066c:	059a      	lsls	r2, r3, #22
 801066e:	d402      	bmi.n	8010676 <_vfiprintf_r+0x1fe>
 8010670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010672:	f7fe fc07 	bl	800ee84 <__retarget_lock_release_recursive>
 8010676:	89ab      	ldrh	r3, [r5, #12]
 8010678:	065b      	lsls	r3, r3, #25
 801067a:	f53f af1f 	bmi.w	80104bc <_vfiprintf_r+0x44>
 801067e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010680:	e71e      	b.n	80104c0 <_vfiprintf_r+0x48>
 8010682:	ab03      	add	r3, sp, #12
 8010684:	9300      	str	r3, [sp, #0]
 8010686:	462a      	mov	r2, r5
 8010688:	4b05      	ldr	r3, [pc, #20]	@ (80106a0 <_vfiprintf_r+0x228>)
 801068a:	a904      	add	r1, sp, #16
 801068c:	4630      	mov	r0, r6
 801068e:	f7fe f851 	bl	800e734 <_printf_i>
 8010692:	e7e4      	b.n	801065e <_vfiprintf_r+0x1e6>
 8010694:	08011190 	.word	0x08011190
 8010698:	0801119a 	.word	0x0801119a
 801069c:	0800e205 	.word	0x0800e205
 80106a0:	08010453 	.word	0x08010453
 80106a4:	08011196 	.word	0x08011196

080106a8 <__sflush_r>:
 80106a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80106ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106b0:	0716      	lsls	r6, r2, #28
 80106b2:	4605      	mov	r5, r0
 80106b4:	460c      	mov	r4, r1
 80106b6:	d454      	bmi.n	8010762 <__sflush_r+0xba>
 80106b8:	684b      	ldr	r3, [r1, #4]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	dc02      	bgt.n	80106c4 <__sflush_r+0x1c>
 80106be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	dd48      	ble.n	8010756 <__sflush_r+0xae>
 80106c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80106c6:	2e00      	cmp	r6, #0
 80106c8:	d045      	beq.n	8010756 <__sflush_r+0xae>
 80106ca:	2300      	movs	r3, #0
 80106cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80106d0:	682f      	ldr	r7, [r5, #0]
 80106d2:	6a21      	ldr	r1, [r4, #32]
 80106d4:	602b      	str	r3, [r5, #0]
 80106d6:	d030      	beq.n	801073a <__sflush_r+0x92>
 80106d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80106da:	89a3      	ldrh	r3, [r4, #12]
 80106dc:	0759      	lsls	r1, r3, #29
 80106de:	d505      	bpl.n	80106ec <__sflush_r+0x44>
 80106e0:	6863      	ldr	r3, [r4, #4]
 80106e2:	1ad2      	subs	r2, r2, r3
 80106e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80106e6:	b10b      	cbz	r3, 80106ec <__sflush_r+0x44>
 80106e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80106ea:	1ad2      	subs	r2, r2, r3
 80106ec:	2300      	movs	r3, #0
 80106ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80106f0:	6a21      	ldr	r1, [r4, #32]
 80106f2:	4628      	mov	r0, r5
 80106f4:	47b0      	blx	r6
 80106f6:	1c43      	adds	r3, r0, #1
 80106f8:	89a3      	ldrh	r3, [r4, #12]
 80106fa:	d106      	bne.n	801070a <__sflush_r+0x62>
 80106fc:	6829      	ldr	r1, [r5, #0]
 80106fe:	291d      	cmp	r1, #29
 8010700:	d82b      	bhi.n	801075a <__sflush_r+0xb2>
 8010702:	4a2a      	ldr	r2, [pc, #168]	@ (80107ac <__sflush_r+0x104>)
 8010704:	410a      	asrs	r2, r1
 8010706:	07d6      	lsls	r6, r2, #31
 8010708:	d427      	bmi.n	801075a <__sflush_r+0xb2>
 801070a:	2200      	movs	r2, #0
 801070c:	6062      	str	r2, [r4, #4]
 801070e:	04d9      	lsls	r1, r3, #19
 8010710:	6922      	ldr	r2, [r4, #16]
 8010712:	6022      	str	r2, [r4, #0]
 8010714:	d504      	bpl.n	8010720 <__sflush_r+0x78>
 8010716:	1c42      	adds	r2, r0, #1
 8010718:	d101      	bne.n	801071e <__sflush_r+0x76>
 801071a:	682b      	ldr	r3, [r5, #0]
 801071c:	b903      	cbnz	r3, 8010720 <__sflush_r+0x78>
 801071e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010720:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010722:	602f      	str	r7, [r5, #0]
 8010724:	b1b9      	cbz	r1, 8010756 <__sflush_r+0xae>
 8010726:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801072a:	4299      	cmp	r1, r3
 801072c:	d002      	beq.n	8010734 <__sflush_r+0x8c>
 801072e:	4628      	mov	r0, r5
 8010730:	f7ff f9f6 	bl	800fb20 <_free_r>
 8010734:	2300      	movs	r3, #0
 8010736:	6363      	str	r3, [r4, #52]	@ 0x34
 8010738:	e00d      	b.n	8010756 <__sflush_r+0xae>
 801073a:	2301      	movs	r3, #1
 801073c:	4628      	mov	r0, r5
 801073e:	47b0      	blx	r6
 8010740:	4602      	mov	r2, r0
 8010742:	1c50      	adds	r0, r2, #1
 8010744:	d1c9      	bne.n	80106da <__sflush_r+0x32>
 8010746:	682b      	ldr	r3, [r5, #0]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d0c6      	beq.n	80106da <__sflush_r+0x32>
 801074c:	2b1d      	cmp	r3, #29
 801074e:	d001      	beq.n	8010754 <__sflush_r+0xac>
 8010750:	2b16      	cmp	r3, #22
 8010752:	d11e      	bne.n	8010792 <__sflush_r+0xea>
 8010754:	602f      	str	r7, [r5, #0]
 8010756:	2000      	movs	r0, #0
 8010758:	e022      	b.n	80107a0 <__sflush_r+0xf8>
 801075a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801075e:	b21b      	sxth	r3, r3
 8010760:	e01b      	b.n	801079a <__sflush_r+0xf2>
 8010762:	690f      	ldr	r7, [r1, #16]
 8010764:	2f00      	cmp	r7, #0
 8010766:	d0f6      	beq.n	8010756 <__sflush_r+0xae>
 8010768:	0793      	lsls	r3, r2, #30
 801076a:	680e      	ldr	r6, [r1, #0]
 801076c:	bf08      	it	eq
 801076e:	694b      	ldreq	r3, [r1, #20]
 8010770:	600f      	str	r7, [r1, #0]
 8010772:	bf18      	it	ne
 8010774:	2300      	movne	r3, #0
 8010776:	eba6 0807 	sub.w	r8, r6, r7
 801077a:	608b      	str	r3, [r1, #8]
 801077c:	f1b8 0f00 	cmp.w	r8, #0
 8010780:	dde9      	ble.n	8010756 <__sflush_r+0xae>
 8010782:	6a21      	ldr	r1, [r4, #32]
 8010784:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010786:	4643      	mov	r3, r8
 8010788:	463a      	mov	r2, r7
 801078a:	4628      	mov	r0, r5
 801078c:	47b0      	blx	r6
 801078e:	2800      	cmp	r0, #0
 8010790:	dc08      	bgt.n	80107a4 <__sflush_r+0xfc>
 8010792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801079a:	81a3      	strh	r3, [r4, #12]
 801079c:	f04f 30ff 	mov.w	r0, #4294967295
 80107a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107a4:	4407      	add	r7, r0
 80107a6:	eba8 0800 	sub.w	r8, r8, r0
 80107aa:	e7e7      	b.n	801077c <__sflush_r+0xd4>
 80107ac:	dfbffffe 	.word	0xdfbffffe

080107b0 <_fflush_r>:
 80107b0:	b538      	push	{r3, r4, r5, lr}
 80107b2:	690b      	ldr	r3, [r1, #16]
 80107b4:	4605      	mov	r5, r0
 80107b6:	460c      	mov	r4, r1
 80107b8:	b913      	cbnz	r3, 80107c0 <_fflush_r+0x10>
 80107ba:	2500      	movs	r5, #0
 80107bc:	4628      	mov	r0, r5
 80107be:	bd38      	pop	{r3, r4, r5, pc}
 80107c0:	b118      	cbz	r0, 80107ca <_fflush_r+0x1a>
 80107c2:	6a03      	ldr	r3, [r0, #32]
 80107c4:	b90b      	cbnz	r3, 80107ca <_fflush_r+0x1a>
 80107c6:	f7fe f961 	bl	800ea8c <__sinit>
 80107ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d0f3      	beq.n	80107ba <_fflush_r+0xa>
 80107d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80107d4:	07d0      	lsls	r0, r2, #31
 80107d6:	d404      	bmi.n	80107e2 <_fflush_r+0x32>
 80107d8:	0599      	lsls	r1, r3, #22
 80107da:	d402      	bmi.n	80107e2 <_fflush_r+0x32>
 80107dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107de:	f7fe fb50 	bl	800ee82 <__retarget_lock_acquire_recursive>
 80107e2:	4628      	mov	r0, r5
 80107e4:	4621      	mov	r1, r4
 80107e6:	f7ff ff5f 	bl	80106a8 <__sflush_r>
 80107ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80107ec:	07da      	lsls	r2, r3, #31
 80107ee:	4605      	mov	r5, r0
 80107f0:	d4e4      	bmi.n	80107bc <_fflush_r+0xc>
 80107f2:	89a3      	ldrh	r3, [r4, #12]
 80107f4:	059b      	lsls	r3, r3, #22
 80107f6:	d4e1      	bmi.n	80107bc <_fflush_r+0xc>
 80107f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107fa:	f7fe fb43 	bl	800ee84 <__retarget_lock_release_recursive>
 80107fe:	e7dd      	b.n	80107bc <_fflush_r+0xc>

08010800 <__swhatbuf_r>:
 8010800:	b570      	push	{r4, r5, r6, lr}
 8010802:	460c      	mov	r4, r1
 8010804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010808:	2900      	cmp	r1, #0
 801080a:	b096      	sub	sp, #88	@ 0x58
 801080c:	4615      	mov	r5, r2
 801080e:	461e      	mov	r6, r3
 8010810:	da0d      	bge.n	801082e <__swhatbuf_r+0x2e>
 8010812:	89a3      	ldrh	r3, [r4, #12]
 8010814:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010818:	f04f 0100 	mov.w	r1, #0
 801081c:	bf14      	ite	ne
 801081e:	2340      	movne	r3, #64	@ 0x40
 8010820:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010824:	2000      	movs	r0, #0
 8010826:	6031      	str	r1, [r6, #0]
 8010828:	602b      	str	r3, [r5, #0]
 801082a:	b016      	add	sp, #88	@ 0x58
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	466a      	mov	r2, sp
 8010830:	f000 f848 	bl	80108c4 <_fstat_r>
 8010834:	2800      	cmp	r0, #0
 8010836:	dbec      	blt.n	8010812 <__swhatbuf_r+0x12>
 8010838:	9901      	ldr	r1, [sp, #4]
 801083a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801083e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010842:	4259      	negs	r1, r3
 8010844:	4159      	adcs	r1, r3
 8010846:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801084a:	e7eb      	b.n	8010824 <__swhatbuf_r+0x24>

0801084c <__smakebuf_r>:
 801084c:	898b      	ldrh	r3, [r1, #12]
 801084e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010850:	079d      	lsls	r5, r3, #30
 8010852:	4606      	mov	r6, r0
 8010854:	460c      	mov	r4, r1
 8010856:	d507      	bpl.n	8010868 <__smakebuf_r+0x1c>
 8010858:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801085c:	6023      	str	r3, [r4, #0]
 801085e:	6123      	str	r3, [r4, #16]
 8010860:	2301      	movs	r3, #1
 8010862:	6163      	str	r3, [r4, #20]
 8010864:	b003      	add	sp, #12
 8010866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010868:	ab01      	add	r3, sp, #4
 801086a:	466a      	mov	r2, sp
 801086c:	f7ff ffc8 	bl	8010800 <__swhatbuf_r>
 8010870:	9f00      	ldr	r7, [sp, #0]
 8010872:	4605      	mov	r5, r0
 8010874:	4639      	mov	r1, r7
 8010876:	4630      	mov	r0, r6
 8010878:	f7ff f9c6 	bl	800fc08 <_malloc_r>
 801087c:	b948      	cbnz	r0, 8010892 <__smakebuf_r+0x46>
 801087e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010882:	059a      	lsls	r2, r3, #22
 8010884:	d4ee      	bmi.n	8010864 <__smakebuf_r+0x18>
 8010886:	f023 0303 	bic.w	r3, r3, #3
 801088a:	f043 0302 	orr.w	r3, r3, #2
 801088e:	81a3      	strh	r3, [r4, #12]
 8010890:	e7e2      	b.n	8010858 <__smakebuf_r+0xc>
 8010892:	89a3      	ldrh	r3, [r4, #12]
 8010894:	6020      	str	r0, [r4, #0]
 8010896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801089a:	81a3      	strh	r3, [r4, #12]
 801089c:	9b01      	ldr	r3, [sp, #4]
 801089e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80108a2:	b15b      	cbz	r3, 80108bc <__smakebuf_r+0x70>
 80108a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108a8:	4630      	mov	r0, r6
 80108aa:	f000 f81d 	bl	80108e8 <_isatty_r>
 80108ae:	b128      	cbz	r0, 80108bc <__smakebuf_r+0x70>
 80108b0:	89a3      	ldrh	r3, [r4, #12]
 80108b2:	f023 0303 	bic.w	r3, r3, #3
 80108b6:	f043 0301 	orr.w	r3, r3, #1
 80108ba:	81a3      	strh	r3, [r4, #12]
 80108bc:	89a3      	ldrh	r3, [r4, #12]
 80108be:	431d      	orrs	r5, r3
 80108c0:	81a5      	strh	r5, [r4, #12]
 80108c2:	e7cf      	b.n	8010864 <__smakebuf_r+0x18>

080108c4 <_fstat_r>:
 80108c4:	b538      	push	{r3, r4, r5, lr}
 80108c6:	4d07      	ldr	r5, [pc, #28]	@ (80108e4 <_fstat_r+0x20>)
 80108c8:	2300      	movs	r3, #0
 80108ca:	4604      	mov	r4, r0
 80108cc:	4608      	mov	r0, r1
 80108ce:	4611      	mov	r1, r2
 80108d0:	602b      	str	r3, [r5, #0]
 80108d2:	f7f1 fa15 	bl	8001d00 <_fstat>
 80108d6:	1c43      	adds	r3, r0, #1
 80108d8:	d102      	bne.n	80108e0 <_fstat_r+0x1c>
 80108da:	682b      	ldr	r3, [r5, #0]
 80108dc:	b103      	cbz	r3, 80108e0 <_fstat_r+0x1c>
 80108de:	6023      	str	r3, [r4, #0]
 80108e0:	bd38      	pop	{r3, r4, r5, pc}
 80108e2:	bf00      	nop
 80108e4:	20005764 	.word	0x20005764

080108e8 <_isatty_r>:
 80108e8:	b538      	push	{r3, r4, r5, lr}
 80108ea:	4d06      	ldr	r5, [pc, #24]	@ (8010904 <_isatty_r+0x1c>)
 80108ec:	2300      	movs	r3, #0
 80108ee:	4604      	mov	r4, r0
 80108f0:	4608      	mov	r0, r1
 80108f2:	602b      	str	r3, [r5, #0]
 80108f4:	f7f1 fa14 	bl	8001d20 <_isatty>
 80108f8:	1c43      	adds	r3, r0, #1
 80108fa:	d102      	bne.n	8010902 <_isatty_r+0x1a>
 80108fc:	682b      	ldr	r3, [r5, #0]
 80108fe:	b103      	cbz	r3, 8010902 <_isatty_r+0x1a>
 8010900:	6023      	str	r3, [r4, #0]
 8010902:	bd38      	pop	{r3, r4, r5, pc}
 8010904:	20005764 	.word	0x20005764

08010908 <_sbrk_r>:
 8010908:	b538      	push	{r3, r4, r5, lr}
 801090a:	4d06      	ldr	r5, [pc, #24]	@ (8010924 <_sbrk_r+0x1c>)
 801090c:	2300      	movs	r3, #0
 801090e:	4604      	mov	r4, r0
 8010910:	4608      	mov	r0, r1
 8010912:	602b      	str	r3, [r5, #0]
 8010914:	f7f1 fa1c 	bl	8001d50 <_sbrk>
 8010918:	1c43      	adds	r3, r0, #1
 801091a:	d102      	bne.n	8010922 <_sbrk_r+0x1a>
 801091c:	682b      	ldr	r3, [r5, #0]
 801091e:	b103      	cbz	r3, 8010922 <_sbrk_r+0x1a>
 8010920:	6023      	str	r3, [r4, #0]
 8010922:	bd38      	pop	{r3, r4, r5, pc}
 8010924:	20005764 	.word	0x20005764

08010928 <memcpy>:
 8010928:	440a      	add	r2, r1
 801092a:	4291      	cmp	r1, r2
 801092c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010930:	d100      	bne.n	8010934 <memcpy+0xc>
 8010932:	4770      	bx	lr
 8010934:	b510      	push	{r4, lr}
 8010936:	f811 4b01 	ldrb.w	r4, [r1], #1
 801093a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801093e:	4291      	cmp	r1, r2
 8010940:	d1f9      	bne.n	8010936 <memcpy+0xe>
 8010942:	bd10      	pop	{r4, pc}

08010944 <__assert_func>:
 8010944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010946:	4614      	mov	r4, r2
 8010948:	461a      	mov	r2, r3
 801094a:	4b09      	ldr	r3, [pc, #36]	@ (8010970 <__assert_func+0x2c>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	4605      	mov	r5, r0
 8010950:	68d8      	ldr	r0, [r3, #12]
 8010952:	b954      	cbnz	r4, 801096a <__assert_func+0x26>
 8010954:	4b07      	ldr	r3, [pc, #28]	@ (8010974 <__assert_func+0x30>)
 8010956:	461c      	mov	r4, r3
 8010958:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801095c:	9100      	str	r1, [sp, #0]
 801095e:	462b      	mov	r3, r5
 8010960:	4905      	ldr	r1, [pc, #20]	@ (8010978 <__assert_func+0x34>)
 8010962:	f000 f841 	bl	80109e8 <fiprintf>
 8010966:	f000 f851 	bl	8010a0c <abort>
 801096a:	4b04      	ldr	r3, [pc, #16]	@ (801097c <__assert_func+0x38>)
 801096c:	e7f4      	b.n	8010958 <__assert_func+0x14>
 801096e:	bf00      	nop
 8010970:	20000058 	.word	0x20000058
 8010974:	080111e6 	.word	0x080111e6
 8010978:	080111b8 	.word	0x080111b8
 801097c:	080111ab 	.word	0x080111ab

08010980 <_calloc_r>:
 8010980:	b570      	push	{r4, r5, r6, lr}
 8010982:	fba1 5402 	umull	r5, r4, r1, r2
 8010986:	b93c      	cbnz	r4, 8010998 <_calloc_r+0x18>
 8010988:	4629      	mov	r1, r5
 801098a:	f7ff f93d 	bl	800fc08 <_malloc_r>
 801098e:	4606      	mov	r6, r0
 8010990:	b928      	cbnz	r0, 801099e <_calloc_r+0x1e>
 8010992:	2600      	movs	r6, #0
 8010994:	4630      	mov	r0, r6
 8010996:	bd70      	pop	{r4, r5, r6, pc}
 8010998:	220c      	movs	r2, #12
 801099a:	6002      	str	r2, [r0, #0]
 801099c:	e7f9      	b.n	8010992 <_calloc_r+0x12>
 801099e:	462a      	mov	r2, r5
 80109a0:	4621      	mov	r1, r4
 80109a2:	f7fe f9f1 	bl	800ed88 <memset>
 80109a6:	e7f5      	b.n	8010994 <_calloc_r+0x14>

080109a8 <__ascii_mbtowc>:
 80109a8:	b082      	sub	sp, #8
 80109aa:	b901      	cbnz	r1, 80109ae <__ascii_mbtowc+0x6>
 80109ac:	a901      	add	r1, sp, #4
 80109ae:	b142      	cbz	r2, 80109c2 <__ascii_mbtowc+0x1a>
 80109b0:	b14b      	cbz	r3, 80109c6 <__ascii_mbtowc+0x1e>
 80109b2:	7813      	ldrb	r3, [r2, #0]
 80109b4:	600b      	str	r3, [r1, #0]
 80109b6:	7812      	ldrb	r2, [r2, #0]
 80109b8:	1e10      	subs	r0, r2, #0
 80109ba:	bf18      	it	ne
 80109bc:	2001      	movne	r0, #1
 80109be:	b002      	add	sp, #8
 80109c0:	4770      	bx	lr
 80109c2:	4610      	mov	r0, r2
 80109c4:	e7fb      	b.n	80109be <__ascii_mbtowc+0x16>
 80109c6:	f06f 0001 	mvn.w	r0, #1
 80109ca:	e7f8      	b.n	80109be <__ascii_mbtowc+0x16>

080109cc <__ascii_wctomb>:
 80109cc:	4603      	mov	r3, r0
 80109ce:	4608      	mov	r0, r1
 80109d0:	b141      	cbz	r1, 80109e4 <__ascii_wctomb+0x18>
 80109d2:	2aff      	cmp	r2, #255	@ 0xff
 80109d4:	d904      	bls.n	80109e0 <__ascii_wctomb+0x14>
 80109d6:	228a      	movs	r2, #138	@ 0x8a
 80109d8:	601a      	str	r2, [r3, #0]
 80109da:	f04f 30ff 	mov.w	r0, #4294967295
 80109de:	4770      	bx	lr
 80109e0:	700a      	strb	r2, [r1, #0]
 80109e2:	2001      	movs	r0, #1
 80109e4:	4770      	bx	lr
	...

080109e8 <fiprintf>:
 80109e8:	b40e      	push	{r1, r2, r3}
 80109ea:	b503      	push	{r0, r1, lr}
 80109ec:	4601      	mov	r1, r0
 80109ee:	ab03      	add	r3, sp, #12
 80109f0:	4805      	ldr	r0, [pc, #20]	@ (8010a08 <fiprintf+0x20>)
 80109f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80109f6:	6800      	ldr	r0, [r0, #0]
 80109f8:	9301      	str	r3, [sp, #4]
 80109fa:	f7ff fd3d 	bl	8010478 <_vfiprintf_r>
 80109fe:	b002      	add	sp, #8
 8010a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a04:	b003      	add	sp, #12
 8010a06:	4770      	bx	lr
 8010a08:	20000058 	.word	0x20000058

08010a0c <abort>:
 8010a0c:	b508      	push	{r3, lr}
 8010a0e:	2006      	movs	r0, #6
 8010a10:	f000 f82c 	bl	8010a6c <raise>
 8010a14:	2001      	movs	r0, #1
 8010a16:	f7f1 f923 	bl	8001c60 <_exit>

08010a1a <_raise_r>:
 8010a1a:	291f      	cmp	r1, #31
 8010a1c:	b538      	push	{r3, r4, r5, lr}
 8010a1e:	4605      	mov	r5, r0
 8010a20:	460c      	mov	r4, r1
 8010a22:	d904      	bls.n	8010a2e <_raise_r+0x14>
 8010a24:	2316      	movs	r3, #22
 8010a26:	6003      	str	r3, [r0, #0]
 8010a28:	f04f 30ff 	mov.w	r0, #4294967295
 8010a2c:	bd38      	pop	{r3, r4, r5, pc}
 8010a2e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010a30:	b112      	cbz	r2, 8010a38 <_raise_r+0x1e>
 8010a32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010a36:	b94b      	cbnz	r3, 8010a4c <_raise_r+0x32>
 8010a38:	4628      	mov	r0, r5
 8010a3a:	f000 f831 	bl	8010aa0 <_getpid_r>
 8010a3e:	4622      	mov	r2, r4
 8010a40:	4601      	mov	r1, r0
 8010a42:	4628      	mov	r0, r5
 8010a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a48:	f000 b818 	b.w	8010a7c <_kill_r>
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	d00a      	beq.n	8010a66 <_raise_r+0x4c>
 8010a50:	1c59      	adds	r1, r3, #1
 8010a52:	d103      	bne.n	8010a5c <_raise_r+0x42>
 8010a54:	2316      	movs	r3, #22
 8010a56:	6003      	str	r3, [r0, #0]
 8010a58:	2001      	movs	r0, #1
 8010a5a:	e7e7      	b.n	8010a2c <_raise_r+0x12>
 8010a5c:	2100      	movs	r1, #0
 8010a5e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010a62:	4620      	mov	r0, r4
 8010a64:	4798      	blx	r3
 8010a66:	2000      	movs	r0, #0
 8010a68:	e7e0      	b.n	8010a2c <_raise_r+0x12>
	...

08010a6c <raise>:
 8010a6c:	4b02      	ldr	r3, [pc, #8]	@ (8010a78 <raise+0xc>)
 8010a6e:	4601      	mov	r1, r0
 8010a70:	6818      	ldr	r0, [r3, #0]
 8010a72:	f7ff bfd2 	b.w	8010a1a <_raise_r>
 8010a76:	bf00      	nop
 8010a78:	20000058 	.word	0x20000058

08010a7c <_kill_r>:
 8010a7c:	b538      	push	{r3, r4, r5, lr}
 8010a7e:	4d07      	ldr	r5, [pc, #28]	@ (8010a9c <_kill_r+0x20>)
 8010a80:	2300      	movs	r3, #0
 8010a82:	4604      	mov	r4, r0
 8010a84:	4608      	mov	r0, r1
 8010a86:	4611      	mov	r1, r2
 8010a88:	602b      	str	r3, [r5, #0]
 8010a8a:	f7f1 f8d9 	bl	8001c40 <_kill>
 8010a8e:	1c43      	adds	r3, r0, #1
 8010a90:	d102      	bne.n	8010a98 <_kill_r+0x1c>
 8010a92:	682b      	ldr	r3, [r5, #0]
 8010a94:	b103      	cbz	r3, 8010a98 <_kill_r+0x1c>
 8010a96:	6023      	str	r3, [r4, #0]
 8010a98:	bd38      	pop	{r3, r4, r5, pc}
 8010a9a:	bf00      	nop
 8010a9c:	20005764 	.word	0x20005764

08010aa0 <_getpid_r>:
 8010aa0:	f7f1 b8c6 	b.w	8001c30 <_getpid>

08010aa4 <_init>:
 8010aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aa6:	bf00      	nop
 8010aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010aaa:	bc08      	pop	{r3}
 8010aac:	469e      	mov	lr, r3
 8010aae:	4770      	bx	lr

08010ab0 <_fini>:
 8010ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ab2:	bf00      	nop
 8010ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ab6:	bc08      	pop	{r3}
 8010ab8:	469e      	mov	lr, r3
 8010aba:	4770      	bx	lr
