
Microphone_wav_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014484  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000aa388  08014660  08014660  00015660  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080be9e8  080be9e8  000c09d4  2**0
                  CONTENTS
  4 .ARM          00000008  080be9e8  080be9e8  000bf9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080be9f0  080be9f0  000c09d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080be9f0  080be9f0  000bf9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080be9f4  080be9f4  000bf9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000009d4  20000000  080be9f8  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000562c  200009d4  080bf3cc  000c09d4  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20006000  080bf3cc  000c1000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000c09d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000208fd  00000000  00000000  000c0a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051ba  00000000  00000000  000e1301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b0  00000000  00000000  000e64c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000138b  00000000  00000000  000e7e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dc83  00000000  00000000  000e91fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000259f4  00000000  00000000  00116e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104d2f  00000000  00000000  0013c872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  002415a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007784  00000000  00000000  00241628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00248dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009d4 	.word	0x200009d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801463c 	.word	0x0801463c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009d8 	.word	0x200009d8
 800020c:	0801463c 	.word	0x0801463c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000edc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <MX_CRC_Init+0x3c>)
 8000ede:	4a0e      	ldr	r2, [pc, #56]	@ (8000f18 <MX_CRC_Init+0x40>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <MX_CRC_Init+0x3c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <MX_CRC_Init+0x3c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <MX_CRC_Init+0x3c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <MX_CRC_Init+0x3c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <MX_CRC_Init+0x3c>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <MX_CRC_Init+0x3c>)
 8000f02:	f003 fc47 	bl	8004794 <HAL_CRC_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000f0c:	f000 fd7c 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200009f0 	.word	0x200009f0
 8000f18:	40023000 	.word	0x40023000

08000f1c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <HAL_CRC_MspInit+0x38>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10b      	bne.n	8000f46 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <HAL_CRC_MspInit+0x3c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a09      	ldr	r2, [pc, #36]	@ (8000f58 <HAL_CRC_MspInit+0x3c>)
 8000f34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <HAL_CRC_MspInit+0x3c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023000 	.word	0x40023000
 8000f58:	40023800 	.word	0x40023800

08000f5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <MX_DMA_Init+0x58>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a13      	ldr	r2, [pc, #76]	@ (8000fb4 <MX_DMA_Init+0x58>)
 8000f68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <MX_DMA_Init+0x58>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2039      	movs	r0, #57	@ 0x39
 8000f80:	f003 fbd1 	bl	8004726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f84:	2039      	movs	r0, #57	@ 0x39
 8000f86:	f003 fbea 	bl	800475e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	203b      	movs	r0, #59	@ 0x3b
 8000f90:	f003 fbc9 	bl	8004726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f94:	203b      	movs	r0, #59	@ 0x3b
 8000f96:	f003 fbe2 	bl	800475e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 2, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	2045      	movs	r0, #69	@ 0x45
 8000fa0:	f003 fbc1 	bl	8004726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000fa4:	2045      	movs	r0, #69	@ 0x45
 8000fa6:	f003 fbda 	bl	800475e <HAL_NVIC_EnableIRQ>

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b090      	sub	sp, #64	@ 0x40
 8000fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fce:	4ba6      	ldr	r3, [pc, #664]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4aa5      	ldr	r2, [pc, #660]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8000fd4:	f043 0310 	orr.w	r3, r3, #16
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4ba3      	ldr	r3, [pc, #652]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe6:	4ba0      	ldr	r3, [pc, #640]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a9f      	ldr	r2, [pc, #636]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8000fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b9d      	ldr	r3, [pc, #628]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b9a      	ldr	r3, [pc, #616]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a99      	ldr	r2, [pc, #612]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b97      	ldr	r3, [pc, #604]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	623b      	str	r3, [r7, #32]
 8001014:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	4b94      	ldr	r3, [pc, #592]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a93      	ldr	r2, [pc, #588]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b91      	ldr	r3, [pc, #580]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	4b8e      	ldr	r3, [pc, #568]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a8d      	ldr	r2, [pc, #564]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b8b      	ldr	r3, [pc, #556]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b88      	ldr	r3, [pc, #544]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a87      	ldr	r2, [pc, #540]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b85      	ldr	r3, [pc, #532]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800105e:	4b82      	ldr	r3, [pc, #520]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a81      	ldr	r2, [pc, #516]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001064:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b7f      	ldr	r3, [pc, #508]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001076:	4b7c      	ldr	r3, [pc, #496]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a7b      	ldr	r2, [pc, #492]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 800107c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b79      	ldr	r3, [pc, #484]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800108e:	4b76      	ldr	r3, [pc, #472]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a75      	ldr	r2, [pc, #468]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001094:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b73      	ldr	r3, [pc, #460]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a6:	4b70      	ldr	r3, [pc, #448]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	4b6a      	ldr	r3, [pc, #424]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a69      	ldr	r2, [pc, #420]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b67      	ldr	r3, [pc, #412]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2102      	movs	r1, #2
 80010da:	4864      	ldr	r0, [pc, #400]	@ (800126c <MX_GPIO_Init+0x2b4>)
 80010dc:	f004 fb90 	bl	8005800 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE8 PE9 PE11 PE14
                           PE7 PE10 PE12 PE15
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 80010e0:	f64f 738f 	movw	r3, #65423	@ 0xff8f
 80010e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e6:	2303      	movs	r3, #3
 80010e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f2:	4619      	mov	r1, r3
 80010f4:	485e      	ldr	r0, [pc, #376]	@ (8001270 <MX_GPIO_Init+0x2b8>)
 80010f6:	f004 f8b3 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 80010fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001100:	2303      	movs	r3, #3
 8001102:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001108:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800110c:	4619      	mov	r1, r3
 800110e:	4859      	ldr	r0, [pc, #356]	@ (8001274 <MX_GPIO_Init+0x2bc>)
 8001110:	f004 f8a6 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001114:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111a:	2303      	movs	r3, #3
 800111c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001122:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001126:	4619      	mov	r1, r3
 8001128:	4853      	ldr	r0, [pc, #332]	@ (8001278 <MX_GPIO_Init+0x2c0>)
 800112a:	f004 f899 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD15
                           PD10 PD14 PD9 PD8
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 800112e:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8001132:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001134:	2303      	movs	r3, #3
 8001136:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800113c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001140:	4619      	mov	r1, r3
 8001142:	484e      	ldr	r0, [pc, #312]	@ (800127c <MX_GPIO_Init+0x2c4>)
 8001144:	f004 f88c 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 8001148:	f649 53ff 	movw	r3, #40447	@ 0x9dff
 800114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114e:	2303      	movs	r3, #3
 8001150:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800115a:	4619      	mov	r1, r3
 800115c:	4848      	ldr	r0, [pc, #288]	@ (8001280 <MX_GPIO_Init+0x2c8>)
 800115e:	f004 f87f 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8001162:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001168:	2303      	movs	r3, #3
 800116a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001170:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001174:	4619      	mov	r1, r3
 8001176:	4843      	ldr	r0, [pc, #268]	@ (8001284 <MX_GPIO_Init+0x2cc>)
 8001178:	f004 f872 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC9 PC7 PC6 PC3
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 800117c:	f64c 63ff 	movw	r3, #52991	@ 0xceff
 8001180:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800118e:	4619      	mov	r1, r3
 8001190:	483d      	ldr	r0, [pc, #244]	@ (8001288 <MX_GPIO_Init+0x2d0>)
 8001192:	f004 f865 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI12 PI9 PI0 PI13
                           PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001196:	f24f 73fd 	movw	r3, #63485	@ 0xf7fd
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_13
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119c:	2303      	movs	r3, #3
 800119e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a8:	4619      	mov	r1, r3
 80011aa:	4830      	ldr	r0, [pc, #192]	@ (800126c <MX_GPIO_Init+0x2b4>)
 80011ac:	f004 f858 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80011b0:	23ff      	movs	r3, #255	@ 0xff
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b4:	2303      	movs	r3, #3
 80011b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80011bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c0:	4619      	mov	r1, r3
 80011c2:	4832      	ldr	r0, [pc, #200]	@ (800128c <MX_GPIO_Init+0x2d4>)
 80011c4:	f004 f84c 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80011c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ce:	2300      	movs	r3, #0
 80011d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011da:	4619      	mov	r1, r3
 80011dc:	482a      	ldr	r0, [pc, #168]	@ (8001288 <MX_GPIO_Init+0x2d0>)
 80011de:	f004 f83f 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e8:	2303      	movs	r3, #3
 80011ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011f4:	4619      	mov	r1, r3
 80011f6:	4826      	ldr	r0, [pc, #152]	@ (8001290 <MX_GPIO_Init+0x2d8>)
 80011f8:	f004 f832 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 80011fc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8001200:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001202:	2303      	movs	r3, #3
 8001204:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800120a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800120e:	4619      	mov	r1, r3
 8001210:	4820      	ldr	r0, [pc, #128]	@ (8001294 <MX_GPIO_Init+0x2dc>)
 8001212:	f004 f825 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001216:	2302      	movs	r3, #2
 8001218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800122a:	4619      	mov	r1, r3
 800122c:	480f      	ldr	r0, [pc, #60]	@ (800126c <MX_GPIO_Init+0x2b4>)
 800122e:	f004 f817 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001232:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001238:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800123c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001246:	4619      	mov	r1, r3
 8001248:	4808      	ldr	r0, [pc, #32]	@ (800126c <MX_GPIO_Init+0x2b4>)
 800124a:	f004 f809 	bl	8005260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	2028      	movs	r0, #40	@ 0x28
 8001254:	f003 fa67 	bl	8004726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001258:	2028      	movs	r0, #40	@ 0x28
 800125a:	f003 fa80 	bl	800475e <HAL_NVIC_EnableIRQ>

}
 800125e:	bf00      	nop
 8001260:	3740      	adds	r7, #64	@ 0x40
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40022000 	.word	0x40022000
 8001270:	40021000 	.word	0x40021000
 8001274:	40021800 	.word	0x40021800
 8001278:	40020400 	.word	0x40020400
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40020000 	.word	0x40020000
 8001284:	40022400 	.word	0x40022400
 8001288:	40020800 	.word	0x40020800
 800128c:	40022800 	.word	0x40022800
 8001290:	40021400 	.word	0x40021400
 8001294:	40021c00 	.word	0x40021c00

08001298 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800129c:	f3bf 8f4f 	dsb	sy
}
 80012a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012a2:	f3bf 8f6f 	isb	sy
}
 80012a6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012a8:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <SCB_EnableICache+0x48>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b0:	f3bf 8f4f 	dsb	sy
}
 80012b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012b6:	f3bf 8f6f 	isb	sy
}
 80012ba:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <SCB_EnableICache+0x48>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	4a07      	ldr	r2, [pc, #28]	@ (80012e0 <SCB_EnableICache+0x48>)
 80012c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012c8:	f3bf 8f4f 	dsb	sy
}
 80012cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ce:	f3bf 8f6f 	isb	sy
}
 80012d2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <SCB_DisableICache>:
/**
  \brief   Disable I-Cache
  \details Turns off I-Cache
  */
__STATIC_INLINE void SCB_DisableICache (void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80012e8:	f3bf 8f4f 	dsb	sy
}
 80012ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ee:	f3bf 8f6f 	isb	sy
}
 80012f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <SCB_DisableICache+0x3c>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	4a09      	ldr	r2, [pc, #36]	@ (8001320 <SCB_DisableICache+0x3c>)
 80012fa:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80012fe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001300:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <SCB_DisableICache+0x3c>)
 8001302:	2200      	movs	r2, #0
 8001304:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001308:	f3bf 8f4f 	dsb	sy
}
 800130c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800130e:	f3bf 8f6f 	isb	sy
}
 8001312:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800132a:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <SCB_EnableDCache+0x84>)
 800132c:	2200      	movs	r2, #0
 800132e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001332:	f3bf 8f4f 	dsb	sy
}
 8001336:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <SCB_EnableDCache+0x84>)
 800133a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800133e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	0b5b      	lsrs	r3, r3, #13
 8001344:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001348:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	08db      	lsrs	r3, r3, #3
 800134e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001352:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	015a      	lsls	r2, r3, #5
 8001358:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800135c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001362:	4911      	ldr	r1, [pc, #68]	@ (80013a8 <SCB_EnableDCache+0x84>)
 8001364:	4313      	orrs	r3, r2
 8001366:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1e5a      	subs	r2, r3, #1
 800136e:	60ba      	str	r2, [r7, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1ef      	bne.n	8001354 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	1e5a      	subs	r2, r3, #1
 8001378:	60fa      	str	r2, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1e5      	bne.n	800134a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800137e:	f3bf 8f4f 	dsb	sy
}
 8001382:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001384:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <SCB_EnableDCache+0x84>)
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	4a07      	ldr	r2, [pc, #28]	@ (80013a8 <SCB_EnableDCache+0x84>)
 800138a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800138e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001390:	f3bf 8f4f 	dsb	sy
}
 8001394:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001396:	f3bf 8f6f 	isb	sy
}
 800139a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <SCB_DisableDCache>:
/**
  \brief   Disable D-Cache
  \details Turns off D-Cache
  */
__STATIC_INLINE void SCB_DisableDCache (void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80013b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <SCB_DisableDCache+0x84>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80013ba:	f3bf 8f4f 	dsb	sy
}
 80013be:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 80013c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <SCB_DisableDCache+0x84>)
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001430 <SCB_DisableDCache+0x84>)
 80013c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013cc:	f3bf 8f4f 	dsb	sy
}
 80013d0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80013d2:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <SCB_DisableDCache+0x84>)
 80013d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013d8:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	0b5b      	lsrs	r3, r3, #13
 80013de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013e2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	08db      	lsrs	r3, r3, #3
 80013e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013ec:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	015a      	lsls	r2, r3, #5
 80013f2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80013f6:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80013fc:	490c      	ldr	r1, [pc, #48]	@ (8001430 <SCB_DisableDCache+0x84>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	1e5a      	subs	r2, r3, #1
 8001408:	60ba      	str	r2, [r7, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1ef      	bne.n	80013ee <SCB_DisableDCache+0x42>
    } while(sets-- != 0U);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1e5a      	subs	r2, r3, #1
 8001412:	60fa      	str	r2, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e5      	bne.n	80013e4 <SCB_DisableDCache+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8001418:	f3bf 8f4f 	dsb	sy
}
 800141c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800141e:	f3bf 8f6f 	isb	sy
}
 8001422:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <AI_Init.0>:
	ai_buffer ai_output[AI_NETWORK_OUT_NUM];

	/**
	 * @brief Initialize the AI model
	 */
	void AI_Init(void) {
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b093      	sub	sp, #76	@ 0x4c
 8001438:	af00      	add	r7, sp, #0
 800143a:	4664      	mov	r4, ip
 800143c:	f8c7 c004 	str.w	ip, [r7, #4]
	    ai_error ai_err;

	    // Set working memory and get weights/biases from the model
	    ai_network_params ai_params = {
	        AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8001440:	f00d fb18 	bl	800ea74 <ai_network_data_weights_get>
 8001444:	4602      	mov	r2, r0
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f00d fadb 	bl	800ea08 <ai_network_data_weights_buffer_get>
	        AI_NETWORK_DATA_ACTIVATIONS(activations)
 8001452:	f64f 235c 	movw	r3, #64092	@ 0xfa5c
 8001456:	4423      	add	r3, r4
 8001458:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f00d fa9c 	bl	800e99c <ai_network_data_activations_buffer_get>
	    };

	    // Create and initialize the network
	    ai_err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8001464:	f64f 2358 	movw	r3, #64088	@ 0xfa58
 8001468:	4423      	add	r3, r4
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f00d fa0f 	bl	800e890 <ai_network_create>
 8001472:	4603      	mov	r3, r0
 8001474:	647b      	str	r3, [r7, #68]	@ 0x44
	    if (ai_err.type != AI_ERROR_NONE) {
 8001476:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <AI_Init.0+0x62>
	        printf("AI network creation failed: type=%d, code=%d\r\n", ai_err.type, ai_err.code);
 800147e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001482:	4619      	mov	r1, r3
 8001484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001486:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800148a:	461a      	mov	r2, r3
 800148c:	4823      	ldr	r0, [pc, #140]	@ (800151c <AI_Init.0+0xe8>)
 800148e:	f011 f9b3 	bl	80127f8 <iprintf>
	        Error_Handler();
 8001492:	f000 fab9 	bl	8001a08 <Error_Handler>
	    }

	    if (!ai_network_init(network, &ai_params)) {
 8001496:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 800149a:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	@ 0xa58
 800149e:	f107 020c 	add.w	r2, r7, #12
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00d fa3d 	bl	800e924 <ai_network_init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	f083 0301 	eor.w	r3, r3, #1
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d014      	beq.n	80014e0 <AI_Init.0+0xac>
	        ai_err = ai_network_get_error(network);
 80014b6:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 80014ba:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	@ 0xa58
 80014be:	4618      	mov	r0, r3
 80014c0:	f00d f9da 	bl	800e878 <ai_network_get_error>
 80014c4:	4603      	mov	r3, r0
 80014c6:	647b      	str	r3, [r7, #68]	@ 0x44
	        printf("AI network initialization failed: type=%d, code=%d\r\n", ai_err.type, ai_err.code);
 80014c8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80014cc:	4619      	mov	r1, r3
 80014ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80014d4:	461a      	mov	r2, r3
 80014d6:	4812      	ldr	r0, [pc, #72]	@ (8001520 <AI_Init.0+0xec>)
 80014d8:	f011 f98e 	bl	80127f8 <iprintf>
	        Error_Handler();
 80014dc:	f000 fa94 	bl	8001a08 <Error_Handler>
	    }

	    // Retrieve input and output buffer structures dynamically
	    ai_network_inputs_get(network, ai_input);
 80014e0:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 80014e4:	f8d3 2a58 	ldr.w	r2, [r3, #2648]	@ 0xa58
 80014e8:	f64f 233c 	movw	r3, #64060	@ 0xfa3c
 80014ec:	4423      	add	r3, r4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4610      	mov	r0, r2
 80014f2:	f00d f9e3 	bl	800e8bc <ai_network_inputs_get>
	    ai_network_outputs_get(network, ai_output);
 80014f6:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 80014fa:	f8d3 2a58 	ldr.w	r2, [r3, #2648]	@ 0xa58
 80014fe:	f64f 2320 	movw	r3, #64032	@ 0xfa20
 8001502:	4423      	add	r3, r4
 8001504:	4619      	mov	r1, r3
 8001506:	4610      	mov	r0, r2
 8001508:	f00d f9f2 	bl	800e8f0 <ai_network_outputs_get>

	    printf("AI model initialized successfully.\r\n");
 800150c:	4805      	ldr	r0, [pc, #20]	@ (8001524 <AI_Init.0+0xf0>)
 800150e:	f011 f9db 	bl	80128c8 <puts>
	}
 8001512:	bf00      	nop
 8001514:	374c      	adds	r7, #76	@ 0x4c
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}
 800151a:	bf00      	nop
 800151c:	08014660 	.word	0x08014660
 8001520:	08014690 	.word	0x08014690
 8001524:	080146c8 	.word	0x080146c8

08001528 <main>:
{
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	f5ad 3d00 	sub.w	sp, sp, #131072	@ 0x20000
 800152e:	b0b4      	sub	sp, #208	@ 0xd0
 8001530:	af00      	add	r7, sp, #0
int main(void)
 8001532:	4b44      	ldr	r3, [pc, #272]	@ (8001644 <main+0x11c>)
 8001534:	443b      	add	r3, r7
 8001536:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800153a:	f502 32f8 	add.w	r2, r2, #126976	@ 0x1f000
 800153e:	f8c2 3ff4 	str.w	r3, [r2, #4084]	@ 0xff4
	int buf_len = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	4a40      	ldr	r2, [pc, #256]	@ (8001648 <main+0x120>)
 8001546:	443a      	add	r2, r7
 8001548:	6013      	str	r3, [r2, #0]
	const char* activities[AI_NETWORK_OUT_1_SIZE] = {
 800154a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800154e:	4a3f      	ldr	r2, [pc, #252]	@ (800164c <main+0x124>)
 8001550:	f1a3 0498 	sub.w	r4, r3, #152	@ 0x98
 8001554:	4615      	mov	r5, r2
 8001556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800155a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800155e:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_handle network = AI_HANDLE_NULL;
 8001562:	2300      	movs	r3, #0
 8001564:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8001568:	f502 4270 	add.w	r2, r2, #61440	@ 0xf000
 800156c:	f8c2 39c0 	str.w	r3, [r2, #2496]	@ 0x9c0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001570:	f7ff fe92 	bl	8001298 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001574:	f7ff fed6 	bl	8001324 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001578:	f002 ff78 	bl	800446c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157c:	f000 f87c 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001580:	f7ff fd1a 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001584:	f7ff fcea 	bl	8000f5c <MX_DMA_Init>
  MX_SAI1_Init();
 8001588:	f000 fa44 	bl	8001a14 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 800158c:	f000 fdfc 	bl	8002188 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001590:	f009 fce4 	bl	800af5c <MX_FATFS_Init>
  MX_SDMMC1_SD_Init();
 8001594:	f000 fb62 	bl	8001c5c <MX_SDMMC1_SD_Init>
  MX_CRC_Init();
 8001598:	f7ff fc9e 	bl	8000ed8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* We format the SD card */
  printf("SD card init...\r\n");
 800159c:	482c      	ldr	r0, [pc, #176]	@ (8001650 <main+0x128>)
 800159e:	f011 f993 	bl	80128c8 <puts>
  SDCard_InitAndFormat();
 80015a2:	f000 f917 	bl	80017d4 <SDCard_InitAndFormat>

  AI_Init();
 80015a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001654 <main+0x12c>)
 80015a8:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80015ac:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 80015b0:	443b      	add	r3, r7
 80015b2:	469c      	mov	ip, r3
 80015b4:	f7ff ff3e 	bl	8001434 <AI_Init.0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t write_index = 0; // AI stuff
 80015b8:	2300      	movs	r3, #0
 80015ba:	4a27      	ldr	r2, [pc, #156]	@ (8001658 <main+0x130>)
 80015bc:	443a      	add	r2, r7
 80015be:	6013      	str	r3, [r2, #0]
    while (1)
    {
        check_button_release();
 80015c0:	f000 f8f4 	bl	80017ac <check_button_release>
        printf("Waiting for input to record...\r\n");
 80015c4:	4825      	ldr	r0, [pc, #148]	@ (800165c <main+0x134>)
 80015c6:	f011 f97f 	bl	80128c8 <puts>
        HAL_Delay(1000);
 80015ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015ce:	f002 ffab 	bl	8004528 <HAL_Delay>


        if (button_pressed == 1)
 80015d2:	4b23      	ldr	r3, [pc, #140]	@ (8001660 <main+0x138>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d12e      	bne.n	800163a <main+0x112>
        {
            /* Toggle the green led to visually show action */
            HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 80015dc:	2102      	movs	r1, #2
 80015de:	4821      	ldr	r0, [pc, #132]	@ (8001664 <main+0x13c>)
 80015e0:	f004 f927 	bl	8005832 <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 80015e4:	2064      	movs	r0, #100	@ 0x64
 80015e6:	f002 ff9f 	bl	8004528 <HAL_Delay>
            HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 80015ea:	2102      	movs	r1, #2
 80015ec:	481d      	ldr	r0, [pc, #116]	@ (8001664 <main+0x13c>)
 80015ee:	f004 f920 	bl	8005832 <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 80015f2:	2064      	movs	r0, #100	@ 0x64
 80015f4:	f002 ff98 	bl	8004528 <HAL_Delay>

            /* If the program is not already recording... */
            if (AudioState == AUDIO_STATE_IDLE)
 80015f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <main+0x140>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d108      	bne.n	8001612 <main+0xea>
            {
                /* Configure the audio recorder: sampling frequency, bits-depth, number of channels */
                AUDIO_REC_Start();
 8001600:	f009 f940 	bl	800a884 <AUDIO_REC_Start>
            }

            /* While recording, we loop the recording process */
            while (AudioState == AUDIO_STATE_RECORD)
 8001604:	e005      	b.n	8001612 <main+0xea>
            {
                status = AUDIO_REC_Process();
 8001606:	f009 f9c3 	bl	800a990 <AUDIO_REC_Process>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b17      	ldr	r3, [pc, #92]	@ (800166c <main+0x144>)
 8001610:	701a      	strb	r2, [r3, #0]
            while (AudioState == AUDIO_STATE_RECORD)
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <main+0x140>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b05      	cmp	r3, #5
 8001618:	d0f5      	beq.n	8001606 <main+0xde>
            }

            /* Once we stop recording, we correctly close the .WAV */
            if (AudioState == AUDIO_STATE_STOP)
 800161a:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <main+0x140>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b0a      	cmp	r3, #10
 8001620:	d108      	bne.n	8001634 <main+0x10c>
            {
                status = AUDIO_REC_Process();
 8001622:	f009 f9b5 	bl	800a990 <AUDIO_REC_Process>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4b10      	ldr	r3, [pc, #64]	@ (800166c <main+0x144>)
 800162c:	701a      	strb	r2, [r3, #0]
                printf("Recording stopped.\r\n");
 800162e:	4810      	ldr	r0, [pc, #64]	@ (8001670 <main+0x148>)
 8001630:	f011 f94a 	bl	80128c8 <puts>
            }

            ReadWAVFileInfo("WAVE.wav");
 8001634:	480f      	ldr	r0, [pc, #60]	@ (8001674 <main+0x14c>)
 8001636:	f000 f91d 	bl	8001874 <ReadWAVFileInfo>
//            {
//                printf("Error: WAV file info reading failed.\r\n");
//            }
        }

        HAL_Delay(100);  // Small delay for stability
 800163a:	2064      	movs	r0, #100	@ 0x64
 800163c:	f002 ff74 	bl	8004528 <HAL_Delay>
    {
 8001640:	e7be      	b.n	80015c0 <main+0x98>
 8001642:	bf00      	nop
 8001644:	000200e0 	.word	0x000200e0
 8001648:	000200cc 	.word	0x000200cc
 800164c:	08014768 	.word	0x08014768
 8001650:	080146ec 	.word	0x080146ec
 8001654:	fffdff68 	.word	0xfffdff68
 8001658:	000200c8 	.word	0x000200c8
 800165c:	08014700 	.word	0x08014700
 8001660:	20000c18 	.word	0x20000c18
 8001664:	40022000 	.word	0x40022000
 8001668:	20000a14 	.word	0x20000a14
 800166c:	20000a15 	.word	0x20000a15
 8001670:	08014720 	.word	0x08014720
 8001674:	08014734 	.word	0x08014734

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b094      	sub	sp, #80	@ 0x50
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	2230      	movs	r2, #48	@ 0x30
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f011 f9fe 	bl	8012a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	4b2a      	ldr	r3, [pc, #168]	@ (8001748 <SystemClock_Config+0xd0>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	4a29      	ldr	r2, [pc, #164]	@ (8001748 <SystemClock_Config+0xd0>)
 80016a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a8:	4b27      	ldr	r3, [pc, #156]	@ (8001748 <SystemClock_Config+0xd0>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b4:	4b25      	ldr	r3, [pc, #148]	@ (800174c <SystemClock_Config+0xd4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a24      	ldr	r2, [pc, #144]	@ (800174c <SystemClock_Config+0xd4>)
 80016ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b22      	ldr	r3, [pc, #136]	@ (800174c <SystemClock_Config+0xd4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016cc:	2302      	movs	r3, #2
 80016ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d0:	2301      	movs	r3, #1
 80016d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d4:	2310      	movs	r3, #16
 80016d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d8:	2302      	movs	r3, #2
 80016da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016dc:	2300      	movs	r3, #0
 80016de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016e0:	2308      	movs	r3, #8
 80016e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80016e4:	23c8      	movs	r3, #200	@ 0xc8
 80016e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e8:	2302      	movs	r3, #2
 80016ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80016ec:	2308      	movs	r3, #8
 80016ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	4618      	mov	r0, r3
 80016f6:	f004 fefd 	bl	80064f4 <HAL_RCC_OscConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001700:	f000 f982 	bl	8001a08 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001704:	f004 fea6 	bl	8006454 <HAL_PWREx_EnableOverDrive>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800170e:	f000 f97b 	bl	8001a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001712:	230f      	movs	r3, #15
 8001714:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001716:	2302      	movs	r3, #2
 8001718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800171e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001722:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001728:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	2106      	movs	r1, #6
 8001730:	4618      	mov	r0, r3
 8001732:	f005 f983 	bl	8006a3c <HAL_RCC_ClockConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800173c:	f000 f964 	bl	8001a08 <Error_Handler>
  }
}
 8001740:	bf00      	nop
 8001742:	3750      	adds	r7, #80	@ 0x50
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000

08001750 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* Needed to send messages easier to terminal for debugging */
PUTCHAR_PROTOTYPE
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8001758:	1d39      	adds	r1, r7, #4
 800175a:	2364      	movs	r3, #100	@ 0x64
 800175c:	2201      	movs	r2, #1
 800175e:	4804      	ldr	r0, [pc, #16]	@ (8001770 <__io_putchar+0x20>)
 8001760:	f007 fea6 	bl	80094b0 <HAL_UART_Transmit>
return ch;
 8001764:	687b      	ldr	r3, [r7, #4]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000e4c 	.word	0x20000e4c

08001774 <HAL_GPIO_EXTI_Callback>:
/* ======================================================== */


/* User button interruption and variable change */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if (GPIO_Pin == USR_BTN_Pin && button_pressed == 0)
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001784:	d10a      	bne.n	800179c <HAL_GPIO_EXTI_Callback+0x28>
 8001786:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <HAL_GPIO_EXTI_Callback+0x30>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d105      	bne.n	800179c <HAL_GPIO_EXTI_Callback+0x28>
      {
	  	  button_pressed = 1;
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <HAL_GPIO_EXTI_Callback+0x30>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
	  	  printf("Button pressed...\r\n");
 8001796:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <HAL_GPIO_EXTI_Callback+0x34>)
 8001798:	f011 f896 	bl	80128c8 <puts>
      }
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000c18 	.word	0x20000c18
 80017a8:	08014780 	.word	0x08014780

080017ac <check_button_release>:
/* ======================================================== */


/* Used to verify the state of the button */
void check_button_release()
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOI, USR_BTN_Pin) == GPIO_PIN_RESET) button_pressed = 0;
 80017b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017b4:	4805      	ldr	r0, [pc, #20]	@ (80017cc <check_button_release+0x20>)
 80017b6:	f004 f80b 	bl	80057d0 <HAL_GPIO_ReadPin>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <check_button_release+0x1a>
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <check_button_release+0x24>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40022000 	.word	0x40022000
 80017d0:	20000c18 	.word	0x20000c18

080017d4 <SDCard_InitAndFormat>:
/* ======================================================== */


/* Used to initialize the SD card */
void SDCard_InitAndFormat(void) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af02      	add	r7, sp, #8
    FRESULT res;

    // Mount the file system
    res = f_mount(&SDFatFS, (TCHAR const *)SDPath, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	491e      	ldr	r1, [pc, #120]	@ (8001858 <SDCard_InitAndFormat+0x84>)
 80017de:	481f      	ldr	r0, [pc, #124]	@ (800185c <SDCard_InitAndFormat+0x88>)
 80017e0:	f00b fb4a 	bl	800ce78 <f_mount>
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <SDCard_InitAndFormat+0x28>
        printf("Error: Failed to mount SD card (Code: %d).\r\n", res);
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	4619      	mov	r1, r3
 80017f2:	481b      	ldr	r0, [pc, #108]	@ (8001860 <SDCard_InitAndFormat+0x8c>)
 80017f4:	f011 f800 	bl	80127f8 <iprintf>
        Error_Handler();
 80017f8:	f000 f906 	bl	8001a08 <Error_Handler>
    }

    // Format the SD card
    res = f_mkfs((TCHAR const *)SDPath, FM_ANY, 0, workBuffer_init, sizeof(workBuffer_init));
 80017fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <SDCard_InitAndFormat+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	2107      	movs	r1, #7
 8001808:	4813      	ldr	r0, [pc, #76]	@ (8001858 <SDCard_InitAndFormat+0x84>)
 800180a:	f00c fa9b 	bl	800dd44 <f_mkfs>
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <SDCard_InitAndFormat+0x52>
        printf("Error: Failed to format SD card (Code: %d).\r\n", res);
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4619      	mov	r1, r3
 800181c:	4812      	ldr	r0, [pc, #72]	@ (8001868 <SDCard_InitAndFormat+0x94>)
 800181e:	f010 ffeb 	bl	80127f8 <iprintf>
        Error_Handler();
 8001822:	f000 f8f1 	bl	8001a08 <Error_Handler>
    }

    // Unmount the file system to complete formatting
    res = f_mount(NULL, (TCHAR const *)SDPath, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	490b      	ldr	r1, [pc, #44]	@ (8001858 <SDCard_InitAndFormat+0x84>)
 800182a:	2000      	movs	r0, #0
 800182c:	f00b fb24 	bl	800ce78 <f_mount>
 8001830:	4603      	mov	r3, r0
 8001832:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <SDCard_InitAndFormat+0x74>
        printf("Error: Failed to unmount SD card after formatting (Code: %d).\r\n", res);
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	4619      	mov	r1, r3
 800183e:	480b      	ldr	r0, [pc, #44]	@ (800186c <SDCard_InitAndFormat+0x98>)
 8001840:	f010 ffda 	bl	80127f8 <iprintf>
        Error_Handler();
 8001844:	f000 f8e0 	bl	8001a08 <Error_Handler>
    }

    printf("SD card initialized and formatted successfully.\r\n");
 8001848:	4809      	ldr	r0, [pc, #36]	@ (8001870 <SDCard_InitAndFormat+0x9c>)
 800184a:	f011 f83d 	bl	80128c8 <puts>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20005b9c 	.word	0x20005b9c
 800185c:	20005ba0 	.word	0x20005ba0
 8001860:	08014794 	.word	0x08014794
 8001864:	20000a18 	.word	0x20000a18
 8001868:	080147c4 	.word	0x080147c4
 800186c:	080147f4 	.word	0x080147f4
 8001870:	08014834 	.word	0x08014834

08001874 <ReadWAVFileInfo>:
}
/* ======================================================== */


/* Debug function : reads the characteristics of a .wav file in the SD card */
void ReadWAVFileInfo(const char *filename) {
 8001874:	b580      	push	{r7, lr}
 8001876:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 800187a:	af00      	add	r7, sp, #0
 800187c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001880:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001884:	6018      	str	r0, [r3, #0]
    FIL file;               // File object
    WAV_Header header;      // WAV file header
    UINT bytesRead;         // Number of bytes read
    FRESULT res;

    SCB_DisableDCache();
 8001886:	f7ff fd91 	bl	80013ac <SCB_DisableDCache>
    SCB_DisableICache();
 800188a:	f7ff fd2b 	bl	80012e4 <SCB_DisableICache>

    // Open the WAV file
    res = f_open(&file, filename, FA_READ);
 800188e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001892:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001896:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800189a:	2201      	movs	r2, #1
 800189c:	6819      	ldr	r1, [r3, #0]
 800189e:	f00b fb31 	bl	800cf04 <f_open>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if (res != FR_OK) {
 80018a8:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00a      	beq.n	80018c6 <ReadWAVFileInfo+0x52>
        printf("Error: Failed to open file '%s' (Code: %d).\n", filename, res);
 80018b0:	f897 226f 	ldrb.w	r2, [r7, #623]	@ 0x26f
 80018b4:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80018b8:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80018bc:	6819      	ldr	r1, [r3, #0]
 80018be:	4845      	ldr	r0, [pc, #276]	@ (80019d4 <ReadWAVFileInfo+0x160>)
 80018c0:	f010 ff9a 	bl	80127f8 <iprintf>
        return;
 80018c4:	e081      	b.n	80019ca <ReadWAVFileInfo+0x156>
    }

    // Read the WAV file header
    res = f_read(&file, &header, sizeof(WAV_Header), &bytesRead);
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	f107 0110 	add.w	r1, r7, #16
 80018ce:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80018d2:	222c      	movs	r2, #44	@ 0x2c
 80018d4:	f00b fcd0 	bl	800d278 <f_read>
 80018d8:	4603      	mov	r3, r0
 80018da:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if (res != FR_OK || bytesRead != sizeof(WAV_Header)) {
 80018de:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d106      	bne.n	80018f4 <ReadWAVFileInfo+0x80>
 80018e6:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80018ea:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80018f2:	d00b      	beq.n	800190c <ReadWAVFileInfo+0x98>
        printf("Error: Failed to read WAV file header (Code: %d).\n", res);
 80018f4:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 80018f8:	4619      	mov	r1, r3
 80018fa:	4837      	ldr	r0, [pc, #220]	@ (80019d8 <ReadWAVFileInfo+0x164>)
 80018fc:	f010 ff7c 	bl	80127f8 <iprintf>
        f_close(&file);
 8001900:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001904:	4618      	mov	r0, r3
 8001906:	f00b ffe9 	bl	800d8dc <f_close>
        return;
 800190a:	e05e      	b.n	80019ca <ReadWAVFileInfo+0x156>
    }

    // Print WAV file information
    printf("WAV File Info:\r\n");
 800190c:	4833      	ldr	r0, [pc, #204]	@ (80019dc <ReadWAVFileInfo+0x168>)
 800190e:	f010 ffdb 	bl	80128c8 <puts>
    printf("  ChunkID: %.4s\r\n", header.ChunkID);
 8001912:	f107 0310 	add.w	r3, r7, #16
 8001916:	4619      	mov	r1, r3
 8001918:	4831      	ldr	r0, [pc, #196]	@ (80019e0 <ReadWAVFileInfo+0x16c>)
 800191a:	f010 ff6d 	bl	80127f8 <iprintf>
    printf("  Format: %.4s\r\n", header.Format);
 800191e:	f107 0310 	add.w	r3, r7, #16
 8001922:	3308      	adds	r3, #8
 8001924:	4619      	mov	r1, r3
 8001926:	482f      	ldr	r0, [pc, #188]	@ (80019e4 <ReadWAVFileInfo+0x170>)
 8001928:	f010 ff66 	bl	80127f8 <iprintf>
    printf("  Audio Format: %d\r\n", header.AudioFormat);
 800192c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001930:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001934:	8a9b      	ldrh	r3, [r3, #20]
 8001936:	4619      	mov	r1, r3
 8001938:	482b      	ldr	r0, [pc, #172]	@ (80019e8 <ReadWAVFileInfo+0x174>)
 800193a:	f010 ff5d 	bl	80127f8 <iprintf>
    printf("  Number of Channels: %d\r\n", header.NumChannels);
 800193e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001942:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001946:	8adb      	ldrh	r3, [r3, #22]
 8001948:	4619      	mov	r1, r3
 800194a:	4828      	ldr	r0, [pc, #160]	@ (80019ec <ReadWAVFileInfo+0x178>)
 800194c:	f010 ff54 	bl	80127f8 <iprintf>
    printf("  Sample Rate: %d Hz\r\n", header.SampleRate);
 8001950:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001954:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	4619      	mov	r1, r3
 800195c:	4824      	ldr	r0, [pc, #144]	@ (80019f0 <ReadWAVFileInfo+0x17c>)
 800195e:	f010 ff4b 	bl	80127f8 <iprintf>
    printf("  Byte Rate: %d\r\n", header.ByteRate);
 8001962:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001966:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	4619      	mov	r1, r3
 800196e:	4821      	ldr	r0, [pc, #132]	@ (80019f4 <ReadWAVFileInfo+0x180>)
 8001970:	f010 ff42 	bl	80127f8 <iprintf>
    printf("  Block Align: %d\r\n", header.BlockAlign);
 8001974:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001978:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800197c:	8c1b      	ldrh	r3, [r3, #32]
 800197e:	4619      	mov	r1, r3
 8001980:	481d      	ldr	r0, [pc, #116]	@ (80019f8 <ReadWAVFileInfo+0x184>)
 8001982:	f010 ff39 	bl	80127f8 <iprintf>
    printf("  Bits Per Sample: %d\r\n", header.BitsPerSample);
 8001986:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800198a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800198e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001990:	4619      	mov	r1, r3
 8001992:	481a      	ldr	r0, [pc, #104]	@ (80019fc <ReadWAVFileInfo+0x188>)
 8001994:	f010 ff30 	bl	80127f8 <iprintf>
    printf("  Subchunk2ID: %.4s\r\n", header.Subchunk2ID);
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	3324      	adds	r3, #36	@ 0x24
 800199e:	4619      	mov	r1, r3
 80019a0:	4817      	ldr	r0, [pc, #92]	@ (8001a00 <ReadWAVFileInfo+0x18c>)
 80019a2:	f010 ff29 	bl	80127f8 <iprintf>
    printf("  Subchunk2Size: %d bytes\r\n", header.Subchunk2Size);
 80019a6:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80019aa:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80019ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b0:	4619      	mov	r1, r3
 80019b2:	4814      	ldr	r0, [pc, #80]	@ (8001a04 <ReadWAVFileInfo+0x190>)
 80019b4:	f010 ff20 	bl	80127f8 <iprintf>

    SCB_EnableDCache();
 80019b8:	f7ff fcb4 	bl	8001324 <SCB_EnableDCache>
    SCB_EnableICache();
 80019bc:	f7ff fc6c 	bl	8001298 <SCB_EnableICache>

    // Close the file
    f_close(&file);
 80019c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00b ff89 	bl	800d8dc <f_close>
}
 80019ca:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	0801487c 	.word	0x0801487c
 80019d8:	080148ac 	.word	0x080148ac
 80019dc:	080148e0 	.word	0x080148e0
 80019e0:	080148f0 	.word	0x080148f0
 80019e4:	08014904 	.word	0x08014904
 80019e8:	08014918 	.word	0x08014918
 80019ec:	08014930 	.word	0x08014930
 80019f0:	0801494c 	.word	0x0801494c
 80019f4:	08014964 	.word	0x08014964
 80019f8:	08014978 	.word	0x08014978
 80019fc:	0801498c 	.word	0x0801498c
 8001a00:	080149a4 	.word	0x080149a4
 8001a04:	080149bc 	.word	0x080149bc

08001a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a0c:	b672      	cpsid	i
}
 8001a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <Error_Handler+0x8>

08001a14 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001a18:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a1a:	4a28      	ldr	r2, [pc, #160]	@ (8001abc <MX_SAI1_Init+0xa8>)
 8001a1c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a1e:	4b26      	ldr	r3, [pc, #152]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001a24:	4b24      	ldr	r3, [pc, #144]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8001a2a:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a2c:	2280      	movs	r2, #128	@ 0x80
 8001a2e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001a30:	4b21      	ldr	r3, [pc, #132]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001a36:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a56:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001a5a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001a62:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001a68:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 16;
 8001a6e:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a70:	2210      	movs	r2, #16
 8001a72:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001a74:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001a80:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001a86:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001a92:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001a98:	4b07      	ldr	r3, [pc, #28]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001a9e:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001aa4:	4804      	ldr	r0, [pc, #16]	@ (8001ab8 <MX_SAI1_Init+0xa4>)
 8001aa6:	f005 ffeb 	bl	8007a80 <HAL_SAI_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_SAI1_Init+0xa0>
  {
    Error_Handler();
 8001ab0:	f7ff ffaa 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000c1c 	.word	0x20000c1c
 8001abc:	40015804 	.word	0x40015804

08001ac0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b0aa      	sub	sp, #168	@ 0xa8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	2284      	movs	r2, #132	@ 0x84
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f010 ffd9 	bl	8012a88 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a41      	ldr	r2, [pc, #260]	@ (8001be0 <HAL_SAI_MspInit+0x120>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d17b      	bne.n	8001bd8 <HAL_SAI_MspInit+0x118>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001ae0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001ae4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001ae6:	2332      	movs	r3, #50	@ 0x32
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001aea:	2302      	movs	r3, #2
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001aee:	2302      	movs	r3, #2
 8001af0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001af2:	2300      	movs	r3, #0
 8001af4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001af6:	2301      	movs	r3, #1
 8001af8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001afa:	2300      	movs	r3, #0
 8001afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001afe:	2300      	movs	r3, #0
 8001b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	4618      	mov	r0, r3
 8001b08:	f005 f97e 	bl	8006e08 <HAL_RCCEx_PeriphCLKConfig>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_SAI_MspInit+0x56>
    {
      Error_Handler();
 8001b12:	f7ff ff79 	bl	8001a08 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001b16:	4b33      	ldr	r3, [pc, #204]	@ (8001be4 <HAL_SAI_MspInit+0x124>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10b      	bne.n	8001b36 <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001b1e:	4b32      	ldr	r3, [pc, #200]	@ (8001be8 <HAL_SAI_MspInit+0x128>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	4a31      	ldr	r2, [pc, #196]	@ (8001be8 <HAL_SAI_MspInit+0x128>)
 8001b24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001be8 <HAL_SAI_MspInit+0x128>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001b36:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <HAL_SAI_MspInit+0x124>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	4a29      	ldr	r2, [pc, #164]	@ (8001be4 <HAL_SAI_MspInit+0x124>)
 8001b3e:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001b40:	2370      	movs	r3, #112	@ 0x70
 8001b42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001b58:	2306      	movs	r3, #6
 8001b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b5e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001b62:	4619      	mov	r1, r3
 8001b64:	4821      	ldr	r0, [pc, #132]	@ (8001bec <HAL_SAI_MspInit+0x12c>)
 8001b66:	f003 fb7b 	bl	8005260 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001b6a:	4b21      	ldr	r3, [pc, #132]	@ (8001bf0 <HAL_SAI_MspInit+0x130>)
 8001b6c:	4a21      	ldr	r2, [pc, #132]	@ (8001bf4 <HAL_SAI_MspInit+0x134>)
 8001b6e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001b70:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <HAL_SAI_MspInit+0x130>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b76:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf0 <HAL_SAI_MspInit+0x130>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <HAL_SAI_MspInit+0x130>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001b82:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <HAL_SAI_MspInit+0x130>)
 8001b84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b88:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b8a:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_SAI_MspInit+0x130>)
 8001b8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b90:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b92:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <HAL_SAI_MspInit+0x130>)
 8001b94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b98:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001b9a:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <HAL_SAI_MspInit+0x130>)
 8001b9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ba0:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001ba2:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <HAL_SAI_MspInit+0x130>)
 8001ba4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ba8:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001baa:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <HAL_SAI_MspInit+0x130>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001bb0:	480f      	ldr	r0, [pc, #60]	@ (8001bf0 <HAL_SAI_MspInit+0x130>)
 8001bb2:	f002 fee1 	bl	8004978 <HAL_DMA_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 8001bbc:	f7ff ff24 	bl	8001a08 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf0 <HAL_SAI_MspInit+0x130>)
 8001bc4:	671a      	str	r2, [r3, #112]	@ 0x70
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <HAL_SAI_MspInit+0x130>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a08      	ldr	r2, [pc, #32]	@ (8001bf0 <HAL_SAI_MspInit+0x130>)
 8001bd0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001bd2:	4a07      	ldr	r2, [pc, #28]	@ (8001bf0 <HAL_SAI_MspInit+0x130>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001bd8:	bf00      	nop
 8001bda:	37a8      	adds	r7, #168	@ 0xa8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40015804 	.word	0x40015804
 8001be4:	20000d00 	.word	0x20000d00
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	20000ca0 	.word	0x20000ca0
 8001bf4:	40026428 	.word	0x40026428

08001bf8 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a11      	ldr	r2, [pc, #68]	@ (8001c4c <HAL_SAI_MspDeInit+0x54>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d11c      	bne.n	8001c44 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI1_client --;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <HAL_SAI_MspDeInit+0x58>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	4a0f      	ldr	r2, [pc, #60]	@ (8001c50 <HAL_SAI_MspDeInit+0x58>)
 8001c12:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8001c14:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <HAL_SAI_MspDeInit+0x58>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c54 <HAL_SAI_MspDeInit+0x5c>)
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c20:	4a0c      	ldr	r2, [pc, #48]	@ (8001c54 <HAL_SAI_MspDeInit+0x5c>)
 8001c22:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001c26:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8001c28:	2170      	movs	r1, #112	@ 0x70
 8001c2a:	480b      	ldr	r0, [pc, #44]	@ (8001c58 <HAL_SAI_MspDeInit+0x60>)
 8001c2c:	f003 fcc4 	bl	80055b8 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c34:	4618      	mov	r0, r3
 8001c36:	f002 ff4d 	bl	8004ad4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f002 ff48 	bl	8004ad4 <HAL_DMA_DeInit>
    }
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40015804 	.word	0x40015804
 8001c50:	20000d00 	.word	0x20000d00
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40021000 	.word	0x40021000

08001c5c <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <MX_SDMMC1_SD_Init+0x38>)
 8001c62:	4a0d      	ldr	r2, [pc, #52]	@ (8001c98 <MX_SDMMC1_SD_Init+0x3c>)
 8001c64:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <MX_SDMMC1_SD_Init+0x38>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <MX_SDMMC1_SD_Init+0x38>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001c72:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <MX_SDMMC1_SD_Init+0x38>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <MX_SDMMC1_SD_Init+0x38>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001c7e:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <MX_SDMMC1_SD_Init+0x38>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <MX_SDMMC1_SD_Init+0x38>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	20000d04 	.word	0x20000d04
 8001c98:	40012c00 	.word	0x40012c00

08001c9c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b0ac      	sub	sp, #176	@ 0xb0
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb4:	f107 0318 	add.w	r3, r7, #24
 8001cb8:	2284      	movs	r2, #132	@ 0x84
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f010 fee3 	bl	8012a88 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a74      	ldr	r2, [pc, #464]	@ (8001e98 <HAL_SD_MspInit+0x1fc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	f040 80e0 	bne.w	8001e8e <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001cce:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8001cd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ce0:	f107 0318 	add.w	r3, r7, #24
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f005 f88f 	bl	8006e08 <HAL_RCCEx_PeriphCLKConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001cf0:	f7ff fe8a 	bl	8001a08 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001cf4:	4b69      	ldr	r3, [pc, #420]	@ (8001e9c <HAL_SD_MspInit+0x200>)
 8001cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf8:	4a68      	ldr	r2, [pc, #416]	@ (8001e9c <HAL_SD_MspInit+0x200>)
 8001cfa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cfe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d00:	4b66      	ldr	r3, [pc, #408]	@ (8001e9c <HAL_SD_MspInit+0x200>)
 8001d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0c:	4b63      	ldr	r3, [pc, #396]	@ (8001e9c <HAL_SD_MspInit+0x200>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d10:	4a62      	ldr	r2, [pc, #392]	@ (8001e9c <HAL_SD_MspInit+0x200>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d18:	4b60      	ldr	r3, [pc, #384]	@ (8001e9c <HAL_SD_MspInit+0x200>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d24:	4b5d      	ldr	r3, [pc, #372]	@ (8001e9c <HAL_SD_MspInit+0x200>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d28:	4a5c      	ldr	r2, [pc, #368]	@ (8001e9c <HAL_SD_MspInit+0x200>)
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d30:	4b5a      	ldr	r3, [pc, #360]	@ (8001e9c <HAL_SD_MspInit+0x200>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8001d3c:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001d40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d56:	230c      	movs	r3, #12
 8001d58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d60:	4619      	mov	r1, r3
 8001d62:	484f      	ldr	r0, [pc, #316]	@ (8001ea0 <HAL_SD_MspInit+0x204>)
 8001d64:	f003 fa7c 	bl	8005260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d80:	230c      	movs	r3, #12
 8001d82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d86:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4845      	ldr	r0, [pc, #276]	@ (8001ea4 <HAL_SD_MspInit+0x208>)
 8001d8e:	f003 fa67 	bl	8005260 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001d92:	4b45      	ldr	r3, [pc, #276]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001d94:	4a45      	ldr	r2, [pc, #276]	@ (8001eac <HAL_SD_MspInit+0x210>)
 8001d96:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d98:	4b43      	ldr	r3, [pc, #268]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001d9a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d9e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001da0:	4b41      	ldr	r3, [pc, #260]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001da6:	4b40      	ldr	r3, [pc, #256]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dac:	4b3e      	ldr	r3, [pc, #248]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001dae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001db2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001db4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001db6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dba:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001dbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dc2:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001dc4:	4b38      	ldr	r3, [pc, #224]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dca:	4b37      	ldr	r3, [pc, #220]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001dd0:	4b35      	ldr	r3, [pc, #212]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001dd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001dd8:	2203      	movs	r2, #3
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001ddc:	4b32      	ldr	r3, [pc, #200]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001dde:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001de2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001de4:	4b30      	ldr	r3, [pc, #192]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001de6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001dea:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001dec:	482e      	ldr	r0, [pc, #184]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001dee:	f002 fdc3 	bl	8004978 <HAL_DMA_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001df8:	f7ff fe06 	bl	8001a08 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001e00:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e02:	4a29      	ldr	r2, [pc, #164]	@ (8001ea8 <HAL_SD_MspInit+0x20c>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001e08:	4b29      	ldr	r3, [pc, #164]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb4 <HAL_SD_MspInit+0x218>)
 8001e0c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001e0e:	4b28      	ldr	r3, [pc, #160]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e10:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e14:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e16:	4b26      	ldr	r3, [pc, #152]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e18:	2240      	movs	r2, #64	@ 0x40
 8001e1a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e1c:	4b24      	ldr	r3, [pc, #144]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e22:	4b23      	ldr	r3, [pc, #140]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e28:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e2a:	4b21      	ldr	r3, [pc, #132]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e30:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e32:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e34:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e38:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e46:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e48:	2204      	movs	r2, #4
 8001e4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e4c:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e4e:	2203      	movs	r2, #3
 8001e50:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001e52:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e58:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e5c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001e60:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001e62:	4813      	ldr	r0, [pc, #76]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e64:	f002 fd88 	bl	8004978 <HAL_DMA_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001e6e:	f7ff fdcb 	bl	8001a08 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e78:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb0 <HAL_SD_MspInit+0x214>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 1, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2101      	movs	r1, #1
 8001e82:	2031      	movs	r0, #49	@ 0x31
 8001e84:	f002 fc4f 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001e88:	2031      	movs	r0, #49	@ 0x31
 8001e8a:	f002 fc68 	bl	800475e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001e8e:	bf00      	nop
 8001e90:	37b0      	adds	r7, #176	@ 0xb0
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40012c00 	.word	0x40012c00
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020800 	.word	0x40020800
 8001ea4:	40020c00 	.word	0x40020c00
 8001ea8:	20000d88 	.word	0x20000d88
 8001eac:	40026458 	.word	0x40026458
 8001eb0:	20000de8 	.word	0x20000de8
 8001eb4:	400264a0 	.word	0x400264a0

08001eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <HAL_MspInit+0x44>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8001efc <HAL_MspInit+0x44>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eca:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <HAL_MspInit+0x44>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <HAL_MspInit+0x44>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	4a08      	ldr	r2, [pc, #32]	@ (8001efc <HAL_MspInit+0x44>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_MspInit+0x44>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800

08001f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <NMI_Handler+0x4>

08001f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <HardFault_Handler+0x4>

08001f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <MemManage_Handler+0x4>

08001f18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <BusFault_Handler+0x4>

08001f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <UsageFault_Handler+0x4>

08001f28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f56:	f002 fac7 	bl	80044e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001f62:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001f66:	f003 fc7f 	bl	8005868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001f74:	4802      	ldr	r0, [pc, #8]	@ (8001f80 <SDMMC1_IRQHandler+0x10>)
 8001f76:	f006 fba5 	bl	80086c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000d04 	.word	0x20000d04

08001f84 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001f88:	4802      	ldr	r0, [pc, #8]	@ (8001f94 <DMA2_Stream1_IRQHandler+0x10>)
 8001f8a:	f002 fef3 	bl	8004d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000ca0 	.word	0x20000ca0

08001f98 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001f9c:	4802      	ldr	r0, [pc, #8]	@ (8001fa8 <DMA2_Stream3_IRQHandler+0x10>)
 8001f9e:	f002 fee9 	bl	8004d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000d88 	.word	0x20000d88

08001fac <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001fb0:	4802      	ldr	r0, [pc, #8]	@ (8001fbc <DMA2_Stream6_IRQHandler+0x10>)
 8001fb2:	f002 fedf 	bl	8004d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000de8 	.word	0x20000de8

08001fc0 <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 Stream 7 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	//extern SAI_HandleTypeDef haudio_in_sai;
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001fc4:	4b03      	ldr	r3, [pc, #12]	@ (8001fd4 <DMA2_Stream7_IRQHandler+0x14>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f002 fed3 	bl	8004d74 <HAL_DMA_IRQHandler>
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000fb8 	.word	0x20000fb8

08001fd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return 1;
 8001fdc:	2301      	movs	r3, #1
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_kill>:

int _kill(int pid, int sig)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ff2:	f010 fdab 	bl	8012b4c <__errno>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2216      	movs	r2, #22
 8001ffa:	601a      	str	r2, [r3, #0]
  return -1;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_exit>:

void _exit (int status)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002010:	f04f 31ff 	mov.w	r1, #4294967295
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ffe7 	bl	8001fe8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800201a:	bf00      	nop
 800201c:	e7fd      	b.n	800201a <_exit+0x12>

0800201e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	e00a      	b.n	8002046 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002030:	f3af 8000 	nop.w
 8002034:	4601      	mov	r1, r0
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	60ba      	str	r2, [r7, #8]
 800203c:	b2ca      	uxtb	r2, r1
 800203e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3301      	adds	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	dbf0      	blt.n	8002030 <_read+0x12>
  }

  return len;
 800204e:	687b      	ldr	r3, [r7, #4]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	e009      	b.n	800207e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	60ba      	str	r2, [r7, #8]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fb6c 	bl	8001750 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3301      	adds	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	dbf1      	blt.n	800206a <_write+0x12>
  }
  return len;
 8002086:	687b      	ldr	r3, [r7, #4]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_close>:

int _close(int file)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020b8:	605a      	str	r2, [r3, #4]
  return 0;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_isatty>:

int _isatty(int file)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020de:	b480      	push	{r7}
 80020e0:	b085      	sub	sp, #20
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	@ (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	@ (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	@ (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	@ (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f010 fd10 	bl	8012b4c <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	@ (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	@ (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20050000 	.word	0x20050000
 8002158:	00002000 	.word	0x00002000
 800215c:	20000e48 	.word	0x20000e48
 8002160:	20006000 	.word	0x20006000

08002164 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002168:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <SystemInit+0x20>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <SystemInit+0x20>)
 8002170:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002174:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800218c:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <MX_USART1_UART_Init+0x58>)
 800218e:	4a15      	ldr	r2, [pc, #84]	@ (80021e4 <MX_USART1_UART_Init+0x5c>)
 8002190:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002192:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <MX_USART1_UART_Init+0x58>)
 8002194:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002198:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800219a:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <MX_USART1_UART_Init+0x58>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	@ (80021e0 <MX_USART1_UART_Init+0x58>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <MX_USART1_UART_Init+0x58>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <MX_USART1_UART_Init+0x58>)
 80021ae:	220c      	movs	r2, #12
 80021b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <MX_USART1_UART_Init+0x58>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b8:	4b09      	ldr	r3, [pc, #36]	@ (80021e0 <MX_USART1_UART_Init+0x58>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021be:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <MX_USART1_UART_Init+0x58>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <MX_USART1_UART_Init+0x58>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ca:	4805      	ldr	r0, [pc, #20]	@ (80021e0 <MX_USART1_UART_Init+0x58>)
 80021cc:	f007 f922 	bl	8009414 <HAL_UART_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80021d6:	f7ff fc17 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000e4c 	.word	0x20000e4c
 80021e4:	40011000 	.word	0x40011000

080021e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0ac      	sub	sp, #176	@ 0xb0
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002200:	f107 0318 	add.w	r3, r7, #24
 8002204:	2284      	movs	r2, #132	@ 0x84
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f010 fc3d 	bl	8012a88 <memset>
  if(uartHandle->Instance==USART1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a32      	ldr	r2, [pc, #200]	@ (80022dc <HAL_UART_MspInit+0xf4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d15c      	bne.n	80022d2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002218:	2340      	movs	r3, #64	@ 0x40
 800221a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800221c:	2300      	movs	r3, #0
 800221e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002220:	f107 0318 	add.w	r3, r7, #24
 8002224:	4618      	mov	r0, r3
 8002226:	f004 fdef 	bl	8006e08 <HAL_RCCEx_PeriphCLKConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002230:	f7ff fbea 	bl	8001a08 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002234:	4b2a      	ldr	r3, [pc, #168]	@ (80022e0 <HAL_UART_MspInit+0xf8>)
 8002236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002238:	4a29      	ldr	r2, [pc, #164]	@ (80022e0 <HAL_UART_MspInit+0xf8>)
 800223a:	f043 0310 	orr.w	r3, r3, #16
 800223e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002240:	4b27      	ldr	r3, [pc, #156]	@ (80022e0 <HAL_UART_MspInit+0xf8>)
 8002242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224c:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <HAL_UART_MspInit+0xf8>)
 800224e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <HAL_UART_MspInit+0xf8>)
 8002252:	f043 0302 	orr.w	r3, r3, #2
 8002256:	6313      	str	r3, [r2, #48]	@ 0x30
 8002258:	4b21      	ldr	r3, [pc, #132]	@ (80022e0 <HAL_UART_MspInit+0xf8>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <HAL_UART_MspInit+0xf8>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002268:	4a1d      	ldr	r2, [pc, #116]	@ (80022e0 <HAL_UART_MspInit+0xf8>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002270:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <HAL_UART_MspInit+0xf8>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800227c:	2380      	movs	r3, #128	@ 0x80
 800227e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228e:	2303      	movs	r3, #3
 8002290:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002294:	2307      	movs	r3, #7
 8002296:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800229e:	4619      	mov	r1, r3
 80022a0:	4810      	ldr	r0, [pc, #64]	@ (80022e4 <HAL_UART_MspInit+0xfc>)
 80022a2:	f002 ffdd 	bl	8005260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022c0:	2307      	movs	r3, #7
 80022c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022ca:	4619      	mov	r1, r3
 80022cc:	4806      	ldr	r0, [pc, #24]	@ (80022e8 <HAL_UART_MspInit+0x100>)
 80022ce:	f002 ffc7 	bl	8005260 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022d2:	bf00      	nop
 80022d4:	37b0      	adds	r7, #176	@ 0xb0
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40011000 	.word	0x40011000
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40020400 	.word	0x40020400
 80022e8:	40020000 	.word	0x40020000

080022ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002324 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022f0:	f7ff ff38 	bl	8002164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022f4:	480c      	ldr	r0, [pc, #48]	@ (8002328 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022f6:	490d      	ldr	r1, [pc, #52]	@ (800232c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002330 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022fc:	e002      	b.n	8002304 <LoopCopyDataInit>

080022fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002302:	3304      	adds	r3, #4

08002304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002308:	d3f9      	bcc.n	80022fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230a:	4a0a      	ldr	r2, [pc, #40]	@ (8002334 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800230c:	4c0a      	ldr	r4, [pc, #40]	@ (8002338 <LoopFillZerobss+0x22>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002310:	e001      	b.n	8002316 <LoopFillZerobss>

08002312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002314:	3204      	adds	r2, #4

08002316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002318:	d3fb      	bcc.n	8002312 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800231a:	f010 fc1d 	bl	8012b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800231e:	f7ff f903 	bl	8001528 <main>
  bx  lr    
 8002322:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002324:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800232c:	200009d4 	.word	0x200009d4
  ldr r2, =_sidata
 8002330:	080be9f8 	.word	0x080be9f8
  ldr r2, =_sbss
 8002334:	200009d4 	.word	0x200009d4
  ldr r4, =_ebss
 8002338:	20006000 	.word	0x20006000

0800233c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800233c:	e7fe      	b.n	800233c <ADC_IRQHandler>
	...

08002340 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	4603      	mov	r3, r0
 800234a:	81fb      	strh	r3, [r7, #14]
 800234c:	460b      	mov	r3, r1
 800234e:	81bb      	strh	r3, [r7, #12]
 8002350:	4613      	mov	r3, r2
 8002352:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8002358:	89bb      	ldrh	r3, [r7, #12]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800235e:	89bb      	ldrh	r3, [r7, #12]
 8002360:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002364:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800236a:	f001 fc71 	bl	8003c50 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800236e:	89fb      	ldrh	r3, [r7, #14]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2203      	movs	r2, #3
 8002374:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002378:	4618      	mov	r0, r3
 800237a:	f001 fafb 	bl	8003974 <CODEC_IO_Write>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	4413      	add	r3, r2
 8002386:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8002388:	89fb      	ldrh	r3, [r7, #14]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2200      	movs	r2, #0
 800238e:	f640 0117 	movw	r1, #2071	@ 0x817
 8002392:	4618      	mov	r0, r3
 8002394:	f001 faee 	bl	8003974 <CODEC_IO_Write>
 8002398:	4603      	mov	r3, r0
 800239a:	461a      	mov	r2, r3
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	4413      	add	r3, r2
 80023a0:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80023a2:	89fb      	ldrh	r3, [r7, #14]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2200      	movs	r2, #0
 80023a8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80023ac:	4618      	mov	r0, r3
 80023ae:	f001 fae1 	bl	8003974 <CODEC_IO_Write>
 80023b2:	4603      	mov	r3, r0
 80023b4:	461a      	mov	r2, r3
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	4413      	add	r3, r2
 80023ba:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80023bc:	89fb      	ldrh	r3, [r7, #14]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	226c      	movs	r2, #108	@ 0x6c
 80023c2:	2139      	movs	r1, #57	@ 0x39
 80023c4:	4618      	mov	r0, r3
 80023c6:	f001 fad5 	bl	8003974 <CODEC_IO_Write>
 80023ca:	4603      	mov	r3, r0
 80023cc:	461a      	mov	r2, r3
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	4413      	add	r3, r2
 80023d2:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80023d4:	8afb      	ldrh	r3, [r7, #22]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00c      	beq.n	80023f4 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80023da:	89fb      	ldrh	r3, [r7, #14]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2213      	movs	r2, #19
 80023e0:	2101      	movs	r1, #1
 80023e2:	4618      	mov	r0, r3
 80023e4:	f001 fac6 	bl	8003974 <CODEC_IO_Write>
 80023e8:	4603      	mov	r3, r0
 80023ea:	461a      	mov	r2, r3
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	4413      	add	r3, r2
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e00b      	b.n	800240c <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80023f4:	89fb      	ldrh	r3, [r7, #14]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2203      	movs	r2, #3
 80023fa:	2101      	movs	r1, #1
 80023fc:	4618      	mov	r0, r3
 80023fe:	f001 fab9 	bl	8003974 <CODEC_IO_Write>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	4413      	add	r3, r2
 800240a:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 800240c:	2032      	movs	r0, #50	@ 0x32
 800240e:	f001 fc87 	bl	8003d20 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8002412:	8b3b      	ldrh	r3, [r7, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 815f 	beq.w	80026d8 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 800241a:	4bae      	ldr	r3, [pc, #696]	@ (80026d4 <wm8994_Init+0x394>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002420:	8b3b      	ldrh	r3, [r7, #24]
 8002422:	2b03      	cmp	r3, #3
 8002424:	f000 808c 	beq.w	8002540 <wm8994_Init+0x200>
 8002428:	2b03      	cmp	r3, #3
 800242a:	f300 8111 	bgt.w	8002650 <wm8994_Init+0x310>
 800242e:	2b01      	cmp	r3, #1
 8002430:	d002      	beq.n	8002438 <wm8994_Init+0xf8>
 8002432:	2b02      	cmp	r3, #2
 8002434:	d042      	beq.n	80024bc <wm8994_Init+0x17c>
 8002436:	e10b      	b.n	8002650 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002438:	89fb      	ldrh	r3, [r7, #14]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8002440:	2105      	movs	r1, #5
 8002442:	4618      	mov	r0, r3
 8002444:	f001 fa96 	bl	8003974 <CODEC_IO_Write>
 8002448:	4603      	mov	r3, r0
 800244a:	461a      	mov	r2, r3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	4413      	add	r3, r2
 8002450:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8002452:	89fb      	ldrh	r3, [r7, #14]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2200      	movs	r2, #0
 8002458:	f240 6101 	movw	r1, #1537	@ 0x601
 800245c:	4618      	mov	r0, r3
 800245e:	f001 fa89 	bl	8003974 <CODEC_IO_Write>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	4413      	add	r3, r2
 800246a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800246c:	89fb      	ldrh	r3, [r7, #14]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2200      	movs	r2, #0
 8002472:	f240 6102 	movw	r1, #1538	@ 0x602
 8002476:	4618      	mov	r0, r3
 8002478:	f001 fa7c 	bl	8003974 <CODEC_IO_Write>
 800247c:	4603      	mov	r3, r0
 800247e:	461a      	mov	r2, r3
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	4413      	add	r3, r2
 8002484:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002486:	89fb      	ldrh	r3, [r7, #14]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2202      	movs	r2, #2
 800248c:	f240 6104 	movw	r1, #1540	@ 0x604
 8002490:	4618      	mov	r0, r3
 8002492:	f001 fa6f 	bl	8003974 <CODEC_IO_Write>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	4413      	add	r3, r2
 800249e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80024a0:	89fb      	ldrh	r3, [r7, #14]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2202      	movs	r2, #2
 80024a6:	f240 6105 	movw	r1, #1541	@ 0x605
 80024aa:	4618      	mov	r0, r3
 80024ac:	f001 fa62 	bl	8003974 <CODEC_IO_Write>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461a      	mov	r2, r3
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	4413      	add	r3, r2
 80024b8:	61fb      	str	r3, [r7, #28]
      break;
 80024ba:	e110      	b.n	80026de <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80024bc:	89fb      	ldrh	r3, [r7, #14]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f240 3203 	movw	r2, #771	@ 0x303
 80024c4:	2105      	movs	r1, #5
 80024c6:	4618      	mov	r0, r3
 80024c8:	f001 fa54 	bl	8003974 <CODEC_IO_Write>
 80024cc:	4603      	mov	r3, r0
 80024ce:	461a      	mov	r2, r3
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	4413      	add	r3, r2
 80024d4:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80024d6:	89fb      	ldrh	r3, [r7, #14]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2201      	movs	r2, #1
 80024dc:	f240 6101 	movw	r1, #1537	@ 0x601
 80024e0:	4618      	mov	r0, r3
 80024e2:	f001 fa47 	bl	8003974 <CODEC_IO_Write>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	4413      	add	r3, r2
 80024ee:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80024f0:	89fb      	ldrh	r3, [r7, #14]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2201      	movs	r2, #1
 80024f6:	f240 6102 	movw	r1, #1538	@ 0x602
 80024fa:	4618      	mov	r0, r3
 80024fc:	f001 fa3a 	bl	8003974 <CODEC_IO_Write>
 8002500:	4603      	mov	r3, r0
 8002502:	461a      	mov	r2, r3
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	4413      	add	r3, r2
 8002508:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800250a:	89fb      	ldrh	r3, [r7, #14]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2200      	movs	r2, #0
 8002510:	f240 6104 	movw	r1, #1540	@ 0x604
 8002514:	4618      	mov	r0, r3
 8002516:	f001 fa2d 	bl	8003974 <CODEC_IO_Write>
 800251a:	4603      	mov	r3, r0
 800251c:	461a      	mov	r2, r3
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4413      	add	r3, r2
 8002522:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002524:	89fb      	ldrh	r3, [r7, #14]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2200      	movs	r2, #0
 800252a:	f240 6105 	movw	r1, #1541	@ 0x605
 800252e:	4618      	mov	r0, r3
 8002530:	f001 fa20 	bl	8003974 <CODEC_IO_Write>
 8002534:	4603      	mov	r3, r0
 8002536:	461a      	mov	r2, r3
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	4413      	add	r3, r2
 800253c:	61fb      	str	r3, [r7, #28]
      break;
 800253e:	e0ce      	b.n	80026de <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002540:	8afb      	ldrh	r3, [r7, #22]
 8002542:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002546:	d141      	bne.n	80025cc <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002548:	89fb      	ldrh	r3, [r7, #14]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002550:	2105      	movs	r1, #5
 8002552:	4618      	mov	r0, r3
 8002554:	f001 fa0e 	bl	8003974 <CODEC_IO_Write>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	4413      	add	r3, r2
 8002560:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8002562:	89fb      	ldrh	r3, [r7, #14]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2203      	movs	r2, #3
 8002568:	f240 6101 	movw	r1, #1537	@ 0x601
 800256c:	4618      	mov	r0, r3
 800256e:	f001 fa01 	bl	8003974 <CODEC_IO_Write>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	4413      	add	r3, r2
 800257a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 800257c:	89fb      	ldrh	r3, [r7, #14]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2203      	movs	r2, #3
 8002582:	f240 6102 	movw	r1, #1538	@ 0x602
 8002586:	4618      	mov	r0, r3
 8002588:	f001 f9f4 	bl	8003974 <CODEC_IO_Write>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	4413      	add	r3, r2
 8002594:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8002596:	89fb      	ldrh	r3, [r7, #14]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2203      	movs	r2, #3
 800259c:	f240 6104 	movw	r1, #1540	@ 0x604
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 f9e7 	bl	8003974 <CODEC_IO_Write>
 80025a6:	4603      	mov	r3, r0
 80025a8:	461a      	mov	r2, r3
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	4413      	add	r3, r2
 80025ae:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80025b0:	89fb      	ldrh	r3, [r7, #14]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2203      	movs	r2, #3
 80025b6:	f240 6105 	movw	r1, #1541	@ 0x605
 80025ba:	4618      	mov	r0, r3
 80025bc:	f001 f9da 	bl	8003974 <CODEC_IO_Write>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80025ca:	e088      	b.n	80026de <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80025cc:	89fb      	ldrh	r3, [r7, #14]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80025d4:	2105      	movs	r1, #5
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 f9cc 	bl	8003974 <CODEC_IO_Write>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80025e6:	89fb      	ldrh	r3, [r7, #14]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2201      	movs	r2, #1
 80025ec:	f240 6101 	movw	r1, #1537	@ 0x601
 80025f0:	4618      	mov	r0, r3
 80025f2:	f001 f9bf 	bl	8003974 <CODEC_IO_Write>
 80025f6:	4603      	mov	r3, r0
 80025f8:	461a      	mov	r2, r3
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	4413      	add	r3, r2
 80025fe:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002600:	89fb      	ldrh	r3, [r7, #14]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2201      	movs	r2, #1
 8002606:	f240 6102 	movw	r1, #1538	@ 0x602
 800260a:	4618      	mov	r0, r3
 800260c:	f001 f9b2 	bl	8003974 <CODEC_IO_Write>
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	4413      	add	r3, r2
 8002618:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800261a:	89fb      	ldrh	r3, [r7, #14]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2202      	movs	r2, #2
 8002620:	f240 6104 	movw	r1, #1540	@ 0x604
 8002624:	4618      	mov	r0, r3
 8002626:	f001 f9a5 	bl	8003974 <CODEC_IO_Write>
 800262a:	4603      	mov	r3, r0
 800262c:	461a      	mov	r2, r3
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	4413      	add	r3, r2
 8002632:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8002634:	89fb      	ldrh	r3, [r7, #14]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2202      	movs	r2, #2
 800263a:	f240 6105 	movw	r1, #1541	@ 0x605
 800263e:	4618      	mov	r0, r3
 8002640:	f001 f998 	bl	8003974 <CODEC_IO_Write>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	4413      	add	r3, r2
 800264c:	61fb      	str	r3, [r7, #28]
      break;
 800264e:	e046      	b.n	80026de <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002650:	89fb      	ldrh	r3, [r7, #14]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f240 3203 	movw	r2, #771	@ 0x303
 8002658:	2105      	movs	r1, #5
 800265a:	4618      	mov	r0, r3
 800265c:	f001 f98a 	bl	8003974 <CODEC_IO_Write>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	4413      	add	r3, r2
 8002668:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800266a:	89fb      	ldrh	r3, [r7, #14]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2201      	movs	r2, #1
 8002670:	f240 6101 	movw	r1, #1537	@ 0x601
 8002674:	4618      	mov	r0, r3
 8002676:	f001 f97d 	bl	8003974 <CODEC_IO_Write>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	4413      	add	r3, r2
 8002682:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002684:	89fb      	ldrh	r3, [r7, #14]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2201      	movs	r2, #1
 800268a:	f240 6102 	movw	r1, #1538	@ 0x602
 800268e:	4618      	mov	r0, r3
 8002690:	f001 f970 	bl	8003974 <CODEC_IO_Write>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800269e:	89fb      	ldrh	r3, [r7, #14]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2200      	movs	r2, #0
 80026a4:	f240 6104 	movw	r1, #1540	@ 0x604
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 f963 	bl	8003974 <CODEC_IO_Write>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80026b8:	89fb      	ldrh	r3, [r7, #14]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2200      	movs	r2, #0
 80026be:	f240 6105 	movw	r1, #1541	@ 0x605
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 f956 	bl	8003974 <CODEC_IO_Write>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	4413      	add	r3, r2
 80026d0:	61fb      	str	r3, [r7, #28]
      break;
 80026d2:	e004      	b.n	80026de <wm8994_Init+0x39e>
 80026d4:	20000ed4 	.word	0x20000ed4
    }
  }
  else
  {
    outputEnabled = 0;
 80026d8:	4b99      	ldr	r3, [pc, #612]	@ (8002940 <wm8994_Init+0x600>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80026de:	8afb      	ldrh	r3, [r7, #22]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 81ab 	beq.w	8002a3c <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 80026e6:	4b97      	ldr	r3, [pc, #604]	@ (8002944 <wm8994_Init+0x604>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80026ec:	8afb      	ldrh	r3, [r7, #22]
 80026ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026f2:	f000 8129 	beq.w	8002948 <wm8994_Init+0x608>
 80026f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026fa:	f300 819b 	bgt.w	8002a34 <wm8994_Init+0x6f4>
 80026fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002702:	d05a      	beq.n	80027ba <wm8994_Init+0x47a>
 8002704:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002708:	f300 8194 	bgt.w	8002a34 <wm8994_Init+0x6f4>
 800270c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002710:	f000 80c6 	beq.w	80028a0 <wm8994_Init+0x560>
 8002714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002718:	f040 818c 	bne.w	8002a34 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 800271c:	89fb      	ldrh	r3, [r7, #14]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8002724:	2104      	movs	r1, #4
 8002726:	4618      	mov	r0, r3
 8002728:	f001 f924 	bl	8003974 <CODEC_IO_Write>
 800272c:	4603      	mov	r3, r0
 800272e:	461a      	mov	r2, r3
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002736:	89fb      	ldrh	r3, [r7, #14]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	22db      	movs	r2, #219	@ 0xdb
 800273c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002740:	4618      	mov	r0, r3
 8002742:	f001 f917 	bl	8003974 <CODEC_IO_Write>
 8002746:	4603      	mov	r3, r0
 8002748:	461a      	mov	r2, r3
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8002750:	89fb      	ldrh	r3, [r7, #14]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8002758:	2102      	movs	r1, #2
 800275a:	4618      	mov	r0, r3
 800275c:	f001 f90a 	bl	8003974 <CODEC_IO_Write>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	4413      	add	r3, r2
 8002768:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800276a:	89fb      	ldrh	r3, [r7, #14]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2202      	movs	r2, #2
 8002770:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002774:	4618      	mov	r0, r3
 8002776:	f001 f8fd 	bl	8003974 <CODEC_IO_Write>
 800277a:	4603      	mov	r3, r0
 800277c:	461a      	mov	r2, r3
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	4413      	add	r3, r2
 8002782:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002784:	89fb      	ldrh	r3, [r7, #14]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2202      	movs	r2, #2
 800278a:	f240 6109 	movw	r1, #1545	@ 0x609
 800278e:	4618      	mov	r0, r3
 8002790:	f001 f8f0 	bl	8003974 <CODEC_IO_Write>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	4413      	add	r3, r2
 800279c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800279e:	89fb      	ldrh	r3, [r7, #14]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	220e      	movs	r2, #14
 80027a4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 f8e3 	bl	8003974 <CODEC_IO_Write>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	61fb      	str	r3, [r7, #28]
      break;
 80027b8:	e143      	b.n	8002a42 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80027ba:	89fb      	ldrh	r3, [r7, #14]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2211      	movs	r2, #17
 80027c0:	2128      	movs	r1, #40	@ 0x28
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 f8d6 	bl	8003974 <CODEC_IO_Write>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	4413      	add	r3, r2
 80027d0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 80027d2:	89fb      	ldrh	r3, [r7, #14]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2235      	movs	r2, #53	@ 0x35
 80027d8:	2129      	movs	r1, #41	@ 0x29
 80027da:	4618      	mov	r0, r3
 80027dc:	f001 f8ca 	bl	8003974 <CODEC_IO_Write>
 80027e0:	4603      	mov	r3, r0
 80027e2:	461a      	mov	r2, r3
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	4413      	add	r3, r2
 80027e8:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80027ea:	89fb      	ldrh	r3, [r7, #14]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2235      	movs	r2, #53	@ 0x35
 80027f0:	212a      	movs	r1, #42	@ 0x2a
 80027f2:	4618      	mov	r0, r3
 80027f4:	f001 f8be 	bl	8003974 <CODEC_IO_Write>
 80027f8:	4603      	mov	r3, r0
 80027fa:	461a      	mov	r2, r3
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	4413      	add	r3, r2
 8002800:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8002802:	89fb      	ldrh	r3, [r7, #14]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f240 3203 	movw	r2, #771	@ 0x303
 800280a:	2104      	movs	r1, #4
 800280c:	4618      	mov	r0, r3
 800280e:	f001 f8b1 	bl	8003974 <CODEC_IO_Write>
 8002812:	4603      	mov	r3, r0
 8002814:	461a      	mov	r2, r3
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	4413      	add	r3, r2
 800281a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800281c:	89fb      	ldrh	r3, [r7, #14]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	22db      	movs	r2, #219	@ 0xdb
 8002822:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002826:	4618      	mov	r0, r3
 8002828:	f001 f8a4 	bl	8003974 <CODEC_IO_Write>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	4413      	add	r3, r2
 8002834:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002836:	89fb      	ldrh	r3, [r7, #14]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f246 3250 	movw	r2, #25424	@ 0x6350
 800283e:	2102      	movs	r1, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f001 f897 	bl	8003974 <CODEC_IO_Write>
 8002846:	4603      	mov	r3, r0
 8002848:	461a      	mov	r2, r3
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	4413      	add	r3, r2
 800284e:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002850:	89fb      	ldrh	r3, [r7, #14]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2202      	movs	r2, #2
 8002856:	f240 6106 	movw	r1, #1542	@ 0x606
 800285a:	4618      	mov	r0, r3
 800285c:	f001 f88a 	bl	8003974 <CODEC_IO_Write>
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4413      	add	r3, r2
 8002868:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800286a:	89fb      	ldrh	r3, [r7, #14]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2202      	movs	r2, #2
 8002870:	f240 6107 	movw	r1, #1543	@ 0x607
 8002874:	4618      	mov	r0, r3
 8002876:	f001 f87d 	bl	8003974 <CODEC_IO_Write>
 800287a:	4603      	mov	r3, r0
 800287c:	461a      	mov	r2, r3
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	4413      	add	r3, r2
 8002882:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002884:	89fb      	ldrh	r3, [r7, #14]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	220d      	movs	r2, #13
 800288a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800288e:	4618      	mov	r0, r3
 8002890:	f001 f870 	bl	8003974 <CODEC_IO_Write>
 8002894:	4603      	mov	r3, r0
 8002896:	461a      	mov	r2, r3
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	61fb      	str	r3, [r7, #28]
      break;
 800289e:	e0d0      	b.n	8002a42 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80028a0:	89fb      	ldrh	r3, [r7, #14]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 80028a8:	2104      	movs	r1, #4
 80028aa:	4618      	mov	r0, r3
 80028ac:	f001 f862 	bl	8003974 <CODEC_IO_Write>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	4413      	add	r3, r2
 80028b8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80028ba:	89fb      	ldrh	r3, [r7, #14]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	22db      	movs	r2, #219	@ 0xdb
 80028c0:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80028c4:	4618      	mov	r0, r3
 80028c6:	f001 f855 	bl	8003974 <CODEC_IO_Write>
 80028ca:	4603      	mov	r3, r0
 80028cc:	461a      	mov	r2, r3
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	4413      	add	r3, r2
 80028d2:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80028d4:	89fb      	ldrh	r3, [r7, #14]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f246 3250 	movw	r2, #25424	@ 0x6350
 80028dc:	2102      	movs	r1, #2
 80028de:	4618      	mov	r0, r3
 80028e0:	f001 f848 	bl	8003974 <CODEC_IO_Write>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461a      	mov	r2, r3
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	4413      	add	r3, r2
 80028ec:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80028ee:	89fb      	ldrh	r3, [r7, #14]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2202      	movs	r2, #2
 80028f4:	f240 6106 	movw	r1, #1542	@ 0x606
 80028f8:	4618      	mov	r0, r3
 80028fa:	f001 f83b 	bl	8003974 <CODEC_IO_Write>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	4413      	add	r3, r2
 8002906:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002908:	89fb      	ldrh	r3, [r7, #14]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2202      	movs	r2, #2
 800290e:	f240 6107 	movw	r1, #1543	@ 0x607
 8002912:	4618      	mov	r0, r3
 8002914:	f001 f82e 	bl	8003974 <CODEC_IO_Write>
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	4413      	add	r3, r2
 8002920:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002922:	89fb      	ldrh	r3, [r7, #14]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	220d      	movs	r2, #13
 8002928:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800292c:	4618      	mov	r0, r3
 800292e:	f001 f821 	bl	8003974 <CODEC_IO_Write>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	4413      	add	r3, r2
 800293a:	61fb      	str	r3, [r7, #28]
      break; 
 800293c:	e081      	b.n	8002a42 <wm8994_Init+0x702>
 800293e:	bf00      	nop
 8002940:	20000ed4 	.word	0x20000ed4
 8002944:	20000ed8 	.word	0x20000ed8
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002948:	89fb      	ldrh	r3, [r7, #14]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8002950:	2104      	movs	r1, #4
 8002952:	4618      	mov	r0, r3
 8002954:	f001 f80e 	bl	8003974 <CODEC_IO_Write>
 8002958:	4603      	mov	r3, r0
 800295a:	461a      	mov	r2, r3
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4413      	add	r3, r2
 8002960:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	22db      	movs	r2, #219	@ 0xdb
 8002968:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800296c:	4618      	mov	r0, r3
 800296e:	f001 f801 	bl	8003974 <CODEC_IO_Write>
 8002972:	4603      	mov	r3, r0
 8002974:	461a      	mov	r2, r3
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	4413      	add	r3, r2
 800297a:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800297c:	89fb      	ldrh	r3, [r7, #14]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	22db      	movs	r2, #219	@ 0xdb
 8002982:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fff4 	bl	8003974 <CODEC_IO_Write>
 800298c:	4603      	mov	r3, r0
 800298e:	461a      	mov	r2, r3
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	4413      	add	r3, r2
 8002994:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8002996:	89fb      	ldrh	r3, [r7, #14]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 800299e:	2102      	movs	r1, #2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 ffe7 	bl	8003974 <CODEC_IO_Write>
 80029a6:	4603      	mov	r3, r0
 80029a8:	461a      	mov	r2, r3
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	4413      	add	r3, r2
 80029ae:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80029b0:	89fb      	ldrh	r3, [r7, #14]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2202      	movs	r2, #2
 80029b6:	f240 6106 	movw	r1, #1542	@ 0x606
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 ffda 	bl	8003974 <CODEC_IO_Write>
 80029c0:	4603      	mov	r3, r0
 80029c2:	461a      	mov	r2, r3
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	4413      	add	r3, r2
 80029c8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80029ca:	89fb      	ldrh	r3, [r7, #14]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2202      	movs	r2, #2
 80029d0:	f240 6107 	movw	r1, #1543	@ 0x607
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 ffcd 	bl	8003974 <CODEC_IO_Write>
 80029da:	4603      	mov	r3, r0
 80029dc:	461a      	mov	r2, r3
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	4413      	add	r3, r2
 80029e2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80029e4:	89fb      	ldrh	r3, [r7, #14]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2202      	movs	r2, #2
 80029ea:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 ffc0 	bl	8003974 <CODEC_IO_Write>
 80029f4:	4603      	mov	r3, r0
 80029f6:	461a      	mov	r2, r3
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80029fe:	89fb      	ldrh	r3, [r7, #14]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2202      	movs	r2, #2
 8002a04:	f240 6109 	movw	r1, #1545	@ 0x609
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 ffb3 	bl	8003974 <CODEC_IO_Write>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461a      	mov	r2, r3
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002a18:	89fb      	ldrh	r3, [r7, #14]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	220d      	movs	r2, #13
 8002a1e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 ffa6 	bl	8003974 <CODEC_IO_Write>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	4413      	add	r3, r2
 8002a30:	61fb      	str	r3, [r7, #28]
      break;    
 8002a32:	e006      	b.n	8002a42 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	3301      	adds	r3, #1
 8002a38:	61fb      	str	r3, [r7, #28]
      break;
 8002a3a:	e002      	b.n	8002a42 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002a3c:	4ba4      	ldr	r3, [pc, #656]	@ (8002cd0 <wm8994_Init+0x990>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4aa3      	ldr	r2, [pc, #652]	@ (8002cd4 <wm8994_Init+0x994>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d079      	beq.n	8002b3e <wm8994_Init+0x7fe>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4aa1      	ldr	r2, [pc, #644]	@ (8002cd4 <wm8994_Init+0x994>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	f200 80ad 	bhi.w	8002bae <wm8994_Init+0x86e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d061      	beq.n	8002b22 <wm8994_Init+0x7e2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002a64:	4293      	cmp	r3, r2
 8002a66:	f200 80a2 	bhi.w	8002bae <wm8994_Init+0x86e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002a70:	4293      	cmp	r3, r2
 8002a72:	f000 808e 	beq.w	8002b92 <wm8994_Init+0x852>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	f200 8096 	bhi.w	8002bae <wm8994_Init+0x86e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002a88:	d03d      	beq.n	8002b06 <wm8994_Init+0x7c6>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002a90:	f200 808d 	bhi.w	8002bae <wm8994_Init+0x86e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d06b      	beq.n	8002b76 <wm8994_Init+0x836>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	f200 8082 	bhi.w	8002bae <wm8994_Init+0x86e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002ab0:	d01b      	beq.n	8002aea <wm8994_Init+0x7aa>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002ab8:	d879      	bhi.n	8002bae <wm8994_Init+0x86e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002ac0:	d005      	beq.n	8002ace <wm8994_Init+0x78e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d046      	beq.n	8002b5a <wm8994_Init+0x81a>
 8002acc:	e06f      	b.n	8002bae <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002ace:	89fb      	ldrh	r3, [r7, #14]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 ff4b 	bl	8003974 <CODEC_IO_Write>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	61fb      	str	r3, [r7, #28]
    break;
 8002ae8:	e06f      	b.n	8002bca <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002aea:	89fb      	ldrh	r3, [r7, #14]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2233      	movs	r2, #51	@ 0x33
 8002af0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 ff3d 	bl	8003974 <CODEC_IO_Write>
 8002afa:	4603      	mov	r3, r0
 8002afc:	461a      	mov	r2, r3
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	4413      	add	r3, r2
 8002b02:	61fb      	str	r3, [r7, #28]
    break;
 8002b04:	e061      	b.n	8002bca <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002b06:	89fb      	ldrh	r3, [r7, #14]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2263      	movs	r2, #99	@ 0x63
 8002b0c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 ff2f 	bl	8003974 <CODEC_IO_Write>
 8002b16:	4603      	mov	r3, r0
 8002b18:	461a      	mov	r2, r3
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	61fb      	str	r3, [r7, #28]
    break;
 8002b20:	e053      	b.n	8002bca <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002b22:	89fb      	ldrh	r3, [r7, #14]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2283      	movs	r2, #131	@ 0x83
 8002b28:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 ff21 	bl	8003974 <CODEC_IO_Write>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461a      	mov	r2, r3
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	4413      	add	r3, r2
 8002b3a:	61fb      	str	r3, [r7, #28]
    break;
 8002b3c:	e045      	b.n	8002bca <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002b3e:	89fb      	ldrh	r3, [r7, #14]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	22a3      	movs	r2, #163	@ 0xa3
 8002b44:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 ff13 	bl	8003974 <CODEC_IO_Write>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	4413      	add	r3, r2
 8002b56:	61fb      	str	r3, [r7, #28]
    break;
 8002b58:	e037      	b.n	8002bca <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002b5a:	89fb      	ldrh	r3, [r7, #14]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2213      	movs	r2, #19
 8002b60:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 ff05 	bl	8003974 <CODEC_IO_Write>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	4413      	add	r3, r2
 8002b72:	61fb      	str	r3, [r7, #28]
    break;
 8002b74:	e029      	b.n	8002bca <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002b76:	89fb      	ldrh	r3, [r7, #14]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2243      	movs	r2, #67	@ 0x43
 8002b7c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fef7 	bl	8003974 <CODEC_IO_Write>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	61fb      	str	r3, [r7, #28]
    break;
 8002b90:	e01b      	b.n	8002bca <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8002b92:	89fb      	ldrh	r3, [r7, #14]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2273      	movs	r2, #115	@ 0x73
 8002b98:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fee9 	bl	8003974 <CODEC_IO_Write>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	4413      	add	r3, r2
 8002baa:	61fb      	str	r3, [r7, #28]
    break; 
 8002bac:	e00d      	b.n	8002bca <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002bae:	89fb      	ldrh	r3, [r7, #14]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2283      	movs	r2, #131	@ 0x83
 8002bb4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fedb 	bl	8003974 <CODEC_IO_Write>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	61fb      	str	r3, [r7, #28]
    break; 
 8002bc8:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002bca:	8afb      	ldrh	r3, [r7, #22]
 8002bcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bd0:	d10e      	bne.n	8002bf0 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8002bd2:	89fb      	ldrh	r3, [r7, #14]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f244 0218 	movw	r2, #16408	@ 0x4018
 8002bda:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fec8 	bl	8003974 <CODEC_IO_Write>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	4413      	add	r3, r2
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	e00d      	b.n	8002c0c <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002bf0:	89fb      	ldrh	r3, [r7, #14]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f244 0210 	movw	r2, #16400	@ 0x4010
 8002bf8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 feb9 	bl	8003974 <CODEC_IO_Write>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	4413      	add	r3, r2
 8002c0a:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002c0c:	89fb      	ldrh	r3, [r7, #14]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	f240 3102 	movw	r1, #770	@ 0x302
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 feac 	bl	8003974 <CODEC_IO_Write>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	461a      	mov	r2, r3
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	4413      	add	r3, r2
 8002c24:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8002c26:	89fb      	ldrh	r3, [r7, #14]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	220a      	movs	r2, #10
 8002c2c:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fe9f 	bl	8003974 <CODEC_IO_Write>
 8002c36:	4603      	mov	r3, r0
 8002c38:	461a      	mov	r2, r3
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8002c40:	89fb      	ldrh	r3, [r7, #14]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2201      	movs	r2, #1
 8002c46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fe92 	bl	8003974 <CODEC_IO_Write>
 8002c50:	4603      	mov	r3, r0
 8002c52:	461a      	mov	r2, r3
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	4413      	add	r3, r2
 8002c58:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8002c5a:	8b3b      	ldrh	r3, [r7, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 817b 	beq.w	8002f58 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8002c62:	8b3b      	ldrh	r3, [r7, #24]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d157      	bne.n	8002d18 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8002c68:	89fb      	ldrh	r3, [r7, #14]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c70:	212d      	movs	r1, #45	@ 0x2d
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fe7e 	bl	8003974 <CODEC_IO_Write>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	4413      	add	r3, r2
 8002c80:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8002c82:	89fb      	ldrh	r3, [r7, #14]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c8a:	212e      	movs	r1, #46	@ 0x2e
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fe71 	bl	8003974 <CODEC_IO_Write>
 8002c92:	4603      	mov	r3, r0
 8002c94:	461a      	mov	r2, r3
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	4413      	add	r3, r2
 8002c9a:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd8 <wm8994_Init+0x998>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d01b      	beq.n	8002cdc <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8002ca4:	89fb      	ldrh	r3, [r7, #14]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8002cac:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fe5f 	bl	8003974 <CODEC_IO_Write>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	461a      	mov	r2, r3
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8002cc0:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <wm8994_Init+0x998>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8002cc6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002cca:	f001 f829 	bl	8003d20 <AUDIO_IO_Delay>
 8002cce:	e016      	b.n	8002cfe <wm8994_Init+0x9be>
 8002cd0:	20000ed8 	.word	0x20000ed8
 8002cd4:	00017700 	.word	0x00017700
 8002cd8:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8002cdc:	89fb      	ldrh	r3, [r7, #14]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f248 1208 	movw	r2, #33032	@ 0x8108
 8002ce4:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fe43 	bl	8003974 <CODEC_IO_Write>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8002cf8:	2032      	movs	r0, #50	@ 0x32
 8002cfa:	f001 f811 	bl	8003d20 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8002cfe:	89fb      	ldrh	r3, [r7, #14]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2200      	movs	r2, #0
 8002d04:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fe33 	bl	8003974 <CODEC_IO_Write>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	4413      	add	r3, r2
 8002d16:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8002d18:	89fb      	ldrh	r3, [r7, #14]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002d20:	2103      	movs	r1, #3
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fe26 	bl	8003974 <CODEC_IO_Write>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	4413      	add	r3, r2
 8002d30:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8002d32:	89fb      	ldrh	r3, [r7, #14]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2200      	movs	r2, #0
 8002d38:	2122      	movs	r1, #34	@ 0x22
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fe1a 	bl	8003974 <CODEC_IO_Write>
 8002d40:	4603      	mov	r3, r0
 8002d42:	461a      	mov	r2, r3
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	4413      	add	r3, r2
 8002d48:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8002d4a:	89fb      	ldrh	r3, [r7, #14]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2123      	movs	r1, #35	@ 0x23
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fe0e 	bl	8003974 <CODEC_IO_Write>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4413      	add	r3, r2
 8002d60:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8002d62:	89fb      	ldrh	r3, [r7, #14]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002d6a:	2136      	movs	r1, #54	@ 0x36
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fe01 	bl	8003974 <CODEC_IO_Write>
 8002d72:	4603      	mov	r3, r0
 8002d74:	461a      	mov	r2, r3
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	4413      	add	r3, r2
 8002d7a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8002d7c:	89fb      	ldrh	r3, [r7, #14]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f243 0203 	movw	r2, #12291	@ 0x3003
 8002d84:	2101      	movs	r1, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fdf4 	bl	8003974 <CODEC_IO_Write>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	461a      	mov	r2, r3
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	4413      	add	r3, r2
 8002d94:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002d96:	8afb      	ldrh	r3, [r7, #22]
 8002d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d9c:	d10d      	bne.n	8002dba <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8002d9e:	89fb      	ldrh	r3, [r7, #14]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	f240 2205 	movw	r2, #517	@ 0x205
 8002da6:	2151      	movs	r1, #81	@ 0x51
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fde3 	bl	8003974 <CODEC_IO_Write>
 8002dae:	4603      	mov	r3, r0
 8002db0:	461a      	mov	r2, r3
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	4413      	add	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	e00b      	b.n	8002dd2 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8002dba:	89fb      	ldrh	r3, [r7, #14]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2205      	movs	r2, #5
 8002dc0:	2151      	movs	r1, #81	@ 0x51
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fdd6 	bl	8003974 <CODEC_IO_Write>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	4413      	add	r3, r2
 8002dd0:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8002dd2:	8b7b      	ldrh	r3, [r7, #26]
 8002dd4:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8002dd8:	f043 0303 	orr.w	r3, r3, #3
 8002ddc:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002dde:	89fb      	ldrh	r3, [r7, #14]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	8b7a      	ldrh	r2, [r7, #26]
 8002de4:	2101      	movs	r1, #1
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fdc4 	bl	8003974 <CODEC_IO_Write>
 8002dec:	4603      	mov	r3, r0
 8002dee:	461a      	mov	r2, r3
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002df6:	89fb      	ldrh	r3, [r7, #14]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2222      	movs	r2, #34	@ 0x22
 8002dfc:	2160      	movs	r1, #96	@ 0x60
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fdb8 	bl	8003974 <CODEC_IO_Write>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461a      	mov	r2, r3
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002e0e:	89fb      	ldrh	r3, [r7, #14]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8002e16:	214c      	movs	r1, #76	@ 0x4c
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fdab 	bl	8003974 <CODEC_IO_Write>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	461a      	mov	r2, r3
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	4413      	add	r3, r2
 8002e26:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8002e28:	200f      	movs	r0, #15
 8002e2a:	f000 ff79 	bl	8003d20 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002e2e:	89fb      	ldrh	r3, [r7, #14]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2201      	movs	r2, #1
 8002e34:	212d      	movs	r1, #45	@ 0x2d
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fd9c 	bl	8003974 <CODEC_IO_Write>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461a      	mov	r2, r3
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	4413      	add	r3, r2
 8002e44:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8002e46:	89fb      	ldrh	r3, [r7, #14]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	212e      	movs	r1, #46	@ 0x2e
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fd90 	bl	8003974 <CODEC_IO_Write>
 8002e54:	4603      	mov	r3, r0
 8002e56:	461a      	mov	r2, r3
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002e5e:	89fb      	ldrh	r3, [r7, #14]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8002e66:	2103      	movs	r1, #3
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fd83 	bl	8003974 <CODEC_IO_Write>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	461a      	mov	r2, r3
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	4413      	add	r3, r2
 8002e76:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002e78:	89fb      	ldrh	r3, [r7, #14]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2233      	movs	r2, #51	@ 0x33
 8002e7e:	2154      	movs	r1, #84	@ 0x54
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fd77 	bl	8003974 <CODEC_IO_Write>
 8002e86:	4603      	mov	r3, r0
 8002e88:	461a      	mov	r2, r3
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8002e90:	f240 1001 	movw	r0, #257	@ 0x101
 8002e94:	f000 ff44 	bl	8003d20 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8002e98:	89fb      	ldrh	r3, [r7, #14]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	22ee      	movs	r2, #238	@ 0xee
 8002e9e:	2160      	movs	r1, #96	@ 0x60
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fd67 	bl	8003974 <CODEC_IO_Write>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	4413      	add	r3, r2
 8002eae:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8002eb0:	89fb      	ldrh	r3, [r7, #14]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	22c0      	movs	r2, #192	@ 0xc0
 8002eb6:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fd5a 	bl	8003974 <CODEC_IO_Write>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8002eca:	89fb      	ldrh	r3, [r7, #14]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	22c0      	movs	r2, #192	@ 0xc0
 8002ed0:	f240 6111 	movw	r1, #1553	@ 0x611
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fd4d 	bl	8003974 <CODEC_IO_Write>
 8002eda:	4603      	mov	r3, r0
 8002edc:	461a      	mov	r2, r3
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8002ee4:	89fb      	ldrh	r3, [r7, #14]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2210      	movs	r2, #16
 8002eea:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fd40 	bl	8003974 <CODEC_IO_Write>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	4413      	add	r3, r2
 8002efc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8002efe:	89fb      	ldrh	r3, [r7, #14]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	22c0      	movs	r2, #192	@ 0xc0
 8002f04:	f240 6112 	movw	r1, #1554	@ 0x612
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fd33 	bl	8003974 <CODEC_IO_Write>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	461a      	mov	r2, r3
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4413      	add	r3, r2
 8002f16:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8002f18:	89fb      	ldrh	r3, [r7, #14]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	22c0      	movs	r2, #192	@ 0xc0
 8002f1e:	f240 6113 	movw	r1, #1555	@ 0x613
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fd26 	bl	8003974 <CODEC_IO_Write>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	4413      	add	r3, r2
 8002f30:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8002f32:	89fb      	ldrh	r3, [r7, #14]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2210      	movs	r2, #16
 8002f38:	f240 4122 	movw	r1, #1058	@ 0x422
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fd19 	bl	8003974 <CODEC_IO_Write>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461a      	mov	r2, r3
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	4413      	add	r3, r2
 8002f4a:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002f4c:	7afa      	ldrb	r2, [r7, #11]
 8002f4e:	89fb      	ldrh	r3, [r7, #14]
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f984 	bl	8003260 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8002f58:	8afb      	ldrh	r3, [r7, #22]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80a6 	beq.w	80030ac <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8002f60:	8afb      	ldrh	r3, [r7, #22]
 8002f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f66:	d003      	beq.n	8002f70 <wm8994_Init+0xc30>
 8002f68:	8afb      	ldrh	r3, [r7, #22]
 8002f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f6e:	d12b      	bne.n	8002fc8 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002f70:	8b7b      	ldrh	r3, [r7, #26]
 8002f72:	f043 0313 	orr.w	r3, r3, #19
 8002f76:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002f78:	89fb      	ldrh	r3, [r7, #14]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	8b7a      	ldrh	r2, [r7, #26]
 8002f7e:	2101      	movs	r1, #1
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fcf7 	bl	8003974 <CODEC_IO_Write>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002f90:	89fb      	ldrh	r3, [r7, #14]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2202      	movs	r2, #2
 8002f96:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fcea 	bl	8003974 <CODEC_IO_Write>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8002faa:	89fb      	ldrh	r3, [r7, #14]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002fb2:	f240 4111 	movw	r1, #1041	@ 0x411
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fcdc 	bl	8003974 <CODEC_IO_Write>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	e06b      	b.n	80030a0 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002fc8:	8afb      	ldrh	r3, [r7, #22]
 8002fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fce:	d139      	bne.n	8003044 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002fd0:	8b7b      	ldrh	r3, [r7, #26]
 8002fd2:	f043 0313 	orr.w	r3, r3, #19
 8002fd6:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002fd8:	89fb      	ldrh	r3, [r7, #14]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	8b7a      	ldrh	r2, [r7, #26]
 8002fde:	2101      	movs	r1, #1
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fcc7 	bl	8003974 <CODEC_IO_Write>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	4413      	add	r3, r2
 8002fee:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002ff0:	89fb      	ldrh	r3, [r7, #14]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fcba 	bl	8003974 <CODEC_IO_Write>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	4413      	add	r3, r2
 8003008:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800300a:	89fb      	ldrh	r3, [r7, #14]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003012:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fcac 	bl	8003974 <CODEC_IO_Write>
 800301c:	4603      	mov	r3, r0
 800301e:	461a      	mov	r2, r3
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4413      	add	r3, r2
 8003024:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8003026:	89fb      	ldrh	r3, [r7, #14]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800302e:	f240 4111 	movw	r1, #1041	@ 0x411
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fc9e 	bl	8003974 <CODEC_IO_Write>
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	4413      	add	r3, r2
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	e02d      	b.n	80030a0 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8003044:	8afb      	ldrh	r3, [r7, #22]
 8003046:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800304a:	d003      	beq.n	8003054 <wm8994_Init+0xd14>
 800304c:	8afb      	ldrh	r3, [r7, #22]
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003052:	d125      	bne.n	80030a0 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8003054:	89fb      	ldrh	r3, [r7, #14]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	220b      	movs	r2, #11
 800305a:	2118      	movs	r1, #24
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fc89 	bl	8003974 <CODEC_IO_Write>
 8003062:	4603      	mov	r3, r0
 8003064:	461a      	mov	r2, r3
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	4413      	add	r3, r2
 800306a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 800306c:	89fb      	ldrh	r3, [r7, #14]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	220b      	movs	r2, #11
 8003072:	211a      	movs	r1, #26
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fc7d 	bl	8003974 <CODEC_IO_Write>
 800307a:	4603      	mov	r3, r0
 800307c:	461a      	mov	r2, r3
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	4413      	add	r3, r2
 8003082:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003084:	89fb      	ldrh	r3, [r7, #14]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800308c:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fc6f 	bl	8003974 <CODEC_IO_Write>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	4413      	add	r3, r2
 800309e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80030a0:	7afa      	ldrb	r2, [r7, #11]
 80030a2:	89fb      	ldrh	r3, [r7, #14]
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f8da 	bl	8003260 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 80030ac:	69fb      	ldr	r3, [r7, #28]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop

080030b8 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80030bc:	f000 fdd2 	bl	8003c64 <AUDIO_IO_DeInit>
}
 80030c0:	bf00      	nop
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80030ce:	f000 fdbf 	bl	8003c50 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2100      	movs	r1, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fdf5 	bl	8003cc8 <AUDIO_IO_Read>
 80030de:	4603      	mov	r3, r0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	6039      	str	r1, [r7, #0]
 80030f2:	80fb      	strh	r3, [r7, #6]
 80030f4:	4613      	mov	r3, r2
 80030f6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80030fc:	88fb      	ldrh	r3, [r7, #6]
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f000 f9d1 	bl	80034a8 <wm8994_SetMute>
 8003106:	4602      	mov	r2, r0
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4413      	add	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	2101      	movs	r1, #1
 800312a:	4618      	mov	r0, r3
 800312c:	f000 f9bc 	bl	80034a8 <wm8994_SetMute>
 8003130:	4602      	mov	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4413      	add	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2201      	movs	r2, #1
 800313e:	2102      	movs	r1, #2
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fc17 	bl	8003974 <CODEC_IO_Write>
 8003146:	4603      	mov	r3, r0
 8003148:	461a      	mov	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4413      	add	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8003150:	68fb      	ldr	r3, [r7, #12]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f000 f99b 	bl	80034a8 <wm8994_SetMute>
 8003172:	4602      	mov	r2, r0
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800317a:	68fb      	ldr	r3, [r7, #12]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	6039      	str	r1, [r7, #0]
 800318e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8003194:	4b31      	ldr	r3, [pc, #196]	@ (800325c <wm8994_Stop+0xd8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d05a      	beq.n	8003252 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	2101      	movs	r1, #1
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 f981 	bl	80034a8 <wm8994_SetMute>
 80031a6:	4602      	mov	r2, r0
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d04e      	beq.n	8003252 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031bc:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fbd7 	bl	8003974 <CODEC_IO_Write>
 80031c6:	4603      	mov	r3, r0
 80031c8:	461a      	mov	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4413      	add	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031d8:	f240 4122 	movw	r1, #1058	@ 0x422
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fbc9 	bl	8003974 <CODEC_IO_Write>
 80031e2:	4603      	mov	r3, r0
 80031e4:	461a      	mov	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4413      	add	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2200      	movs	r2, #0
 80031f2:	212d      	movs	r1, #45	@ 0x2d
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fbbd 	bl	8003974 <CODEC_IO_Write>
 80031fa:	4603      	mov	r3, r0
 80031fc:	461a      	mov	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8003204:	88fb      	ldrh	r3, [r7, #6]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2200      	movs	r2, #0
 800320a:	212e      	movs	r1, #46	@ 0x2e
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fbb1 	bl	8003974 <CODEC_IO_Write>
 8003212:	4603      	mov	r3, r0
 8003214:	461a      	mov	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4413      	add	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2200      	movs	r2, #0
 8003222:	2105      	movs	r1, #5
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fba5 	bl	8003974 <CODEC_IO_Write>
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4413      	add	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2200      	movs	r2, #0
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fb99 	bl	8003974 <CODEC_IO_Write>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4413      	add	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 800324c:	4b03      	ldr	r3, [pc, #12]	@ (800325c <wm8994_Stop+0xd8>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8003252:	68fb      	ldr	r3, [r7, #12]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20000ed4 	.word	0x20000ed4

08003260 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	460a      	mov	r2, r1
 800326a:	80fb      	strh	r3, [r7, #6]
 800326c:	4613      	mov	r3, r2
 800326e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8003274:	797b      	ldrb	r3, [r7, #5]
 8003276:	2b64      	cmp	r3, #100	@ 0x64
 8003278:	d80b      	bhi.n	8003292 <wm8994_SetVolume+0x32>
 800327a:	797a      	ldrb	r2, [r7, #5]
 800327c:	4613      	mov	r3, r2
 800327e:	019b      	lsls	r3, r3, #6
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	4a86      	ldr	r2, [pc, #536]	@ (800349c <wm8994_SetVolume+0x23c>)
 8003284:	fb82 1203 	smull	r1, r2, r2, r3
 8003288:	1152      	asrs	r2, r2, #5
 800328a:	17db      	asrs	r3, r3, #31
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	e000      	b.n	8003294 <wm8994_SetVolume+0x34>
 8003292:	2364      	movs	r3, #100	@ 0x64
 8003294:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8003296:	4b82      	ldr	r3, [pc, #520]	@ (80034a0 <wm8994_SetVolume+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 809b 	beq.w	80033d6 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 80032a0:	7afb      	ldrb	r3, [r7, #11]
 80032a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80032a4:	d93d      	bls.n	8003322 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f8fc 	bl	80034a8 <wm8994_SetMute>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4413      	add	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f240 127f 	movw	r2, #383	@ 0x17f
 80032c0:	211c      	movs	r1, #28
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fb56 	bl	8003974 <CODEC_IO_Write>
 80032c8:	4603      	mov	r3, r0
 80032ca:	461a      	mov	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f240 127f 	movw	r2, #383	@ 0x17f
 80032da:	211d      	movs	r1, #29
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fb49 	bl	8003974 <CODEC_IO_Write>
 80032e2:	4603      	mov	r3, r0
 80032e4:	461a      	mov	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4413      	add	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f240 127f 	movw	r2, #383	@ 0x17f
 80032f4:	2126      	movs	r1, #38	@ 0x26
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fb3c 	bl	8003974 <CODEC_IO_Write>
 80032fc:	4603      	mov	r3, r0
 80032fe:	461a      	mov	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f240 127f 	movw	r2, #383	@ 0x17f
 800330e:	2127      	movs	r1, #39	@ 0x27
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fb2f 	bl	8003974 <CODEC_IO_Write>
 8003316:	4603      	mov	r3, r0
 8003318:	461a      	mov	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4413      	add	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e059      	b.n	80033d6 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8003322:	797b      	ldrb	r3, [r7, #5]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	2101      	movs	r1, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f8bb 	bl	80034a8 <wm8994_SetMute>
 8003332:	4602      	mov	r2, r0
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	e04c      	b.n	80033d6 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f000 f8b1 	bl	80034a8 <wm8994_SetMute>
 8003346:	4602      	mov	r2, r0
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4413      	add	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	b2d8      	uxtb	r0, r3
 8003352:	7afb      	ldrb	r3, [r7, #11]
 8003354:	b21b      	sxth	r3, r3
 8003356:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800335a:	b21b      	sxth	r3, r3
 800335c:	b29b      	uxth	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	211c      	movs	r1, #28
 8003362:	f000 fb07 	bl	8003974 <CODEC_IO_Write>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4413      	add	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	b2d8      	uxtb	r0, r3
 8003374:	7afb      	ldrb	r3, [r7, #11]
 8003376:	b21b      	sxth	r3, r3
 8003378:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800337c:	b21b      	sxth	r3, r3
 800337e:	b29b      	uxth	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	211d      	movs	r1, #29
 8003384:	f000 faf6 	bl	8003974 <CODEC_IO_Write>
 8003388:	4603      	mov	r3, r0
 800338a:	461a      	mov	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4413      	add	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	b2d8      	uxtb	r0, r3
 8003396:	7afb      	ldrb	r3, [r7, #11]
 8003398:	b21b      	sxth	r3, r3
 800339a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800339e:	b21b      	sxth	r3, r3
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	2126      	movs	r1, #38	@ 0x26
 80033a6:	f000 fae5 	bl	8003974 <CODEC_IO_Write>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4413      	add	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	b2d8      	uxtb	r0, r3
 80033b8:	7afb      	ldrb	r3, [r7, #11]
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80033c0:	b21b      	sxth	r3, r3
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	2127      	movs	r1, #39	@ 0x27
 80033c8:	f000 fad4 	bl	8003974 <CODEC_IO_Write>
 80033cc:	4603      	mov	r3, r0
 80033ce:	461a      	mov	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80033d6:	4b33      	ldr	r3, [pc, #204]	@ (80034a4 <wm8994_SetVolume+0x244>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d059      	beq.n	8003492 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80033de:	797b      	ldrb	r3, [r7, #5]
 80033e0:	2b63      	cmp	r3, #99	@ 0x63
 80033e2:	d80c      	bhi.n	80033fe <wm8994_SetVolume+0x19e>
 80033e4:	797a      	ldrb	r2, [r7, #5]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	4a2b      	ldr	r2, [pc, #172]	@ (800349c <wm8994_SetVolume+0x23c>)
 80033f0:	fb82 1203 	smull	r1, r2, r2, r3
 80033f4:	1152      	asrs	r2, r2, #5
 80033f6:	17db      	asrs	r3, r3, #31
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	e000      	b.n	8003400 <wm8994_SetVolume+0x1a0>
 80033fe:	23ef      	movs	r3, #239	@ 0xef
 8003400:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	b2d8      	uxtb	r0, r3
 8003406:	7afb      	ldrb	r3, [r7, #11]
 8003408:	b21b      	sxth	r3, r3
 800340a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800340e:	b21b      	sxth	r3, r3
 8003410:	b29b      	uxth	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003418:	f000 faac 	bl	8003974 <CODEC_IO_Write>
 800341c:	4603      	mov	r3, r0
 800341e:	461a      	mov	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	b2d8      	uxtb	r0, r3
 800342a:	7afb      	ldrb	r3, [r7, #11]
 800342c:	b21b      	sxth	r3, r3
 800342e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003432:	b21b      	sxth	r3, r3
 8003434:	b29b      	uxth	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	f240 4101 	movw	r1, #1025	@ 0x401
 800343c:	f000 fa9a 	bl	8003974 <CODEC_IO_Write>
 8003440:	4603      	mov	r3, r0
 8003442:	461a      	mov	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	b2d8      	uxtb	r0, r3
 800344e:	7afb      	ldrb	r3, [r7, #11]
 8003450:	b21b      	sxth	r3, r3
 8003452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003456:	b21b      	sxth	r3, r3
 8003458:	b29b      	uxth	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	f240 4104 	movw	r1, #1028	@ 0x404
 8003460:	f000 fa88 	bl	8003974 <CODEC_IO_Write>
 8003464:	4603      	mov	r3, r0
 8003466:	461a      	mov	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	b2d8      	uxtb	r0, r3
 8003472:	7afb      	ldrb	r3, [r7, #11]
 8003474:	b21b      	sxth	r3, r3
 8003476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800347a:	b21b      	sxth	r3, r3
 800347c:	b29b      	uxth	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	f240 4105 	movw	r1, #1029	@ 0x405
 8003484:	f000 fa76 	bl	8003974 <CODEC_IO_Write>
 8003488:	4603      	mov	r3, r0
 800348a:	461a      	mov	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8003492:	68fb      	ldr	r3, [r7, #12]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	51eb851f 	.word	0x51eb851f
 80034a0:	20000ed4 	.word	0x20000ed4
 80034a4:	20000ed8 	.word	0x20000ed8

080034a8 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	6039      	str	r1, [r7, #0]
 80034b2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80034b8:	4b21      	ldr	r3, [pc, #132]	@ (8003540 <wm8994_SetMute+0x98>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d039      	beq.n	8003534 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d11c      	bne.n	8003500 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ce:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fa4e 	bl	8003974 <CODEC_IO_Write>
 80034d8:	4603      	mov	r3, r0
 80034da:	461a      	mov	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4413      	add	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ea:	f240 4122 	movw	r1, #1058	@ 0x422
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fa40 	bl	8003974 <CODEC_IO_Write>
 80034f4:	4603      	mov	r3, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4413      	add	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	e019      	b.n	8003534 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2210      	movs	r2, #16
 8003506:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fa32 	bl	8003974 <CODEC_IO_Write>
 8003510:	4603      	mov	r3, r0
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4413      	add	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2210      	movs	r2, #16
 8003520:	f240 4122 	movw	r1, #1058	@ 0x422
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fa25 	bl	8003974 <CODEC_IO_Write>
 800352a:	4603      	mov	r3, r0
 800352c:	461a      	mov	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4413      	add	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8003534:	68fb      	ldr	r3, [r7, #12]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000ed4 	.word	0x20000ed4

08003544 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	460a      	mov	r2, r1
 800354e:	80fb      	strh	r3, [r7, #6]
 8003550:	4613      	mov	r3, r2
 8003552:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8003558:	797b      	ldrb	r3, [r7, #5]
 800355a:	2b03      	cmp	r3, #3
 800355c:	f000 808c 	beq.w	8003678 <wm8994_SetOutputMode+0x134>
 8003560:	2b03      	cmp	r3, #3
 8003562:	f300 80cb 	bgt.w	80036fc <wm8994_SetOutputMode+0x1b8>
 8003566:	2b01      	cmp	r3, #1
 8003568:	d002      	beq.n	8003570 <wm8994_SetOutputMode+0x2c>
 800356a:	2b02      	cmp	r3, #2
 800356c:	d042      	beq.n	80035f4 <wm8994_SetOutputMode+0xb0>
 800356e:	e0c5      	b.n	80036fc <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8003578:	2105      	movs	r1, #5
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f9fa 	bl	8003974 <CODEC_IO_Write>
 8003580:	4603      	mov	r3, r0
 8003582:	461a      	mov	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2200      	movs	r2, #0
 8003590:	f240 6101 	movw	r1, #1537	@ 0x601
 8003594:	4618      	mov	r0, r3
 8003596:	f000 f9ed 	bl	8003974 <CODEC_IO_Write>
 800359a:	4603      	mov	r3, r0
 800359c:	461a      	mov	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4413      	add	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2200      	movs	r2, #0
 80035aa:	f240 6102 	movw	r1, #1538	@ 0x602
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f9e0 	bl	8003974 <CODEC_IO_Write>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461a      	mov	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2202      	movs	r2, #2
 80035c4:	f240 6104 	movw	r1, #1540	@ 0x604
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 f9d3 	bl	8003974 <CODEC_IO_Write>
 80035ce:	4603      	mov	r3, r0
 80035d0:	461a      	mov	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4413      	add	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2202      	movs	r2, #2
 80035de:	f240 6105 	movw	r1, #1541	@ 0x605
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f9c6 	bl	8003974 <CODEC_IO_Write>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
    break;
 80035f2:	e0c5      	b.n	8003780 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f240 3203 	movw	r2, #771	@ 0x303
 80035fc:	2105      	movs	r1, #5
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 f9b8 	bl	8003974 <CODEC_IO_Write>
 8003604:	4603      	mov	r3, r0
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2201      	movs	r2, #1
 8003614:	f240 6101 	movw	r1, #1537	@ 0x601
 8003618:	4618      	mov	r0, r3
 800361a:	f000 f9ab 	bl	8003974 <CODEC_IO_Write>
 800361e:	4603      	mov	r3, r0
 8003620:	461a      	mov	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4413      	add	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2201      	movs	r2, #1
 800362e:	f240 6102 	movw	r1, #1538	@ 0x602
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f99e 	bl	8003974 <CODEC_IO_Write>
 8003638:	4603      	mov	r3, r0
 800363a:	461a      	mov	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4413      	add	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003642:	88fb      	ldrh	r3, [r7, #6]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2200      	movs	r2, #0
 8003648:	f240 6104 	movw	r1, #1540	@ 0x604
 800364c:	4618      	mov	r0, r3
 800364e:	f000 f991 	bl	8003974 <CODEC_IO_Write>
 8003652:	4603      	mov	r3, r0
 8003654:	461a      	mov	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4413      	add	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2200      	movs	r2, #0
 8003662:	f240 6105 	movw	r1, #1541	@ 0x605
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f984 	bl	8003974 <CODEC_IO_Write>
 800366c:	4603      	mov	r3, r0
 800366e:	461a      	mov	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]
    break;
 8003676:	e083      	b.n	8003780 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8003680:	2105      	movs	r1, #5
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f976 	bl	8003974 <CODEC_IO_Write>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2201      	movs	r2, #1
 8003698:	f240 6101 	movw	r1, #1537	@ 0x601
 800369c:	4618      	mov	r0, r3
 800369e:	f000 f969 	bl	8003974 <CODEC_IO_Write>
 80036a2:	4603      	mov	r3, r0
 80036a4:	461a      	mov	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4413      	add	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2201      	movs	r2, #1
 80036b2:	f240 6102 	movw	r1, #1538	@ 0x602
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f95c 	bl	8003974 <CODEC_IO_Write>
 80036bc:	4603      	mov	r3, r0
 80036be:	461a      	mov	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2202      	movs	r2, #2
 80036cc:	f240 6104 	movw	r1, #1540	@ 0x604
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 f94f 	bl	8003974 <CODEC_IO_Write>
 80036d6:	4603      	mov	r3, r0
 80036d8:	461a      	mov	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4413      	add	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2202      	movs	r2, #2
 80036e6:	f240 6105 	movw	r1, #1541	@ 0x605
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f942 	bl	8003974 <CODEC_IO_Write>
 80036f0:	4603      	mov	r3, r0
 80036f2:	461a      	mov	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
    break;
 80036fa:	e041      	b.n	8003780 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f240 3203 	movw	r2, #771	@ 0x303
 8003704:	2105      	movs	r1, #5
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f934 	bl	8003974 <CODEC_IO_Write>
 800370c:	4603      	mov	r3, r0
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2201      	movs	r2, #1
 800371c:	f240 6101 	movw	r1, #1537	@ 0x601
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f927 	bl	8003974 <CODEC_IO_Write>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4413      	add	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2201      	movs	r2, #1
 8003736:	f240 6102 	movw	r1, #1538	@ 0x602
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f91a 	bl	8003974 <CODEC_IO_Write>
 8003740:	4603      	mov	r3, r0
 8003742:	461a      	mov	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2200      	movs	r2, #0
 8003750:	f240 6104 	movw	r1, #1540	@ 0x604
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f90d 	bl	8003974 <CODEC_IO_Write>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4413      	add	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2200      	movs	r2, #0
 800376a:	f240 6105 	movw	r1, #1541	@ 0x605
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f900 	bl	8003974 <CODEC_IO_Write>
 8003774:	4603      	mov	r3, r0
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
    break;    
 800377e:	bf00      	nop
  }  
  return counter;
 8003780:	68fb      	ldr	r3, [r7, #12]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	6039      	str	r1, [r7, #0]
 8003796:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4a64      	ldr	r2, [pc, #400]	@ (8003930 <wm8994_SetFrequency+0x1a4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d079      	beq.n	8003898 <wm8994_SetFrequency+0x10c>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	4a62      	ldr	r2, [pc, #392]	@ (8003930 <wm8994_SetFrequency+0x1a4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	f200 80ad 	bhi.w	8003908 <wm8994_SetFrequency+0x17c>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d061      	beq.n	800387c <wm8994_SetFrequency+0xf0>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80037be:	4293      	cmp	r3, r2
 80037c0:	f200 80a2 	bhi.w	8003908 <wm8994_SetFrequency+0x17c>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80037ca:	4293      	cmp	r3, r2
 80037cc:	f000 808e 	beq.w	80038ec <wm8994_SetFrequency+0x160>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80037d6:	4293      	cmp	r3, r2
 80037d8:	f200 8096 	bhi.w	8003908 <wm8994_SetFrequency+0x17c>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80037e2:	d03d      	beq.n	8003860 <wm8994_SetFrequency+0xd4>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80037ea:	f200 808d 	bhi.w	8003908 <wm8994_SetFrequency+0x17c>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	f245 6222 	movw	r2, #22050	@ 0x5622
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d06b      	beq.n	80038d0 <wm8994_SetFrequency+0x144>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	f245 6222 	movw	r2, #22050	@ 0x5622
 80037fe:	4293      	cmp	r3, r2
 8003800:	f200 8082 	bhi.w	8003908 <wm8994_SetFrequency+0x17c>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800380a:	d01b      	beq.n	8003844 <wm8994_SetFrequency+0xb8>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003812:	d879      	bhi.n	8003908 <wm8994_SetFrequency+0x17c>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800381a:	d005      	beq.n	8003828 <wm8994_SetFrequency+0x9c>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003822:	4293      	cmp	r3, r2
 8003824:	d046      	beq.n	80038b4 <wm8994_SetFrequency+0x128>
 8003826:	e06f      	b.n	8003908 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2203      	movs	r2, #3
 800382e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f89e 	bl	8003974 <CODEC_IO_Write>
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
    break;
 8003842:	e06f      	b.n	8003924 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2233      	movs	r2, #51	@ 0x33
 800384a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800384e:	4618      	mov	r0, r3
 8003850:	f000 f890 	bl	8003974 <CODEC_IO_Write>
 8003854:	4603      	mov	r3, r0
 8003856:	461a      	mov	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4413      	add	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
    break;
 800385e:	e061      	b.n	8003924 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2263      	movs	r2, #99	@ 0x63
 8003866:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f882 	bl	8003974 <CODEC_IO_Write>
 8003870:	4603      	mov	r3, r0
 8003872:	461a      	mov	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
    break;
 800387a:	e053      	b.n	8003924 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2283      	movs	r2, #131	@ 0x83
 8003882:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f874 	bl	8003974 <CODEC_IO_Write>
 800388c:	4603      	mov	r3, r0
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
    break;
 8003896:	e045      	b.n	8003924 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	22a3      	movs	r2, #163	@ 0xa3
 800389e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f866 	bl	8003974 <CODEC_IO_Write>
 80038a8:	4603      	mov	r3, r0
 80038aa:	461a      	mov	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
    break;
 80038b2:	e037      	b.n	8003924 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2213      	movs	r2, #19
 80038ba:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f858 	bl	8003974 <CODEC_IO_Write>
 80038c4:	4603      	mov	r3, r0
 80038c6:	461a      	mov	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
    break;
 80038ce:	e029      	b.n	8003924 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2243      	movs	r2, #67	@ 0x43
 80038d6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f84a 	bl	8003974 <CODEC_IO_Write>
 80038e0:	4603      	mov	r3, r0
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
    break;
 80038ea:	e01b      	b.n	8003924 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2273      	movs	r2, #115	@ 0x73
 80038f2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f83c 	bl	8003974 <CODEC_IO_Write>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
    break; 
 8003906:	e00d      	b.n	8003924 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2283      	movs	r2, #131	@ 0x83
 800390e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f82e 	bl	8003974 <CODEC_IO_Write>
 8003918:	4603      	mov	r3, r0
 800391a:	461a      	mov	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4413      	add	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
    break; 
 8003922:	bf00      	nop
  }
  return counter;
 8003924:	68fb      	ldr	r3, [r7, #12]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	00017700 	.word	0x00017700

08003934 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2200      	movs	r2, #0
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f812 	bl	8003974 <CODEC_IO_Write>
 8003950:	4603      	mov	r3, r0
 8003952:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003954:	4b05      	ldr	r3, [pc, #20]	@ (800396c <wm8994_Reset+0x38>)
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800395a:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <wm8994_Reset+0x3c>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

  return counter;
 8003960:	68fb      	ldr	r3, [r7, #12]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000ed4 	.word	0x20000ed4
 8003970:	20000ed8 	.word	0x20000ed8

08003974 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
 800397e:	460b      	mov	r3, r1
 8003980:	80bb      	strh	r3, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800398a:	887a      	ldrh	r2, [r7, #2]
 800398c:	88b9      	ldrh	r1, [r7, #4]
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	4618      	mov	r0, r3
 8003992:	f000 f96f 	bl	8003c74 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	b2db      	uxtb	r3, r3
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08c      	sub	sp, #48	@ 0x30
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a51      	ldr	r2, [pc, #324]	@ (8003af4 <I2Cx_MspInit+0x150>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d14d      	bne.n	8003a50 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80039b4:	4b50      	ldr	r3, [pc, #320]	@ (8003af8 <I2Cx_MspInit+0x154>)
 80039b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b8:	4a4f      	ldr	r2, [pc, #316]	@ (8003af8 <I2Cx_MspInit+0x154>)
 80039ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039be:	6313      	str	r3, [r2, #48]	@ 0x30
 80039c0:	4b4d      	ldr	r3, [pc, #308]	@ (8003af8 <I2Cx_MspInit+0x154>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80039cc:	2380      	movs	r3, #128	@ 0x80
 80039ce:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80039d0:	2312      	movs	r3, #18
 80039d2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80039d8:	2302      	movs	r3, #2
 80039da:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80039dc:	2304      	movs	r3, #4
 80039de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80039e0:	f107 031c 	add.w	r3, r7, #28
 80039e4:	4619      	mov	r1, r3
 80039e6:	4845      	ldr	r0, [pc, #276]	@ (8003afc <I2Cx_MspInit+0x158>)
 80039e8:	f001 fc3a 	bl	8005260 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80039ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80039f2:	f107 031c 	add.w	r3, r7, #28
 80039f6:	4619      	mov	r1, r3
 80039f8:	4840      	ldr	r0, [pc, #256]	@ (8003afc <I2Cx_MspInit+0x158>)
 80039fa:	f001 fc31 	bl	8005260 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80039fe:	4b3e      	ldr	r3, [pc, #248]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	4a3d      	ldr	r2, [pc, #244]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003a04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003a16:	4b38      	ldr	r3, [pc, #224]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	4a37      	ldr	r2, [pc, #220]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003a1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a20:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003a22:	4b35      	ldr	r3, [pc, #212]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	4a34      	ldr	r2, [pc, #208]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003a28:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a2c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	210f      	movs	r1, #15
 8003a32:	2048      	movs	r0, #72	@ 0x48
 8003a34:	f000 fe77 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003a38:	2048      	movs	r0, #72	@ 0x48
 8003a3a:	f000 fe90 	bl	800475e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	210f      	movs	r1, #15
 8003a42:	2049      	movs	r0, #73	@ 0x49
 8003a44:	f000 fe6f 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003a48:	2049      	movs	r0, #73	@ 0x49
 8003a4a:	f000 fe88 	bl	800475e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003a4e:	e04d      	b.n	8003aec <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003a50:	4b29      	ldr	r3, [pc, #164]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a54:	4a28      	ldr	r2, [pc, #160]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003a56:	f043 0302 	orr.w	r3, r3, #2
 8003a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a5c:	4b26      	ldr	r3, [pc, #152]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003a68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a6c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003a6e:	2312      	movs	r3, #18
 8003a70:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003a76:	2302      	movs	r3, #2
 8003a78:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a7e:	f107 031c 	add.w	r3, r7, #28
 8003a82:	4619      	mov	r1, r3
 8003a84:	481e      	ldr	r0, [pc, #120]	@ (8003b00 <I2Cx_MspInit+0x15c>)
 8003a86:	f001 fbeb 	bl	8005260 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003a8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a90:	f107 031c 	add.w	r3, r7, #28
 8003a94:	4619      	mov	r1, r3
 8003a96:	481a      	ldr	r0, [pc, #104]	@ (8003b00 <I2Cx_MspInit+0x15c>)
 8003a98:	f001 fbe2 	bl	8005260 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003a9c:	4b16      	ldr	r3, [pc, #88]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	4a15      	ldr	r2, [pc, #84]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003aa2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003aa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aa8:	4b13      	ldr	r3, [pc, #76]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003ab4:	4b10      	ldr	r3, [pc, #64]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003aba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003abe:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8003af8 <I2Cx_MspInit+0x154>)
 8003ac6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003aca:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003acc:	2200      	movs	r2, #0
 8003ace:	210f      	movs	r1, #15
 8003ad0:	201f      	movs	r0, #31
 8003ad2:	f000 fe28 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003ad6:	201f      	movs	r0, #31
 8003ad8:	f000 fe41 	bl	800475e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003adc:	2200      	movs	r2, #0
 8003ade:	210f      	movs	r1, #15
 8003ae0:	2020      	movs	r0, #32
 8003ae2:	f000 fe20 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003ae6:	2020      	movs	r0, #32
 8003ae8:	f000 fe39 	bl	800475e <HAL_NVIC_EnableIRQ>
}
 8003aec:	bf00      	nop
 8003aee:	3730      	adds	r7, #48	@ 0x30
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000edc 	.word	0x20000edc
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40021c00 	.word	0x40021c00
 8003b00:	40020400 	.word	0x40020400

08003b04 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f002 f9d1 	bl	8005eb4 <HAL_I2C_GetState>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d125      	bne.n	8003b64 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a14      	ldr	r2, [pc, #80]	@ (8003b6c <I2Cx_Init+0x68>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d103      	bne.n	8003b28 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a13      	ldr	r2, [pc, #76]	@ (8003b70 <I2Cx_Init+0x6c>)
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e002      	b.n	8003b2e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a12      	ldr	r2, [pc, #72]	@ (8003b74 <I2Cx_Init+0x70>)
 8003b2c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a11      	ldr	r2, [pc, #68]	@ (8003b78 <I2Cx_Init+0x74>)
 8003b32:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff ff23 	bl	80039a4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f001 fe9a 	bl	8005898 <HAL_I2C_Init>
  }
}
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20000edc 	.word	0x20000edc
 8003b70:	40005c00 	.word	0x40005c00
 8003b74:	40005400 	.word	0x40005400
 8003b78:	40912732 	.word	0x40912732

08003b7c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	@ 0x28
 8003b80:	af04      	add	r7, sp, #16
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	4608      	mov	r0, r1
 8003b86:	4611      	mov	r1, r2
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	72fb      	strb	r3, [r7, #11]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	813b      	strh	r3, [r7, #8]
 8003b92:	4613      	mov	r3, r2
 8003b94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b9a:	7afb      	ldrb	r3, [r7, #11]
 8003b9c:	b299      	uxth	r1, r3
 8003b9e:	88f8      	ldrh	r0, [r7, #6]
 8003ba0:	893a      	ldrh	r2, [r7, #8]
 8003ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ba6:	9302      	str	r3, [sp, #8]
 8003ba8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f002 f864 	bl	8005c80 <HAL_I2C_Mem_Read>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003bc2:	7afb      	ldrb	r3, [r7, #11]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f832 	bl	8003c30 <I2Cx_Error>
  }
  return status;    
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b08a      	sub	sp, #40	@ 0x28
 8003bda:	af04      	add	r7, sp, #16
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	4608      	mov	r0, r1
 8003be0:	4611      	mov	r1, r2
 8003be2:	461a      	mov	r2, r3
 8003be4:	4603      	mov	r3, r0
 8003be6:	72fb      	strb	r3, [r7, #11]
 8003be8:	460b      	mov	r3, r1
 8003bea:	813b      	strh	r3, [r7, #8]
 8003bec:	4613      	mov	r3, r2
 8003bee:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003bf4:	7afb      	ldrb	r3, [r7, #11]
 8003bf6:	b299      	uxth	r1, r3
 8003bf8:	88f8      	ldrh	r0, [r7, #6]
 8003bfa:	893a      	ldrh	r2, [r7, #8]
 8003bfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c00:	9302      	str	r3, [sp, #8]
 8003c02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f001 ff23 	bl	8005a58 <HAL_I2C_Mem_Write>
 8003c12:	4603      	mov	r3, r0
 8003c14:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d004      	beq.n	8003c26 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003c1c:	7afb      	ldrb	r3, [r7, #11]
 8003c1e:	4619      	mov	r1, r3
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f805 	bl	8003c30 <I2Cx_Error>
  }
  return status;
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f001 fec7 	bl	80059d0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff ff5e 	bl	8003b04 <I2Cx_Init>
}
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003c54:	4802      	ldr	r0, [pc, #8]	@ (8003c60 <AUDIO_IO_Init+0x10>)
 8003c56:	f7ff ff55 	bl	8003b04 <I2Cx_Init>
}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000edc 	.word	0x20000edc

08003c64 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
}
 8003c68:	bf00      	nop
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	80bb      	strh	r3, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8003c86:	887b      	ldrh	r3, [r7, #2]
 8003c88:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003c8a:	89fb      	ldrh	r3, [r7, #14]
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003c92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	b21a      	sxth	r2, r3
 8003c9a:	887b      	ldrh	r3, [r7, #2]
 8003c9c:	b21b      	sxth	r3, r3
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	b21b      	sxth	r3, r3
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003ca6:	88ba      	ldrh	r2, [r7, #4]
 8003ca8:	79f9      	ldrb	r1, [r7, #7]
 8003caa:	2302      	movs	r3, #2
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	1cbb      	adds	r3, r7, #2
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	4803      	ldr	r0, [pc, #12]	@ (8003cc4 <AUDIO_IO_Write+0x50>)
 8003cb6:	f7ff ff8e 	bl	8003bd6 <I2Cx_WriteMultiple>
}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000edc 	.word	0x20000edc

08003cc8 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	4603      	mov	r3, r0
 8003cd0:	460a      	mov	r2, r1
 8003cd2:	71fb      	strb	r3, [r7, #7]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	81bb      	strh	r3, [r7, #12]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003ce0:	88ba      	ldrh	r2, [r7, #4]
 8003ce2:	79f9      	ldrb	r1, [r7, #7]
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	9301      	str	r3, [sp, #4]
 8003ce8:	f107 030c 	add.w	r3, r7, #12
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	2302      	movs	r3, #2
 8003cf0:	480a      	ldr	r0, [pc, #40]	@ (8003d1c <AUDIO_IO_Read+0x54>)
 8003cf2:	f7ff ff43 	bl	8003b7c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003cf6:	89bb      	ldrh	r3, [r7, #12]
 8003cf8:	0a1b      	lsrs	r3, r3, #8
 8003cfa:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003cfc:	89bb      	ldrh	r3, [r7, #12]
 8003cfe:	b21b      	sxth	r3, r3
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	b21a      	sxth	r2, r3
 8003d04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	b21b      	sxth	r3, r3
 8003d0c:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8003d0e:	89fb      	ldrh	r3, [r7, #14]
 8003d10:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8003d12:	89bb      	ldrh	r3, [r7, #12]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000edc 	.word	0x20000edc

08003d20 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fbfd 	bl	8004528 <HAL_Delay>
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8003d40:	480e      	ldr	r0, [pc, #56]	@ (8003d7c <HAL_SAI_ErrorCallback+0x44>)
 8003d42:	f004 f951 	bl	8007fe8 <HAL_SAI_GetState>
 8003d46:	4603      	mov	r3, r0
 8003d48:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8003d4a:	480d      	ldr	r0, [pc, #52]	@ (8003d80 <HAL_SAI_ErrorCallback+0x48>)
 8003d4c:	f004 f94c 	bl	8007fe8 <HAL_SAI_GetState>
 8003d50:	4603      	mov	r3, r0
 8003d52:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d002      	beq.n	8003d60 <HAL_SAI_ErrorCallback+0x28>
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b12      	cmp	r3, #18
 8003d5e:	d101      	bne.n	8003d64 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8003d60:	f000 f810 	bl	8003d84 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8003d64:	7bbb      	ldrb	r3, [r7, #14]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d002      	beq.n	8003d70 <HAL_SAI_ErrorCallback+0x38>
 8003d6a:	7bbb      	ldrb	r3, [r7, #14]
 8003d6c:	2b22      	cmp	r3, #34	@ 0x22
 8003d6e:	d101      	bne.n	8003d74 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8003d70:	f000 f9f6 	bl	8004160 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8003d74:	bf00      	nop
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20000f34 	.word	0x20000f34
 8003d80:	20000fb8 	.word	0x20000fb8

08003d84 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
}
 8003d88:	bf00      	nop
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08c      	sub	sp, #48	@ 0x30
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8003d9e:	4b63      	ldr	r3, [pc, #396]	@ (8003f2c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	4a62      	ldr	r2, [pc, #392]	@ (8003f2c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003da4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003daa:	4b60      	ldr	r3, [pc, #384]	@ (8003f2c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003db2:	61bb      	str	r3, [r7, #24]
 8003db4:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8003db6:	4b5d      	ldr	r3, [pc, #372]	@ (8003f2c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dba:	4a5c      	ldr	r2, [pc, #368]	@ (8003f2c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dc2:	4b5a      	ldr	r3, [pc, #360]	@ (8003f2c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8003dce:	4b57      	ldr	r3, [pc, #348]	@ (8003f2c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd2:	4a56      	ldr	r2, [pc, #344]	@ (8003f2c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dda:	4b54      	ldr	r3, [pc, #336]	@ (8003f2c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8003de6:	4b51      	ldr	r3, [pc, #324]	@ (8003f2c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	4a50      	ldr	r2, [pc, #320]	@ (8003f2c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003df2:	4b4e      	ldr	r3, [pc, #312]	@ (8003f2c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8003dfe:	2380      	movs	r3, #128	@ 0x80
 8003e00:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003e02:	2302      	movs	r3, #2
 8003e04:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003e0e:	230a      	movs	r3, #10
 8003e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8003e12:	f107 031c 	add.w	r3, r7, #28
 8003e16:	4619      	mov	r1, r3
 8003e18:	4845      	ldr	r0, [pc, #276]	@ (8003f30 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003e1a:	f001 fa21 	bl	8005260 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8003e1e:	2320      	movs	r3, #32
 8003e20:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003e22:	2302      	movs	r3, #2
 8003e24:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8003e2e:	230a      	movs	r3, #10
 8003e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003e32:	f107 031c 	add.w	r3, r7, #28
 8003e36:	4619      	mov	r1, r3
 8003e38:	483d      	ldr	r0, [pc, #244]	@ (8003f30 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003e3a:	f001 fa11 	bl	8005260 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8003e3e:	2340      	movs	r3, #64	@ 0x40
 8003e40:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003e42:	2302      	movs	r3, #2
 8003e44:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003e4e:	230a      	movs	r3, #10
 8003e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003e52:	f107 031c 	add.w	r3, r7, #28
 8003e56:	4619      	mov	r1, r3
 8003e58:	4835      	ldr	r0, [pc, #212]	@ (8003f30 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003e5a:	f001 fa01 	bl	8005260 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8003e5e:	2310      	movs	r3, #16
 8003e60:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003e62:	2302      	movs	r3, #2
 8003e64:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003e6e:	230a      	movs	r3, #10
 8003e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8003e72:	f107 031c 	add.w	r3, r7, #28
 8003e76:	4619      	mov	r1, r3
 8003e78:	482d      	ldr	r0, [pc, #180]	@ (8003f30 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003e7a:	f001 f9f1 	bl	8005260 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8003e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003f2c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	4a2a      	ldr	r2, [pc, #168]	@ (8003f2c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e8a:	4b28      	ldr	r3, [pc, #160]	@ (8003f2c <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a26      	ldr	r2, [pc, #152]	@ (8003f34 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d138      	bne.n	8003f12 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8003ea0:	4b25      	ldr	r3, [pc, #148]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ea2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003ea6:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003ea8:	4b23      	ldr	r3, [pc, #140]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003eaa:	2240      	movs	r2, #64	@ 0x40
 8003eac:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003eae:	4b22      	ldr	r3, [pc, #136]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003eb4:	4b20      	ldr	r3, [pc, #128]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003eb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003eba:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ebe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ec2:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8003ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ec6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003eca:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ece:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ed2:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003ed4:	4b18      	ldr	r3, [pc, #96]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ed6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003eda:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8003edc:	4b16      	ldr	r3, [pc, #88]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ede:	2204      	movs	r2, #4
 8003ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003ee2:	4b15      	ldr	r3, [pc, #84]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003ee8:	4b13      	ldr	r3, [pc, #76]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003eee:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8003ef4:	4b10      	ldr	r3, [pc, #64]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ef6:	4a11      	ldr	r2, [pc, #68]	@ (8003f3c <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8003ef8:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a0e      	ldr	r2, [pc, #56]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003efe:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003f00:	4a0d      	ldr	r2, [pc, #52]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8003f06:	480c      	ldr	r0, [pc, #48]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f08:	f000 fde4 	bl	8004ad4 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8003f0c:	480a      	ldr	r0, [pc, #40]	@ (8003f38 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003f0e:	f000 fd33 	bl	8004978 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8003f12:	2200      	movs	r2, #0
 8003f14:	210e      	movs	r1, #14
 8003f16:	203c      	movs	r0, #60	@ 0x3c
 8003f18:	f000 fc05 	bl	8004726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8003f1c:	203c      	movs	r0, #60	@ 0x3c
 8003f1e:	f000 fc1e 	bl	800475e <HAL_NVIC_EnableIRQ>
}
 8003f22:	bf00      	nop
 8003f24:	3730      	adds	r7, #48	@ 0x30
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40022000 	.word	0x40022000
 8003f34:	40015c04 	.word	0x40015c04
 8003f38:	2000103c 	.word	0x2000103c
 8003f3c:	40026470 	.word	0x40026470

08003f40 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b0a6      	sub	sp, #152	@ 0x98
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003f4c:	f107 0314 	add.w	r3, r7, #20
 8003f50:	4618      	mov	r0, r3
 8003f52:	f003 fb49 	bl	80075e8 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d009      	beq.n	8003f74 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d112      	bne.n	8003f9a <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003f74:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003f78:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003f7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003f7e:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8003f80:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8003f84:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8003f86:	2302      	movs	r3, #2
 8003f88:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8003f8a:	2313      	movs	r3, #19
 8003f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003f8e:	f107 0314 	add.w	r3, r7, #20
 8003f92:	4618      	mov	r0, r3
 8003f94:	f002 ff38 	bl	8006e08 <HAL_RCCEx_PeriphCLKConfig>
 8003f98:	e012      	b.n	8003fc0 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003f9a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003f9e:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003fa0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003fa4:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8003fa6:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8003faa:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8003fac:	2307      	movs	r3, #7
 8003fae:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003fb4:	f107 0314 	add.w	r3, r7, #20
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f002 ff25 	bl	8006e08 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
 8003fc2:	3798      	adds	r7, #152	@ 0x98
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	68f9      	ldr	r1, [r7, #12]
 8003fda:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003fde:	f000 f805 	bl	8003fec <BSP_AUDIO_IN_InitEx>
 8003fe2:	4603      	mov	r3, r0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8003fec:	b590      	push	{r4, r7, lr}
 8003fee:	b089      	sub	sp, #36	@ 0x24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8004004:	89fb      	ldrh	r3, [r7, #14]
 8004006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800400a:	d006      	beq.n	800401a <BSP_AUDIO_IN_InitEx+0x2e>
 800400c:	89fb      	ldrh	r3, [r7, #14]
 800400e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004012:	d002      	beq.n	800401a <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e046      	b.n	80040a8 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 800401a:	f000 fa11 	bl	8004440 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 800401e:	2200      	movs	r2, #0
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	4824      	ldr	r0, [pc, #144]	@ (80040b4 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004024:	f7ff ff8c 	bl	8003f40 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004028:	4b22      	ldr	r3, [pc, #136]	@ (80040b4 <BSP_AUDIO_IN_InitEx+0xc8>)
 800402a:	4a23      	ldr	r2, [pc, #140]	@ (80040b8 <BSP_AUDIO_IN_InitEx+0xcc>)
 800402c:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 800402e:	4821      	ldr	r0, [pc, #132]	@ (80040b4 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004030:	f003 ffda 	bl	8007fe8 <HAL_SAI_GetState>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d107      	bne.n	800404a <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 800403a:	2100      	movs	r1, #0
 800403c:	481d      	ldr	r0, [pc, #116]	@ (80040b4 <BSP_AUDIO_IN_InitEx+0xc8>)
 800403e:	f7ff fea9 	bl	8003d94 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8004042:	2100      	movs	r1, #0
 8004044:	481b      	ldr	r0, [pc, #108]	@ (80040b4 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004046:	f000 f893 	bl	8004170 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 800404a:	89fb      	ldrh	r3, [r7, #14]
 800404c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004050:	d102      	bne.n	8004058 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8004052:	230a      	movs	r3, #10
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	e001      	b.n	800405c <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8004058:	2305      	movs	r3, #5
 800405a:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	69b9      	ldr	r1, [r7, #24]
 8004060:	2001      	movs	r0, #1
 8004062:	f000 f937 	bl	80042d4 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8004066:	4b15      	ldr	r3, [pc, #84]	@ (80040bc <BSP_AUDIO_IN_InitEx+0xd0>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2034      	movs	r0, #52	@ 0x34
 800406c:	4798      	blx	r3
 800406e:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f648 1294 	movw	r2, #35220	@ 0x8994
 8004076:	4293      	cmp	r3, r2
 8004078:	d109      	bne.n	800408e <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800407a:	4b10      	ldr	r3, [pc, #64]	@ (80040bc <BSP_AUDIO_IN_InitEx+0xd0>)
 800407c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407e:	2034      	movs	r0, #52	@ 0x34
 8004080:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8004082:	4b0f      	ldr	r3, [pc, #60]	@ (80040c0 <BSP_AUDIO_IN_InitEx+0xd4>)
 8004084:	4a0d      	ldr	r2, [pc, #52]	@ (80040bc <BSP_AUDIO_IN_InitEx+0xd0>)
 8004086:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e001      	b.n	8004092 <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8004092:	7ffb      	ldrb	r3, [r7, #31]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d107      	bne.n	80040a8 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8004098:	4b09      	ldr	r3, [pc, #36]	@ (80040c0 <BSP_AUDIO_IN_InitEx+0xd4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681c      	ldr	r4, [r3, #0]
 800409e:	89f9      	ldrh	r1, [r7, #14]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2264      	movs	r2, #100	@ 0x64
 80040a4:	2034      	movs	r0, #52	@ 0x34
 80040a6:	47a0      	blx	r4
    }
  }
  return ret;
 80040a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3724      	adds	r7, #36	@ 0x24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd90      	pop	{r4, r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000fb8 	.word	0x20000fb8
 80040b8:	40015c24 	.word	0x40015c24
 80040bc:	20000004 	.word	0x20000004
 80040c0:	20000f30 	.word	0x20000f30

080040c4 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4805      	ldr	r0, [pc, #20]	@ (80040f0 <BSP_AUDIO_IN_Record+0x2c>)
 80040dc:	f003 fef6 	bl	8007ecc <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
  
  return ret;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	b2db      	uxtb	r3, r3
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20000fb8 	.word	0x20000fb8

080040f4 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 80040fc:	480c      	ldr	r0, [pc, #48]	@ (8004130 <BSP_AUDIO_IN_Stop+0x3c>)
 80040fe:	f003 fe72 	bl	8007de6 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8004102:	4b0c      	ldr	r3, [pc, #48]	@ (8004134 <BSP_AUDIO_IN_Stop+0x40>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	2034      	movs	r0, #52	@ 0x34
 800410c:	4798      	blx	r3
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e006      	b.n	8004126 <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d102      	bne.n	8004124 <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 800411e:	2001      	movs	r0, #1
 8004120:	f000 fa02 	bl	8004528 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8004124:	2300      	movs	r3, #0
  }
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000fb8 	.word	0x20000fb8
 8004134:	20000f30 	.word	0x20000f30

08004138 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8004140:	f006 fcfc 	bl	800ab3c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8004154:	f006 fd3a 	bl	800abcc <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8004158:	bf00      	nop
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08c      	sub	sp, #48	@ 0x30
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 800417a:	4b50      	ldr	r3, [pc, #320]	@ (80042bc <BSP_AUDIO_IN_MspInit+0x14c>)
 800417c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417e:	4a4f      	ldr	r2, [pc, #316]	@ (80042bc <BSP_AUDIO_IN_MspInit+0x14c>)
 8004180:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004184:	6453      	str	r3, [r2, #68]	@ 0x44
 8004186:	4b4d      	ldr	r3, [pc, #308]	@ (80042bc <BSP_AUDIO_IN_MspInit+0x14c>)
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8004192:	4b4a      	ldr	r3, [pc, #296]	@ (80042bc <BSP_AUDIO_IN_MspInit+0x14c>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004196:	4a49      	ldr	r2, [pc, #292]	@ (80042bc <BSP_AUDIO_IN_MspInit+0x14c>)
 8004198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800419c:	6313      	str	r3, [r2, #48]	@ 0x30
 800419e:	4b47      	ldr	r3, [pc, #284]	@ (80042bc <BSP_AUDIO_IN_MspInit+0x14c>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80041aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041ae:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80041b0:	2302      	movs	r3, #2
 80041b2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80041b8:	2302      	movs	r3, #2
 80041ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 80041bc:	230a      	movs	r3, #10
 80041be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80041c0:	f107 031c 	add.w	r3, r7, #28
 80041c4:	4619      	mov	r1, r3
 80041c6:	483e      	ldr	r0, [pc, #248]	@ (80042c0 <BSP_AUDIO_IN_MspInit+0x150>)
 80041c8:	f001 f84a 	bl	8005260 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 80041cc:	4b3b      	ldr	r3, [pc, #236]	@ (80042bc <BSP_AUDIO_IN_MspInit+0x14c>)
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	4a3a      	ldr	r2, [pc, #232]	@ (80042bc <BSP_AUDIO_IN_MspInit+0x14c>)
 80041d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80041d8:	4b38      	ldr	r3, [pc, #224]	@ (80042bc <BSP_AUDIO_IN_MspInit+0x14c>)
 80041da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80041e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041e8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80041ea:	2300      	movs	r3, #0
 80041ec:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80041f2:	2302      	movs	r3, #2
 80041f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80041f6:	f107 031c 	add.w	r3, r7, #28
 80041fa:	4619      	mov	r1, r3
 80041fc:	4831      	ldr	r0, [pc, #196]	@ (80042c4 <BSP_AUDIO_IN_MspInit+0x154>)
 80041fe:	f001 f82f 	bl	8005260 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8004202:	4b2e      	ldr	r3, [pc, #184]	@ (80042bc <BSP_AUDIO_IN_MspInit+0x14c>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004206:	4a2d      	ldr	r2, [pc, #180]	@ (80042bc <BSP_AUDIO_IN_MspInit+0x14c>)
 8004208:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800420c:	6313      	str	r3, [r2, #48]	@ 0x30
 800420e:	4b2b      	ldr	r3, [pc, #172]	@ (80042bc <BSP_AUDIO_IN_MspInit+0x14c>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a2a      	ldr	r2, [pc, #168]	@ (80042c8 <BSP_AUDIO_IN_MspInit+0x158>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d137      	bne.n	8004294 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004224:	4b29      	ldr	r3, [pc, #164]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 8004226:	2200      	movs	r2, #0
 8004228:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800422a:	4b28      	ldr	r3, [pc, #160]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 800422c:	2200      	movs	r2, #0
 800422e:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004230:	4b26      	ldr	r3, [pc, #152]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 8004232:	2200      	movs	r2, #0
 8004234:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8004236:	4b25      	ldr	r3, [pc, #148]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 8004238:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800423c:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800423e:	4b23      	ldr	r3, [pc, #140]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 8004240:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004244:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8004246:	4b21      	ldr	r3, [pc, #132]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 8004248:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800424c:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800424e:	4b1f      	ldr	r3, [pc, #124]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 8004250:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004254:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004256:	4b1d      	ldr	r3, [pc, #116]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 8004258:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800425c:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800425e:	4b1b      	ldr	r3, [pc, #108]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 8004260:	2200      	movs	r2, #0
 8004262:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004264:	4b19      	ldr	r3, [pc, #100]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 8004266:	2203      	movs	r2, #3
 8004268:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800426a:	4b18      	ldr	r3, [pc, #96]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 800426c:	2200      	movs	r2, #0
 800426e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8004270:	4b16      	ldr	r3, [pc, #88]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8004276:	4b15      	ldr	r3, [pc, #84]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 8004278:	4a15      	ldr	r2, [pc, #84]	@ (80042d0 <BSP_AUDIO_IN_MspInit+0x160>)
 800427a:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a13      	ldr	r2, [pc, #76]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 8004280:	671a      	str	r2, [r3, #112]	@ 0x70
 8004282:	4a12      	ldr	r2, [pc, #72]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8004288:	4810      	ldr	r0, [pc, #64]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 800428a:	f000 fc23 	bl	8004ad4 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 800428e:	480f      	ldr	r0, [pc, #60]	@ (80042cc <BSP_AUDIO_IN_MspInit+0x15c>)
 8004290:	f000 fb72 	bl	8004978 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004294:	2200      	movs	r2, #0
 8004296:	210f      	movs	r1, #15
 8004298:	2046      	movs	r0, #70	@ 0x46
 800429a:	f000 fa44 	bl	8004726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800429e:	2046      	movs	r0, #70	@ 0x46
 80042a0:	f000 fa5d 	bl	800475e <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80042a4:	2200      	movs	r2, #0
 80042a6:	210f      	movs	r1, #15
 80042a8:	2028      	movs	r0, #40	@ 0x28
 80042aa:	f000 fa3c 	bl	8004726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 80042ae:	2028      	movs	r0, #40	@ 0x28
 80042b0:	f000 fa55 	bl	800475e <HAL_NVIC_EnableIRQ>
}
 80042b4:	bf00      	nop
 80042b6:	3730      	adds	r7, #48	@ 0x30
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40021800 	.word	0x40021800
 80042c4:	40021c00 	.word	0x40021c00
 80042c8:	40015c24 	.word	0x40015c24
 80042cc:	2000109c 	.word	0x2000109c
 80042d0:	400264b8 	.word	0x400264b8

080042d4 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80042e0:	4b53      	ldr	r3, [pc, #332]	@ (8004430 <SAIx_In_Init+0x15c>)
 80042e2:	4a54      	ldr	r2, [pc, #336]	@ (8004434 <SAIx_In_Init+0x160>)
 80042e4:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80042e6:	4b52      	ldr	r3, [pc, #328]	@ (8004430 <SAIx_In_Init+0x15c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b50      	ldr	r3, [pc, #320]	@ (8004430 <SAIx_In_Init+0x15c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80042f4:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80042f6:	4a4e      	ldr	r2, [pc, #312]	@ (8004430 <SAIx_In_Init+0x15c>)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 80042fc:	4a4c      	ldr	r2, [pc, #304]	@ (8004430 <SAIx_In_Init+0x15c>)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004302:	4b4b      	ldr	r3, [pc, #300]	@ (8004430 <SAIx_In_Init+0x15c>)
 8004304:	2200      	movs	r2, #0
 8004306:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004308:	4b49      	ldr	r3, [pc, #292]	@ (8004430 <SAIx_In_Init+0x15c>)
 800430a:	2200      	movs	r2, #0
 800430c:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800430e:	4b48      	ldr	r3, [pc, #288]	@ (8004430 <SAIx_In_Init+0x15c>)
 8004310:	2280      	movs	r2, #128	@ 0x80
 8004312:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004314:	4b46      	ldr	r3, [pc, #280]	@ (8004430 <SAIx_In_Init+0x15c>)
 8004316:	2200      	movs	r2, #0
 8004318:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800431a:	4b45      	ldr	r3, [pc, #276]	@ (8004430 <SAIx_In_Init+0x15c>)
 800431c:	2201      	movs	r2, #1
 800431e:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8004320:	4b43      	ldr	r3, [pc, #268]	@ (8004430 <SAIx_In_Init+0x15c>)
 8004322:	2200      	movs	r2, #0
 8004324:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8004326:	4b42      	ldr	r3, [pc, #264]	@ (8004430 <SAIx_In_Init+0x15c>)
 8004328:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800432c:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800432e:	4b40      	ldr	r3, [pc, #256]	@ (8004430 <SAIx_In_Init+0x15c>)
 8004330:	2201      	movs	r2, #1
 8004332:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8004334:	4b3e      	ldr	r3, [pc, #248]	@ (8004430 <SAIx_In_Init+0x15c>)
 8004336:	2240      	movs	r2, #64	@ 0x40
 8004338:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800433a:	4b3d      	ldr	r3, [pc, #244]	@ (8004430 <SAIx_In_Init+0x15c>)
 800433c:	2220      	movs	r2, #32
 800433e:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004340:	4b3b      	ldr	r3, [pc, #236]	@ (8004430 <SAIx_In_Init+0x15c>)
 8004342:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004346:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004348:	4b39      	ldr	r3, [pc, #228]	@ (8004430 <SAIx_In_Init+0x15c>)
 800434a:	2200      	movs	r2, #0
 800434c:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800434e:	4b38      	ldr	r3, [pc, #224]	@ (8004430 <SAIx_In_Init+0x15c>)
 8004350:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004354:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8004356:	4b36      	ldr	r3, [pc, #216]	@ (8004430 <SAIx_In_Init+0x15c>)
 8004358:	2200      	movs	r2, #0
 800435a:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800435c:	4b34      	ldr	r3, [pc, #208]	@ (8004430 <SAIx_In_Init+0x15c>)
 800435e:	2200      	movs	r2, #0
 8004360:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8004362:	4b33      	ldr	r3, [pc, #204]	@ (8004430 <SAIx_In_Init+0x15c>)
 8004364:	2204      	movs	r2, #4
 8004366:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8004368:	4a31      	ldr	r2, [pc, #196]	@ (8004430 <SAIx_In_Init+0x15c>)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 800436e:	4830      	ldr	r0, [pc, #192]	@ (8004430 <SAIx_In_Init+0x15c>)
 8004370:	f003 fb86 	bl	8007a80 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004374:	4b30      	ldr	r3, [pc, #192]	@ (8004438 <SAIx_In_Init+0x164>)
 8004376:	4a31      	ldr	r2, [pc, #196]	@ (800443c <SAIx_In_Init+0x168>)
 8004378:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800437a:	4b2f      	ldr	r3, [pc, #188]	@ (8004438 <SAIx_In_Init+0x164>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4b2d      	ldr	r3, [pc, #180]	@ (8004438 <SAIx_In_Init+0x164>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004388:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 800438a:	4a2b      	ldr	r2, [pc, #172]	@ (8004438 <SAIx_In_Init+0x164>)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8004390:	4b29      	ldr	r3, [pc, #164]	@ (8004438 <SAIx_In_Init+0x164>)
 8004392:	2203      	movs	r2, #3
 8004394:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004396:	4b28      	ldr	r3, [pc, #160]	@ (8004438 <SAIx_In_Init+0x164>)
 8004398:	2200      	movs	r2, #0
 800439a:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800439c:	4b26      	ldr	r3, [pc, #152]	@ (8004438 <SAIx_In_Init+0x164>)
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 80043a2:	4b25      	ldr	r3, [pc, #148]	@ (8004438 <SAIx_In_Init+0x164>)
 80043a4:	2280      	movs	r2, #128	@ 0x80
 80043a6:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80043a8:	4b23      	ldr	r3, [pc, #140]	@ (8004438 <SAIx_In_Init+0x164>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80043ae:	4b22      	ldr	r3, [pc, #136]	@ (8004438 <SAIx_In_Init+0x164>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 80043b4:	4b20      	ldr	r3, [pc, #128]	@ (8004438 <SAIx_In_Init+0x164>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 80043ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004438 <SAIx_In_Init+0x164>)
 80043bc:	2200      	movs	r2, #0
 80043be:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80043c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004438 <SAIx_In_Init+0x164>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 80043c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004438 <SAIx_In_Init+0x164>)
 80043c8:	2240      	movs	r2, #64	@ 0x40
 80043ca:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80043cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <SAIx_In_Init+0x164>)
 80043ce:	2220      	movs	r2, #32
 80043d0:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80043d2:	4b19      	ldr	r3, [pc, #100]	@ (8004438 <SAIx_In_Init+0x164>)
 80043d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80043d8:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80043da:	4b17      	ldr	r3, [pc, #92]	@ (8004438 <SAIx_In_Init+0x164>)
 80043dc:	2200      	movs	r2, #0
 80043de:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80043e0:	4b15      	ldr	r3, [pc, #84]	@ (8004438 <SAIx_In_Init+0x164>)
 80043e2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80043e6:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80043e8:	4b13      	ldr	r3, [pc, #76]	@ (8004438 <SAIx_In_Init+0x164>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80043ee:	4b12      	ldr	r3, [pc, #72]	@ (8004438 <SAIx_In_Init+0x164>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 80043f4:	4b10      	ldr	r3, [pc, #64]	@ (8004438 <SAIx_In_Init+0x164>)
 80043f6:	2204      	movs	r2, #4
 80043f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80043fa:	4a0f      	ldr	r2, [pc, #60]	@ (8004438 <SAIx_In_Init+0x164>)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8004400:	480d      	ldr	r0, [pc, #52]	@ (8004438 <SAIx_In_Init+0x164>)
 8004402:	f003 fb3d 	bl	8007a80 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8004406:	4b0a      	ldr	r3, [pc, #40]	@ (8004430 <SAIx_In_Init+0x15c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4b08      	ldr	r3, [pc, #32]	@ (8004430 <SAIx_In_Init+0x15c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004414:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8004416:	4b08      	ldr	r3, [pc, #32]	@ (8004438 <SAIx_In_Init+0x164>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4b06      	ldr	r3, [pc, #24]	@ (8004438 <SAIx_In_Init+0x164>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004424:	601a      	str	r2, [r3, #0]
}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000f34 	.word	0x20000f34
 8004434:	40015c04 	.word	0x40015c04
 8004438:	20000fb8 	.word	0x20000fb8
 800443c:	40015c24 	.word	0x40015c24

08004440 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004444:	4b07      	ldr	r3, [pc, #28]	@ (8004464 <SAIx_In_DeInit+0x24>)
 8004446:	4a08      	ldr	r2, [pc, #32]	@ (8004468 <SAIx_In_DeInit+0x28>)
 8004448:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800444a:	4b06      	ldr	r3, [pc, #24]	@ (8004464 <SAIx_In_DeInit+0x24>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4b04      	ldr	r3, [pc, #16]	@ (8004464 <SAIx_In_DeInit+0x24>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004458:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 800445a:	4802      	ldr	r0, [pc, #8]	@ (8004464 <SAIx_In_DeInit+0x24>)
 800445c:	f003 fc8e 	bl	8007d7c <HAL_SAI_DeInit>
}
 8004460:	bf00      	nop
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000fb8 	.word	0x20000fb8
 8004468:	40015c24 	.word	0x40015c24

0800446c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004470:	2003      	movs	r0, #3
 8004472:	f000 f94d 	bl	8004710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004476:	2000      	movs	r0, #0
 8004478:	f000 f806 	bl	8004488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800447c:	f7fd fd1c 	bl	8001eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004490:	4b12      	ldr	r3, [pc, #72]	@ (80044dc <HAL_InitTick+0x54>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	4b12      	ldr	r3, [pc, #72]	@ (80044e0 <HAL_InitTick+0x58>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	4619      	mov	r1, r3
 800449a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800449e:	fbb3 f3f1 	udiv	r3, r3, r1
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f967 	bl	800477a <HAL_SYSTICK_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e00e      	b.n	80044d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b0f      	cmp	r3, #15
 80044ba:	d80a      	bhi.n	80044d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044bc:	2200      	movs	r2, #0
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	f04f 30ff 	mov.w	r0, #4294967295
 80044c4:	f000 f92f 	bl	8004726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044c8:	4a06      	ldr	r2, [pc, #24]	@ (80044e4 <HAL_InitTick+0x5c>)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e000      	b.n	80044d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000000 	.word	0x20000000
 80044e0:	2000003c 	.word	0x2000003c
 80044e4:	20000038 	.word	0x20000038

080044e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044ec:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <HAL_IncTick+0x20>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	4b06      	ldr	r3, [pc, #24]	@ (800450c <HAL_IncTick+0x24>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4413      	add	r3, r2
 80044f8:	4a04      	ldr	r2, [pc, #16]	@ (800450c <HAL_IncTick+0x24>)
 80044fa:	6013      	str	r3, [r2, #0]
}
 80044fc:	bf00      	nop
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	2000003c 	.word	0x2000003c
 800450c:	200010fc 	.word	0x200010fc

08004510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return uwTick;
 8004514:	4b03      	ldr	r3, [pc, #12]	@ (8004524 <HAL_GetTick+0x14>)
 8004516:	681b      	ldr	r3, [r3, #0]
}
 8004518:	4618      	mov	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	200010fc 	.word	0x200010fc

08004528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004530:	f7ff ffee 	bl	8004510 <HAL_GetTick>
 8004534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004540:	d005      	beq.n	800454e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004542:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <HAL_Delay+0x44>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800454e:	bf00      	nop
 8004550:	f7ff ffde 	bl	8004510 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	429a      	cmp	r2, r3
 800455e:	d8f7      	bhi.n	8004550 <HAL_Delay+0x28>
  {
  }
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	2000003c 	.word	0x2000003c

08004570 <__NVIC_SetPriorityGrouping>:
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004580:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <__NVIC_SetPriorityGrouping+0x40>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800458c:	4013      	ands	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004598:	4b06      	ldr	r3, [pc, #24]	@ (80045b4 <__NVIC_SetPriorityGrouping+0x44>)
 800459a:	4313      	orrs	r3, r2
 800459c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800459e:	4a04      	ldr	r2, [pc, #16]	@ (80045b0 <__NVIC_SetPriorityGrouping+0x40>)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	60d3      	str	r3, [r2, #12]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	e000ed00 	.word	0xe000ed00
 80045b4:	05fa0000 	.word	0x05fa0000

080045b8 <__NVIC_GetPriorityGrouping>:
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045bc:	4b04      	ldr	r3, [pc, #16]	@ (80045d0 <__NVIC_GetPriorityGrouping+0x18>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	0a1b      	lsrs	r3, r3, #8
 80045c2:	f003 0307 	and.w	r3, r3, #7
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	e000ed00 	.word	0xe000ed00

080045d4 <__NVIC_EnableIRQ>:
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	db0b      	blt.n	80045fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	f003 021f 	and.w	r2, r3, #31
 80045ec:	4907      	ldr	r1, [pc, #28]	@ (800460c <__NVIC_EnableIRQ+0x38>)
 80045ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	2001      	movs	r0, #1
 80045f6:	fa00 f202 	lsl.w	r2, r0, r2
 80045fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	e000e100 	.word	0xe000e100

08004610 <__NVIC_SetPriority>:
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	6039      	str	r1, [r7, #0]
 800461a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800461c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004620:	2b00      	cmp	r3, #0
 8004622:	db0a      	blt.n	800463a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	b2da      	uxtb	r2, r3
 8004628:	490c      	ldr	r1, [pc, #48]	@ (800465c <__NVIC_SetPriority+0x4c>)
 800462a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462e:	0112      	lsls	r2, r2, #4
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	440b      	add	r3, r1
 8004634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004638:	e00a      	b.n	8004650 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	b2da      	uxtb	r2, r3
 800463e:	4908      	ldr	r1, [pc, #32]	@ (8004660 <__NVIC_SetPriority+0x50>)
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	3b04      	subs	r3, #4
 8004648:	0112      	lsls	r2, r2, #4
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	440b      	add	r3, r1
 800464e:	761a      	strb	r2, [r3, #24]
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	e000e100 	.word	0xe000e100
 8004660:	e000ed00 	.word	0xe000ed00

08004664 <NVIC_EncodePriority>:
{
 8004664:	b480      	push	{r7}
 8004666:	b089      	sub	sp, #36	@ 0x24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f1c3 0307 	rsb	r3, r3, #7
 800467e:	2b04      	cmp	r3, #4
 8004680:	bf28      	it	cs
 8004682:	2304      	movcs	r3, #4
 8004684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	3304      	adds	r3, #4
 800468a:	2b06      	cmp	r3, #6
 800468c:	d902      	bls.n	8004694 <NVIC_EncodePriority+0x30>
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3b03      	subs	r3, #3
 8004692:	e000      	b.n	8004696 <NVIC_EncodePriority+0x32>
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004698:	f04f 32ff 	mov.w	r2, #4294967295
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43da      	mvns	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	401a      	ands	r2, r3
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046ac:	f04f 31ff 	mov.w	r1, #4294967295
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	fa01 f303 	lsl.w	r3, r1, r3
 80046b6:	43d9      	mvns	r1, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046bc:	4313      	orrs	r3, r2
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3724      	adds	r7, #36	@ 0x24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046dc:	d301      	bcc.n	80046e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046de:	2301      	movs	r3, #1
 80046e0:	e00f      	b.n	8004702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046e2:	4a0a      	ldr	r2, [pc, #40]	@ (800470c <SysTick_Config+0x40>)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046ea:	210f      	movs	r1, #15
 80046ec:	f04f 30ff 	mov.w	r0, #4294967295
 80046f0:	f7ff ff8e 	bl	8004610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046f4:	4b05      	ldr	r3, [pc, #20]	@ (800470c <SysTick_Config+0x40>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046fa:	4b04      	ldr	r3, [pc, #16]	@ (800470c <SysTick_Config+0x40>)
 80046fc:	2207      	movs	r2, #7
 80046fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	e000e010 	.word	0xe000e010

08004710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff ff29 	bl	8004570 <__NVIC_SetPriorityGrouping>
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af00      	add	r7, sp, #0
 800472c:	4603      	mov	r3, r0
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
 8004732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004738:	f7ff ff3e 	bl	80045b8 <__NVIC_GetPriorityGrouping>
 800473c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	6978      	ldr	r0, [r7, #20]
 8004744:	f7ff ff8e 	bl	8004664 <NVIC_EncodePriority>
 8004748:	4602      	mov	r2, r0
 800474a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800474e:	4611      	mov	r1, r2
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff ff5d 	bl	8004610 <__NVIC_SetPriority>
}
 8004756:	bf00      	nop
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	4603      	mov	r3, r0
 8004766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff ff31 	bl	80045d4 <__NVIC_EnableIRQ>
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff ffa2 	bl	80046cc <SysTick_Config>
 8004788:	4603      	mov	r3, r0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e054      	b.n	8004850 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	7f5b      	ldrb	r3, [r3, #29]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d105      	bne.n	80047bc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fc fbb0 	bl	8000f1c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	791b      	ldrb	r3, [r3, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10c      	bne.n	80047e4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a22      	ldr	r2, [pc, #136]	@ (8004858 <HAL_CRC_Init+0xc4>)
 80047d0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0218 	bic.w	r2, r2, #24
 80047e0:	609a      	str	r2, [r3, #8]
 80047e2:	e00c      	b.n	80047fe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6899      	ldr	r1, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	461a      	mov	r2, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f834 	bl	800485c <HAL_CRCEx_Polynomial_Set>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e028      	b.n	8004850 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	795b      	ldrb	r3, [r3, #5]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d105      	bne.n	8004812 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f04f 32ff 	mov.w	r2, #4294967295
 800480e:	611a      	str	r2, [r3, #16]
 8004810:	e004      	b.n	800481c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6912      	ldr	r2, [r2, #16]
 800481a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699a      	ldr	r2, [r3, #24]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	04c11db7 	.word	0x04c11db7

0800485c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800486c:	231f      	movs	r3, #31
 800486e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	75fb      	strb	r3, [r7, #23]
 800487e:	e063      	b.n	8004948 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004880:	bf00      	nop
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1e5a      	subs	r2, r3, #1
 8004886:	613a      	str	r2, [r7, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d009      	beq.n	80048a0 <HAL_CRCEx_Polynomial_Set+0x44>
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b18      	cmp	r3, #24
 80048a4:	d846      	bhi.n	8004934 <HAL_CRCEx_Polynomial_Set+0xd8>
 80048a6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ac <HAL_CRCEx_Polynomial_Set+0x50>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	0800493b 	.word	0x0800493b
 80048b0:	08004935 	.word	0x08004935
 80048b4:	08004935 	.word	0x08004935
 80048b8:	08004935 	.word	0x08004935
 80048bc:	08004935 	.word	0x08004935
 80048c0:	08004935 	.word	0x08004935
 80048c4:	08004935 	.word	0x08004935
 80048c8:	08004935 	.word	0x08004935
 80048cc:	08004929 	.word	0x08004929
 80048d0:	08004935 	.word	0x08004935
 80048d4:	08004935 	.word	0x08004935
 80048d8:	08004935 	.word	0x08004935
 80048dc:	08004935 	.word	0x08004935
 80048e0:	08004935 	.word	0x08004935
 80048e4:	08004935 	.word	0x08004935
 80048e8:	08004935 	.word	0x08004935
 80048ec:	0800491d 	.word	0x0800491d
 80048f0:	08004935 	.word	0x08004935
 80048f4:	08004935 	.word	0x08004935
 80048f8:	08004935 	.word	0x08004935
 80048fc:	08004935 	.word	0x08004935
 8004900:	08004935 	.word	0x08004935
 8004904:	08004935 	.word	0x08004935
 8004908:	08004935 	.word	0x08004935
 800490c:	08004911 	.word	0x08004911
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	2b06      	cmp	r3, #6
 8004914:	d913      	bls.n	800493e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800491a:	e010      	b.n	800493e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b07      	cmp	r3, #7
 8004920:	d90f      	bls.n	8004942 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004926:	e00c      	b.n	8004942 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b0f      	cmp	r3, #15
 800492c:	d90b      	bls.n	8004946 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004932:	e008      	b.n	8004946 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
        break;
 8004938:	e006      	b.n	8004948 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800493a:	bf00      	nop
 800493c:	e004      	b.n	8004948 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800493e:	bf00      	nop
 8004940:	e002      	b.n	8004948 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004942:	bf00      	nop
 8004944:	e000      	b.n	8004948 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004946:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004948:	7dfb      	ldrb	r3, [r7, #23]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10d      	bne.n	800496a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f023 0118 	bic.w	r1, r3, #24
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	430a      	orrs	r2, r1
 8004968:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800496a:	7dfb      	ldrb	r3, [r7, #23]
}
 800496c:	4618      	mov	r0, r3
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004984:	f7ff fdc4 	bl	8004510 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e099      	b.n	8004ac8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0201 	bic.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049b4:	e00f      	b.n	80049d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049b6:	f7ff fdab 	bl	8004510 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b05      	cmp	r3, #5
 80049c2:	d908      	bls.n	80049d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2203      	movs	r2, #3
 80049ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e078      	b.n	8004ac8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e8      	bne.n	80049b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4b38      	ldr	r3, [pc, #224]	@ (8004ad0 <HAL_DMA_Init+0x158>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d107      	bne.n	8004a40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f023 0307 	bic.w	r3, r3, #7
 8004a56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d117      	bne.n	8004a9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00e      	beq.n	8004a9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fb73 	bl	8005168 <DMA_CheckFifoParam>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2240      	movs	r2, #64	@ 0x40
 8004a8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004a96:	2301      	movs	r3, #1
 8004a98:	e016      	b.n	8004ac8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fb2a 	bl	80050fc <DMA_CalcBaseAndBitshift>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab0:	223f      	movs	r2, #63	@ 0x3f
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	f010803f 	.word	0xf010803f

08004ad4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e050      	b.n	8004b88 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d101      	bne.n	8004af6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004af2:	2302      	movs	r3, #2
 8004af4:	e048      	b.n	8004b88 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2200      	movs	r2, #0
 8004b14:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2200      	movs	r2, #0
 8004b24:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2221      	movs	r2, #33	@ 0x21
 8004b34:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fae0 	bl	80050fc <DMA_CalcBaseAndBitshift>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b44:	223f      	movs	r2, #63	@ 0x3f
 8004b46:	409a      	lsls	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_DMA_Start_IT+0x26>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e048      	b.n	8004c48 <HAL_DMA_Start_IT+0xb8>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d137      	bne.n	8004c3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 fa5e 	bl	80050a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be8:	223f      	movs	r2, #63	@ 0x3f
 8004bea:	409a      	lsls	r2, r3
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0216 	orr.w	r2, r2, #22
 8004bfe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c0e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0208 	orr.w	r2, r2, #8
 8004c26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0201 	orr.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e005      	b.n	8004c46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c42:	2302      	movs	r3, #2
 8004c44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c5e:	f7ff fc57 	bl	8004510 <HAL_GetTick>
 8004c62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d008      	beq.n	8004c82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2280      	movs	r2, #128	@ 0x80
 8004c74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e052      	b.n	8004d28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0216 	bic.w	r2, r2, #22
 8004c90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695a      	ldr	r2, [r3, #20]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ca0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d103      	bne.n	8004cb2 <HAL_DMA_Abort+0x62>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0208 	bic.w	r2, r2, #8
 8004cc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0201 	bic.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cd2:	e013      	b.n	8004cfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cd4:	f7ff fc1c 	bl	8004510 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b05      	cmp	r3, #5
 8004ce0:	d90c      	bls.n	8004cfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2203      	movs	r2, #3
 8004cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e015      	b.n	8004d28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e4      	bne.n	8004cd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d0e:	223f      	movs	r2, #63	@ 0x3f
 8004d10:	409a      	lsls	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d004      	beq.n	8004d4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2280      	movs	r2, #128	@ 0x80
 8004d48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e00c      	b.n	8004d68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2205      	movs	r2, #5
 8004d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0201 	bic.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004d80:	4b8e      	ldr	r3, [pc, #568]	@ (8004fbc <HAL_DMA_IRQHandler+0x248>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a8e      	ldr	r2, [pc, #568]	@ (8004fc0 <HAL_DMA_IRQHandler+0x24c>)
 8004d86:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8a:	0a9b      	lsrs	r3, r3, #10
 8004d8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d9e:	2208      	movs	r2, #8
 8004da0:	409a      	lsls	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4013      	ands	r3, r2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d01a      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d013      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0204 	bic.w	r2, r2, #4
 8004dc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dcc:	2208      	movs	r2, #8
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd8:	f043 0201 	orr.w	r2, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de4:	2201      	movs	r2, #1
 8004de6:	409a      	lsls	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d012      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e02:	2201      	movs	r2, #1
 8004e04:	409a      	lsls	r2, r3
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0e:	f043 0202 	orr.w	r2, r3, #2
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e1a:	2204      	movs	r2, #4
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d012      	beq.n	8004e4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00b      	beq.n	8004e4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e38:	2204      	movs	r2, #4
 8004e3a:	409a      	lsls	r2, r3
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e44:	f043 0204 	orr.w	r2, r3, #4
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e50:	2210      	movs	r2, #16
 8004e52:	409a      	lsls	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d043      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d03c      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6e:	2210      	movs	r2, #16
 8004e70:	409a      	lsls	r2, r3
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d018      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d108      	bne.n	8004ea4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d024      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	4798      	blx	r3
 8004ea2:	e01f      	b.n	8004ee4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01b      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	4798      	blx	r3
 8004eb4:	e016      	b.n	8004ee4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d107      	bne.n	8004ed4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0208 	bic.w	r2, r2, #8
 8004ed2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee8:	2220      	movs	r2, #32
 8004eea:	409a      	lsls	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 808f 	beq.w	8005014 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8087 	beq.w	8005014 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	409a      	lsls	r2, r3
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b05      	cmp	r3, #5
 8004f1c:	d136      	bne.n	8004f8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0216 	bic.w	r2, r2, #22
 8004f2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695a      	ldr	r2, [r3, #20]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d103      	bne.n	8004f4e <HAL_DMA_IRQHandler+0x1da>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0208 	bic.w	r2, r2, #8
 8004f5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f62:	223f      	movs	r2, #63	@ 0x3f
 8004f64:	409a      	lsls	r2, r3
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d07e      	beq.n	8005080 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	4798      	blx	r3
        }
        return;
 8004f8a:	e079      	b.n	8005080 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d01d      	beq.n	8004fd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10d      	bne.n	8004fc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d031      	beq.n	8005014 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	4798      	blx	r3
 8004fb8:	e02c      	b.n	8005014 <HAL_DMA_IRQHandler+0x2a0>
 8004fba:	bf00      	nop
 8004fbc:	20000000 	.word	0x20000000
 8004fc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d023      	beq.n	8005014 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	4798      	blx	r3
 8004fd4:	e01e      	b.n	8005014 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10f      	bne.n	8005004 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0210 	bic.w	r2, r2, #16
 8004ff2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005018:	2b00      	cmp	r3, #0
 800501a:	d032      	beq.n	8005082 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d022      	beq.n	800506e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2205      	movs	r2, #5
 800502c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0201 	bic.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	3301      	adds	r3, #1
 8005044:	60bb      	str	r3, [r7, #8]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	429a      	cmp	r2, r3
 800504a:	d307      	bcc.n	800505c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f2      	bne.n	8005040 <HAL_DMA_IRQHandler+0x2cc>
 800505a:	e000      	b.n	800505e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800505c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005072:	2b00      	cmp	r3, #0
 8005074:	d005      	beq.n	8005082 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	4798      	blx	r3
 800507e:	e000      	b.n	8005082 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005080:	bf00      	nop
    }
  }
}
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80050bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b40      	cmp	r3, #64	@ 0x40
 80050cc:	d108      	bne.n	80050e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80050de:	e007      	b.n	80050f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	60da      	str	r2, [r3, #12]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	3b10      	subs	r3, #16
 800510c:	4a13      	ldr	r2, [pc, #76]	@ (800515c <DMA_CalcBaseAndBitshift+0x60>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	091b      	lsrs	r3, r3, #4
 8005114:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005116:	4a12      	ldr	r2, [pc, #72]	@ (8005160 <DMA_CalcBaseAndBitshift+0x64>)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b03      	cmp	r3, #3
 8005128:	d908      	bls.n	800513c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	4b0c      	ldr	r3, [pc, #48]	@ (8005164 <DMA_CalcBaseAndBitshift+0x68>)
 8005132:	4013      	ands	r3, r2
 8005134:	1d1a      	adds	r2, r3, #4
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	659a      	str	r2, [r3, #88]	@ 0x58
 800513a:	e006      	b.n	800514a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	4b08      	ldr	r3, [pc, #32]	@ (8005164 <DMA_CalcBaseAndBitshift+0x68>)
 8005144:	4013      	ands	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	aaaaaaab 	.word	0xaaaaaaab
 8005160:	08014bc8 	.word	0x08014bc8
 8005164:	fffffc00 	.word	0xfffffc00

08005168 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005178:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d11f      	bne.n	80051c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b03      	cmp	r3, #3
 8005186:	d856      	bhi.n	8005236 <DMA_CheckFifoParam+0xce>
 8005188:	a201      	add	r2, pc, #4	@ (adr r2, 8005190 <DMA_CheckFifoParam+0x28>)
 800518a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518e:	bf00      	nop
 8005190:	080051a1 	.word	0x080051a1
 8005194:	080051b3 	.word	0x080051b3
 8005198:	080051a1 	.word	0x080051a1
 800519c:	08005237 	.word	0x08005237
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d046      	beq.n	800523a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b0:	e043      	b.n	800523a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051ba:	d140      	bne.n	800523e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051c0:	e03d      	b.n	800523e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ca:	d121      	bne.n	8005210 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d837      	bhi.n	8005242 <DMA_CheckFifoParam+0xda>
 80051d2:	a201      	add	r2, pc, #4	@ (adr r2, 80051d8 <DMA_CheckFifoParam+0x70>)
 80051d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d8:	080051e9 	.word	0x080051e9
 80051dc:	080051ef 	.word	0x080051ef
 80051e0:	080051e9 	.word	0x080051e9
 80051e4:	08005201 	.word	0x08005201
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
      break;
 80051ec:	e030      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d025      	beq.n	8005246 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051fe:	e022      	b.n	8005246 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005208:	d11f      	bne.n	800524a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800520e:	e01c      	b.n	800524a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d903      	bls.n	800521e <DMA_CheckFifoParam+0xb6>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b03      	cmp	r3, #3
 800521a:	d003      	beq.n	8005224 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800521c:	e018      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	73fb      	strb	r3, [r7, #15]
      break;
 8005222:	e015      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005228:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00e      	beq.n	800524e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	73fb      	strb	r3, [r7, #15]
      break;
 8005234:	e00b      	b.n	800524e <DMA_CheckFifoParam+0xe6>
      break;
 8005236:	bf00      	nop
 8005238:	e00a      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
      break;
 800523a:	bf00      	nop
 800523c:	e008      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
      break;
 800523e:	bf00      	nop
 8005240:	e006      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
      break;
 8005242:	bf00      	nop
 8005244:	e004      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
      break;
 8005246:	bf00      	nop
 8005248:	e002      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
      break;   
 800524a:	bf00      	nop
 800524c:	e000      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
      break;
 800524e:	bf00      	nop
    }
  } 
  
  return status; 
 8005250:	7bfb      	ldrb	r3, [r7, #15]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop

08005260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005260:	b480      	push	{r7}
 8005262:	b089      	sub	sp, #36	@ 0x24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800526a:	2300      	movs	r3, #0
 800526c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800526e:	2300      	movs	r3, #0
 8005270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005272:	2300      	movs	r3, #0
 8005274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005276:	2300      	movs	r3, #0
 8005278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
 800527e:	e175      	b.n	800556c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005280:	2201      	movs	r2, #1
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4013      	ands	r3, r2
 8005292:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	429a      	cmp	r2, r3
 800529a:	f040 8164 	bne.w	8005566 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d005      	beq.n	80052b6 <HAL_GPIO_Init+0x56>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d130      	bne.n	8005318 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	2203      	movs	r2, #3
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	43db      	mvns	r3, r3
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	4013      	ands	r3, r2
 80052cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052ec:	2201      	movs	r2, #1
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	43db      	mvns	r3, r3
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	4013      	ands	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	091b      	lsrs	r3, r3, #4
 8005302:	f003 0201 	and.w	r2, r3, #1
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	4313      	orrs	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	2b03      	cmp	r3, #3
 8005322:	d017      	beq.n	8005354 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	2203      	movs	r2, #3
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	43db      	mvns	r3, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4013      	ands	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d123      	bne.n	80053a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	08da      	lsrs	r2, r3, #3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3208      	adds	r2, #8
 8005368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800536c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	220f      	movs	r2, #15
 8005378:	fa02 f303 	lsl.w	r3, r2, r3
 800537c:	43db      	mvns	r3, r3
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	4013      	ands	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4313      	orrs	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	08da      	lsrs	r2, r3, #3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3208      	adds	r2, #8
 80053a2:	69b9      	ldr	r1, [r7, #24]
 80053a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	2203      	movs	r2, #3
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	43db      	mvns	r3, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4013      	ands	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f003 0203 	and.w	r2, r3, #3
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 80be 	beq.w	8005566 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053ea:	4b66      	ldr	r3, [pc, #408]	@ (8005584 <HAL_GPIO_Init+0x324>)
 80053ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ee:	4a65      	ldr	r2, [pc, #404]	@ (8005584 <HAL_GPIO_Init+0x324>)
 80053f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80053f6:	4b63      	ldr	r3, [pc, #396]	@ (8005584 <HAL_GPIO_Init+0x324>)
 80053f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005402:	4a61      	ldr	r2, [pc, #388]	@ (8005588 <HAL_GPIO_Init+0x328>)
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	089b      	lsrs	r3, r3, #2
 8005408:	3302      	adds	r3, #2
 800540a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800540e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	220f      	movs	r2, #15
 800541a:	fa02 f303 	lsl.w	r3, r2, r3
 800541e:	43db      	mvns	r3, r3
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	4013      	ands	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a58      	ldr	r2, [pc, #352]	@ (800558c <HAL_GPIO_Init+0x32c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d037      	beq.n	800549e <HAL_GPIO_Init+0x23e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a57      	ldr	r2, [pc, #348]	@ (8005590 <HAL_GPIO_Init+0x330>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d031      	beq.n	800549a <HAL_GPIO_Init+0x23a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a56      	ldr	r2, [pc, #344]	@ (8005594 <HAL_GPIO_Init+0x334>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d02b      	beq.n	8005496 <HAL_GPIO_Init+0x236>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a55      	ldr	r2, [pc, #340]	@ (8005598 <HAL_GPIO_Init+0x338>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d025      	beq.n	8005492 <HAL_GPIO_Init+0x232>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a54      	ldr	r2, [pc, #336]	@ (800559c <HAL_GPIO_Init+0x33c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01f      	beq.n	800548e <HAL_GPIO_Init+0x22e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a53      	ldr	r2, [pc, #332]	@ (80055a0 <HAL_GPIO_Init+0x340>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d019      	beq.n	800548a <HAL_GPIO_Init+0x22a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a52      	ldr	r2, [pc, #328]	@ (80055a4 <HAL_GPIO_Init+0x344>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d013      	beq.n	8005486 <HAL_GPIO_Init+0x226>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a51      	ldr	r2, [pc, #324]	@ (80055a8 <HAL_GPIO_Init+0x348>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00d      	beq.n	8005482 <HAL_GPIO_Init+0x222>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a50      	ldr	r2, [pc, #320]	@ (80055ac <HAL_GPIO_Init+0x34c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d007      	beq.n	800547e <HAL_GPIO_Init+0x21e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a4f      	ldr	r2, [pc, #316]	@ (80055b0 <HAL_GPIO_Init+0x350>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d101      	bne.n	800547a <HAL_GPIO_Init+0x21a>
 8005476:	2309      	movs	r3, #9
 8005478:	e012      	b.n	80054a0 <HAL_GPIO_Init+0x240>
 800547a:	230a      	movs	r3, #10
 800547c:	e010      	b.n	80054a0 <HAL_GPIO_Init+0x240>
 800547e:	2308      	movs	r3, #8
 8005480:	e00e      	b.n	80054a0 <HAL_GPIO_Init+0x240>
 8005482:	2307      	movs	r3, #7
 8005484:	e00c      	b.n	80054a0 <HAL_GPIO_Init+0x240>
 8005486:	2306      	movs	r3, #6
 8005488:	e00a      	b.n	80054a0 <HAL_GPIO_Init+0x240>
 800548a:	2305      	movs	r3, #5
 800548c:	e008      	b.n	80054a0 <HAL_GPIO_Init+0x240>
 800548e:	2304      	movs	r3, #4
 8005490:	e006      	b.n	80054a0 <HAL_GPIO_Init+0x240>
 8005492:	2303      	movs	r3, #3
 8005494:	e004      	b.n	80054a0 <HAL_GPIO_Init+0x240>
 8005496:	2302      	movs	r3, #2
 8005498:	e002      	b.n	80054a0 <HAL_GPIO_Init+0x240>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <HAL_GPIO_Init+0x240>
 800549e:	2300      	movs	r3, #0
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	f002 0203 	and.w	r2, r2, #3
 80054a6:	0092      	lsls	r2, r2, #2
 80054a8:	4093      	lsls	r3, r2
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80054b0:	4935      	ldr	r1, [pc, #212]	@ (8005588 <HAL_GPIO_Init+0x328>)
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	089b      	lsrs	r3, r3, #2
 80054b6:	3302      	adds	r3, #2
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054be:	4b3d      	ldr	r3, [pc, #244]	@ (80055b4 <HAL_GPIO_Init+0x354>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	43db      	mvns	r3, r3
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	4013      	ands	r3, r2
 80054cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054e2:	4a34      	ldr	r2, [pc, #208]	@ (80055b4 <HAL_GPIO_Init+0x354>)
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054e8:	4b32      	ldr	r3, [pc, #200]	@ (80055b4 <HAL_GPIO_Init+0x354>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	43db      	mvns	r3, r3
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	4013      	ands	r3, r2
 80054f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800550c:	4a29      	ldr	r2, [pc, #164]	@ (80055b4 <HAL_GPIO_Init+0x354>)
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005512:	4b28      	ldr	r3, [pc, #160]	@ (80055b4 <HAL_GPIO_Init+0x354>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	43db      	mvns	r3, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4013      	ands	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005536:	4a1f      	ldr	r2, [pc, #124]	@ (80055b4 <HAL_GPIO_Init+0x354>)
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800553c:	4b1d      	ldr	r3, [pc, #116]	@ (80055b4 <HAL_GPIO_Init+0x354>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	43db      	mvns	r3, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4013      	ands	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005560:	4a14      	ldr	r2, [pc, #80]	@ (80055b4 <HAL_GPIO_Init+0x354>)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	3301      	adds	r3, #1
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	2b0f      	cmp	r3, #15
 8005570:	f67f ae86 	bls.w	8005280 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	3724      	adds	r7, #36	@ 0x24
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40023800 	.word	0x40023800
 8005588:	40013800 	.word	0x40013800
 800558c:	40020000 	.word	0x40020000
 8005590:	40020400 	.word	0x40020400
 8005594:	40020800 	.word	0x40020800
 8005598:	40020c00 	.word	0x40020c00
 800559c:	40021000 	.word	0x40021000
 80055a0:	40021400 	.word	0x40021400
 80055a4:	40021800 	.word	0x40021800
 80055a8:	40021c00 	.word	0x40021c00
 80055ac:	40022000 	.word	0x40022000
 80055b0:	40022400 	.word	0x40022400
 80055b4:	40013c00 	.word	0x40013c00

080055b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80055c2:	2300      	movs	r3, #0
 80055c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	e0d9      	b.n	8005788 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80055d4:	2201      	movs	r2, #1
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	4013      	ands	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	f040 80c9 	bne.w	8005782 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80055f0:	4a6b      	ldr	r2, [pc, #428]	@ (80057a0 <HAL_GPIO_DeInit+0x1e8>)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	089b      	lsrs	r3, r3, #2
 80055f6:	3302      	adds	r3, #2
 80055f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055fc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f003 0303 	and.w	r3, r3, #3
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	220f      	movs	r2, #15
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	4013      	ands	r3, r2
 8005610:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a63      	ldr	r2, [pc, #396]	@ (80057a4 <HAL_GPIO_DeInit+0x1ec>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d037      	beq.n	800568a <HAL_GPIO_DeInit+0xd2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a62      	ldr	r2, [pc, #392]	@ (80057a8 <HAL_GPIO_DeInit+0x1f0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d031      	beq.n	8005686 <HAL_GPIO_DeInit+0xce>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a61      	ldr	r2, [pc, #388]	@ (80057ac <HAL_GPIO_DeInit+0x1f4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d02b      	beq.n	8005682 <HAL_GPIO_DeInit+0xca>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a60      	ldr	r2, [pc, #384]	@ (80057b0 <HAL_GPIO_DeInit+0x1f8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d025      	beq.n	800567e <HAL_GPIO_DeInit+0xc6>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a5f      	ldr	r2, [pc, #380]	@ (80057b4 <HAL_GPIO_DeInit+0x1fc>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d01f      	beq.n	800567a <HAL_GPIO_DeInit+0xc2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a5e      	ldr	r2, [pc, #376]	@ (80057b8 <HAL_GPIO_DeInit+0x200>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d019      	beq.n	8005676 <HAL_GPIO_DeInit+0xbe>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a5d      	ldr	r2, [pc, #372]	@ (80057bc <HAL_GPIO_DeInit+0x204>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <HAL_GPIO_DeInit+0xba>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a5c      	ldr	r2, [pc, #368]	@ (80057c0 <HAL_GPIO_DeInit+0x208>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00d      	beq.n	800566e <HAL_GPIO_DeInit+0xb6>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a5b      	ldr	r2, [pc, #364]	@ (80057c4 <HAL_GPIO_DeInit+0x20c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d007      	beq.n	800566a <HAL_GPIO_DeInit+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a5a      	ldr	r2, [pc, #360]	@ (80057c8 <HAL_GPIO_DeInit+0x210>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d101      	bne.n	8005666 <HAL_GPIO_DeInit+0xae>
 8005662:	2309      	movs	r3, #9
 8005664:	e012      	b.n	800568c <HAL_GPIO_DeInit+0xd4>
 8005666:	230a      	movs	r3, #10
 8005668:	e010      	b.n	800568c <HAL_GPIO_DeInit+0xd4>
 800566a:	2308      	movs	r3, #8
 800566c:	e00e      	b.n	800568c <HAL_GPIO_DeInit+0xd4>
 800566e:	2307      	movs	r3, #7
 8005670:	e00c      	b.n	800568c <HAL_GPIO_DeInit+0xd4>
 8005672:	2306      	movs	r3, #6
 8005674:	e00a      	b.n	800568c <HAL_GPIO_DeInit+0xd4>
 8005676:	2305      	movs	r3, #5
 8005678:	e008      	b.n	800568c <HAL_GPIO_DeInit+0xd4>
 800567a:	2304      	movs	r3, #4
 800567c:	e006      	b.n	800568c <HAL_GPIO_DeInit+0xd4>
 800567e:	2303      	movs	r3, #3
 8005680:	e004      	b.n	800568c <HAL_GPIO_DeInit+0xd4>
 8005682:	2302      	movs	r3, #2
 8005684:	e002      	b.n	800568c <HAL_GPIO_DeInit+0xd4>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <HAL_GPIO_DeInit+0xd4>
 800568a:	2300      	movs	r3, #0
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	f002 0203 	and.w	r2, r2, #3
 8005692:	0092      	lsls	r2, r2, #2
 8005694:	4093      	lsls	r3, r2
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	429a      	cmp	r2, r3
 800569a:	d132      	bne.n	8005702 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800569c:	4b4b      	ldr	r3, [pc, #300]	@ (80057cc <HAL_GPIO_DeInit+0x214>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	43db      	mvns	r3, r3
 80056a4:	4949      	ldr	r1, [pc, #292]	@ (80057cc <HAL_GPIO_DeInit+0x214>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80056aa:	4b48      	ldr	r3, [pc, #288]	@ (80057cc <HAL_GPIO_DeInit+0x214>)
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	43db      	mvns	r3, r3
 80056b2:	4946      	ldr	r1, [pc, #280]	@ (80057cc <HAL_GPIO_DeInit+0x214>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80056b8:	4b44      	ldr	r3, [pc, #272]	@ (80057cc <HAL_GPIO_DeInit+0x214>)
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	43db      	mvns	r3, r3
 80056c0:	4942      	ldr	r1, [pc, #264]	@ (80057cc <HAL_GPIO_DeInit+0x214>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80056c6:	4b41      	ldr	r3, [pc, #260]	@ (80057cc <HAL_GPIO_DeInit+0x214>)
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	43db      	mvns	r3, r3
 80056ce:	493f      	ldr	r1, [pc, #252]	@ (80057cc <HAL_GPIO_DeInit+0x214>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	220f      	movs	r2, #15
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80056e4:	4a2e      	ldr	r2, [pc, #184]	@ (80057a0 <HAL_GPIO_DeInit+0x1e8>)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	089b      	lsrs	r3, r3, #2
 80056ea:	3302      	adds	r3, #2
 80056ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	43da      	mvns	r2, r3
 80056f4:	482a      	ldr	r0, [pc, #168]	@ (80057a0 <HAL_GPIO_DeInit+0x1e8>)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	089b      	lsrs	r3, r3, #2
 80056fa:	400a      	ands	r2, r1
 80056fc:	3302      	adds	r3, #2
 80056fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	2103      	movs	r1, #3
 800570c:	fa01 f303 	lsl.w	r3, r1, r3
 8005710:	43db      	mvns	r3, r3
 8005712:	401a      	ands	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	08da      	lsrs	r2, r3, #3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3208      	adds	r2, #8
 8005720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	220f      	movs	r2, #15
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	43db      	mvns	r3, r3
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	08d2      	lsrs	r2, r2, #3
 8005738:	4019      	ands	r1, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3208      	adds	r2, #8
 800573e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	2103      	movs	r1, #3
 800574c:	fa01 f303 	lsl.w	r3, r1, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	401a      	ands	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	2101      	movs	r1, #1
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	fa01 f303 	lsl.w	r3, r1, r3
 8005764:	43db      	mvns	r3, r3
 8005766:	401a      	ands	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	2103      	movs	r1, #3
 8005776:	fa01 f303 	lsl.w	r3, r1, r3
 800577a:	43db      	mvns	r3, r3
 800577c:	401a      	ands	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	3301      	adds	r3, #1
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b0f      	cmp	r3, #15
 800578c:	f67f af22 	bls.w	80055d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40013800 	.word	0x40013800
 80057a4:	40020000 	.word	0x40020000
 80057a8:	40020400 	.word	0x40020400
 80057ac:	40020800 	.word	0x40020800
 80057b0:	40020c00 	.word	0x40020c00
 80057b4:	40021000 	.word	0x40021000
 80057b8:	40021400 	.word	0x40021400
 80057bc:	40021800 	.word	0x40021800
 80057c0:	40021c00 	.word	0x40021c00
 80057c4:	40022000 	.word	0x40022000
 80057c8:	40022400 	.word	0x40022400
 80057cc:	40013c00 	.word	0x40013c00

080057d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	887b      	ldrh	r3, [r7, #2]
 80057e2:	4013      	ands	r3, r2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
 80057ec:	e001      	b.n	80057f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057ee:	2300      	movs	r3, #0
 80057f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	807b      	strh	r3, [r7, #2]
 800580c:	4613      	mov	r3, r2
 800580e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005810:	787b      	ldrb	r3, [r7, #1]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005816:	887a      	ldrh	r2, [r7, #2]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800581c:	e003      	b.n	8005826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800581e:	887b      	ldrh	r3, [r7, #2]
 8005820:	041a      	lsls	r2, r3, #16
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	619a      	str	r2, [r3, #24]
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	460b      	mov	r3, r1
 800583c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005844:	887a      	ldrh	r2, [r7, #2]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4013      	ands	r3, r2
 800584a:	041a      	lsls	r2, r3, #16
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	43d9      	mvns	r1, r3
 8005850:	887b      	ldrh	r3, [r7, #2]
 8005852:	400b      	ands	r3, r1
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	619a      	str	r2, [r3, #24]
}
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005872:	4b08      	ldr	r3, [pc, #32]	@ (8005894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005874:	695a      	ldr	r2, [r3, #20]
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d006      	beq.n	800588c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800587e:	4a05      	ldr	r2, [pc, #20]	@ (8005894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005880:	88fb      	ldrh	r3, [r7, #6]
 8005882:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	4618      	mov	r0, r3
 8005888:	f7fb ff74 	bl	8001774 <HAL_GPIO_EXTI_Callback>
  }
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40013c00 	.word	0x40013c00

08005898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e08b      	b.n	80059c2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f8b5 	bl	8005a2e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2224      	movs	r2, #36	@ 0x24
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0201 	bic.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80058e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d107      	bne.n	8005912 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800590e:	609a      	str	r2, [r3, #8]
 8005910:	e006      	b.n	8005920 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800591e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d108      	bne.n	800593a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005936:	605a      	str	r2, [r3, #4]
 8005938:	e007      	b.n	800594a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005948:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6859      	ldr	r1, [r3, #4]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	4b1d      	ldr	r3, [pc, #116]	@ (80059cc <HAL_I2C_Init+0x134>)
 8005956:	430b      	orrs	r3, r1
 8005958:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005968:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691a      	ldr	r2, [r3, #16]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69d9      	ldr	r1, [r3, #28]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1a      	ldr	r2, [r3, #32]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0201 	orr.w	r2, r2, #1
 80059a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	02008000 	.word	0x02008000

080059d0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e021      	b.n	8005a26 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2224      	movs	r2, #36	@ 0x24
 80059e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f821 	bl	8005a42 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
	...

08005a58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	4608      	mov	r0, r1
 8005a62:	4611      	mov	r1, r2
 8005a64:	461a      	mov	r2, r3
 8005a66:	4603      	mov	r3, r0
 8005a68:	817b      	strh	r3, [r7, #10]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	813b      	strh	r3, [r7, #8]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b20      	cmp	r3, #32
 8005a7c:	f040 80f9 	bne.w	8005c72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_I2C_Mem_Write+0x34>
 8005a86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d105      	bne.n	8005a98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e0ed      	b.n	8005c74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_I2C_Mem_Write+0x4e>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e0e6      	b.n	8005c74 <HAL_I2C_Mem_Write+0x21c>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005aae:	f7fe fd2f 	bl	8004510 <HAL_GetTick>
 8005ab2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	2319      	movs	r3, #25
 8005aba:	2201      	movs	r2, #1
 8005abc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 fad1 	bl	8006068 <I2C_WaitOnFlagUntilTimeout>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e0d1      	b.n	8005c74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2221      	movs	r2, #33	@ 0x21
 8005ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2240      	movs	r2, #64	@ 0x40
 8005adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a3a      	ldr	r2, [r7, #32]
 8005aea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005af8:	88f8      	ldrh	r0, [r7, #6]
 8005afa:	893a      	ldrh	r2, [r7, #8]
 8005afc:	8979      	ldrh	r1, [r7, #10]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	4603      	mov	r3, r0
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 f9e1 	bl	8005ed0 <I2C_RequestMemoryWrite>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0a9      	b.n	8005c74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2bff      	cmp	r3, #255	@ 0xff
 8005b28:	d90e      	bls.n	8005b48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	22ff      	movs	r2, #255	@ 0xff
 8005b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	8979      	ldrh	r1, [r7, #10]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 fc55 	bl	80063f0 <I2C_TransferConfig>
 8005b46:	e00f      	b.n	8005b68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	8979      	ldrh	r1, [r7, #10]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 fc44 	bl	80063f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 fad4 	bl	800611a <I2C_WaitOnTXISFlagUntilTimeout>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e07b      	b.n	8005c74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b80:	781a      	ldrb	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d034      	beq.n	8005c20 <HAL_I2C_Mem_Write+0x1c8>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d130      	bne.n	8005c20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	2180      	movs	r1, #128	@ 0x80
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 fa4d 	bl	8006068 <I2C_WaitOnFlagUntilTimeout>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e04d      	b.n	8005c74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2bff      	cmp	r3, #255	@ 0xff
 8005be0:	d90e      	bls.n	8005c00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	22ff      	movs	r2, #255	@ 0xff
 8005be6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	8979      	ldrh	r1, [r7, #10]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 fbf9 	bl	80063f0 <I2C_TransferConfig>
 8005bfe:	e00f      	b.n	8005c20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	8979      	ldrh	r1, [r7, #10]
 8005c12:	2300      	movs	r3, #0
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 fbe8 	bl	80063f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d19e      	bne.n	8005b68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 faba 	bl	80061a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e01a      	b.n	8005c74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2220      	movs	r2, #32
 8005c44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6859      	ldr	r1, [r3, #4]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	4b0a      	ldr	r3, [pc, #40]	@ (8005c7c <HAL_I2C_Mem_Write+0x224>)
 8005c52:	400b      	ands	r3, r1
 8005c54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e000      	b.n	8005c74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005c72:	2302      	movs	r3, #2
  }
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	fe00e800 	.word	0xfe00e800

08005c80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	4608      	mov	r0, r1
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4603      	mov	r3, r0
 8005c90:	817b      	strh	r3, [r7, #10]
 8005c92:	460b      	mov	r3, r1
 8005c94:	813b      	strh	r3, [r7, #8]
 8005c96:	4613      	mov	r3, r2
 8005c98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	f040 80fd 	bne.w	8005ea2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <HAL_I2C_Mem_Read+0x34>
 8005cae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d105      	bne.n	8005cc0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e0f1      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <HAL_I2C_Mem_Read+0x4e>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e0ea      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x224>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cd6:	f7fe fc1b 	bl	8004510 <HAL_GetTick>
 8005cda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	2319      	movs	r3, #25
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f9bd 	bl	8006068 <I2C_WaitOnFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e0d5      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2222      	movs	r2, #34	@ 0x22
 8005cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2240      	movs	r2, #64	@ 0x40
 8005d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a3a      	ldr	r2, [r7, #32]
 8005d12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d20:	88f8      	ldrh	r0, [r7, #6]
 8005d22:	893a      	ldrh	r2, [r7, #8]
 8005d24:	8979      	ldrh	r1, [r7, #10]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	4603      	mov	r3, r0
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f921 	bl	8005f78 <I2C_RequestMemoryRead>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e0ad      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2bff      	cmp	r3, #255	@ 0xff
 8005d50:	d90e      	bls.n	8005d70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	8979      	ldrh	r1, [r7, #10]
 8005d60:	4b52      	ldr	r3, [pc, #328]	@ (8005eac <HAL_I2C_Mem_Read+0x22c>)
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 fb41 	bl	80063f0 <I2C_TransferConfig>
 8005d6e:	e00f      	b.n	8005d90 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	8979      	ldrh	r1, [r7, #10]
 8005d82:	4b4a      	ldr	r3, [pc, #296]	@ (8005eac <HAL_I2C_Mem_Read+0x22c>)
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fb30 	bl	80063f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d96:	2200      	movs	r2, #0
 8005d98:	2104      	movs	r1, #4
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 f964 	bl	8006068 <I2C_WaitOnFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e07c      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d034      	beq.n	8005e50 <HAL_I2C_Mem_Read+0x1d0>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d130      	bne.n	8005e50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df4:	2200      	movs	r2, #0
 8005df6:	2180      	movs	r1, #128	@ 0x80
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f935 	bl	8006068 <I2C_WaitOnFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e04d      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2bff      	cmp	r3, #255	@ 0xff
 8005e10:	d90e      	bls.n	8005e30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	8979      	ldrh	r1, [r7, #10]
 8005e20:	2300      	movs	r3, #0
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 fae1 	bl	80063f0 <I2C_TransferConfig>
 8005e2e:	e00f      	b.n	8005e50 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	8979      	ldrh	r1, [r7, #10]
 8005e42:	2300      	movs	r3, #0
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fad0 	bl	80063f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d19a      	bne.n	8005d90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f9a2 	bl	80061a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e01a      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2220      	movs	r2, #32
 8005e74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6859      	ldr	r1, [r3, #4]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb0 <HAL_I2C_Mem_Read+0x230>)
 8005e82:	400b      	ands	r3, r1
 8005e84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e000      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005ea2:	2302      	movs	r3, #2
  }
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	80002400 	.word	0x80002400
 8005eb0:	fe00e800 	.word	0xfe00e800

08005eb4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ec2:	b2db      	uxtb	r3, r3
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af02      	add	r7, sp, #8
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	4608      	mov	r0, r1
 8005eda:	4611      	mov	r1, r2
 8005edc:	461a      	mov	r2, r3
 8005ede:	4603      	mov	r3, r0
 8005ee0:	817b      	strh	r3, [r7, #10]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	813b      	strh	r3, [r7, #8]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	8979      	ldrh	r1, [r7, #10]
 8005ef0:	4b20      	ldr	r3, [pc, #128]	@ (8005f74 <I2C_RequestMemoryWrite+0xa4>)
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 fa79 	bl	80063f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	69b9      	ldr	r1, [r7, #24]
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 f909 	bl	800611a <I2C_WaitOnTXISFlagUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e02c      	b.n	8005f6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f12:	88fb      	ldrh	r3, [r7, #6]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d105      	bne.n	8005f24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f18:	893b      	ldrh	r3, [r7, #8]
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f22:	e015      	b.n	8005f50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005f24:	893b      	ldrh	r3, [r7, #8]
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	69b9      	ldr	r1, [r7, #24]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f8ef 	bl	800611a <I2C_WaitOnTXISFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e012      	b.n	8005f6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f46:	893b      	ldrh	r3, [r7, #8]
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	2200      	movs	r2, #0
 8005f58:	2180      	movs	r1, #128	@ 0x80
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f884 	bl	8006068 <I2C_WaitOnFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	80002000 	.word	0x80002000

08005f78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	4608      	mov	r0, r1
 8005f82:	4611      	mov	r1, r2
 8005f84:	461a      	mov	r2, r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	817b      	strh	r3, [r7, #10]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	813b      	strh	r3, [r7, #8]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	8979      	ldrh	r1, [r7, #10]
 8005f98:	4b20      	ldr	r3, [pc, #128]	@ (800601c <I2C_RequestMemoryRead+0xa4>)
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 fa26 	bl	80063f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	69b9      	ldr	r1, [r7, #24]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f8b6 	bl	800611a <I2C_WaitOnTXISFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e02c      	b.n	8006012 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fb8:	88fb      	ldrh	r3, [r7, #6]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d105      	bne.n	8005fca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fbe:	893b      	ldrh	r3, [r7, #8]
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fc8:	e015      	b.n	8005ff6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005fca:	893b      	ldrh	r3, [r7, #8]
 8005fcc:	0a1b      	lsrs	r3, r3, #8
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	69b9      	ldr	r1, [r7, #24]
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f89c 	bl	800611a <I2C_WaitOnTXISFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e012      	b.n	8006012 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fec:	893b      	ldrh	r3, [r7, #8]
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2140      	movs	r1, #64	@ 0x40
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f831 	bl	8006068 <I2C_WaitOnFlagUntilTimeout>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	80002000 	.word	0x80002000

08006020 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b02      	cmp	r3, #2
 8006034:	d103      	bne.n	800603e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2200      	movs	r2, #0
 800603c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b01      	cmp	r3, #1
 800604a:	d007      	beq.n	800605c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	619a      	str	r2, [r3, #24]
  }
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	603b      	str	r3, [r7, #0]
 8006074:	4613      	mov	r3, r2
 8006076:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006078:	e03b      	b.n	80060f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 f8d6 	bl	8006230 <I2C_IsErrorOccurred>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e041      	b.n	8006112 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006094:	d02d      	beq.n	80060f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006096:	f7fe fa3b 	bl	8004510 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d302      	bcc.n	80060ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d122      	bne.n	80060f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	699a      	ldr	r2, [r3, #24]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	4013      	ands	r3, r2
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	bf0c      	ite	eq
 80060bc:	2301      	moveq	r3, #1
 80060be:	2300      	movne	r3, #0
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	461a      	mov	r2, r3
 80060c4:	79fb      	ldrb	r3, [r7, #7]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d113      	bne.n	80060f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ce:	f043 0220 	orr.w	r2, r3, #32
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e00f      	b.n	8006112 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699a      	ldr	r2, [r3, #24]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4013      	ands	r3, r2
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	429a      	cmp	r2, r3
 8006100:	bf0c      	ite	eq
 8006102:	2301      	moveq	r3, #1
 8006104:	2300      	movne	r3, #0
 8006106:	b2db      	uxtb	r3, r3
 8006108:	461a      	mov	r2, r3
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	429a      	cmp	r2, r3
 800610e:	d0b4      	beq.n	800607a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006126:	e033      	b.n	8006190 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f87f 	bl	8006230 <I2C_IsErrorOccurred>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e031      	b.n	80061a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006142:	d025      	beq.n	8006190 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006144:	f7fe f9e4 	bl	8004510 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	429a      	cmp	r2, r3
 8006152:	d302      	bcc.n	800615a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d11a      	bne.n	8006190 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b02      	cmp	r3, #2
 8006166:	d013      	beq.n	8006190 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616c:	f043 0220 	orr.w	r2, r3, #32
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e007      	b.n	80061a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b02      	cmp	r3, #2
 800619c:	d1c4      	bne.n	8006128 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061b4:	e02f      	b.n	8006216 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f838 	bl	8006230 <I2C_IsErrorOccurred>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e02d      	b.n	8006226 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ca:	f7fe f9a1 	bl	8004510 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d302      	bcc.n	80061e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d11a      	bne.n	8006216 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	f003 0320 	and.w	r3, r3, #32
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d013      	beq.n	8006216 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e007      	b.n	8006226 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b20      	cmp	r3, #32
 8006222:	d1c8      	bne.n	80061b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08a      	sub	sp, #40	@ 0x28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	f003 0310 	and.w	r3, r3, #16
 8006258:	2b00      	cmp	r3, #0
 800625a:	d068      	beq.n	800632e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2210      	movs	r2, #16
 8006262:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006264:	e049      	b.n	80062fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d045      	beq.n	80062fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800626e:	f7fe f94f 	bl	8004510 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	429a      	cmp	r2, r3
 800627c:	d302      	bcc.n	8006284 <I2C_IsErrorOccurred+0x54>
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d13a      	bne.n	80062fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800628e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006296:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062a6:	d121      	bne.n	80062ec <I2C_IsErrorOccurred+0xbc>
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062ae:	d01d      	beq.n	80062ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80062b0:	7cfb      	ldrb	r3, [r7, #19]
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d01a      	beq.n	80062ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80062c6:	f7fe f923 	bl	8004510 <HAL_GetTick>
 80062ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062cc:	e00e      	b.n	80062ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80062ce:	f7fe f91f 	bl	8004510 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b19      	cmp	r3, #25
 80062da:	d907      	bls.n	80062ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	f043 0320 	orr.w	r3, r3, #32
 80062e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80062ea:	e006      	b.n	80062fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b20      	cmp	r3, #32
 80062f8:	d1e9      	bne.n	80062ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	f003 0320 	and.w	r3, r3, #32
 8006304:	2b20      	cmp	r3, #32
 8006306:	d003      	beq.n	8006310 <I2C_IsErrorOccurred+0xe0>
 8006308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0aa      	beq.n	8006266 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006314:	2b00      	cmp	r3, #0
 8006316:	d103      	bne.n	8006320 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2220      	movs	r2, #32
 800631e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	f043 0304 	orr.w	r3, r3, #4
 8006326:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00b      	beq.n	8006358 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	f043 0301 	orr.w	r3, r3, #1
 8006346:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006350:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00b      	beq.n	800637a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	f043 0308 	orr.w	r3, r3, #8
 8006368:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006372:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	f043 0302 	orr.w	r3, r3, #2
 800638a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006394:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800639c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01c      	beq.n	80063de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff fe3b 	bl	8006020 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6859      	ldr	r1, [r3, #4]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	4b0d      	ldr	r3, [pc, #52]	@ (80063ec <I2C_IsErrorOccurred+0x1bc>)
 80063b6:	400b      	ands	r3, r1
 80063b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	431a      	orrs	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80063de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3728      	adds	r7, #40	@ 0x28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	fe00e800 	.word	0xfe00e800

080063f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	607b      	str	r3, [r7, #4]
 80063fa:	460b      	mov	r3, r1
 80063fc:	817b      	strh	r3, [r7, #10]
 80063fe:	4613      	mov	r3, r2
 8006400:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006402:	897b      	ldrh	r3, [r7, #10]
 8006404:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006408:	7a7b      	ldrb	r3, [r7, #9]
 800640a:	041b      	lsls	r3, r3, #16
 800640c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006410:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	4313      	orrs	r3, r2
 800641a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800641e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	0d5b      	lsrs	r3, r3, #21
 800642a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800642e:	4b08      	ldr	r3, [pc, #32]	@ (8006450 <I2C_TransferConfig+0x60>)
 8006430:	430b      	orrs	r3, r1
 8006432:	43db      	mvns	r3, r3
 8006434:	ea02 0103 	and.w	r1, r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	430a      	orrs	r2, r1
 8006440:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006442:	bf00      	nop
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	03ff63ff 	.word	0x03ff63ff

08006454 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800645e:	4b23      	ldr	r3, [pc, #140]	@ (80064ec <HAL_PWREx_EnableOverDrive+0x98>)
 8006460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006462:	4a22      	ldr	r2, [pc, #136]	@ (80064ec <HAL_PWREx_EnableOverDrive+0x98>)
 8006464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006468:	6413      	str	r3, [r2, #64]	@ 0x40
 800646a:	4b20      	ldr	r3, [pc, #128]	@ (80064ec <HAL_PWREx_EnableOverDrive+0x98>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006476:	4b1e      	ldr	r3, [pc, #120]	@ (80064f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a1d      	ldr	r2, [pc, #116]	@ (80064f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800647c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006480:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006482:	f7fe f845 	bl	8004510 <HAL_GetTick>
 8006486:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006488:	e009      	b.n	800649e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800648a:	f7fe f841 	bl	8004510 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006498:	d901      	bls.n	800649e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e022      	b.n	80064e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800649e:	4b14      	ldr	r3, [pc, #80]	@ (80064f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064aa:	d1ee      	bne.n	800648a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80064ac:	4b10      	ldr	r3, [pc, #64]	@ (80064f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a0f      	ldr	r2, [pc, #60]	@ (80064f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064b8:	f7fe f82a 	bl	8004510 <HAL_GetTick>
 80064bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064be:	e009      	b.n	80064d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064c0:	f7fe f826 	bl	8004510 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064ce:	d901      	bls.n	80064d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e007      	b.n	80064e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064d4:	4b06      	ldr	r3, [pc, #24]	@ (80064f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064e0:	d1ee      	bne.n	80064c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40023800 	.word	0x40023800
 80064f0:	40007000 	.word	0x40007000

080064f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80064fc:	2300      	movs	r3, #0
 80064fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e291      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 8087 	beq.w	8006626 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006518:	4b96      	ldr	r3, [pc, #600]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f003 030c 	and.w	r3, r3, #12
 8006520:	2b04      	cmp	r3, #4
 8006522:	d00c      	beq.n	800653e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006524:	4b93      	ldr	r3, [pc, #588]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f003 030c 	and.w	r3, r3, #12
 800652c:	2b08      	cmp	r3, #8
 800652e:	d112      	bne.n	8006556 <HAL_RCC_OscConfig+0x62>
 8006530:	4b90      	ldr	r3, [pc, #576]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006538:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800653c:	d10b      	bne.n	8006556 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800653e:	4b8d      	ldr	r3, [pc, #564]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d06c      	beq.n	8006624 <HAL_RCC_OscConfig+0x130>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d168      	bne.n	8006624 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e26b      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800655e:	d106      	bne.n	800656e <HAL_RCC_OscConfig+0x7a>
 8006560:	4b84      	ldr	r3, [pc, #528]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a83      	ldr	r2, [pc, #524]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	e02e      	b.n	80065cc <HAL_RCC_OscConfig+0xd8>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10c      	bne.n	8006590 <HAL_RCC_OscConfig+0x9c>
 8006576:	4b7f      	ldr	r3, [pc, #508]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a7e      	ldr	r2, [pc, #504]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 800657c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	4b7c      	ldr	r3, [pc, #496]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a7b      	ldr	r2, [pc, #492]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006588:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	e01d      	b.n	80065cc <HAL_RCC_OscConfig+0xd8>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006598:	d10c      	bne.n	80065b4 <HAL_RCC_OscConfig+0xc0>
 800659a:	4b76      	ldr	r3, [pc, #472]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a75      	ldr	r2, [pc, #468]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 80065a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	4b73      	ldr	r3, [pc, #460]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a72      	ldr	r2, [pc, #456]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 80065ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	e00b      	b.n	80065cc <HAL_RCC_OscConfig+0xd8>
 80065b4:	4b6f      	ldr	r3, [pc, #444]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a6e      	ldr	r2, [pc, #440]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 80065ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	4b6c      	ldr	r3, [pc, #432]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a6b      	ldr	r2, [pc, #428]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 80065c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d013      	beq.n	80065fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d4:	f7fd ff9c 	bl	8004510 <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065dc:	f7fd ff98 	bl	8004510 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b64      	cmp	r3, #100	@ 0x64
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e21f      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ee:	4b61      	ldr	r3, [pc, #388]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0f0      	beq.n	80065dc <HAL_RCC_OscConfig+0xe8>
 80065fa:	e014      	b.n	8006626 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fc:	f7fd ff88 	bl	8004510 <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006604:	f7fd ff84 	bl	8004510 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b64      	cmp	r3, #100	@ 0x64
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e20b      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006616:	4b57      	ldr	r3, [pc, #348]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f0      	bne.n	8006604 <HAL_RCC_OscConfig+0x110>
 8006622:	e000      	b.n	8006626 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d069      	beq.n	8006706 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006632:	4b50      	ldr	r3, [pc, #320]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 030c 	and.w	r3, r3, #12
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00b      	beq.n	8006656 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800663e:	4b4d      	ldr	r3, [pc, #308]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 030c 	and.w	r3, r3, #12
 8006646:	2b08      	cmp	r3, #8
 8006648:	d11c      	bne.n	8006684 <HAL_RCC_OscConfig+0x190>
 800664a:	4b4a      	ldr	r3, [pc, #296]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d116      	bne.n	8006684 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006656:	4b47      	ldr	r3, [pc, #284]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <HAL_RCC_OscConfig+0x17a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d001      	beq.n	800666e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e1df      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800666e:	4b41      	ldr	r3, [pc, #260]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	493d      	ldr	r1, [pc, #244]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 800667e:	4313      	orrs	r3, r2
 8006680:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006682:	e040      	b.n	8006706 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d023      	beq.n	80066d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800668c:	4b39      	ldr	r3, [pc, #228]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a38      	ldr	r2, [pc, #224]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006692:	f043 0301 	orr.w	r3, r3, #1
 8006696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006698:	f7fd ff3a 	bl	8004510 <HAL_GetTick>
 800669c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800669e:	e008      	b.n	80066b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066a0:	f7fd ff36 	bl	8004510 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e1bd      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066b2:	4b30      	ldr	r3, [pc, #192]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0f0      	beq.n	80066a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066be:	4b2d      	ldr	r3, [pc, #180]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	4929      	ldr	r1, [pc, #164]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	600b      	str	r3, [r1, #0]
 80066d2:	e018      	b.n	8006706 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066d4:	4b27      	ldr	r3, [pc, #156]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a26      	ldr	r2, [pc, #152]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 80066da:	f023 0301 	bic.w	r3, r3, #1
 80066de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e0:	f7fd ff16 	bl	8004510 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066e8:	f7fd ff12 	bl	8004510 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e199      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066fa:	4b1e      	ldr	r3, [pc, #120]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f0      	bne.n	80066e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b00      	cmp	r3, #0
 8006710:	d038      	beq.n	8006784 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d019      	beq.n	800674e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800671a:	4b16      	ldr	r3, [pc, #88]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 800671c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800671e:	4a15      	ldr	r2, [pc, #84]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006720:	f043 0301 	orr.w	r3, r3, #1
 8006724:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006726:	f7fd fef3 	bl	8004510 <HAL_GetTick>
 800672a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800672c:	e008      	b.n	8006740 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800672e:	f7fd feef 	bl	8004510 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d901      	bls.n	8006740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e176      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006740:	4b0c      	ldr	r3, [pc, #48]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0f0      	beq.n	800672e <HAL_RCC_OscConfig+0x23a>
 800674c:	e01a      	b.n	8006784 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800674e:	4b09      	ldr	r3, [pc, #36]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006752:	4a08      	ldr	r2, [pc, #32]	@ (8006774 <HAL_RCC_OscConfig+0x280>)
 8006754:	f023 0301 	bic.w	r3, r3, #1
 8006758:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800675a:	f7fd fed9 	bl	8004510 <HAL_GetTick>
 800675e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006760:	e00a      	b.n	8006778 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006762:	f7fd fed5 	bl	8004510 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d903      	bls.n	8006778 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e15c      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>
 8006774:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006778:	4b91      	ldr	r3, [pc, #580]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 800677a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1ee      	bne.n	8006762 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 80a4 	beq.w	80068da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006792:	4b8b      	ldr	r3, [pc, #556]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10d      	bne.n	80067ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800679e:	4b88      	ldr	r3, [pc, #544]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 80067a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a2:	4a87      	ldr	r2, [pc, #540]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 80067a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80067aa:	4b85      	ldr	r3, [pc, #532]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 80067ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067b2:	60bb      	str	r3, [r7, #8]
 80067b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067b6:	2301      	movs	r3, #1
 80067b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067ba:	4b82      	ldr	r3, [pc, #520]	@ (80069c4 <HAL_RCC_OscConfig+0x4d0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d118      	bne.n	80067f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80067c6:	4b7f      	ldr	r3, [pc, #508]	@ (80069c4 <HAL_RCC_OscConfig+0x4d0>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a7e      	ldr	r2, [pc, #504]	@ (80069c4 <HAL_RCC_OscConfig+0x4d0>)
 80067cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067d2:	f7fd fe9d 	bl	8004510 <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067d8:	e008      	b.n	80067ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067da:	f7fd fe99 	bl	8004510 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b64      	cmp	r3, #100	@ 0x64
 80067e6:	d901      	bls.n	80067ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e120      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067ec:	4b75      	ldr	r3, [pc, #468]	@ (80069c4 <HAL_RCC_OscConfig+0x4d0>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0f0      	beq.n	80067da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d106      	bne.n	800680e <HAL_RCC_OscConfig+0x31a>
 8006800:	4b6f      	ldr	r3, [pc, #444]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006804:	4a6e      	ldr	r2, [pc, #440]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006806:	f043 0301 	orr.w	r3, r3, #1
 800680a:	6713      	str	r3, [r2, #112]	@ 0x70
 800680c:	e02d      	b.n	800686a <HAL_RCC_OscConfig+0x376>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10c      	bne.n	8006830 <HAL_RCC_OscConfig+0x33c>
 8006816:	4b6a      	ldr	r3, [pc, #424]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800681a:	4a69      	ldr	r2, [pc, #420]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	6713      	str	r3, [r2, #112]	@ 0x70
 8006822:	4b67      	ldr	r3, [pc, #412]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006826:	4a66      	ldr	r2, [pc, #408]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006828:	f023 0304 	bic.w	r3, r3, #4
 800682c:	6713      	str	r3, [r2, #112]	@ 0x70
 800682e:	e01c      	b.n	800686a <HAL_RCC_OscConfig+0x376>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2b05      	cmp	r3, #5
 8006836:	d10c      	bne.n	8006852 <HAL_RCC_OscConfig+0x35e>
 8006838:	4b61      	ldr	r3, [pc, #388]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 800683a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800683c:	4a60      	ldr	r2, [pc, #384]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 800683e:	f043 0304 	orr.w	r3, r3, #4
 8006842:	6713      	str	r3, [r2, #112]	@ 0x70
 8006844:	4b5e      	ldr	r3, [pc, #376]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006848:	4a5d      	ldr	r2, [pc, #372]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 800684a:	f043 0301 	orr.w	r3, r3, #1
 800684e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006850:	e00b      	b.n	800686a <HAL_RCC_OscConfig+0x376>
 8006852:	4b5b      	ldr	r3, [pc, #364]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006856:	4a5a      	ldr	r2, [pc, #360]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006858:	f023 0301 	bic.w	r3, r3, #1
 800685c:	6713      	str	r3, [r2, #112]	@ 0x70
 800685e:	4b58      	ldr	r3, [pc, #352]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006862:	4a57      	ldr	r2, [pc, #348]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006864:	f023 0304 	bic.w	r3, r3, #4
 8006868:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d015      	beq.n	800689e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006872:	f7fd fe4d 	bl	8004510 <HAL_GetTick>
 8006876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006878:	e00a      	b.n	8006890 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800687a:	f7fd fe49 	bl	8004510 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006888:	4293      	cmp	r3, r2
 800688a:	d901      	bls.n	8006890 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e0ce      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006890:	4b4b      	ldr	r3, [pc, #300]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0ee      	beq.n	800687a <HAL_RCC_OscConfig+0x386>
 800689c:	e014      	b.n	80068c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800689e:	f7fd fe37 	bl	8004510 <HAL_GetTick>
 80068a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068a4:	e00a      	b.n	80068bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068a6:	f7fd fe33 	bl	8004510 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e0b8      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068bc:	4b40      	ldr	r3, [pc, #256]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 80068be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1ee      	bne.n	80068a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068c8:	7dfb      	ldrb	r3, [r7, #23]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d105      	bne.n	80068da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068ce:	4b3c      	ldr	r3, [pc, #240]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 80068d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d2:	4a3b      	ldr	r2, [pc, #236]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 80068d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068d8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 80a4 	beq.w	8006a2c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068e4:	4b36      	ldr	r3, [pc, #216]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f003 030c 	and.w	r3, r3, #12
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d06b      	beq.n	80069c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d149      	bne.n	800698c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068f8:	4b31      	ldr	r3, [pc, #196]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a30      	ldr	r2, [pc, #192]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 80068fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006904:	f7fd fe04 	bl	8004510 <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800690c:	f7fd fe00 	bl	8004510 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b02      	cmp	r3, #2
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e087      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800691e:	4b28      	ldr	r3, [pc, #160]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1f0      	bne.n	800690c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69da      	ldr	r2, [r3, #28]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	431a      	orrs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006938:	019b      	lsls	r3, r3, #6
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006940:	085b      	lsrs	r3, r3, #1
 8006942:	3b01      	subs	r3, #1
 8006944:	041b      	lsls	r3, r3, #16
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694c:	061b      	lsls	r3, r3, #24
 800694e:	4313      	orrs	r3, r2
 8006950:	4a1b      	ldr	r2, [pc, #108]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006952:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006956:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006958:	4b19      	ldr	r3, [pc, #100]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a18      	ldr	r2, [pc, #96]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 800695e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006964:	f7fd fdd4 	bl	8004510 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800696c:	f7fd fdd0 	bl	8004510 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e057      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800697e:	4b10      	ldr	r3, [pc, #64]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0f0      	beq.n	800696c <HAL_RCC_OscConfig+0x478>
 800698a:	e04f      	b.n	8006a2c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800698c:	4b0c      	ldr	r3, [pc, #48]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a0b      	ldr	r2, [pc, #44]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 8006992:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006998:	f7fd fdba 	bl	8004510 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a0:	f7fd fdb6 	bl	8004510 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e03d      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069b2:	4b03      	ldr	r3, [pc, #12]	@ (80069c0 <HAL_RCC_OscConfig+0x4cc>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f0      	bne.n	80069a0 <HAL_RCC_OscConfig+0x4ac>
 80069be:	e035      	b.n	8006a2c <HAL_RCC_OscConfig+0x538>
 80069c0:	40023800 	.word	0x40023800
 80069c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80069c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a38 <HAL_RCC_OscConfig+0x544>)
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d028      	beq.n	8006a28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d121      	bne.n	8006a28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d11a      	bne.n	8006a28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80069f8:	4013      	ands	r3, r2
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d111      	bne.n	8006a28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0e:	085b      	lsrs	r3, r3, #1
 8006a10:	3b01      	subs	r3, #1
 8006a12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d107      	bne.n	8006a28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d001      	beq.n	8006a2c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	40023800 	.word	0x40023800

08006a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e0d0      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a54:	4b6a      	ldr	r3, [pc, #424]	@ (8006c00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d910      	bls.n	8006a84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a62:	4b67      	ldr	r3, [pc, #412]	@ (8006c00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f023 020f 	bic.w	r2, r3, #15
 8006a6a:	4965      	ldr	r1, [pc, #404]	@ (8006c00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a72:	4b63      	ldr	r3, [pc, #396]	@ (8006c00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d001      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e0b8      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d020      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a9c:	4b59      	ldr	r3, [pc, #356]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	4a58      	ldr	r2, [pc, #352]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006aa2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006aa6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ab4:	4b53      	ldr	r3, [pc, #332]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	4a52      	ldr	r2, [pc, #328]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006aba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006abe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ac0:	4b50      	ldr	r3, [pc, #320]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	494d      	ldr	r1, [pc, #308]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d040      	beq.n	8006b60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d107      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ae6:	4b47      	ldr	r3, [pc, #284]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d115      	bne.n	8006b1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e07f      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d107      	bne.n	8006b0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006afe:	4b41      	ldr	r3, [pc, #260]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d109      	bne.n	8006b1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e073      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e06b      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b1e:	4b39      	ldr	r3, [pc, #228]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f023 0203 	bic.w	r2, r3, #3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	4936      	ldr	r1, [pc, #216]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b30:	f7fd fcee 	bl	8004510 <HAL_GetTick>
 8006b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b36:	e00a      	b.n	8006b4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b38:	f7fd fcea 	bl	8004510 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e053      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 020c 	and.w	r2, r3, #12
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d1eb      	bne.n	8006b38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b60:	4b27      	ldr	r3, [pc, #156]	@ (8006c00 <HAL_RCC_ClockConfig+0x1c4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 030f 	and.w	r3, r3, #15
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d210      	bcs.n	8006b90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6e:	4b24      	ldr	r3, [pc, #144]	@ (8006c00 <HAL_RCC_ClockConfig+0x1c4>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f023 020f 	bic.w	r2, r3, #15
 8006b76:	4922      	ldr	r1, [pc, #136]	@ (8006c00 <HAL_RCC_ClockConfig+0x1c4>)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7e:	4b20      	ldr	r3, [pc, #128]	@ (8006c00 <HAL_RCC_ClockConfig+0x1c4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d001      	beq.n	8006b90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e032      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d008      	beq.n	8006bae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b9c:	4b19      	ldr	r3, [pc, #100]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	4916      	ldr	r1, [pc, #88]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006bba:	4b12      	ldr	r3, [pc, #72]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	490e      	ldr	r1, [pc, #56]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bce:	f000 f821 	bl	8006c14 <HAL_RCC_GetSysClockFreq>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c8>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	091b      	lsrs	r3, r3, #4
 8006bda:	f003 030f 	and.w	r3, r3, #15
 8006bde:	490a      	ldr	r1, [pc, #40]	@ (8006c08 <HAL_RCC_ClockConfig+0x1cc>)
 8006be0:	5ccb      	ldrb	r3, [r1, r3]
 8006be2:	fa22 f303 	lsr.w	r3, r2, r3
 8006be6:	4a09      	ldr	r2, [pc, #36]	@ (8006c0c <HAL_RCC_ClockConfig+0x1d0>)
 8006be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006bea:	4b09      	ldr	r3, [pc, #36]	@ (8006c10 <HAL_RCC_ClockConfig+0x1d4>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fd fc4a 	bl	8004488 <HAL_InitTick>

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40023c00 	.word	0x40023c00
 8006c04:	40023800 	.word	0x40023800
 8006c08:	08014bb0 	.word	0x08014bb0
 8006c0c:	20000000 	.word	0x20000000
 8006c10:	20000038 	.word	0x20000038

08006c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c18:	b090      	sub	sp, #64	@ 0x40
 8006c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c20:	2300      	movs	r3, #0
 8006c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c24:	2300      	movs	r3, #0
 8006c26:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c2c:	4b59      	ldr	r3, [pc, #356]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f003 030c 	and.w	r3, r3, #12
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d00d      	beq.n	8006c54 <HAL_RCC_GetSysClockFreq+0x40>
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	f200 80a1 	bhi.w	8006d80 <HAL_RCC_GetSysClockFreq+0x16c>
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <HAL_RCC_GetSysClockFreq+0x34>
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d003      	beq.n	8006c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8006c46:	e09b      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c48:	4b53      	ldr	r3, [pc, #332]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0x184>)
 8006c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c4c:	e09b      	b.n	8006d86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c4e:	4b53      	ldr	r3, [pc, #332]	@ (8006d9c <HAL_RCC_GetSysClockFreq+0x188>)
 8006c50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c52:	e098      	b.n	8006d86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c54:	4b4f      	ldr	r3, [pc, #316]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006c5e:	4b4d      	ldr	r3, [pc, #308]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d028      	beq.n	8006cbc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	099b      	lsrs	r3, r3, #6
 8006c70:	2200      	movs	r2, #0
 8006c72:	623b      	str	r3, [r7, #32]
 8006c74:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	4b47      	ldr	r3, [pc, #284]	@ (8006d9c <HAL_RCC_GetSysClockFreq+0x188>)
 8006c80:	fb03 f201 	mul.w	r2, r3, r1
 8006c84:	2300      	movs	r3, #0
 8006c86:	fb00 f303 	mul.w	r3, r0, r3
 8006c8a:	4413      	add	r3, r2
 8006c8c:	4a43      	ldr	r2, [pc, #268]	@ (8006d9c <HAL_RCC_GetSysClockFreq+0x188>)
 8006c8e:	fba0 1202 	umull	r1, r2, r0, r2
 8006c92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c94:	460a      	mov	r2, r1
 8006c96:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c9a:	4413      	add	r3, r2
 8006c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	61fa      	str	r2, [r7, #28]
 8006ca6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006caa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006cae:	f7f9 ff9b 	bl	8000be8 <__aeabi_uldivmod>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cba:	e053      	b.n	8006d64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cbc:	4b35      	ldr	r3, [pc, #212]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	099b      	lsrs	r3, r3, #6
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	613b      	str	r3, [r7, #16]
 8006cc6:	617a      	str	r2, [r7, #20]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006cce:	f04f 0b00 	mov.w	fp, #0
 8006cd2:	4652      	mov	r2, sl
 8006cd4:	465b      	mov	r3, fp
 8006cd6:	f04f 0000 	mov.w	r0, #0
 8006cda:	f04f 0100 	mov.w	r1, #0
 8006cde:	0159      	lsls	r1, r3, #5
 8006ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ce4:	0150      	lsls	r0, r2, #5
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	ebb2 080a 	subs.w	r8, r2, sl
 8006cee:	eb63 090b 	sbc.w	r9, r3, fp
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006cfe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006d02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006d06:	ebb2 0408 	subs.w	r4, r2, r8
 8006d0a:	eb63 0509 	sbc.w	r5, r3, r9
 8006d0e:	f04f 0200 	mov.w	r2, #0
 8006d12:	f04f 0300 	mov.w	r3, #0
 8006d16:	00eb      	lsls	r3, r5, #3
 8006d18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d1c:	00e2      	lsls	r2, r4, #3
 8006d1e:	4614      	mov	r4, r2
 8006d20:	461d      	mov	r5, r3
 8006d22:	eb14 030a 	adds.w	r3, r4, sl
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	eb45 030b 	adc.w	r3, r5, fp
 8006d2c:	607b      	str	r3, [r7, #4]
 8006d2e:	f04f 0200 	mov.w	r2, #0
 8006d32:	f04f 0300 	mov.w	r3, #0
 8006d36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	028b      	lsls	r3, r1, #10
 8006d3e:	4621      	mov	r1, r4
 8006d40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d44:	4621      	mov	r1, r4
 8006d46:	028a      	lsls	r2, r1, #10
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4e:	2200      	movs	r2, #0
 8006d50:	60bb      	str	r3, [r7, #8]
 8006d52:	60fa      	str	r2, [r7, #12]
 8006d54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d58:	f7f9 ff46 	bl	8000be8 <__aeabi_uldivmod>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4613      	mov	r3, r2
 8006d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006d64:	4b0b      	ldr	r3, [pc, #44]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	0c1b      	lsrs	r3, r3, #16
 8006d6a:	f003 0303 	and.w	r3, r3, #3
 8006d6e:	3301      	adds	r3, #1
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006d74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d7e:	e002      	b.n	8006d86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d80:	4b05      	ldr	r3, [pc, #20]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3740      	adds	r7, #64	@ 0x40
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d92:	bf00      	nop
 8006d94:	40023800 	.word	0x40023800
 8006d98:	00f42400 	.word	0x00f42400
 8006d9c:	017d7840 	.word	0x017d7840

08006da0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006da4:	4b03      	ldr	r3, [pc, #12]	@ (8006db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006da6:	681b      	ldr	r3, [r3, #0]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20000000 	.word	0x20000000

08006db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006dbc:	f7ff fff0 	bl	8006da0 <HAL_RCC_GetHCLKFreq>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	4b05      	ldr	r3, [pc, #20]	@ (8006dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	0a9b      	lsrs	r3, r3, #10
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	4903      	ldr	r1, [pc, #12]	@ (8006ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dce:	5ccb      	ldrb	r3, [r1, r3]
 8006dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	40023800 	.word	0x40023800
 8006ddc:	08014bc0 	.word	0x08014bc0

08006de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006de4:	f7ff ffdc 	bl	8006da0 <HAL_RCC_GetHCLKFreq>
 8006de8:	4602      	mov	r2, r0
 8006dea:	4b05      	ldr	r3, [pc, #20]	@ (8006e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	0b5b      	lsrs	r3, r3, #13
 8006df0:	f003 0307 	and.w	r3, r3, #7
 8006df4:	4903      	ldr	r1, [pc, #12]	@ (8006e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006df6:	5ccb      	ldrb	r3, [r1, r3]
 8006df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	40023800 	.word	0x40023800
 8006e04:	08014bc0 	.word	0x08014bc0

08006e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b088      	sub	sp, #32
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d012      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e30:	4b69      	ldr	r3, [pc, #420]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	4a68      	ldr	r2, [pc, #416]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e36:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006e3a:	6093      	str	r3, [r2, #8]
 8006e3c:	4b66      	ldr	r3, [pc, #408]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e44:	4964      	ldr	r1, [pc, #400]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006e52:	2301      	movs	r3, #1
 8006e54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d017      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e62:	4b5d      	ldr	r3, [pc, #372]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e68:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e70:	4959      	ldr	r1, [pc, #356]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e80:	d101      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006e82:	2301      	movs	r3, #1
 8006e84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d017      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e9e:	4b4e      	ldr	r3, [pc, #312]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ea4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eac:	494a      	ldr	r1, [pc, #296]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ebc:	d101      	bne.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006eda:	2301      	movs	r3, #1
 8006edc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0320 	and.w	r3, r3, #32
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 808b 	beq.w	8007002 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006eec:	4b3a      	ldr	r3, [pc, #232]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef0:	4a39      	ldr	r2, [pc, #228]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ef6:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ef8:	4b37      	ldr	r3, [pc, #220]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f00:	60bb      	str	r3, [r7, #8]
 8006f02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f04:	4b35      	ldr	r3, [pc, #212]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a34      	ldr	r2, [pc, #208]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f10:	f7fd fafe 	bl	8004510 <HAL_GetTick>
 8006f14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f16:	e008      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f18:	f7fd fafa 	bl	8004510 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b64      	cmp	r3, #100	@ 0x64
 8006f24:	d901      	bls.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e357      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0f0      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f36:	4b28      	ldr	r3, [pc, #160]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d035      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d02e      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f54:	4b20      	ldr	r3, [pc, #128]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f62:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f68:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f74:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006f76:	4a18      	ldr	r2, [pc, #96]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f7c:	4b16      	ldr	r3, [pc, #88]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d114      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f88:	f7fd fac2 	bl	8004510 <HAL_GetTick>
 8006f8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f8e:	e00a      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f90:	f7fd fabe 	bl	8004510 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e319      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0ee      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fbe:	d111      	bne.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006fc0:	4b05      	ldr	r3, [pc, #20]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006fcc:	4b04      	ldr	r3, [pc, #16]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006fce:	400b      	ands	r3, r1
 8006fd0:	4901      	ldr	r1, [pc, #4]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	608b      	str	r3, [r1, #8]
 8006fd6:	e00b      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006fd8:	40023800 	.word	0x40023800
 8006fdc:	40007000 	.word	0x40007000
 8006fe0:	0ffffcff 	.word	0x0ffffcff
 8006fe4:	4baa      	ldr	r3, [pc, #680]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	4aa9      	ldr	r2, [pc, #676]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006fee:	6093      	str	r3, [r2, #8]
 8006ff0:	4ba7      	ldr	r3, [pc, #668]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ff2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ffc:	49a4      	ldr	r1, [pc, #656]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0310 	and.w	r3, r3, #16
 800700a:	2b00      	cmp	r3, #0
 800700c:	d010      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800700e:	4ba0      	ldr	r3, [pc, #640]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007014:	4a9e      	ldr	r2, [pc, #632]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800701a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800701e:	4b9c      	ldr	r3, [pc, #624]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007020:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007028:	4999      	ldr	r1, [pc, #612]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800702a:	4313      	orrs	r3, r2
 800702c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800703c:	4b94      	ldr	r3, [pc, #592]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800703e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007042:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800704a:	4991      	ldr	r1, [pc, #580]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800705e:	4b8c      	ldr	r3, [pc, #560]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007064:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800706c:	4988      	ldr	r1, [pc, #544]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800706e:	4313      	orrs	r3, r2
 8007070:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007080:	4b83      	ldr	r3, [pc, #524]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007086:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800708e:	4980      	ldr	r1, [pc, #512]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007090:	4313      	orrs	r3, r2
 8007092:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070a2:	4b7b      	ldr	r3, [pc, #492]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b0:	4977      	ldr	r1, [pc, #476]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070c4:	4b72      	ldr	r3, [pc, #456]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ca:	f023 0203 	bic.w	r2, r3, #3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d2:	496f      	ldr	r1, [pc, #444]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070e6:	4b6a      	ldr	r3, [pc, #424]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ec:	f023 020c 	bic.w	r2, r3, #12
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070f4:	4966      	ldr	r1, [pc, #408]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007108:	4b61      	ldr	r3, [pc, #388]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800710a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800710e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007116:	495e      	ldr	r1, [pc, #376]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007118:	4313      	orrs	r3, r2
 800711a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800712a:	4b59      	ldr	r3, [pc, #356]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800712c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007130:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007138:	4955      	ldr	r1, [pc, #340]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800714c:	4b50      	ldr	r3, [pc, #320]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007152:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800715a:	494d      	ldr	r1, [pc, #308]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800715c:	4313      	orrs	r3, r2
 800715e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800716e:	4b48      	ldr	r3, [pc, #288]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007174:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717c:	4944      	ldr	r1, [pc, #272]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00a      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007190:	4b3f      	ldr	r3, [pc, #252]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007196:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800719e:	493c      	ldr	r1, [pc, #240]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80071b2:	4b37      	ldr	r3, [pc, #220]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071c0:	4933      	ldr	r1, [pc, #204]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00a      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80071d4:	4b2e      	ldr	r3, [pc, #184]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071e2:	492b      	ldr	r1, [pc, #172]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d011      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80071f6:	4b26      	ldr	r3, [pc, #152]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071fc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007204:	4922      	ldr	r1, [pc, #136]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007210:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007214:	d101      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007216:	2301      	movs	r3, #1
 8007218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007226:	2301      	movs	r3, #1
 8007228:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007236:	4b16      	ldr	r3, [pc, #88]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800723c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007244:	4912      	ldr	r1, [pc, #72]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007246:	4313      	orrs	r3, r2
 8007248:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00b      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007258:	4b0d      	ldr	r3, [pc, #52]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800725a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800725e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007268:	4909      	ldr	r1, [pc, #36]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800726a:	4313      	orrs	r3, r2
 800726c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d006      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 80d9 	beq.w	8007436 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007284:	4b02      	ldr	r3, [pc, #8]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a01      	ldr	r2, [pc, #4]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800728a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800728e:	e001      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007290:	40023800 	.word	0x40023800
 8007294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007296:	f7fd f93b 	bl	8004510 <HAL_GetTick>
 800729a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800729c:	e008      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800729e:	f7fd f937 	bl	8004510 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	2b64      	cmp	r3, #100	@ 0x64
 80072aa:	d901      	bls.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e194      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072b0:	4b6c      	ldr	r3, [pc, #432]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1f0      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d021      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d11d      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072d0:	4b64      	ldr	r3, [pc, #400]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072d6:	0c1b      	lsrs	r3, r3, #16
 80072d8:	f003 0303 	and.w	r3, r3, #3
 80072dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80072de:	4b61      	ldr	r3, [pc, #388]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072e4:	0e1b      	lsrs	r3, r3, #24
 80072e6:	f003 030f 	and.w	r3, r3, #15
 80072ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	019a      	lsls	r2, r3, #6
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	041b      	lsls	r3, r3, #16
 80072f6:	431a      	orrs	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	061b      	lsls	r3, r3, #24
 80072fc:	431a      	orrs	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	071b      	lsls	r3, r3, #28
 8007304:	4957      	ldr	r1, [pc, #348]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007306:	4313      	orrs	r3, r2
 8007308:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d004      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007320:	d00a      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800732a:	2b00      	cmp	r3, #0
 800732c:	d02e      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007336:	d129      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007338:	4b4a      	ldr	r3, [pc, #296]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800733a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800733e:	0c1b      	lsrs	r3, r3, #16
 8007340:	f003 0303 	and.w	r3, r3, #3
 8007344:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007346:	4b47      	ldr	r3, [pc, #284]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800734c:	0f1b      	lsrs	r3, r3, #28
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	019a      	lsls	r2, r3, #6
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	041b      	lsls	r3, r3, #16
 800735e:	431a      	orrs	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	061b      	lsls	r3, r3, #24
 8007366:	431a      	orrs	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	071b      	lsls	r3, r3, #28
 800736c:	493d      	ldr	r1, [pc, #244]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800736e:	4313      	orrs	r3, r2
 8007370:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007374:	4b3b      	ldr	r3, [pc, #236]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800737a:	f023 021f 	bic.w	r2, r3, #31
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007382:	3b01      	subs	r3, #1
 8007384:	4937      	ldr	r1, [pc, #220]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007386:	4313      	orrs	r3, r2
 8007388:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01d      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007398:	4b32      	ldr	r3, [pc, #200]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800739a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800739e:	0e1b      	lsrs	r3, r3, #24
 80073a0:	f003 030f 	and.w	r3, r3, #15
 80073a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073a6:	4b2f      	ldr	r3, [pc, #188]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073ac:	0f1b      	lsrs	r3, r3, #28
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	019a      	lsls	r2, r3, #6
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	041b      	lsls	r3, r3, #16
 80073c0:	431a      	orrs	r2, r3
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	061b      	lsls	r3, r3, #24
 80073c6:	431a      	orrs	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	071b      	lsls	r3, r3, #28
 80073cc:	4925      	ldr	r1, [pc, #148]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d011      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	019a      	lsls	r2, r3, #6
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	041b      	lsls	r3, r3, #16
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	061b      	lsls	r3, r3, #24
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	071b      	lsls	r3, r3, #28
 80073fc:	4919      	ldr	r1, [pc, #100]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007404:	4b17      	ldr	r3, [pc, #92]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a16      	ldr	r2, [pc, #88]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800740a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800740e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007410:	f7fd f87e 	bl	8004510 <HAL_GetTick>
 8007414:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007416:	e008      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007418:	f7fd f87a 	bl	8004510 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b64      	cmp	r3, #100	@ 0x64
 8007424:	d901      	bls.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e0d7      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800742a:	4b0e      	ldr	r3, [pc, #56]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d0f0      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b01      	cmp	r3, #1
 800743a:	f040 80cd 	bne.w	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800743e:	4b09      	ldr	r3, [pc, #36]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a08      	ldr	r2, [pc, #32]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007444:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800744a:	f7fd f861 	bl	8004510 <HAL_GetTick>
 800744e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007450:	e00a      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007452:	f7fd f85d 	bl	8004510 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b64      	cmp	r3, #100	@ 0x64
 800745e:	d903      	bls.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e0ba      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007464:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007468:	4b5e      	ldr	r3, [pc, #376]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007474:	d0ed      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d009      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007492:	2b00      	cmp	r3, #0
 8007494:	d02e      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749a:	2b00      	cmp	r3, #0
 800749c:	d12a      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800749e:	4b51      	ldr	r3, [pc, #324]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a4:	0c1b      	lsrs	r3, r3, #16
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074ac:	4b4d      	ldr	r3, [pc, #308]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074b2:	0f1b      	lsrs	r3, r3, #28
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	019a      	lsls	r2, r3, #6
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	041b      	lsls	r3, r3, #16
 80074c4:	431a      	orrs	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	061b      	lsls	r3, r3, #24
 80074cc:	431a      	orrs	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	071b      	lsls	r3, r3, #28
 80074d2:	4944      	ldr	r1, [pc, #272]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80074da:	4b42      	ldr	r3, [pc, #264]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e8:	3b01      	subs	r3, #1
 80074ea:	021b      	lsls	r3, r3, #8
 80074ec:	493d      	ldr	r1, [pc, #244]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d022      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007504:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007508:	d11d      	bne.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800750a:	4b36      	ldr	r3, [pc, #216]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800750c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007510:	0e1b      	lsrs	r3, r3, #24
 8007512:	f003 030f 	and.w	r3, r3, #15
 8007516:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007518:	4b32      	ldr	r3, [pc, #200]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800751a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800751e:	0f1b      	lsrs	r3, r3, #28
 8007520:	f003 0307 	and.w	r3, r3, #7
 8007524:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	019a      	lsls	r2, r3, #6
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	041b      	lsls	r3, r3, #16
 8007532:	431a      	orrs	r2, r3
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	061b      	lsls	r3, r3, #24
 8007538:	431a      	orrs	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	071b      	lsls	r3, r3, #28
 800753e:	4929      	ldr	r1, [pc, #164]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007540:	4313      	orrs	r3, r2
 8007542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0308 	and.w	r3, r3, #8
 800754e:	2b00      	cmp	r3, #0
 8007550:	d028      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007552:	4b24      	ldr	r3, [pc, #144]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007558:	0e1b      	lsrs	r3, r3, #24
 800755a:	f003 030f 	and.w	r3, r3, #15
 800755e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007560:	4b20      	ldr	r3, [pc, #128]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007566:	0c1b      	lsrs	r3, r3, #16
 8007568:	f003 0303 	and.w	r3, r3, #3
 800756c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	019a      	lsls	r2, r3, #6
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	041b      	lsls	r3, r3, #16
 8007578:	431a      	orrs	r2, r3
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	061b      	lsls	r3, r3, #24
 800757e:	431a      	orrs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	071b      	lsls	r3, r3, #28
 8007586:	4917      	ldr	r1, [pc, #92]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007588:	4313      	orrs	r3, r2
 800758a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800758e:	4b15      	ldr	r3, [pc, #84]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007594:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759c:	4911      	ldr	r1, [pc, #68]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80075a4:	4b0f      	ldr	r3, [pc, #60]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a0e      	ldr	r2, [pc, #56]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075b0:	f7fc ffae 	bl	8004510 <HAL_GetTick>
 80075b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075b6:	e008      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075b8:	f7fc ffaa 	bl	8004510 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	2b64      	cmp	r3, #100	@ 0x64
 80075c4:	d901      	bls.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e007      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075ca:	4b06      	ldr	r3, [pc, #24]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075d6:	d1ef      	bne.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3720      	adds	r7, #32
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	40023800 	.word	0x40023800

080075e8 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a80      	ldr	r2, [pc, #512]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 80075f8:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80075fa:	4b80      	ldr	r3, [pc, #512]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80075fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007600:	099b      	lsrs	r3, r3, #6
 8007602:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800760a:	4b7c      	ldr	r3, [pc, #496]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800760c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007610:	0c1b      	lsrs	r3, r3, #16
 8007612:	f003 0203 	and.w	r2, r3, #3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800761a:	4b78      	ldr	r3, [pc, #480]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800761c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007620:	0e1b      	lsrs	r3, r3, #24
 8007622:	f003 020f 	and.w	r2, r3, #15
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800762a:	4b74      	ldr	r3, [pc, #464]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007630:	0f1b      	lsrs	r3, r3, #28
 8007632:	f003 0207 	and.w	r2, r3, #7
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800763a:	4b70      	ldr	r3, [pc, #448]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800763c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007640:	099b      	lsrs	r3, r3, #6
 8007642:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800764a:	4b6c      	ldr	r3, [pc, #432]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800764c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007650:	0c1b      	lsrs	r3, r3, #16
 8007652:	f003 0203 	and.w	r2, r3, #3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800765a:	4b68      	ldr	r3, [pc, #416]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800765c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007660:	0e1b      	lsrs	r3, r3, #24
 8007662:	f003 020f 	and.w	r2, r3, #15
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800766a:	4b64      	ldr	r3, [pc, #400]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800766c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007670:	0f1b      	lsrs	r3, r3, #28
 8007672:	f003 0207 	and.w	r2, r3, #7
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800767a:	4b60      	ldr	r3, [pc, #384]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800767c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007680:	f003 021f 	and.w	r2, r3, #31
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8007688:	4b5c      	ldr	r3, [pc, #368]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800768a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800768e:	0a1b      	lsrs	r3, r3, #8
 8007690:	f003 021f 	and.w	r2, r3, #31
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8007698:	4b58      	ldr	r3, [pc, #352]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800769a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800769e:	0c1b      	lsrs	r3, r3, #16
 80076a0:	f003 0203 	and.w	r2, r3, #3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80076a8:	4b54      	ldr	r3, [pc, #336]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80076aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076ae:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80076b6:	4b51      	ldr	r3, [pc, #324]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80076b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076bc:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80076c4:	4b4d      	ldr	r3, [pc, #308]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 80076d0:	4b4a      	ldr	r3, [pc, #296]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80076d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 80076de:	4b47      	ldr	r3, [pc, #284]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80076e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076e4:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 80076ec:	4b43      	ldr	r3, [pc, #268]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80076ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076f2:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 80076fa:	4b40      	ldr	r3, [pc, #256]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80076fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007700:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8007708:	4b3c      	ldr	r3, [pc, #240]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800770a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800770e:	f003 0203 	and.w	r2, r3, #3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8007716:	4b39      	ldr	r3, [pc, #228]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800771c:	f003 020c 	and.w	r2, r3, #12
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8007724:	4b35      	ldr	r3, [pc, #212]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800772a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8007732:	4b32      	ldr	r3, [pc, #200]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007738:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8007740:	4b2e      	ldr	r3, [pc, #184]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007746:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800774e:	4b2b      	ldr	r3, [pc, #172]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007754:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800775c:	4b27      	ldr	r3, [pc, #156]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800775e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007762:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800776a:	4b24      	ldr	r3, [pc, #144]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800776c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007770:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007778:	4b20      	ldr	r3, [pc, #128]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800777a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800777e:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8007786:	4b1d      	ldr	r3, [pc, #116]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800778c:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8007794:	4b19      	ldr	r3, [pc, #100]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800779a:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80077a2:	4b16      	ldr	r3, [pc, #88]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077a8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80077b2:	4b12      	ldr	r3, [pc, #72]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80077ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80077bc:	4b0f      	ldr	r3, [pc, #60]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	431a      	orrs	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80077cc:	4b0b      	ldr	r3, [pc, #44]	@ (80077fc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d103      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80077e0:	e003      	b.n	80077ea <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80077e8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80077ea:	bf00      	nop
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	00fffff1 	.word	0x00fffff1
 80077fc:	40023800 	.word	0x40023800

08007800 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007800:	b480      	push	{r7}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007814:	2300      	movs	r3, #0
 8007816:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800781e:	f040 808d 	bne.w	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007822:	4b93      	ldr	r3, [pc, #588]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007828:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007830:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007838:	d07c      	beq.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007840:	d87b      	bhi.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d004      	beq.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800784e:	d039      	beq.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007850:	e073      	b.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007852:	4b87      	ldr	r3, [pc, #540]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d108      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800785e:	4b84      	ldr	r3, [pc, #528]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007866:	4a83      	ldr	r2, [pc, #524]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007868:	fbb2 f3f3 	udiv	r3, r2, r3
 800786c:	613b      	str	r3, [r7, #16]
 800786e:	e007      	b.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007870:	4b7f      	ldr	r3, [pc, #508]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007878:	4a7f      	ldr	r2, [pc, #508]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800787a:	fbb2 f3f3 	udiv	r3, r2, r3
 800787e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007880:	4b7b      	ldr	r3, [pc, #492]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007886:	0e1b      	lsrs	r3, r3, #24
 8007888:	f003 030f 	and.w	r3, r3, #15
 800788c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800788e:	4b78      	ldr	r3, [pc, #480]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007894:	099b      	lsrs	r3, r3, #6
 8007896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	fb03 f202 	mul.w	r2, r3, r2
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80078a8:	4b71      	ldr	r3, [pc, #452]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078ae:	0a1b      	lsrs	r3, r3, #8
 80078b0:	f003 031f 	and.w	r3, r3, #31
 80078b4:	3301      	adds	r3, #1
 80078b6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c0:	617b      	str	r3, [r7, #20]
        break;
 80078c2:	e03b      	b.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80078c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d108      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80078d0:	4b67      	ldr	r3, [pc, #412]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078d8:	4a66      	ldr	r2, [pc, #408]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80078da:	fbb2 f3f3 	udiv	r3, r2, r3
 80078de:	613b      	str	r3, [r7, #16]
 80078e0:	e007      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80078e2:	4b63      	ldr	r3, [pc, #396]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078ea:	4a63      	ldr	r2, [pc, #396]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80078ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80078f2:	4b5f      	ldr	r3, [pc, #380]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078f8:	0e1b      	lsrs	r3, r3, #24
 80078fa:	f003 030f 	and.w	r3, r3, #15
 80078fe:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007900:	4b5b      	ldr	r3, [pc, #364]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007906:	099b      	lsrs	r3, r3, #6
 8007908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	fb03 f202 	mul.w	r2, r3, r2
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	fbb2 f3f3 	udiv	r3, r2, r3
 8007918:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800791a:	4b55      	ldr	r3, [pc, #340]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800791c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007920:	f003 031f 	and.w	r3, r3, #31
 8007924:	3301      	adds	r3, #1
 8007926:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007930:	617b      	str	r3, [r7, #20]
        break;
 8007932:	e003      	b.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007934:	4b51      	ldr	r3, [pc, #324]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007936:	617b      	str	r3, [r7, #20]
        break;
 8007938:	e000      	b.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800793a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007942:	f040 808d 	bne.w	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007946:	4b4a      	ldr	r3, [pc, #296]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800794c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007954:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800795c:	d07c      	beq.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007964:	d87b      	bhi.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d004      	beq.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007972:	d039      	beq.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007974:	e073      	b.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007976:	4b3e      	ldr	r3, [pc, #248]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d108      	bne.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007982:	4b3b      	ldr	r3, [pc, #236]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800798a:	4a3a      	ldr	r2, [pc, #232]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800798c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007990:	613b      	str	r3, [r7, #16]
 8007992:	e007      	b.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007994:	4b36      	ldr	r3, [pc, #216]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800799c:	4a36      	ldr	r2, [pc, #216]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800799e:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80079a4:	4b32      	ldr	r3, [pc, #200]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079aa:	0e1b      	lsrs	r3, r3, #24
 80079ac:	f003 030f 	and.w	r3, r3, #15
 80079b0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80079b2:	4b2f      	ldr	r3, [pc, #188]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b8:	099b      	lsrs	r3, r3, #6
 80079ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	fb03 f202 	mul.w	r2, r3, r2
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ca:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80079cc:	4b28      	ldr	r3, [pc, #160]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079d2:	0a1b      	lsrs	r3, r3, #8
 80079d4:	f003 031f 	and.w	r3, r3, #31
 80079d8:	3301      	adds	r3, #1
 80079da:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e4:	617b      	str	r3, [r7, #20]
        break;
 80079e6:	e03b      	b.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80079e8:	4b21      	ldr	r3, [pc, #132]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d108      	bne.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80079f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80079fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a02:	613b      	str	r3, [r7, #16]
 8007a04:	e007      	b.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007a06:	4b1a      	ldr	r3, [pc, #104]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a14:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007a16:	4b16      	ldr	r3, [pc, #88]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a1c:	0e1b      	lsrs	r3, r3, #24
 8007a1e:	f003 030f 	and.w	r3, r3, #15
 8007a22:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007a24:	4b12      	ldr	r3, [pc, #72]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a2a:	099b      	lsrs	r3, r3, #6
 8007a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	fb03 f202 	mul.w	r2, r3, r2
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a44:	f003 031f 	and.w	r3, r3, #31
 8007a48:	3301      	adds	r3, #1
 8007a4a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a54:	617b      	str	r3, [r7, #20]
        break;
 8007a56:	e003      	b.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a58:	4b08      	ldr	r3, [pc, #32]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007a5a:	617b      	str	r3, [r7, #20]
        break;
 8007a5c:	e000      	b.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8007a5e:	bf00      	nop
      }
    }
  }

  return frequency;
 8007a60:	697b      	ldr	r3, [r7, #20]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	40023800 	.word	0x40023800
 8007a74:	00f42400 	.word	0x00f42400
 8007a78:	017d7840 	.word	0x017d7840
 8007a7c:	00bb8000 	.word	0x00bb8000

08007a80 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b088      	sub	sp, #32
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e156      	b.n	8007d4c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d106      	bne.n	8007ab8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fa f804 	bl	8001ac0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fad5 	bl	8008070 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d00c      	beq.n	8007ae8 <HAL_SAI_Init+0x68>
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d80d      	bhi.n	8007aee <HAL_SAI_Init+0x6e>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <HAL_SAI_Init+0x5c>
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d003      	beq.n	8007ae2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8007ada:	e008      	b.n	8007aee <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8007adc:	2300      	movs	r3, #0
 8007ade:	61fb      	str	r3, [r7, #28]
      break;
 8007ae0:	e006      	b.n	8007af0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007ae2:	2310      	movs	r3, #16
 8007ae4:	61fb      	str	r3, [r7, #28]
      break;
 8007ae6:	e003      	b.n	8007af0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007ae8:	2320      	movs	r3, #32
 8007aea:	61fb      	str	r3, [r7, #28]
      break;
 8007aec:	e000      	b.n	8007af0 <HAL_SAI_Init+0x70>
      break;
 8007aee:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	d81e      	bhi.n	8007b36 <HAL_SAI_Init+0xb6>
 8007af8:	a201      	add	r2, pc, #4	@ (adr r2, 8007b00 <HAL_SAI_Init+0x80>)
 8007afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afe:	bf00      	nop
 8007b00:	08007b11 	.word	0x08007b11
 8007b04:	08007b17 	.word	0x08007b17
 8007b08:	08007b1f 	.word	0x08007b1f
 8007b0c:	08007b27 	.word	0x08007b27
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8007b10:	2300      	movs	r3, #0
 8007b12:	617b      	str	r3, [r7, #20]
    }
    break;
 8007b14:	e010      	b.n	8007b38 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b1a:	617b      	str	r3, [r7, #20]
    }
    break;
 8007b1c:	e00c      	b.n	8007b38 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007b22:	617b      	str	r3, [r7, #20]
    }
    break;
 8007b24:	e008      	b.n	8007b38 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007b2a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	f043 0301 	orr.w	r3, r3, #1
 8007b32:	61fb      	str	r3, [r7, #28]
    }
    break;
 8007b34:	e000      	b.n	8007b38 <HAL_SAI_Init+0xb8>
    default:
      break;
 8007b36:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a85      	ldr	r2, [pc, #532]	@ (8007d54 <HAL_SAI_Init+0x2d4>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d004      	beq.n	8007b4c <HAL_SAI_Init+0xcc>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a84      	ldr	r2, [pc, #528]	@ (8007d58 <HAL_SAI_Init+0x2d8>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d103      	bne.n	8007b54 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8007b4c:	4a83      	ldr	r2, [pc, #524]	@ (8007d5c <HAL_SAI_Init+0x2dc>)
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	e002      	b.n	8007b5a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007b54:	4a82      	ldr	r2, [pc, #520]	@ (8007d60 <HAL_SAI_Init+0x2e0>)
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d04c      	beq.n	8007bfc <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a7a      	ldr	r2, [pc, #488]	@ (8007d54 <HAL_SAI_Init+0x2d4>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d004      	beq.n	8007b7a <HAL_SAI_Init+0xfa>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a78      	ldr	r2, [pc, #480]	@ (8007d58 <HAL_SAI_Init+0x2d8>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d104      	bne.n	8007b84 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007b7a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007b7e:	f7ff fe3f 	bl	8007800 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b82:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a76      	ldr	r2, [pc, #472]	@ (8007d64 <HAL_SAI_Init+0x2e4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d004      	beq.n	8007b98 <HAL_SAI_Init+0x118>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a75      	ldr	r2, [pc, #468]	@ (8007d68 <HAL_SAI_Init+0x2e8>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d104      	bne.n	8007ba2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007b98:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007b9c:	f7ff fe30 	bl	8007800 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ba0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	461a      	mov	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	025b      	lsls	r3, r3, #9
 8007bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	4a6b      	ldr	r2, [pc, #428]	@ (8007d6c <HAL_SAI_Init+0x2ec>)
 8007bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc2:	08da      	lsrs	r2, r3, #3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8007bc8:	68f9      	ldr	r1, [r7, #12]
 8007bca:	4b68      	ldr	r3, [pc, #416]	@ (8007d6c <HAL_SAI_Init+0x2ec>)
 8007bcc:	fba3 2301 	umull	r2, r3, r3, r1
 8007bd0:	08da      	lsrs	r2, r3, #3
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	1aca      	subs	r2, r1, r3
 8007bdc:	2a08      	cmp	r2, #8
 8007bde:	d904      	bls.n	8007bea <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d104      	bne.n	8007bfc <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	085a      	lsrs	r2, r3, #1
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <HAL_SAI_Init+0x18c>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d109      	bne.n	8007c20 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d101      	bne.n	8007c18 <HAL_SAI_Init+0x198>
 8007c14:	2300      	movs	r3, #0
 8007c16:	e001      	b.n	8007c1c <HAL_SAI_Init+0x19c>
 8007c18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c1c:	61bb      	str	r3, [r7, #24]
 8007c1e:	e008      	b.n	8007c32 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d102      	bne.n	8007c2e <HAL_SAI_Init+0x1ae>
 8007c28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c2c:	e000      	b.n	8007c30 <HAL_SAI_Init+0x1b0>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6819      	ldr	r1, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	4b4c      	ldr	r3, [pc, #304]	@ (8007d70 <HAL_SAI_Init+0x2f0>)
 8007c3e:	400b      	ands	r3, r1
 8007c40:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6819      	ldr	r1, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c50:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007c56:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8007c6a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007c76:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	051b      	lsls	r3, r3, #20
 8007c7e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6859      	ldr	r1, [r3, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	4b38      	ldr	r3, [pc, #224]	@ (8007d74 <HAL_SAI_Init+0x2f4>)
 8007c94:	400b      	ands	r3, r1
 8007c96:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6859      	ldr	r1, [r3, #4]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	699a      	ldr	r2, [r3, #24]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cac:	431a      	orrs	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6899      	ldr	r1, [r3, #8]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8007d78 <HAL_SAI_Init+0x2f8>)
 8007cc2:	400b      	ands	r3, r1
 8007cc4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6899      	ldr	r1, [r3, #8]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007cd6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8007cdc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8007ce2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007cec:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68d9      	ldr	r1, [r3, #12]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007d04:	400b      	ands	r3, r1
 8007d06:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68d9      	ldr	r1, [r3, #12]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d16:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d1c:	041b      	lsls	r3, r3, #16
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d24:	3b01      	subs	r3, #1
 8007d26:	021b      	lsls	r3, r3, #8
 8007d28:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3720      	adds	r7, #32
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	40015804 	.word	0x40015804
 8007d58:	40015824 	.word	0x40015824
 8007d5c:	40015800 	.word	0x40015800
 8007d60:	40015c00 	.word	0x40015c00
 8007d64:	40015c04 	.word	0x40015c04
 8007d68:	40015c24 	.word	0x40015c24
 8007d6c:	cccccccd 	.word	0xcccccccd
 8007d70:	ff05c010 	.word	0xff05c010
 8007d74:	ffff1ff0 	.word	0xffff1ff0
 8007d78:	fff88000 	.word	0xfff88000

08007d7c <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e027      	b.n	8007dde <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2202      	movs	r2, #2
 8007d92:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f04f 32ff 	mov.w	r2, #4294967295
 8007da6:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f961 	bl	8008070 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 0208 	orr.w	r2, r2, #8
 8007dbc:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7f9 ff1a 	bl	8001bf8 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b084      	sub	sp, #16
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d101      	bne.n	8007e00 <HAL_SAI_DMAStop+0x1a>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e061      	b.n	8007ec4 <HAL_SAI_DMAStop+0xde>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f931 	bl	8008070 <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007e1c:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d01c      	beq.n	8007e60 <HAL_SAI_DMAStop+0x7a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b12      	cmp	r3, #18
 8007e30:	d116      	bne.n	8007e60 <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fc ff0a 	bl	8004c50 <HAL_DMA_Abort>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00e      	beq.n	8007e60 <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e48:	2b80      	cmp	r3, #128	@ 0x80
 8007e4a:	d009      	beq.n	8007e60 <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01c      	beq.n	8007ea2 <HAL_SAI_DMAStop+0xbc>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b22      	cmp	r3, #34	@ 0x22
 8007e72:	d116      	bne.n	8007ea2 <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fc fee9 	bl	8004c50 <HAL_DMA_Abort>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00e      	beq.n	8007ea2 <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e8a:	2b80      	cmp	r3, #128	@ 0x80
 8007e8c:	d009      	beq.n	8007ea2 <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f042 0208 	orr.w	r2, r2, #8
 8007eb0:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <HAL_SAI_Receive_DMA+0x1a>
 8007ee0:	88fb      	ldrh	r3, [r7, #6]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e074      	b.n	8007fd4 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d16d      	bne.n	8007fd2 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_SAI_Receive_DMA+0x38>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e067      	b.n	8007fd4 <HAL_SAI_Receive_DMA+0x108>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	88fa      	ldrh	r2, [r7, #6]
 8007f16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	88fa      	ldrh	r2, [r7, #6]
 8007f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2222      	movs	r2, #34	@ 0x22
 8007f2e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f36:	4a29      	ldr	r2, [pc, #164]	@ (8007fdc <HAL_SAI_Receive_DMA+0x110>)
 8007f38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f3e:	4a28      	ldr	r2, [pc, #160]	@ (8007fe0 <HAL_SAI_Receive_DMA+0x114>)
 8007f40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f46:	4a27      	ldr	r2, [pc, #156]	@ (8007fe4 <HAL_SAI_Receive_DMA+0x118>)
 8007f48:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f4e:	2200      	movs	r2, #0
 8007f50:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	331c      	adds	r3, #28
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f62:	461a      	mov	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007f6a:	f7fc fe11 	bl	8004b90 <HAL_DMA_Start_IT>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d005      	beq.n	8007f80 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e029      	b.n	8007fd4 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007f80:	2100      	movs	r1, #0
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 f83e 	bl	8008004 <SAI_InterruptFlag>
 8007f88:	4601      	mov	r1, r0
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	691a      	ldr	r2, [r3, #16]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007fa6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d107      	bne.n	8007fc6 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007fc4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	e000      	b.n	8007fd4 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8007fd2:	2302      	movs	r3, #2
  }
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	08008141 	.word	0x08008141
 8007fe0:	080080e1 	.word	0x080080e1
 8007fe4:	0800815d 	.word	0x0800815d

08007fe8 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007ff6:	b2db      	uxtb	r3, r3
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800800e:	2301      	movs	r3, #1
 8008010:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d103      	bne.n	8008020 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f043 0308 	orr.w	r3, r3, #8
 800801e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008024:	2b08      	cmp	r3, #8
 8008026:	d10b      	bne.n	8008040 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800802c:	2b03      	cmp	r3, #3
 800802e:	d003      	beq.n	8008038 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d103      	bne.n	8008040 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f043 0310 	orr.w	r3, r3, #16
 800803e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	2b03      	cmp	r3, #3
 8008046:	d003      	beq.n	8008050 <SAI_InterruptFlag+0x4c>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2b02      	cmp	r3, #2
 800804e:	d104      	bne.n	800805a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	e003      	b.n	8008062 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f043 0304 	orr.w	r3, r3, #4
 8008060:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008062:	68fb      	ldr	r3, [r7, #12]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008078:	4b17      	ldr	r3, [pc, #92]	@ (80080d8 <SAI_Disable+0x68>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a17      	ldr	r2, [pc, #92]	@ (80080dc <SAI_Disable+0x6c>)
 800807e:	fba2 2303 	umull	r2, r3, r2, r3
 8008082:	0b1b      	lsrs	r3, r3, #12
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800809a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	1e5a      	subs	r2, r3, #1
 80080a0:	60fa      	str	r2, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10a      	bne.n	80080bc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	72fb      	strb	r3, [r7, #11]
      break;
 80080ba:	e006      	b.n	80080ca <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e8      	bne.n	800809c <SAI_Disable+0x2c>

  return status;
 80080ca:	7afb      	ldrb	r3, [r7, #11]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	20000000 	.word	0x20000000
 80080dc:	95cbec1b 	.word	0x95cbec1b

080080e0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ec:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080f6:	d01c      	beq.n	8008132 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008106:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008110:	2100      	movs	r1, #0
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f7ff ff76 	bl	8008004 <SAI_InterruptFlag>
 8008118:	4603      	mov	r3, r0
 800811a:	43d9      	mvns	r1, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	691a      	ldr	r2, [r3, #16]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	400a      	ands	r2, r1
 8008128:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7fc f800 	bl	8004138 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008138:	bf00      	nop
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800814c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7fb fffc 	bl	800414c <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008168:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008170:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800817e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008180:	2b01      	cmp	r3, #1
 8008182:	d004      	beq.n	800818e <SAI_DMAError+0x32>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800818a:	2b01      	cmp	r3, #1
 800818c:	d112      	bne.n	80081b4 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800819c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f7ff ff66 	bl	8008070 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f7fb fdbf 	bl	8003d38 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80081ba:	bf00      	nop
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b082      	sub	sp, #8
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e022      	b.n	800821a <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d105      	bne.n	80081ec <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7f9 fd58 	bl	8001c9c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2203      	movs	r2, #3
 80081f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f815 	bl	8008224 <HAL_SD_InitCard>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e00a      	b.n	800821a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008224:	b5b0      	push	{r4, r5, r7, lr}
 8008226:	b08e      	sub	sp, #56	@ 0x38
 8008228:	af04      	add	r7, sp, #16
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800822c:	2300      	movs	r3, #0
 800822e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008230:	2300      	movs	r3, #0
 8008232:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008234:	2300      	movs	r3, #0
 8008236:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008238:	2300      	movs	r3, #0
 800823a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800823c:	2300      	movs	r3, #0
 800823e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008240:	2376      	movs	r3, #118	@ 0x76
 8008242:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681d      	ldr	r5, [r3, #0]
 8008248:	466c      	mov	r4, sp
 800824a:	f107 0314 	add.w	r3, r7, #20
 800824e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008252:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008256:	f107 0308 	add.w	r3, r7, #8
 800825a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800825c:	4628      	mov	r0, r5
 800825e:	f001 fddf 	bl	8009e20 <SDMMC_Init>
 8008262:	4603      	mov	r3, r0
 8008264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8008268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e059      	b.n	8008328 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685a      	ldr	r2, [r3, #4]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008282:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4618      	mov	r0, r3
 800828a:	f001 fe13 	bl	8009eb4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800829c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800829e:	2002      	movs	r0, #2
 80082a0:	f7fc f942 	bl	8004528 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 ff59 	bl	800915c <SD_PowerON>
 80082aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00b      	beq.n	80082ca <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	431a      	orrs	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e02e      	b.n	8008328 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fe78 	bl	8008fc0 <SD_InitCard>
 80082d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00b      	beq.n	80082f0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	431a      	orrs	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e01b      	b.n	8008328 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80082f8:	4618      	mov	r0, r3
 80082fa:	f001 fe6d 	bl	8009fd8 <SDMMC_CmdBlockLength>
 80082fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00f      	beq.n	8008326 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a09      	ldr	r2, [pc, #36]	@ (8008330 <HAL_SD_InitCard+0x10c>)
 800830c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	431a      	orrs	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e000      	b.n	8008328 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3728      	adds	r7, #40	@ 0x28
 800832c:	46bd      	mov	sp, r7
 800832e:	bdb0      	pop	{r4, r5, r7, pc}
 8008330:	004005ff 	.word	0x004005ff

08008334 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b08c      	sub	sp, #48	@ 0x30
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d107      	bne.n	800835c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008350:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e0c3      	b.n	80084e4 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b01      	cmp	r3, #1
 8008366:	f040 80bc 	bne.w	80084e2 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	441a      	add	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800837a:	429a      	cmp	r2, r3
 800837c:	d907      	bls.n	800838e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008382:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e0aa      	b.n	80084e4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2203      	movs	r2, #3
 8008392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2200      	movs	r2, #0
 800839c:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80083ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b2:	4a4e      	ldr	r2, [pc, #312]	@ (80084ec <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80083b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ba:	4a4d      	ldr	r2, [pc, #308]	@ (80084f0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80083bc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c2:	2200      	movs	r2, #0
 80083c4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ca:	2200      	movs	r2, #0
 80083cc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	430a      	orrs	r2, r1
 80083e8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3380      	adds	r3, #128	@ 0x80
 80083f4:	4619      	mov	r1, r3
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	025b      	lsls	r3, r3, #9
 80083fc:	089b      	lsrs	r3, r3, #2
 80083fe:	f7fc fbc7 	bl	8004b90 <HAL_DMA_Start_IT>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d017      	beq.n	8008438 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8008416:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a35      	ldr	r2, [pc, #212]	@ (80084f4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800841e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008424:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e055      	b.n	80084e4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0208 	orr.w	r2, r2, #8
 8008446:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800844c:	2b01      	cmp	r3, #1
 800844e:	d002      	beq.n	8008456 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008452:	025b      	lsls	r3, r3, #9
 8008454:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008456:	f04f 33ff 	mov.w	r3, #4294967295
 800845a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	025b      	lsls	r3, r3, #9
 8008460:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008462:	2390      	movs	r3, #144	@ 0x90
 8008464:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008466:	2302      	movs	r3, #2
 8008468:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800846a:	2300      	movs	r3, #0
 800846c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800846e:	2301      	movs	r3, #1
 8008470:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f107 0210 	add.w	r2, r7, #16
 800847a:	4611      	mov	r1, r2
 800847c:	4618      	mov	r0, r3
 800847e:	f001 fd7f 	bl	8009f80 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d90a      	bls.n	800849e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2282      	movs	r2, #130	@ 0x82
 800848c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008494:	4618      	mov	r0, r3
 8008496:	f001 fde3 	bl	800a060 <SDMMC_CmdReadMultiBlock>
 800849a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800849c:	e009      	b.n	80084b2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2281      	movs	r2, #129	@ 0x81
 80084a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084aa:	4618      	mov	r0, r3
 80084ac:	f001 fdb6 	bl	800a01c <SDMMC_CmdReadSingleBlock>
 80084b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80084b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d012      	beq.n	80084de <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a0d      	ldr	r2, [pc, #52]	@ (80084f4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80084be:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c6:	431a      	orrs	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e002      	b.n	80084e4 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	e000      	b.n	80084e4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80084e2:	2302      	movs	r3, #2
  }
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3730      	adds	r7, #48	@ 0x30
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	08008dcf 	.word	0x08008dcf
 80084f0:	08008e41 	.word	0x08008e41
 80084f4:	004005ff 	.word	0x004005ff

080084f8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b08c      	sub	sp, #48	@ 0x30
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d107      	bne.n	8008520 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008514:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e0c6      	b.n	80086ae <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b01      	cmp	r3, #1
 800852a:	f040 80bf 	bne.w	80086ac <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	441a      	add	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800853e:	429a      	cmp	r2, r3
 8008540:	d907      	bls.n	8008552 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008546:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e0ad      	b.n	80086ae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2203      	movs	r2, #3
 8008556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2200      	movs	r2, #0
 8008560:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f042 021a 	orr.w	r2, r2, #26
 8008570:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008576:	4a50      	ldr	r2, [pc, #320]	@ (80086b8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008578:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800857e:	4a4f      	ldr	r2, [pc, #316]	@ (80086bc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008580:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008586:	2200      	movs	r2, #0
 8008588:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800858e:	2b01      	cmp	r3, #1
 8008590:	d002      	beq.n	8008598 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008594:	025b      	lsls	r3, r3, #9
 8008596:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d90a      	bls.n	80085b4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	22a0      	movs	r2, #160	@ 0xa0
 80085a2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085aa:	4618      	mov	r0, r3
 80085ac:	f001 fd9c 	bl	800a0e8 <SDMMC_CmdWriteMultiBlock>
 80085b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80085b2:	e009      	b.n	80085c8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2290      	movs	r2, #144	@ 0x90
 80085b8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085c0:	4618      	mov	r0, r3
 80085c2:	f001 fd6f 	bl	800a0a4 <SDMMC_CmdWriteSingleBlock>
 80085c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80085c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d012      	beq.n	80085f4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a3b      	ldr	r2, [pc, #236]	@ (80086c0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80085d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085dc:	431a      	orrs	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e05c      	b.n	80086ae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0208 	orr.w	r2, r2, #8
 8008602:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008608:	2240      	movs	r2, #64	@ 0x40
 800860a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800862c:	68b9      	ldr	r1, [r7, #8]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3380      	adds	r3, #128	@ 0x80
 8008634:	461a      	mov	r2, r3
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	025b      	lsls	r3, r3, #9
 800863a:	089b      	lsrs	r3, r3, #2
 800863c:	f7fc faa8 	bl	8004b90 <HAL_DMA_Start_IT>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d01a      	beq.n	800867c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f022 021a 	bic.w	r2, r2, #26
 8008654:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a19      	ldr	r2, [pc, #100]	@ (80086c0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800865c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008662:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e018      	b.n	80086ae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800867c:	f04f 33ff 	mov.w	r3, #4294967295
 8008680:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	025b      	lsls	r3, r3, #9
 8008686:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008688:	2390      	movs	r3, #144	@ 0x90
 800868a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800868c:	2300      	movs	r3, #0
 800868e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008690:	2300      	movs	r3, #0
 8008692:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008694:	2301      	movs	r3, #1
 8008696:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f107 0210 	add.w	r2, r7, #16
 80086a0:	4611      	mov	r1, r2
 80086a2:	4618      	mov	r0, r3
 80086a4:	f001 fc6c 	bl	8009f80 <SDMMC_ConfigData>

      return HAL_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	e000      	b.n	80086ae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80086ac:	2302      	movs	r3, #2
  }
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3730      	adds	r7, #48	@ 0x30
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	08008da5 	.word	0x08008da5
 80086bc:	08008e41 	.word	0x08008e41
 80086c0:	004005ff 	.word	0x004005ff

080086c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d008      	beq.n	80086f2 <HAL_SD_IRQHandler+0x2e>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f003 0308 	and.w	r3, r3, #8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fdec 	bl	80092c8 <SD_Read_IT>
 80086f0:	e15a      	b.n	80089a8 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 808d 	beq.w	800881c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800870a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	4b9a      	ldr	r3, [pc, #616]	@ (8008980 <HAL_SD_IRQHandler+0x2bc>)
 8008718:	400b      	ands	r3, r1
 800871a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0201 	bic.w	r2, r2, #1
 800872a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f003 0308 	and.w	r3, r3, #8
 8008732:	2b00      	cmp	r3, #0
 8008734:	d039      	beq.n	80087aa <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f003 0302 	and.w	r3, r3, #2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d104      	bne.n	800874a <HAL_SD_IRQHandler+0x86>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f003 0320 	and.w	r3, r3, #32
 8008746:	2b00      	cmp	r3, #0
 8008748:	d011      	beq.n	800876e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4618      	mov	r0, r3
 8008750:	f001 fcec 	bl	800a12c <SDMMC_CmdStopTransfer>
 8008754:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d008      	beq.n	800876e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	431a      	orrs	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f921 	bl	80089b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008776:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	2b00      	cmp	r3, #0
 800878e:	d104      	bne.n	800879a <HAL_SD_IRQHandler+0xd6>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f002 fc76 	bl	800b08c <HAL_SD_RxCpltCallback>
 80087a0:	e102      	b.n	80089a8 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f002 fc68 	bl	800b078 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80087a8:	e0fe      	b.n	80089a8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 80f9 	beq.w	80089a8 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f003 0320 	and.w	r3, r3, #32
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d011      	beq.n	80087e4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f001 fcb1 	bl	800a12c <SDMMC_CmdStopTransfer>
 80087ca:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d008      	beq.n	80087e4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	431a      	orrs	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f8e6 	bl	80089b0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f040 80dc 	bne.w	80089a8 <HAL_SD_IRQHandler+0x2e4>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f040 80d6 	bne.w	80089a8 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 0208 	bic.w	r2, r2, #8
 800880a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f002 fc2f 	bl	800b078 <HAL_SD_TxCpltCallback>
}
 800881a:	e0c5      	b.n	80089a8 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d008      	beq.n	800883c <HAL_SD_IRQHandler+0x178>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f003 0308 	and.w	r3, r3, #8
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fd98 	bl	800936a <SD_Write_IT>
 800883a:	e0b5      	b.n	80089a8 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008842:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 80ae 	beq.w	80089a8 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b00      	cmp	r3, #0
 8008858:	d005      	beq.n	8008866 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800885e:	f043 0202 	orr.w	r2, r3, #2
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800886c:	f003 0308 	and.w	r3, r3, #8
 8008870:	2b00      	cmp	r3, #0
 8008872:	d005      	beq.n	8008880 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008878:	f043 0208 	orr.w	r2, r3, #8
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008886:	f003 0320 	and.w	r3, r3, #32
 800888a:	2b00      	cmp	r3, #0
 800888c:	d005      	beq.n	800889a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008892:	f043 0220 	orr.w	r2, r3, #32
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a0:	f003 0310 	and.w	r3, r3, #16
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ac:	f043 0210 	orr.w	r2, r3, #16
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80088bc:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80088cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f001 fc2a 	bl	800a12c <SDMMC_CmdStopTransfer>
 80088d8:	4602      	mov	r2, r0
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088de:	431a      	orrs	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f003 0308 	and.w	r3, r3, #8
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00a      	beq.n	8008904 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f857 	bl	80089b0 <HAL_SD_ErrorCallback>
}
 8008902:	e051      	b.n	80089a8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800890a:	2b00      	cmp	r3, #0
 800890c:	d04c      	beq.n	80089a8 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f003 0310 	and.w	r3, r3, #16
 8008914:	2b00      	cmp	r3, #0
 8008916:	d104      	bne.n	8008922 <HAL_SD_IRQHandler+0x25e>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f003 0320 	and.w	r3, r3, #32
 800891e:	2b00      	cmp	r3, #0
 8008920:	d011      	beq.n	8008946 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008926:	4a17      	ldr	r2, [pc, #92]	@ (8008984 <HAL_SD_IRQHandler+0x2c0>)
 8008928:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892e:	4618      	mov	r0, r3
 8008930:	f7fc f9fe 	bl	8004d30 <HAL_DMA_Abort_IT>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d036      	beq.n	80089a8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800893e:	4618      	mov	r0, r3
 8008940:	f000 fad0 	bl	8008ee4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008944:	e030      	b.n	80089a8 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b00      	cmp	r3, #0
 800894e:	d104      	bne.n	800895a <HAL_SD_IRQHandler+0x296>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d018      	beq.n	800898c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895e:	4a0a      	ldr	r2, [pc, #40]	@ (8008988 <HAL_SD_IRQHandler+0x2c4>)
 8008960:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008966:	4618      	mov	r0, r3
 8008968:	f7fc f9e2 	bl	8004d30 <HAL_DMA_Abort_IT>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d01a      	beq.n	80089a8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008976:	4618      	mov	r0, r3
 8008978:	f000 faeb 	bl	8008f52 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800897c:	e014      	b.n	80089a8 <HAL_SD_IRQHandler+0x2e4>
 800897e:	bf00      	nop
 8008980:	ffff3ec5 	.word	0xffff3ec5
 8008984:	08008ee5 	.word	0x08008ee5
 8008988:	08008f53 	.word	0x08008f53
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f002 fb5f 	bl	800b064 <HAL_SD_AbortCallback>
}
 80089a6:	e7ff      	b.n	80089a8 <HAL_SD_IRQHandler+0x2e4>
 80089a8:	bf00      	nop
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089d2:	0f9b      	lsrs	r3, r3, #30
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089de:	0e9b      	lsrs	r3, r3, #26
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	f003 030f 	and.w	r3, r3, #15
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089f0:	0e1b      	lsrs	r3, r3, #24
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	f003 0303 	and.w	r3, r3, #3
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a02:	0c1b      	lsrs	r3, r3, #16
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a0e:	0a1b      	lsrs	r3, r3, #8
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a24:	0d1b      	lsrs	r3, r3, #20
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a30:	0c1b      	lsrs	r3, r3, #16
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f003 030f 	and.w	r3, r3, #15
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a42:	0bdb      	lsrs	r3, r3, #15
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	f003 0301 	and.w	r3, r3, #1
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a54:	0b9b      	lsrs	r3, r3, #14
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a66:	0b5b      	lsrs	r3, r3, #13
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a78:	0b1b      	lsrs	r3, r3, #12
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d163      	bne.n	8008b5c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a98:	009a      	lsls	r2, r3, #2
 8008a9a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008aa4:	0f92      	lsrs	r2, r2, #30
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ab0:	0edb      	lsrs	r3, r3, #27
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f003 0307 	and.w	r3, r3, #7
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ac2:	0e1b      	lsrs	r3, r3, #24
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	f003 0307 	and.w	r3, r3, #7
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ad4:	0d5b      	lsrs	r3, r3, #21
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	f003 0307 	and.w	r3, r3, #7
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ae6:	0c9b      	lsrs	r3, r3, #18
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008af8:	0bdb      	lsrs	r3, r3, #15
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	f003 0307 	and.w	r3, r3, #7
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	1c5a      	adds	r2, r3, #1
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	7e1b      	ldrb	r3, [r3, #24]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	3302      	adds	r3, #2
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008b26:	fb03 f202 	mul.w	r2, r3, r2
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	7a1b      	ldrb	r3, [r3, #8]
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	f003 030f 	and.w	r3, r3, #15
 8008b38:	2201      	movs	r2, #1
 8008b3a:	409a      	lsls	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008b48:	0a52      	lsrs	r2, r2, #9
 8008b4a:	fb03 f202 	mul.w	r2, r3, r2
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b58:	661a      	str	r2, [r3, #96]	@ 0x60
 8008b5a:	e031      	b.n	8008bc0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d11d      	bne.n	8008ba0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b68:	041b      	lsls	r3, r3, #16
 8008b6a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b72:	0c1b      	lsrs	r3, r3, #16
 8008b74:	431a      	orrs	r2, r3
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	029a      	lsls	r2, r3, #10
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b94:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	661a      	str	r2, [r3, #96]	@ 0x60
 8008b9e:	e00f      	b.n	8008bc0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a58      	ldr	r2, [pc, #352]	@ (8008d08 <HAL_SD_GetCardCSD+0x344>)
 8008ba6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e09d      	b.n	8008cfc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bc4:	0b9b      	lsrs	r3, r3, #14
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bd6:	09db      	lsrs	r3, r3, #7
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bf8:	0fdb      	lsrs	r3, r3, #31
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c04:	0f5b      	lsrs	r3, r3, #29
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	f003 0303 	and.w	r3, r3, #3
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c16:	0e9b      	lsrs	r3, r3, #26
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c28:	0d9b      	lsrs	r3, r3, #22
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	f003 030f 	and.w	r3, r3, #15
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c3a:	0d5b      	lsrs	r3, r3, #21
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c56:	0c1b      	lsrs	r3, r3, #16
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c6a:	0bdb      	lsrs	r3, r3, #15
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c7e:	0b9b      	lsrs	r3, r3, #14
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c92:	0b5b      	lsrs	r3, r3, #13
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ca6:	0b1b      	lsrs	r3, r3, #12
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cba:	0a9b      	lsrs	r3, r3, #10
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	f003 0303 	and.w	r3, r3, #3
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cce:	0a1b      	lsrs	r3, r3, #8
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	f003 0303 	and.w	r3, r3, #3
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ce2:	085b      	lsrs	r3, r3, #1
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	004005ff 	.word	0x004005ff

08008d0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008d70:	f107 030c 	add.w	r3, r7, #12
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fa7e 	bl	8009278 <SD_SendStatus>
 8008d7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d005      	beq.n	8008d90 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	0a5b      	lsrs	r3, r3, #9
 8008d94:	f003 030f 	and.w	r3, r3, #15
 8008d98:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008d9a:	693b      	ldr	r3, [r7, #16]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3718      	adds	r7, #24
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008dc0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8008dc2:	bf00      	nop
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dda:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008de0:	2b82      	cmp	r3, #130	@ 0x82
 8008de2:	d111      	bne.n	8008e08 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f001 f99f 	bl	800a12c <SDMMC_CmdStopTransfer>
 8008dee:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d008      	beq.n	8008e08 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f7ff fdd4 	bl	80089b0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f022 0208 	bic.w	r2, r2, #8
 8008e16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008e20:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f002 f92b 	bl	800b08c <HAL_SD_RxCpltCallback>
#endif
}
 8008e36:	bf00      	nop
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7fc f91a 	bl	8005088 <HAL_DMA_GetError>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d03e      	beq.n	8008ed8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e60:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e68:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d002      	beq.n	8008e76 <SD_DMAError+0x36>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d12d      	bne.n	8008ed2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a19      	ldr	r2, [pc, #100]	@ (8008ee0 <SD_DMAError+0xa0>)
 8008e7c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008e8c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e92:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008e9a:	6978      	ldr	r0, [r7, #20]
 8008e9c:	f7ff ff62 	bl	8008d64 <HAL_SD_GetCardState>
 8008ea0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2b06      	cmp	r3, #6
 8008ea6:	d002      	beq.n	8008eae <SD_DMAError+0x6e>
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b05      	cmp	r3, #5
 8008eac:	d10a      	bne.n	8008ec4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f001 f93a 	bl	800a12c <SDMMC_CmdStopTransfer>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008ed2:	6978      	ldr	r0, [r7, #20]
 8008ed4:	f7ff fd6c 	bl	80089b0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008ed8:	bf00      	nop
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	004005ff 	.word	0x004005ff

08008ee4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008efa:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f7ff ff31 	bl	8008d64 <HAL_SD_GetCardState>
 8008f02:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2b06      	cmp	r3, #6
 8008f16:	d002      	beq.n	8008f1e <SD_DMATxAbort+0x3a>
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2b05      	cmp	r3, #5
 8008f1c:	d10a      	bne.n	8008f34 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f001 f902 	bl	800a12c <SDMMC_CmdStopTransfer>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d103      	bne.n	8008f44 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f002 f891 	bl	800b064 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008f42:	e002      	b.n	8008f4a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f7ff fd33 	bl	80089b0 <HAL_SD_ErrorCallback>
}
 8008f4a:	bf00      	nop
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f5e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008f68:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7ff fefa 	bl	8008d64 <HAL_SD_GetCardState>
 8008f70:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b06      	cmp	r3, #6
 8008f84:	d002      	beq.n	8008f8c <SD_DMARxAbort+0x3a>
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b05      	cmp	r3, #5
 8008f8a:	d10a      	bne.n	8008fa2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f001 f8cb 	bl	800a12c <SDMMC_CmdStopTransfer>
 8008f96:	4602      	mov	r2, r0
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f9c:	431a      	orrs	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d103      	bne.n	8008fb2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f002 f85a 	bl	800b064 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008fb0:	e002      	b.n	8008fb8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f7ff fcfc 	bl	80089b0 <HAL_SD_ErrorCallback>
}
 8008fb8:	bf00      	nop
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008fc0:	b5b0      	push	{r4, r5, r7, lr}
 8008fc2:	b094      	sub	sp, #80	@ 0x50
 8008fc4:	af04      	add	r7, sp, #16
 8008fc6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 ff7d 	bl	8009ed0 <SDMMC_GetPowerState>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d102      	bne.n	8008fe2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008fdc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008fe0:	e0b8      	b.n	8009154 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fe6:	2b03      	cmp	r3, #3
 8008fe8:	d02f      	beq.n	800904a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f001 f964 	bl	800a2bc <SDMMC_CmdSendCID>
 8008ff4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <SD_InitCard+0x40>
    {
      return errorstate;
 8008ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ffe:	e0a9      	b.n	8009154 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2100      	movs	r1, #0
 8009006:	4618      	mov	r0, r3
 8009008:	f000 ffa7 	bl	8009f5a <SDMMC_GetResponse>
 800900c:	4602      	mov	r2, r0
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2104      	movs	r1, #4
 8009018:	4618      	mov	r0, r3
 800901a:	f000 ff9e 	bl	8009f5a <SDMMC_GetResponse>
 800901e:	4602      	mov	r2, r0
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2108      	movs	r1, #8
 800902a:	4618      	mov	r0, r3
 800902c:	f000 ff95 	bl	8009f5a <SDMMC_GetResponse>
 8009030:	4602      	mov	r2, r0
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	210c      	movs	r1, #12
 800903c:	4618      	mov	r0, r3
 800903e:	f000 ff8c 	bl	8009f5a <SDMMC_GetResponse>
 8009042:	4602      	mov	r2, r0
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800904e:	2b03      	cmp	r3, #3
 8009050:	d00d      	beq.n	800906e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f107 020e 	add.w	r2, r7, #14
 800905a:	4611      	mov	r1, r2
 800905c:	4618      	mov	r0, r3
 800905e:	f001 f96a 	bl	800a336 <SDMMC_CmdSetRelAdd>
 8009062:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <SD_InitCard+0xae>
    {
      return errorstate;
 800906a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800906c:	e072      	b.n	8009154 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009072:	2b03      	cmp	r3, #3
 8009074:	d036      	beq.n	80090e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009076:	89fb      	ldrh	r3, [r7, #14]
 8009078:	461a      	mov	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009086:	041b      	lsls	r3, r3, #16
 8009088:	4619      	mov	r1, r3
 800908a:	4610      	mov	r0, r2
 800908c:	f001 f934 	bl	800a2f8 <SDMMC_CmdSendCSD>
 8009090:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800909a:	e05b      	b.n	8009154 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2100      	movs	r1, #0
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 ff59 	bl	8009f5a <SDMMC_GetResponse>
 80090a8:	4602      	mov	r2, r0
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2104      	movs	r1, #4
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 ff50 	bl	8009f5a <SDMMC_GetResponse>
 80090ba:	4602      	mov	r2, r0
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2108      	movs	r1, #8
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 ff47 	bl	8009f5a <SDMMC_GetResponse>
 80090cc:	4602      	mov	r2, r0
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	210c      	movs	r1, #12
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 ff3e 	bl	8009f5a <SDMMC_GetResponse>
 80090de:	4602      	mov	r2, r0
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2104      	movs	r1, #4
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 ff35 	bl	8009f5a <SDMMC_GetResponse>
 80090f0:	4603      	mov	r3, r0
 80090f2:	0d1a      	lsrs	r2, r3, #20
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80090f8:	f107 0310 	add.w	r3, r7, #16
 80090fc:	4619      	mov	r1, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7ff fc60 	bl	80089c4 <HAL_SD_GetCardCSD>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d002      	beq.n	8009110 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800910a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800910e:	e021      	b.n	8009154 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6819      	ldr	r1, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009118:	041b      	lsls	r3, r3, #16
 800911a:	2200      	movs	r2, #0
 800911c:	461c      	mov	r4, r3
 800911e:	4615      	mov	r5, r2
 8009120:	4622      	mov	r2, r4
 8009122:	462b      	mov	r3, r5
 8009124:	4608      	mov	r0, r1
 8009126:	f001 f823 	bl	800a170 <SDMMC_CmdSelDesel>
 800912a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800912c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <SD_InitCard+0x176>
  {
    return errorstate;
 8009132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009134:	e00e      	b.n	8009154 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681d      	ldr	r5, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	466c      	mov	r4, sp
 800913e:	f103 0210 	add.w	r2, r3, #16
 8009142:	ca07      	ldmia	r2, {r0, r1, r2}
 8009144:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009148:	3304      	adds	r3, #4
 800914a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800914c:	4628      	mov	r0, r5
 800914e:	f000 fe67 	bl	8009e20 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3740      	adds	r7, #64	@ 0x40
 8009158:	46bd      	mov	sp, r7
 800915a:	bdb0      	pop	{r4, r5, r7, pc}

0800915c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009164:	2300      	movs	r3, #0
 8009166:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009168:	2300      	movs	r3, #0
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	2300      	movs	r3, #0
 800916e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4618      	mov	r0, r3
 8009176:	f001 f81e 	bl	800a1b6 <SDMMC_CmdGoIdleState>
 800917a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d001      	beq.n	8009186 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	e072      	b.n	800926c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4618      	mov	r0, r3
 800918c:	f001 f831 	bl	800a1f2 <SDMMC_CmdOperCond>
 8009190:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00d      	beq.n	80091b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f001 f807 	bl	800a1b6 <SDMMC_CmdGoIdleState>
 80091a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d004      	beq.n	80091ba <SD_PowerON+0x5e>
    {
      return errorstate;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	e05b      	b.n	800926c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d137      	bne.n	8009232 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2100      	movs	r1, #0
 80091c8:	4618      	mov	r0, r3
 80091ca:	f001 f831 	bl	800a230 <SDMMC_CmdAppCommand>
 80091ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d02d      	beq.n	8009232 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091d6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80091da:	e047      	b.n	800926c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2100      	movs	r1, #0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f001 f824 	bl	800a230 <SDMMC_CmdAppCommand>
 80091e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <SD_PowerON+0x98>
    {
      return errorstate;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	e03b      	b.n	800926c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	491e      	ldr	r1, [pc, #120]	@ (8009274 <SD_PowerON+0x118>)
 80091fa:	4618      	mov	r0, r3
 80091fc:	f001 f83a 	bl	800a274 <SDMMC_CmdAppOperCommand>
 8009200:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009208:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800920c:	e02e      	b.n	800926c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2100      	movs	r1, #0
 8009214:	4618      	mov	r0, r3
 8009216:	f000 fea0 	bl	8009f5a <SDMMC_GetResponse>
 800921a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	0fdb      	lsrs	r3, r3, #31
 8009220:	2b01      	cmp	r3, #1
 8009222:	d101      	bne.n	8009228 <SD_PowerON+0xcc>
 8009224:	2301      	movs	r3, #1
 8009226:	e000      	b.n	800922a <SD_PowerON+0xce>
 8009228:	2300      	movs	r3, #0
 800922a:	613b      	str	r3, [r7, #16]

    count++;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	3301      	adds	r3, #1
 8009230:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009238:	4293      	cmp	r3, r2
 800923a:	d802      	bhi.n	8009242 <SD_PowerON+0xe6>
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0cc      	beq.n	80091dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009248:	4293      	cmp	r3, r2
 800924a:	d902      	bls.n	8009252 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800924c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009250:	e00c      	b.n	800926c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	645a      	str	r2, [r3, #68]	@ 0x44
 8009262:	e002      	b.n	800926a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	c1100000 	.word	0xc1100000

08009278 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d102      	bne.n	800928e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009288:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800928c:	e018      	b.n	80092c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009296:	041b      	lsls	r3, r3, #16
 8009298:	4619      	mov	r1, r3
 800929a:	4610      	mov	r0, r2
 800929c:	f001 f86c 	bl	800a378 <SDMMC_CmdSendStatus>
 80092a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <SD_SendStatus+0x34>
  {
    return errorstate;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	e009      	b.n	80092c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2100      	movs	r1, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 fe51 	bl	8009f5a <SDMMC_GetResponse>
 80092b8:	4602      	mov	r2, r0
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092da:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d03f      	beq.n	8009362 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80092e2:	2300      	movs	r3, #0
 80092e4:	617b      	str	r3, [r7, #20]
 80092e6:	e033      	b.n	8009350 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 fdc3 	bl	8009e78 <SDMMC_ReadFIFO>
 80092f2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3301      	adds	r3, #1
 8009300:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	3b01      	subs	r3, #1
 8009306:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	0a1b      	lsrs	r3, r3, #8
 800930c:	b2da      	uxtb	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3301      	adds	r3, #1
 8009316:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	3b01      	subs	r3, #1
 800931c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	0c1b      	lsrs	r3, r3, #16
 8009322:	b2da      	uxtb	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3301      	adds	r3, #1
 800932c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	3b01      	subs	r3, #1
 8009332:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	0e1b      	lsrs	r3, r3, #24
 8009338:	b2da      	uxtb	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	3301      	adds	r3, #1
 8009342:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	3b01      	subs	r3, #1
 8009348:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	3301      	adds	r3, #1
 800934e:	617b      	str	r3, [r7, #20]
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	2b07      	cmp	r3, #7
 8009354:	d9c8      	bls.n	80092e8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8009362:	bf00      	nop
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b086      	sub	sp, #24
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800937c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d043      	beq.n	800940c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009384:	2300      	movs	r3, #0
 8009386:	617b      	str	r3, [r7, #20]
 8009388:	e037      	b.n	80093fa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	3301      	adds	r3, #1
 8009394:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	3b01      	subs	r3, #1
 800939a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	021a      	lsls	r2, r3, #8
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	3301      	adds	r3, #1
 80093ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	3b01      	subs	r3, #1
 80093b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	041a      	lsls	r2, r3, #16
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	4313      	orrs	r3, r2
 80093be:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	3301      	adds	r3, #1
 80093c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	3b01      	subs	r3, #1
 80093ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	061a      	lsls	r2, r3, #24
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3301      	adds	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f107 0208 	add.w	r2, r7, #8
 80093ec:	4611      	mov	r1, r2
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 fd4f 	bl	8009e92 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	3301      	adds	r3, #1
 80093f8:	617b      	str	r3, [r7, #20]
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2b07      	cmp	r3, #7
 80093fe:	d9c4      	bls.n	800938a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800940c:	bf00      	nop
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e040      	b.n	80094a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800942a:	2b00      	cmp	r3, #0
 800942c:	d106      	bne.n	800943c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7f8 fed6 	bl	80021e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2224      	movs	r2, #36	@ 0x24
 8009440:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f022 0201 	bic.w	r2, r2, #1
 8009450:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009456:	2b00      	cmp	r3, #0
 8009458:	d002      	beq.n	8009460 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fb16 	bl	8009a8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f8af 	bl	80095c4 <UART_SetConfig>
 8009466:	4603      	mov	r3, r0
 8009468:	2b01      	cmp	r3, #1
 800946a:	d101      	bne.n	8009470 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e01b      	b.n	80094a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685a      	ldr	r2, [r3, #4]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800947e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689a      	ldr	r2, [r3, #8]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800948e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f042 0201 	orr.w	r2, r2, #1
 800949e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fb95 	bl	8009bd0 <UART_CheckIdleState>
 80094a6:	4603      	mov	r3, r0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b08a      	sub	sp, #40	@ 0x28
 80094b4:	af02      	add	r7, sp, #8
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	603b      	str	r3, [r7, #0]
 80094bc:	4613      	mov	r3, r2
 80094be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094c4:	2b20      	cmp	r3, #32
 80094c6:	d177      	bne.n	80095b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <HAL_UART_Transmit+0x24>
 80094ce:	88fb      	ldrh	r3, [r7, #6]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e070      	b.n	80095ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2221      	movs	r2, #33	@ 0x21
 80094e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094e6:	f7fb f813 	bl	8004510 <HAL_GetTick>
 80094ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	88fa      	ldrh	r2, [r7, #6]
 80094f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	88fa      	ldrh	r2, [r7, #6]
 80094f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009504:	d108      	bne.n	8009518 <HAL_UART_Transmit+0x68>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d104      	bne.n	8009518 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800950e:	2300      	movs	r3, #0
 8009510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	61bb      	str	r3, [r7, #24]
 8009516:	e003      	b.n	8009520 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800951c:	2300      	movs	r3, #0
 800951e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009520:	e02f      	b.n	8009582 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	2200      	movs	r2, #0
 800952a:	2180      	movs	r1, #128	@ 0x80
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 fba6 	bl	8009c7e <UART_WaitOnFlagUntilTimeout>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d004      	beq.n	8009542 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2220      	movs	r2, #32
 800953c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e03b      	b.n	80095ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10b      	bne.n	8009560 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	881b      	ldrh	r3, [r3, #0]
 800954c:	461a      	mov	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009556:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	3302      	adds	r3, #2
 800955c:	61bb      	str	r3, [r7, #24]
 800955e:	e007      	b.n	8009570 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	781a      	ldrb	r2, [r3, #0]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	3301      	adds	r3, #1
 800956e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009576:	b29b      	uxth	r3, r3
 8009578:	3b01      	subs	r3, #1
 800957a:	b29a      	uxth	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009588:	b29b      	uxth	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1c9      	bne.n	8009522 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2200      	movs	r2, #0
 8009596:	2140      	movs	r1, #64	@ 0x40
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f000 fb70 	bl	8009c7e <UART_WaitOnFlagUntilTimeout>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2220      	movs	r2, #32
 80095a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e005      	b.n	80095ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2220      	movs	r2, #32
 80095b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	e000      	b.n	80095ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80095b8:	2302      	movs	r3, #2
  }
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3720      	adds	r7, #32
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
	...

080095c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b088      	sub	sp, #32
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	689a      	ldr	r2, [r3, #8]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	431a      	orrs	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	431a      	orrs	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	4ba6      	ldr	r3, [pc, #664]	@ (8009888 <UART_SetConfig+0x2c4>)
 80095f0:	4013      	ands	r3, r2
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	6812      	ldr	r2, [r2, #0]
 80095f6:	6979      	ldr	r1, [r7, #20]
 80095f8:	430b      	orrs	r3, r1
 80095fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68da      	ldr	r2, [r3, #12]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a1b      	ldr	r3, [r3, #32]
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	4313      	orrs	r3, r2
 8009620:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	430a      	orrs	r2, r1
 8009634:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a94      	ldr	r2, [pc, #592]	@ (800988c <UART_SetConfig+0x2c8>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d120      	bne.n	8009682 <UART_SetConfig+0xbe>
 8009640:	4b93      	ldr	r3, [pc, #588]	@ (8009890 <UART_SetConfig+0x2cc>)
 8009642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009646:	f003 0303 	and.w	r3, r3, #3
 800964a:	2b03      	cmp	r3, #3
 800964c:	d816      	bhi.n	800967c <UART_SetConfig+0xb8>
 800964e:	a201      	add	r2, pc, #4	@ (adr r2, 8009654 <UART_SetConfig+0x90>)
 8009650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009654:	08009665 	.word	0x08009665
 8009658:	08009671 	.word	0x08009671
 800965c:	0800966b 	.word	0x0800966b
 8009660:	08009677 	.word	0x08009677
 8009664:	2301      	movs	r3, #1
 8009666:	77fb      	strb	r3, [r7, #31]
 8009668:	e150      	b.n	800990c <UART_SetConfig+0x348>
 800966a:	2302      	movs	r3, #2
 800966c:	77fb      	strb	r3, [r7, #31]
 800966e:	e14d      	b.n	800990c <UART_SetConfig+0x348>
 8009670:	2304      	movs	r3, #4
 8009672:	77fb      	strb	r3, [r7, #31]
 8009674:	e14a      	b.n	800990c <UART_SetConfig+0x348>
 8009676:	2308      	movs	r3, #8
 8009678:	77fb      	strb	r3, [r7, #31]
 800967a:	e147      	b.n	800990c <UART_SetConfig+0x348>
 800967c:	2310      	movs	r3, #16
 800967e:	77fb      	strb	r3, [r7, #31]
 8009680:	e144      	b.n	800990c <UART_SetConfig+0x348>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a83      	ldr	r2, [pc, #524]	@ (8009894 <UART_SetConfig+0x2d0>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d132      	bne.n	80096f2 <UART_SetConfig+0x12e>
 800968c:	4b80      	ldr	r3, [pc, #512]	@ (8009890 <UART_SetConfig+0x2cc>)
 800968e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009692:	f003 030c 	and.w	r3, r3, #12
 8009696:	2b0c      	cmp	r3, #12
 8009698:	d828      	bhi.n	80096ec <UART_SetConfig+0x128>
 800969a:	a201      	add	r2, pc, #4	@ (adr r2, 80096a0 <UART_SetConfig+0xdc>)
 800969c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a0:	080096d5 	.word	0x080096d5
 80096a4:	080096ed 	.word	0x080096ed
 80096a8:	080096ed 	.word	0x080096ed
 80096ac:	080096ed 	.word	0x080096ed
 80096b0:	080096e1 	.word	0x080096e1
 80096b4:	080096ed 	.word	0x080096ed
 80096b8:	080096ed 	.word	0x080096ed
 80096bc:	080096ed 	.word	0x080096ed
 80096c0:	080096db 	.word	0x080096db
 80096c4:	080096ed 	.word	0x080096ed
 80096c8:	080096ed 	.word	0x080096ed
 80096cc:	080096ed 	.word	0x080096ed
 80096d0:	080096e7 	.word	0x080096e7
 80096d4:	2300      	movs	r3, #0
 80096d6:	77fb      	strb	r3, [r7, #31]
 80096d8:	e118      	b.n	800990c <UART_SetConfig+0x348>
 80096da:	2302      	movs	r3, #2
 80096dc:	77fb      	strb	r3, [r7, #31]
 80096de:	e115      	b.n	800990c <UART_SetConfig+0x348>
 80096e0:	2304      	movs	r3, #4
 80096e2:	77fb      	strb	r3, [r7, #31]
 80096e4:	e112      	b.n	800990c <UART_SetConfig+0x348>
 80096e6:	2308      	movs	r3, #8
 80096e8:	77fb      	strb	r3, [r7, #31]
 80096ea:	e10f      	b.n	800990c <UART_SetConfig+0x348>
 80096ec:	2310      	movs	r3, #16
 80096ee:	77fb      	strb	r3, [r7, #31]
 80096f0:	e10c      	b.n	800990c <UART_SetConfig+0x348>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a68      	ldr	r2, [pc, #416]	@ (8009898 <UART_SetConfig+0x2d4>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d120      	bne.n	800973e <UART_SetConfig+0x17a>
 80096fc:	4b64      	ldr	r3, [pc, #400]	@ (8009890 <UART_SetConfig+0x2cc>)
 80096fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009702:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009706:	2b30      	cmp	r3, #48	@ 0x30
 8009708:	d013      	beq.n	8009732 <UART_SetConfig+0x16e>
 800970a:	2b30      	cmp	r3, #48	@ 0x30
 800970c:	d814      	bhi.n	8009738 <UART_SetConfig+0x174>
 800970e:	2b20      	cmp	r3, #32
 8009710:	d009      	beq.n	8009726 <UART_SetConfig+0x162>
 8009712:	2b20      	cmp	r3, #32
 8009714:	d810      	bhi.n	8009738 <UART_SetConfig+0x174>
 8009716:	2b00      	cmp	r3, #0
 8009718:	d002      	beq.n	8009720 <UART_SetConfig+0x15c>
 800971a:	2b10      	cmp	r3, #16
 800971c:	d006      	beq.n	800972c <UART_SetConfig+0x168>
 800971e:	e00b      	b.n	8009738 <UART_SetConfig+0x174>
 8009720:	2300      	movs	r3, #0
 8009722:	77fb      	strb	r3, [r7, #31]
 8009724:	e0f2      	b.n	800990c <UART_SetConfig+0x348>
 8009726:	2302      	movs	r3, #2
 8009728:	77fb      	strb	r3, [r7, #31]
 800972a:	e0ef      	b.n	800990c <UART_SetConfig+0x348>
 800972c:	2304      	movs	r3, #4
 800972e:	77fb      	strb	r3, [r7, #31]
 8009730:	e0ec      	b.n	800990c <UART_SetConfig+0x348>
 8009732:	2308      	movs	r3, #8
 8009734:	77fb      	strb	r3, [r7, #31]
 8009736:	e0e9      	b.n	800990c <UART_SetConfig+0x348>
 8009738:	2310      	movs	r3, #16
 800973a:	77fb      	strb	r3, [r7, #31]
 800973c:	e0e6      	b.n	800990c <UART_SetConfig+0x348>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a56      	ldr	r2, [pc, #344]	@ (800989c <UART_SetConfig+0x2d8>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d120      	bne.n	800978a <UART_SetConfig+0x1c6>
 8009748:	4b51      	ldr	r3, [pc, #324]	@ (8009890 <UART_SetConfig+0x2cc>)
 800974a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800974e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009752:	2bc0      	cmp	r3, #192	@ 0xc0
 8009754:	d013      	beq.n	800977e <UART_SetConfig+0x1ba>
 8009756:	2bc0      	cmp	r3, #192	@ 0xc0
 8009758:	d814      	bhi.n	8009784 <UART_SetConfig+0x1c0>
 800975a:	2b80      	cmp	r3, #128	@ 0x80
 800975c:	d009      	beq.n	8009772 <UART_SetConfig+0x1ae>
 800975e:	2b80      	cmp	r3, #128	@ 0x80
 8009760:	d810      	bhi.n	8009784 <UART_SetConfig+0x1c0>
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <UART_SetConfig+0x1a8>
 8009766:	2b40      	cmp	r3, #64	@ 0x40
 8009768:	d006      	beq.n	8009778 <UART_SetConfig+0x1b4>
 800976a:	e00b      	b.n	8009784 <UART_SetConfig+0x1c0>
 800976c:	2300      	movs	r3, #0
 800976e:	77fb      	strb	r3, [r7, #31]
 8009770:	e0cc      	b.n	800990c <UART_SetConfig+0x348>
 8009772:	2302      	movs	r3, #2
 8009774:	77fb      	strb	r3, [r7, #31]
 8009776:	e0c9      	b.n	800990c <UART_SetConfig+0x348>
 8009778:	2304      	movs	r3, #4
 800977a:	77fb      	strb	r3, [r7, #31]
 800977c:	e0c6      	b.n	800990c <UART_SetConfig+0x348>
 800977e:	2308      	movs	r3, #8
 8009780:	77fb      	strb	r3, [r7, #31]
 8009782:	e0c3      	b.n	800990c <UART_SetConfig+0x348>
 8009784:	2310      	movs	r3, #16
 8009786:	77fb      	strb	r3, [r7, #31]
 8009788:	e0c0      	b.n	800990c <UART_SetConfig+0x348>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a44      	ldr	r2, [pc, #272]	@ (80098a0 <UART_SetConfig+0x2dc>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d125      	bne.n	80097e0 <UART_SetConfig+0x21c>
 8009794:	4b3e      	ldr	r3, [pc, #248]	@ (8009890 <UART_SetConfig+0x2cc>)
 8009796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800979a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800979e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097a2:	d017      	beq.n	80097d4 <UART_SetConfig+0x210>
 80097a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097a8:	d817      	bhi.n	80097da <UART_SetConfig+0x216>
 80097aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ae:	d00b      	beq.n	80097c8 <UART_SetConfig+0x204>
 80097b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097b4:	d811      	bhi.n	80097da <UART_SetConfig+0x216>
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <UART_SetConfig+0x1fe>
 80097ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097be:	d006      	beq.n	80097ce <UART_SetConfig+0x20a>
 80097c0:	e00b      	b.n	80097da <UART_SetConfig+0x216>
 80097c2:	2300      	movs	r3, #0
 80097c4:	77fb      	strb	r3, [r7, #31]
 80097c6:	e0a1      	b.n	800990c <UART_SetConfig+0x348>
 80097c8:	2302      	movs	r3, #2
 80097ca:	77fb      	strb	r3, [r7, #31]
 80097cc:	e09e      	b.n	800990c <UART_SetConfig+0x348>
 80097ce:	2304      	movs	r3, #4
 80097d0:	77fb      	strb	r3, [r7, #31]
 80097d2:	e09b      	b.n	800990c <UART_SetConfig+0x348>
 80097d4:	2308      	movs	r3, #8
 80097d6:	77fb      	strb	r3, [r7, #31]
 80097d8:	e098      	b.n	800990c <UART_SetConfig+0x348>
 80097da:	2310      	movs	r3, #16
 80097dc:	77fb      	strb	r3, [r7, #31]
 80097de:	e095      	b.n	800990c <UART_SetConfig+0x348>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a2f      	ldr	r2, [pc, #188]	@ (80098a4 <UART_SetConfig+0x2e0>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d125      	bne.n	8009836 <UART_SetConfig+0x272>
 80097ea:	4b29      	ldr	r3, [pc, #164]	@ (8009890 <UART_SetConfig+0x2cc>)
 80097ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80097f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097f8:	d017      	beq.n	800982a <UART_SetConfig+0x266>
 80097fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097fe:	d817      	bhi.n	8009830 <UART_SetConfig+0x26c>
 8009800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009804:	d00b      	beq.n	800981e <UART_SetConfig+0x25a>
 8009806:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800980a:	d811      	bhi.n	8009830 <UART_SetConfig+0x26c>
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <UART_SetConfig+0x254>
 8009810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009814:	d006      	beq.n	8009824 <UART_SetConfig+0x260>
 8009816:	e00b      	b.n	8009830 <UART_SetConfig+0x26c>
 8009818:	2301      	movs	r3, #1
 800981a:	77fb      	strb	r3, [r7, #31]
 800981c:	e076      	b.n	800990c <UART_SetConfig+0x348>
 800981e:	2302      	movs	r3, #2
 8009820:	77fb      	strb	r3, [r7, #31]
 8009822:	e073      	b.n	800990c <UART_SetConfig+0x348>
 8009824:	2304      	movs	r3, #4
 8009826:	77fb      	strb	r3, [r7, #31]
 8009828:	e070      	b.n	800990c <UART_SetConfig+0x348>
 800982a:	2308      	movs	r3, #8
 800982c:	77fb      	strb	r3, [r7, #31]
 800982e:	e06d      	b.n	800990c <UART_SetConfig+0x348>
 8009830:	2310      	movs	r3, #16
 8009832:	77fb      	strb	r3, [r7, #31]
 8009834:	e06a      	b.n	800990c <UART_SetConfig+0x348>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a1b      	ldr	r2, [pc, #108]	@ (80098a8 <UART_SetConfig+0x2e4>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d138      	bne.n	80098b2 <UART_SetConfig+0x2ee>
 8009840:	4b13      	ldr	r3, [pc, #76]	@ (8009890 <UART_SetConfig+0x2cc>)
 8009842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009846:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800984a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800984e:	d017      	beq.n	8009880 <UART_SetConfig+0x2bc>
 8009850:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009854:	d82a      	bhi.n	80098ac <UART_SetConfig+0x2e8>
 8009856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800985a:	d00b      	beq.n	8009874 <UART_SetConfig+0x2b0>
 800985c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009860:	d824      	bhi.n	80098ac <UART_SetConfig+0x2e8>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d003      	beq.n	800986e <UART_SetConfig+0x2aa>
 8009866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800986a:	d006      	beq.n	800987a <UART_SetConfig+0x2b6>
 800986c:	e01e      	b.n	80098ac <UART_SetConfig+0x2e8>
 800986e:	2300      	movs	r3, #0
 8009870:	77fb      	strb	r3, [r7, #31]
 8009872:	e04b      	b.n	800990c <UART_SetConfig+0x348>
 8009874:	2302      	movs	r3, #2
 8009876:	77fb      	strb	r3, [r7, #31]
 8009878:	e048      	b.n	800990c <UART_SetConfig+0x348>
 800987a:	2304      	movs	r3, #4
 800987c:	77fb      	strb	r3, [r7, #31]
 800987e:	e045      	b.n	800990c <UART_SetConfig+0x348>
 8009880:	2308      	movs	r3, #8
 8009882:	77fb      	strb	r3, [r7, #31]
 8009884:	e042      	b.n	800990c <UART_SetConfig+0x348>
 8009886:	bf00      	nop
 8009888:	efff69f3 	.word	0xefff69f3
 800988c:	40011000 	.word	0x40011000
 8009890:	40023800 	.word	0x40023800
 8009894:	40004400 	.word	0x40004400
 8009898:	40004800 	.word	0x40004800
 800989c:	40004c00 	.word	0x40004c00
 80098a0:	40005000 	.word	0x40005000
 80098a4:	40011400 	.word	0x40011400
 80098a8:	40007800 	.word	0x40007800
 80098ac:	2310      	movs	r3, #16
 80098ae:	77fb      	strb	r3, [r7, #31]
 80098b0:	e02c      	b.n	800990c <UART_SetConfig+0x348>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a72      	ldr	r2, [pc, #456]	@ (8009a80 <UART_SetConfig+0x4bc>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d125      	bne.n	8009908 <UART_SetConfig+0x344>
 80098bc:	4b71      	ldr	r3, [pc, #452]	@ (8009a84 <UART_SetConfig+0x4c0>)
 80098be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80098c6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80098ca:	d017      	beq.n	80098fc <UART_SetConfig+0x338>
 80098cc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80098d0:	d817      	bhi.n	8009902 <UART_SetConfig+0x33e>
 80098d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098d6:	d00b      	beq.n	80098f0 <UART_SetConfig+0x32c>
 80098d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098dc:	d811      	bhi.n	8009902 <UART_SetConfig+0x33e>
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d003      	beq.n	80098ea <UART_SetConfig+0x326>
 80098e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098e6:	d006      	beq.n	80098f6 <UART_SetConfig+0x332>
 80098e8:	e00b      	b.n	8009902 <UART_SetConfig+0x33e>
 80098ea:	2300      	movs	r3, #0
 80098ec:	77fb      	strb	r3, [r7, #31]
 80098ee:	e00d      	b.n	800990c <UART_SetConfig+0x348>
 80098f0:	2302      	movs	r3, #2
 80098f2:	77fb      	strb	r3, [r7, #31]
 80098f4:	e00a      	b.n	800990c <UART_SetConfig+0x348>
 80098f6:	2304      	movs	r3, #4
 80098f8:	77fb      	strb	r3, [r7, #31]
 80098fa:	e007      	b.n	800990c <UART_SetConfig+0x348>
 80098fc:	2308      	movs	r3, #8
 80098fe:	77fb      	strb	r3, [r7, #31]
 8009900:	e004      	b.n	800990c <UART_SetConfig+0x348>
 8009902:	2310      	movs	r3, #16
 8009904:	77fb      	strb	r3, [r7, #31]
 8009906:	e001      	b.n	800990c <UART_SetConfig+0x348>
 8009908:	2310      	movs	r3, #16
 800990a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009914:	d15b      	bne.n	80099ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009916:	7ffb      	ldrb	r3, [r7, #31]
 8009918:	2b08      	cmp	r3, #8
 800991a:	d828      	bhi.n	800996e <UART_SetConfig+0x3aa>
 800991c:	a201      	add	r2, pc, #4	@ (adr r2, 8009924 <UART_SetConfig+0x360>)
 800991e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009922:	bf00      	nop
 8009924:	08009949 	.word	0x08009949
 8009928:	08009951 	.word	0x08009951
 800992c:	08009959 	.word	0x08009959
 8009930:	0800996f 	.word	0x0800996f
 8009934:	0800995f 	.word	0x0800995f
 8009938:	0800996f 	.word	0x0800996f
 800993c:	0800996f 	.word	0x0800996f
 8009940:	0800996f 	.word	0x0800996f
 8009944:	08009967 	.word	0x08009967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009948:	f7fd fa36 	bl	8006db8 <HAL_RCC_GetPCLK1Freq>
 800994c:	61b8      	str	r0, [r7, #24]
        break;
 800994e:	e013      	b.n	8009978 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009950:	f7fd fa46 	bl	8006de0 <HAL_RCC_GetPCLK2Freq>
 8009954:	61b8      	str	r0, [r7, #24]
        break;
 8009956:	e00f      	b.n	8009978 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009958:	4b4b      	ldr	r3, [pc, #300]	@ (8009a88 <UART_SetConfig+0x4c4>)
 800995a:	61bb      	str	r3, [r7, #24]
        break;
 800995c:	e00c      	b.n	8009978 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800995e:	f7fd f959 	bl	8006c14 <HAL_RCC_GetSysClockFreq>
 8009962:	61b8      	str	r0, [r7, #24]
        break;
 8009964:	e008      	b.n	8009978 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800996a:	61bb      	str	r3, [r7, #24]
        break;
 800996c:	e004      	b.n	8009978 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800996e:	2300      	movs	r3, #0
 8009970:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	77bb      	strb	r3, [r7, #30]
        break;
 8009976:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d074      	beq.n	8009a68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	005a      	lsls	r2, r3, #1
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	085b      	lsrs	r3, r3, #1
 8009988:	441a      	add	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009992:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	2b0f      	cmp	r3, #15
 8009998:	d916      	bls.n	80099c8 <UART_SetConfig+0x404>
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099a0:	d212      	bcs.n	80099c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	f023 030f 	bic.w	r3, r3, #15
 80099aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	085b      	lsrs	r3, r3, #1
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	f003 0307 	and.w	r3, r3, #7
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	89fb      	ldrh	r3, [r7, #14]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	89fa      	ldrh	r2, [r7, #14]
 80099c4:	60da      	str	r2, [r3, #12]
 80099c6:	e04f      	b.n	8009a68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	77bb      	strb	r3, [r7, #30]
 80099cc:	e04c      	b.n	8009a68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099ce:	7ffb      	ldrb	r3, [r7, #31]
 80099d0:	2b08      	cmp	r3, #8
 80099d2:	d828      	bhi.n	8009a26 <UART_SetConfig+0x462>
 80099d4:	a201      	add	r2, pc, #4	@ (adr r2, 80099dc <UART_SetConfig+0x418>)
 80099d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099da:	bf00      	nop
 80099dc:	08009a01 	.word	0x08009a01
 80099e0:	08009a09 	.word	0x08009a09
 80099e4:	08009a11 	.word	0x08009a11
 80099e8:	08009a27 	.word	0x08009a27
 80099ec:	08009a17 	.word	0x08009a17
 80099f0:	08009a27 	.word	0x08009a27
 80099f4:	08009a27 	.word	0x08009a27
 80099f8:	08009a27 	.word	0x08009a27
 80099fc:	08009a1f 	.word	0x08009a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a00:	f7fd f9da 	bl	8006db8 <HAL_RCC_GetPCLK1Freq>
 8009a04:	61b8      	str	r0, [r7, #24]
        break;
 8009a06:	e013      	b.n	8009a30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a08:	f7fd f9ea 	bl	8006de0 <HAL_RCC_GetPCLK2Freq>
 8009a0c:	61b8      	str	r0, [r7, #24]
        break;
 8009a0e:	e00f      	b.n	8009a30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a10:	4b1d      	ldr	r3, [pc, #116]	@ (8009a88 <UART_SetConfig+0x4c4>)
 8009a12:	61bb      	str	r3, [r7, #24]
        break;
 8009a14:	e00c      	b.n	8009a30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a16:	f7fd f8fd 	bl	8006c14 <HAL_RCC_GetSysClockFreq>
 8009a1a:	61b8      	str	r0, [r7, #24]
        break;
 8009a1c:	e008      	b.n	8009a30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a22:	61bb      	str	r3, [r7, #24]
        break;
 8009a24:	e004      	b.n	8009a30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009a26:	2300      	movs	r3, #0
 8009a28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	77bb      	strb	r3, [r7, #30]
        break;
 8009a2e:	bf00      	nop
    }

    if (pclk != 0U)
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d018      	beq.n	8009a68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	085a      	lsrs	r2, r3, #1
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	441a      	add	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	2b0f      	cmp	r3, #15
 8009a4e:	d909      	bls.n	8009a64 <UART_SetConfig+0x4a0>
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a56:	d205      	bcs.n	8009a64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	60da      	str	r2, [r3, #12]
 8009a62:	e001      	b.n	8009a68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009a74:	7fbb      	ldrb	r3, [r7, #30]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3720      	adds	r7, #32
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	40007c00 	.word	0x40007c00
 8009a84:	40023800 	.word	0x40023800
 8009a88:	00f42400 	.word	0x00f42400

08009a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a98:	f003 0308 	and.w	r3, r3, #8
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d00a      	beq.n	8009ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00a      	beq.n	8009ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	430a      	orrs	r2, r1
 8009ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009adc:	f003 0302 	and.w	r3, r3, #2
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00a      	beq.n	8009afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	430a      	orrs	r2, r1
 8009af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009afe:	f003 0304 	and.w	r3, r3, #4
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00a      	beq.n	8009b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	430a      	orrs	r2, r1
 8009b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b20:	f003 0310 	and.w	r3, r3, #16
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00a      	beq.n	8009b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b42:	f003 0320 	and.w	r3, r3, #32
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00a      	beq.n	8009b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	430a      	orrs	r2, r1
 8009b5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d01a      	beq.n	8009ba2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	430a      	orrs	r2, r1
 8009b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b8a:	d10a      	bne.n	8009ba2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00a      	beq.n	8009bc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	430a      	orrs	r2, r1
 8009bc2:	605a      	str	r2, [r3, #4]
  }
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b08c      	sub	sp, #48	@ 0x30
 8009bd4:	af02      	add	r7, sp, #8
 8009bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009be0:	f7fa fc96 	bl	8004510 <HAL_GetTick>
 8009be4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 0308 	and.w	r3, r3, #8
 8009bf0:	2b08      	cmp	r3, #8
 8009bf2:	d12e      	bne.n	8009c52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f83b 	bl	8009c7e <UART_WaitOnFlagUntilTimeout>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d021      	beq.n	8009c52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	e853 3f00 	ldrex	r3, [r3]
 8009c1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c22:	623b      	str	r3, [r7, #32]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	461a      	mov	r2, r3
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	61fb      	str	r3, [r7, #28]
 8009c2e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c30:	69b9      	ldr	r1, [r7, #24]
 8009c32:	69fa      	ldr	r2, [r7, #28]
 8009c34:	e841 2300 	strex	r3, r2, [r1]
 8009c38:	617b      	str	r3, [r7, #20]
   return(result);
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1e6      	bne.n	8009c0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2220      	movs	r2, #32
 8009c44:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e011      	b.n	8009c76 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2220      	movs	r2, #32
 8009c56:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2220      	movs	r2, #32
 8009c5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3728      	adds	r7, #40	@ 0x28
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b084      	sub	sp, #16
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	60f8      	str	r0, [r7, #12]
 8009c86:	60b9      	str	r1, [r7, #8]
 8009c88:	603b      	str	r3, [r7, #0]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c8e:	e04f      	b.n	8009d30 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c96:	d04b      	beq.n	8009d30 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c98:	f7fa fc3a 	bl	8004510 <HAL_GetTick>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	69ba      	ldr	r2, [r7, #24]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d302      	bcc.n	8009cae <UART_WaitOnFlagUntilTimeout+0x30>
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d101      	bne.n	8009cb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e04e      	b.n	8009d50 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d037      	beq.n	8009d30 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2b80      	cmp	r3, #128	@ 0x80
 8009cc4:	d034      	beq.n	8009d30 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	2b40      	cmp	r3, #64	@ 0x40
 8009cca:	d031      	beq.n	8009d30 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	f003 0308 	and.w	r3, r3, #8
 8009cd6:	2b08      	cmp	r3, #8
 8009cd8:	d110      	bne.n	8009cfc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2208      	movs	r2, #8
 8009ce0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f000 f838 	bl	8009d58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2208      	movs	r2, #8
 8009cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e029      	b.n	8009d50 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	69db      	ldr	r3, [r3, #28]
 8009d02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d0a:	d111      	bne.n	8009d30 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d14:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 f81e 	bl	8009d58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2220      	movs	r2, #32
 8009d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e00f      	b.n	8009d50 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	69da      	ldr	r2, [r3, #28]
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	4013      	ands	r3, r2
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	bf0c      	ite	eq
 8009d40:	2301      	moveq	r3, #1
 8009d42:	2300      	movne	r3, #0
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	461a      	mov	r2, r3
 8009d48:	79fb      	ldrb	r3, [r7, #7]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d0a0      	beq.n	8009c90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b095      	sub	sp, #84	@ 0x54
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d68:	e853 3f00 	ldrex	r3, [r3]
 8009d6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d86:	e841 2300 	strex	r3, r2, [r1]
 8009d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1e6      	bne.n	8009d60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3308      	adds	r3, #8
 8009d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	e853 3f00 	ldrex	r3, [r3]
 8009da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	f023 0301 	bic.w	r3, r3, #1
 8009da8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3308      	adds	r3, #8
 8009db0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009db2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009db4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009db8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009dba:	e841 2300 	strex	r3, r2, [r1]
 8009dbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1e5      	bne.n	8009d92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d118      	bne.n	8009e00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	e853 3f00 	ldrex	r3, [r3]
 8009dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	f023 0310 	bic.w	r3, r3, #16
 8009de2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	461a      	mov	r2, r3
 8009dea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dec:	61bb      	str	r3, [r7, #24]
 8009dee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df0:	6979      	ldr	r1, [r7, #20]
 8009df2:	69ba      	ldr	r2, [r7, #24]
 8009df4:	e841 2300 	strex	r3, r2, [r1]
 8009df8:	613b      	str	r3, [r7, #16]
   return(result);
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1e6      	bne.n	8009dce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2220      	movs	r2, #32
 8009e04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009e14:	bf00      	nop
 8009e16:	3754      	adds	r7, #84	@ 0x54
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009e20:	b084      	sub	sp, #16
 8009e22:	b480      	push	{r7}
 8009e24:	b085      	sub	sp, #20
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	f107 001c 	add.w	r0, r7, #28
 8009e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009e36:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009e38:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009e3a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009e3e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009e42:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009e46:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009e4a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	4b07      	ldr	r3, [pc, #28]	@ (8009e74 <SDMMC_Init+0x54>)
 8009e58:	4013      	ands	r3, r2
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	431a      	orrs	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	b004      	add	sp, #16
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	ffff8100 	.word	0xffff8100

08009e78 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009e92:	b480      	push	{r7}
 8009e94:	b083      	sub	sp, #12
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2203      	movs	r2, #3
 8009ec0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 0303 	and.w	r3, r3, #3
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f0a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009f10:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009f16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68da      	ldr	r2, [r3, #12]
 8009f22:	4b06      	ldr	r3, [pc, #24]	@ (8009f3c <SDMMC_SendCommand+0x50>)
 8009f24:	4013      	ands	r3, r2
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	431a      	orrs	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	fffff000 	.word	0xfffff000

08009f40 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	b2db      	uxtb	r3, r3
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	370c      	adds	r7, #12
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b085      	sub	sp, #20
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
 8009f62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3314      	adds	r3, #20
 8009f68:	461a      	mov	r2, r3
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
}  
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	685a      	ldr	r2, [r3, #4]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009fa6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009fac:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009fb2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fbe:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	431a      	orrs	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0

}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b088      	sub	sp, #32
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009fe6:	2310      	movs	r3, #16
 8009fe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fea:	2340      	movs	r3, #64	@ 0x40
 8009fec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ff6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ff8:	f107 0308 	add.w	r3, r7, #8
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7ff ff74 	bl	8009eec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a004:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a008:	2110      	movs	r1, #16
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f9d6 	bl	800a3bc <SDMMC_GetCmdResp1>
 800a010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a012:	69fb      	ldr	r3, [r7, #28]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3720      	adds	r7, #32
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b088      	sub	sp, #32
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a02a:	2311      	movs	r3, #17
 800a02c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a02e:	2340      	movs	r3, #64	@ 0x40
 800a030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a032:	2300      	movs	r3, #0
 800a034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a03a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a03c:	f107 0308 	add.w	r3, r7, #8
 800a040:	4619      	mov	r1, r3
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7ff ff52 	bl	8009eec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a04c:	2111      	movs	r1, #17
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f9b4 	bl	800a3bc <SDMMC_GetCmdResp1>
 800a054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a056:	69fb      	ldr	r3, [r7, #28]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3720      	adds	r7, #32
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b088      	sub	sp, #32
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a06e:	2312      	movs	r3, #18
 800a070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a072:	2340      	movs	r3, #64	@ 0x40
 800a074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a076:	2300      	movs	r3, #0
 800a078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a07a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a07e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a080:	f107 0308 	add.w	r3, r7, #8
 800a084:	4619      	mov	r1, r3
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7ff ff30 	bl	8009eec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a08c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a090:	2112      	movs	r1, #18
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f992 	bl	800a3bc <SDMMC_GetCmdResp1>
 800a098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a09a:	69fb      	ldr	r3, [r7, #28]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3720      	adds	r7, #32
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b088      	sub	sp, #32
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a0b2:	2318      	movs	r3, #24
 800a0b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0b6:	2340      	movs	r3, #64	@ 0x40
 800a0b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0c4:	f107 0308 	add.w	r3, r7, #8
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff ff0e 	bl	8009eec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a0d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0d4:	2118      	movs	r1, #24
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f970 	bl	800a3bc <SDMMC_GetCmdResp1>
 800a0dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0de:	69fb      	ldr	r3, [r7, #28]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3720      	adds	r7, #32
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a0f6:	2319      	movs	r3, #25
 800a0f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0fa:	2340      	movs	r3, #64	@ 0x40
 800a0fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0fe:	2300      	movs	r3, #0
 800a100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a102:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a106:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a108:	f107 0308 	add.w	r3, r7, #8
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7ff feec 	bl	8009eec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a114:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a118:	2119      	movs	r1, #25
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f94e 	bl	800a3bc <SDMMC_GetCmdResp1>
 800a120:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a122:	69fb      	ldr	r3, [r7, #28]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3720      	adds	r7, #32
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b088      	sub	sp, #32
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a134:	2300      	movs	r3, #0
 800a136:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a138:	230c      	movs	r3, #12
 800a13a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a13c:	2340      	movs	r3, #64	@ 0x40
 800a13e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a140:	2300      	movs	r3, #0
 800a142:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a144:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a148:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a14a:	f107 0308 	add.w	r3, r7, #8
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff fecb 	bl	8009eec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a156:	4a05      	ldr	r2, [pc, #20]	@ (800a16c <SDMMC_CmdStopTransfer+0x40>)
 800a158:	210c      	movs	r1, #12
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f92e 	bl	800a3bc <SDMMC_GetCmdResp1>
 800a160:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a162:	69fb      	ldr	r3, [r7, #28]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3720      	adds	r7, #32
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	05f5e100 	.word	0x05f5e100

0800a170 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08a      	sub	sp, #40	@ 0x28
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a180:	2307      	movs	r3, #7
 800a182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a184:	2340      	movs	r3, #64	@ 0x40
 800a186:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a188:	2300      	movs	r3, #0
 800a18a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a18c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a190:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a192:	f107 0310 	add.w	r3, r7, #16
 800a196:	4619      	mov	r1, r3
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f7ff fea7 	bl	8009eec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a19e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1a2:	2107      	movs	r1, #7
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 f909 	bl	800a3bc <SDMMC_GetCmdResp1>
 800a1aa:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3728      	adds	r7, #40	@ 0x28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b088      	sub	sp, #32
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1d4:	f107 0308 	add.w	r3, r7, #8
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7ff fe86 	bl	8009eec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fb23 	bl	800a82c <SDMMC_GetCmdError>
 800a1e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1e8:	69fb      	ldr	r3, [r7, #28]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3720      	adds	r7, #32
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b088      	sub	sp, #32
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a1fa:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a1fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a200:	2308      	movs	r3, #8
 800a202:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a204:	2340      	movs	r3, #64	@ 0x40
 800a206:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a208:	2300      	movs	r3, #0
 800a20a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a20c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a210:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a212:	f107 0308 	add.w	r3, r7, #8
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7ff fe67 	bl	8009eec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fab6 	bl	800a790 <SDMMC_GetCmdResp7>
 800a224:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a226:	69fb      	ldr	r3, [r7, #28]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3720      	adds	r7, #32
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b088      	sub	sp, #32
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a23e:	2337      	movs	r3, #55	@ 0x37
 800a240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a242:	2340      	movs	r3, #64	@ 0x40
 800a244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a246:	2300      	movs	r3, #0
 800a248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a24a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a24e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a250:	f107 0308 	add.w	r3, r7, #8
 800a254:	4619      	mov	r1, r3
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f7ff fe48 	bl	8009eec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a25c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a260:	2137      	movs	r1, #55	@ 0x37
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f8aa 	bl	800a3bc <SDMMC_GetCmdResp1>
 800a268:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a26a:	69fb      	ldr	r3, [r7, #28]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3720      	adds	r7, #32
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b088      	sub	sp, #32
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b8 <SDMMC_CmdAppOperCommand+0x44>)
 800a282:	4313      	orrs	r3, r2
 800a284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a286:	2329      	movs	r3, #41	@ 0x29
 800a288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a28a:	2340      	movs	r3, #64	@ 0x40
 800a28c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a28e:	2300      	movs	r3, #0
 800a290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a296:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a298:	f107 0308 	add.w	r3, r7, #8
 800a29c:	4619      	mov	r1, r3
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7ff fe24 	bl	8009eec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 f9bf 	bl	800a628 <SDMMC_GetCmdResp3>
 800a2aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2ac:	69fb      	ldr	r3, [r7, #28]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3720      	adds	r7, #32
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	80100000 	.word	0x80100000

0800a2bc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b088      	sub	sp, #32
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a2c8:	2302      	movs	r3, #2
 800a2ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a2cc:	23c0      	movs	r3, #192	@ 0xc0
 800a2ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2da:	f107 0308 	add.w	r3, r7, #8
 800a2de:	4619      	mov	r1, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f7ff fe03 	bl	8009eec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f956 	bl	800a598 <SDMMC_GetCmdResp2>
 800a2ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2ee:	69fb      	ldr	r3, [r7, #28]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3720      	adds	r7, #32
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b088      	sub	sp, #32
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a306:	2309      	movs	r3, #9
 800a308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a30a:	23c0      	movs	r3, #192	@ 0xc0
 800a30c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a30e:	2300      	movs	r3, #0
 800a310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a316:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a318:	f107 0308 	add.w	r3, r7, #8
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7ff fde4 	bl	8009eec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 f937 	bl	800a598 <SDMMC_GetCmdResp2>
 800a32a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a32c:	69fb      	ldr	r3, [r7, #28]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3720      	adds	r7, #32
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b088      	sub	sp, #32
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a340:	2300      	movs	r3, #0
 800a342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a344:	2303      	movs	r3, #3
 800a346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a348:	2340      	movs	r3, #64	@ 0x40
 800a34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a34c:	2300      	movs	r3, #0
 800a34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a350:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a356:	f107 0308 	add.w	r3, r7, #8
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7ff fdc5 	bl	8009eec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	2103      	movs	r1, #3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f99c 	bl	800a6a4 <SDMMC_GetCmdResp6>
 800a36c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a36e:	69fb      	ldr	r3, [r7, #28]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3720      	adds	r7, #32
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a386:	230d      	movs	r3, #13
 800a388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a38a:	2340      	movs	r3, #64	@ 0x40
 800a38c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a38e:	2300      	movs	r3, #0
 800a390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a392:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a396:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a398:	f107 0308 	add.w	r3, r7, #8
 800a39c:	4619      	mov	r1, r3
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f7ff fda4 	bl	8009eec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a3a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3a8:	210d      	movs	r1, #13
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f806 	bl	800a3bc <SDMMC_GetCmdResp1>
 800a3b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3b2:	69fb      	ldr	r3, [r7, #28]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3720      	adds	r7, #32
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b088      	sub	sp, #32
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	607a      	str	r2, [r7, #4]
 800a3c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a3ca:	4b70      	ldr	r3, [pc, #448]	@ (800a58c <SDMMC_GetCmdResp1+0x1d0>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a70      	ldr	r2, [pc, #448]	@ (800a590 <SDMMC_GetCmdResp1+0x1d4>)
 800a3d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d4:	0a5a      	lsrs	r2, r3, #9
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	fb02 f303 	mul.w	r3, r2, r3
 800a3dc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	1e5a      	subs	r2, r3, #1
 800a3e2:	61fa      	str	r2, [r7, #28]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d102      	bne.n	800a3ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a3ec:	e0c9      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3f2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d0ef      	beq.n	800a3de <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1ea      	bne.n	800a3de <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a40c:	f003 0304 	and.w	r3, r3, #4
 800a410:	2b00      	cmp	r3, #0
 800a412:	d004      	beq.n	800a41e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2204      	movs	r2, #4
 800a418:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a41a:	2304      	movs	r3, #4
 800a41c:	e0b1      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	2b00      	cmp	r3, #0
 800a428:	d004      	beq.n	800a434 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2201      	movs	r2, #1
 800a42e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a430:	2301      	movs	r3, #1
 800a432:	e0a6      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	22c5      	movs	r2, #197	@ 0xc5
 800a438:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f7ff fd80 	bl	8009f40 <SDMMC_GetCommandResponse>
 800a440:	4603      	mov	r3, r0
 800a442:	461a      	mov	r2, r3
 800a444:	7afb      	ldrb	r3, [r7, #11]
 800a446:	4293      	cmp	r3, r2
 800a448:	d001      	beq.n	800a44e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e099      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a44e:	2100      	movs	r1, #0
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f7ff fd82 	bl	8009f5a <SDMMC_GetResponse>
 800a456:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	4b4e      	ldr	r3, [pc, #312]	@ (800a594 <SDMMC_GetCmdResp1+0x1d8>)
 800a45c:	4013      	ands	r3, r2
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a462:	2300      	movs	r3, #0
 800a464:	e08d      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	da02      	bge.n	800a472 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a46c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a470:	e087      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d001      	beq.n	800a480 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a47c:	2340      	movs	r3, #64	@ 0x40
 800a47e:	e080      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a48a:	2380      	movs	r3, #128	@ 0x80
 800a48c:	e079      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a494:	2b00      	cmp	r3, #0
 800a496:	d002      	beq.n	800a49e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a498:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a49c:	e071      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d002      	beq.n	800a4ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a4a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4ac:	e069      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d002      	beq.n	800a4be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a4b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4bc:	e061      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d002      	beq.n	800a4ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a4c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a4cc:	e059      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a4d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a4dc:	e051      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d002      	beq.n	800a4ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a4e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a4ec:	e049      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d002      	beq.n	800a4fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a4f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a4fc:	e041      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a504:	2b00      	cmp	r3, #0
 800a506:	d002      	beq.n	800a50e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a508:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a50c:	e039      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d002      	beq.n	800a51e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a518:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a51c:	e031      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a528:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a52c:	e029      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a534:	2b00      	cmp	r3, #0
 800a536:	d002      	beq.n	800a53e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a538:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a53c:	e021      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d002      	beq.n	800a54e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a548:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a54c:	e019      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d002      	beq.n	800a55e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a558:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a55c:	e011      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a568:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a56c:	e009      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f003 0308 	and.w	r3, r3, #8
 800a574:	2b00      	cmp	r3, #0
 800a576:	d002      	beq.n	800a57e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a578:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a57c:	e001      	b.n	800a582 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a57e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a582:	4618      	mov	r0, r3
 800a584:	3720      	adds	r7, #32
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	20000000 	.word	0x20000000
 800a590:	10624dd3 	.word	0x10624dd3
 800a594:	fdffe008 	.word	0xfdffe008

0800a598 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5a0:	4b1f      	ldr	r3, [pc, #124]	@ (800a620 <SDMMC_GetCmdResp2+0x88>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a1f      	ldr	r2, [pc, #124]	@ (800a624 <SDMMC_GetCmdResp2+0x8c>)
 800a5a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5aa:	0a5b      	lsrs	r3, r3, #9
 800a5ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5b0:	fb02 f303 	mul.w	r3, r2, r3
 800a5b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	1e5a      	subs	r2, r3, #1
 800a5ba:	60fa      	str	r2, [r7, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d102      	bne.n	800a5c6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a5c4:	e026      	b.n	800a614 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d0ef      	beq.n	800a5b6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d1ea      	bne.n	800a5b6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5e4:	f003 0304 	and.w	r3, r3, #4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d004      	beq.n	800a5f6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2204      	movs	r2, #4
 800a5f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5f2:	2304      	movs	r3, #4
 800a5f4:	e00e      	b.n	800a614 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d004      	beq.n	800a60c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a608:	2301      	movs	r3, #1
 800a60a:	e003      	b.n	800a614 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	22c5      	movs	r2, #197	@ 0xc5
 800a610:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3714      	adds	r7, #20
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr
 800a620:	20000000 	.word	0x20000000
 800a624:	10624dd3 	.word	0x10624dd3

0800a628 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a630:	4b1a      	ldr	r3, [pc, #104]	@ (800a69c <SDMMC_GetCmdResp3+0x74>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a1a      	ldr	r2, [pc, #104]	@ (800a6a0 <SDMMC_GetCmdResp3+0x78>)
 800a636:	fba2 2303 	umull	r2, r3, r2, r3
 800a63a:	0a5b      	lsrs	r3, r3, #9
 800a63c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a640:	fb02 f303 	mul.w	r3, r2, r3
 800a644:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	1e5a      	subs	r2, r3, #1
 800a64a:	60fa      	str	r2, [r7, #12]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d102      	bne.n	800a656 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a650:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a654:	e01b      	b.n	800a68e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a65a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a662:	2b00      	cmp	r3, #0
 800a664:	d0ef      	beq.n	800a646 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1ea      	bne.n	800a646 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a674:	f003 0304 	and.w	r3, r3, #4
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d004      	beq.n	800a686 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2204      	movs	r2, #4
 800a680:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a682:	2304      	movs	r3, #4
 800a684:	e003      	b.n	800a68e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	22c5      	movs	r2, #197	@ 0xc5
 800a68a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	20000000 	.word	0x20000000
 800a6a0:	10624dd3 	.word	0x10624dd3

0800a6a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b088      	sub	sp, #32
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	607a      	str	r2, [r7, #4]
 800a6b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6b2:	4b35      	ldr	r3, [pc, #212]	@ (800a788 <SDMMC_GetCmdResp6+0xe4>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a35      	ldr	r2, [pc, #212]	@ (800a78c <SDMMC_GetCmdResp6+0xe8>)
 800a6b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a6bc:	0a5b      	lsrs	r3, r3, #9
 800a6be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6c2:	fb02 f303 	mul.w	r3, r2, r3
 800a6c6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	1e5a      	subs	r2, r3, #1
 800a6cc:	61fa      	str	r2, [r7, #28]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d102      	bne.n	800a6d8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6d2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a6d6:	e052      	b.n	800a77e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6dc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d0ef      	beq.n	800a6c8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1ea      	bne.n	800a6c8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6f6:	f003 0304 	and.w	r3, r3, #4
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d004      	beq.n	800a708 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2204      	movs	r2, #4
 800a702:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a704:	2304      	movs	r3, #4
 800a706:	e03a      	b.n	800a77e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	2b00      	cmp	r3, #0
 800a712:	d004      	beq.n	800a71e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2201      	movs	r2, #1
 800a718:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e02f      	b.n	800a77e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f7ff fc0e 	bl	8009f40 <SDMMC_GetCommandResponse>
 800a724:	4603      	mov	r3, r0
 800a726:	461a      	mov	r2, r3
 800a728:	7afb      	ldrb	r3, [r7, #11]
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d001      	beq.n	800a732 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a72e:	2301      	movs	r3, #1
 800a730:	e025      	b.n	800a77e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	22c5      	movs	r2, #197	@ 0xc5
 800a736:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a738:	2100      	movs	r1, #0
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f7ff fc0d 	bl	8009f5a <SDMMC_GetResponse>
 800a740:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d106      	bne.n	800a75a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	0c1b      	lsrs	r3, r3, #16
 800a750:	b29a      	uxth	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a756:	2300      	movs	r3, #0
 800a758:	e011      	b.n	800a77e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a760:	2b00      	cmp	r3, #0
 800a762:	d002      	beq.n	800a76a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a764:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a768:	e009      	b.n	800a77e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a770:	2b00      	cmp	r3, #0
 800a772:	d002      	beq.n	800a77a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a778:	e001      	b.n	800a77e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a77a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3720      	adds	r7, #32
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	20000000 	.word	0x20000000
 800a78c:	10624dd3 	.word	0x10624dd3

0800a790 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a798:	4b22      	ldr	r3, [pc, #136]	@ (800a824 <SDMMC_GetCmdResp7+0x94>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a22      	ldr	r2, [pc, #136]	@ (800a828 <SDMMC_GetCmdResp7+0x98>)
 800a79e:	fba2 2303 	umull	r2, r3, r2, r3
 800a7a2:	0a5b      	lsrs	r3, r3, #9
 800a7a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7a8:	fb02 f303 	mul.w	r3, r2, r3
 800a7ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	1e5a      	subs	r2, r3, #1
 800a7b2:	60fa      	str	r2, [r7, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d102      	bne.n	800a7be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a7bc:	e02c      	b.n	800a818 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d0ef      	beq.n	800a7ae <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1ea      	bne.n	800a7ae <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7dc:	f003 0304 	and.w	r3, r3, #4
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d004      	beq.n	800a7ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2204      	movs	r2, #4
 800a7e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7ea:	2304      	movs	r3, #4
 800a7ec:	e014      	b.n	800a818 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d004      	beq.n	800a804 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a800:	2301      	movs	r3, #1
 800a802:	e009      	b.n	800a818 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d002      	beq.n	800a816 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2240      	movs	r2, #64	@ 0x40
 800a814:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a816:	2300      	movs	r3, #0
  
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr
 800a824:	20000000 	.word	0x20000000
 800a828:	10624dd3 	.word	0x10624dd3

0800a82c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a834:	4b11      	ldr	r3, [pc, #68]	@ (800a87c <SDMMC_GetCmdError+0x50>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a11      	ldr	r2, [pc, #68]	@ (800a880 <SDMMC_GetCmdError+0x54>)
 800a83a:	fba2 2303 	umull	r2, r3, r2, r3
 800a83e:	0a5b      	lsrs	r3, r3, #9
 800a840:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a844:	fb02 f303 	mul.w	r3, r2, r3
 800a848:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	1e5a      	subs	r2, r3, #1
 800a84e:	60fa      	str	r2, [r7, #12]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d102      	bne.n	800a85a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a854:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a858:	e009      	b.n	800a86e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a85e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a862:	2b00      	cmp	r3, #0
 800a864:	d0f1      	beq.n	800a84a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	22c5      	movs	r2, #197	@ 0xc5
 800a86a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	20000000 	.word	0x20000000
 800a880:	10624dd3 	.word	0x10624dd3

0800a884 <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b090      	sub	sp, #64	@ 0x40
 800a888:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20];

  uwVolume = 100;
 800a88e:	4b33      	ldr	r3, [pc, #204]	@ (800a95c <AUDIO_REC_Start+0xd8>)
 800a890:	2264      	movs	r2, #100	@ 0x64
 800a892:	601a      	str	r2, [r3, #0]

  /* Create a new file system */
  if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 800a894:	2200      	movs	r2, #0
 800a896:	4932      	ldr	r1, [pc, #200]	@ (800a960 <AUDIO_REC_Start+0xdc>)
 800a898:	4832      	ldr	r0, [pc, #200]	@ (800a964 <AUDIO_REC_Start+0xe0>)
 800a89a:	f002 faed 	bl	800ce78 <f_mount>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d002      	beq.n	800a8aa <AUDIO_REC_Start+0x26>
    	Error_Handler(); /* FatFs Initialization Error */
 800a8a4:	f7f7 f8b0 	bl	8001a08 <Error_Handler>
 800a8a8:	e052      	b.n	800a950 <AUDIO_REC_Start+0xcc>
  } else {
	  printf("SD card mounted\r\n");
 800a8aa:	482f      	ldr	r0, [pc, #188]	@ (800a968 <AUDIO_REC_Start+0xe4>)
 800a8ac:	f008 f80c 	bl	80128c8 <puts>
		  	  sizeof(workBuffer)) != FR_OK) {
		  Error_Handler(); / * FatFs Format Error */
//	  } else {
//	  */

	  printf("WAV file created\r\n");
 800a8b0:	482e      	ldr	r0, [pc, #184]	@ (800a96c <AUDIO_REC_Start+0xe8>)
 800a8b2:	f008 f809 	bl	80128c8 <puts>
	  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800a8b6:	220a      	movs	r2, #10
 800a8b8:	492d      	ldr	r1, [pc, #180]	@ (800a970 <AUDIO_REC_Start+0xec>)
 800a8ba:	482e      	ldr	r0, [pc, #184]	@ (800a974 <AUDIO_REC_Start+0xf0>)
 800a8bc:	f002 fb22 	bl	800cf04 <f_open>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d144      	bne.n	800a950 <AUDIO_REC_Start+0xcc>
	  {
		/* Initialize header file */
		WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 800a8c6:	492c      	ldr	r1, [pc, #176]	@ (800a978 <AUDIO_REC_Start+0xf4>)
 800a8c8:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800a8cc:	f000 f9c6 	bl	800ac5c <WavProcess_EncInit>

		/* Write header file */
		if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 800a8d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a8d4:	222c      	movs	r2, #44	@ 0x2c
 800a8d6:	4928      	ldr	r1, [pc, #160]	@ (800a978 <AUDIO_REC_Start+0xf4>)
 800a8d8:	4826      	ldr	r0, [pc, #152]	@ (800a974 <AUDIO_REC_Start+0xf0>)
 800a8da:	f002 fe0c 	bl	800d4f6 <f_write>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d135      	bne.n	800a950 <AUDIO_REC_Start+0xcc>
		{
		  printf("State : ready to record\r\n");
 800a8e4:	4825      	ldr	r0, [pc, #148]	@ (800a97c <AUDIO_REC_Start+0xf8>)
 800a8e6:	f007 ffef 	bl	80128c8 <puts>
		  AudioState = AUDIO_STATE_RECORD;
 800a8ea:	4b25      	ldr	r3, [pc, #148]	@ (800a980 <AUDIO_REC_Start+0xfc>)
 800a8ec:	2205      	movs	r2, #5
 800a8ee:	701a      	strb	r2, [r3, #0]

			if(byteswritten != 0)
 800a8f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d02c      	beq.n	800a950 <AUDIO_REC_Start+0xcc>
			{
			  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	2110      	movs	r1, #16
 800a8fa:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800a8fe:	f7f9 fb63 	bl	8003fc8 <BSP_AUDIO_IN_Init>
			  printf("Recording config initialized\r\n");
 800a902:	4820      	ldr	r0, [pc, #128]	@ (800a984 <AUDIO_REC_Start+0x100>)
 800a904:	f007 ffe0 	bl	80128c8 <puts>
			  BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
 800a908:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 800a90c:	481e      	ldr	r0, [pc, #120]	@ (800a988 <AUDIO_REC_Start+0x104>)
 800a90e:	f7f9 fbd9 	bl	80040c4 <BSP_AUDIO_IN_Record>
			  printf("Recording started...\r\n");
 800a912:	481e      	ldr	r0, [pc, #120]	@ (800a98c <AUDIO_REC_Start+0x108>)
 800a914:	f007 ffd8 	bl	80128c8 <puts>
			  BufferCtl.fptr = byteswritten;
 800a918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a91a:	4a1b      	ldr	r2, [pc, #108]	@ (800a988 <AUDIO_REC_Start+0x104>)
 800a91c:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800a920:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
			  BufferCtl.pcm_ptr = 0;
 800a924:	4b18      	ldr	r3, [pc, #96]	@ (800a988 <AUDIO_REC_Start+0x104>)
 800a926:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a92a:	461a      	mov	r2, r3
 800a92c:	2300      	movs	r3, #0
 800a92e:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
			  BufferCtl.offset = 0;
 800a932:	4b15      	ldr	r3, [pc, #84]	@ (800a988 <AUDIO_REC_Start+0x104>)
 800a934:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a938:	461a      	mov	r2, r3
 800a93a:	2300      	movs	r3, #0
 800a93c:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
			  BufferCtl.wr_state = BUFFER_EMPTY;
 800a940:	4b11      	ldr	r3, [pc, #68]	@ (800a988 <AUDIO_REC_Start+0x104>)
 800a942:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a946:	2200      	movs	r2, #0
 800a948:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			  return AUDIO_ERROR_NONE;
 800a94c:	2300      	movs	r3, #0
 800a94e:	e000      	b.n	800a952 <AUDIO_REC_Start+0xce>
			}
		}
	  }
	  //}
  }
  return AUDIO_ERROR_IO;
 800a950:	2301      	movs	r3, #1
}
 800a952:	4618      	mov	r0, r3
 800a954:	3740      	adds	r7, #64	@ 0x40
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	20000040 	.word	0x20000040
 800a960:	20005b9c 	.word	0x20005b9c
 800a964:	20005ba0 	.word	0x20005ba0
 800a968:	08014a44 	.word	0x08014a44
 800a96c:	08014a58 	.word	0x08014a58
 800a970:	08014a6c 	.word	0x08014a6c
 800a974:	20005968 	.word	0x20005968
 800a978:	20001100 	.word	0x20001100
 800a97c:	08014a78 	.word	0x08014a78
 800a980:	20000a14 	.word	0x20000a14
 800a984:	08014a94 	.word	0x08014a94
 800a988:	2000112c 	.word	0x2000112c
 800a98c:	08014ab4 	.word	0x08014ab4

0800a990 <AUDIO_REC_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_REC_Process(void)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b088      	sub	sp, #32
 800a994:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800a996:	2300      	movs	r3, #0
 800a998:	617b      	str	r3, [r7, #20]
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 800a99a:	2300      	movs	r3, #0
 800a99c:	77fb      	strb	r3, [r7, #31]
  uint32_t elapsed_time; 
  static uint32_t prev_elapsed_time = 0xFFFFFFFF;
  uint8_t str[16];
  //static TS_StateTypeDef  TS_State={0};
  //printf("PRE SWITCH\r\n");
  switch(AudioState)
 800a99e:	4b59      	ldr	r3, [pc, #356]	@ (800ab04 <AUDIO_REC_Process+0x174>)
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	2b05      	cmp	r3, #5
 800a9a4:	d002      	beq.n	800a9ac <AUDIO_REC_Process+0x1c>
 800a9a6:	2b0a      	cmp	r3, #10
 800a9a8:	d079      	beq.n	800aa9e <AUDIO_REC_Process+0x10e>

  	case AUDIO_STATE_IDLE:
  	case AUDIO_STATE_INIT:
  	default:
      /* Do Nothing */
      break;
 800a9aa:	e0a7      	b.n	800aafc <AUDIO_REC_Process+0x16c>
      if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
 800a9ac:	4b56      	ldr	r3, [pc, #344]	@ (800ab08 <AUDIO_REC_Process+0x178>)
 800a9ae:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a9b2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a9b6:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 800a9ba:	d303      	bcc.n	800a9c4 <AUDIO_REC_Process+0x34>
        AudioState = AUDIO_STATE_STOP;
 800a9bc:	4b51      	ldr	r3, [pc, #324]	@ (800ab04 <AUDIO_REC_Process+0x174>)
 800a9be:	220a      	movs	r2, #10
 800a9c0:	701a      	strb	r2, [r3, #0]
        break;
 800a9c2:	e09b      	b.n	800aafc <AUDIO_REC_Process+0x16c>
      if(BufferCtl.wr_state == BUFFER_FULL)
 800a9c4:	4b50      	ldr	r3, [pc, #320]	@ (800ab08 <AUDIO_REC_Process+0x178>)
 800a9c6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a9ca:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d128      	bne.n	800aa24 <AUDIO_REC_Process+0x94>
        if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset),
 800a9d2:	4b4d      	ldr	r3, [pc, #308]	@ (800ab08 <AUDIO_REC_Process+0x178>)
 800a9d4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a9d8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800a9dc:	005b      	lsls	r3, r3, #1
 800a9de:	4a4a      	ldr	r2, [pc, #296]	@ (800ab08 <AUDIO_REC_Process+0x178>)
 800a9e0:	1899      	adds	r1, r3, r2
 800a9e2:	f107 0314 	add.w	r3, r7, #20
 800a9e6:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 800a9ea:	4848      	ldr	r0, [pc, #288]	@ (800ab0c <AUDIO_REC_Process+0x17c>)
 800a9ec:	f002 fd83 	bl	800d4f6 <f_write>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d004      	beq.n	800aa00 <AUDIO_REC_Process+0x70>
          printf("recording failed\r\n");
 800a9f6:	4846      	ldr	r0, [pc, #280]	@ (800ab10 <AUDIO_REC_Process+0x180>)
 800a9f8:	f007 ff66 	bl	80128c8 <puts>
          return AUDIO_ERROR_IO;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e07d      	b.n	800aafc <AUDIO_REC_Process+0x16c>
        BufferCtl.fptr += byteswritten;
 800aa00:	4b41      	ldr	r3, [pc, #260]	@ (800ab08 <AUDIO_REC_Process+0x178>)
 800aa02:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa06:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	4a3e      	ldr	r2, [pc, #248]	@ (800ab08 <AUDIO_REC_Process+0x178>)
 800aa10:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800aa14:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
        BufferCtl.wr_state =  BUFFER_EMPTY;
 800aa18:	4b3b      	ldr	r3, [pc, #236]	@ (800ab08 <AUDIO_REC_Process+0x178>)
 800aa1a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
      elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2);
 800aa24:	4b38      	ldr	r3, [pc, #224]	@ (800ab08 <AUDIO_REC_Process+0x178>)
 800aa26:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa2a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aa2e:	4a39      	ldr	r2, [pc, #228]	@ (800ab14 <AUDIO_REC_Process+0x184>)
 800aa30:	fba2 2303 	umull	r2, r3, r2, r3
 800aa34:	0b1b      	lsrs	r3, r3, #12
 800aa36:	61bb      	str	r3, [r7, #24]
      if(prev_elapsed_time != elapsed_time)
 800aa38:	4b37      	ldr	r3, [pc, #220]	@ (800ab18 <AUDIO_REC_Process+0x188>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	69ba      	ldr	r2, [r7, #24]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d05b      	beq.n	800aafa <AUDIO_REC_Process+0x16a>
        prev_elapsed_time = elapsed_time;
 800aa42:	4a35      	ldr	r2, [pc, #212]	@ (800ab18 <AUDIO_REC_Process+0x188>)
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	6013      	str	r3, [r2, #0]
        printf("Elapsed time : \r\n");
 800aa48:	4834      	ldr	r0, [pc, #208]	@ (800ab1c <AUDIO_REC_Process+0x18c>)
 800aa4a:	f007 ff3d 	bl	80128c8 <puts>
        printf("[%02d:%02d]\r\n", (int)(elapsed_time /60), (int)(elapsed_time%60));
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	4a33      	ldr	r2, [pc, #204]	@ (800ab20 <AUDIO_REC_Process+0x190>)
 800aa52:	fba2 2303 	umull	r2, r3, r2, r3
 800aa56:	095b      	lsrs	r3, r3, #5
 800aa58:	4618      	mov	r0, r3
 800aa5a:	69b9      	ldr	r1, [r7, #24]
 800aa5c:	4b30      	ldr	r3, [pc, #192]	@ (800ab20 <AUDIO_REC_Process+0x190>)
 800aa5e:	fba3 2301 	umull	r2, r3, r3, r1
 800aa62:	095a      	lsrs	r2, r3, #5
 800aa64:	4613      	mov	r3, r2
 800aa66:	011b      	lsls	r3, r3, #4
 800aa68:	1a9b      	subs	r3, r3, r2
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	1aca      	subs	r2, r1, r3
 800aa6e:	4613      	mov	r3, r2
 800aa70:	461a      	mov	r2, r3
 800aa72:	4601      	mov	r1, r0
 800aa74:	482b      	ldr	r0, [pc, #172]	@ (800ab24 <AUDIO_REC_Process+0x194>)
 800aa76:	f007 febf 	bl	80127f8 <iprintf>
        printf("File size : \r\n");
 800aa7a:	482b      	ldr	r0, [pc, #172]	@ (800ab28 <AUDIO_REC_Process+0x198>)
 800aa7c:	f007 ff24 	bl	80128c8 <puts>
        printf("%4d KB\r\n", (int)((int32_t)BufferCtl.fptr/1024));
 800aa80:	4b21      	ldr	r3, [pc, #132]	@ (800ab08 <AUDIO_REC_Process+0x178>)
 800aa82:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa86:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	da01      	bge.n	800aa92 <AUDIO_REC_Process+0x102>
 800aa8e:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800aa92:	129b      	asrs	r3, r3, #10
 800aa94:	4619      	mov	r1, r3
 800aa96:	4825      	ldr	r0, [pc, #148]	@ (800ab2c <AUDIO_REC_Process+0x19c>)
 800aa98:	f007 feae 	bl	80127f8 <iprintf>
      break;
 800aa9c:	e02d      	b.n	800aafa <AUDIO_REC_Process+0x16a>
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800aa9e:	2002      	movs	r0, #2
 800aaa0:	f7f9 fb28 	bl	80040f4 <BSP_AUDIO_IN_Stop>
      HAL_Delay(300);
 800aaa4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800aaa8:	f7f9 fd3e 	bl	8004528 <HAL_Delay>
      if(f_lseek(&WavFile, 0) == FR_OK)
 800aaac:	2100      	movs	r1, #0
 800aaae:	4817      	ldr	r0, [pc, #92]	@ (800ab0c <AUDIO_REC_Process+0x17c>)
 800aab0:	f002 ff3e 	bl	800d930 <f_lseek>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d113      	bne.n	800aae2 <AUDIO_REC_Process+0x152>
        WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 800aaba:	491d      	ldr	r1, [pc, #116]	@ (800ab30 <AUDIO_REC_Process+0x1a0>)
 800aabc:	481d      	ldr	r0, [pc, #116]	@ (800ab34 <AUDIO_REC_Process+0x1a4>)
 800aabe:	f000 f9e5 	bl	800ae8c <WavProcess_HeaderUpdate>
        if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 800aac2:	f107 0314 	add.w	r3, r7, #20
 800aac6:	222c      	movs	r2, #44	@ 0x2c
 800aac8:	491a      	ldr	r1, [pc, #104]	@ (800ab34 <AUDIO_REC_Process+0x1a4>)
 800aaca:	4810      	ldr	r0, [pc, #64]	@ (800ab0c <AUDIO_REC_Process+0x17c>)
 800aacc:	f002 fd13 	bl	800d4f6 <f_write>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d102      	bne.n	800aadc <AUDIO_REC_Process+0x14c>
          audio_error = AUDIO_ERROR_EOF;
 800aad6:	2302      	movs	r3, #2
 800aad8:	77fb      	strb	r3, [r7, #31]
 800aada:	e004      	b.n	800aae6 <AUDIO_REC_Process+0x156>
          audio_error = AUDIO_ERROR_IO;
 800aadc:	2301      	movs	r3, #1
 800aade:	77fb      	strb	r3, [r7, #31]
 800aae0:	e001      	b.n	800aae6 <AUDIO_REC_Process+0x156>
        audio_error = AUDIO_ERROR_IO;
 800aae2:	2301      	movs	r3, #1
 800aae4:	77fb      	strb	r3, [r7, #31]
      AudioState = AUDIO_STATE_IDLE;
 800aae6:	4b07      	ldr	r3, [pc, #28]	@ (800ab04 <AUDIO_REC_Process+0x174>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	701a      	strb	r2, [r3, #0]
      f_close(&WavFile);
 800aaec:	4807      	ldr	r0, [pc, #28]	@ (800ab0c <AUDIO_REC_Process+0x17c>)
 800aaee:	f002 fef5 	bl	800d8dc <f_close>
      printf("wave file closed success\r\n");
 800aaf2:	4811      	ldr	r0, [pc, #68]	@ (800ab38 <AUDIO_REC_Process+0x1a8>)
 800aaf4:	f007 fee8 	bl	80128c8 <puts>
      break;
 800aaf8:	e000      	b.n	800aafc <AUDIO_REC_Process+0x16c>
      break;
 800aafa:	bf00      	nop
      return audio_error;
    }
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3720      	adds	r7, #32
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	20000a14 	.word	0x20000a14
 800ab08:	2000112c 	.word	0x2000112c
 800ab0c:	20005968 	.word	0x20005968
 800ab10:	08014acc 	.word	0x08014acc
 800ab14:	10624dd3 	.word	0x10624dd3
 800ab18:	20000044 	.word	0x20000044
 800ab1c:	08014ae0 	.word	0x08014ae0
 800ab20:	88888889 	.word	0x88888889
 800ab24:	08014af4 	.word	0x08014af4
 800ab28:	08014b04 	.word	0x08014b04
 800ab2c:	08014b14 	.word	0x08014b14
 800ab30:	2000593c 	.word	0x2000593c
 800ab34:	20001100 	.word	0x20001100
 800ab38:	08014b20 	.word	0x08014b20

0800ab3c <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800ab40:	4b21      	ldr	r3, [pc, #132]	@ (800abc8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ab42:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab46:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ab4a:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800ab4e:	4a1e      	ldr	r2, [pc, #120]	@ (800abc8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ab50:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800ab54:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800ab58:	4b1b      	ldr	r3, [pc, #108]	@ (800abc8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ab5a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab5e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ab62:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800ab66:	d10c      	bne.n	800ab82 <BSP_AUDIO_IN_TransferComplete_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800ab68:	4b17      	ldr	r3, [pc, #92]	@ (800abc8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ab6a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800ab74:	4b14      	ldr	r3, [pc, #80]	@ (800abc8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ab76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800ab82:	4b11      	ldr	r3, [pc, #68]	@ (800abc8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ab84:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab88:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ab8c:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800ab90:	d314      	bcc.n	800abbc <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800ab92:	4b0d      	ldr	r3, [pc, #52]	@ (800abc8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ab94:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800ab9e:	4b0a      	ldr	r3, [pc, #40]	@ (800abc8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800aba0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aba4:	461a      	mov	r2, r3
 800aba6:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800abaa:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800abae:	4b06      	ldr	r3, [pc, #24]	@ (800abc8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800abb0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800abb4:	461a      	mov	r2, r3
 800abb6:	2300      	movs	r3, #0
 800abb8:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800abbc:	bf00      	nop
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	2000112c 	.word	0x2000112c

0800abcc <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 800abcc:	b480      	push	{r7}
 800abce:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800abd0:	4b21      	ldr	r3, [pc, #132]	@ (800ac58 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800abd2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800abd6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800abda:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800abde:	4a1e      	ldr	r2, [pc, #120]	@ (800ac58 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800abe0:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800abe4:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800abe8:	4b1b      	ldr	r3, [pc, #108]	@ (800ac58 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800abea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800abee:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800abf2:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800abf6:	d10c      	bne.n	800ac12 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800abf8:	4b17      	ldr	r3, [pc, #92]	@ (800ac58 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800abfa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800ac04:	4b14      	ldr	r3, [pc, #80]	@ (800ac58 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ac06:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800ac12:	4b11      	ldr	r3, [pc, #68]	@ (800ac58 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ac14:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ac18:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ac1c:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800ac20:	d314      	bcc.n	800ac4c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800ac22:	4b0d      	ldr	r3, [pc, #52]	@ (800ac58 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ac24:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800ac2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ac58 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ac30:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ac34:	461a      	mov	r2, r3
 800ac36:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800ac3a:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800ac3e:	4b06      	ldr	r3, [pc, #24]	@ (800ac58 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ac40:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ac44:	461a      	mov	r2, r3
 800ac46:	2300      	movs	r3, #0
 800ac48:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800ac4c:	bf00      	nop
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	2000112c 	.word	0x2000112c

0800ac5c <WavProcess_EncInit>:
  * @param  Freq: Sampling frequency.
  * @param  pHeader: Pointer to the WAV file header to be written.  
  * @retval 0 if success, !0 else.
  */
static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{  
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 800ac66:	4a1b      	ldr	r2, [pc, #108]	@ (800acd4 <WavProcess_EncInit+0x78>)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800ac6c:	4b19      	ldr	r3, [pc, #100]	@ (800acd4 <WavProcess_EncInit+0x78>)
 800ac6e:	2202      	movs	r2, #2
 800ac70:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800ac72:	4b18      	ldr	r3, [pc, #96]	@ (800acd4 <WavProcess_EncInit+0x78>)
 800ac74:	2210      	movs	r2, #16
 800ac76:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800ac78:	4b16      	ldr	r3, [pc, #88]	@ (800acd4 <WavProcess_EncInit+0x78>)
 800ac7a:	4a17      	ldr	r2, [pc, #92]	@ (800acd8 <WavProcess_EncInit+0x7c>)
 800ac7c:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800ac7e:	4b15      	ldr	r3, [pc, #84]	@ (800acd4 <WavProcess_EncInit+0x78>)
 800ac80:	222c      	movs	r2, #44	@ 0x2c
 800ac82:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800ac84:	4b13      	ldr	r3, [pc, #76]	@ (800acd4 <WavProcess_EncInit+0x78>)
 800ac86:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800ac88:	4a12      	ldr	r2, [pc, #72]	@ (800acd4 <WavProcess_EncInit+0x78>)
 800ac8a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800ac8c:	08d2      	lsrs	r2, r2, #3
 800ac8e:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800ac90:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800ac94:	4a0f      	ldr	r2, [pc, #60]	@ (800acd4 <WavProcess_EncInit+0x78>)
 800ac96:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800ac98:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800ac9c:	4a0d      	ldr	r2, [pc, #52]	@ (800acd4 <WavProcess_EncInit+0x78>)
 800ac9e:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800aca0:	4b0c      	ldr	r3, [pc, #48]	@ (800acd4 <WavProcess_EncInit+0x78>)
 800aca2:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800aca4:	4b0b      	ldr	r3, [pc, #44]	@ (800acd4 <WavProcess_EncInit+0x78>)
 800aca6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800aca8:	08db      	lsrs	r3, r3, #3
 800acaa:	b29b      	uxth	r3, r3
 800acac:	fb12 f303 	smulbb	r3, r2, r3
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	4b08      	ldr	r3, [pc, #32]	@ (800acd4 <WavProcess_EncInit+0x78>)
 800acb4:	841a      	strh	r2, [r3, #32]
  
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 800acb6:	4907      	ldr	r1, [pc, #28]	@ (800acd4 <WavProcess_EncInit+0x78>)
 800acb8:	6838      	ldr	r0, [r7, #0]
 800acba:	f000 f80f 	bl	800acdc <WavProcess_HeaderInit>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <WavProcess_EncInit+0x6c>
  {
    return 1;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e000      	b.n	800acca <WavProcess_EncInit+0x6e>
  }
  return 0;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	2000593c 	.word	0x2000593c
 800acd8:	001d4c00 	.word	0x001d4c00

0800acdc <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2252      	movs	r2, #82	@ 0x52
 800acea:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	3301      	adds	r3, #1
 800acf0:	2249      	movs	r2, #73	@ 0x49
 800acf2:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	3302      	adds	r3, #2
 800acf8:	2246      	movs	r2, #70	@ 0x46
 800acfa:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3303      	adds	r3, #3
 800ad00:	2246      	movs	r2, #70	@ 0x46
 800ad02:	701a      	strb	r2, [r3, #0]
  
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	3304      	adds	r3, #4
 800ad08:	2200      	movs	r2, #0
 800ad0a:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	3305      	adds	r3, #5
 800ad10:	224c      	movs	r2, #76	@ 0x4c
 800ad12:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	3306      	adds	r3, #6
 800ad18:	221d      	movs	r2, #29
 800ad1a:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	3307      	adds	r3, #7
 800ad20:	2200      	movs	r2, #0
 800ad22:	701a      	strb	r2, [r3, #0]
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	3308      	adds	r3, #8
 800ad28:	2257      	movs	r2, #87	@ 0x57
 800ad2a:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3309      	adds	r3, #9
 800ad30:	2241      	movs	r2, #65	@ 0x41
 800ad32:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	330a      	adds	r3, #10
 800ad38:	2256      	movs	r2, #86	@ 0x56
 800ad3a:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	330b      	adds	r3, #11
 800ad40:	2245      	movs	r2, #69	@ 0x45
 800ad42:	701a      	strb	r2, [r3, #0]
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	330c      	adds	r3, #12
 800ad48:	2266      	movs	r2, #102	@ 0x66
 800ad4a:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	330d      	adds	r3, #13
 800ad50:	226d      	movs	r2, #109	@ 0x6d
 800ad52:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	330e      	adds	r3, #14
 800ad58:	2274      	movs	r2, #116	@ 0x74
 800ad5a:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	330f      	adds	r3, #15
 800ad60:	2220      	movs	r2, #32
 800ad62:	701a      	strb	r2, [r3, #0]
  
  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	3310      	adds	r3, #16
 800ad68:	2210      	movs	r2, #16
 800ad6a:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	3311      	adds	r3, #17
 800ad70:	2200      	movs	r2, #0
 800ad72:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	3312      	adds	r3, #18
 800ad78:	2200      	movs	r2, #0
 800ad7a:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	3313      	adds	r3, #19
 800ad80:	2200      	movs	r2, #0
 800ad82:	701a      	strb	r2, [r3, #0]
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	3314      	adds	r3, #20
 800ad88:	2201      	movs	r2, #1
 800ad8a:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	3315      	adds	r3, #21
 800ad90:	2200      	movs	r2, #0
 800ad92:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	8ada      	ldrh	r2, [r3, #22]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	3316      	adds	r3, #22
 800ad9c:	b2d2      	uxtb	r2, r2
 800ad9e:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	3317      	adds	r3, #23
 800ada4:	2200      	movs	r2, #0
 800ada6:	701a      	strb	r2, [r3, #0]
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	699a      	ldr	r2, [r3, #24]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	3318      	adds	r3, #24
 800adb0:	b2d2      	uxtb	r2, r2
 800adb2:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	0a1a      	lsrs	r2, r3, #8
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3319      	adds	r3, #25
 800adbe:	b2d2      	uxtb	r2, r2
 800adc0:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	0c1a      	lsrs	r2, r3, #16
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	331a      	adds	r3, #26
 800adcc:	b2d2      	uxtb	r2, r2
 800adce:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	0e1a      	lsrs	r2, r3, #24
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	331b      	adds	r3, #27
 800adda:	b2d2      	uxtb	r2, r2
 800addc:	701a      	strb	r2, [r3, #0]
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	69da      	ldr	r2, [r3, #28]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	331c      	adds	r3, #28
 800ade6:	b2d2      	uxtb	r2, r2
 800ade8:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	69db      	ldr	r3, [r3, #28]
 800adee:	0a1a      	lsrs	r2, r3, #8
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	331d      	adds	r3, #29
 800adf4:	b2d2      	uxtb	r2, r2
 800adf6:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	0c1a      	lsrs	r2, r3, #16
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	331e      	adds	r3, #30
 800ae02:	b2d2      	uxtb	r2, r2
 800ae04:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	69db      	ldr	r3, [r3, #28]
 800ae0a:	0e1a      	lsrs	r2, r3, #24
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	331f      	adds	r3, #31
 800ae10:	b2d2      	uxtb	r2, r2
 800ae12:	701a      	strb	r2, [r3, #0]
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	8c1a      	ldrh	r2, [r3, #32]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	3320      	adds	r3, #32
 800ae1c:	b2d2      	uxtb	r2, r2
 800ae1e:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	3321      	adds	r3, #33	@ 0x21
 800ae24:	2200      	movs	r2, #0
 800ae26:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	3322      	adds	r3, #34	@ 0x22
 800ae30:	b2d2      	uxtb	r2, r2
 800ae32:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	3323      	adds	r3, #35	@ 0x23
 800ae38:	2200      	movs	r2, #0
 800ae3a:	701a      	strb	r2, [r3, #0]
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	3324      	adds	r3, #36	@ 0x24
 800ae40:	2264      	movs	r2, #100	@ 0x64
 800ae42:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3325      	adds	r3, #37	@ 0x25
 800ae48:	2261      	movs	r2, #97	@ 0x61
 800ae4a:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3326      	adds	r3, #38	@ 0x26
 800ae50:	2274      	movs	r2, #116	@ 0x74
 800ae52:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	3327      	adds	r3, #39	@ 0x27
 800ae58:	2261      	movs	r2, #97	@ 0x61
 800ae5a:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3328      	adds	r3, #40	@ 0x28
 800ae60:	2200      	movs	r2, #0
 800ae62:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	3329      	adds	r3, #41	@ 0x29
 800ae68:	224c      	movs	r2, #76	@ 0x4c
 800ae6a:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	332a      	adds	r3, #42	@ 0x2a
 800ae70:	221d      	movs	r2, #29
 800ae72:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	332b      	adds	r3, #43	@ 0x2b
 800ae78:	2200      	movs	r2, #0
 800ae7a:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
	...

0800ae8c <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 800ae96:	4b30      	ldr	r3, [pc, #192]	@ (800af58 <WavProcess_HeaderUpdate+0xcc>)
 800ae98:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ae9c:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	3304      	adds	r3, #4
 800aea4:	b2d2      	uxtb	r2, r2
 800aea6:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 800aea8:	4b2b      	ldr	r3, [pc, #172]	@ (800af58 <WavProcess_HeaderUpdate+0xcc>)
 800aeaa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aeae:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aeb2:	0a1a      	lsrs	r2, r3, #8
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	3305      	adds	r3, #5
 800aeb8:	b2d2      	uxtb	r2, r2
 800aeba:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 800aebc:	4b26      	ldr	r3, [pc, #152]	@ (800af58 <WavProcess_HeaderUpdate+0xcc>)
 800aebe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aec2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aec6:	0c1a      	lsrs	r2, r3, #16
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	3306      	adds	r3, #6
 800aecc:	b2d2      	uxtb	r2, r2
 800aece:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 800aed0:	4b21      	ldr	r3, [pc, #132]	@ (800af58 <WavProcess_HeaderUpdate+0xcc>)
 800aed2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aed6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aeda:	0e1a      	lsrs	r2, r3, #24
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	3307      	adds	r3, #7
 800aee0:	b2d2      	uxtb	r2, r2
 800aee2:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 800aee4:	4b1c      	ldr	r3, [pc, #112]	@ (800af58 <WavProcess_HeaderUpdate+0xcc>)
 800aee6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aeea:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aeee:	3b2c      	subs	r3, #44	@ 0x2c
 800aef0:	4a19      	ldr	r2, [pc, #100]	@ (800af58 <WavProcess_HeaderUpdate+0xcc>)
 800aef2:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800aef6:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 800aefa:	4b17      	ldr	r3, [pc, #92]	@ (800af58 <WavProcess_HeaderUpdate+0xcc>)
 800aefc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af00:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	3328      	adds	r3, #40	@ 0x28
 800af08:	b2d2      	uxtb	r2, r2
 800af0a:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 800af0c:	4b12      	ldr	r3, [pc, #72]	@ (800af58 <WavProcess_HeaderUpdate+0xcc>)
 800af0e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af12:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800af16:	0a1a      	lsrs	r2, r3, #8
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	3329      	adds	r3, #41	@ 0x29
 800af1c:	b2d2      	uxtb	r2, r2
 800af1e:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 800af20:	4b0d      	ldr	r3, [pc, #52]	@ (800af58 <WavProcess_HeaderUpdate+0xcc>)
 800af22:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af26:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800af2a:	0c1a      	lsrs	r2, r3, #16
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	332a      	adds	r3, #42	@ 0x2a
 800af30:	b2d2      	uxtb	r2, r2
 800af32:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 800af34:	4b08      	ldr	r3, [pc, #32]	@ (800af58 <WavProcess_HeaderUpdate+0xcc>)
 800af36:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af3a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800af3e:	0e1a      	lsrs	r2, r3, #24
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	332b      	adds	r3, #43	@ 0x2b
 800af44:	b2d2      	uxtb	r2, r2
 800af46:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	370c      	adds	r7, #12
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	2000112c 	.word	0x2000112c

0800af5c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800af60:	4904      	ldr	r1, [pc, #16]	@ (800af74 <MX_FATFS_Init+0x18>)
 800af62:	4805      	ldr	r0, [pc, #20]	@ (800af78 <MX_FATFS_Init+0x1c>)
 800af64:	f003 fb66 	bl	800e634 <FATFS_LinkDriver>
 800af68:	4603      	mov	r3, r0
 800af6a:	461a      	mov	r2, r3
 800af6c:	4b03      	ldr	r3, [pc, #12]	@ (800af7c <MX_FATFS_Init+0x20>)
 800af6e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800af70:	bf00      	nop
 800af72:	bd80      	pop	{r7, pc}
 800af74:	20005b9c 	.word	0x20005b9c
 800af78:	08014bd0 	.word	0x08014bd0
 800af7c:	20005b98 	.word	0x20005b98

0800af80 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800af80:	b480      	push	{r7}
 800af82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800af84:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800af86:	4618      	mov	r0, r3
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800af96:	2300      	movs	r3, #0
 800af98:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800af9a:	f000 f888 	bl	800b0ae <BSP_SD_IsDetected>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d001      	beq.n	800afa8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800afa4:	2302      	movs	r3, #2
 800afa6:	e005      	b.n	800afb4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800afa8:	4804      	ldr	r0, [pc, #16]	@ (800afbc <BSP_SD_Init+0x2c>)
 800afaa:	f7fd f90a 	bl	80081c2 <HAL_SD_Init>
 800afae:	4603      	mov	r3, r0
 800afb0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800afb2:	79fb      	ldrb	r3, [r7, #7]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	20000d04 	.word	0x20000d04

0800afc0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68ba      	ldr	r2, [r7, #8]
 800afd4:	68f9      	ldr	r1, [r7, #12]
 800afd6:	4806      	ldr	r0, [pc, #24]	@ (800aff0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800afd8:	f7fd f9ac 	bl	8008334 <HAL_SD_ReadBlocks_DMA>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800afe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3718      	adds	r7, #24
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	20000d04 	.word	0x20000d04

0800aff4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68ba      	ldr	r2, [r7, #8]
 800b008:	68f9      	ldr	r1, [r7, #12]
 800b00a:	4806      	ldr	r0, [pc, #24]	@ (800b024 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b00c:	f7fd fa74 	bl	80084f8 <HAL_SD_WriteBlocks_DMA>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b01a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3718      	adds	r7, #24
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	20000d04 	.word	0x20000d04

0800b028 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b02c:	4805      	ldr	r0, [pc, #20]	@ (800b044 <BSP_SD_GetCardState+0x1c>)
 800b02e:	f7fd fe99 	bl	8008d64 <HAL_SD_GetCardState>
 800b032:	4603      	mov	r3, r0
 800b034:	2b04      	cmp	r3, #4
 800b036:	bf14      	ite	ne
 800b038:	2301      	movne	r3, #1
 800b03a:	2300      	moveq	r3, #0
 800b03c:	b2db      	uxtb	r3, r3
}
 800b03e:	4618      	mov	r0, r3
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	20000d04 	.word	0x20000d04

0800b048 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b050:	6879      	ldr	r1, [r7, #4]
 800b052:	4803      	ldr	r0, [pc, #12]	@ (800b060 <BSP_SD_GetCardInfo+0x18>)
 800b054:	f7fd fe5a 	bl	8008d0c <HAL_SD_GetCardInfo>
}
 800b058:	bf00      	nop
 800b05a:	3708      	adds	r7, #8
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	20000d04 	.word	0x20000d04

0800b064 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b06c:	f000 f818 	bl	800b0a0 <BSP_SD_AbortCallback>
}
 800b070:	bf00      	nop
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b080:	f000 f9a8 	bl	800b3d4 <BSP_SD_WriteCpltCallback>
}
 800b084:	bf00      	nop
 800b086:	3708      	adds	r7, #8
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b094:	f000 f9aa 	bl	800b3ec <BSP_SD_ReadCpltCallback>
}
 800b098:	bf00      	nop
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	af00      	add	r7, sp, #0

}
 800b0a4:	bf00      	nop
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b082      	sub	sp, #8
 800b0b2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b0b8:	f000 f80c 	bl	800b0d4 <BSP_PlatformIsDetected>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b0c6:	79fb      	ldrb	r3, [r7, #7]
 800b0c8:	b2db      	uxtb	r3, r3
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
	...

0800b0d4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b0de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b0e2:	4806      	ldr	r0, [pc, #24]	@ (800b0fc <BSP_PlatformIsDetected+0x28>)
 800b0e4:	f7fa fb74 	bl	80057d0 <HAL_GPIO_ReadPin>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b0f2:	79fb      	ldrb	r3, [r7, #7]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	40020800 	.word	0x40020800

0800b100 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b108:	f7f9 fa02 	bl	8004510 <HAL_GetTick>
 800b10c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b10e:	e006      	b.n	800b11e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b110:	f7ff ff8a 	bl	800b028 <BSP_SD_GetCardState>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d101      	bne.n	800b11e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	e009      	b.n	800b132 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b11e:	f7f9 f9f7 	bl	8004510 <HAL_GetTick>
 800b122:	4602      	mov	r2, r0
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d8f0      	bhi.n	800b110 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b12e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
	...

0800b13c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	4603      	mov	r3, r0
 800b144:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b146:	4b0b      	ldr	r3, [pc, #44]	@ (800b174 <SD_CheckStatus+0x38>)
 800b148:	2201      	movs	r2, #1
 800b14a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b14c:	f7ff ff6c 	bl	800b028 <BSP_SD_GetCardState>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d107      	bne.n	800b166 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b156:	4b07      	ldr	r3, [pc, #28]	@ (800b174 <SD_CheckStatus+0x38>)
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	f023 0301 	bic.w	r3, r3, #1
 800b160:	b2da      	uxtb	r2, r3
 800b162:	4b04      	ldr	r3, [pc, #16]	@ (800b174 <SD_CheckStatus+0x38>)
 800b164:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b166:	4b03      	ldr	r3, [pc, #12]	@ (800b174 <SD_CheckStatus+0x38>)
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	b2db      	uxtb	r3, r3
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	20000048 	.word	0x20000048

0800b178 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	4603      	mov	r3, r0
 800b180:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b182:	f7ff ff05 	bl	800af90 <BSP_SD_Init>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d107      	bne.n	800b19c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b18c:	79fb      	ldrb	r3, [r7, #7]
 800b18e:	4618      	mov	r0, r3
 800b190:	f7ff ffd4 	bl	800b13c <SD_CheckStatus>
 800b194:	4603      	mov	r3, r0
 800b196:	461a      	mov	r2, r3
 800b198:	4b04      	ldr	r3, [pc, #16]	@ (800b1ac <SD_initialize+0x34>)
 800b19a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b19c:	4b03      	ldr	r3, [pc, #12]	@ (800b1ac <SD_initialize+0x34>)
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	b2db      	uxtb	r3, r3
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	20000048 	.word	0x20000048

0800b1b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b1ba:	79fb      	ldrb	r3, [r7, #7]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7ff ffbd 	bl	800b13c <SD_CheckStatus>
 800b1c2:	4603      	mov	r3, r0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60b9      	str	r1, [r7, #8]
 800b1d4:	607a      	str	r2, [r7, #4]
 800b1d6:	603b      	str	r3, [r7, #0]
 800b1d8:	4603      	mov	r3, r0
 800b1da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b1e0:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b1e4:	f7ff ff8c 	bl	800b100 <SD_CheckStatusWithTimeout>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	da01      	bge.n	800b1f2 <SD_read+0x26>
  {
    return res;
 800b1ee:	7dfb      	ldrb	r3, [r7, #23]
 800b1f0:	e03b      	b.n	800b26a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	6879      	ldr	r1, [r7, #4]
 800b1f6:	68b8      	ldr	r0, [r7, #8]
 800b1f8:	f7ff fee2 	bl	800afc0 <BSP_SD_ReadBlocks_DMA>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d132      	bne.n	800b268 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b202:	4b1c      	ldr	r3, [pc, #112]	@ (800b274 <SD_read+0xa8>)
 800b204:	2200      	movs	r2, #0
 800b206:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b208:	f7f9 f982 	bl	8004510 <HAL_GetTick>
 800b20c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b20e:	bf00      	nop
 800b210:	4b18      	ldr	r3, [pc, #96]	@ (800b274 <SD_read+0xa8>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d108      	bne.n	800b22a <SD_read+0x5e>
 800b218:	f7f9 f97a 	bl	8004510 <HAL_GetTick>
 800b21c:	4602      	mov	r2, r0
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	1ad3      	subs	r3, r2, r3
 800b222:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b226:	4293      	cmp	r3, r2
 800b228:	d9f2      	bls.n	800b210 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b22a:	4b12      	ldr	r3, [pc, #72]	@ (800b274 <SD_read+0xa8>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d102      	bne.n	800b238 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b232:	2301      	movs	r3, #1
 800b234:	75fb      	strb	r3, [r7, #23]
 800b236:	e017      	b.n	800b268 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b238:	4b0e      	ldr	r3, [pc, #56]	@ (800b274 <SD_read+0xa8>)
 800b23a:	2200      	movs	r2, #0
 800b23c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b23e:	f7f9 f967 	bl	8004510 <HAL_GetTick>
 800b242:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b244:	e007      	b.n	800b256 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b246:	f7ff feef 	bl	800b028 <BSP_SD_GetCardState>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d102      	bne.n	800b256 <SD_read+0x8a>
          {
            res = RES_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b254:	e008      	b.n	800b268 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b256:	f7f9 f95b 	bl	8004510 <HAL_GetTick>
 800b25a:	4602      	mov	r2, r0
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	1ad3      	subs	r3, r2, r3
 800b260:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b264:	4293      	cmp	r3, r2
 800b266:	d9ee      	bls.n	800b246 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b268:	7dfb      	ldrb	r3, [r7, #23]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20005dd4 	.word	0x20005dd4

0800b278 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60b9      	str	r1, [r7, #8]
 800b280:	607a      	str	r2, [r7, #4]
 800b282:	603b      	str	r3, [r7, #0]
 800b284:	4603      	mov	r3, r0
 800b286:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b288:	2301      	movs	r3, #1
 800b28a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b28c:	4b24      	ldr	r3, [pc, #144]	@ (800b320 <SD_write+0xa8>)
 800b28e:	2200      	movs	r2, #0
 800b290:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b292:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b296:	f7ff ff33 	bl	800b100 <SD_CheckStatusWithTimeout>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	da01      	bge.n	800b2a4 <SD_write+0x2c>
  {
    return res;
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
 800b2a2:	e038      	b.n	800b316 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	6879      	ldr	r1, [r7, #4]
 800b2a8:	68b8      	ldr	r0, [r7, #8]
 800b2aa:	f7ff fea3 	bl	800aff4 <BSP_SD_WriteBlocks_DMA>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d12f      	bne.n	800b314 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b2b4:	f7f9 f92c 	bl	8004510 <HAL_GetTick>
 800b2b8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b2ba:	bf00      	nop
 800b2bc:	4b18      	ldr	r3, [pc, #96]	@ (800b320 <SD_write+0xa8>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d108      	bne.n	800b2d6 <SD_write+0x5e>
 800b2c4:	f7f9 f924 	bl	8004510 <HAL_GetTick>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	1ad3      	subs	r3, r2, r3
 800b2ce:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d9f2      	bls.n	800b2bc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b2d6:	4b12      	ldr	r3, [pc, #72]	@ (800b320 <SD_write+0xa8>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d102      	bne.n	800b2e4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	75fb      	strb	r3, [r7, #23]
 800b2e2:	e017      	b.n	800b314 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b2e4:	4b0e      	ldr	r3, [pc, #56]	@ (800b320 <SD_write+0xa8>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b2ea:	f7f9 f911 	bl	8004510 <HAL_GetTick>
 800b2ee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b2f0:	e007      	b.n	800b302 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b2f2:	f7ff fe99 	bl	800b028 <BSP_SD_GetCardState>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d102      	bne.n	800b302 <SD_write+0x8a>
          {
            res = RES_OK;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	75fb      	strb	r3, [r7, #23]
            break;
 800b300:	e008      	b.n	800b314 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b302:	f7f9 f905 	bl	8004510 <HAL_GetTick>
 800b306:	4602      	mov	r2, r0
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b310:	4293      	cmp	r3, r2
 800b312:	d9ee      	bls.n	800b2f2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b314:	7dfb      	ldrb	r3, [r7, #23]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3718      	adds	r7, #24
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	20005dd0 	.word	0x20005dd0

0800b324 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b08c      	sub	sp, #48	@ 0x30
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4603      	mov	r3, r0
 800b32c:	603a      	str	r2, [r7, #0]
 800b32e:	71fb      	strb	r3, [r7, #7]
 800b330:	460b      	mov	r3, r1
 800b332:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b33a:	4b25      	ldr	r3, [pc, #148]	@ (800b3d0 <SD_ioctl+0xac>)
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	f003 0301 	and.w	r3, r3, #1
 800b344:	2b00      	cmp	r3, #0
 800b346:	d001      	beq.n	800b34c <SD_ioctl+0x28>
 800b348:	2303      	movs	r3, #3
 800b34a:	e03c      	b.n	800b3c6 <SD_ioctl+0xa2>

  switch (cmd)
 800b34c:	79bb      	ldrb	r3, [r7, #6]
 800b34e:	2b03      	cmp	r3, #3
 800b350:	d834      	bhi.n	800b3bc <SD_ioctl+0x98>
 800b352:	a201      	add	r2, pc, #4	@ (adr r2, 800b358 <SD_ioctl+0x34>)
 800b354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b358:	0800b369 	.word	0x0800b369
 800b35c:	0800b371 	.word	0x0800b371
 800b360:	0800b389 	.word	0x0800b389
 800b364:	0800b3a3 	.word	0x0800b3a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b368:	2300      	movs	r3, #0
 800b36a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b36e:	e028      	b.n	800b3c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b370:	f107 030c 	add.w	r3, r7, #12
 800b374:	4618      	mov	r0, r3
 800b376:	f7ff fe67 	bl	800b048 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b37a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b380:	2300      	movs	r3, #0
 800b382:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b386:	e01c      	b.n	800b3c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b388:	f107 030c 	add.w	r3, r7, #12
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7ff fe5b 	bl	800b048 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b394:	b29a      	uxth	r2, r3
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b3a0:	e00f      	b.n	800b3c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b3a2:	f107 030c 	add.w	r3, r7, #12
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7ff fe4e 	bl	800b048 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ae:	0a5a      	lsrs	r2, r3, #9
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b3ba:	e002      	b.n	800b3c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b3bc:	2304      	movs	r3, #4
 800b3be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b3c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3730      	adds	r7, #48	@ 0x30
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20000048 	.word	0x20000048

0800b3d4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b3d8:	4b03      	ldr	r3, [pc, #12]	@ (800b3e8 <BSP_SD_WriteCpltCallback+0x14>)
 800b3da:	2201      	movs	r2, #1
 800b3dc:	601a      	str	r2, [r3, #0]
}
 800b3de:	bf00      	nop
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	20005dd0 	.word	0x20005dd0

0800b3ec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b3f0:	4b03      	ldr	r3, [pc, #12]	@ (800b400 <BSP_SD_ReadCpltCallback+0x14>)
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	601a      	str	r2, [r3, #0]
}
 800b3f6:	bf00      	nop
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr
 800b400:	20005dd4 	.word	0x20005dd4

0800b404 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	4603      	mov	r3, r0
 800b40c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b40e:	79fb      	ldrb	r3, [r7, #7]
 800b410:	4a08      	ldr	r2, [pc, #32]	@ (800b434 <disk_status+0x30>)
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	79fa      	ldrb	r2, [r7, #7]
 800b41c:	4905      	ldr	r1, [pc, #20]	@ (800b434 <disk_status+0x30>)
 800b41e:	440a      	add	r2, r1
 800b420:	7a12      	ldrb	r2, [r2, #8]
 800b422:	4610      	mov	r0, r2
 800b424:	4798      	blx	r3
 800b426:	4603      	mov	r3, r0
 800b428:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	20005e00 	.word	0x20005e00

0800b438 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	4603      	mov	r3, r0
 800b440:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b446:	79fb      	ldrb	r3, [r7, #7]
 800b448:	4a0d      	ldr	r2, [pc, #52]	@ (800b480 <disk_initialize+0x48>)
 800b44a:	5cd3      	ldrb	r3, [r2, r3]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d111      	bne.n	800b474 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b450:	79fb      	ldrb	r3, [r7, #7]
 800b452:	4a0b      	ldr	r2, [pc, #44]	@ (800b480 <disk_initialize+0x48>)
 800b454:	2101      	movs	r1, #1
 800b456:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b458:	79fb      	ldrb	r3, [r7, #7]
 800b45a:	4a09      	ldr	r2, [pc, #36]	@ (800b480 <disk_initialize+0x48>)
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	4413      	add	r3, r2
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	79fa      	ldrb	r2, [r7, #7]
 800b466:	4906      	ldr	r1, [pc, #24]	@ (800b480 <disk_initialize+0x48>)
 800b468:	440a      	add	r2, r1
 800b46a:	7a12      	ldrb	r2, [r2, #8]
 800b46c:	4610      	mov	r0, r2
 800b46e:	4798      	blx	r3
 800b470:	4603      	mov	r3, r0
 800b472:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b474:	7bfb      	ldrb	r3, [r7, #15]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20005e00 	.word	0x20005e00

0800b484 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b484:	b590      	push	{r4, r7, lr}
 800b486:	b087      	sub	sp, #28
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60b9      	str	r1, [r7, #8]
 800b48c:	607a      	str	r2, [r7, #4]
 800b48e:	603b      	str	r3, [r7, #0]
 800b490:	4603      	mov	r3, r0
 800b492:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b494:	7bfb      	ldrb	r3, [r7, #15]
 800b496:	4a0a      	ldr	r2, [pc, #40]	@ (800b4c0 <disk_read+0x3c>)
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	4413      	add	r3, r2
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	689c      	ldr	r4, [r3, #8]
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
 800b4a2:	4a07      	ldr	r2, [pc, #28]	@ (800b4c0 <disk_read+0x3c>)
 800b4a4:	4413      	add	r3, r2
 800b4a6:	7a18      	ldrb	r0, [r3, #8]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	68b9      	ldr	r1, [r7, #8]
 800b4ae:	47a0      	blx	r4
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b4b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	371c      	adds	r7, #28
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd90      	pop	{r4, r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	20005e00 	.word	0x20005e00

0800b4c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b4c4:	b590      	push	{r4, r7, lr}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60b9      	str	r1, [r7, #8]
 800b4cc:	607a      	str	r2, [r7, #4]
 800b4ce:	603b      	str	r3, [r7, #0]
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b4d4:	7bfb      	ldrb	r3, [r7, #15]
 800b4d6:	4a0a      	ldr	r2, [pc, #40]	@ (800b500 <disk_write+0x3c>)
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	4413      	add	r3, r2
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	68dc      	ldr	r4, [r3, #12]
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
 800b4e2:	4a07      	ldr	r2, [pc, #28]	@ (800b500 <disk_write+0x3c>)
 800b4e4:	4413      	add	r3, r2
 800b4e6:	7a18      	ldrb	r0, [r3, #8]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	68b9      	ldr	r1, [r7, #8]
 800b4ee:	47a0      	blx	r4
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	371c      	adds	r7, #28
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd90      	pop	{r4, r7, pc}
 800b4fe:	bf00      	nop
 800b500:	20005e00 	.word	0x20005e00

0800b504 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	4603      	mov	r3, r0
 800b50c:	603a      	str	r2, [r7, #0]
 800b50e:	71fb      	strb	r3, [r7, #7]
 800b510:	460b      	mov	r3, r1
 800b512:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b514:	79fb      	ldrb	r3, [r7, #7]
 800b516:	4a09      	ldr	r2, [pc, #36]	@ (800b53c <disk_ioctl+0x38>)
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	4413      	add	r3, r2
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	691b      	ldr	r3, [r3, #16]
 800b520:	79fa      	ldrb	r2, [r7, #7]
 800b522:	4906      	ldr	r1, [pc, #24]	@ (800b53c <disk_ioctl+0x38>)
 800b524:	440a      	add	r2, r1
 800b526:	7a10      	ldrb	r0, [r2, #8]
 800b528:	79b9      	ldrb	r1, [r7, #6]
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	4798      	blx	r3
 800b52e:	4603      	mov	r3, r0
 800b530:	73fb      	strb	r3, [r7, #15]
  return res;
 800b532:	7bfb      	ldrb	r3, [r7, #15]
}
 800b534:	4618      	mov	r0, r3
 800b536:	3710      	adds	r7, #16
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	20005e00 	.word	0x20005e00

0800b540 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	3301      	adds	r3, #1
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b550:	89fb      	ldrh	r3, [r7, #14]
 800b552:	021b      	lsls	r3, r3, #8
 800b554:	b21a      	sxth	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	b21b      	sxth	r3, r3
 800b55c:	4313      	orrs	r3, r2
 800b55e:	b21b      	sxth	r3, r3
 800b560:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b562:	89fb      	ldrh	r3, [r7, #14]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b570:	b480      	push	{r7}
 800b572:	b085      	sub	sp, #20
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3303      	adds	r3, #3
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	021b      	lsls	r3, r3, #8
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	3202      	adds	r2, #2
 800b588:	7812      	ldrb	r2, [r2, #0]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	021b      	lsls	r3, r3, #8
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	3201      	adds	r2, #1
 800b596:	7812      	ldrb	r2, [r2, #0]
 800b598:	4313      	orrs	r3, r2
 800b59a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	021b      	lsls	r3, r3, #8
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	7812      	ldrb	r2, [r2, #0]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	60fb      	str	r3, [r7, #12]
	return rv;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3714      	adds	r7, #20
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b083      	sub	sp, #12
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	460b      	mov	r3, r1
 800b5c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	1c5a      	adds	r2, r3, #1
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	887a      	ldrh	r2, [r7, #2]
 800b5ca:	b2d2      	uxtb	r2, r2
 800b5cc:	701a      	strb	r2, [r3, #0]
 800b5ce:	887b      	ldrh	r3, [r7, #2]
 800b5d0:	0a1b      	lsrs	r3, r3, #8
 800b5d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	1c5a      	adds	r2, r3, #1
 800b5d8:	607a      	str	r2, [r7, #4]
 800b5da:	887a      	ldrh	r2, [r7, #2]
 800b5dc:	b2d2      	uxtb	r2, r2
 800b5de:	701a      	strb	r2, [r3, #0]
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	1c5a      	adds	r2, r3, #1
 800b5fa:	607a      	str	r2, [r7, #4]
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	b2d2      	uxtb	r2, r2
 800b600:	701a      	strb	r2, [r3, #0]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	0a1b      	lsrs	r3, r3, #8
 800b606:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	1c5a      	adds	r2, r3, #1
 800b60c:	607a      	str	r2, [r7, #4]
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	b2d2      	uxtb	r2, r2
 800b612:	701a      	strb	r2, [r3, #0]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	0a1b      	lsrs	r3, r3, #8
 800b618:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	1c5a      	adds	r2, r3, #1
 800b61e:	607a      	str	r2, [r7, #4]
 800b620:	683a      	ldr	r2, [r7, #0]
 800b622:	b2d2      	uxtb	r2, r2
 800b624:	701a      	strb	r2, [r3, #0]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	0a1b      	lsrs	r3, r3, #8
 800b62a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	1c5a      	adds	r2, r3, #1
 800b630:	607a      	str	r2, [r7, #4]
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	b2d2      	uxtb	r2, r2
 800b636:	701a      	strb	r2, [r3, #0]
}
 800b638:	bf00      	nop
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b644:	b480      	push	{r7}
 800b646:	b087      	sub	sp, #28
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d00d      	beq.n	800b67a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b65e:	693a      	ldr	r2, [r7, #16]
 800b660:	1c53      	adds	r3, r2, #1
 800b662:	613b      	str	r3, [r7, #16]
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	1c59      	adds	r1, r3, #1
 800b668:	6179      	str	r1, [r7, #20]
 800b66a:	7812      	ldrb	r2, [r2, #0]
 800b66c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	3b01      	subs	r3, #1
 800b672:	607b      	str	r3, [r7, #4]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1f1      	bne.n	800b65e <mem_cpy+0x1a>
	}
}
 800b67a:	bf00      	nop
 800b67c:	371c      	adds	r7, #28
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b686:	b480      	push	{r7}
 800b688:	b087      	sub	sp, #28
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	60f8      	str	r0, [r7, #12]
 800b68e:	60b9      	str	r1, [r7, #8]
 800b690:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	1c5a      	adds	r2, r3, #1
 800b69a:	617a      	str	r2, [r7, #20]
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	b2d2      	uxtb	r2, r2
 800b6a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	607b      	str	r3, [r7, #4]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1f3      	bne.n	800b696 <mem_set+0x10>
}
 800b6ae:	bf00      	nop
 800b6b0:	bf00      	nop
 800b6b2:	371c      	adds	r7, #28
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b6bc:	b480      	push	{r7}
 800b6be:	b089      	sub	sp, #36	@ 0x24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	61fb      	str	r3, [r7, #28]
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	1c5a      	adds	r2, r3, #1
 800b6d8:	61fa      	str	r2, [r7, #28]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	4619      	mov	r1, r3
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	1c5a      	adds	r2, r3, #1
 800b6e2:	61ba      	str	r2, [r7, #24]
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	1acb      	subs	r3, r1, r3
 800b6e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	607b      	str	r3, [r7, #4]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d002      	beq.n	800b6fc <mem_cmp+0x40>
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d0eb      	beq.n	800b6d4 <mem_cmp+0x18>

	return r;
 800b6fc:	697b      	ldr	r3, [r7, #20]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3724      	adds	r7, #36	@ 0x24
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b70a:	b480      	push	{r7}
 800b70c:	b083      	sub	sp, #12
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b714:	e002      	b.n	800b71c <chk_chr+0x12>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	3301      	adds	r3, #1
 800b71a:	607b      	str	r3, [r7, #4]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d005      	beq.n	800b730 <chk_chr+0x26>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	461a      	mov	r2, r3
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d1f2      	bne.n	800b716 <chk_chr+0xc>
	return *str;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	781b      	ldrb	r3, [r3, #0]
}
 800b734:	4618      	mov	r0, r3
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b74a:	2300      	movs	r3, #0
 800b74c:	60bb      	str	r3, [r7, #8]
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	60fb      	str	r3, [r7, #12]
 800b752:	e029      	b.n	800b7a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b754:	4a27      	ldr	r2, [pc, #156]	@ (800b7f4 <chk_lock+0xb4>)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	011b      	lsls	r3, r3, #4
 800b75a:	4413      	add	r3, r2
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d01d      	beq.n	800b79e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b762:	4a24      	ldr	r2, [pc, #144]	@ (800b7f4 <chk_lock+0xb4>)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	011b      	lsls	r3, r3, #4
 800b768:	4413      	add	r3, r2
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	429a      	cmp	r2, r3
 800b772:	d116      	bne.n	800b7a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b774:	4a1f      	ldr	r2, [pc, #124]	@ (800b7f4 <chk_lock+0xb4>)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	011b      	lsls	r3, r3, #4
 800b77a:	4413      	add	r3, r2
 800b77c:	3304      	adds	r3, #4
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b784:	429a      	cmp	r2, r3
 800b786:	d10c      	bne.n	800b7a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b788:	4a1a      	ldr	r2, [pc, #104]	@ (800b7f4 <chk_lock+0xb4>)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	011b      	lsls	r3, r3, #4
 800b78e:	4413      	add	r3, r2
 800b790:	3308      	adds	r3, #8
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b798:	429a      	cmp	r2, r3
 800b79a:	d102      	bne.n	800b7a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b79c:	e007      	b.n	800b7ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d9d2      	bls.n	800b754 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d109      	bne.n	800b7c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d102      	bne.n	800b7c0 <chk_lock+0x80>
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d101      	bne.n	800b7c4 <chk_lock+0x84>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	e010      	b.n	800b7e6 <chk_lock+0xa6>
 800b7c4:	2312      	movs	r3, #18
 800b7c6:	e00e      	b.n	800b7e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d108      	bne.n	800b7e0 <chk_lock+0xa0>
 800b7ce:	4a09      	ldr	r2, [pc, #36]	@ (800b7f4 <chk_lock+0xb4>)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	011b      	lsls	r3, r3, #4
 800b7d4:	4413      	add	r3, r2
 800b7d6:	330c      	adds	r3, #12
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7de:	d101      	bne.n	800b7e4 <chk_lock+0xa4>
 800b7e0:	2310      	movs	r3, #16
 800b7e2:	e000      	b.n	800b7e6 <chk_lock+0xa6>
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3714      	adds	r7, #20
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	20005de0 	.word	0x20005de0

0800b7f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b7fe:	2300      	movs	r3, #0
 800b800:	607b      	str	r3, [r7, #4]
 800b802:	e002      	b.n	800b80a <enq_lock+0x12>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	3301      	adds	r3, #1
 800b808:	607b      	str	r3, [r7, #4]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d806      	bhi.n	800b81e <enq_lock+0x26>
 800b810:	4a09      	ldr	r2, [pc, #36]	@ (800b838 <enq_lock+0x40>)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	011b      	lsls	r3, r3, #4
 800b816:	4413      	add	r3, r2
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1f2      	bne.n	800b804 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2b02      	cmp	r3, #2
 800b822:	bf14      	ite	ne
 800b824:	2301      	movne	r3, #1
 800b826:	2300      	moveq	r3, #0
 800b828:	b2db      	uxtb	r3, r3
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop
 800b838:	20005de0 	.word	0x20005de0

0800b83c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b846:	2300      	movs	r3, #0
 800b848:	60fb      	str	r3, [r7, #12]
 800b84a:	e01f      	b.n	800b88c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b84c:	4a41      	ldr	r2, [pc, #260]	@ (800b954 <inc_lock+0x118>)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	011b      	lsls	r3, r3, #4
 800b852:	4413      	add	r3, r2
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d113      	bne.n	800b886 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b85e:	4a3d      	ldr	r2, [pc, #244]	@ (800b954 <inc_lock+0x118>)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	011b      	lsls	r3, r3, #4
 800b864:	4413      	add	r3, r2
 800b866:	3304      	adds	r3, #4
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b86e:	429a      	cmp	r2, r3
 800b870:	d109      	bne.n	800b886 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b872:	4a38      	ldr	r2, [pc, #224]	@ (800b954 <inc_lock+0x118>)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	011b      	lsls	r3, r3, #4
 800b878:	4413      	add	r3, r2
 800b87a:	3308      	adds	r3, #8
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b882:	429a      	cmp	r2, r3
 800b884:	d006      	beq.n	800b894 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	3301      	adds	r3, #1
 800b88a:	60fb      	str	r3, [r7, #12]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d9dc      	bls.n	800b84c <inc_lock+0x10>
 800b892:	e000      	b.n	800b896 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b894:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d132      	bne.n	800b902 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b89c:	2300      	movs	r3, #0
 800b89e:	60fb      	str	r3, [r7, #12]
 800b8a0:	e002      	b.n	800b8a8 <inc_lock+0x6c>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	60fb      	str	r3, [r7, #12]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d806      	bhi.n	800b8bc <inc_lock+0x80>
 800b8ae:	4a29      	ldr	r2, [pc, #164]	@ (800b954 <inc_lock+0x118>)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	011b      	lsls	r3, r3, #4
 800b8b4:	4413      	add	r3, r2
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1f2      	bne.n	800b8a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2b02      	cmp	r3, #2
 800b8c0:	d101      	bne.n	800b8c6 <inc_lock+0x8a>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	e040      	b.n	800b948 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	4922      	ldr	r1, [pc, #136]	@ (800b954 <inc_lock+0x118>)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	011b      	lsls	r3, r3, #4
 800b8d0:	440b      	add	r3, r1
 800b8d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	689a      	ldr	r2, [r3, #8]
 800b8d8:	491e      	ldr	r1, [pc, #120]	@ (800b954 <inc_lock+0x118>)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	011b      	lsls	r3, r3, #4
 800b8de:	440b      	add	r3, r1
 800b8e0:	3304      	adds	r3, #4
 800b8e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	695a      	ldr	r2, [r3, #20]
 800b8e8:	491a      	ldr	r1, [pc, #104]	@ (800b954 <inc_lock+0x118>)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	011b      	lsls	r3, r3, #4
 800b8ee:	440b      	add	r3, r1
 800b8f0:	3308      	adds	r3, #8
 800b8f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b8f4:	4a17      	ldr	r2, [pc, #92]	@ (800b954 <inc_lock+0x118>)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	011b      	lsls	r3, r3, #4
 800b8fa:	4413      	add	r3, r2
 800b8fc:	330c      	adds	r3, #12
 800b8fe:	2200      	movs	r2, #0
 800b900:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d009      	beq.n	800b91c <inc_lock+0xe0>
 800b908:	4a12      	ldr	r2, [pc, #72]	@ (800b954 <inc_lock+0x118>)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	011b      	lsls	r3, r3, #4
 800b90e:	4413      	add	r3, r2
 800b910:	330c      	adds	r3, #12
 800b912:	881b      	ldrh	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d001      	beq.n	800b91c <inc_lock+0xe0>
 800b918:	2300      	movs	r3, #0
 800b91a:	e015      	b.n	800b948 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d108      	bne.n	800b934 <inc_lock+0xf8>
 800b922:	4a0c      	ldr	r2, [pc, #48]	@ (800b954 <inc_lock+0x118>)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	011b      	lsls	r3, r3, #4
 800b928:	4413      	add	r3, r2
 800b92a:	330c      	adds	r3, #12
 800b92c:	881b      	ldrh	r3, [r3, #0]
 800b92e:	3301      	adds	r3, #1
 800b930:	b29a      	uxth	r2, r3
 800b932:	e001      	b.n	800b938 <inc_lock+0xfc>
 800b934:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b938:	4906      	ldr	r1, [pc, #24]	@ (800b954 <inc_lock+0x118>)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	011b      	lsls	r3, r3, #4
 800b93e:	440b      	add	r3, r1
 800b940:	330c      	adds	r3, #12
 800b942:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	3301      	adds	r3, #1
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr
 800b954:	20005de0 	.word	0x20005de0

0800b958 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	3b01      	subs	r3, #1
 800b964:	607b      	str	r3, [r7, #4]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d825      	bhi.n	800b9b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800b96c:	4a17      	ldr	r2, [pc, #92]	@ (800b9cc <dec_lock+0x74>)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	011b      	lsls	r3, r3, #4
 800b972:	4413      	add	r3, r2
 800b974:	330c      	adds	r3, #12
 800b976:	881b      	ldrh	r3, [r3, #0]
 800b978:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b97a:	89fb      	ldrh	r3, [r7, #14]
 800b97c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b980:	d101      	bne.n	800b986 <dec_lock+0x2e>
 800b982:	2300      	movs	r3, #0
 800b984:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b986:	89fb      	ldrh	r3, [r7, #14]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <dec_lock+0x3a>
 800b98c:	89fb      	ldrh	r3, [r7, #14]
 800b98e:	3b01      	subs	r3, #1
 800b990:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b992:	4a0e      	ldr	r2, [pc, #56]	@ (800b9cc <dec_lock+0x74>)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	011b      	lsls	r3, r3, #4
 800b998:	4413      	add	r3, r2
 800b99a:	330c      	adds	r3, #12
 800b99c:	89fa      	ldrh	r2, [r7, #14]
 800b99e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b9a0:	89fb      	ldrh	r3, [r7, #14]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d105      	bne.n	800b9b2 <dec_lock+0x5a>
 800b9a6:	4a09      	ldr	r2, [pc, #36]	@ (800b9cc <dec_lock+0x74>)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	011b      	lsls	r3, r3, #4
 800b9ac:	4413      	add	r3, r2
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	737b      	strb	r3, [r7, #13]
 800b9b6:	e001      	b.n	800b9bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b9bc:	7b7b      	ldrb	r3, [r7, #13]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	20005de0 	.word	0x20005de0

0800b9d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b9d8:	2300      	movs	r3, #0
 800b9da:	60fb      	str	r3, [r7, #12]
 800b9dc:	e010      	b.n	800ba00 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b9de:	4a0d      	ldr	r2, [pc, #52]	@ (800ba14 <clear_lock+0x44>)
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	011b      	lsls	r3, r3, #4
 800b9e4:	4413      	add	r3, r2
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d105      	bne.n	800b9fa <clear_lock+0x2a>
 800b9ee:	4a09      	ldr	r2, [pc, #36]	@ (800ba14 <clear_lock+0x44>)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	011b      	lsls	r3, r3, #4
 800b9f4:	4413      	add	r3, r2
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d9eb      	bls.n	800b9de <clear_lock+0xe>
	}
}
 800ba06:	bf00      	nop
 800ba08:	bf00      	nop
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	20005de0 	.word	0x20005de0

0800ba18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b086      	sub	sp, #24
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ba20:	2300      	movs	r3, #0
 800ba22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	78db      	ldrb	r3, [r3, #3]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d034      	beq.n	800ba96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	7858      	ldrb	r0, [r3, #1]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	f7ff fd40 	bl	800b4c4 <disk_write>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d002      	beq.n	800ba50 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	73fb      	strb	r3, [r7, #15]
 800ba4e:	e022      	b.n	800ba96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a1b      	ldr	r3, [r3, #32]
 800ba5a:	697a      	ldr	r2, [r7, #20]
 800ba5c:	1ad2      	subs	r2, r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	699b      	ldr	r3, [r3, #24]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d217      	bcs.n	800ba96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	789b      	ldrb	r3, [r3, #2]
 800ba6a:	613b      	str	r3, [r7, #16]
 800ba6c:	e010      	b.n	800ba90 <sync_window+0x78>
					wsect += fs->fsize;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	699b      	ldr	r3, [r3, #24]
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	4413      	add	r3, r2
 800ba76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	7858      	ldrb	r0, [r3, #1]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ba82:	2301      	movs	r3, #1
 800ba84:	697a      	ldr	r2, [r7, #20]
 800ba86:	f7ff fd1d 	bl	800b4c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	613b      	str	r3, [r7, #16]
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d8eb      	bhi.n	800ba6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3718      	adds	r7, #24
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab2:	683a      	ldr	r2, [r7, #0]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d01b      	beq.n	800baf0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f7ff ffad 	bl	800ba18 <sync_window>
 800babe:	4603      	mov	r3, r0
 800bac0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bac2:	7bfb      	ldrb	r3, [r7, #15]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d113      	bne.n	800baf0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	7858      	ldrb	r0, [r3, #1]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bad2:	2301      	movs	r3, #1
 800bad4:	683a      	ldr	r2, [r7, #0]
 800bad6:	f7ff fcd5 	bl	800b484 <disk_read>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d004      	beq.n	800baea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bae0:	f04f 33ff 	mov.w	r3, #4294967295
 800bae4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	683a      	ldr	r2, [r7, #0]
 800baee:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
	...

0800bafc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f7ff ff87 	bl	800ba18 <sync_window>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d158      	bne.n	800bbc6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	2b03      	cmp	r3, #3
 800bb1a:	d148      	bne.n	800bbae <sync_fs+0xb2>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	791b      	ldrb	r3, [r3, #4]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d144      	bne.n	800bbae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	3330      	adds	r3, #48	@ 0x30
 800bb28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7ff fda9 	bl	800b686 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	3330      	adds	r3, #48	@ 0x30
 800bb38:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bb3c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7ff fd38 	bl	800b5b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	3330      	adds	r3, #48	@ 0x30
 800bb4a:	4921      	ldr	r1, [pc, #132]	@ (800bbd0 <sync_fs+0xd4>)
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7ff fd4d 	bl	800b5ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	3330      	adds	r3, #48	@ 0x30
 800bb56:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bb5a:	491e      	ldr	r1, [pc, #120]	@ (800bbd4 <sync_fs+0xd8>)
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7ff fd45 	bl	800b5ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	3330      	adds	r3, #48	@ 0x30
 800bb66:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	691b      	ldr	r3, [r3, #16]
 800bb6e:	4619      	mov	r1, r3
 800bb70:	4610      	mov	r0, r2
 800bb72:	f7ff fd3b 	bl	800b5ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	3330      	adds	r3, #48	@ 0x30
 800bb7a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	4619      	mov	r1, r3
 800bb84:	4610      	mov	r0, r2
 800bb86:	f7ff fd31 	bl	800b5ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	69db      	ldr	r3, [r3, #28]
 800bb8e:	1c5a      	adds	r2, r3, #1
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	7858      	ldrb	r0, [r3, #1]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bba2:	2301      	movs	r3, #1
 800bba4:	f7ff fc8e 	bl	800b4c4 <disk_write>
			fs->fsi_flag = 0;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	785b      	ldrb	r3, [r3, #1]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7ff fca4 	bl	800b504 <disk_ioctl>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <sync_fs+0xca>
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	41615252 	.word	0x41615252
 800bbd4:	61417272 	.word	0x61417272

0800bbd8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	3b02      	subs	r3, #2
 800bbe6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	695b      	ldr	r3, [r3, #20]
 800bbec:	3b02      	subs	r3, #2
 800bbee:	683a      	ldr	r2, [r7, #0]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d301      	bcc.n	800bbf8 <clust2sect+0x20>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e008      	b.n	800bc0a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	895b      	ldrh	r3, [r3, #10]
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	fb03 f202 	mul.w	r2, r3, r2
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc08:	4413      	add	r3, r2
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr

0800bc16 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b086      	sub	sp, #24
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
 800bc1e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d904      	bls.n	800bc36 <get_fat+0x20>
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	695b      	ldr	r3, [r3, #20]
 800bc30:	683a      	ldr	r2, [r7, #0]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d302      	bcc.n	800bc3c <get_fat+0x26>
		val = 1;	/* Internal error */
 800bc36:	2301      	movs	r3, #1
 800bc38:	617b      	str	r3, [r7, #20]
 800bc3a:	e08e      	b.n	800bd5a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bc3c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc40:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	2b03      	cmp	r3, #3
 800bc48:	d061      	beq.n	800bd0e <get_fat+0xf8>
 800bc4a:	2b03      	cmp	r3, #3
 800bc4c:	dc7b      	bgt.n	800bd46 <get_fat+0x130>
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d002      	beq.n	800bc58 <get_fat+0x42>
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d041      	beq.n	800bcda <get_fat+0xc4>
 800bc56:	e076      	b.n	800bd46 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	60fb      	str	r3, [r7, #12]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	085b      	lsrs	r3, r3, #1
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	4413      	add	r3, r2
 800bc64:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	6a1a      	ldr	r2, [r3, #32]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	0a5b      	lsrs	r3, r3, #9
 800bc6e:	4413      	add	r3, r2
 800bc70:	4619      	mov	r1, r3
 800bc72:	6938      	ldr	r0, [r7, #16]
 800bc74:	f7ff ff14 	bl	800baa0 <move_window>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d166      	bne.n	800bd4c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	1c5a      	adds	r2, r3, #1
 800bc82:	60fa      	str	r2, [r7, #12]
 800bc84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc88:	693a      	ldr	r2, [r7, #16]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bc90:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	6a1a      	ldr	r2, [r3, #32]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	0a5b      	lsrs	r3, r3, #9
 800bc9a:	4413      	add	r3, r2
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	6938      	ldr	r0, [r7, #16]
 800bca0:	f7ff fefe 	bl	800baa0 <move_window>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d152      	bne.n	800bd50 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bcb8:	021b      	lsls	r3, r3, #8
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	f003 0301 	and.w	r3, r3, #1
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d002      	beq.n	800bcd0 <get_fat+0xba>
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	091b      	lsrs	r3, r3, #4
 800bcce:	e002      	b.n	800bcd6 <get_fat+0xc0>
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcd6:	617b      	str	r3, [r7, #20]
			break;
 800bcd8:	e03f      	b.n	800bd5a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	6a1a      	ldr	r2, [r3, #32]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	0a1b      	lsrs	r3, r3, #8
 800bce2:	4413      	add	r3, r2
 800bce4:	4619      	mov	r1, r3
 800bce6:	6938      	ldr	r0, [r7, #16]
 800bce8:	f7ff feda 	bl	800baa0 <move_window>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d130      	bne.n	800bd54 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	005b      	lsls	r3, r3, #1
 800bcfc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bd00:	4413      	add	r3, r2
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7ff fc1c 	bl	800b540 <ld_word>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	617b      	str	r3, [r7, #20]
			break;
 800bd0c:	e025      	b.n	800bd5a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	6a1a      	ldr	r2, [r3, #32]
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	09db      	lsrs	r3, r3, #7
 800bd16:	4413      	add	r3, r2
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6938      	ldr	r0, [r7, #16]
 800bd1c:	f7ff fec0 	bl	800baa0 <move_window>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d118      	bne.n	800bd58 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bd34:	4413      	add	r3, r2
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7ff fc1a 	bl	800b570 <ld_dword>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bd42:	617b      	str	r3, [r7, #20]
			break;
 800bd44:	e009      	b.n	800bd5a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bd46:	2301      	movs	r3, #1
 800bd48:	617b      	str	r3, [r7, #20]
 800bd4a:	e006      	b.n	800bd5a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd4c:	bf00      	nop
 800bd4e:	e004      	b.n	800bd5a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd50:	bf00      	nop
 800bd52:	e002      	b.n	800bd5a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd54:	bf00      	nop
 800bd56:	e000      	b.n	800bd5a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd58:	bf00      	nop
		}
	}

	return val;
 800bd5a:	697b      	ldr	r3, [r7, #20]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3718      	adds	r7, #24
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bd64:	b590      	push	{r4, r7, lr}
 800bd66:	b089      	sub	sp, #36	@ 0x24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bd70:	2302      	movs	r3, #2
 800bd72:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	f240 80d9 	bls.w	800bf2e <put_fat+0x1ca>
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	695b      	ldr	r3, [r3, #20]
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	f080 80d3 	bcs.w	800bf2e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	2b03      	cmp	r3, #3
 800bd8e:	f000 8096 	beq.w	800bebe <put_fat+0x15a>
 800bd92:	2b03      	cmp	r3, #3
 800bd94:	f300 80cb 	bgt.w	800bf2e <put_fat+0x1ca>
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d002      	beq.n	800bda2 <put_fat+0x3e>
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d06e      	beq.n	800be7e <put_fat+0x11a>
 800bda0:	e0c5      	b.n	800bf2e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	61bb      	str	r3, [r7, #24]
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	085b      	lsrs	r3, r3, #1
 800bdaa:	69ba      	ldr	r2, [r7, #24]
 800bdac:	4413      	add	r3, r2
 800bdae:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6a1a      	ldr	r2, [r3, #32]
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	0a5b      	lsrs	r3, r3, #9
 800bdb8:	4413      	add	r3, r2
 800bdba:	4619      	mov	r1, r3
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f7ff fe6f 	bl	800baa0 <move_window>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bdc6:	7ffb      	ldrb	r3, [r7, #31]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f040 80a9 	bne.w	800bf20 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	1c59      	adds	r1, r3, #1
 800bdd8:	61b9      	str	r1, [r7, #24]
 800bdda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdde:	4413      	add	r3, r2
 800bde0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	f003 0301 	and.w	r3, r3, #1
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d00d      	beq.n	800be08 <put_fat+0xa4>
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	b25b      	sxtb	r3, r3
 800bdf2:	f003 030f 	and.w	r3, r3, #15
 800bdf6:	b25a      	sxtb	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	011b      	lsls	r3, r3, #4
 800bdfe:	b25b      	sxtb	r3, r3
 800be00:	4313      	orrs	r3, r2
 800be02:	b25b      	sxtb	r3, r3
 800be04:	b2db      	uxtb	r3, r3
 800be06:	e001      	b.n	800be0c <put_fat+0xa8>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2201      	movs	r2, #1
 800be14:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6a1a      	ldr	r2, [r3, #32]
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	0a5b      	lsrs	r3, r3, #9
 800be1e:	4413      	add	r3, r2
 800be20:	4619      	mov	r1, r3
 800be22:	68f8      	ldr	r0, [r7, #12]
 800be24:	f7ff fe3c 	bl	800baa0 <move_window>
 800be28:	4603      	mov	r3, r0
 800be2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be2c:	7ffb      	ldrb	r3, [r7, #31]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d178      	bne.n	800bf24 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be3e:	4413      	add	r3, r2
 800be40:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	f003 0301 	and.w	r3, r3, #1
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d003      	beq.n	800be54 <put_fat+0xf0>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	091b      	lsrs	r3, r3, #4
 800be50:	b2db      	uxtb	r3, r3
 800be52:	e00e      	b.n	800be72 <put_fat+0x10e>
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	b25b      	sxtb	r3, r3
 800be5a:	f023 030f 	bic.w	r3, r3, #15
 800be5e:	b25a      	sxtb	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	0a1b      	lsrs	r3, r3, #8
 800be64:	b25b      	sxtb	r3, r3
 800be66:	f003 030f 	and.w	r3, r3, #15
 800be6a:	b25b      	sxtb	r3, r3
 800be6c:	4313      	orrs	r3, r2
 800be6e:	b25b      	sxtb	r3, r3
 800be70:	b2db      	uxtb	r3, r3
 800be72:	697a      	ldr	r2, [r7, #20]
 800be74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2201      	movs	r2, #1
 800be7a:	70da      	strb	r2, [r3, #3]
			break;
 800be7c:	e057      	b.n	800bf2e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6a1a      	ldr	r2, [r3, #32]
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	0a1b      	lsrs	r3, r3, #8
 800be86:	4413      	add	r3, r2
 800be88:	4619      	mov	r1, r3
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f7ff fe08 	bl	800baa0 <move_window>
 800be90:	4603      	mov	r3, r0
 800be92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be94:	7ffb      	ldrb	r3, [r7, #31]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d146      	bne.n	800bf28 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	005b      	lsls	r3, r3, #1
 800bea4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bea8:	4413      	add	r3, r2
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	b292      	uxth	r2, r2
 800beae:	4611      	mov	r1, r2
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7ff fb80 	bl	800b5b6 <st_word>
			fs->wflag = 1;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2201      	movs	r2, #1
 800beba:	70da      	strb	r2, [r3, #3]
			break;
 800bebc:	e037      	b.n	800bf2e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6a1a      	ldr	r2, [r3, #32]
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	09db      	lsrs	r3, r3, #7
 800bec6:	4413      	add	r3, r2
 800bec8:	4619      	mov	r1, r3
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f7ff fde8 	bl	800baa0 <move_window>
 800bed0:	4603      	mov	r3, r0
 800bed2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bed4:	7ffb      	ldrb	r3, [r7, #31]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d128      	bne.n	800bf2c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800beee:	4413      	add	r3, r2
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7ff fb3d 	bl	800b570 <ld_dword>
 800bef6:	4603      	mov	r3, r0
 800bef8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800befc:	4323      	orrs	r3, r4
 800befe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bf0e:	4413      	add	r3, r2
 800bf10:	6879      	ldr	r1, [r7, #4]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7ff fb6a 	bl	800b5ec <st_dword>
			fs->wflag = 1;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	70da      	strb	r2, [r3, #3]
			break;
 800bf1e:	e006      	b.n	800bf2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bf20:	bf00      	nop
 800bf22:	e004      	b.n	800bf2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bf24:	bf00      	nop
 800bf26:	e002      	b.n	800bf2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bf28:	bf00      	nop
 800bf2a:	e000      	b.n	800bf2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bf2c:	bf00      	nop
		}
	}
	return res;
 800bf2e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3724      	adds	r7, #36	@ 0x24
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd90      	pop	{r4, r7, pc}

0800bf38 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b088      	sub	sp, #32
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d904      	bls.n	800bf5e <remove_chain+0x26>
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	695b      	ldr	r3, [r3, #20]
 800bf58:	68ba      	ldr	r2, [r7, #8]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d301      	bcc.n	800bf62 <remove_chain+0x2a>
 800bf5e:	2302      	movs	r3, #2
 800bf60:	e04b      	b.n	800bffa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00c      	beq.n	800bf82 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bf68:	f04f 32ff 	mov.w	r2, #4294967295
 800bf6c:	6879      	ldr	r1, [r7, #4]
 800bf6e:	69b8      	ldr	r0, [r7, #24]
 800bf70:	f7ff fef8 	bl	800bd64 <put_fat>
 800bf74:	4603      	mov	r3, r0
 800bf76:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bf78:	7ffb      	ldrb	r3, [r7, #31]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d001      	beq.n	800bf82 <remove_chain+0x4a>
 800bf7e:	7ffb      	ldrb	r3, [r7, #31]
 800bf80:	e03b      	b.n	800bffa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bf82:	68b9      	ldr	r1, [r7, #8]
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f7ff fe46 	bl	800bc16 <get_fat>
 800bf8a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d031      	beq.n	800bff6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d101      	bne.n	800bf9c <remove_chain+0x64>
 800bf98:	2302      	movs	r3, #2
 800bf9a:	e02e      	b.n	800bffa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa2:	d101      	bne.n	800bfa8 <remove_chain+0x70>
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e028      	b.n	800bffa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	68b9      	ldr	r1, [r7, #8]
 800bfac:	69b8      	ldr	r0, [r7, #24]
 800bfae:	f7ff fed9 	bl	800bd64 <put_fat>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bfb6:	7ffb      	ldrb	r3, [r7, #31]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d001      	beq.n	800bfc0 <remove_chain+0x88>
 800bfbc:	7ffb      	ldrb	r3, [r7, #31]
 800bfbe:	e01c      	b.n	800bffa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	691a      	ldr	r2, [r3, #16]
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	695b      	ldr	r3, [r3, #20]
 800bfc8:	3b02      	subs	r3, #2
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d20b      	bcs.n	800bfe6 <remove_chain+0xae>
			fs->free_clst++;
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	1c5a      	adds	r2, r3, #1
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	791b      	ldrb	r3, [r3, #4]
 800bfdc:	f043 0301 	orr.w	r3, r3, #1
 800bfe0:	b2da      	uxtb	r2, r3
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bfea:	69bb      	ldr	r3, [r7, #24]
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	68ba      	ldr	r2, [r7, #8]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d3c6      	bcc.n	800bf82 <remove_chain+0x4a>
 800bff4:	e000      	b.n	800bff8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bff6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3720      	adds	r7, #32
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b088      	sub	sp, #32
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d10d      	bne.n	800c034 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d004      	beq.n	800c02e <create_chain+0x2c>
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	695b      	ldr	r3, [r3, #20]
 800c028:	69ba      	ldr	r2, [r7, #24]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d31b      	bcc.n	800c066 <create_chain+0x64>
 800c02e:	2301      	movs	r3, #1
 800c030:	61bb      	str	r3, [r7, #24]
 800c032:	e018      	b.n	800c066 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c034:	6839      	ldr	r1, [r7, #0]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f7ff fded 	bl	800bc16 <get_fat>
 800c03c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2b01      	cmp	r3, #1
 800c042:	d801      	bhi.n	800c048 <create_chain+0x46>
 800c044:	2301      	movs	r3, #1
 800c046:	e070      	b.n	800c12a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c04e:	d101      	bne.n	800c054 <create_chain+0x52>
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	e06a      	b.n	800c12a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	695b      	ldr	r3, [r3, #20]
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d201      	bcs.n	800c062 <create_chain+0x60>
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	e063      	b.n	800c12a <create_chain+0x128>
		scl = clst;
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	3301      	adds	r3, #1
 800c06e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	695b      	ldr	r3, [r3, #20]
 800c074:	69fa      	ldr	r2, [r7, #28]
 800c076:	429a      	cmp	r2, r3
 800c078:	d307      	bcc.n	800c08a <create_chain+0x88>
				ncl = 2;
 800c07a:	2302      	movs	r3, #2
 800c07c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c07e:	69fa      	ldr	r2, [r7, #28]
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	429a      	cmp	r2, r3
 800c084:	d901      	bls.n	800c08a <create_chain+0x88>
 800c086:	2300      	movs	r3, #0
 800c088:	e04f      	b.n	800c12a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c08a:	69f9      	ldr	r1, [r7, #28]
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f7ff fdc2 	bl	800bc16 <get_fat>
 800c092:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00e      	beq.n	800c0b8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d003      	beq.n	800c0a8 <create_chain+0xa6>
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a6:	d101      	bne.n	800c0ac <create_chain+0xaa>
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	e03e      	b.n	800c12a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c0ac:	69fa      	ldr	r2, [r7, #28]
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d1da      	bne.n	800c06a <create_chain+0x68>
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	e038      	b.n	800c12a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c0b8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c0be:	69f9      	ldr	r1, [r7, #28]
 800c0c0:	6938      	ldr	r0, [r7, #16]
 800c0c2:	f7ff fe4f 	bl	800bd64 <put_fat>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c0ca:	7dfb      	ldrb	r3, [r7, #23]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d109      	bne.n	800c0e4 <create_chain+0xe2>
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d006      	beq.n	800c0e4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c0d6:	69fa      	ldr	r2, [r7, #28]
 800c0d8:	6839      	ldr	r1, [r7, #0]
 800c0da:	6938      	ldr	r0, [r7, #16]
 800c0dc:	f7ff fe42 	bl	800bd64 <put_fat>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c0e4:	7dfb      	ldrb	r3, [r7, #23]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d116      	bne.n	800c118 <create_chain+0x116>
		fs->last_clst = ncl;
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	69fa      	ldr	r2, [r7, #28]
 800c0ee:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	691a      	ldr	r2, [r3, #16]
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	695b      	ldr	r3, [r3, #20]
 800c0f8:	3b02      	subs	r3, #2
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d804      	bhi.n	800c108 <create_chain+0x106>
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	1e5a      	subs	r2, r3, #1
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	791b      	ldrb	r3, [r3, #4]
 800c10c:	f043 0301 	orr.w	r3, r3, #1
 800c110:	b2da      	uxtb	r2, r3
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	711a      	strb	r2, [r3, #4]
 800c116:	e007      	b.n	800c128 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c118:	7dfb      	ldrb	r3, [r7, #23]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d102      	bne.n	800c124 <create_chain+0x122>
 800c11e:	f04f 33ff 	mov.w	r3, #4294967295
 800c122:	e000      	b.n	800c126 <create_chain+0x124>
 800c124:	2301      	movs	r3, #1
 800c126:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c128:	69fb      	ldr	r3, [r7, #28]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3720      	adds	r7, #32
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c132:	b480      	push	{r7}
 800c134:	b087      	sub	sp, #28
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c146:	3304      	adds	r3, #4
 800c148:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	0a5b      	lsrs	r3, r3, #9
 800c14e:	68fa      	ldr	r2, [r7, #12]
 800c150:	8952      	ldrh	r2, [r2, #10]
 800c152:	fbb3 f3f2 	udiv	r3, r3, r2
 800c156:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	1d1a      	adds	r2, r3, #4
 800c15c:	613a      	str	r2, [r7, #16]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d101      	bne.n	800c16c <clmt_clust+0x3a>
 800c168:	2300      	movs	r3, #0
 800c16a:	e010      	b.n	800c18e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c16c:	697a      	ldr	r2, [r7, #20]
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	429a      	cmp	r2, r3
 800c172:	d307      	bcc.n	800c184 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c174:	697a      	ldr	r2, [r7, #20]
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	617b      	str	r3, [r7, #20]
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	3304      	adds	r3, #4
 800c180:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c182:	e7e9      	b.n	800c158 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c184:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	4413      	add	r3, r2
}
 800c18e:	4618      	mov	r0, r3
 800c190:	371c      	adds	r7, #28
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr

0800c19a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b086      	sub	sp, #24
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c1b0:	d204      	bcs.n	800c1bc <dir_sdi+0x22>
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	f003 031f 	and.w	r3, r3, #31
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d001      	beq.n	800c1c0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c1bc:	2302      	movs	r3, #2
 800c1be:	e063      	b.n	800c288 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	683a      	ldr	r2, [r7, #0]
 800c1c4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d106      	bne.n	800c1e0 <dir_sdi+0x46>
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	2b02      	cmp	r3, #2
 800c1d8:	d902      	bls.n	800c1e0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1de:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10c      	bne.n	800c200 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	095b      	lsrs	r3, r3, #5
 800c1ea:	693a      	ldr	r2, [r7, #16]
 800c1ec:	8912      	ldrh	r2, [r2, #8]
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d301      	bcc.n	800c1f6 <dir_sdi+0x5c>
 800c1f2:	2302      	movs	r3, #2
 800c1f4:	e048      	b.n	800c288 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	61da      	str	r2, [r3, #28]
 800c1fe:	e029      	b.n	800c254 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	895b      	ldrh	r3, [r3, #10]
 800c204:	025b      	lsls	r3, r3, #9
 800c206:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c208:	e019      	b.n	800c23e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6979      	ldr	r1, [r7, #20]
 800c20e:	4618      	mov	r0, r3
 800c210:	f7ff fd01 	bl	800bc16 <get_fat>
 800c214:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c21c:	d101      	bne.n	800c222 <dir_sdi+0x88>
 800c21e:	2301      	movs	r3, #1
 800c220:	e032      	b.n	800c288 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	2b01      	cmp	r3, #1
 800c226:	d904      	bls.n	800c232 <dir_sdi+0x98>
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	695b      	ldr	r3, [r3, #20]
 800c22c:	697a      	ldr	r2, [r7, #20]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d301      	bcc.n	800c236 <dir_sdi+0x9c>
 800c232:	2302      	movs	r3, #2
 800c234:	e028      	b.n	800c288 <dir_sdi+0xee>
			ofs -= csz;
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	1ad3      	subs	r3, r2, r3
 800c23c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c23e:	683a      	ldr	r2, [r7, #0]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	429a      	cmp	r2, r3
 800c244:	d2e1      	bcs.n	800c20a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c246:	6979      	ldr	r1, [r7, #20]
 800c248:	6938      	ldr	r0, [r7, #16]
 800c24a:	f7ff fcc5 	bl	800bbd8 <clust2sect>
 800c24e:	4602      	mov	r2, r0
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	697a      	ldr	r2, [r7, #20]
 800c258:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	69db      	ldr	r3, [r3, #28]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d101      	bne.n	800c266 <dir_sdi+0xcc>
 800c262:	2302      	movs	r3, #2
 800c264:	e010      	b.n	800c288 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	69da      	ldr	r2, [r3, #28]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	0a5b      	lsrs	r3, r3, #9
 800c26e:	441a      	add	r2, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c280:	441a      	add	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c286:	2300      	movs	r3, #0
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3718      	adds	r7, #24
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	695b      	ldr	r3, [r3, #20]
 800c2a4:	3320      	adds	r3, #32
 800c2a6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	69db      	ldr	r3, [r3, #28]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d003      	beq.n	800c2b8 <dir_next+0x28>
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c2b6:	d301      	bcc.n	800c2bc <dir_next+0x2c>
 800c2b8:	2304      	movs	r3, #4
 800c2ba:	e0aa      	b.n	800c412 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f040 8098 	bne.w	800c3f8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	69db      	ldr	r3, [r3, #28]
 800c2cc:	1c5a      	adds	r2, r3, #1
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	699b      	ldr	r3, [r3, #24]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d10b      	bne.n	800c2f2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	095b      	lsrs	r3, r3, #5
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	8912      	ldrh	r2, [r2, #8]
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	f0c0 8088 	bcc.w	800c3f8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	61da      	str	r2, [r3, #28]
 800c2ee:	2304      	movs	r3, #4
 800c2f0:	e08f      	b.n	800c412 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	0a5b      	lsrs	r3, r3, #9
 800c2f6:	68fa      	ldr	r2, [r7, #12]
 800c2f8:	8952      	ldrh	r2, [r2, #10]
 800c2fa:	3a01      	subs	r2, #1
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d17a      	bne.n	800c3f8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	699b      	ldr	r3, [r3, #24]
 800c308:	4619      	mov	r1, r3
 800c30a:	4610      	mov	r0, r2
 800c30c:	f7ff fc83 	bl	800bc16 <get_fat>
 800c310:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	2b01      	cmp	r3, #1
 800c316:	d801      	bhi.n	800c31c <dir_next+0x8c>
 800c318:	2302      	movs	r3, #2
 800c31a:	e07a      	b.n	800c412 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c322:	d101      	bne.n	800c328 <dir_next+0x98>
 800c324:	2301      	movs	r3, #1
 800c326:	e074      	b.n	800c412 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	695b      	ldr	r3, [r3, #20]
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d358      	bcc.n	800c3e4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d104      	bne.n	800c342 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	61da      	str	r2, [r3, #28]
 800c33e:	2304      	movs	r3, #4
 800c340:	e067      	b.n	800c412 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	699b      	ldr	r3, [r3, #24]
 800c348:	4619      	mov	r1, r3
 800c34a:	4610      	mov	r0, r2
 800c34c:	f7ff fe59 	bl	800c002 <create_chain>
 800c350:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d101      	bne.n	800c35c <dir_next+0xcc>
 800c358:	2307      	movs	r3, #7
 800c35a:	e05a      	b.n	800c412 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d101      	bne.n	800c366 <dir_next+0xd6>
 800c362:	2302      	movs	r3, #2
 800c364:	e055      	b.n	800c412 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c36c:	d101      	bne.n	800c372 <dir_next+0xe2>
 800c36e:	2301      	movs	r3, #1
 800c370:	e04f      	b.n	800c412 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c372:	68f8      	ldr	r0, [r7, #12]
 800c374:	f7ff fb50 	bl	800ba18 <sync_window>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d001      	beq.n	800c382 <dir_next+0xf2>
 800c37e:	2301      	movs	r3, #1
 800c380:	e047      	b.n	800c412 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	3330      	adds	r3, #48	@ 0x30
 800c386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c38a:	2100      	movs	r1, #0
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7ff f97a 	bl	800b686 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c392:	2300      	movs	r3, #0
 800c394:	613b      	str	r3, [r7, #16]
 800c396:	6979      	ldr	r1, [r7, #20]
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	f7ff fc1d 	bl	800bbd8 <clust2sect>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c3a4:	e012      	b.n	800c3cc <dir_next+0x13c>
						fs->wflag = 1;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f7ff fb33 	bl	800ba18 <sync_window>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d001      	beq.n	800c3bc <dir_next+0x12c>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e02a      	b.n	800c412 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	613b      	str	r3, [r7, #16]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3c6:	1c5a      	adds	r2, r3, #1
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	895b      	ldrh	r3, [r3, #10]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d3e6      	bcc.n	800c3a6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	1ad2      	subs	r2, r2, r3
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	697a      	ldr	r2, [r7, #20]
 800c3e8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c3ea:	6979      	ldr	r1, [r7, #20]
 800c3ec:	68f8      	ldr	r0, [r7, #12]
 800c3ee:	f7ff fbf3 	bl	800bbd8 <clust2sect>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	68ba      	ldr	r2, [r7, #8]
 800c3fc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c40a:	441a      	add	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3718      	adds	r7, #24
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b086      	sub	sp, #24
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c42a:	2100      	movs	r1, #0
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f7ff feb4 	bl	800c19a <dir_sdi>
 800c432:	4603      	mov	r3, r0
 800c434:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c436:	7dfb      	ldrb	r3, [r7, #23]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d12b      	bne.n	800c494 <dir_alloc+0x7a>
		n = 0;
 800c43c:	2300      	movs	r3, #0
 800c43e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	69db      	ldr	r3, [r3, #28]
 800c444:	4619      	mov	r1, r3
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f7ff fb2a 	bl	800baa0 <move_window>
 800c44c:	4603      	mov	r3, r0
 800c44e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c450:	7dfb      	ldrb	r3, [r7, #23]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d11d      	bne.n	800c492 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a1b      	ldr	r3, [r3, #32]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	2be5      	cmp	r3, #229	@ 0xe5
 800c45e:	d004      	beq.n	800c46a <dir_alloc+0x50>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6a1b      	ldr	r3, [r3, #32]
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d107      	bne.n	800c47a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	3301      	adds	r3, #1
 800c46e:	613b      	str	r3, [r7, #16]
 800c470:	693a      	ldr	r2, [r7, #16]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	429a      	cmp	r2, r3
 800c476:	d102      	bne.n	800c47e <dir_alloc+0x64>
 800c478:	e00c      	b.n	800c494 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c47a:	2300      	movs	r3, #0
 800c47c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c47e:	2101      	movs	r1, #1
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7ff ff05 	bl	800c290 <dir_next>
 800c486:	4603      	mov	r3, r0
 800c488:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c48a:	7dfb      	ldrb	r3, [r7, #23]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d0d7      	beq.n	800c440 <dir_alloc+0x26>
 800c490:	e000      	b.n	800c494 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c492:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c494:	7dfb      	ldrb	r3, [r7, #23]
 800c496:	2b04      	cmp	r3, #4
 800c498:	d101      	bne.n	800c49e <dir_alloc+0x84>
 800c49a:	2307      	movs	r3, #7
 800c49c:	75fb      	strb	r3, [r7, #23]
	return res;
 800c49e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3718      	adds	r7, #24
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	331a      	adds	r3, #26
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7ff f842 	bl	800b540 <ld_word>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	2b03      	cmp	r3, #3
 800c4c6:	d109      	bne.n	800c4dc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	3314      	adds	r3, #20
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7ff f837 	bl	800b540 <ld_word>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	041b      	lsls	r3, r3, #16
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3710      	adds	r7, #16
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b084      	sub	sp, #16
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	60f8      	str	r0, [r7, #12]
 800c4ee:	60b9      	str	r1, [r7, #8]
 800c4f0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	331a      	adds	r3, #26
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	b292      	uxth	r2, r2
 800c4fa:	4611      	mov	r1, r2
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7ff f85a 	bl	800b5b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	2b03      	cmp	r3, #3
 800c508:	d109      	bne.n	800c51e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	f103 0214 	add.w	r2, r3, #20
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	0c1b      	lsrs	r3, r3, #16
 800c514:	b29b      	uxth	r3, r3
 800c516:	4619      	mov	r1, r3
 800c518:	4610      	mov	r0, r2
 800c51a:	f7ff f84c 	bl	800b5b6 <st_word>
	}
}
 800c51e:	bf00      	nop
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b086      	sub	sp, #24
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c534:	2100      	movs	r1, #0
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7ff fe2f 	bl	800c19a <dir_sdi>
 800c53c:	4603      	mov	r3, r0
 800c53e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c540:	7dfb      	ldrb	r3, [r7, #23]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d001      	beq.n	800c54a <dir_find+0x24>
 800c546:	7dfb      	ldrb	r3, [r7, #23]
 800c548:	e03e      	b.n	800c5c8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	69db      	ldr	r3, [r3, #28]
 800c54e:	4619      	mov	r1, r3
 800c550:	6938      	ldr	r0, [r7, #16]
 800c552:	f7ff faa5 	bl	800baa0 <move_window>
 800c556:	4603      	mov	r3, r0
 800c558:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c55a:	7dfb      	ldrb	r3, [r7, #23]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d12f      	bne.n	800c5c0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6a1b      	ldr	r3, [r3, #32]
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c568:	7bfb      	ldrb	r3, [r7, #15]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d102      	bne.n	800c574 <dir_find+0x4e>
 800c56e:	2304      	movs	r3, #4
 800c570:	75fb      	strb	r3, [r7, #23]
 800c572:	e028      	b.n	800c5c6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6a1b      	ldr	r3, [r3, #32]
 800c578:	330b      	adds	r3, #11
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c580:	b2da      	uxtb	r2, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6a1b      	ldr	r3, [r3, #32]
 800c58a:	330b      	adds	r3, #11
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	f003 0308 	and.w	r3, r3, #8
 800c592:	2b00      	cmp	r3, #0
 800c594:	d10a      	bne.n	800c5ac <dir_find+0x86>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a18      	ldr	r0, [r3, #32]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	3324      	adds	r3, #36	@ 0x24
 800c59e:	220b      	movs	r2, #11
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	f7ff f88b 	bl	800b6bc <mem_cmp>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d00b      	beq.n	800c5c4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7ff fe6e 	bl	800c290 <dir_next>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c5b8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d0c5      	beq.n	800c54a <dir_find+0x24>
 800c5be:	e002      	b.n	800c5c6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c5c0:	bf00      	nop
 800c5c2:	e000      	b.n	800c5c6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c5c4:	bf00      	nop

	return res;
 800c5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3718      	adds	r7, #24
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c5de:	2101      	movs	r1, #1
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f7ff ff1a 	bl	800c41a <dir_alloc>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c5ea:	7bfb      	ldrb	r3, [r7, #15]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d11c      	bne.n	800c62a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	69db      	ldr	r3, [r3, #28]
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	68b8      	ldr	r0, [r7, #8]
 800c5f8:	f7ff fa52 	bl	800baa0 <move_window>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c600:	7bfb      	ldrb	r3, [r7, #15]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d111      	bne.n	800c62a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a1b      	ldr	r3, [r3, #32]
 800c60a:	2220      	movs	r2, #32
 800c60c:	2100      	movs	r1, #0
 800c60e:	4618      	mov	r0, r3
 800c610:	f7ff f839 	bl	800b686 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6a18      	ldr	r0, [r3, #32]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	3324      	adds	r3, #36	@ 0x24
 800c61c:	220b      	movs	r2, #11
 800c61e:	4619      	mov	r1, r3
 800c620:	f7ff f810 	bl	800b644 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2201      	movs	r2, #1
 800c628:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b088      	sub	sp, #32
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	60fb      	str	r3, [r7, #12]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	3324      	adds	r3, #36	@ 0x24
 800c648:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c64a:	220b      	movs	r2, #11
 800c64c:	2120      	movs	r1, #32
 800c64e:	68b8      	ldr	r0, [r7, #8]
 800c650:	f7ff f819 	bl	800b686 <mem_set>
	si = i = 0; ni = 8;
 800c654:	2300      	movs	r3, #0
 800c656:	613b      	str	r3, [r7, #16]
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	61fb      	str	r3, [r7, #28]
 800c65c:	2308      	movs	r3, #8
 800c65e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	1c5a      	adds	r2, r3, #1
 800c664:	61fa      	str	r2, [r7, #28]
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	4413      	add	r3, r2
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c66e:	7efb      	ldrb	r3, [r7, #27]
 800c670:	2b20      	cmp	r3, #32
 800c672:	d94e      	bls.n	800c712 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c674:	7efb      	ldrb	r3, [r7, #27]
 800c676:	2b2f      	cmp	r3, #47	@ 0x2f
 800c678:	d006      	beq.n	800c688 <create_name+0x54>
 800c67a:	7efb      	ldrb	r3, [r7, #27]
 800c67c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c67e:	d110      	bne.n	800c6a2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c680:	e002      	b.n	800c688 <create_name+0x54>
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	3301      	adds	r3, #1
 800c686:	61fb      	str	r3, [r7, #28]
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	4413      	add	r3, r2
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	2b2f      	cmp	r3, #47	@ 0x2f
 800c692:	d0f6      	beq.n	800c682 <create_name+0x4e>
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	4413      	add	r3, r2
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c69e:	d0f0      	beq.n	800c682 <create_name+0x4e>
			break;
 800c6a0:	e038      	b.n	800c714 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c6a2:	7efb      	ldrb	r3, [r7, #27]
 800c6a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6a6:	d003      	beq.n	800c6b0 <create_name+0x7c>
 800c6a8:	693a      	ldr	r2, [r7, #16]
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d30c      	bcc.n	800c6ca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	2b0b      	cmp	r3, #11
 800c6b4:	d002      	beq.n	800c6bc <create_name+0x88>
 800c6b6:	7efb      	ldrb	r3, [r7, #27]
 800c6b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6ba:	d001      	beq.n	800c6c0 <create_name+0x8c>
 800c6bc:	2306      	movs	r3, #6
 800c6be:	e044      	b.n	800c74a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c6c0:	2308      	movs	r3, #8
 800c6c2:	613b      	str	r3, [r7, #16]
 800c6c4:	230b      	movs	r3, #11
 800c6c6:	617b      	str	r3, [r7, #20]
			continue;
 800c6c8:	e022      	b.n	800c710 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c6ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	da04      	bge.n	800c6dc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c6d2:	7efb      	ldrb	r3, [r7, #27]
 800c6d4:	3b80      	subs	r3, #128	@ 0x80
 800c6d6:	4a1f      	ldr	r2, [pc, #124]	@ (800c754 <create_name+0x120>)
 800c6d8:	5cd3      	ldrb	r3, [r2, r3]
 800c6da:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c6dc:	7efb      	ldrb	r3, [r7, #27]
 800c6de:	4619      	mov	r1, r3
 800c6e0:	481d      	ldr	r0, [pc, #116]	@ (800c758 <create_name+0x124>)
 800c6e2:	f7ff f812 	bl	800b70a <chk_chr>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d001      	beq.n	800c6f0 <create_name+0xbc>
 800c6ec:	2306      	movs	r3, #6
 800c6ee:	e02c      	b.n	800c74a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c6f0:	7efb      	ldrb	r3, [r7, #27]
 800c6f2:	2b60      	cmp	r3, #96	@ 0x60
 800c6f4:	d905      	bls.n	800c702 <create_name+0xce>
 800c6f6:	7efb      	ldrb	r3, [r7, #27]
 800c6f8:	2b7a      	cmp	r3, #122	@ 0x7a
 800c6fa:	d802      	bhi.n	800c702 <create_name+0xce>
 800c6fc:	7efb      	ldrb	r3, [r7, #27]
 800c6fe:	3b20      	subs	r3, #32
 800c700:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	1c5a      	adds	r2, r3, #1
 800c706:	613a      	str	r2, [r7, #16]
 800c708:	68ba      	ldr	r2, [r7, #8]
 800c70a:	4413      	add	r3, r2
 800c70c:	7efa      	ldrb	r2, [r7, #27]
 800c70e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c710:	e7a6      	b.n	800c660 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c712:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	441a      	add	r2, r3
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d101      	bne.n	800c728 <create_name+0xf4>
 800c724:	2306      	movs	r3, #6
 800c726:	e010      	b.n	800c74a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	2be5      	cmp	r3, #229	@ 0xe5
 800c72e:	d102      	bne.n	800c736 <create_name+0x102>
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	2205      	movs	r2, #5
 800c734:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c736:	7efb      	ldrb	r3, [r7, #27]
 800c738:	2b20      	cmp	r3, #32
 800c73a:	d801      	bhi.n	800c740 <create_name+0x10c>
 800c73c:	2204      	movs	r2, #4
 800c73e:	e000      	b.n	800c742 <create_name+0x10e>
 800c740:	2200      	movs	r2, #0
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	330b      	adds	r3, #11
 800c746:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c748:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3720      	adds	r7, #32
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	08014be4 	.word	0x08014be4
 800c758:	08014b3c 	.word	0x08014b3c

0800c75c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c770:	e002      	b.n	800c778 <follow_path+0x1c>
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	3301      	adds	r3, #1
 800c776:	603b      	str	r3, [r7, #0]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c77e:	d0f8      	beq.n	800c772 <follow_path+0x16>
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	2b5c      	cmp	r3, #92	@ 0x5c
 800c786:	d0f4      	beq.n	800c772 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	2200      	movs	r2, #0
 800c78c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	2b1f      	cmp	r3, #31
 800c794:	d80a      	bhi.n	800c7ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2280      	movs	r2, #128	@ 0x80
 800c79a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c79e:	2100      	movs	r1, #0
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f7ff fcfa 	bl	800c19a <dir_sdi>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	75fb      	strb	r3, [r7, #23]
 800c7aa:	e043      	b.n	800c834 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c7ac:	463b      	mov	r3, r7
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7ff ff3f 	bl	800c634 <create_name>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c7ba:	7dfb      	ldrb	r3, [r7, #23]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d134      	bne.n	800c82a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f7ff feb0 	bl	800c526 <dir_find>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c7d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c7d2:	7dfb      	ldrb	r3, [r7, #23]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d00a      	beq.n	800c7ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c7d8:	7dfb      	ldrb	r3, [r7, #23]
 800c7da:	2b04      	cmp	r3, #4
 800c7dc:	d127      	bne.n	800c82e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c7de:	7afb      	ldrb	r3, [r7, #11]
 800c7e0:	f003 0304 	and.w	r3, r3, #4
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d122      	bne.n	800c82e <follow_path+0xd2>
 800c7e8:	2305      	movs	r3, #5
 800c7ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c7ec:	e01f      	b.n	800c82e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c7ee:	7afb      	ldrb	r3, [r7, #11]
 800c7f0:	f003 0304 	and.w	r3, r3, #4
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d11c      	bne.n	800c832 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	799b      	ldrb	r3, [r3, #6]
 800c7fc:	f003 0310 	and.w	r3, r3, #16
 800c800:	2b00      	cmp	r3, #0
 800c802:	d102      	bne.n	800c80a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c804:	2305      	movs	r3, #5
 800c806:	75fb      	strb	r3, [r7, #23]
 800c808:	e014      	b.n	800c834 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	695b      	ldr	r3, [r3, #20]
 800c814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c818:	4413      	add	r3, r2
 800c81a:	4619      	mov	r1, r3
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f7ff fe43 	bl	800c4a8 <ld_clust>
 800c822:	4602      	mov	r2, r0
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c828:	e7c0      	b.n	800c7ac <follow_path+0x50>
			if (res != FR_OK) break;
 800c82a:	bf00      	nop
 800c82c:	e002      	b.n	800c834 <follow_path+0xd8>
				break;
 800c82e:	bf00      	nop
 800c830:	e000      	b.n	800c834 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c832:	bf00      	nop
			}
		}
	}

	return res;
 800c834:	7dfb      	ldrb	r3, [r7, #23]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3718      	adds	r7, #24
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c83e:	b480      	push	{r7}
 800c840:	b087      	sub	sp, #28
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c846:	f04f 33ff 	mov.w	r3, #4294967295
 800c84a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d031      	beq.n	800c8b8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	617b      	str	r3, [r7, #20]
 800c85a:	e002      	b.n	800c862 <get_ldnumber+0x24>
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	3301      	adds	r3, #1
 800c860:	617b      	str	r3, [r7, #20]
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	2b20      	cmp	r3, #32
 800c868:	d903      	bls.n	800c872 <get_ldnumber+0x34>
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	2b3a      	cmp	r3, #58	@ 0x3a
 800c870:	d1f4      	bne.n	800c85c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	2b3a      	cmp	r3, #58	@ 0x3a
 800c878:	d11c      	bne.n	800c8b4 <get_ldnumber+0x76>
			tp = *path;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	1c5a      	adds	r2, r3, #1
 800c884:	60fa      	str	r2, [r7, #12]
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	3b30      	subs	r3, #48	@ 0x30
 800c88a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	2b09      	cmp	r3, #9
 800c890:	d80e      	bhi.n	800c8b0 <get_ldnumber+0x72>
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	429a      	cmp	r2, r3
 800c898:	d10a      	bne.n	800c8b0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d107      	bne.n	800c8b0 <get_ldnumber+0x72>
					vol = (int)i;
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	617b      	str	r3, [r7, #20]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	697a      	ldr	r2, [r7, #20]
 800c8ae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	e002      	b.n	800c8ba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c8b8:	693b      	ldr	r3, [r7, #16]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	371c      	adds	r7, #28
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr
	...

0800c8c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	70da      	strb	r2, [r3, #3]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f04f 32ff 	mov.w	r2, #4294967295
 800c8de:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c8e0:	6839      	ldr	r1, [r7, #0]
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f7ff f8dc 	bl	800baa0 <move_window>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d001      	beq.n	800c8f2 <check_fs+0x2a>
 800c8ee:	2304      	movs	r3, #4
 800c8f0:	e038      	b.n	800c964 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	3330      	adds	r3, #48	@ 0x30
 800c8f6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7fe fe20 	bl	800b540 <ld_word>
 800c900:	4603      	mov	r3, r0
 800c902:	461a      	mov	r2, r3
 800c904:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c908:	429a      	cmp	r2, r3
 800c90a:	d001      	beq.n	800c910 <check_fs+0x48>
 800c90c:	2303      	movs	r3, #3
 800c90e:	e029      	b.n	800c964 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c916:	2be9      	cmp	r3, #233	@ 0xe9
 800c918:	d009      	beq.n	800c92e <check_fs+0x66>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c920:	2beb      	cmp	r3, #235	@ 0xeb
 800c922:	d11e      	bne.n	800c962 <check_fs+0x9a>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c92a:	2b90      	cmp	r3, #144	@ 0x90
 800c92c:	d119      	bne.n	800c962 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	3330      	adds	r3, #48	@ 0x30
 800c932:	3336      	adds	r3, #54	@ 0x36
 800c934:	4618      	mov	r0, r3
 800c936:	f7fe fe1b 	bl	800b570 <ld_dword>
 800c93a:	4603      	mov	r3, r0
 800c93c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c940:	4a0a      	ldr	r2, [pc, #40]	@ (800c96c <check_fs+0xa4>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d101      	bne.n	800c94a <check_fs+0x82>
 800c946:	2300      	movs	r3, #0
 800c948:	e00c      	b.n	800c964 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	3330      	adds	r3, #48	@ 0x30
 800c94e:	3352      	adds	r3, #82	@ 0x52
 800c950:	4618      	mov	r0, r3
 800c952:	f7fe fe0d 	bl	800b570 <ld_dword>
 800c956:	4603      	mov	r3, r0
 800c958:	4a05      	ldr	r2, [pc, #20]	@ (800c970 <check_fs+0xa8>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d101      	bne.n	800c962 <check_fs+0x9a>
 800c95e:	2300      	movs	r3, #0
 800c960:	e000      	b.n	800c964 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c962:	2302      	movs	r3, #2
}
 800c964:	4618      	mov	r0, r3
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	00544146 	.word	0x00544146
 800c970:	33544146 	.word	0x33544146

0800c974 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b096      	sub	sp, #88	@ 0x58
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	4613      	mov	r3, r2
 800c980:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	2200      	movs	r2, #0
 800c986:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f7ff ff58 	bl	800c83e <get_ldnumber>
 800c98e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c992:	2b00      	cmp	r3, #0
 800c994:	da01      	bge.n	800c99a <find_volume+0x26>
 800c996:	230b      	movs	r3, #11
 800c998:	e22d      	b.n	800cdf6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c99a:	4aa1      	ldr	r2, [pc, #644]	@ (800cc20 <find_volume+0x2ac>)
 800c99c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9a2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <find_volume+0x3a>
 800c9aa:	230c      	movs	r3, #12
 800c9ac:	e223      	b.n	800cdf6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9b2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c9b4:	79fb      	ldrb	r3, [r7, #7]
 800c9b6:	f023 0301 	bic.w	r3, r3, #1
 800c9ba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d01a      	beq.n	800c9fa <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c6:	785b      	ldrb	r3, [r3, #1]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fe fd1b 	bl	800b404 <disk_status>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c9d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c9d8:	f003 0301 	and.w	r3, r3, #1
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d10c      	bne.n	800c9fa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c9e0:	79fb      	ldrb	r3, [r7, #7]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d007      	beq.n	800c9f6 <find_volume+0x82>
 800c9e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c9ea:	f003 0304 	and.w	r3, r3, #4
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d001      	beq.n	800c9f6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c9f2:	230a      	movs	r3, #10
 800c9f4:	e1ff      	b.n	800cdf6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	e1fd      	b.n	800cdf6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ca00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca06:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ca08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca0a:	785b      	ldrb	r3, [r3, #1]
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7fe fd13 	bl	800b438 <disk_initialize>
 800ca12:	4603      	mov	r3, r0
 800ca14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ca18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca1c:	f003 0301 	and.w	r3, r3, #1
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d001      	beq.n	800ca28 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ca24:	2303      	movs	r3, #3
 800ca26:	e1e6      	b.n	800cdf6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ca28:	79fb      	ldrb	r3, [r7, #7]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d007      	beq.n	800ca3e <find_volume+0xca>
 800ca2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca32:	f003 0304 	and.w	r3, r3, #4
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d001      	beq.n	800ca3e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ca3a:	230a      	movs	r3, #10
 800ca3c:	e1db      	b.n	800cdf6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ca42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca44:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ca46:	f7ff ff3f 	bl	800c8c8 <check_fs>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ca50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	d149      	bne.n	800caec <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca58:	2300      	movs	r3, #0
 800ca5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca5c:	e01e      	b.n	800ca9c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ca5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca60:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca66:	011b      	lsls	r3, r3, #4
 800ca68:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ca6c:	4413      	add	r3, r2
 800ca6e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ca70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca72:	3304      	adds	r3, #4
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d006      	beq.n	800ca88 <find_volume+0x114>
 800ca7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca7c:	3308      	adds	r3, #8
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7fe fd76 	bl	800b570 <ld_dword>
 800ca84:	4602      	mov	r2, r0
 800ca86:	e000      	b.n	800ca8a <find_volume+0x116>
 800ca88:	2200      	movs	r2, #0
 800ca8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	3358      	adds	r3, #88	@ 0x58
 800ca90:	443b      	add	r3, r7
 800ca92:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca98:	3301      	adds	r3, #1
 800ca9a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca9e:	2b03      	cmp	r3, #3
 800caa0:	d9dd      	bls.n	800ca5e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800caa2:	2300      	movs	r3, #0
 800caa4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800caa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d002      	beq.n	800cab2 <find_volume+0x13e>
 800caac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caae:	3b01      	subs	r3, #1
 800cab0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	3358      	adds	r3, #88	@ 0x58
 800cab8:	443b      	add	r3, r7
 800caba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cabe:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d005      	beq.n	800cad2 <find_volume+0x15e>
 800cac6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cac8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800caca:	f7ff fefd 	bl	800c8c8 <check_fs>
 800cace:	4603      	mov	r3, r0
 800cad0:	e000      	b.n	800cad4 <find_volume+0x160>
 800cad2:	2303      	movs	r3, #3
 800cad4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cad8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d905      	bls.n	800caec <find_volume+0x178>
 800cae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cae2:	3301      	adds	r3, #1
 800cae4:	643b      	str	r3, [r7, #64]	@ 0x40
 800cae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cae8:	2b03      	cmp	r3, #3
 800caea:	d9e2      	bls.n	800cab2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800caec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800caf0:	2b04      	cmp	r3, #4
 800caf2:	d101      	bne.n	800caf8 <find_volume+0x184>
 800caf4:	2301      	movs	r3, #1
 800caf6:	e17e      	b.n	800cdf6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800caf8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d901      	bls.n	800cb04 <find_volume+0x190>
 800cb00:	230d      	movs	r3, #13
 800cb02:	e178      	b.n	800cdf6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cb04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb06:	3330      	adds	r3, #48	@ 0x30
 800cb08:	330b      	adds	r3, #11
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fe fd18 	bl	800b540 <ld_word>
 800cb10:	4603      	mov	r3, r0
 800cb12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb16:	d001      	beq.n	800cb1c <find_volume+0x1a8>
 800cb18:	230d      	movs	r3, #13
 800cb1a:	e16c      	b.n	800cdf6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb1e:	3330      	adds	r3, #48	@ 0x30
 800cb20:	3316      	adds	r3, #22
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7fe fd0c 	bl	800b540 <ld_word>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cb2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d106      	bne.n	800cb40 <find_volume+0x1cc>
 800cb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb34:	3330      	adds	r3, #48	@ 0x30
 800cb36:	3324      	adds	r3, #36	@ 0x24
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7fe fd19 	bl	800b570 <ld_dword>
 800cb3e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800cb40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb44:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cb46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb48:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800cb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb4e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb52:	789b      	ldrb	r3, [r3, #2]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d005      	beq.n	800cb64 <find_volume+0x1f0>
 800cb58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb5a:	789b      	ldrb	r3, [r3, #2]
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	d001      	beq.n	800cb64 <find_volume+0x1f0>
 800cb60:	230d      	movs	r3, #13
 800cb62:	e148      	b.n	800cdf6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb66:	789b      	ldrb	r3, [r3, #2]
 800cb68:	461a      	mov	r2, r3
 800cb6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb6c:	fb02 f303 	mul.w	r3, r2, r3
 800cb70:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb78:	461a      	mov	r2, r3
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb7c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cb7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb80:	895b      	ldrh	r3, [r3, #10]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d008      	beq.n	800cb98 <find_volume+0x224>
 800cb86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb88:	895b      	ldrh	r3, [r3, #10]
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb8e:	895b      	ldrh	r3, [r3, #10]
 800cb90:	3b01      	subs	r3, #1
 800cb92:	4013      	ands	r3, r2
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d001      	beq.n	800cb9c <find_volume+0x228>
 800cb98:	230d      	movs	r3, #13
 800cb9a:	e12c      	b.n	800cdf6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cb9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb9e:	3330      	adds	r3, #48	@ 0x30
 800cba0:	3311      	adds	r3, #17
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fe fccc 	bl	800b540 <ld_word>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	461a      	mov	r2, r3
 800cbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb2:	891b      	ldrh	r3, [r3, #8]
 800cbb4:	f003 030f 	and.w	r3, r3, #15
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d001      	beq.n	800cbc2 <find_volume+0x24e>
 800cbbe:	230d      	movs	r3, #13
 800cbc0:	e119      	b.n	800cdf6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cbc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc4:	3330      	adds	r3, #48	@ 0x30
 800cbc6:	3313      	adds	r3, #19
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7fe fcb9 	bl	800b540 <ld_word>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cbd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d106      	bne.n	800cbe6 <find_volume+0x272>
 800cbd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbda:	3330      	adds	r3, #48	@ 0x30
 800cbdc:	3320      	adds	r3, #32
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7fe fcc6 	bl	800b570 <ld_dword>
 800cbe4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cbe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe8:	3330      	adds	r3, #48	@ 0x30
 800cbea:	330e      	adds	r3, #14
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7fe fca7 	bl	800b540 <ld_word>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cbf6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d101      	bne.n	800cc00 <find_volume+0x28c>
 800cbfc:	230d      	movs	r3, #13
 800cbfe:	e0fa      	b.n	800cdf6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cc00:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cc02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc04:	4413      	add	r3, r2
 800cc06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc08:	8912      	ldrh	r2, [r2, #8]
 800cc0a:	0912      	lsrs	r2, r2, #4
 800cc0c:	b292      	uxth	r2, r2
 800cc0e:	4413      	add	r3, r2
 800cc10:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cc12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d204      	bcs.n	800cc24 <find_volume+0x2b0>
 800cc1a:	230d      	movs	r3, #13
 800cc1c:	e0eb      	b.n	800cdf6 <find_volume+0x482>
 800cc1e:	bf00      	nop
 800cc20:	20005dd8 	.word	0x20005dd8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cc24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc28:	1ad3      	subs	r3, r2, r3
 800cc2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc2c:	8952      	ldrh	r2, [r2, #10]
 800cc2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc32:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d101      	bne.n	800cc3e <find_volume+0x2ca>
 800cc3a:	230d      	movs	r3, #13
 800cc3c:	e0db      	b.n	800cdf6 <find_volume+0x482>
		fmt = FS_FAT32;
 800cc3e:	2303      	movs	r3, #3
 800cc40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc46:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d802      	bhi.n	800cc54 <find_volume+0x2e0>
 800cc4e:	2302      	movs	r3, #2
 800cc50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc56:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d802      	bhi.n	800cc64 <find_volume+0x2f0>
 800cc5e:	2301      	movs	r3, #1
 800cc60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc66:	1c9a      	adds	r2, r3, #2
 800cc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc6a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc70:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cc72:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cc74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc76:	441a      	add	r2, r3
 800cc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc7a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cc7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc80:	441a      	add	r2, r3
 800cc82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc84:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800cc86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc8a:	2b03      	cmp	r3, #3
 800cc8c:	d11e      	bne.n	800cccc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc90:	3330      	adds	r3, #48	@ 0x30
 800cc92:	332a      	adds	r3, #42	@ 0x2a
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fe fc53 	bl	800b540 <ld_word>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d001      	beq.n	800cca4 <find_volume+0x330>
 800cca0:	230d      	movs	r3, #13
 800cca2:	e0a8      	b.n	800cdf6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca6:	891b      	ldrh	r3, [r3, #8]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d001      	beq.n	800ccb0 <find_volume+0x33c>
 800ccac:	230d      	movs	r3, #13
 800ccae:	e0a2      	b.n	800cdf6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb2:	3330      	adds	r3, #48	@ 0x30
 800ccb4:	332c      	adds	r3, #44	@ 0x2c
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7fe fc5a 	bl	800b570 <ld_dword>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ccc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc4:	695b      	ldr	r3, [r3, #20]
 800ccc6:	009b      	lsls	r3, r3, #2
 800ccc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800ccca:	e01f      	b.n	800cd0c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccce:	891b      	ldrh	r3, [r3, #8]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d101      	bne.n	800ccd8 <find_volume+0x364>
 800ccd4:	230d      	movs	r3, #13
 800ccd6:	e08e      	b.n	800cdf6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ccd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccda:	6a1a      	ldr	r2, [r3, #32]
 800ccdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccde:	441a      	add	r2, r3
 800cce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cce4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cce8:	2b02      	cmp	r3, #2
 800ccea:	d103      	bne.n	800ccf4 <find_volume+0x380>
 800ccec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccee:	695b      	ldr	r3, [r3, #20]
 800ccf0:	005b      	lsls	r3, r3, #1
 800ccf2:	e00a      	b.n	800cd0a <find_volume+0x396>
 800ccf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf6:	695a      	ldr	r2, [r3, #20]
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	005b      	lsls	r3, r3, #1
 800ccfc:	4413      	add	r3, r2
 800ccfe:	085a      	lsrs	r2, r3, #1
 800cd00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd02:	695b      	ldr	r3, [r3, #20]
 800cd04:	f003 0301 	and.w	r3, r3, #1
 800cd08:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cd0a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd0e:	699a      	ldr	r2, [r3, #24]
 800cd10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd12:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800cd16:	0a5b      	lsrs	r3, r3, #9
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d201      	bcs.n	800cd20 <find_volume+0x3ac>
 800cd1c:	230d      	movs	r3, #13
 800cd1e:	e06a      	b.n	800cdf6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd22:	f04f 32ff 	mov.w	r2, #4294967295
 800cd26:	611a      	str	r2, [r3, #16]
 800cd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd2a:	691a      	ldr	r2, [r3, #16]
 800cd2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd2e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd32:	2280      	movs	r2, #128	@ 0x80
 800cd34:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cd36:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cd3a:	2b03      	cmp	r3, #3
 800cd3c:	d149      	bne.n	800cdd2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd40:	3330      	adds	r3, #48	@ 0x30
 800cd42:	3330      	adds	r3, #48	@ 0x30
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fe fbfb 	bl	800b540 <ld_word>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d140      	bne.n	800cdd2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cd50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd52:	3301      	adds	r3, #1
 800cd54:	4619      	mov	r1, r3
 800cd56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cd58:	f7fe fea2 	bl	800baa0 <move_window>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d137      	bne.n	800cdd2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd64:	2200      	movs	r2, #0
 800cd66:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6a:	3330      	adds	r3, #48	@ 0x30
 800cd6c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fe fbe5 	bl	800b540 <ld_word>
 800cd76:	4603      	mov	r3, r0
 800cd78:	461a      	mov	r2, r3
 800cd7a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d127      	bne.n	800cdd2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd84:	3330      	adds	r3, #48	@ 0x30
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fe fbf2 	bl	800b570 <ld_dword>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	4a1c      	ldr	r2, [pc, #112]	@ (800ce00 <find_volume+0x48c>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d11e      	bne.n	800cdd2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cd94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd96:	3330      	adds	r3, #48	@ 0x30
 800cd98:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7fe fbe7 	bl	800b570 <ld_dword>
 800cda2:	4603      	mov	r3, r0
 800cda4:	4a17      	ldr	r2, [pc, #92]	@ (800ce04 <find_volume+0x490>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d113      	bne.n	800cdd2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cdaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdac:	3330      	adds	r3, #48	@ 0x30
 800cdae:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7fe fbdc 	bl	800b570 <ld_dword>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdbc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cdbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc0:	3330      	adds	r3, #48	@ 0x30
 800cdc2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7fe fbd2 	bl	800b570 <ld_dword>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cdd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800cdd8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cdda:	4b0b      	ldr	r3, [pc, #44]	@ (800ce08 <find_volume+0x494>)
 800cddc:	881b      	ldrh	r3, [r3, #0]
 800cdde:	3301      	adds	r3, #1
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	4b09      	ldr	r3, [pc, #36]	@ (800ce08 <find_volume+0x494>)
 800cde4:	801a      	strh	r2, [r3, #0]
 800cde6:	4b08      	ldr	r3, [pc, #32]	@ (800ce08 <find_volume+0x494>)
 800cde8:	881a      	ldrh	r2, [r3, #0]
 800cdea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cdee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cdf0:	f7fe fdee 	bl	800b9d0 <clear_lock>
#endif
	return FR_OK;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3758      	adds	r7, #88	@ 0x58
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	41615252 	.word	0x41615252
 800ce04:	61417272 	.word	0x61417272
 800ce08:	20005ddc 	.word	0x20005ddc

0800ce0c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ce16:	2309      	movs	r3, #9
 800ce18:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d01c      	beq.n	800ce5a <validate+0x4e>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d018      	beq.n	800ce5a <validate+0x4e>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d013      	beq.n	800ce5a <validate+0x4e>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	889a      	ldrh	r2, [r3, #4]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	88db      	ldrh	r3, [r3, #6]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d10c      	bne.n	800ce5a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	785b      	ldrb	r3, [r3, #1]
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7fe fadc 	bl	800b404 <disk_status>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	f003 0301 	and.w	r3, r3, #1
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d101      	bne.n	800ce5a <validate+0x4e>
			res = FR_OK;
 800ce56:	2300      	movs	r3, #0
 800ce58:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ce5a:	7bfb      	ldrb	r3, [r7, #15]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d102      	bne.n	800ce66 <validate+0x5a>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	e000      	b.n	800ce68 <validate+0x5c>
 800ce66:	2300      	movs	r3, #0
 800ce68:	683a      	ldr	r2, [r7, #0]
 800ce6a:	6013      	str	r3, [r2, #0]
	return res;
 800ce6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
	...

0800ce78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b088      	sub	sp, #32
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	4613      	mov	r3, r2
 800ce84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ce8a:	f107 0310 	add.w	r3, r7, #16
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7ff fcd5 	bl	800c83e <get_ldnumber>
 800ce94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce96:	69fb      	ldr	r3, [r7, #28]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	da01      	bge.n	800cea0 <f_mount+0x28>
 800ce9c:	230b      	movs	r3, #11
 800ce9e:	e02b      	b.n	800cef8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cea0:	4a17      	ldr	r2, [pc, #92]	@ (800cf00 <f_mount+0x88>)
 800cea2:	69fb      	ldr	r3, [r7, #28]
 800cea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cea8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d005      	beq.n	800cebc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ceb0:	69b8      	ldr	r0, [r7, #24]
 800ceb2:	f7fe fd8d 	bl	800b9d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d002      	beq.n	800cec8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2200      	movs	r2, #0
 800cec6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	490d      	ldr	r1, [pc, #52]	@ (800cf00 <f_mount+0x88>)
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d002      	beq.n	800cede <f_mount+0x66>
 800ced8:	79fb      	ldrb	r3, [r7, #7]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d001      	beq.n	800cee2 <f_mount+0x6a>
 800cede:	2300      	movs	r3, #0
 800cee0:	e00a      	b.n	800cef8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cee2:	f107 010c 	add.w	r1, r7, #12
 800cee6:	f107 0308 	add.w	r3, r7, #8
 800ceea:	2200      	movs	r2, #0
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7ff fd41 	bl	800c974 <find_volume>
 800cef2:	4603      	mov	r3, r0
 800cef4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cef6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3720      	adds	r7, #32
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	20005dd8 	.word	0x20005dd8

0800cf04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b098      	sub	sp, #96	@ 0x60
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d101      	bne.n	800cf1c <f_open+0x18>
 800cf18:	2309      	movs	r3, #9
 800cf1a:	e1a9      	b.n	800d270 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cf1c:	79fb      	ldrb	r3, [r7, #7]
 800cf1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cf22:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cf24:	79fa      	ldrb	r2, [r7, #7]
 800cf26:	f107 0110 	add.w	r1, r7, #16
 800cf2a:	f107 0308 	add.w	r3, r7, #8
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7ff fd20 	bl	800c974 <find_volume>
 800cf34:	4603      	mov	r3, r0
 800cf36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800cf3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f040 818d 	bne.w	800d25e <f_open+0x35a>
		dj.obj.fs = fs;
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cf48:	68ba      	ldr	r2, [r7, #8]
 800cf4a:	f107 0314 	add.w	r3, r7, #20
 800cf4e:	4611      	mov	r1, r2
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7ff fc03 	bl	800c75c <follow_path>
 800cf56:	4603      	mov	r3, r0
 800cf58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cf5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d118      	bne.n	800cf96 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cf64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cf68:	b25b      	sxtb	r3, r3
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	da03      	bge.n	800cf76 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cf6e:	2306      	movs	r3, #6
 800cf70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cf74:	e00f      	b.n	800cf96 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf76:	79fb      	ldrb	r3, [r7, #7]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	bf8c      	ite	hi
 800cf7c:	2301      	movhi	r3, #1
 800cf7e:	2300      	movls	r3, #0
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	461a      	mov	r2, r3
 800cf84:	f107 0314 	add.w	r3, r7, #20
 800cf88:	4611      	mov	r1, r2
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fe fbd8 	bl	800b740 <chk_lock>
 800cf90:	4603      	mov	r3, r0
 800cf92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cf96:	79fb      	ldrb	r3, [r7, #7]
 800cf98:	f003 031c 	and.w	r3, r3, #28
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d07f      	beq.n	800d0a0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800cfa0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d017      	beq.n	800cfd8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cfa8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfac:	2b04      	cmp	r3, #4
 800cfae:	d10e      	bne.n	800cfce <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cfb0:	f7fe fc22 	bl	800b7f8 <enq_lock>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d006      	beq.n	800cfc8 <f_open+0xc4>
 800cfba:	f107 0314 	add.w	r3, r7, #20
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7ff fb06 	bl	800c5d0 <dir_register>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	e000      	b.n	800cfca <f_open+0xc6>
 800cfc8:	2312      	movs	r3, #18
 800cfca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cfce:	79fb      	ldrb	r3, [r7, #7]
 800cfd0:	f043 0308 	orr.w	r3, r3, #8
 800cfd4:	71fb      	strb	r3, [r7, #7]
 800cfd6:	e010      	b.n	800cffa <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cfd8:	7ebb      	ldrb	r3, [r7, #26]
 800cfda:	f003 0311 	and.w	r3, r3, #17
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d003      	beq.n	800cfea <f_open+0xe6>
					res = FR_DENIED;
 800cfe2:	2307      	movs	r3, #7
 800cfe4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cfe8:	e007      	b.n	800cffa <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cfea:	79fb      	ldrb	r3, [r7, #7]
 800cfec:	f003 0304 	and.w	r3, r3, #4
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d002      	beq.n	800cffa <f_open+0xf6>
 800cff4:	2308      	movs	r3, #8
 800cff6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cffa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d168      	bne.n	800d0d4 <f_open+0x1d0>
 800d002:	79fb      	ldrb	r3, [r7, #7]
 800d004:	f003 0308 	and.w	r3, r3, #8
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d063      	beq.n	800d0d4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d00c:	f7fd ffb8 	bl	800af80 <get_fattime>
 800d010:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d014:	330e      	adds	r3, #14
 800d016:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d018:	4618      	mov	r0, r3
 800d01a:	f7fe fae7 	bl	800b5ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d01e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d020:	3316      	adds	r3, #22
 800d022:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d024:	4618      	mov	r0, r3
 800d026:	f7fe fae1 	bl	800b5ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d02a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d02c:	330b      	adds	r3, #11
 800d02e:	2220      	movs	r2, #32
 800d030:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d036:	4611      	mov	r1, r2
 800d038:	4618      	mov	r0, r3
 800d03a:	f7ff fa35 	bl	800c4a8 <ld_clust>
 800d03e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d044:	2200      	movs	r2, #0
 800d046:	4618      	mov	r0, r3
 800d048:	f7ff fa4d 	bl	800c4e6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d04e:	331c      	adds	r3, #28
 800d050:	2100      	movs	r1, #0
 800d052:	4618      	mov	r0, r3
 800d054:	f7fe faca 	bl	800b5ec <st_dword>
					fs->wflag = 1;
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	2201      	movs	r2, #1
 800d05c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d05e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d060:	2b00      	cmp	r3, #0
 800d062:	d037      	beq.n	800d0d4 <f_open+0x1d0>
						dw = fs->winsect;
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d068:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d06a:	f107 0314 	add.w	r3, r7, #20
 800d06e:	2200      	movs	r2, #0
 800d070:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d072:	4618      	mov	r0, r3
 800d074:	f7fe ff60 	bl	800bf38 <remove_chain>
 800d078:	4603      	mov	r3, r0
 800d07a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d07e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d082:	2b00      	cmp	r3, #0
 800d084:	d126      	bne.n	800d0d4 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fe fd08 	bl	800baa0 <move_window>
 800d090:	4603      	mov	r3, r0
 800d092:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d09a:	3a01      	subs	r2, #1
 800d09c:	60da      	str	r2, [r3, #12]
 800d09e:	e019      	b.n	800d0d4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d0a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d115      	bne.n	800d0d4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d0a8:	7ebb      	ldrb	r3, [r7, #26]
 800d0aa:	f003 0310 	and.w	r3, r3, #16
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d003      	beq.n	800d0ba <f_open+0x1b6>
					res = FR_NO_FILE;
 800d0b2:	2304      	movs	r3, #4
 800d0b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d0b8:	e00c      	b.n	800d0d4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d0ba:	79fb      	ldrb	r3, [r7, #7]
 800d0bc:	f003 0302 	and.w	r3, r3, #2
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d007      	beq.n	800d0d4 <f_open+0x1d0>
 800d0c4:	7ebb      	ldrb	r3, [r7, #26]
 800d0c6:	f003 0301 	and.w	r3, r3, #1
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d002      	beq.n	800d0d4 <f_open+0x1d0>
						res = FR_DENIED;
 800d0ce:	2307      	movs	r3, #7
 800d0d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d0d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d126      	bne.n	800d12a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d0dc:	79fb      	ldrb	r3, [r7, #7]
 800d0de:	f003 0308 	and.w	r3, r3, #8
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d003      	beq.n	800d0ee <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d0e6:	79fb      	ldrb	r3, [r7, #7]
 800d0e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d0f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d0fc:	79fb      	ldrb	r3, [r7, #7]
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	bf8c      	ite	hi
 800d102:	2301      	movhi	r3, #1
 800d104:	2300      	movls	r3, #0
 800d106:	b2db      	uxtb	r3, r3
 800d108:	461a      	mov	r2, r3
 800d10a:	f107 0314 	add.w	r3, r7, #20
 800d10e:	4611      	mov	r1, r2
 800d110:	4618      	mov	r0, r3
 800d112:	f7fe fb93 	bl	800b83c <inc_lock>
 800d116:	4602      	mov	r2, r0
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	691b      	ldr	r3, [r3, #16]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d102      	bne.n	800d12a <f_open+0x226>
 800d124:	2302      	movs	r3, #2
 800d126:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d12a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f040 8095 	bne.w	800d25e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d138:	4611      	mov	r1, r2
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7ff f9b4 	bl	800c4a8 <ld_clust>
 800d140:	4602      	mov	r2, r0
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d148:	331c      	adds	r3, #28
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7fe fa10 	bl	800b570 <ld_dword>
 800d150:	4602      	mov	r2, r0
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2200      	movs	r2, #0
 800d15a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d15c:	693a      	ldr	r2, [r7, #16]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	88da      	ldrh	r2, [r3, #6]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	79fa      	ldrb	r2, [r7, #7]
 800d16e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2200      	movs	r2, #0
 800d174:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2200      	movs	r2, #0
 800d17a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2200      	movs	r2, #0
 800d180:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	3330      	adds	r3, #48	@ 0x30
 800d186:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d18a:	2100      	movs	r1, #0
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7fe fa7a 	bl	800b686 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d192:	79fb      	ldrb	r3, [r7, #7]
 800d194:	f003 0320 	and.w	r3, r3, #32
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d060      	beq.n	800d25e <f_open+0x35a>
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d05c      	beq.n	800d25e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	68da      	ldr	r2, [r3, #12]
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	895b      	ldrh	r3, [r3, #10]
 800d1b0:	025b      	lsls	r3, r3, #9
 800d1b2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	689b      	ldr	r3, [r3, #8]
 800d1b8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	657b      	str	r3, [r7, #84]	@ 0x54
 800d1c0:	e016      	b.n	800d1f0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fe fd25 	bl	800bc16 <get_fat>
 800d1cc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d1ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d802      	bhi.n	800d1da <f_open+0x2d6>
 800d1d4:	2302      	movs	r3, #2
 800d1d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d1da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e0:	d102      	bne.n	800d1e8 <f_open+0x2e4>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d1e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d1ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1ec:	1ad3      	subs	r3, r2, r3
 800d1ee:	657b      	str	r3, [r7, #84]	@ 0x54
 800d1f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d103      	bne.n	800d200 <f_open+0x2fc>
 800d1f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d1fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d8e0      	bhi.n	800d1c2 <f_open+0x2be>
				}
				fp->clust = clst;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d204:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d206:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d127      	bne.n	800d25e <f_open+0x35a>
 800d20e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d214:	2b00      	cmp	r3, #0
 800d216:	d022      	beq.n	800d25e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fe fcdb 	bl	800bbd8 <clust2sect>
 800d222:	6478      	str	r0, [r7, #68]	@ 0x44
 800d224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d226:	2b00      	cmp	r3, #0
 800d228:	d103      	bne.n	800d232 <f_open+0x32e>
						res = FR_INT_ERR;
 800d22a:	2302      	movs	r3, #2
 800d22c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d230:	e015      	b.n	800d25e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d234:	0a5a      	lsrs	r2, r3, #9
 800d236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d238:	441a      	add	r2, r3
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	7858      	ldrb	r0, [r3, #1]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	6a1a      	ldr	r2, [r3, #32]
 800d24c:	2301      	movs	r3, #1
 800d24e:	f7fe f919 	bl	800b484 <disk_read>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	d002      	beq.n	800d25e <f_open+0x35a>
 800d258:	2301      	movs	r3, #1
 800d25a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d25e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d262:	2b00      	cmp	r3, #0
 800d264:	d002      	beq.n	800d26c <f_open+0x368>
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2200      	movs	r2, #0
 800d26a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d26c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d270:	4618      	mov	r0, r3
 800d272:	3760      	adds	r7, #96	@ 0x60
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b08e      	sub	sp, #56	@ 0x38
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
 800d284:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	2200      	movs	r2, #0
 800d28e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f107 0214 	add.w	r2, r7, #20
 800d296:	4611      	mov	r1, r2
 800d298:	4618      	mov	r0, r3
 800d29a:	f7ff fdb7 	bl	800ce0c <validate>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d2a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d107      	bne.n	800d2bc <f_read+0x44>
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	7d5b      	ldrb	r3, [r3, #21]
 800d2b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d2b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d002      	beq.n	800d2c2 <f_read+0x4a>
 800d2bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d2c0:	e115      	b.n	800d4ee <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	7d1b      	ldrb	r3, [r3, #20]
 800d2c6:	f003 0301 	and.w	r3, r3, #1
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d101      	bne.n	800d2d2 <f_read+0x5a>
 800d2ce:	2307      	movs	r3, #7
 800d2d0:	e10d      	b.n	800d4ee <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	68da      	ldr	r2, [r3, #12]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	699b      	ldr	r3, [r3, #24]
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	6a3b      	ldr	r3, [r7, #32]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	f240 80fe 	bls.w	800d4e4 <f_read+0x26c>
 800d2e8:	6a3b      	ldr	r3, [r7, #32]
 800d2ea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d2ec:	e0fa      	b.n	800d4e4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	699b      	ldr	r3, [r3, #24]
 800d2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f040 80c6 	bne.w	800d488 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	699b      	ldr	r3, [r3, #24]
 800d300:	0a5b      	lsrs	r3, r3, #9
 800d302:	697a      	ldr	r2, [r7, #20]
 800d304:	8952      	ldrh	r2, [r2, #10]
 800d306:	3a01      	subs	r2, #1
 800d308:	4013      	ands	r3, r2
 800d30a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d12f      	bne.n	800d372 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	699b      	ldr	r3, [r3, #24]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d103      	bne.n	800d322 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d320:	e013      	b.n	800d34a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d326:	2b00      	cmp	r3, #0
 800d328:	d007      	beq.n	800d33a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	699b      	ldr	r3, [r3, #24]
 800d32e:	4619      	mov	r1, r3
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f7fe fefe 	bl	800c132 <clmt_clust>
 800d336:	6338      	str	r0, [r7, #48]	@ 0x30
 800d338:	e007      	b.n	800d34a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d33a:	68fa      	ldr	r2, [r7, #12]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	69db      	ldr	r3, [r3, #28]
 800d340:	4619      	mov	r1, r3
 800d342:	4610      	mov	r0, r2
 800d344:	f7fe fc67 	bl	800bc16 <get_fat>
 800d348:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d804      	bhi.n	800d35a <f_read+0xe2>
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2202      	movs	r2, #2
 800d354:	755a      	strb	r2, [r3, #21]
 800d356:	2302      	movs	r3, #2
 800d358:	e0c9      	b.n	800d4ee <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d360:	d104      	bne.n	800d36c <f_read+0xf4>
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2201      	movs	r2, #1
 800d366:	755a      	strb	r2, [r3, #21]
 800d368:	2301      	movs	r3, #1
 800d36a:	e0c0      	b.n	800d4ee <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d370:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d372:	697a      	ldr	r2, [r7, #20]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	69db      	ldr	r3, [r3, #28]
 800d378:	4619      	mov	r1, r3
 800d37a:	4610      	mov	r0, r2
 800d37c:	f7fe fc2c 	bl	800bbd8 <clust2sect>
 800d380:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d104      	bne.n	800d392 <f_read+0x11a>
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2202      	movs	r2, #2
 800d38c:	755a      	strb	r2, [r3, #21]
 800d38e:	2302      	movs	r3, #2
 800d390:	e0ad      	b.n	800d4ee <f_read+0x276>
			sect += csect;
 800d392:	69ba      	ldr	r2, [r7, #24]
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	4413      	add	r3, r2
 800d398:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	0a5b      	lsrs	r3, r3, #9
 800d39e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d039      	beq.n	800d41a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d3a6:	69fa      	ldr	r2, [r7, #28]
 800d3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3aa:	4413      	add	r3, r2
 800d3ac:	697a      	ldr	r2, [r7, #20]
 800d3ae:	8952      	ldrh	r2, [r2, #10]
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d905      	bls.n	800d3c0 <f_read+0x148>
					cc = fs->csize - csect;
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	895b      	ldrh	r3, [r3, #10]
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	69fb      	ldr	r3, [r7, #28]
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	7858      	ldrb	r0, [r3, #1]
 800d3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3c6:	69ba      	ldr	r2, [r7, #24]
 800d3c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d3ca:	f7fe f85b 	bl	800b484 <disk_read>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d004      	beq.n	800d3de <f_read+0x166>
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	755a      	strb	r2, [r3, #21]
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e087      	b.n	800d4ee <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	7d1b      	ldrb	r3, [r3, #20]
 800d3e2:	b25b      	sxtb	r3, r3
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	da14      	bge.n	800d412 <f_read+0x19a>
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6a1a      	ldr	r2, [r3, #32]
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	1ad3      	subs	r3, r2, r3
 800d3f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d90d      	bls.n	800d412 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6a1a      	ldr	r2, [r3, #32]
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	1ad3      	subs	r3, r2, r3
 800d3fe:	025b      	lsls	r3, r3, #9
 800d400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d402:	18d0      	adds	r0, r2, r3
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	3330      	adds	r3, #48	@ 0x30
 800d408:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d40c:	4619      	mov	r1, r3
 800d40e:	f7fe f919 	bl	800b644 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d414:	025b      	lsls	r3, r3, #9
 800d416:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d418:	e050      	b.n	800d4bc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	6a1b      	ldr	r3, [r3, #32]
 800d41e:	69ba      	ldr	r2, [r7, #24]
 800d420:	429a      	cmp	r2, r3
 800d422:	d02e      	beq.n	800d482 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	7d1b      	ldrb	r3, [r3, #20]
 800d428:	b25b      	sxtb	r3, r3
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	da18      	bge.n	800d460 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	7858      	ldrb	r0, [r3, #1]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6a1a      	ldr	r2, [r3, #32]
 800d43c:	2301      	movs	r3, #1
 800d43e:	f7fe f841 	bl	800b4c4 <disk_write>
 800d442:	4603      	mov	r3, r0
 800d444:	2b00      	cmp	r3, #0
 800d446:	d004      	beq.n	800d452 <f_read+0x1da>
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2201      	movs	r2, #1
 800d44c:	755a      	strb	r2, [r3, #21]
 800d44e:	2301      	movs	r3, #1
 800d450:	e04d      	b.n	800d4ee <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	7d1b      	ldrb	r3, [r3, #20]
 800d456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d45a:	b2da      	uxtb	r2, r3
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	7858      	ldrb	r0, [r3, #1]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d46a:	2301      	movs	r3, #1
 800d46c:	69ba      	ldr	r2, [r7, #24]
 800d46e:	f7fe f809 	bl	800b484 <disk_read>
 800d472:	4603      	mov	r3, r0
 800d474:	2b00      	cmp	r3, #0
 800d476:	d004      	beq.n	800d482 <f_read+0x20a>
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2201      	movs	r2, #1
 800d47c:	755a      	strb	r2, [r3, #21]
 800d47e:	2301      	movs	r3, #1
 800d480:	e035      	b.n	800d4ee <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	69ba      	ldr	r2, [r7, #24]
 800d486:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	699b      	ldr	r3, [r3, #24]
 800d48c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d490:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d494:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d901      	bls.n	800d4a2 <f_read+0x22a>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	699b      	ldr	r3, [r3, #24]
 800d4ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4b0:	4413      	add	r3, r2
 800d4b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d4b8:	f7fe f8c4 	bl	800b644 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d4bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c0:	4413      	add	r3, r2
 800d4c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	699a      	ldr	r2, [r3, #24]
 800d4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ca:	441a      	add	r2, r3
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	619a      	str	r2, [r3, #24]
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d6:	441a      	add	r2, r3
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	601a      	str	r2, [r3, #0]
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e0:	1ad3      	subs	r3, r2, r3
 800d4e2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f47f af01 	bne.w	800d2ee <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d4ec:	2300      	movs	r3, #0
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3738      	adds	r7, #56	@ 0x38
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b08c      	sub	sp, #48	@ 0x30
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	60f8      	str	r0, [r7, #12]
 800d4fe:	60b9      	str	r1, [r7, #8]
 800d500:	607a      	str	r2, [r7, #4]
 800d502:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	2200      	movs	r2, #0
 800d50c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f107 0210 	add.w	r2, r7, #16
 800d514:	4611      	mov	r1, r2
 800d516:	4618      	mov	r0, r3
 800d518:	f7ff fc78 	bl	800ce0c <validate>
 800d51c:	4603      	mov	r3, r0
 800d51e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d522:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d526:	2b00      	cmp	r3, #0
 800d528:	d107      	bne.n	800d53a <f_write+0x44>
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	7d5b      	ldrb	r3, [r3, #21]
 800d52e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d532:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d536:	2b00      	cmp	r3, #0
 800d538:	d002      	beq.n	800d540 <f_write+0x4a>
 800d53a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d53e:	e14b      	b.n	800d7d8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	7d1b      	ldrb	r3, [r3, #20]
 800d544:	f003 0302 	and.w	r3, r3, #2
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d101      	bne.n	800d550 <f_write+0x5a>
 800d54c:	2307      	movs	r3, #7
 800d54e:	e143      	b.n	800d7d8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	699a      	ldr	r2, [r3, #24]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	441a      	add	r2, r3
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	699b      	ldr	r3, [r3, #24]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	f080 812d 	bcs.w	800d7bc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	699b      	ldr	r3, [r3, #24]
 800d566:	43db      	mvns	r3, r3
 800d568:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d56a:	e127      	b.n	800d7bc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	699b      	ldr	r3, [r3, #24]
 800d570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d574:	2b00      	cmp	r3, #0
 800d576:	f040 80e3 	bne.w	800d740 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	699b      	ldr	r3, [r3, #24]
 800d57e:	0a5b      	lsrs	r3, r3, #9
 800d580:	693a      	ldr	r2, [r7, #16]
 800d582:	8952      	ldrh	r2, [r2, #10]
 800d584:	3a01      	subs	r2, #1
 800d586:	4013      	ands	r3, r2
 800d588:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d143      	bne.n	800d618 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	699b      	ldr	r3, [r3, #24]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d10c      	bne.n	800d5b2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	689b      	ldr	r3, [r3, #8]
 800d59c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d11a      	bne.n	800d5da <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7fe fd2a 	bl	800c002 <create_chain>
 800d5ae:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d5b0:	e013      	b.n	800d5da <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d007      	beq.n	800d5ca <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	699b      	ldr	r3, [r3, #24]
 800d5be:	4619      	mov	r1, r3
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f7fe fdb6 	bl	800c132 <clmt_clust>
 800d5c6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d5c8:	e007      	b.n	800d5da <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d5ca:	68fa      	ldr	r2, [r7, #12]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	69db      	ldr	r3, [r3, #28]
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	4610      	mov	r0, r2
 800d5d4:	f7fe fd15 	bl	800c002 <create_chain>
 800d5d8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f000 80f2 	beq.w	800d7c6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d104      	bne.n	800d5f2 <f_write+0xfc>
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2202      	movs	r2, #2
 800d5ec:	755a      	strb	r2, [r3, #21]
 800d5ee:	2302      	movs	r3, #2
 800d5f0:	e0f2      	b.n	800d7d8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f8:	d104      	bne.n	800d604 <f_write+0x10e>
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	755a      	strb	r2, [r3, #21]
 800d600:	2301      	movs	r3, #1
 800d602:	e0e9      	b.n	800d7d8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d608:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d102      	bne.n	800d618 <f_write+0x122>
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d616:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	7d1b      	ldrb	r3, [r3, #20]
 800d61c:	b25b      	sxtb	r3, r3
 800d61e:	2b00      	cmp	r3, #0
 800d620:	da18      	bge.n	800d654 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	7858      	ldrb	r0, [r3, #1]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	6a1a      	ldr	r2, [r3, #32]
 800d630:	2301      	movs	r3, #1
 800d632:	f7fd ff47 	bl	800b4c4 <disk_write>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d004      	beq.n	800d646 <f_write+0x150>
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2201      	movs	r2, #1
 800d640:	755a      	strb	r2, [r3, #21]
 800d642:	2301      	movs	r3, #1
 800d644:	e0c8      	b.n	800d7d8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	7d1b      	ldrb	r3, [r3, #20]
 800d64a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d64e:	b2da      	uxtb	r2, r3
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d654:	693a      	ldr	r2, [r7, #16]
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	69db      	ldr	r3, [r3, #28]
 800d65a:	4619      	mov	r1, r3
 800d65c:	4610      	mov	r0, r2
 800d65e:	f7fe fabb 	bl	800bbd8 <clust2sect>
 800d662:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d104      	bne.n	800d674 <f_write+0x17e>
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2202      	movs	r2, #2
 800d66e:	755a      	strb	r2, [r3, #21]
 800d670:	2302      	movs	r3, #2
 800d672:	e0b1      	b.n	800d7d8 <f_write+0x2e2>
			sect += csect;
 800d674:	697a      	ldr	r2, [r7, #20]
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	4413      	add	r3, r2
 800d67a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	0a5b      	lsrs	r3, r3, #9
 800d680:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d682:	6a3b      	ldr	r3, [r7, #32]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d03c      	beq.n	800d702 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d688:	69ba      	ldr	r2, [r7, #24]
 800d68a:	6a3b      	ldr	r3, [r7, #32]
 800d68c:	4413      	add	r3, r2
 800d68e:	693a      	ldr	r2, [r7, #16]
 800d690:	8952      	ldrh	r2, [r2, #10]
 800d692:	4293      	cmp	r3, r2
 800d694:	d905      	bls.n	800d6a2 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	895b      	ldrh	r3, [r3, #10]
 800d69a:	461a      	mov	r2, r3
 800d69c:	69bb      	ldr	r3, [r7, #24]
 800d69e:	1ad3      	subs	r3, r2, r3
 800d6a0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	7858      	ldrb	r0, [r3, #1]
 800d6a6:	6a3b      	ldr	r3, [r7, #32]
 800d6a8:	697a      	ldr	r2, [r7, #20]
 800d6aa:	69f9      	ldr	r1, [r7, #28]
 800d6ac:	f7fd ff0a 	bl	800b4c4 <disk_write>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d004      	beq.n	800d6c0 <f_write+0x1ca>
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	755a      	strb	r2, [r3, #21]
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e08b      	b.n	800d7d8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6a1a      	ldr	r2, [r3, #32]
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	1ad3      	subs	r3, r2, r3
 800d6c8:	6a3a      	ldr	r2, [r7, #32]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d915      	bls.n	800d6fa <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	6a1a      	ldr	r2, [r3, #32]
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	1ad3      	subs	r3, r2, r3
 800d6dc:	025b      	lsls	r3, r3, #9
 800d6de:	69fa      	ldr	r2, [r7, #28]
 800d6e0:	4413      	add	r3, r2
 800d6e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	f7fd ffac 	bl	800b644 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	7d1b      	ldrb	r3, [r3, #20]
 800d6f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6f4:	b2da      	uxtb	r2, r3
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	025b      	lsls	r3, r3, #9
 800d6fe:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d700:	e03f      	b.n	800d782 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	6a1b      	ldr	r3, [r3, #32]
 800d706:	697a      	ldr	r2, [r7, #20]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d016      	beq.n	800d73a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	699a      	ldr	r2, [r3, #24]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d714:	429a      	cmp	r2, r3
 800d716:	d210      	bcs.n	800d73a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	7858      	ldrb	r0, [r3, #1]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d722:	2301      	movs	r3, #1
 800d724:	697a      	ldr	r2, [r7, #20]
 800d726:	f7fd fead 	bl	800b484 <disk_read>
 800d72a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d004      	beq.n	800d73a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2201      	movs	r2, #1
 800d734:	755a      	strb	r2, [r3, #21]
 800d736:	2301      	movs	r3, #1
 800d738:	e04e      	b.n	800d7d8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	697a      	ldr	r2, [r7, #20]
 800d73e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	699b      	ldr	r3, [r3, #24]
 800d744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d748:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d74c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d74e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	429a      	cmp	r2, r3
 800d754:	d901      	bls.n	800d75a <f_write+0x264>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	699b      	ldr	r3, [r3, #24]
 800d764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d768:	4413      	add	r3, r2
 800d76a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d76c:	69f9      	ldr	r1, [r7, #28]
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fd ff68 	bl	800b644 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	7d1b      	ldrb	r3, [r3, #20]
 800d778:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d77c:	b2da      	uxtb	r2, r3
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d782:	69fa      	ldr	r2, [r7, #28]
 800d784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d786:	4413      	add	r3, r2
 800d788:	61fb      	str	r3, [r7, #28]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	699a      	ldr	r2, [r3, #24]
 800d78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d790:	441a      	add	r2, r3
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	619a      	str	r2, [r3, #24]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	68da      	ldr	r2, [r3, #12]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	699b      	ldr	r3, [r3, #24]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	bf38      	it	cc
 800d7a2:	461a      	movcc	r2, r3
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	60da      	str	r2, [r3, #12]
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ae:	441a      	add	r2, r3
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	601a      	str	r2, [r3, #0]
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b8:	1ad3      	subs	r3, r2, r3
 800d7ba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f47f aed4 	bne.w	800d56c <f_write+0x76>
 800d7c4:	e000      	b.n	800d7c8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d7c6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	7d1b      	ldrb	r3, [r3, #20]
 800d7cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7d0:	b2da      	uxtb	r2, r3
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d7d6:	2300      	movs	r3, #0
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3730      	adds	r7, #48	@ 0x30
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b086      	sub	sp, #24
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f107 0208 	add.w	r2, r7, #8
 800d7ee:	4611      	mov	r1, r2
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7ff fb0b 	bl	800ce0c <validate>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d7fa:	7dfb      	ldrb	r3, [r7, #23]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d168      	bne.n	800d8d2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	7d1b      	ldrb	r3, [r3, #20]
 800d804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d062      	beq.n	800d8d2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	7d1b      	ldrb	r3, [r3, #20]
 800d810:	b25b      	sxtb	r3, r3
 800d812:	2b00      	cmp	r3, #0
 800d814:	da15      	bge.n	800d842 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	7858      	ldrb	r0, [r3, #1]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6a1a      	ldr	r2, [r3, #32]
 800d824:	2301      	movs	r3, #1
 800d826:	f7fd fe4d 	bl	800b4c4 <disk_write>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d001      	beq.n	800d834 <f_sync+0x54>
 800d830:	2301      	movs	r3, #1
 800d832:	e04f      	b.n	800d8d4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	7d1b      	ldrb	r3, [r3, #20]
 800d838:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d83c:	b2da      	uxtb	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d842:	f7fd fb9d 	bl	800af80 <get_fattime>
 800d846:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d848:	68ba      	ldr	r2, [r7, #8]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d84e:	4619      	mov	r1, r3
 800d850:	4610      	mov	r0, r2
 800d852:	f7fe f925 	bl	800baa0 <move_window>
 800d856:	4603      	mov	r3, r0
 800d858:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d85a:	7dfb      	ldrb	r3, [r7, #23]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d138      	bne.n	800d8d2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d864:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	330b      	adds	r3, #11
 800d86a:	781a      	ldrb	r2, [r3, #0]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	330b      	adds	r3, #11
 800d870:	f042 0220 	orr.w	r2, r2, #32
 800d874:	b2d2      	uxtb	r2, r2
 800d876:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6818      	ldr	r0, [r3, #0]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	461a      	mov	r2, r3
 800d882:	68f9      	ldr	r1, [r7, #12]
 800d884:	f7fe fe2f 	bl	800c4e6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f103 021c 	add.w	r2, r3, #28
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	68db      	ldr	r3, [r3, #12]
 800d892:	4619      	mov	r1, r3
 800d894:	4610      	mov	r0, r2
 800d896:	f7fd fea9 	bl	800b5ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	3316      	adds	r3, #22
 800d89e:	6939      	ldr	r1, [r7, #16]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7fd fea3 	bl	800b5ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3312      	adds	r3, #18
 800d8aa:	2100      	movs	r1, #0
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7fd fe82 	bl	800b5b6 <st_word>
					fs->wflag = 1;
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f7fe f91e 	bl	800bafc <sync_fs>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	7d1b      	ldrb	r3, [r3, #20]
 800d8c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8cc:	b2da      	uxtb	r2, r3
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3718      	adds	r7, #24
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b084      	sub	sp, #16
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f7ff ff7b 	bl	800d7e0 <f_sync>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d8ee:	7bfb      	ldrb	r3, [r7, #15]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d118      	bne.n	800d926 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f107 0208 	add.w	r2, r7, #8
 800d8fa:	4611      	mov	r1, r2
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7ff fa85 	bl	800ce0c <validate>
 800d902:	4603      	mov	r3, r0
 800d904:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d906:	7bfb      	ldrb	r3, [r7, #15]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d10c      	bne.n	800d926 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	691b      	ldr	r3, [r3, #16]
 800d910:	4618      	mov	r0, r3
 800d912:	f7fe f821 	bl	800b958 <dec_lock>
 800d916:	4603      	mov	r3, r0
 800d918:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d91a:	7bfb      	ldrb	r3, [r7, #15]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d102      	bne.n	800d926 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2200      	movs	r2, #0
 800d924:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d926:	7bfb      	ldrb	r3, [r7, #15]
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3710      	adds	r7, #16
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b090      	sub	sp, #64	@ 0x40
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f107 0208 	add.w	r2, r7, #8
 800d940:	4611      	mov	r1, r2
 800d942:	4618      	mov	r0, r3
 800d944:	f7ff fa62 	bl	800ce0c <validate>
 800d948:	4603      	mov	r3, r0
 800d94a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d94e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d952:	2b00      	cmp	r3, #0
 800d954:	d103      	bne.n	800d95e <f_lseek+0x2e>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	7d5b      	ldrb	r3, [r3, #21]
 800d95a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d95e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d962:	2b00      	cmp	r3, #0
 800d964:	d002      	beq.n	800d96c <f_lseek+0x3c>
 800d966:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d96a:	e1e6      	b.n	800dd3a <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d970:	2b00      	cmp	r3, #0
 800d972:	f000 80d1 	beq.w	800db18 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d97c:	d15a      	bne.n	800da34 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d982:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d986:	1d1a      	adds	r2, r3, #4
 800d988:	627a      	str	r2, [r7, #36]	@ 0x24
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	617b      	str	r3, [r7, #20]
 800d98e:	2302      	movs	r3, #2
 800d990:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	689b      	ldr	r3, [r3, #8]
 800d996:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d03a      	beq.n	800da14 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a0:	613b      	str	r3, [r7, #16]
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9a8:	3302      	adds	r3, #2
 800d9aa:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ae:	60fb      	str	r3, [r7, #12]
 800d9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fe f92b 	bl	800bc16 <get_fat>
 800d9c0:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d804      	bhi.n	800d9d2 <f_lseek+0xa2>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2202      	movs	r2, #2
 800d9cc:	755a      	strb	r2, [r3, #21]
 800d9ce:	2302      	movs	r3, #2
 800d9d0:	e1b3      	b.n	800dd3a <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d8:	d104      	bne.n	800d9e4 <f_lseek+0xb4>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2201      	movs	r2, #1
 800d9de:	755a      	strb	r2, [r3, #21]
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e1aa      	b.n	800dd3a <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d0de      	beq.n	800d9ac <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d9ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d809      	bhi.n	800da0a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9f8:	1d1a      	adds	r2, r3, #4
 800d9fa:	627a      	str	r2, [r7, #36]	@ 0x24
 800d9fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9fe:	601a      	str	r2, [r3, #0]
 800da00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da02:	1d1a      	adds	r2, r3, #4
 800da04:	627a      	str	r2, [r7, #36]	@ 0x24
 800da06:	693a      	ldr	r2, [r7, #16]
 800da08:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	695b      	ldr	r3, [r3, #20]
 800da0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da10:	429a      	cmp	r2, r3
 800da12:	d3c4      	bcc.n	800d99e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da1a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800da1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	429a      	cmp	r2, r3
 800da22:	d803      	bhi.n	800da2c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800da24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da26:	2200      	movs	r2, #0
 800da28:	601a      	str	r2, [r3, #0]
 800da2a:	e184      	b.n	800dd36 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800da2c:	2311      	movs	r3, #17
 800da2e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800da32:	e180      	b.n	800dd36 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	683a      	ldr	r2, [r7, #0]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d902      	bls.n	800da44 <f_lseek+0x114>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	683a      	ldr	r2, [r7, #0]
 800da48:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	f000 8172 	beq.w	800dd36 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	3b01      	subs	r3, #1
 800da56:	4619      	mov	r1, r3
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7fe fb6a 	bl	800c132 <clmt_clust>
 800da5e:	4602      	mov	r2, r0
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	69db      	ldr	r3, [r3, #28]
 800da6a:	4619      	mov	r1, r3
 800da6c:	4610      	mov	r0, r2
 800da6e:	f7fe f8b3 	bl	800bbd8 <clust2sect>
 800da72:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800da74:	69bb      	ldr	r3, [r7, #24]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d104      	bne.n	800da84 <f_lseek+0x154>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2202      	movs	r2, #2
 800da7e:	755a      	strb	r2, [r3, #21]
 800da80:	2302      	movs	r3, #2
 800da82:	e15a      	b.n	800dd3a <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	3b01      	subs	r3, #1
 800da88:	0a5b      	lsrs	r3, r3, #9
 800da8a:	68ba      	ldr	r2, [r7, #8]
 800da8c:	8952      	ldrh	r2, [r2, #10]
 800da8e:	3a01      	subs	r2, #1
 800da90:	4013      	ands	r3, r2
 800da92:	69ba      	ldr	r2, [r7, #24]
 800da94:	4413      	add	r3, r2
 800da96:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	699b      	ldr	r3, [r3, #24]
 800da9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	f000 8148 	beq.w	800dd36 <f_lseek+0x406>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a1b      	ldr	r3, [r3, #32]
 800daaa:	69ba      	ldr	r2, [r7, #24]
 800daac:	429a      	cmp	r2, r3
 800daae:	f000 8142 	beq.w	800dd36 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	7d1b      	ldrb	r3, [r3, #20]
 800dab6:	b25b      	sxtb	r3, r3
 800dab8:	2b00      	cmp	r3, #0
 800daba:	da18      	bge.n	800daee <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	7858      	ldrb	r0, [r3, #1]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6a1a      	ldr	r2, [r3, #32]
 800daca:	2301      	movs	r3, #1
 800dacc:	f7fd fcfa 	bl	800b4c4 <disk_write>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d004      	beq.n	800dae0 <f_lseek+0x1b0>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2201      	movs	r2, #1
 800dada:	755a      	strb	r2, [r3, #21]
 800dadc:	2301      	movs	r3, #1
 800dade:	e12c      	b.n	800dd3a <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	7d1b      	ldrb	r3, [r3, #20]
 800dae4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dae8:	b2da      	uxtb	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	7858      	ldrb	r0, [r3, #1]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800daf8:	2301      	movs	r3, #1
 800dafa:	69ba      	ldr	r2, [r7, #24]
 800dafc:	f7fd fcc2 	bl	800b484 <disk_read>
 800db00:	4603      	mov	r3, r0
 800db02:	2b00      	cmp	r3, #0
 800db04:	d004      	beq.n	800db10 <f_lseek+0x1e0>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2201      	movs	r2, #1
 800db0a:	755a      	strb	r2, [r3, #21]
 800db0c:	2301      	movs	r3, #1
 800db0e:	e114      	b.n	800dd3a <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	69ba      	ldr	r2, [r7, #24]
 800db14:	621a      	str	r2, [r3, #32]
 800db16:	e10e      	b.n	800dd36 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	683a      	ldr	r2, [r7, #0]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d908      	bls.n	800db34 <f_lseek+0x204>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	7d1b      	ldrb	r3, [r3, #20]
 800db26:	f003 0302 	and.w	r3, r3, #2
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d102      	bne.n	800db34 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	699b      	ldr	r3, [r3, #24]
 800db38:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800db3a:	2300      	movs	r3, #0
 800db3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db42:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	f000 80a7 	beq.w	800dc9a <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	895b      	ldrh	r3, [r3, #10]
 800db50:	025b      	lsls	r3, r3, #9
 800db52:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800db54:	6a3b      	ldr	r3, [r7, #32]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d01b      	beq.n	800db92 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	1e5a      	subs	r2, r3, #1
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	fbb2 f2f3 	udiv	r2, r2, r3
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	1e59      	subs	r1, r3, #1
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800db6e:	429a      	cmp	r2, r3
 800db70:	d30f      	bcc.n	800db92 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800db72:	6a3b      	ldr	r3, [r7, #32]
 800db74:	1e5a      	subs	r2, r3, #1
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	425b      	negs	r3, r3
 800db7a:	401a      	ands	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	699b      	ldr	r3, [r3, #24]
 800db84:	683a      	ldr	r2, [r7, #0]
 800db86:	1ad3      	subs	r3, r2, r3
 800db88:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	69db      	ldr	r3, [r3, #28]
 800db8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800db90:	e022      	b.n	800dbd8 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800db98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d119      	bne.n	800dbd2 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2100      	movs	r1, #0
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fe fa2d 	bl	800c002 <create_chain>
 800dba8:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dbaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d104      	bne.n	800dbba <f_lseek+0x28a>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2202      	movs	r2, #2
 800dbb4:	755a      	strb	r2, [r3, #21]
 800dbb6:	2302      	movs	r3, #2
 800dbb8:	e0bf      	b.n	800dd3a <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dbba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc0:	d104      	bne.n	800dbcc <f_lseek+0x29c>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	755a      	strb	r2, [r3, #21]
 800dbc8:	2301      	movs	r3, #1
 800dbca:	e0b6      	b.n	800dd3a <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbd0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbd6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800dbd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d05d      	beq.n	800dc9a <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800dbde:	e03a      	b.n	800dc56 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800dbe0:	683a      	ldr	r2, [r7, #0]
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	1ad3      	subs	r3, r2, r3
 800dbe6:	603b      	str	r3, [r7, #0]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	699a      	ldr	r2, [r3, #24]
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	441a      	add	r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	7d1b      	ldrb	r3, [r3, #20]
 800dbf8:	f003 0302 	and.w	r3, r3, #2
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00b      	beq.n	800dc18 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7fe f9fc 	bl	800c002 <create_chain>
 800dc0a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800dc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d108      	bne.n	800dc24 <f_lseek+0x2f4>
							ofs = 0; break;
 800dc12:	2300      	movs	r3, #0
 800dc14:	603b      	str	r3, [r7, #0]
 800dc16:	e022      	b.n	800dc5e <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7fd fffa 	bl	800bc16 <get_fat>
 800dc22:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc2a:	d104      	bne.n	800dc36 <f_lseek+0x306>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2201      	movs	r2, #1
 800dc30:	755a      	strb	r2, [r3, #21]
 800dc32:	2301      	movs	r3, #1
 800dc34:	e081      	b.n	800dd3a <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800dc36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d904      	bls.n	800dc46 <f_lseek+0x316>
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	695b      	ldr	r3, [r3, #20]
 800dc40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d304      	bcc.n	800dc50 <f_lseek+0x320>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2202      	movs	r2, #2
 800dc4a:	755a      	strb	r2, [r3, #21]
 800dc4c:	2302      	movs	r3, #2
 800dc4e:	e074      	b.n	800dd3a <f_lseek+0x40a>
					fp->clust = clst;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc54:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800dc56:	683a      	ldr	r2, [r7, #0]
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d8c0      	bhi.n	800dbe0 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	699a      	ldr	r2, [r3, #24]
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	441a      	add	r2, r3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d012      	beq.n	800dc9a <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7fd ffad 	bl	800bbd8 <clust2sect>
 800dc7e:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800dc80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d104      	bne.n	800dc90 <f_lseek+0x360>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2202      	movs	r2, #2
 800dc8a:	755a      	strb	r2, [r3, #21]
 800dc8c:	2302      	movs	r3, #2
 800dc8e:	e054      	b.n	800dd3a <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	0a5b      	lsrs	r3, r3, #9
 800dc94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc96:	4413      	add	r3, r2
 800dc98:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	699a      	ldr	r2, [r3, #24]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d90a      	bls.n	800dcbc <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	699a      	ldr	r2, [r3, #24]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	7d1b      	ldrb	r3, [r3, #20]
 800dcb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcb6:	b2da      	uxtb	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	699b      	ldr	r3, [r3, #24]
 800dcc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d036      	beq.n	800dd36 <f_lseek+0x406>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6a1b      	ldr	r3, [r3, #32]
 800dccc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d031      	beq.n	800dd36 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	7d1b      	ldrb	r3, [r3, #20]
 800dcd6:	b25b      	sxtb	r3, r3
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	da18      	bge.n	800dd0e <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	7858      	ldrb	r0, [r3, #1]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6a1a      	ldr	r2, [r3, #32]
 800dcea:	2301      	movs	r3, #1
 800dcec:	f7fd fbea 	bl	800b4c4 <disk_write>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d004      	beq.n	800dd00 <f_lseek+0x3d0>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	755a      	strb	r2, [r3, #21]
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	e01c      	b.n	800dd3a <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	7d1b      	ldrb	r3, [r3, #20]
 800dd04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd08:	b2da      	uxtb	r2, r3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	7858      	ldrb	r0, [r3, #1]
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dd18:	2301      	movs	r3, #1
 800dd1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd1c:	f7fd fbb2 	bl	800b484 <disk_read>
 800dd20:	4603      	mov	r3, r0
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d004      	beq.n	800dd30 <f_lseek+0x400>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2201      	movs	r2, #1
 800dd2a:	755a      	strb	r2, [r3, #21]
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e004      	b.n	800dd3a <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd34:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800dd36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3740      	adds	r7, #64	@ 0x40
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
	...

0800dd44 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800dd44:	b590      	push	{r4, r7, lr}
 800dd46:	b09d      	sub	sp, #116	@ 0x74
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	607a      	str	r2, [r7, #4]
 800dd4e:	603b      	str	r3, [r7, #0]
 800dd50:	460b      	mov	r3, r1
 800dd52:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800dd54:	2301      	movs	r3, #1
 800dd56:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800dd58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dd5c:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800dd5e:	f107 030c 	add.w	r3, r7, #12
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7fe fd6b 	bl	800c83e <get_ldnumber>
 800dd68:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dd6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	da02      	bge.n	800dd76 <f_mkfs+0x32>
 800dd70:	230b      	movs	r3, #11
 800dd72:	f000 bc0d 	b.w	800e590 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800dd76:	4a94      	ldr	r2, [pc, #592]	@ (800dfc8 <f_mkfs+0x284>)
 800dd78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d005      	beq.n	800dd8e <f_mkfs+0x4a>
 800dd82:	4a91      	ldr	r2, [pc, #580]	@ (800dfc8 <f_mkfs+0x284>)
 800dd84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800dd8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd90:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800dd94:	2300      	movs	r3, #0
 800dd96:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800dd9a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7fd fb4a 	bl	800b438 <disk_initialize>
 800dda4:	4603      	mov	r3, r0
 800dda6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800ddaa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ddae:	f003 0301 	and.w	r3, r3, #1
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d001      	beq.n	800ddba <f_mkfs+0x76>
 800ddb6:	2303      	movs	r3, #3
 800ddb8:	e3ea      	b.n	800e590 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800ddba:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ddbe:	f003 0304 	and.w	r3, r3, #4
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d001      	beq.n	800ddca <f_mkfs+0x86>
 800ddc6:	230a      	movs	r3, #10
 800ddc8:	e3e2      	b.n	800e590 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800ddca:	f107 0214 	add.w	r2, r7, #20
 800ddce:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ddd2:	2103      	movs	r1, #3
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7fd fb95 	bl	800b504 <disk_ioctl>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d10c      	bne.n	800ddfa <f_mkfs+0xb6>
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d009      	beq.n	800ddfa <f_mkfs+0xb6>
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ddec:	d805      	bhi.n	800ddfa <f_mkfs+0xb6>
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	1e5a      	subs	r2, r3, #1
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	4013      	ands	r3, r2
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d001      	beq.n	800ddfe <f_mkfs+0xba>
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800ddfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de02:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d003      	beq.n	800de12 <f_mkfs+0xce>
 800de0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d309      	bcc.n	800de26 <f_mkfs+0xe2>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800de18:	d805      	bhi.n	800de26 <f_mkfs+0xe2>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	1e5a      	subs	r2, r3, #1
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4013      	ands	r3, r2
 800de22:	2b00      	cmp	r3, #0
 800de24:	d001      	beq.n	800de2a <f_mkfs+0xe6>
 800de26:	2313      	movs	r3, #19
 800de28:	e3b2      	b.n	800e590 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800de2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800de32:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800de38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800de3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800de3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800de42:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800de44:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800de46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de48:	fb02 f303 	mul.w	r3, r2, r3
 800de4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800de4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de50:	2b00      	cmp	r3, #0
 800de52:	d101      	bne.n	800de58 <f_mkfs+0x114>
 800de54:	230e      	movs	r3, #14
 800de56:	e39b      	b.n	800e590 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800de58:	f107 0210 	add.w	r2, r7, #16
 800de5c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800de60:	2101      	movs	r1, #1
 800de62:	4618      	mov	r0, r3
 800de64:	f7fd fb4e 	bl	800b504 <disk_ioctl>
 800de68:	4603      	mov	r3, r0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d001      	beq.n	800de72 <f_mkfs+0x12e>
 800de6e:	2301      	movs	r3, #1
 800de70:	e38e      	b.n	800e590 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800de72:	7afb      	ldrb	r3, [r7, #11]
 800de74:	f003 0308 	and.w	r3, r3, #8
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d001      	beq.n	800de80 <f_mkfs+0x13c>
 800de7c:	2300      	movs	r3, #0
 800de7e:	e000      	b.n	800de82 <f_mkfs+0x13e>
 800de80:	233f      	movs	r3, #63	@ 0x3f
 800de82:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de88:	429a      	cmp	r2, r3
 800de8a:	d901      	bls.n	800de90 <f_mkfs+0x14c>
 800de8c:	230e      	movs	r3, #14
 800de8e:	e37f      	b.n	800e590 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800de90:	693a      	ldr	r2, [r7, #16]
 800de92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de94:	1ad3      	subs	r3, r2, r3
 800de96:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	2b7f      	cmp	r3, #127	@ 0x7f
 800de9c:	d801      	bhi.n	800dea2 <f_mkfs+0x15e>
 800de9e:	230e      	movs	r3, #14
 800dea0:	e376      	b.n	800e590 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2b80      	cmp	r3, #128	@ 0x80
 800dea6:	d901      	bls.n	800deac <f_mkfs+0x168>
 800dea8:	2313      	movs	r3, #19
 800deaa:	e371      	b.n	800e590 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800deac:	7afb      	ldrb	r3, [r7, #11]
 800deae:	f003 0302 	and.w	r3, r3, #2
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00d      	beq.n	800ded2 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800deb6:	7afb      	ldrb	r3, [r7, #11]
 800deb8:	f003 0307 	and.w	r3, r3, #7
 800debc:	2b02      	cmp	r3, #2
 800debe:	d004      	beq.n	800deca <f_mkfs+0x186>
 800dec0:	7afb      	ldrb	r3, [r7, #11]
 800dec2:	f003 0301 	and.w	r3, r3, #1
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d103      	bne.n	800ded2 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800deca:	2303      	movs	r3, #3
 800decc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800ded0:	e009      	b.n	800dee6 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800ded2:	7afb      	ldrb	r3, [r7, #11]
 800ded4:	f003 0301 	and.w	r3, r3, #1
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d101      	bne.n	800dee0 <f_mkfs+0x19c>
 800dedc:	2313      	movs	r3, #19
 800dede:	e357      	b.n	800e590 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800dee0:	2302      	movs	r3, #2
 800dee2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800deea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800deee:	2b03      	cmp	r3, #3
 800def0:	d13c      	bne.n	800df6c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800def2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800def4:	2b00      	cmp	r3, #0
 800def6:	d11b      	bne.n	800df30 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	0c5b      	lsrs	r3, r3, #17
 800defc:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800defe:	2300      	movs	r3, #0
 800df00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df02:	2301      	movs	r3, #1
 800df04:	653b      	str	r3, [r7, #80]	@ 0x50
 800df06:	e005      	b.n	800df14 <f_mkfs+0x1d0>
 800df08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df0a:	3301      	adds	r3, #1
 800df0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df10:	005b      	lsls	r3, r3, #1
 800df12:	653b      	str	r3, [r7, #80]	@ 0x50
 800df14:	4a2d      	ldr	r2, [pc, #180]	@ (800dfcc <f_mkfs+0x288>)
 800df16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d007      	beq.n	800df30 <f_mkfs+0x1ec>
 800df20:	4a2a      	ldr	r2, [pc, #168]	@ (800dfcc <f_mkfs+0x288>)
 800df22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df28:	461a      	mov	r2, r3
 800df2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d2eb      	bcs.n	800df08 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800df30:	693a      	ldr	r2, [r7, #16]
 800df32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df34:	fbb2 f3f3 	udiv	r3, r2, r3
 800df38:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800df3a:	6a3b      	ldr	r3, [r7, #32]
 800df3c:	3302      	adds	r3, #2
 800df3e:	009a      	lsls	r2, r3, #2
 800df40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800df42:	4413      	add	r3, r2
 800df44:	1e5a      	subs	r2, r3, #1
 800df46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800df48:	fbb2 f3f3 	udiv	r3, r2, r3
 800df4c:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800df4e:	2320      	movs	r3, #32
 800df50:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 800df52:	2300      	movs	r3, #0
 800df54:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800df56:	6a3b      	ldr	r3, [r7, #32]
 800df58:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d903      	bls.n	800df68 <f_mkfs+0x224>
 800df60:	6a3b      	ldr	r3, [r7, #32]
 800df62:	4a1b      	ldr	r2, [pc, #108]	@ (800dfd0 <f_mkfs+0x28c>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d952      	bls.n	800e00e <f_mkfs+0x2ca>
 800df68:	230e      	movs	r3, #14
 800df6a:	e311      	b.n	800e590 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800df6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d11b      	bne.n	800dfaa <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	0b1b      	lsrs	r3, r3, #12
 800df76:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800df78:	2300      	movs	r3, #0
 800df7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df7c:	2301      	movs	r3, #1
 800df7e:	653b      	str	r3, [r7, #80]	@ 0x50
 800df80:	e005      	b.n	800df8e <f_mkfs+0x24a>
 800df82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df84:	3301      	adds	r3, #1
 800df86:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df8a:	005b      	lsls	r3, r3, #1
 800df8c:	653b      	str	r3, [r7, #80]	@ 0x50
 800df8e:	4a11      	ldr	r2, [pc, #68]	@ (800dfd4 <f_mkfs+0x290>)
 800df90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d007      	beq.n	800dfaa <f_mkfs+0x266>
 800df9a:	4a0e      	ldr	r2, [pc, #56]	@ (800dfd4 <f_mkfs+0x290>)
 800df9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d2eb      	bcs.n	800df82 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800dfaa:	693a      	ldr	r2, [r7, #16]
 800dfac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfae:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfb2:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800dfb4:	6a3b      	ldr	r3, [r7, #32]
 800dfb6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d90c      	bls.n	800dfd8 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800dfbe:	6a3b      	ldr	r3, [r7, #32]
 800dfc0:	3302      	adds	r3, #2
 800dfc2:	005b      	lsls	r3, r3, #1
 800dfc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dfc6:	e012      	b.n	800dfee <f_mkfs+0x2aa>
 800dfc8:	20005dd8 	.word	0x20005dd8
 800dfcc:	08014c64 	.word	0x08014c64
 800dfd0:	0ffffff5 	.word	0x0ffffff5
 800dfd4:	08014c74 	.word	0x08014c74
				} else {
					fmt = FS_FAT12;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800dfde:	6a3a      	ldr	r2, [r7, #32]
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	005b      	lsls	r3, r3, #1
 800dfe4:	4413      	add	r3, r2
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	085b      	lsrs	r3, r3, #1
 800dfea:	3303      	adds	r3, #3
 800dfec:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800dfee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dff0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dff2:	4413      	add	r3, r2
 800dff4:	1e5a      	subs	r2, r3, #1
 800dff6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dff8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dffc:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800dffe:	2301      	movs	r3, #1
 800e000:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800e002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e004:	015a      	lsls	r2, r3, #5
 800e006:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e008:	fbb2 f3f3 	udiv	r3, r2, r3
 800e00c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800e00e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e012:	4413      	add	r3, r2
 800e014:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800e016:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e018:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e01a:	fb03 f202 	mul.w	r2, r3, r2
 800e01e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e020:	4413      	add	r3, r2
 800e022:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e024:	4413      	add	r3, r2
 800e026:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800e028:	697a      	ldr	r2, [r7, #20]
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	4413      	add	r3, r2
 800e02e:	1e5a      	subs	r2, r3, #1
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	425b      	negs	r3, r3
 800e034:	401a      	ands	r2, r3
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	1ad3      	subs	r3, r2, r3
 800e03a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800e03c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e040:	2b03      	cmp	r3, #3
 800e042:	d108      	bne.n	800e056 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800e044:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e046:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e048:	4413      	add	r3, r2
 800e04a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e04c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e04e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e050:	4413      	add	r3, r2
 800e052:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e054:	e006      	b.n	800e064 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800e056:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e05a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e05e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e060:	4413      	add	r3, r2
 800e062:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800e064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e066:	011a      	lsls	r2, r3, #4
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	441a      	add	r2, r3
 800e06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e06e:	1ad2      	subs	r2, r2, r3
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	429a      	cmp	r2, r3
 800e074:	d901      	bls.n	800e07a <f_mkfs+0x336>
 800e076:	230e      	movs	r3, #14
 800e078:	e28a      	b.n	800e590 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800e07a:	693a      	ldr	r2, [r7, #16]
 800e07c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e07e:	1ad2      	subs	r2, r2, r3
 800e080:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e082:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e084:	fb01 f303 	mul.w	r3, r1, r3
 800e088:	1ad2      	subs	r2, r2, r3
 800e08a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e08c:	1ad2      	subs	r2, r2, r3
 800e08e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e090:	fbb2 f3f3 	udiv	r3, r2, r3
 800e094:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800e096:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e09a:	2b03      	cmp	r3, #3
 800e09c:	d10f      	bne.n	800e0be <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800e09e:	6a3b      	ldr	r3, [r7, #32]
 800e0a0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d80a      	bhi.n	800e0be <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d105      	bne.n	800e0ba <f_mkfs+0x376>
 800e0ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0b0:	085b      	lsrs	r3, r3, #1
 800e0b2:	607b      	str	r3, [r7, #4]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d144      	bne.n	800e144 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800e0ba:	230e      	movs	r3, #14
 800e0bc:	e268      	b.n	800e590 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800e0be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e0c2:	2b02      	cmp	r3, #2
 800e0c4:	d133      	bne.n	800e12e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800e0c6:	6a3b      	ldr	r3, [r7, #32]
 800e0c8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	d91e      	bls.n	800e10e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d107      	bne.n	800e0e6 <f_mkfs+0x3a2>
 800e0d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0d8:	005b      	lsls	r3, r3, #1
 800e0da:	2b40      	cmp	r3, #64	@ 0x40
 800e0dc:	d803      	bhi.n	800e0e6 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800e0de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0e0:	005b      	lsls	r3, r3, #1
 800e0e2:	607b      	str	r3, [r7, #4]
 800e0e4:	e033      	b.n	800e14e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800e0e6:	7afb      	ldrb	r3, [r7, #11]
 800e0e8:	f003 0302 	and.w	r3, r3, #2
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d003      	beq.n	800e0f8 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800e0f0:	2303      	movs	r3, #3
 800e0f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e0f6:	e02a      	b.n	800e14e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d105      	bne.n	800e10a <f_mkfs+0x3c6>
 800e0fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e100:	005b      	lsls	r3, r3, #1
 800e102:	607b      	str	r3, [r7, #4]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2b80      	cmp	r3, #128	@ 0x80
 800e108:	d91e      	bls.n	800e148 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800e10a:	230e      	movs	r3, #14
 800e10c:	e240      	b.n	800e590 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800e10e:	6a3b      	ldr	r3, [r7, #32]
 800e110:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e114:	4293      	cmp	r3, r2
 800e116:	d80a      	bhi.n	800e12e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d105      	bne.n	800e12a <f_mkfs+0x3e6>
 800e11e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e120:	005b      	lsls	r3, r3, #1
 800e122:	607b      	str	r3, [r7, #4]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2b80      	cmp	r3, #128	@ 0x80
 800e128:	d910      	bls.n	800e14c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800e12a:	230e      	movs	r3, #14
 800e12c:	e230      	b.n	800e590 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800e12e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e132:	2b01      	cmp	r3, #1
 800e134:	d10c      	bne.n	800e150 <f_mkfs+0x40c>
 800e136:	6a3b      	ldr	r3, [r7, #32]
 800e138:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d907      	bls.n	800e150 <f_mkfs+0x40c>
 800e140:	230e      	movs	r3, #14
 800e142:	e225      	b.n	800e590 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e144:	bf00      	nop
 800e146:	e6ce      	b.n	800dee6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e148:	bf00      	nop
 800e14a:	e6cc      	b.n	800dee6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e14c:	bf00      	nop
			pau = au;
 800e14e:	e6ca      	b.n	800dee6 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800e150:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800e152:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e154:	461a      	mov	r2, r3
 800e156:	2100      	movs	r1, #0
 800e158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e15a:	f7fd fa94 	bl	800b686 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800e15e:	220b      	movs	r2, #11
 800e160:	49b2      	ldr	r1, [pc, #712]	@ (800e42c <f_mkfs+0x6e8>)
 800e162:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e164:	f7fd fa6e 	bl	800b644 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800e168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e16a:	330b      	adds	r3, #11
 800e16c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e16e:	4611      	mov	r1, r2
 800e170:	4618      	mov	r0, r3
 800e172:	f7fd fa20 	bl	800b5b6 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800e176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e178:	330d      	adds	r3, #13
 800e17a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e17c:	b2d2      	uxtb	r2, r2
 800e17e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800e180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e182:	330e      	adds	r3, #14
 800e184:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e186:	b292      	uxth	r2, r2
 800e188:	4611      	mov	r1, r2
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fd fa13 	bl	800b5b6 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800e190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e192:	3310      	adds	r3, #16
 800e194:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e196:	b2d2      	uxtb	r2, r2
 800e198:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800e19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19c:	f103 0211 	add.w	r2, r3, #17
 800e1a0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e1a4:	2b03      	cmp	r3, #3
 800e1a6:	d002      	beq.n	800e1ae <f_mkfs+0x46a>
 800e1a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	e000      	b.n	800e1b0 <f_mkfs+0x46c>
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	4610      	mov	r0, r2
 800e1b4:	f7fd f9ff 	bl	800b5b6 <st_word>
		if (sz_vol < 0x10000) {
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1be:	d208      	bcs.n	800e1d2 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800e1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c2:	3313      	adds	r3, #19
 800e1c4:	693a      	ldr	r2, [r7, #16]
 800e1c6:	b292      	uxth	r2, r2
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7fd f9f3 	bl	800b5b6 <st_word>
 800e1d0:	e006      	b.n	800e1e0 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800e1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d4:	3320      	adds	r3, #32
 800e1d6:	693a      	ldr	r2, [r7, #16]
 800e1d8:	4611      	mov	r1, r2
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fd fa06 	bl	800b5ec <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800e1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e2:	3315      	adds	r3, #21
 800e1e4:	22f8      	movs	r2, #248	@ 0xf8
 800e1e6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800e1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ea:	3318      	adds	r3, #24
 800e1ec:	213f      	movs	r1, #63	@ 0x3f
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fd f9e1 	bl	800b5b6 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800e1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f6:	331a      	adds	r3, #26
 800e1f8:	21ff      	movs	r1, #255	@ 0xff
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7fd f9db 	bl	800b5b6 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800e200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e202:	331c      	adds	r3, #28
 800e204:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e206:	4618      	mov	r0, r3
 800e208:	f7fd f9f0 	bl	800b5ec <st_dword>
		if (fmt == FS_FAT32) {
 800e20c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e210:	2b03      	cmp	r3, #3
 800e212:	d131      	bne.n	800e278 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800e214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e216:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800e21a:	f7fc feb1 	bl	800af80 <get_fattime>
 800e21e:	4603      	mov	r3, r0
 800e220:	4619      	mov	r1, r3
 800e222:	4620      	mov	r0, r4
 800e224:	f7fd f9e2 	bl	800b5ec <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800e228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e22a:	3324      	adds	r3, #36	@ 0x24
 800e22c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fd f9dc 	bl	800b5ec <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800e234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e236:	332c      	adds	r3, #44	@ 0x2c
 800e238:	2102      	movs	r1, #2
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7fd f9d6 	bl	800b5ec <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800e240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e242:	3330      	adds	r3, #48	@ 0x30
 800e244:	2101      	movs	r1, #1
 800e246:	4618      	mov	r0, r3
 800e248:	f7fd f9b5 	bl	800b5b6 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800e24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e24e:	3332      	adds	r3, #50	@ 0x32
 800e250:	2106      	movs	r1, #6
 800e252:	4618      	mov	r0, r3
 800e254:	f7fd f9af 	bl	800b5b6 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800e258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25a:	3340      	adds	r3, #64	@ 0x40
 800e25c:	2280      	movs	r2, #128	@ 0x80
 800e25e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800e260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e262:	3342      	adds	r3, #66	@ 0x42
 800e264:	2229      	movs	r2, #41	@ 0x29
 800e266:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800e268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e26a:	3347      	adds	r3, #71	@ 0x47
 800e26c:	2213      	movs	r2, #19
 800e26e:	4970      	ldr	r1, [pc, #448]	@ (800e430 <f_mkfs+0x6ec>)
 800e270:	4618      	mov	r0, r3
 800e272:	f7fd f9e7 	bl	800b644 <mem_cpy>
 800e276:	e020      	b.n	800e2ba <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800e278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e27a:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800e27e:	f7fc fe7f 	bl	800af80 <get_fattime>
 800e282:	4603      	mov	r3, r0
 800e284:	4619      	mov	r1, r3
 800e286:	4620      	mov	r0, r4
 800e288:	f7fd f9b0 	bl	800b5ec <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800e28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e28e:	3316      	adds	r3, #22
 800e290:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e292:	b292      	uxth	r2, r2
 800e294:	4611      	mov	r1, r2
 800e296:	4618      	mov	r0, r3
 800e298:	f7fd f98d 	bl	800b5b6 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800e29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e29e:	3324      	adds	r3, #36	@ 0x24
 800e2a0:	2280      	movs	r2, #128	@ 0x80
 800e2a2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800e2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2a6:	3326      	adds	r3, #38	@ 0x26
 800e2a8:	2229      	movs	r2, #41	@ 0x29
 800e2aa:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800e2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ae:	332b      	adds	r3, #43	@ 0x2b
 800e2b0:	2213      	movs	r2, #19
 800e2b2:	4960      	ldr	r1, [pc, #384]	@ (800e434 <f_mkfs+0x6f0>)
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7fd f9c5 	bl	800b644 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2bc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e2c0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7fd f976 	bl	800b5b6 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800e2ca:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e2d4:	f7fd f8f6 	bl	800b4c4 <disk_write>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d001      	beq.n	800e2e2 <f_mkfs+0x59e>
 800e2de:	2301      	movs	r3, #1
 800e2e0:	e156      	b.n	800e590 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800e2e2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e2e6:	2b03      	cmp	r3, #3
 800e2e8:	d140      	bne.n	800e36c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800e2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ec:	1d9a      	adds	r2, r3, #6
 800e2ee:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e2f6:	f7fd f8e5 	bl	800b4c4 <disk_write>
			mem_set(buf, 0, ss);
 800e2fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	2100      	movs	r1, #0
 800e300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e302:	f7fd f9c0 	bl	800b686 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800e306:	494c      	ldr	r1, [pc, #304]	@ (800e438 <f_mkfs+0x6f4>)
 800e308:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e30a:	f7fd f96f 	bl	800b5ec <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800e30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e310:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e314:	4949      	ldr	r1, [pc, #292]	@ (800e43c <f_mkfs+0x6f8>)
 800e316:	4618      	mov	r0, r3
 800e318:	f7fd f968 	bl	800b5ec <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800e31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e31e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e322:	6a3b      	ldr	r3, [r7, #32]
 800e324:	3b01      	subs	r3, #1
 800e326:	4619      	mov	r1, r3
 800e328:	4610      	mov	r0, r2
 800e32a:	f7fd f95f 	bl	800b5ec <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800e32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e330:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e334:	2102      	movs	r1, #2
 800e336:	4618      	mov	r0, r3
 800e338:	f7fd f958 	bl	800b5ec <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800e33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e33e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e342:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e346:	4618      	mov	r0, r3
 800e348:	f7fd f935 	bl	800b5b6 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800e34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e34e:	1dda      	adds	r2, r3, #7
 800e350:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e354:	2301      	movs	r3, #1
 800e356:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e358:	f7fd f8b4 	bl	800b4c4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800e35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e35e:	1c5a      	adds	r2, r3, #1
 800e360:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e364:	2301      	movs	r3, #1
 800e366:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e368:	f7fd f8ac 	bl	800b4c4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800e36c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e36e:	2100      	movs	r1, #0
 800e370:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e372:	f7fd f988 	bl	800b686 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800e376:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e378:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e37a:	2300      	movs	r3, #0
 800e37c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e37e:	e04b      	b.n	800e418 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800e380:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e384:	2b03      	cmp	r3, #3
 800e386:	d113      	bne.n	800e3b0 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800e388:	f06f 0107 	mvn.w	r1, #7
 800e38c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e38e:	f7fd f92d 	bl	800b5ec <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800e392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e394:	3304      	adds	r3, #4
 800e396:	f04f 31ff 	mov.w	r1, #4294967295
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7fd f926 	bl	800b5ec <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800e3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3a2:	3308      	adds	r3, #8
 800e3a4:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7fd f91f 	bl	800b5ec <st_dword>
 800e3ae:	e00b      	b.n	800e3c8 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800e3b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d101      	bne.n	800e3bc <f_mkfs+0x678>
 800e3b8:	4b21      	ldr	r3, [pc, #132]	@ (800e440 <f_mkfs+0x6fc>)
 800e3ba:	e001      	b.n	800e3c0 <f_mkfs+0x67c>
 800e3bc:	f06f 0307 	mvn.w	r3, #7
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e3c4:	f7fd f912 	bl	800b5ec <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800e3c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e3ca:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800e3cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	bf28      	it	cs
 800e3d4:	4613      	movcs	r3, r2
 800e3d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e3d8:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e3dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e3e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e3e2:	f7fd f86f 	bl	800b4c4 <disk_write>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d001      	beq.n	800e3f0 <f_mkfs+0x6ac>
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e0cf      	b.n	800e590 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800e3f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	2100      	movs	r1, #0
 800e3f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e3f8:	f7fd f945 	bl	800b686 <mem_set>
				sect += n; nsect -= n;
 800e3fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e3fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e400:	4413      	add	r3, r2
 800e402:	667b      	str	r3, [r7, #100]	@ 0x64
 800e404:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e408:	1ad3      	subs	r3, r2, r3
 800e40a:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 800e40c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1dc      	bne.n	800e3cc <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e414:	3301      	adds	r3, #1
 800e416:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e418:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e41a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d3af      	bcc.n	800e380 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800e420:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e424:	2b03      	cmp	r3, #3
 800e426:	d10d      	bne.n	800e444 <f_mkfs+0x700>
 800e428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e42a:	e00c      	b.n	800e446 <f_mkfs+0x702>
 800e42c:	08014b4c 	.word	0x08014b4c
 800e430:	08014b58 	.word	0x08014b58
 800e434:	08014b6c 	.word	0x08014b6c
 800e438:	41615252 	.word	0x41615252
 800e43c:	61417272 	.word	0x61417272
 800e440:	00fffff8 	.word	0x00fffff8
 800e444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e446:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800e448:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e44c:	4293      	cmp	r3, r2
 800e44e:	bf28      	it	cs
 800e450:	4613      	movcs	r3, r2
 800e452:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e454:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e458:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e45a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e45c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e45e:	f7fd f831 	bl	800b4c4 <disk_write>
 800e462:	4603      	mov	r3, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d001      	beq.n	800e46c <f_mkfs+0x728>
 800e468:	2301      	movs	r3, #1
 800e46a:	e091      	b.n	800e590 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800e46c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e46e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e470:	4413      	add	r3, r2
 800e472:	667b      	str	r3, [r7, #100]	@ 0x64
 800e474:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e478:	1ad3      	subs	r3, r2, r3
 800e47a:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 800e47c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d1e2      	bne.n	800e448 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800e482:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e486:	2b03      	cmp	r3, #3
 800e488:	d103      	bne.n	800e492 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800e48a:	230c      	movs	r3, #12
 800e48c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800e490:	e010      	b.n	800e4b4 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e498:	d303      	bcc.n	800e4a2 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800e49a:	2306      	movs	r3, #6
 800e49c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800e4a0:	e008      	b.n	800e4b4 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800e4a2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e4a6:	2b02      	cmp	r3, #2
 800e4a8:	d101      	bne.n	800e4ae <f_mkfs+0x76a>
 800e4aa:	2304      	movs	r3, #4
 800e4ac:	e000      	b.n	800e4b0 <f_mkfs+0x76c>
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800e4b4:	7afb      	ldrb	r3, [r7, #11]
 800e4b6:	f003 0308 	and.w	r3, r3, #8
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d15b      	bne.n	800e576 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800e4be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	2100      	movs	r1, #0
 800e4c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e4c6:	f7fd f8de 	bl	800b686 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800e4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4cc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e4d0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7fd f86e 	bl	800b5b6 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800e4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4dc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e4e0:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	3302      	adds	r3, #2
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	3303      	adds	r3, #3
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	3304      	adds	r3, #4
 800e504:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800e508:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800e50a:	693a      	ldr	r2, [r7, #16]
 800e50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e50e:	441a      	add	r2, r3
 800e510:	4b21      	ldr	r3, [pc, #132]	@ (800e598 <f_mkfs+0x854>)
 800e512:	fba3 1302 	umull	r1, r3, r3, r2
 800e516:	1ad2      	subs	r2, r2, r3
 800e518:	0852      	lsrs	r2, r2, #1
 800e51a:	4413      	add	r3, r2
 800e51c:	0b5b      	lsrs	r3, r3, #13
 800e51e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800e520:	69bb      	ldr	r3, [r7, #24]
 800e522:	3305      	adds	r3, #5
 800e524:	22fe      	movs	r2, #254	@ 0xfe
 800e526:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800e528:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e52a:	089b      	lsrs	r3, r3, #2
 800e52c:	b2da      	uxtb	r2, r3
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	3306      	adds	r3, #6
 800e532:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800e536:	b2d2      	uxtb	r2, r2
 800e538:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800e53a:	69bb      	ldr	r3, [r7, #24]
 800e53c:	3307      	adds	r3, #7
 800e53e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e540:	b2d2      	uxtb	r2, r2
 800e542:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	3308      	adds	r3, #8
 800e548:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fd f84e 	bl	800b5ec <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800e550:	69bb      	ldr	r3, [r7, #24]
 800e552:	330c      	adds	r3, #12
 800e554:	693a      	ldr	r2, [r7, #16]
 800e556:	4611      	mov	r1, r2
 800e558:	4618      	mov	r0, r3
 800e55a:	f7fd f847 	bl	800b5ec <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800e55e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e562:	2301      	movs	r3, #1
 800e564:	2200      	movs	r2, #0
 800e566:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e568:	f7fc ffac 	bl	800b4c4 <disk_write>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d001      	beq.n	800e576 <f_mkfs+0x832>
 800e572:	2301      	movs	r3, #1
 800e574:	e00c      	b.n	800e590 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800e576:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e57a:	2200      	movs	r2, #0
 800e57c:	2100      	movs	r1, #0
 800e57e:	4618      	mov	r0, r3
 800e580:	f7fc ffc0 	bl	800b504 <disk_ioctl>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d001      	beq.n	800e58e <f_mkfs+0x84a>
 800e58a:	2301      	movs	r3, #1
 800e58c:	e000      	b.n	800e590 <f_mkfs+0x84c>

	return FR_OK;
 800e58e:	2300      	movs	r3, #0
}
 800e590:	4618      	mov	r0, r3
 800e592:	3774      	adds	r7, #116	@ 0x74
 800e594:	46bd      	mov	sp, r7
 800e596:	bd90      	pop	{r4, r7, pc}
 800e598:	0515565b 	.word	0x0515565b

0800e59c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b087      	sub	sp, #28
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	60b9      	str	r1, [r7, #8]
 800e5a6:	4613      	mov	r3, r2
 800e5a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e5b2:	4b1f      	ldr	r3, [pc, #124]	@ (800e630 <FATFS_LinkDriverEx+0x94>)
 800e5b4:	7a5b      	ldrb	r3, [r3, #9]
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d131      	bne.n	800e620 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e5bc:	4b1c      	ldr	r3, [pc, #112]	@ (800e630 <FATFS_LinkDriverEx+0x94>)
 800e5be:	7a5b      	ldrb	r3, [r3, #9]
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	4b1a      	ldr	r3, [pc, #104]	@ (800e630 <FATFS_LinkDriverEx+0x94>)
 800e5c6:	2100      	movs	r1, #0
 800e5c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e5ca:	4b19      	ldr	r3, [pc, #100]	@ (800e630 <FATFS_LinkDriverEx+0x94>)
 800e5cc:	7a5b      	ldrb	r3, [r3, #9]
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	4a17      	ldr	r2, [pc, #92]	@ (800e630 <FATFS_LinkDriverEx+0x94>)
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	4413      	add	r3, r2
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e5da:	4b15      	ldr	r3, [pc, #84]	@ (800e630 <FATFS_LinkDriverEx+0x94>)
 800e5dc:	7a5b      	ldrb	r3, [r3, #9]
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	4b13      	ldr	r3, [pc, #76]	@ (800e630 <FATFS_LinkDriverEx+0x94>)
 800e5e4:	4413      	add	r3, r2
 800e5e6:	79fa      	ldrb	r2, [r7, #7]
 800e5e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e5ea:	4b11      	ldr	r3, [pc, #68]	@ (800e630 <FATFS_LinkDriverEx+0x94>)
 800e5ec:	7a5b      	ldrb	r3, [r3, #9]
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	1c5a      	adds	r2, r3, #1
 800e5f2:	b2d1      	uxtb	r1, r2
 800e5f4:	4a0e      	ldr	r2, [pc, #56]	@ (800e630 <FATFS_LinkDriverEx+0x94>)
 800e5f6:	7251      	strb	r1, [r2, #9]
 800e5f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e5fa:	7dbb      	ldrb	r3, [r7, #22]
 800e5fc:	3330      	adds	r3, #48	@ 0x30
 800e5fe:	b2da      	uxtb	r2, r3
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	3301      	adds	r3, #1
 800e608:	223a      	movs	r2, #58	@ 0x3a
 800e60a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	3302      	adds	r3, #2
 800e610:	222f      	movs	r2, #47	@ 0x2f
 800e612:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	3303      	adds	r3, #3
 800e618:	2200      	movs	r2, #0
 800e61a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e61c:	2300      	movs	r3, #0
 800e61e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e620:	7dfb      	ldrb	r3, [r7, #23]
}
 800e622:	4618      	mov	r0, r3
 800e624:	371c      	adds	r7, #28
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	20005e00 	.word	0x20005e00

0800e634 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e63e:	2200      	movs	r2, #0
 800e640:	6839      	ldr	r1, [r7, #0]
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f7ff ffaa 	bl	800e59c <FATFS_LinkDriverEx>
 800e648:	4603      	mov	r3, r0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3708      	adds	r7, #8
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
	...

0800e654 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800e65e:	683a      	ldr	r2, [r7, #0]
 800e660:	2101      	movs	r1, #1
 800e662:	4831      	ldr	r0, [pc, #196]	@ (800e728 <network_configure_activations+0xd4>)
 800e664:	f000 faa6 	bl	800ebb4 <ai_platform_get_activations_map>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d051      	beq.n	800e712 <network_configure_activations+0xbe>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e66e:	4b2e      	ldr	r3, [pc, #184]	@ (800e728 <network_configure_activations+0xd4>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	4a2e      	ldr	r2, [pc, #184]	@ (800e72c <network_configure_activations+0xd8>)
 800e674:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e676:	4b2c      	ldr	r3, [pc, #176]	@ (800e728 <network_configure_activations+0xd4>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	4a2c      	ldr	r2, [pc, #176]	@ (800e72c <network_configure_activations+0xd8>)
 800e67c:	60d3      	str	r3, [r2, #12]
    resize_0_output_array.data = AI_PTR(g_network_activations_map[0] + 63984);
 800e67e:	4b2a      	ldr	r3, [pc, #168]	@ (800e728 <network_configure_activations+0xd4>)
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800e686:	4413      	add	r3, r2
 800e688:	4a29      	ldr	r2, [pc, #164]	@ (800e730 <network_configure_activations+0xdc>)
 800e68a:	6093      	str	r3, [r2, #8]
    resize_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 63984);
 800e68c:	4b26      	ldr	r3, [pc, #152]	@ (800e728 <network_configure_activations+0xd4>)
 800e68e:	681a      	ldr	r2, [r3, #0]
 800e690:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800e694:	4413      	add	r3, r2
 800e696:	4a26      	ldr	r2, [pc, #152]	@ (800e730 <network_configure_activations+0xdc>)
 800e698:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e69a:	4b23      	ldr	r3, [pc, #140]	@ (800e728 <network_configure_activations+0xd4>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4a25      	ldr	r2, [pc, #148]	@ (800e734 <network_configure_activations+0xe0>)
 800e6a0:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e6a2:	4b21      	ldr	r3, [pc, #132]	@ (800e728 <network_configure_activations+0xd4>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a23      	ldr	r2, [pc, #140]	@ (800e734 <network_configure_activations+0xe0>)
 800e6a8:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 36);
 800e6aa:	4b1f      	ldr	r3, [pc, #124]	@ (800e728 <network_configure_activations+0xd4>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	3324      	adds	r3, #36	@ 0x24
 800e6b0:	4a21      	ldr	r2, [pc, #132]	@ (800e738 <network_configure_activations+0xe4>)
 800e6b2:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 36);
 800e6b4:	4b1c      	ldr	r3, [pc, #112]	@ (800e728 <network_configure_activations+0xd4>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	3324      	adds	r3, #36	@ 0x24
 800e6ba:	4a1f      	ldr	r2, [pc, #124]	@ (800e738 <network_configure_activations+0xe4>)
 800e6bc:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 3364);
 800e6be:	4b1a      	ldr	r3, [pc, #104]	@ (800e728 <network_configure_activations+0xd4>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800e6c6:	4a1d      	ldr	r2, [pc, #116]	@ (800e73c <network_configure_activations+0xe8>)
 800e6c8:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3364);
 800e6ca:	4b17      	ldr	r3, [pc, #92]	@ (800e728 <network_configure_activations+0xd4>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800e6d2:	4a1a      	ldr	r2, [pc, #104]	@ (800e73c <network_configure_activations+0xe8>)
 800e6d4:	60d3      	str	r3, [r2, #12]
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e6d6:	4b14      	ldr	r3, [pc, #80]	@ (800e728 <network_configure_activations+0xd4>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4a19      	ldr	r2, [pc, #100]	@ (800e740 <network_configure_activations+0xec>)
 800e6dc:	6093      	str	r3, [r2, #8]
    gemm_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e6de:	4b12      	ldr	r3, [pc, #72]	@ (800e728 <network_configure_activations+0xd4>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	4a17      	ldr	r2, [pc, #92]	@ (800e740 <network_configure_activations+0xec>)
 800e6e4:	60d3      	str	r3, [r2, #12]
    nl_4_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800e6e6:	4b10      	ldr	r3, [pc, #64]	@ (800e728 <network_configure_activations+0xd4>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e6ee:	4a15      	ldr	r2, [pc, #84]	@ (800e744 <network_configure_activations+0xf0>)
 800e6f0:	6093      	str	r3, [r2, #8]
    nl_4_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800e6f2:	4b0d      	ldr	r3, [pc, #52]	@ (800e728 <network_configure_activations+0xd4>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e6fa:	4a12      	ldr	r2, [pc, #72]	@ (800e744 <network_configure_activations+0xf0>)
 800e6fc:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e6fe:	4b0a      	ldr	r3, [pc, #40]	@ (800e728 <network_configure_activations+0xd4>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4a11      	ldr	r2, [pc, #68]	@ (800e748 <network_configure_activations+0xf4>)
 800e704:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e706:	4b08      	ldr	r3, [pc, #32]	@ (800e728 <network_configure_activations+0xd4>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4a0f      	ldr	r2, [pc, #60]	@ (800e748 <network_configure_activations+0xf4>)
 800e70c:	60d3      	str	r3, [r2, #12]
    return true;
 800e70e:	2301      	movs	r3, #1
 800e710:	e005      	b.n	800e71e <network_configure_activations+0xca>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800e712:	2213      	movs	r2, #19
 800e714:	2130      	movs	r1, #48	@ 0x30
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f000 fab0 	bl	800ec7c <ai_platform_network_set_error>
  return false;
 800e71c:	2300      	movs	r3, #0
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3708      	adds	r7, #8
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	20005e0c 	.word	0x20005e0c
 800e72c:	2000004c 	.word	0x2000004c
 800e730:	2000005c 	.word	0x2000005c
 800e734:	2000010c 	.word	0x2000010c
 800e738:	2000011c 	.word	0x2000011c
 800e73c:	2000006c 	.word	0x2000006c
 800e740:	2000007c 	.word	0x2000007c
 800e744:	2000008c 	.word	0x2000008c
 800e748:	2000009c 	.word	0x2000009c

0800e74c <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800e756:	683a      	ldr	r2, [r7, #0]
 800e758:	2101      	movs	r1, #1
 800e75a:	483d      	ldr	r0, [pc, #244]	@ (800e850 <network_configure_weights+0x104>)
 800e75c:	f000 f9d2 	bl	800eb04 <ai_platform_get_weights_map>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d069      	beq.n	800e83a <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800e766:	4b3b      	ldr	r3, [pc, #236]	@ (800e854 <network_configure_weights+0x108>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e76e:	4a39      	ldr	r2, [pc, #228]	@ (800e854 <network_configure_weights+0x108>)
 800e770:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800e772:	4b37      	ldr	r3, [pc, #220]	@ (800e850 <network_configure_weights+0x104>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	4a37      	ldr	r2, [pc, #220]	@ (800e854 <network_configure_weights+0x108>)
 800e778:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800e77a:	4b35      	ldr	r3, [pc, #212]	@ (800e850 <network_configure_weights+0x104>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4a35      	ldr	r2, [pc, #212]	@ (800e854 <network_configure_weights+0x108>)
 800e780:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800e782:	4b35      	ldr	r3, [pc, #212]	@ (800e858 <network_configure_weights+0x10c>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e78a:	4a33      	ldr	r2, [pc, #204]	@ (800e858 <network_configure_weights+0x10c>)
 800e78c:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 800e78e:	4b30      	ldr	r3, [pc, #192]	@ (800e850 <network_configure_weights+0x104>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800e796:	4a30      	ldr	r2, [pc, #192]	@ (800e858 <network_configure_weights+0x10c>)
 800e798:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 800e79a:	4b2d      	ldr	r3, [pc, #180]	@ (800e850 <network_configure_weights+0x104>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800e7a2:	4a2d      	ldr	r2, [pc, #180]	@ (800e858 <network_configure_weights+0x10c>)
 800e7a4:	60d3      	str	r3, [r2, #12]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800e7a6:	4b2d      	ldr	r3, [pc, #180]	@ (800e85c <network_configure_weights+0x110>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e7ae:	4a2b      	ldr	r2, [pc, #172]	@ (800e85c <network_configure_weights+0x110>)
 800e7b0:	6013      	str	r3, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 640);
 800e7b2:	4b27      	ldr	r3, [pc, #156]	@ (800e850 <network_configure_weights+0x104>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800e7ba:	4a28      	ldr	r2, [pc, #160]	@ (800e85c <network_configure_weights+0x110>)
 800e7bc:	6093      	str	r3, [r2, #8]
    gemm_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 800e7be:	4b24      	ldr	r3, [pc, #144]	@ (800e850 <network_configure_weights+0x104>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800e7c6:	4a25      	ldr	r2, [pc, #148]	@ (800e85c <network_configure_weights+0x110>)
 800e7c8:	60d3      	str	r3, [r2, #12]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800e7ca:	4b25      	ldr	r3, [pc, #148]	@ (800e860 <network_configure_weights+0x114>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e7d2:	4a23      	ldr	r2, [pc, #140]	@ (800e860 <network_configure_weights+0x114>)
 800e7d4:	6013      	str	r3, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 692864);
 800e7d6:	4b1e      	ldr	r3, [pc, #120]	@ (800e850 <network_configure_weights+0x104>)
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	4b22      	ldr	r3, [pc, #136]	@ (800e864 <network_configure_weights+0x118>)
 800e7dc:	4413      	add	r3, r2
 800e7de:	4a20      	ldr	r2, [pc, #128]	@ (800e860 <network_configure_weights+0x114>)
 800e7e0:	6093      	str	r3, [r2, #8]
    gemm_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 692864);
 800e7e2:	4b1b      	ldr	r3, [pc, #108]	@ (800e850 <network_configure_weights+0x104>)
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	4b1f      	ldr	r3, [pc, #124]	@ (800e864 <network_configure_weights+0x118>)
 800e7e8:	4413      	add	r3, r2
 800e7ea:	4a1d      	ldr	r2, [pc, #116]	@ (800e860 <network_configure_weights+0x114>)
 800e7ec:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800e7ee:	4b1e      	ldr	r3, [pc, #120]	@ (800e868 <network_configure_weights+0x11c>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e7f6:	4a1c      	ldr	r2, [pc, #112]	@ (800e868 <network_configure_weights+0x11c>)
 800e7f8:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 693120);
 800e7fa:	4b15      	ldr	r3, [pc, #84]	@ (800e850 <network_configure_weights+0x104>)
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	4b1b      	ldr	r3, [pc, #108]	@ (800e86c <network_configure_weights+0x120>)
 800e800:	4413      	add	r3, r2
 800e802:	4a19      	ldr	r2, [pc, #100]	@ (800e868 <network_configure_weights+0x11c>)
 800e804:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 693120);
 800e806:	4b12      	ldr	r3, [pc, #72]	@ (800e850 <network_configure_weights+0x104>)
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	4b18      	ldr	r3, [pc, #96]	@ (800e86c <network_configure_weights+0x120>)
 800e80c:	4413      	add	r3, r2
 800e80e:	4a16      	ldr	r2, [pc, #88]	@ (800e868 <network_configure_weights+0x11c>)
 800e810:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800e812:	4b17      	ldr	r3, [pc, #92]	@ (800e870 <network_configure_weights+0x124>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e81a:	4a15      	ldr	r2, [pc, #84]	@ (800e870 <network_configure_weights+0x124>)
 800e81c:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 694656);
 800e81e:	4b0c      	ldr	r3, [pc, #48]	@ (800e850 <network_configure_weights+0x104>)
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	4b14      	ldr	r3, [pc, #80]	@ (800e874 <network_configure_weights+0x128>)
 800e824:	4413      	add	r3, r2
 800e826:	4a12      	ldr	r2, [pc, #72]	@ (800e870 <network_configure_weights+0x124>)
 800e828:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 694656);
 800e82a:	4b09      	ldr	r3, [pc, #36]	@ (800e850 <network_configure_weights+0x104>)
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	4b11      	ldr	r3, [pc, #68]	@ (800e874 <network_configure_weights+0x128>)
 800e830:	4413      	add	r3, r2
 800e832:	4a0f      	ldr	r2, [pc, #60]	@ (800e870 <network_configure_weights+0x124>)
 800e834:	60d3      	str	r3, [r2, #12]
    return true;
 800e836:	2301      	movs	r3, #1
 800e838:	e005      	b.n	800e846 <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800e83a:	2212      	movs	r2, #18
 800e83c:	2130      	movs	r1, #48	@ 0x30
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f000 fa1c 	bl	800ec7c <ai_platform_network_set_error>
  return false;
 800e844:	2300      	movs	r3, #0
}
 800e846:	4618      	mov	r0, r3
 800e848:	3708      	adds	r7, #8
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	20005e10 	.word	0x20005e10
 800e854:	200000ac 	.word	0x200000ac
 800e858:	200000bc 	.word	0x200000bc
 800e85c:	200000cc 	.word	0x200000cc
 800e860:	200000dc 	.word	0x200000dc
 800e864:	000a9280 	.word	0x000a9280
 800e868:	200000ec 	.word	0x200000ec
 800e86c:	000a9380 	.word	0x000a9380
 800e870:	200000fc 	.word	0x200000fc
 800e874:	000a9980 	.word	0x000a9980

0800e878 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 f9ef 	bl	800ec64 <ai_platform_network_get_error>
 800e886:	4603      	mov	r3, r0
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3708      	adds	r7, #8
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af02      	add	r7, sp, #8
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800e89a:	2300      	movs	r3, #0
 800e89c:	9301      	str	r3, [sp, #4]
 800e89e:	2305      	movs	r3, #5
 800e8a0:	9300      	str	r3, [sp, #0]
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	4a04      	ldr	r2, [pc, #16]	@ (800e8b8 <ai_network_create+0x28>)
 800e8a6:	6839      	ldr	r1, [r7, #0]
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f000 fadb 	bl	800ee64 <ai_platform_network_create>
 800e8ae:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	2000075c 	.word	0x2000075c

0800e8bc <ai_network_inputs_get>:
}


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b082      	sub	sp, #8
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d104      	bne.n	800e8d6 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800e8cc:	4b06      	ldr	r3, [pc, #24]	@ (800e8e8 <ai_network_inputs_get+0x2c>)
 800e8ce:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	4a06      	ldr	r2, [pc, #24]	@ (800e8ec <ai_network_inputs_get+0x30>)
 800e8d4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800e8d6:	6839      	ldr	r1, [r7, #0]
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 f9d5 	bl	800ec88 <ai_platform_inputs_get>
 800e8de:	4603      	mov	r3, r0
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3708      	adds	r7, #8
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	2000075c 	.word	0x2000075c
 800e8ec:	a1c00100 	.word	0xa1c00100

0800e8f0 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d104      	bne.n	800e90a <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800e900:	4b06      	ldr	r3, [pc, #24]	@ (800e91c <ai_network_outputs_get+0x2c>)
 800e902:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	4a06      	ldr	r2, [pc, #24]	@ (800e920 <ai_network_outputs_get+0x30>)
 800e908:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800e90a:	6839      	ldr	r1, [r7, #0]
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f000 fa33 	bl	800ed78 <ai_platform_outputs_get>
 800e912:	4603      	mov	r3, r0
}
 800e914:	4618      	mov	r0, r3
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	2000075c 	.word	0x2000075c
 800e920:	a1c00100 	.word	0xa1c00100

0800e924 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800e92e:	6839      	ldr	r1, [r7, #0]
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f000 fad9 	bl	800eee8 <ai_platform_network_init>
 800e936:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800e938:	2301      	movs	r3, #1
 800e93a:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d101      	bne.n	800e946 <ai_network_init+0x22>
 800e942:	2300      	movs	r3, #0
 800e944:	e026      	b.n	800e994 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 800e946:	6839      	ldr	r1, [r7, #0]
 800e948:	68f8      	ldr	r0, [r7, #12]
 800e94a:	f7ff feff 	bl	800e74c <network_configure_weights>
 800e94e:	4603      	mov	r3, r0
 800e950:	461a      	mov	r2, r3
 800e952:	7afb      	ldrb	r3, [r7, #11]
 800e954:	4013      	ands	r3, r2
 800e956:	2b00      	cmp	r3, #0
 800e958:	bf14      	ite	ne
 800e95a:	2301      	movne	r3, #1
 800e95c:	2300      	moveq	r3, #0
 800e95e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800e960:	6839      	ldr	r1, [r7, #0]
 800e962:	68f8      	ldr	r0, [r7, #12]
 800e964:	f7ff fe76 	bl	800e654 <network_configure_activations>
 800e968:	4603      	mov	r3, r0
 800e96a:	461a      	mov	r2, r3
 800e96c:	7afb      	ldrb	r3, [r7, #11]
 800e96e:	4013      	ands	r3, r2
 800e970:	2b00      	cmp	r3, #0
 800e972:	bf14      	ite	ne
 800e974:	2301      	movne	r3, #1
 800e976:	2300      	moveq	r3, #0
 800e978:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f000 fb74 	bl	800f068 <ai_platform_network_post_init>
 800e980:	4603      	mov	r3, r0
 800e982:	461a      	mov	r2, r3
 800e984:	7afb      	ldrb	r3, [r7, #11]
 800e986:	4013      	ands	r3, r2
 800e988:	2b00      	cmp	r3, #0
 800e98a:	bf14      	ite	ne
 800e98c:	2301      	movne	r3, #1
 800e98e:	2300      	moveq	r3, #0
 800e990:	72fb      	strb	r3, [r7, #11]

  return ok;
 800e992:	7afb      	ldrb	r3, [r7, #11]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3710      	adds	r7, #16
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 800e99c:	b4b0      	push	{r4, r5, r7}
 800e99e:	b08f      	sub	sp, #60	@ 0x3c
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800e9a6:	4b15      	ldr	r3, [pc, #84]	@ (800e9fc <ai_network_data_activations_buffer_get+0x60>)
 800e9a8:	61fb      	str	r3, [r7, #28]
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	623b      	str	r3, [r7, #32]
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e9b6:	4b12      	ldr	r3, [pc, #72]	@ (800ea00 <ai_network_data_activations_buffer_get+0x64>)
 800e9b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800e9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9c2:	2204      	movs	r2, #4
 800e9c4:	f362 231f 	bfi	r3, r2, #8, #24
 800e9c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9ca:	4b0e      	ldr	r3, [pc, #56]	@ (800ea04 <ai_network_data_activations_buffer_get+0x68>)
 800e9cc:	f107 040c 	add.w	r4, r7, #12
 800e9d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e9d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e9d6:	f107 030c 	add.w	r3, r7, #12
 800e9da:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	461d      	mov	r5, r3
 800e9e0:	f107 041c 	add.w	r4, r7, #28
 800e9e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e9e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e9ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	373c      	adds	r7, #60	@ 0x3c
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bcb0      	pop	{r4, r5, r7}
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop
 800e9fc:	00040440 	.word	0x00040440
 800ea00:	00010630 	.word	0x00010630
 800ea04:	08014b80 	.word	0x08014b80

0800ea08 <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 800ea08:	b4b0      	push	{r4, r5, r7}
 800ea0a:	b08f      	sub	sp, #60	@ 0x3c
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800ea12:	4b15      	ldr	r3, [pc, #84]	@ (800ea68 <ai_network_data_weights_buffer_get+0x60>)
 800ea14:	61fb      	str	r3, [r7, #28]
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	623b      	str	r3, [r7, #32]
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea1e:	2300      	movs	r3, #0
 800ea20:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea22:	4b12      	ldr	r3, [pc, #72]	@ (800ea6c <ai_network_data_weights_buffer_get+0x64>)
 800ea24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ea26:	2301      	movs	r3, #1
 800ea28:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800ea2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea2e:	2204      	movs	r2, #4
 800ea30:	f362 231f 	bfi	r3, r2, #8, #24
 800ea34:	633b      	str	r3, [r7, #48]	@ 0x30
 800ea36:	4b0e      	ldr	r3, [pc, #56]	@ (800ea70 <ai_network_data_weights_buffer_get+0x68>)
 800ea38:	f107 040c 	add.w	r4, r7, #12
 800ea3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ea3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ea42:	f107 030c 	add.w	r3, r7, #12
 800ea46:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	461d      	mov	r5, r3
 800ea4c:	f107 041c 	add.w	r4, r7, #28
 800ea50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea54:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ea58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	373c      	adds	r7, #60	@ 0x3c
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bcb0      	pop	{r4, r5, r7}
 800ea64:	4770      	bx	lr
 800ea66:	bf00      	nop
 800ea68:	40040440 	.word	0x40040440
 800ea6c:	000a9998 	.word	0x000a9998
 800ea70:	08014b90 	.word	0x08014b90

0800ea74 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 800ea74:	b480      	push	{r7}
 800ea76:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_network_weights_table);
 800ea78:	4b02      	ldr	r3, [pc, #8]	@ (800ea84 <ai_network_data_weights_get+0x10>)

}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr
 800ea84:	20000800 	.word	0x20000800

0800ea88 <ai_buffer_get_size>:
 800ea88:	b368      	cbz	r0, 800eae6 <ai_buffer_get_size+0x5e>
 800ea8a:	4b17      	ldr	r3, [pc, #92]	@ (800eae8 <ai_buffer_get_size+0x60>)
 800ea8c:	4a17      	ldr	r2, [pc, #92]	@ (800eaec <ai_buffer_get_size+0x64>)
 800ea8e:	b410      	push	{r4}
 800ea90:	6804      	ldr	r4, [r0, #0]
 800ea92:	4023      	ands	r3, r4
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d123      	bne.n	800eae0 <ai_buffer_get_size+0x58>
 800ea98:	b311      	cbz	r1, 800eae0 <ai_buffer_get_size+0x58>
 800ea9a:	6984      	ldr	r4, [r0, #24]
 800ea9c:	6862      	ldr	r2, [r4, #4]
 800ea9e:	321f      	adds	r2, #31
 800eaa0:	f022 021f 	bic.w	r2, r2, #31
 800eaa4:	7d03      	ldrb	r3, [r0, #20]
 800eaa6:	6941      	ldr	r1, [r0, #20]
 800eaa8:	f1a3 0301 	sub.w	r3, r3, #1
 800eaac:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800eab0:	fab3 f383 	clz	r3, r3
 800eab4:	095b      	lsrs	r3, r3, #5
 800eab6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800eaba:	da0c      	bge.n	800ead6 <ai_buffer_get_size+0x4e>
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d103      	bne.n	800eac8 <ai_buffer_get_size+0x40>
 800eac0:	2802      	cmp	r0, #2
 800eac2:	f04f 0302 	mov.w	r3, #2
 800eac6:	d006      	beq.n	800ead6 <ai_buffer_get_size+0x4e>
 800eac8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800eacc:	3301      	adds	r3, #1
 800eace:	4298      	cmp	r0, r3
 800ead0:	fb01 f202 	mul.w	r2, r1, r2
 800ead4:	d1f2      	bne.n	800eabc <ai_buffer_get_size+0x34>
 800ead6:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800eada:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eade:	4770      	bx	lr
 800eae0:	6984      	ldr	r4, [r0, #24]
 800eae2:	6862      	ldr	r2, [r4, #4]
 800eae4:	e7de      	b.n	800eaa4 <ai_buffer_get_size+0x1c>
 800eae6:	4770      	bx	lr
 800eae8:	017fffff 	.word	0x017fffff
 800eaec:	000400c0 	.word	0x000400c0

0800eaf0 <ai_buffer_array_sane>:
 800eaf0:	b138      	cbz	r0, 800eb02 <ai_buffer_array_sane+0x12>
 800eaf2:	6843      	ldr	r3, [r0, #4]
 800eaf4:	b123      	cbz	r3, 800eb00 <ai_buffer_array_sane+0x10>
 800eaf6:	8840      	ldrh	r0, [r0, #2]
 800eaf8:	3800      	subs	r0, #0
 800eafa:	bf18      	it	ne
 800eafc:	2001      	movne	r0, #1
 800eafe:	4770      	bx	lr
 800eb00:	4618      	mov	r0, r3
 800eb02:	4770      	bx	lr

0800eb04 <ai_platform_get_weights_map>:
 800eb04:	2900      	cmp	r1, #0
 800eb06:	bf18      	it	ne
 800eb08:	2800      	cmpne	r0, #0
 800eb0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb0c:	bf0c      	ite	eq
 800eb0e:	2401      	moveq	r4, #1
 800eb10:	2400      	movne	r4, #0
 800eb12:	2a00      	cmp	r2, #0
 800eb14:	bf08      	it	eq
 800eb16:	f044 0401 	orreq.w	r4, r4, #1
 800eb1a:	b114      	cbz	r4, 800eb22 <ai_platform_get_weights_map+0x1e>
 800eb1c:	2400      	movs	r4, #0
 800eb1e:	4620      	mov	r0, r4
 800eb20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb22:	4616      	mov	r6, r2
 800eb24:	4b22      	ldr	r3, [pc, #136]	@ (800ebb0 <ai_platform_get_weights_map+0xac>)
 800eb26:	6812      	ldr	r2, [r2, #0]
 800eb28:	4605      	mov	r5, r0
 800eb2a:	460f      	mov	r7, r1
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d022      	beq.n	800eb76 <ai_platform_get_weights_map+0x72>
 800eb30:	6870      	ldr	r0, [r6, #4]
 800eb32:	2800      	cmp	r0, #0
 800eb34:	d0f2      	beq.n	800eb1c <ai_platform_get_weights_map+0x18>
 800eb36:	6806      	ldr	r6, [r0, #0]
 800eb38:	429e      	cmp	r6, r3
 800eb3a:	d006      	beq.n	800eb4a <ai_platform_get_weights_map+0x46>
 800eb3c:	f1a1 0401 	sub.w	r4, r1, #1
 800eb40:	6028      	str	r0, [r5, #0]
 800eb42:	fab4 f484 	clz	r4, r4
 800eb46:	0964      	lsrs	r4, r4, #5
 800eb48:	e7e9      	b.n	800eb1e <ai_platform_get_weights_map+0x1a>
 800eb4a:	3d04      	subs	r5, #4
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	4621      	mov	r1, r4
 800eb50:	e000      	b.n	800eb54 <ai_platform_get_weights_map+0x50>
 800eb52:	4619      	mov	r1, r3
 800eb54:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800eb58:	42b3      	cmp	r3, r6
 800eb5a:	d025      	beq.n	800eba8 <ai_platform_get_weights_map+0xa4>
 800eb5c:	f845 3f04 	str.w	r3, [r5, #4]!
 800eb60:	1c4b      	adds	r3, r1, #1
 800eb62:	429f      	cmp	r7, r3
 800eb64:	d8f5      	bhi.n	800eb52 <ai_platform_get_weights_map+0x4e>
 800eb66:	d1da      	bne.n	800eb1e <ai_platform_get_weights_map+0x1a>
 800eb68:	3102      	adds	r1, #2
 800eb6a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800eb6e:	42b3      	cmp	r3, r6
 800eb70:	d1d5      	bne.n	800eb1e <ai_platform_get_weights_map+0x1a>
 800eb72:	2401      	movs	r4, #1
 800eb74:	e7d3      	b.n	800eb1e <ai_platform_get_weights_map+0x1a>
 800eb76:	1d30      	adds	r0, r6, #4
 800eb78:	f7ff ffba 	bl	800eaf0 <ai_buffer_array_sane>
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	d0cd      	beq.n	800eb1c <ai_platform_get_weights_map+0x18>
 800eb80:	88f3      	ldrh	r3, [r6, #6]
 800eb82:	429f      	cmp	r7, r3
 800eb84:	d1ca      	bne.n	800eb1c <ai_platform_get_weights_map+0x18>
 800eb86:	3d04      	subs	r5, #4
 800eb88:	4622      	mov	r2, r4
 800eb8a:	68b3      	ldr	r3, [r6, #8]
 800eb8c:	4423      	add	r3, r4
 800eb8e:	341c      	adds	r4, #28
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	b123      	cbz	r3, 800eb9e <ai_platform_get_weights_map+0x9a>
 800eb94:	3201      	adds	r2, #1
 800eb96:	f845 3f04 	str.w	r3, [r5, #4]!
 800eb9a:	4297      	cmp	r7, r2
 800eb9c:	d8f5      	bhi.n	800eb8a <ai_platform_get_weights_map+0x86>
 800eb9e:	1abc      	subs	r4, r7, r2
 800eba0:	fab4 f484 	clz	r4, r4
 800eba4:	0964      	lsrs	r4, r4, #5
 800eba6:	e7ba      	b.n	800eb1e <ai_platform_get_weights_map+0x1a>
 800eba8:	428f      	cmp	r7, r1
 800ebaa:	d1b8      	bne.n	800eb1e <ai_platform_get_weights_map+0x1a>
 800ebac:	e7e1      	b.n	800eb72 <ai_platform_get_weights_map+0x6e>
 800ebae:	bf00      	nop
 800ebb0:	a1facade 	.word	0xa1facade

0800ebb4 <ai_platform_get_activations_map>:
 800ebb4:	2900      	cmp	r1, #0
 800ebb6:	bf18      	it	ne
 800ebb8:	2800      	cmpne	r0, #0
 800ebba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebbc:	bf0c      	ite	eq
 800ebbe:	2401      	moveq	r4, #1
 800ebc0:	2400      	movne	r4, #0
 800ebc2:	2a00      	cmp	r2, #0
 800ebc4:	bf08      	it	eq
 800ebc6:	f044 0401 	orreq.w	r4, r4, #1
 800ebca:	b114      	cbz	r4, 800ebd2 <ai_platform_get_activations_map+0x1e>
 800ebcc:	2400      	movs	r4, #0
 800ebce:	4620      	mov	r0, r4
 800ebd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebd2:	4616      	mov	r6, r2
 800ebd4:	4b22      	ldr	r3, [pc, #136]	@ (800ec60 <ai_platform_get_activations_map+0xac>)
 800ebd6:	6812      	ldr	r2, [r2, #0]
 800ebd8:	4605      	mov	r5, r0
 800ebda:	460f      	mov	r7, r1
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d022      	beq.n	800ec26 <ai_platform_get_activations_map+0x72>
 800ebe0:	6a30      	ldr	r0, [r6, #32]
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	d0f2      	beq.n	800ebcc <ai_platform_get_activations_map+0x18>
 800ebe6:	6806      	ldr	r6, [r0, #0]
 800ebe8:	429e      	cmp	r6, r3
 800ebea:	d006      	beq.n	800ebfa <ai_platform_get_activations_map+0x46>
 800ebec:	f1a1 0401 	sub.w	r4, r1, #1
 800ebf0:	6028      	str	r0, [r5, #0]
 800ebf2:	fab4 f484 	clz	r4, r4
 800ebf6:	0964      	lsrs	r4, r4, #5
 800ebf8:	e7e9      	b.n	800ebce <ai_platform_get_activations_map+0x1a>
 800ebfa:	3d04      	subs	r5, #4
 800ebfc:	4602      	mov	r2, r0
 800ebfe:	4621      	mov	r1, r4
 800ec00:	e000      	b.n	800ec04 <ai_platform_get_activations_map+0x50>
 800ec02:	4619      	mov	r1, r3
 800ec04:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800ec08:	42b3      	cmp	r3, r6
 800ec0a:	d026      	beq.n	800ec5a <ai_platform_get_activations_map+0xa6>
 800ec0c:	f845 3f04 	str.w	r3, [r5, #4]!
 800ec10:	1c4b      	adds	r3, r1, #1
 800ec12:	429f      	cmp	r7, r3
 800ec14:	d8f5      	bhi.n	800ec02 <ai_platform_get_activations_map+0x4e>
 800ec16:	d1da      	bne.n	800ebce <ai_platform_get_activations_map+0x1a>
 800ec18:	3102      	adds	r1, #2
 800ec1a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800ec1e:	42b3      	cmp	r3, r6
 800ec20:	d1d5      	bne.n	800ebce <ai_platform_get_activations_map+0x1a>
 800ec22:	2401      	movs	r4, #1
 800ec24:	e7d3      	b.n	800ebce <ai_platform_get_activations_map+0x1a>
 800ec26:	f106 000c 	add.w	r0, r6, #12
 800ec2a:	f7ff ff61 	bl	800eaf0 <ai_buffer_array_sane>
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	d0cc      	beq.n	800ebcc <ai_platform_get_activations_map+0x18>
 800ec32:	89f3      	ldrh	r3, [r6, #14]
 800ec34:	429f      	cmp	r7, r3
 800ec36:	d1c9      	bne.n	800ebcc <ai_platform_get_activations_map+0x18>
 800ec38:	3d04      	subs	r5, #4
 800ec3a:	4622      	mov	r2, r4
 800ec3c:	6933      	ldr	r3, [r6, #16]
 800ec3e:	4423      	add	r3, r4
 800ec40:	341c      	adds	r4, #28
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	b123      	cbz	r3, 800ec50 <ai_platform_get_activations_map+0x9c>
 800ec46:	3201      	adds	r2, #1
 800ec48:	f845 3f04 	str.w	r3, [r5, #4]!
 800ec4c:	4297      	cmp	r7, r2
 800ec4e:	d8f5      	bhi.n	800ec3c <ai_platform_get_activations_map+0x88>
 800ec50:	1abc      	subs	r4, r7, r2
 800ec52:	fab4 f484 	clz	r4, r4
 800ec56:	0964      	lsrs	r4, r4, #5
 800ec58:	e7b9      	b.n	800ebce <ai_platform_get_activations_map+0x1a>
 800ec5a:	428f      	cmp	r7, r1
 800ec5c:	d1b7      	bne.n	800ebce <ai_platform_get_activations_map+0x1a>
 800ec5e:	e7e0      	b.n	800ec22 <ai_platform_get_activations_map+0x6e>
 800ec60:	a1facade 	.word	0xa1facade

0800ec64 <ai_platform_network_get_error>:
 800ec64:	4b04      	ldr	r3, [pc, #16]	@ (800ec78 <ai_platform_network_get_error+0x14>)
 800ec66:	6802      	ldr	r2, [r0, #0]
 800ec68:	4393      	bics	r3, r2
 800ec6a:	d102      	bne.n	800ec72 <ai_platform_network_get_error+0xe>
 800ec6c:	300c      	adds	r0, #12
 800ec6e:	f000 ba2d 	b.w	800f0cc <core_get_error>
 800ec72:	f241 0010 	movw	r0, #4112	@ 0x1010
 800ec76:	4770      	bx	lr
 800ec78:	a1c00100 	.word	0xa1c00100

0800ec7c <ai_platform_network_set_error>:
 800ec7c:	b110      	cbz	r0, 800ec84 <ai_platform_network_set_error+0x8>
 800ec7e:	300c      	adds	r0, #12
 800ec80:	f000 ba2a 	b.w	800f0d8 <core_set_error>
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop

0800ec88 <ai_platform_inputs_get>:
 800ec88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec8c:	4b39      	ldr	r3, [pc, #228]	@ (800ed74 <ai_platform_inputs_get+0xec>)
 800ec8e:	b085      	sub	sp, #20
 800ec90:	6802      	ldr	r2, [r0, #0]
 800ec92:	4393      	bics	r3, r2
 800ec94:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800ec98:	d162      	bne.n	800ed60 <ai_platform_inputs_get+0xd8>
 800ec9a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d051      	beq.n	800ed44 <ai_platform_inputs_get+0xbc>
 800eca0:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800eca4:	f1ba 0f00 	cmp.w	sl, #0
 800eca8:	d04c      	beq.n	800ed44 <ai_platform_inputs_get+0xbc>
 800ecaa:	f04f 0900 	mov.w	r9, #0
 800ecae:	464d      	mov	r5, r9
 800ecb0:	e016      	b.n	800ece0 <ai_platform_inputs_get+0x58>
 800ecb2:	9901      	ldr	r1, [sp, #4]
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	f848 3001 	str.w	r3, [r8, r1]
 800ecba:	69b1      	ldr	r1, [r6, #24]
 800ecbc:	f04f 0301 	mov.w	r3, #1
 800ecc0:	684e      	ldr	r6, [r1, #4]
 800ecc2:	3501      	adds	r5, #1
 800ecc4:	f109 091c 	add.w	r9, r9, #28
 800ecc8:	7523      	strb	r3, [r4, #20]
 800ecca:	2300      	movs	r3, #0
 800eccc:	6961      	ldr	r1, [r4, #20]
 800ecce:	6020      	str	r0, [r4, #0]
 800ecd0:	f36b 211f 	bfi	r1, fp, #8, #24
 800ecd4:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800ecd8:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800ecdc:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800ece0:	f8ba 3000 	ldrh.w	r3, [sl]
 800ece4:	b2ac      	uxth	r4, r5
 800ece6:	42ab      	cmp	r3, r5
 800ece8:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800ecec:	9301      	str	r3, [sp, #4]
 800ecee:	d93b      	bls.n	800ed68 <ai_platform_inputs_get+0xe0>
 800ecf0:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d037      	beq.n	800ed68 <ai_platform_inputs_get+0xe0>
 800ecf8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800ecfc:	2e00      	cmp	r6, #0
 800ecfe:	d033      	beq.n	800ed68 <ai_platform_inputs_get+0xe0>
 800ed00:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ed04:	69b2      	ldr	r2, [r6, #24]
 800ed06:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800ed0a:	6810      	ldr	r0, [r2, #0]
 800ed0c:	68b3      	ldr	r3, [r6, #8]
 800ed0e:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800ed12:	68f2      	ldr	r2, [r6, #12]
 800ed14:	444c      	add	r4, r9
 800ed16:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800ed1a:	9200      	str	r2, [sp, #0]
 800ed1c:	f002 fd86 	bl	801182c <ai_array_to_buffer_fmt>
 800ed20:	69b1      	ldr	r1, [r6, #24]
 800ed22:	9a00      	ldr	r2, [sp, #0]
 800ed24:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800ed28:	2f00      	cmp	r7, #0
 800ed2a:	d0c7      	beq.n	800ecbc <ai_platform_inputs_get+0x34>
 800ed2c:	2100      	movs	r1, #0
 800ed2e:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800ed32:	6831      	ldr	r1, [r6, #0]
 800ed34:	6079      	str	r1, [r7, #4]
 800ed36:	b111      	cbz	r1, 800ed3e <ai_platform_inputs_get+0xb6>
 800ed38:	8849      	ldrh	r1, [r1, #2]
 800ed3a:	2900      	cmp	r1, #0
 800ed3c:	d1b9      	bne.n	800ecb2 <ai_platform_inputs_get+0x2a>
 800ed3e:	69b1      	ldr	r1, [r6, #24]
 800ed40:	2700      	movs	r7, #0
 800ed42:	e7bb      	b.n	800ecbc <ai_platform_inputs_get+0x34>
 800ed44:	9803      	ldr	r0, [sp, #12]
 800ed46:	2400      	movs	r4, #0
 800ed48:	2218      	movs	r2, #24
 800ed4a:	2111      	movs	r1, #17
 800ed4c:	300c      	adds	r0, #12
 800ed4e:	f000 f9c3 	bl	800f0d8 <core_set_error>
 800ed52:	4620      	mov	r0, r4
 800ed54:	9b02      	ldr	r3, [sp, #8]
 800ed56:	b103      	cbz	r3, 800ed5a <ai_platform_inputs_get+0xd2>
 800ed58:	801c      	strh	r4, [r3, #0]
 800ed5a:	b005      	add	sp, #20
 800ed5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed60:	2000      	movs	r0, #0
 800ed62:	b005      	add	sp, #20
 800ed64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed68:	2c00      	cmp	r4, #0
 800ed6a:	d0eb      	beq.n	800ed44 <ai_platform_inputs_get+0xbc>
 800ed6c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ed70:	6858      	ldr	r0, [r3, #4]
 800ed72:	e7ef      	b.n	800ed54 <ai_platform_inputs_get+0xcc>
 800ed74:	a1c00100 	.word	0xa1c00100

0800ed78 <ai_platform_outputs_get>:
 800ed78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed7c:	4b38      	ldr	r3, [pc, #224]	@ (800ee60 <ai_platform_outputs_get+0xe8>)
 800ed7e:	b085      	sub	sp, #20
 800ed80:	6802      	ldr	r2, [r0, #0]
 800ed82:	4393      	bics	r3, r2
 800ed84:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800ed88:	d15f      	bne.n	800ee4a <ai_platform_outputs_get+0xd2>
 800ed8a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d94e      	bls.n	800ee2e <ai_platform_outputs_get+0xb6>
 800ed90:	f04f 0900 	mov.w	r9, #0
 800ed94:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800ed98:	464d      	mov	r5, r9
 800ed9a:	e016      	b.n	800edca <ai_platform_outputs_get+0x52>
 800ed9c:	9901      	ldr	r1, [sp, #4]
 800ed9e:	2301      	movs	r3, #1
 800eda0:	f848 3001 	str.w	r3, [r8, r1]
 800eda4:	69b1      	ldr	r1, [r6, #24]
 800eda6:	f04f 0301 	mov.w	r3, #1
 800edaa:	684e      	ldr	r6, [r1, #4]
 800edac:	3501      	adds	r5, #1
 800edae:	f109 091c 	add.w	r9, r9, #28
 800edb2:	7523      	strb	r3, [r4, #20]
 800edb4:	2300      	movs	r3, #0
 800edb6:	6961      	ldr	r1, [r4, #20]
 800edb8:	6020      	str	r0, [r4, #0]
 800edba:	f36b 211f 	bfi	r1, fp, #8, #24
 800edbe:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800edc2:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800edc6:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800edca:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800edce:	b2ac      	uxth	r4, r5
 800edd0:	42ab      	cmp	r3, r5
 800edd2:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800edd6:	9301      	str	r3, [sp, #4]
 800edd8:	d93b      	bls.n	800ee52 <ai_platform_outputs_get+0xda>
 800edda:	f8da 3010 	ldr.w	r3, [sl, #16]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d037      	beq.n	800ee52 <ai_platform_outputs_get+0xda>
 800ede2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800ede6:	2e00      	cmp	r6, #0
 800ede8:	d033      	beq.n	800ee52 <ai_platform_outputs_get+0xda>
 800edea:	f8da 3014 	ldr.w	r3, [sl, #20]
 800edee:	69b2      	ldr	r2, [r6, #24]
 800edf0:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800edf4:	6810      	ldr	r0, [r2, #0]
 800edf6:	68b3      	ldr	r3, [r6, #8]
 800edf8:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800edfc:	68f2      	ldr	r2, [r6, #12]
 800edfe:	444c      	add	r4, r9
 800ee00:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800ee04:	9200      	str	r2, [sp, #0]
 800ee06:	f002 fd11 	bl	801182c <ai_array_to_buffer_fmt>
 800ee0a:	69b1      	ldr	r1, [r6, #24]
 800ee0c:	9a00      	ldr	r2, [sp, #0]
 800ee0e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800ee12:	2f00      	cmp	r7, #0
 800ee14:	d0c7      	beq.n	800eda6 <ai_platform_outputs_get+0x2e>
 800ee16:	2100      	movs	r1, #0
 800ee18:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800ee1c:	6831      	ldr	r1, [r6, #0]
 800ee1e:	6079      	str	r1, [r7, #4]
 800ee20:	b111      	cbz	r1, 800ee28 <ai_platform_outputs_get+0xb0>
 800ee22:	8849      	ldrh	r1, [r1, #2]
 800ee24:	2900      	cmp	r1, #0
 800ee26:	d1b9      	bne.n	800ed9c <ai_platform_outputs_get+0x24>
 800ee28:	69b1      	ldr	r1, [r6, #24]
 800ee2a:	2700      	movs	r7, #0
 800ee2c:	e7bb      	b.n	800eda6 <ai_platform_outputs_get+0x2e>
 800ee2e:	9803      	ldr	r0, [sp, #12]
 800ee30:	2400      	movs	r4, #0
 800ee32:	2218      	movs	r2, #24
 800ee34:	2111      	movs	r1, #17
 800ee36:	300c      	adds	r0, #12
 800ee38:	f000 f94e 	bl	800f0d8 <core_set_error>
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	9b02      	ldr	r3, [sp, #8]
 800ee40:	b103      	cbz	r3, 800ee44 <ai_platform_outputs_get+0xcc>
 800ee42:	801c      	strh	r4, [r3, #0]
 800ee44:	b005      	add	sp, #20
 800ee46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee4a:	2000      	movs	r0, #0
 800ee4c:	b005      	add	sp, #20
 800ee4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee52:	2c00      	cmp	r4, #0
 800ee54:	d0eb      	beq.n	800ee2e <ai_platform_outputs_get+0xb6>
 800ee56:	f8da 3014 	ldr.w	r3, [sl, #20]
 800ee5a:	6858      	ldr	r0, [r3, #4]
 800ee5c:	e7ef      	b.n	800ee3e <ai_platform_outputs_get+0xc6>
 800ee5e:	bf00      	nop
 800ee60:	a1c00100 	.word	0xa1c00100

0800ee64 <ai_platform_network_create>:
 800ee64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee68:	b083      	sub	sp, #12
 800ee6a:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800ee6e:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800ee72:	b320      	cbz	r0, 800eebe <ai_platform_network_create+0x5a>
 800ee74:	6002      	str	r2, [r0, #0]
 800ee76:	4616      	mov	r6, r2
 800ee78:	461f      	mov	r7, r3
 800ee7a:	4604      	mov	r4, r0
 800ee7c:	f000 f924 	bl	800f0c8 <core_init>
 800ee80:	b970      	cbnz	r0, 800eea0 <ai_platform_network_create+0x3c>
 800ee82:	2530      	movs	r5, #48	@ 0x30
 800ee84:	2300      	movs	r3, #0
 800ee86:	6023      	str	r3, [r4, #0]
 800ee88:	2410      	movs	r4, #16
 800ee8a:	464a      	mov	r2, r9
 800ee8c:	4641      	mov	r1, r8
 800ee8e:	4638      	mov	r0, r7
 800ee90:	f002 fd64 	bl	801195c <ai_version_get>
 800ee94:	60b0      	str	r0, [r6, #8]
 800ee96:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800ee9a:	b003      	add	sp, #12
 800ee9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eea0:	2200      	movs	r2, #0
 800eea2:	4641      	mov	r1, r8
 800eea4:	4638      	mov	r0, r7
 800eea6:	f002 fd59 	bl	801195c <ai_version_get>
 800eeaa:	4605      	mov	r5, r0
 800eeac:	2200      	movs	r2, #0
 800eeae:	2105      	movs	r1, #5
 800eeb0:	2001      	movs	r0, #1
 800eeb2:	f002 fd53 	bl	801195c <ai_version_get>
 800eeb6:	4285      	cmp	r5, r0
 800eeb8:	d008      	beq.n	800eecc <ai_platform_network_create+0x68>
 800eeba:	2501      	movs	r5, #1
 800eebc:	e7e2      	b.n	800ee84 <ai_platform_network_create+0x20>
 800eebe:	2510      	movs	r5, #16
 800eec0:	462c      	mov	r4, r5
 800eec2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800eec6:	b003      	add	sp, #12
 800eec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eecc:	4b05      	ldr	r3, [pc, #20]	@ (800eee4 <ai_platform_network_create+0x80>)
 800eece:	a801      	add	r0, sp, #4
 800eed0:	9301      	str	r3, [sp, #4]
 800eed2:	f000 f90d 	bl	800f0f0 <ai_check_custom_types>
 800eed6:	b110      	cbz	r0, 800eede <ai_platform_network_create+0x7a>
 800eed8:	2400      	movs	r4, #0
 800eeda:	4625      	mov	r5, r4
 800eedc:	e7d5      	b.n	800ee8a <ai_platform_network_create+0x26>
 800eede:	2502      	movs	r5, #2
 800eee0:	e7d0      	b.n	800ee84 <ai_platform_network_create+0x20>
 800eee2:	bf00      	nop
 800eee4:	84048403 	.word	0x84048403

0800eee8 <ai_platform_network_init>:
 800eee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeec:	4a5c      	ldr	r2, [pc, #368]	@ (800f060 <ai_platform_network_init+0x178>)
 800eeee:	460c      	mov	r4, r1
 800eef0:	6801      	ldr	r1, [r0, #0]
 800eef2:	438a      	bics	r2, r1
 800eef4:	d133      	bne.n	800ef5e <ai_platform_network_init+0x76>
 800eef6:	4605      	mov	r5, r0
 800eef8:	2c00      	cmp	r4, #0
 800eefa:	f000 8093 	beq.w	800f024 <ai_platform_network_init+0x13c>
 800eefe:	f8d4 b000 	ldr.w	fp, [r4]
 800ef02:	4a58      	ldr	r2, [pc, #352]	@ (800f064 <ai_platform_network_init+0x17c>)
 800ef04:	4593      	cmp	fp, r2
 800ef06:	d10f      	bne.n	800ef28 <ai_platform_network_init+0x40>
 800ef08:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 800ef0c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ef10:	4b53      	ldr	r3, [pc, #332]	@ (800f060 <ai_platform_network_init+0x178>)
 800ef12:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 800ef16:	0c32      	lsrs	r2, r6, #16
 800ef18:	4299      	cmp	r1, r3
 800ef1a:	d02c      	beq.n	800ef76 <ai_platform_network_init+0x8e>
 800ef1c:	2303      	movs	r3, #3
 800ef1e:	462c      	mov	r4, r5
 800ef20:	612b      	str	r3, [r5, #16]
 800ef22:	4620      	mov	r0, r4
 800ef24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef28:	4627      	mov	r7, r4
 800ef2a:	2101      	movs	r1, #1
 800ef2c:	6864      	ldr	r4, [r4, #4]
 800ef2e:	4638      	mov	r0, r7
 800ef30:	f107 081c 	add.w	r8, r7, #28
 800ef34:	f7ff fda8 	bl	800ea88 <ai_buffer_get_size>
 800ef38:	4606      	mov	r6, r0
 800ef3a:	2101      	movs	r1, #1
 800ef3c:	4640      	mov	r0, r8
 800ef3e:	f8d7 9020 	ldr.w	r9, [r7, #32]
 800ef42:	f7ff fda1 	bl	800ea88 <ai_buffer_get_size>
 800ef46:	b976      	cbnz	r6, 800ef66 <ai_platform_network_init+0x7e>
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	d150      	bne.n	800efee <ai_platform_network_init+0x106>
 800ef4c:	4680      	mov	r8, r0
 800ef4e:	4686      	mov	lr, r0
 800ef50:	4606      	mov	r6, r0
 800ef52:	4607      	mov	r7, r0
 800ef54:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800ef58:	6829      	ldr	r1, [r5, #0]
 800ef5a:	0436      	lsls	r6, r6, #16
 800ef5c:	e7d8      	b.n	800ef10 <ai_platform_network_init+0x28>
 800ef5e:	2400      	movs	r4, #0
 800ef60:	4620      	mov	r0, r4
 800ef62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef66:	2800      	cmp	r0, #0
 800ef68:	d13b      	bne.n	800efe2 <ai_platform_network_init+0xfa>
 800ef6a:	4680      	mov	r8, r0
 800ef6c:	4686      	mov	lr, r0
 800ef6e:	2c00      	cmp	r4, #0
 800ef70:	d05e      	beq.n	800f030 <ai_platform_network_init+0x148>
 800ef72:	2601      	movs	r6, #1
 800ef74:	e7ee      	b.n	800ef54 <ai_platform_network_init+0x6c>
 800ef76:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	4b3a      	ldr	r3, [pc, #232]	@ (800f064 <ai_platform_network_init+0x17c>)
 800ef7c:	d33e      	bcc.n	800effc <ai_platform_network_init+0x114>
 800ef7e:	459b      	cmp	fp, r3
 800ef80:	d03e      	beq.n	800f000 <ai_platform_network_init+0x118>
 800ef82:	b1a2      	cbz	r2, 800efae <ai_platform_network_init+0xc6>
 800ef84:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ef88:	f04f 0c00 	mov.w	ip, #0
 800ef8c:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800ef90:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 800ef92:	eb07 0b0c 	add.w	fp, r7, ip
 800ef96:	4464      	add	r4, ip
 800ef98:	f10c 0c1c 	add.w	ip, ip, #28
 800ef9c:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800efa0:	45cc      	cmp	ip, r9
 800efa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efa4:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 800efa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800efac:	d1f0      	bne.n	800ef90 <ai_platform_network_init+0xa8>
 800efae:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800efb0:	622e      	str	r6, [r5, #32]
 800efb2:	4553      	cmp	r3, sl
 800efb4:	d34b      	bcc.n	800f04e <ai_platform_network_init+0x166>
 800efb6:	f1ba 0f00 	cmp.w	sl, #0
 800efba:	d025      	beq.n	800f008 <ai_platform_network_init+0x120>
 800efbc:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800efc0:	2700      	movs	r7, #0
 800efc2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800efc6:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 800efc8:	eb08 0607 	add.w	r6, r8, r7
 800efcc:	443c      	add	r4, r7
 800efce:	371c      	adds	r7, #28
 800efd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800efd2:	4557      	cmp	r7, sl
 800efd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efd6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800efda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800efde:	d1f2      	bne.n	800efc6 <ai_platform_network_init+0xde>
 800efe0:	e012      	b.n	800f008 <ai_platform_network_init+0x120>
 800efe2:	f1b9 0f00 	cmp.w	r9, #0
 800efe6:	d015      	beq.n	800f014 <ai_platform_network_init+0x12c>
 800efe8:	f04f 0e01 	mov.w	lr, #1
 800efec:	e7bf      	b.n	800ef6e <ai_platform_network_init+0x86>
 800efee:	f1b9 0f00 	cmp.w	r9, #0
 800eff2:	d00f      	beq.n	800f014 <ai_platform_network_init+0x12c>
 800eff4:	f04f 0e01 	mov.w	lr, #1
 800eff8:	4637      	mov	r7, r6
 800effa:	e7ab      	b.n	800ef54 <ai_platform_network_init+0x6c>
 800effc:	459b      	cmp	fp, r3
 800effe:	d11e      	bne.n	800f03e <ai_platform_network_init+0x156>
 800f000:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 800f004:	e9c5 6708 	strd	r6, r7, [r5, #32]
 800f008:	4628      	mov	r0, r5
 800f00a:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 800f00e:	f000 f897 	bl	800f140 <ai_layers_init_all>
 800f012:	e783      	b.n	800ef1c <ai_platform_network_init+0x34>
 800f014:	2213      	movs	r2, #19
 800f016:	2110      	movs	r1, #16
 800f018:	f105 000c 	add.w	r0, r5, #12
 800f01c:	2400      	movs	r4, #0
 800f01e:	f000 f85b 	bl	800f0d8 <core_set_error>
 800f022:	e77e      	b.n	800ef22 <ai_platform_network_init+0x3a>
 800f024:	2211      	movs	r2, #17
 800f026:	2110      	movs	r1, #16
 800f028:	300c      	adds	r0, #12
 800f02a:	f000 f855 	bl	800f0d8 <core_set_error>
 800f02e:	e778      	b.n	800ef22 <ai_platform_network_init+0x3a>
 800f030:	2212      	movs	r2, #18
 800f032:	2110      	movs	r1, #16
 800f034:	f105 000c 	add.w	r0, r5, #12
 800f038:	f000 f84e 	bl	800f0d8 <core_set_error>
 800f03c:	e771      	b.n	800ef22 <ai_platform_network_init+0x3a>
 800f03e:	2212      	movs	r2, #18
 800f040:	2116      	movs	r1, #22
 800f042:	f105 000c 	add.w	r0, r5, #12
 800f046:	2400      	movs	r4, #0
 800f048:	f000 f846 	bl	800f0d8 <core_set_error>
 800f04c:	e769      	b.n	800ef22 <ai_platform_network_init+0x3a>
 800f04e:	2213      	movs	r2, #19
 800f050:	2116      	movs	r1, #22
 800f052:	f105 000c 	add.w	r0, r5, #12
 800f056:	2400      	movs	r4, #0
 800f058:	f000 f83e 	bl	800f0d8 <core_set_error>
 800f05c:	e761      	b.n	800ef22 <ai_platform_network_init+0x3a>
 800f05e:	bf00      	nop
 800f060:	a1c00100 	.word	0xa1c00100
 800f064:	a1facade 	.word	0xa1facade

0800f068 <ai_platform_network_post_init>:
 800f068:	b538      	push	{r3, r4, r5, lr}
 800f06a:	4b16      	ldr	r3, [pc, #88]	@ (800f0c4 <ai_platform_network_post_init+0x5c>)
 800f06c:	6802      	ldr	r2, [r0, #0]
 800f06e:	ea02 0103 	and.w	r1, r2, r3
 800f072:	4393      	bics	r3, r2
 800f074:	d108      	bne.n	800f088 <ai_platform_network_post_init+0x20>
 800f076:	6903      	ldr	r3, [r0, #16]
 800f078:	4604      	mov	r4, r0
 800f07a:	f013 0502 	ands.w	r5, r3, #2
 800f07e:	d005      	beq.n	800f08c <ai_platform_network_post_init+0x24>
 800f080:	428a      	cmp	r2, r1
 800f082:	d00a      	beq.n	800f09a <ai_platform_network_post_init+0x32>
 800f084:	2001      	movs	r0, #1
 800f086:	bd38      	pop	{r3, r4, r5, pc}
 800f088:	2000      	movs	r0, #0
 800f08a:	bd38      	pop	{r3, r4, r5, pc}
 800f08c:	2210      	movs	r2, #16
 800f08e:	2111      	movs	r1, #17
 800f090:	300c      	adds	r0, #12
 800f092:	f000 f821 	bl	800f0d8 <core_set_error>
 800f096:	4628      	mov	r0, r5
 800f098:	bd38      	pop	{r3, r4, r5, pc}
 800f09a:	f000 f85f 	bl	800f15c <ai_layers_post_init_all>
 800f09e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d0ef      	beq.n	800f084 <ai_platform_network_post_init+0x1c>
 800f0a4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800f0a6:	e008      	b.n	800f0ba <ai_platform_network_post_init+0x52>
 800f0a8:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800f0ac:	4798      	blx	r3
 800f0ae:	692b      	ldr	r3, [r5, #16]
 800f0b0:	42ab      	cmp	r3, r5
 800f0b2:	461d      	mov	r5, r3
 800f0b4:	d0e6      	beq.n	800f084 <ai_platform_network_post_init+0x1c>
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d0e4      	beq.n	800f084 <ai_platform_network_post_init+0x1c>
 800f0ba:	4629      	mov	r1, r5
 800f0bc:	2000      	movs	r0, #0
 800f0be:	2d00      	cmp	r5, #0
 800f0c0:	d1f2      	bne.n	800f0a8 <ai_platform_network_post_init+0x40>
 800f0c2:	e7df      	b.n	800f084 <ai_platform_network_post_init+0x1c>
 800f0c4:	a1c00100 	.word	0xa1c00100

0800f0c8 <core_init>:
 800f0c8:	2001      	movs	r0, #1
 800f0ca:	4770      	bx	lr

0800f0cc <core_get_error>:
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	6800      	ldr	r0, [r0, #0]
 800f0d2:	601a      	str	r2, [r3, #0]
 800f0d4:	4770      	bx	lr
 800f0d6:	bf00      	nop

0800f0d8 <core_set_error>:
 800f0d8:	4603      	mov	r3, r0
 800f0da:	7800      	ldrb	r0, [r0, #0]
 800f0dc:	b108      	cbz	r0, 800f0e2 <core_set_error+0xa>
 800f0de:	2000      	movs	r0, #0
 800f0e0:	4770      	bx	lr
 800f0e2:	7019      	strb	r1, [r3, #0]
 800f0e4:	2001      	movs	r0, #1
 800f0e6:	6819      	ldr	r1, [r3, #0]
 800f0e8:	f362 211f 	bfi	r1, r2, #8, #24
 800f0ec:	6019      	str	r1, [r3, #0]
 800f0ee:	4770      	bx	lr

0800f0f0 <ai_check_custom_types>:
 800f0f0:	b082      	sub	sp, #8
 800f0f2:	4b12      	ldr	r3, [pc, #72]	@ (800f13c <ai_check_custom_types+0x4c>)
 800f0f4:	9301      	str	r3, [sp, #4]
 800f0f6:	b118      	cbz	r0, 800f100 <ai_check_custom_types+0x10>
 800f0f8:	7803      	ldrb	r3, [r0, #0]
 800f0fa:	2b03      	cmp	r3, #3
 800f0fc:	d002      	beq.n	800f104 <ai_check_custom_types+0x14>
 800f0fe:	2000      	movs	r0, #0
 800f100:	b002      	add	sp, #8
 800f102:	4770      	bx	lr
 800f104:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f108:	4293      	cmp	r3, r2
 800f10a:	d004      	beq.n	800f116 <ai_check_custom_types+0x26>
 800f10c:	2001      	movs	r0, #1
 800f10e:	f080 0001 	eor.w	r0, r0, #1
 800f112:	b002      	add	sp, #8
 800f114:	4770      	bx	lr
 800f116:	7842      	ldrb	r2, [r0, #1]
 800f118:	3001      	adds	r0, #1
 800f11a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d1f4      	bne.n	800f10c <ai_check_custom_types+0x1c>
 800f122:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800f126:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d1ee      	bne.n	800f10c <ai_check_custom_types+0x1c>
 800f12e:	7842      	ldrb	r2, [r0, #1]
 800f130:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f134:	429a      	cmp	r2, r3
 800f136:	d1e9      	bne.n	800f10c <ai_check_custom_types+0x1c>
 800f138:	2000      	movs	r0, #0
 800f13a:	e7e8      	b.n	800f10e <ai_check_custom_types+0x1e>
 800f13c:	84048403 	.word	0x84048403

0800f140 <ai_layers_init_all>:
 800f140:	2100      	movs	r1, #0
 800f142:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f144:	b13b      	cbz	r3, 800f156 <ai_layers_init_all+0x16>
 800f146:	691a      	ldr	r2, [r3, #16]
 800f148:	3101      	adds	r1, #1
 800f14a:	60d8      	str	r0, [r3, #12]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	4613      	mov	r3, r2
 800f150:	d001      	beq.n	800f156 <ai_layers_init_all+0x16>
 800f152:	2a00      	cmp	r2, #0
 800f154:	d1f6      	bne.n	800f144 <ai_layers_init_all+0x4>
 800f156:	4608      	mov	r0, r1
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop

0800f15c <ai_layers_post_init_all>:
 800f15c:	b538      	push	{r3, r4, r5, lr}
 800f15e:	2500      	movs	r5, #0
 800f160:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800f162:	b16c      	cbz	r4, 800f180 <ai_layers_post_init_all+0x24>
 800f164:	6863      	ldr	r3, [r4, #4]
 800f166:	07db      	lsls	r3, r3, #31
 800f168:	d504      	bpl.n	800f174 <ai_layers_post_init_all+0x18>
 800f16a:	6a23      	ldr	r3, [r4, #32]
 800f16c:	4620      	mov	r0, r4
 800f16e:	b10b      	cbz	r3, 800f174 <ai_layers_post_init_all+0x18>
 800f170:	3501      	adds	r5, #1
 800f172:	4798      	blx	r3
 800f174:	6923      	ldr	r3, [r4, #16]
 800f176:	42a3      	cmp	r3, r4
 800f178:	461c      	mov	r4, r3
 800f17a:	d001      	beq.n	800f180 <ai_layers_post_init_all+0x24>
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d1f0      	bne.n	800f162 <ai_layers_post_init_all+0x6>
 800f180:	4628      	mov	r0, r5
 800f182:	bd38      	pop	{r3, r4, r5, pc}

0800f184 <forward_conv2d_if32of32wf32_nl_pool>:
 800f184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f188:	f8d0 c018 	ldr.w	ip, [r0, #24]
 800f18c:	b0c3      	sub	sp, #268	@ 0x10c
 800f18e:	f8bc 3000 	ldrh.w	r3, [ip]
 800f192:	9321      	str	r3, [sp, #132]	@ 0x84
 800f194:	2b00      	cmp	r3, #0
 800f196:	f000 813c 	beq.w	800f412 <forward_conv2d_if32of32wf32_nl_pool+0x28e>
 800f19a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800f19e:	4604      	mov	r4, r0
 800f1a0:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800f1a4:	f1bb 0f00 	cmp.w	fp, #0
 800f1a8:	d001      	beq.n	800f1ae <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 800f1aa:	f8db b000 	ldr.w	fp, [fp]
 800f1ae:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f1b0:	2a01      	cmp	r2, #1
 800f1b2:	f000 812d 	beq.w	800f410 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 800f1b6:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800f1ba:	f1ba 0f00 	cmp.w	sl, #0
 800f1be:	d001      	beq.n	800f1c4 <forward_conv2d_if32of32wf32_nl_pool+0x40>
 800f1c0:	f8da a000 	ldr.w	sl, [sl]
 800f1c4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f1c6:	2a02      	cmp	r2, #2
 800f1c8:	f000 8122 	beq.w	800f410 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 800f1cc:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800f1d0:	8b1b      	ldrh	r3, [r3, #24]
 800f1d2:	f1b8 0f00 	cmp.w	r8, #0
 800f1d6:	f000 812f 	beq.w	800f438 <forward_conv2d_if32of32wf32_nl_pool+0x2b4>
 800f1da:	2b01      	cmp	r3, #1
 800f1dc:	f8d8 2000 	ldr.w	r2, [r8]
 800f1e0:	f240 8130 	bls.w	800f444 <forward_conv2d_if32of32wf32_nl_pool+0x2c0>
 800f1e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f1e8:	9340      	str	r3, [sp, #256]	@ 0x100
 800f1ea:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800f1ee:	f8db 100c 	ldr.w	r1, [fp, #12]
 800f1f2:	f8da 000c 	ldr.w	r0, [sl, #12]
 800f1f6:	9122      	str	r1, [sp, #136]	@ 0x88
 800f1f8:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800f1fc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 800f200:	9130      	str	r1, [sp, #192]	@ 0xc0
 800f202:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800f206:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f208:	9131      	str	r1, [sp, #196]	@ 0xc4
 800f20a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800f20e:	f8de 7004 	ldr.w	r7, [lr, #4]
 800f212:	9132      	str	r1, [sp, #200]	@ 0xc8
 800f214:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800f218:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800f21a:	9133      	str	r1, [sp, #204]	@ 0xcc
 800f21c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800f220:	681e      	ldr	r6, [r3, #0]
 800f222:	9123      	str	r1, [sp, #140]	@ 0x8c
 800f224:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800f228:	972a      	str	r7, [sp, #168]	@ 0xa8
 800f22a:	9124      	str	r1, [sp, #144]	@ 0x90
 800f22c:	f8de 7008 	ldr.w	r7, [lr, #8]
 800f230:	9628      	str	r6, [sp, #160]	@ 0xa0
 800f232:	972f      	str	r7, [sp, #188]	@ 0xbc
 800f234:	e9d4 950a 	ldrd	r9, r5, [r4, #40]	@ 0x28
 800f238:	fa1f f189 	uxth.w	r1, r9
 800f23c:	9527      	str	r5, [sp, #156]	@ 0x9c
 800f23e:	685d      	ldr	r5, [r3, #4]
 800f240:	9134      	str	r1, [sp, #208]	@ 0xd0
 800f242:	9529      	str	r5, [sp, #164]	@ 0xa4
 800f244:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 800f248:	f8bd 109c 	ldrh.w	r1, [sp, #156]	@ 0x9c
 800f24c:	9135      	str	r1, [sp, #212]	@ 0xd4
 800f24e:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	@ 0xa0
 800f252:	9136      	str	r1, [sp, #216]	@ 0xd8
 800f254:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 800f258:	9137      	str	r1, [sp, #220]	@ 0xdc
 800f25a:	6899      	ldr	r1, [r3, #8]
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	912d      	str	r1, [sp, #180]	@ 0xb4
 800f260:	932e      	str	r3, [sp, #184]	@ 0xb8
 800f262:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 800f266:	9338      	str	r3, [sp, #224]	@ 0xe0
 800f268:	b2ab      	uxth	r3, r5
 800f26a:	9339      	str	r3, [sp, #228]	@ 0xe4
 800f26c:	b2b3      	uxth	r3, r6
 800f26e:	933a      	str	r3, [sp, #232]	@ 0xe8
 800f270:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	@ 0xa8
 800f274:	9325      	str	r3, [sp, #148]	@ 0x94
 800f276:	b23b      	sxth	r3, r7
 800f278:	9326      	str	r3, [sp, #152]	@ 0x98
 800f27a:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 800f27e:	933b      	str	r3, [sp, #236]	@ 0xec
 800f280:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 800f284:	933c      	str	r3, [sp, #240]	@ 0xf0
 800f286:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 800f28a:	933d      	str	r3, [sp, #244]	@ 0xf4
 800f28c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f28e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f292:	933e      	str	r3, [sp, #248]	@ 0xf8
 800f294:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f296:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f29a:	933f      	str	r3, [sp, #252]	@ 0xfc
 800f29c:	6a23      	ldr	r3, [r4, #32]
 800f29e:	9322      	str	r3, [sp, #136]	@ 0x88
 800f2a0:	f1b8 0f00 	cmp.w	r8, #0
 800f2a4:	f000 80b7 	beq.w	800f416 <forward_conv2d_if32of32wf32_nl_pool+0x292>
 800f2a8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	f000 80ba 	beq.w	800f426 <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 800f2b2:	9221      	str	r2, [sp, #132]	@ 0x84
 800f2b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	9322      	str	r3, [sp, #136]	@ 0x88
 800f2bc:	f002 fb26 	bl	801190c <ai_array_get_byte_size>
 800f2c0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800f2c4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f2c6:	902c      	str	r0, [sp, #176]	@ 0xb0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	f000 80be 	beq.w	800f44a <forward_conv2d_if32of32wf32_nl_pool+0x2c6>
 800f2ce:	9241      	str	r2, [sp, #260]	@ 0x104
 800f2d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f2d4:	f002 fb1a 	bl	801190c <ai_array_get_byte_size>
 800f2d8:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800f2dc:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f2de:	f8bc 3000 	ldrh.w	r3, [ip]
 800f2e2:	902b      	str	r0, [sp, #172]	@ 0xac
 800f2e4:	9321      	str	r3, [sp, #132]	@ 0x84
 800f2e6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800f2e8:	b2ad      	uxth	r5, r5
 800f2ea:	b2b6      	uxth	r6, r6
 800f2ec:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 800f2ee:	f107 38ff 	add.w	r8, r7, #4294967295
 800f2f2:	3d01      	subs	r5, #1
 800f2f4:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 800f2f6:	3e01      	subs	r6, #1
 800f2f8:	fa1f f989 	uxth.w	r9, r9
 800f2fc:	f8bd e09c 	ldrh.w	lr, [sp, #156]	@ 0x9c
 800f300:	fb15 7508 	smlabb	r5, r5, r8, r7
 800f304:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 800f306:	699b      	ldr	r3, [r3, #24]
 800f308:	fa0f f885 	sxth.w	r8, r5
 800f30c:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 800f30e:	f8db 0018 	ldr.w	r0, [fp, #24]
 800f312:	3d01      	subs	r5, #1
 800f314:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800f318:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f31a:	fb16 7605 	smlabb	r6, r6, r5, r7
 800f31e:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 800f320:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 800f322:	2b03      	cmp	r3, #3
 800f324:	eba5 0508 	sub.w	r5, r5, r8
 800f328:	b236      	sxth	r6, r6
 800f32a:	f8da 1018 	ldr.w	r1, [sl, #24]
 800f32e:	fa15 f587 	uxtah	r5, r5, r7
 800f332:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800f334:	6992      	ldr	r2, [r2, #24]
 800f336:	fa15 f587 	uxtah	r5, r5, r7
 800f33a:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 800f33c:	f8d4 a05c 	ldr.w	sl, [r4, #92]	@ 0x5c
 800f340:	6880      	ldr	r0, [r0, #8]
 800f342:	6889      	ldr	r1, [r1, #8]
 800f344:	6892      	ldr	r2, [r2, #8]
 800f346:	fb95 f5f9 	sdiv	r5, r5, r9
 800f34a:	eba7 0906 	sub.w	r9, r7, r6
 800f34e:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 800f350:	f105 0501 	add.w	r5, r5, #1
 800f354:	fa19 f987 	uxtah	r9, r9, r7
 800f358:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
 800f35a:	b22d      	sxth	r5, r5
 800f35c:	fa19 f987 	uxtah	r9, r9, r7
 800f360:	fb99 f9fe 	sdiv	r9, r9, lr
 800f364:	f109 0e01 	add.w	lr, r9, #1
 800f368:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 800f36c:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 800f370:	d94e      	bls.n	800f410 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 800f372:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800f376:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 800f37a:	f1bc 0f00 	cmp.w	ip, #0
 800f37e:	d06f      	beq.n	800f460 <forward_conv2d_if32of32wf32_nl_pool+0x2dc>
 800f380:	f8dc 7000 	ldr.w	r7, [ip]
 800f384:	b10f      	cbz	r7, 800f38a <forward_conv2d_if32of32wf32_nl_pool+0x206>
 800f386:	69bf      	ldr	r7, [r7, #24]
 800f388:	68bf      	ldr	r7, [r7, #8]
 800f38a:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 800f38c:	9513      	str	r5, [sp, #76]	@ 0x4c
 800f38e:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f390:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 800f392:	960e      	str	r6, [sp, #56]	@ 0x38
 800f394:	931e      	str	r3, [sp, #120]	@ 0x78
 800f396:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800f398:	931d      	str	r3, [sp, #116]	@ 0x74
 800f39a:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 800f39c:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 800f3a0:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 800f3a2:	fa0f f48e 	sxth.w	r4, lr
 800f3a6:	e9cd a319 	strd	sl, r3, [sp, #100]	@ 0x64
 800f3aa:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800f3ac:	9318      	str	r3, [sp, #96]	@ 0x60
 800f3ae:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800f3b0:	9317      	str	r3, [sp, #92]	@ 0x5c
 800f3b2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f3b4:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
 800f3b8:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800f3ba:	9312      	str	r3, [sp, #72]	@ 0x48
 800f3bc:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 800f3be:	9311      	str	r3, [sp, #68]	@ 0x44
 800f3c0:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800f3c2:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 800f3c6:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800f3c8:	930d      	str	r3, [sp, #52]	@ 0x34
 800f3ca:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800f3cc:	930c      	str	r3, [sp, #48]	@ 0x30
 800f3ce:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 800f3d0:	9414      	str	r4, [sp, #80]	@ 0x50
 800f3d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3d4:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800f3d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3d8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800f3da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3dc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800f3de:	9308      	str	r3, [sp, #32]
 800f3e0:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800f3e2:	9307      	str	r3, [sp, #28]
 800f3e4:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800f3e6:	9306      	str	r3, [sp, #24]
 800f3e8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f3ea:	9305      	str	r3, [sp, #20]
 800f3ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f3ee:	9304      	str	r3, [sp, #16]
 800f3f0:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800f3f2:	9303      	str	r3, [sp, #12]
 800f3f4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800f3f6:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800f3fa:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800f3fe:	465b      	mov	r3, fp
 800f400:	69a4      	ldr	r4, [r4, #24]
 800f402:	68a4      	ldr	r4, [r4, #8]
 800f404:	9400      	str	r4, [sp, #0]
 800f406:	f000 f9cf 	bl	800f7a8 <forward_lite_conv2d_if32of32wf32_pool>
 800f40a:	b043      	add	sp, #268	@ 0x10c
 800f40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f410:	2300      	movs	r3, #0
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	deff      	udf	#255	@ 0xff
 800f416:	b10b      	cbz	r3, 800f41c <forward_conv2d_if32of32wf32_nl_pool+0x298>
 800f418:	689b      	ldr	r3, [r3, #8]
 800f41a:	9322      	str	r3, [sp, #136]	@ 0x88
 800f41c:	2301      	movs	r3, #1
 800f41e:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 800f422:	932b      	str	r3, [sp, #172]	@ 0xac
 800f424:	e75f      	b.n	800f2e6 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 800f426:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f428:	b10b      	cbz	r3, 800f42e <forward_conv2d_if32of32wf32_nl_pool+0x2aa>
 800f42a:	689b      	ldr	r3, [r3, #8]
 800f42c:	9322      	str	r3, [sp, #136]	@ 0x88
 800f42e:	2301      	movs	r3, #1
 800f430:	2100      	movs	r1, #0
 800f432:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
 800f436:	e756      	b.n	800f2e6 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 800f438:	2b01      	cmp	r3, #1
 800f43a:	d90e      	bls.n	800f45a <forward_conv2d_if32of32wf32_nl_pool+0x2d6>
 800f43c:	4642      	mov	r2, r8
 800f43e:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
 800f442:	e6d4      	b.n	800f1ee <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 800f444:	2300      	movs	r3, #0
 800f446:	9340      	str	r3, [sp, #256]	@ 0x100
 800f448:	e6cf      	b.n	800f1ea <forward_conv2d_if32of32wf32_nl_pool+0x66>
 800f44a:	2301      	movs	r3, #1
 800f44c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800f450:	932b      	str	r3, [sp, #172]	@ 0xac
 800f452:	f8bc 3000 	ldrh.w	r3, [ip]
 800f456:	9321      	str	r3, [sp, #132]	@ 0x84
 800f458:	e745      	b.n	800f2e6 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 800f45a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f45e:	deff      	udf	#255	@ 0xff
 800f460:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800f464:	deff      	udf	#255	@ 0xff
 800f466:	bf00      	nop

0800f468 <forward_dense>:
 800f468:	6982      	ldr	r2, [r0, #24]
 800f46a:	8813      	ldrh	r3, [r2, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d043      	beq.n	800f4f8 <forward_dense+0x90>
 800f470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f474:	6855      	ldr	r5, [r2, #4]
 800f476:	b08e      	sub	sp, #56	@ 0x38
 800f478:	6869      	ldr	r1, [r5, #4]
 800f47a:	b101      	cbz	r1, 800f47e <forward_dense+0x16>
 800f47c:	6809      	ldr	r1, [r1, #0]
 800f47e:	2b01      	cmp	r3, #1
 800f480:	d069      	beq.n	800f556 <forward_dense+0xee>
 800f482:	692a      	ldr	r2, [r5, #16]
 800f484:	b102      	cbz	r2, 800f488 <forward_dense+0x20>
 800f486:	6812      	ldr	r2, [r2, #0]
 800f488:	2b02      	cmp	r3, #2
 800f48a:	d061      	beq.n	800f550 <forward_dense+0xe8>
 800f48c:	69ec      	ldr	r4, [r5, #28]
 800f48e:	2c00      	cmp	r4, #0
 800f490:	d057      	beq.n	800f542 <forward_dense+0xda>
 800f492:	8b2e      	ldrh	r6, [r5, #24]
 800f494:	6820      	ldr	r0, [r4, #0]
 800f496:	2e01      	cmp	r6, #1
 800f498:	d955      	bls.n	800f546 <forward_dense+0xde>
 800f49a:	6864      	ldr	r4, [r4, #4]
 800f49c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800f4a0:	2b03      	cmp	r3, #3
 800f4a2:	68d0      	ldr	r0, [r2, #12]
 800f4a4:	68cf      	ldr	r7, [r1, #12]
 800f4a6:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800f4aa:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800f4ae:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 800f4b2:	f8d9 0000 	ldr.w	r0, [r9]
 800f4b6:	fb06 f807 	mul.w	r8, r6, r7
 800f4ba:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 800f4be:	d044      	beq.n	800f54a <forward_dense+0xe2>
 800f4c0:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 800f4c2:	b11d      	cbz	r5, 800f4cc <forward_dense+0x64>
 800f4c4:	682d      	ldr	r5, [r5, #0]
 800f4c6:	b10d      	cbz	r5, 800f4cc <forward_dense+0x64>
 800f4c8:	69ab      	ldr	r3, [r5, #24]
 800f4ca:	689d      	ldr	r5, [r3, #8]
 800f4cc:	6992      	ldr	r2, [r2, #24]
 800f4ce:	698b      	ldr	r3, [r1, #24]
 800f4d0:	6890      	ldr	r0, [r2, #8]
 800f4d2:	6899      	ldr	r1, [r3, #8]
 800f4d4:	b10c      	cbz	r4, 800f4da <forward_dense+0x72>
 800f4d6:	69a3      	ldr	r3, [r4, #24]
 800f4d8:	689c      	ldr	r4, [r3, #8]
 800f4da:	4b20      	ldr	r3, [pc, #128]	@ (800f55c <forward_dense+0xf4>)
 800f4dc:	459c      	cmp	ip, r3
 800f4de:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800f4e2:	d023      	beq.n	800f52c <forward_dense+0xc4>
 800f4e4:	4e1e      	ldr	r6, [pc, #120]	@ (800f560 <forward_dense+0xf8>)
 800f4e6:	45b4      	cmp	ip, r6
 800f4e8:	d015      	beq.n	800f516 <forward_dense+0xae>
 800f4ea:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 800f4ee:	459c      	cmp	ip, r3
 800f4f0:	d004      	beq.n	800f4fc <forward_dense+0x94>
 800f4f2:	b00e      	add	sp, #56	@ 0x38
 800f4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	deff      	udf	#255	@ 0xff
 800f4fc:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800f500:	a807      	add	r0, sp, #28
 800f502:	9209      	str	r2, [sp, #36]	@ 0x24
 800f504:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 800f508:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 800f50c:	f001 fb98 	bl	8010c40 <forward_lite_dense_if32of32wf32>
 800f510:	b00e      	add	sp, #56	@ 0x38
 800f512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f516:	464b      	mov	r3, r9
 800f518:	9500      	str	r5, [sp, #0]
 800f51a:	e9cd e803 	strd	lr, r8, [sp, #12]
 800f51e:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800f522:	f001 fceb 	bl	8010efc <forward_lite_dense_if32of32wf32_lut4>
 800f526:	b00e      	add	sp, #56	@ 0x38
 800f528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f52c:	464b      	mov	r3, r9
 800f52e:	9500      	str	r5, [sp, #0]
 800f530:	e9cd e803 	strd	lr, r8, [sp, #12]
 800f534:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800f538:	f001 fe0a 	bl	8011150 <forward_lite_dense_if32of32wf32_lut8>
 800f53c:	b00e      	add	sp, #56	@ 0x38
 800f53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f542:	4620      	mov	r0, r4
 800f544:	e7aa      	b.n	800f49c <forward_dense+0x34>
 800f546:	2400      	movs	r4, #0
 800f548:	e7a8      	b.n	800f49c <forward_dense+0x34>
 800f54a:	2300      	movs	r3, #0
 800f54c:	685b      	ldr	r3, [r3, #4]
 800f54e:	deff      	udf	#255	@ 0xff
 800f550:	2300      	movs	r3, #0
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	deff      	udf	#255	@ 0xff
 800f556:	2300      	movs	r3, #0
 800f558:	685b      	ldr	r3, [r3, #4]
 800f55a:	deff      	udf	#255	@ 0xff
 800f55c:	00d01040 	.word	0x00d01040
 800f560:	00f01040 	.word	0x00f01040

0800f564 <forward_relu>:
 800f564:	6982      	ldr	r2, [r0, #24]
 800f566:	8813      	ldrh	r3, [r2, #0]
 800f568:	b323      	cbz	r3, 800f5b4 <forward_relu+0x50>
 800f56a:	6851      	ldr	r1, [r2, #4]
 800f56c:	684a      	ldr	r2, [r1, #4]
 800f56e:	b102      	cbz	r2, 800f572 <forward_relu+0xe>
 800f570:	6812      	ldr	r2, [r2, #0]
 800f572:	2b01      	cmp	r3, #1
 800f574:	f000 8086 	beq.w	800f684 <forward_relu+0x120>
 800f578:	b470      	push	{r4, r5, r6}
 800f57a:	690b      	ldr	r3, [r1, #16]
 800f57c:	b103      	cbz	r3, 800f580 <forward_relu+0x1c>
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	69c6      	ldr	r6, [r0, #28]
 800f582:	b1ce      	cbz	r6, 800f5b8 <forward_relu+0x54>
 800f584:	6871      	ldr	r1, [r6, #4]
 800f586:	6998      	ldr	r0, [r3, #24]
 800f588:	2901      	cmp	r1, #1
 800f58a:	d03f      	beq.n	800f60c <forward_relu+0xa8>
 800f58c:	6893      	ldr	r3, [r2, #8]
 800f58e:	6991      	ldr	r1, [r2, #24]
 800f590:	0a1b      	lsrs	r3, r3, #8
 800f592:	6880      	ldr	r0, [r0, #8]
 800f594:	6889      	ldr	r1, [r1, #8]
 800f596:	d06c      	beq.n	800f672 <forward_relu+0x10e>
 800f598:	68d5      	ldr	r5, [r2, #12]
 800f59a:	2201      	movs	r2, #1
 800f59c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f5a0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800f5a4:	429d      	cmp	r5, r3
 800f5a6:	fb04 f202 	mul.w	r2, r4, r2
 800f5aa:	d1f9      	bne.n	800f5a0 <forward_relu+0x3c>
 800f5ac:	68b3      	ldr	r3, [r6, #8]
 800f5ae:	bc70      	pop	{r4, r5, r6}
 800f5b0:	f000 bd04 	b.w	800ffbc <forward_lite_nl_relu_generic_if32of32_kernel>
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	deff      	udf	#255	@ 0xff
 800f5b8:	6999      	ldr	r1, [r3, #24]
 800f5ba:	6893      	ldr	r3, [r2, #8]
 800f5bc:	6990      	ldr	r0, [r2, #24]
 800f5be:	0a1b      	lsrs	r3, r3, #8
 800f5c0:	6889      	ldr	r1, [r1, #8]
 800f5c2:	6884      	ldr	r4, [r0, #8]
 800f5c4:	d057      	beq.n	800f676 <forward_relu+0x112>
 800f5c6:	68d5      	ldr	r5, [r2, #12]
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f5ce:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800f5d2:	429d      	cmp	r5, r3
 800f5d4:	fb00 f202 	mul.w	r2, r0, r2
 800f5d8:	d1f9      	bne.n	800f5ce <forward_relu+0x6a>
 800f5da:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f5de:	4413      	add	r3, r2
 800f5e0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800f5e4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800f5e8:	4294      	cmp	r4, r2
 800f5ea:	d80d      	bhi.n	800f608 <forward_relu+0xa4>
 800f5ec:	3204      	adds	r2, #4
 800f5ee:	3104      	adds	r1, #4
 800f5f0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800f68c <forward_relu+0x128>
 800f5f4:	4613      	mov	r3, r2
 800f5f6:	ed72 7a01 	vldmdb	r2!, {s15}
 800f5fa:	3b08      	subs	r3, #8
 800f5fc:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800f600:	ed61 7a01 	vstmdb	r1!, {s15}
 800f604:	429c      	cmp	r4, r3
 800f606:	d9f5      	bls.n	800f5f4 <forward_relu+0x90>
 800f608:	bc70      	pop	{r4, r5, r6}
 800f60a:	4770      	bx	lr
 800f60c:	6993      	ldr	r3, [r2, #24]
 800f60e:	6880      	ldr	r0, [r0, #8]
 800f610:	689c      	ldr	r4, [r3, #8]
 800f612:	6893      	ldr	r3, [r2, #8]
 800f614:	0a1b      	lsrs	r3, r3, #8
 800f616:	d030      	beq.n	800f67a <forward_relu+0x116>
 800f618:	68d5      	ldr	r5, [r2, #12]
 800f61a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f61e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f622:	429d      	cmp	r5, r3
 800f624:	fb02 f101 	mul.w	r1, r2, r1
 800f628:	d1f9      	bne.n	800f61e <forward_relu+0xba>
 800f62a:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 800f62e:	68b3      	ldr	r3, [r6, #8]
 800f630:	440a      	add	r2, r1
 800f632:	ed93 7a00 	vldr	s14, [r3]
 800f636:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f63a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800f63e:	429c      	cmp	r4, r3
 800f640:	d8e2      	bhi.n	800f608 <forward_relu+0xa4>
 800f642:	1d02      	adds	r2, r0, #4
 800f644:	3304      	adds	r3, #4
 800f646:	2000      	movs	r0, #0
 800f648:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f64c:	1f19      	subs	r1, r3, #4
 800f64e:	3b08      	subs	r3, #8
 800f650:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f658:	d405      	bmi.n	800f666 <forward_relu+0x102>
 800f65a:	429c      	cmp	r4, r3
 800f65c:	f842 0d04 	str.w	r0, [r2, #-4]!
 800f660:	d8d2      	bhi.n	800f608 <forward_relu+0xa4>
 800f662:	460b      	mov	r3, r1
 800f664:	e7f0      	b.n	800f648 <forward_relu+0xe4>
 800f666:	429c      	cmp	r4, r3
 800f668:	ed62 7a01 	vstmdb	r2!, {s15}
 800f66c:	d8cc      	bhi.n	800f608 <forward_relu+0xa4>
 800f66e:	460b      	mov	r3, r1
 800f670:	e7ea      	b.n	800f648 <forward_relu+0xe4>
 800f672:	2201      	movs	r2, #1
 800f674:	e79a      	b.n	800f5ac <forward_relu+0x48>
 800f676:	4622      	mov	r2, r4
 800f678:	e7b8      	b.n	800f5ec <forward_relu+0x88>
 800f67a:	68b2      	ldr	r2, [r6, #8]
 800f67c:	4623      	mov	r3, r4
 800f67e:	ed92 7a00 	vldr	s14, [r2]
 800f682:	e7de      	b.n	800f642 <forward_relu+0xde>
 800f684:	2300      	movs	r3, #0
 800f686:	685b      	ldr	r3, [r3, #4]
 800f688:	deff      	udf	#255	@ 0xff
 800f68a:	bf00      	nop
 800f68c:	00000000 	.word	0x00000000

0800f690 <forward_upsample_bilinear>:
 800f690:	6983      	ldr	r3, [r0, #24]
 800f692:	881a      	ldrh	r2, [r3, #0]
 800f694:	2a00      	cmp	r2, #0
 800f696:	d04f      	beq.n	800f738 <forward_upsample_bilinear+0xa8>
 800f698:	6859      	ldr	r1, [r3, #4]
 800f69a:	4684      	mov	ip, r0
 800f69c:	684b      	ldr	r3, [r1, #4]
 800f69e:	b103      	cbz	r3, 800f6a2 <forward_upsample_bilinear+0x12>
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2a01      	cmp	r2, #1
 800f6a4:	d074      	beq.n	800f790 <forward_upsample_bilinear+0x100>
 800f6a6:	690a      	ldr	r2, [r1, #16]
 800f6a8:	2a00      	cmp	r2, #0
 800f6aa:	d074      	beq.n	800f796 <forward_upsample_bilinear+0x106>
 800f6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b0:	699c      	ldr	r4, [r3, #24]
 800f6b2:	b084      	sub	sp, #16
 800f6b4:	68d8      	ldr	r0, [r3, #12]
 800f6b6:	6821      	ldr	r1, [r4, #0]
 800f6b8:	6815      	ldr	r5, [r2, #0]
 800f6ba:	f8dc 3020 	ldr.w	r3, [ip, #32]
 800f6be:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 800f6c2:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 800f7a4 <forward_upsample_bilinear+0x114>
 800f6c6:	689b      	ldr	r3, [r3, #8]
 800f6c8:	68ee      	ldr	r6, [r5, #12]
 800f6ca:	4541      	cmp	r1, r8
 800f6cc:	edd3 0a00 	vldr	s1, [r3]
 800f6d0:	ed93 0a01 	vldr	s0, [r3, #4]
 800f6d4:	6882      	ldr	r2, [r0, #8]
 800f6d6:	68c3      	ldr	r3, [r0, #12]
 800f6d8:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800f6dc:	e9d6 6702 	ldrd	r6, r7, [r6, #8]
 800f6e0:	d048      	beq.n	800f774 <forward_upsample_bilinear+0xe4>
 800f6e2:	dd14      	ble.n	800f70e <forward_upsample_bilinear+0x7e>
 800f6e4:	482d      	ldr	r0, [pc, #180]	@ (800f79c <forward_upsample_bilinear+0x10c>)
 800f6e6:	4281      	cmp	r1, r0
 800f6e8:	d036      	beq.n	800f758 <forward_upsample_bilinear+0xc8>
 800f6ea:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800f6ee:	4281      	cmp	r1, r0
 800f6f0:	d10a      	bne.n	800f708 <forward_upsample_bilinear+0x78>
 800f6f2:	69a9      	ldr	r1, [r5, #24]
 800f6f4:	68a0      	ldr	r0, [r4, #8]
 800f6f6:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800f6fa:	6889      	ldr	r1, [r1, #8]
 800f6fc:	e9cd e402 	strd	lr, r4, [sp, #8]
 800f700:	e9cd 6700 	strd	r6, r7, [sp]
 800f704:	f001 f91c 	bl	8010940 <forward_lite_upsample_bilinear_is16os16>
 800f708:	b004      	add	sp, #16
 800f70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f70e:	4824      	ldr	r0, [pc, #144]	@ (800f7a0 <forward_upsample_bilinear+0x110>)
 800f710:	4281      	cmp	r1, r0
 800f712:	d013      	beq.n	800f73c <forward_upsample_bilinear+0xac>
 800f714:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800f718:	4281      	cmp	r1, r0
 800f71a:	d1f5      	bne.n	800f708 <forward_upsample_bilinear+0x78>
 800f71c:	69a9      	ldr	r1, [r5, #24]
 800f71e:	68a0      	ldr	r0, [r4, #8]
 800f720:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800f724:	6889      	ldr	r1, [r1, #8]
 800f726:	e9cd e402 	strd	lr, r4, [sp, #8]
 800f72a:	e9cd 6700 	strd	r6, r7, [sp]
 800f72e:	f001 f9c7 	bl	8010ac0 <forward_lite_upsample_bilinear_iu16ou16>
 800f732:	b004      	add	sp, #16
 800f734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f738:	6853      	ldr	r3, [r2, #4]
 800f73a:	deff      	udf	#255	@ 0xff
 800f73c:	69a9      	ldr	r1, [r5, #24]
 800f73e:	68a0      	ldr	r0, [r4, #8]
 800f740:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800f744:	6889      	ldr	r1, [r1, #8]
 800f746:	e9cd e402 	strd	lr, r4, [sp, #8]
 800f74a:	e9cd 6700 	strd	r6, r7, [sp]
 800f74e:	f001 f835 	bl	80107bc <forward_lite_upsample_bilinear_iu8ou8>
 800f752:	b004      	add	sp, #16
 800f754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f758:	69a9      	ldr	r1, [r5, #24]
 800f75a:	68a0      	ldr	r0, [r4, #8]
 800f75c:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800f760:	6889      	ldr	r1, [r1, #8]
 800f762:	e9cd e402 	strd	lr, r4, [sp, #8]
 800f766:	e9cd 6700 	strd	r6, r7, [sp]
 800f76a:	f000 ff65 	bl	8010638 <forward_lite_upsample_bilinear_is8os8>
 800f76e:	b004      	add	sp, #16
 800f770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f774:	69a9      	ldr	r1, [r5, #24]
 800f776:	68a0      	ldr	r0, [r4, #8]
 800f778:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800f77c:	6889      	ldr	r1, [r1, #8]
 800f77e:	e9cd e402 	strd	lr, r4, [sp, #8]
 800f782:	e9cd 6700 	strd	r6, r7, [sp]
 800f786:	f000 fe97 	bl	80104b8 <forward_lite_upsample_bilinear_if32of32>
 800f78a:	b004      	add	sp, #16
 800f78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f790:	2300      	movs	r3, #0
 800f792:	685b      	ldr	r3, [r3, #4]
 800f794:	deff      	udf	#255	@ 0xff
 800f796:	68d3      	ldr	r3, [r2, #12]
 800f798:	deff      	udf	#255	@ 0xff
 800f79a:	bf00      	nop
 800f79c:	00840440 	.word	0x00840440
 800f7a0:	00040440 	.word	0x00040440
 800f7a4:	00821040 	.word	0x00821040

0800f7a8 <forward_lite_conv2d_if32of32wf32_pool>:
 800f7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ac:	ed2d 8b0e 	vpush	{d8-d14}
 800f7b0:	b0c9      	sub	sp, #292	@ 0x124
 800f7b2:	4696      	mov	lr, r2
 800f7b4:	4680      	mov	r8, r0
 800f7b6:	f9bd 51cc 	ldrsh.w	r5, [sp, #460]	@ 0x1cc
 800f7ba:	9323      	str	r3, [sp, #140]	@ 0x8c
 800f7bc:	f9bd 31ec 	ldrsh.w	r3, [sp, #492]	@ 0x1ec
 800f7c0:	9138      	str	r1, [sp, #224]	@ 0xe0
 800f7c2:	9239      	str	r2, [sp, #228]	@ 0xe4
 800f7c4:	f9bd 118c 	ldrsh.w	r1, [sp, #396]	@ 0x18c
 800f7c8:	fb05 f203 	mul.w	r2, r5, r3
 800f7cc:	f9bd 419c 	ldrsh.w	r4, [sp, #412]	@ 0x19c
 800f7d0:	9129      	str	r1, [sp, #164]	@ 0xa4
 800f7d2:	460e      	mov	r6, r1
 800f7d4:	fb01 f202 	mul.w	r2, r1, r2
 800f7d8:	f9bd 1194 	ldrsh.w	r1, [sp, #404]	@ 0x194
 800f7dc:	f8bd c1b0 	ldrh.w	ip, [sp, #432]	@ 0x1b0
 800f7e0:	9142      	str	r1, [sp, #264]	@ 0x108
 800f7e2:	f9bd 11a0 	ldrsh.w	r1, [sp, #416]	@ 0x1a0
 800f7e6:	f9bd 7190 	ldrsh.w	r7, [sp, #400]	@ 0x190
 800f7ea:	932d      	str	r3, [sp, #180]	@ 0xb4
 800f7ec:	942a      	str	r4, [sp, #168]	@ 0xa8
 800f7ee:	f9bd 3198 	ldrsh.w	r3, [sp, #408]	@ 0x198
 800f7f2:	f9bd 4188 	ldrsh.w	r4, [sp, #392]	@ 0x188
 800f7f6:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f7f8:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 800f7fc:	f8bd 11a8 	ldrh.w	r1, [sp, #424]	@ 0x1a8
 800f800:	f8bd c1b4 	ldrh.w	ip, [sp, #436]	@ 0x1b4
 800f804:	9041      	str	r0, [sp, #260]	@ 0x104
 800f806:	933a      	str	r3, [sp, #232]	@ 0xe8
 800f808:	f8bd 01ac 	ldrh.w	r0, [sp, #428]	@ 0x1ac
 800f80c:	912b      	str	r1, [sp, #172]	@ 0xac
 800f80e:	f9bd 91a4 	ldrsh.w	r9, [sp, #420]	@ 0x1a4
 800f812:	4243      	negs	r3, r0
 800f814:	950f      	str	r5, [sp, #60]	@ 0x3c
 800f816:	9418      	str	r4, [sp, #96]	@ 0x60
 800f818:	9714      	str	r7, [sp, #80]	@ 0x50
 800f81a:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
 800f81e:	f9bd c1b8 	ldrsh.w	ip, [sp, #440]	@ 0x1b8
 800f822:	931e      	str	r3, [sp, #120]	@ 0x78
 800f824:	f8cd c10c 	str.w	ip, [sp, #268]	@ 0x10c
 800f828:	f9bd c1e8 	ldrsh.w	ip, [sp, #488]	@ 0x1e8
 800f82c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800f82e:	f8cd c110 	str.w	ip, [sp, #272]	@ 0x110
 800f832:	f9bd c1f0 	ldrsh.w	ip, [sp, #496]	@ 0x1f0
 800f836:	2b00      	cmp	r3, #0
 800f838:	f9bd 11d0 	ldrsh.w	r1, [sp, #464]	@ 0x1d0
 800f83c:	f8cd c114 	str.w	ip, [sp, #276]	@ 0x114
 800f840:	f9bd c1f4 	ldrsh.w	ip, [sp, #500]	@ 0x1f4
 800f844:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
 800f848:	f9bd c1f8 	ldrsh.w	ip, [sp, #504]	@ 0x1f8
 800f84c:	f8cd c118 	str.w	ip, [sp, #280]	@ 0x118
 800f850:	f9bd c1fc 	ldrsh.w	ip, [sp, #508]	@ 0x1fc
 800f854:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 800f858:	f340 80a9 	ble.w	800f9ae <forward_lite_conv2d_if32of32wf32_pool+0x206>
 800f85c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f85e:	3901      	subs	r1, #1
 800f860:	9020      	str	r0, [sp, #128]	@ 0x80
 800f862:	fb03 f309 	mul.w	r3, r3, r9
 800f866:	fa1f fc81 	uxth.w	ip, r1
 800f86a:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 800f86c:	fb04 f303 	mul.w	r3, r4, r3
 800f870:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 800f9b8 <forward_lite_conv2d_if32of32wf32_pool+0x210>
 800f874:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 800f878:	0099      	lsls	r1, r3, #2
 800f87a:	9124      	str	r1, [sp, #144]	@ 0x90
 800f87c:	4631      	mov	r1, r6
 800f87e:	b2b6      	uxth	r6, r6
 800f880:	fb00 f301 	mul.w	r3, r0, r1
 800f884:	9636      	str	r6, [sp, #216]	@ 0xd8
 800f886:	00a6      	lsls	r6, r4, #2
 800f888:	fb05 f303 	mul.w	r3, r5, r3
 800f88c:	fb05 f501 	mul.w	r5, r5, r1
 800f890:	0098      	lsls	r0, r3, #2
 800f892:	9616      	str	r6, [sp, #88]	@ 0x58
 800f894:	953d      	str	r5, [sp, #244]	@ 0xf4
 800f896:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 800f89a:	903e      	str	r0, [sp, #248]	@ 0xf8
 800f89c:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 800f89e:	953b      	str	r5, [sp, #236]	@ 0xec
 800f8a0:	1e43      	subs	r3, r0, #1
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	3301      	adds	r3, #1
 800f8a6:	0098      	lsls	r0, r3, #2
 800f8a8:	9035      	str	r0, [sp, #212]	@ 0xd4
 800f8aa:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800f8ac:	fb00 f307 	mul.w	r3, r0, r7
 800f8b0:	fb04 f303 	mul.w	r3, r4, r3
 800f8b4:	0098      	lsls	r0, r3, #2
 800f8b6:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 800f8b8:	9034      	str	r0, [sp, #208]	@ 0xd0
 800f8ba:	0090      	lsls	r0, r2, #2
 800f8bc:	fb01 f303 	mul.w	r3, r1, r3
 800f8c0:	0089      	lsls	r1, r1, #2
 800f8c2:	9032      	str	r0, [sp, #200]	@ 0xc8
 800f8c4:	9860      	ldr	r0, [sp, #384]	@ 0x180
 800f8c6:	9112      	str	r1, [sp, #72]	@ 0x48
 800f8c8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f8cc:	0098      	lsls	r0, r3, #2
 800f8ce:	fb07 f306 	mul.w	r3, r7, r6
 800f8d2:	921f      	str	r2, [sp, #124]	@ 0x7c
 800f8d4:	903c      	str	r0, [sp, #240]	@ 0xf0
 800f8d6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800f8d8:	fb00 8703 	mla	r7, r0, r3, r8
 800f8dc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800f8de:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800f8e0:	9722      	str	r7, [sp, #136]	@ 0x88
 800f8e2:	425f      	negs	r7, r3
 800f8e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f8e6:	4241      	negs	r1, r0
 800f8e8:	9731      	str	r7, [sp, #196]	@ 0xc4
 800f8ea:	fb03 f304 	mul.w	r3, r3, r4
 800f8ee:	9125      	str	r1, [sp, #148]	@ 0x94
 800f8f0:	009c      	lsls	r4, r3, #2
 800f8f2:	fb06 f107 	mul.w	r1, r6, r7
 800f8f6:	9417      	str	r4, [sp, #92]	@ 0x5c
 800f8f8:	2400      	movs	r4, #0
 800f8fa:	9137      	str	r1, [sp, #220]	@ 0xdc
 800f8fc:	9960      	ldr	r1, [sp, #384]	@ 0x180
 800f8fe:	9427      	str	r4, [sp, #156]	@ 0x9c
 800f900:	911b      	str	r1, [sp, #108]	@ 0x6c
 800f902:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f904:	9428      	str	r4, [sp, #160]	@ 0xa0
 800f906:	9333      	str	r3, [sp, #204]	@ 0xcc
 800f908:	9b76      	ldr	r3, [sp, #472]	@ 0x1d8
 800f90a:	932f      	str	r3, [sp, #188]	@ 0xbc
 800f90c:	1e53      	subs	r3, r2, #1
 800f90e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f910:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f912:	3301      	adds	r3, #1
 800f914:	b21b      	sxth	r3, r3
 800f916:	2b00      	cmp	r3, #0
 800f918:	dc68      	bgt.n	800f9ec <forward_lite_conv2d_if32of32wf32_pool+0x244>
 800f91a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f91c:	041b      	lsls	r3, r3, #16
 800f91e:	f100 81d5 	bmi.w	800fccc <forward_lite_conv2d_if32of32wf32_pool+0x524>
 800f922:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800f924:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 800f926:	42b2      	cmp	r2, r6
 800f928:	dc48      	bgt.n	800f9bc <forward_lite_conv2d_if32of32wf32_pool+0x214>
 800f92a:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800f92c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f92e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800f930:	3301      	adds	r3, #1
 800f932:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 800f934:	4420      	add	r0, r4
 800f936:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800f938:	b21d      	sxth	r5, r3
 800f93a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f93c:	901e      	str	r0, [sp, #120]	@ 0x78
 800f93e:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 800f940:	1b1b      	subs	r3, r3, r4
 800f942:	9108      	str	r1, [sp, #32]
 800f944:	4401      	add	r1, r0
 800f946:	9320      	str	r3, [sp, #128]	@ 0x80
 800f948:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f94a:	9138      	str	r1, [sp, #224]	@ 0xe0
 800f94c:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800f94e:	9528      	str	r5, [sp, #160]	@ 0xa0
 800f950:	440b      	add	r3, r1
 800f952:	9322      	str	r3, [sp, #136]	@ 0x88
 800f954:	b293      	uxth	r3, r2
 800f956:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800f958:	9301      	str	r3, [sp, #4]
 800f95a:	1a9b      	subs	r3, r3, r2
 800f95c:	b29a      	uxth	r2, r3
 800f95e:	b2bb      	uxth	r3, r7
 800f960:	1af1      	subs	r1, r6, r3
 800f962:	9305      	str	r3, [sp, #20]
 800f964:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
 800f966:	b20b      	sxth	r3, r1
 800f968:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 800f96c:	931d      	str	r3, [sp, #116]	@ 0x74
 800f96e:	b2b3      	uxth	r3, r6
 800f970:	9303      	str	r3, [sp, #12]
 800f972:	2301      	movs	r3, #1
 800f974:	9307      	str	r3, [sp, #28]
 800f976:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	@ 0xe8
 800f97a:	9306      	str	r3, [sp, #24]
 800f97c:	f8bd 3114 	ldrh.w	r3, [sp, #276]	@ 0x114
 800f980:	9304      	str	r3, [sp, #16]
 800f982:	f8bd 3118 	ldrh.w	r3, [sp, #280]	@ 0x118
 800f986:	9302      	str	r3, [sp, #8]
 800f988:	f8bd 3110 	ldrh.w	r3, [sp, #272]	@ 0x110
 800f98c:	9300      	str	r3, [sp, #0]
 800f98e:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 800f990:	9860      	ldr	r0, [sp, #384]	@ 0x180
 800f992:	9c79      	ldr	r4, [sp, #484]	@ 0x1e4
 800f994:	47a0      	blx	r4
 800f996:	1bf3      	subs	r3, r6, r7
 800f998:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f99a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f99e:	3a01      	subs	r2, #1
 800f9a0:	b21b      	sxth	r3, r3
 800f9a2:	b292      	uxth	r2, r2
 800f9a4:	9333      	str	r3, [sp, #204]	@ 0xcc
 800f9a6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800f9a8:	9221      	str	r2, [sp, #132]	@ 0x84
 800f9aa:	42ab      	cmp	r3, r5
 800f9ac:	dcb0      	bgt.n	800f910 <forward_lite_conv2d_if32of32wf32_pool+0x168>
 800f9ae:	b049      	add	sp, #292	@ 0x124
 800f9b0:	ecbd 8b0e 	vpop	{d8-d14}
 800f9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b8:	00000000 	.word	0x00000000
 800f9bc:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800f9be:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800f9c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f9c2:	440a      	add	r2, r1
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	921e      	str	r2, [sp, #120]	@ 0x78
 800f9c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	1a52      	subs	r2, r2, r1
 800f9ce:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800f9d0:	9321      	str	r3, [sp, #132]	@ 0x84
 800f9d2:	9220      	str	r2, [sp, #128]	@ 0x80
 800f9d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f9d6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800f9d8:	440a      	add	r2, r1
 800f9da:	9222      	str	r2, [sp, #136]	@ 0x88
 800f9dc:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	dde5      	ble.n	800f9ae <forward_lite_conv2d_if32of32wf32_pool+0x206>
 800f9e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	b21b      	sxth	r3, r3
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	dd96      	ble.n	800f91a <forward_lite_conv2d_if32of32wf32_pool+0x172>
 800f9ec:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	f2c0 82d1 	blt.w	800ff96 <forward_lite_conv2d_if32of32wf32_pool+0x7ee>
 800f9f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f9f6:	931c      	str	r3, [sp, #112]	@ 0x70
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800f9fc:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 800f9fe:	440a      	add	r2, r1
 800fa00:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 800fa02:	428a      	cmp	r2, r1
 800fa04:	bfd4      	ite	le
 800fa06:	ebc3 0b02 	rsble	fp, r3, r2
 800fa0a:	ebc3 0b01 	rsbgt	fp, r3, r1
 800fa0e:	9a61      	ldr	r2, [sp, #388]	@ 0x184
 800fa10:	2a00      	cmp	r2, #0
 800fa12:	f000 819d 	beq.w	800fd50 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 800fa16:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 800fa18:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800fa1c:	f0c0 8198 	bcc.w	800fd50 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 800fa20:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800fa22:	2a00      	cmp	r2, #0
 800fa24:	f340 8115 	ble.w	800fc52 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 800fa28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fa2a:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 800fa2c:	fb02 f303 	mul.w	r3, r2, r3
 800fa30:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800fa32:	9319      	str	r3, [sp, #100]	@ 0x64
 800fa34:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800fa36:	189a      	adds	r2, r3, r2
 800fa38:	9326      	str	r3, [sp, #152]	@ 0x98
 800fa3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa3c:	923f      	str	r2, [sp, #252]	@ 0xfc
 800fa3e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fa40:	9330      	str	r3, [sp, #192]	@ 0xc0
 800fa42:	440a      	add	r2, r1
 800fa44:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800fa46:	9240      	str	r2, [sp, #256]	@ 0x100
 800fa48:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa4a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800fa4c:	9961      	ldr	r1, [sp, #388]	@ 0x184
 800fa4e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800fa50:	f001 fe4a 	bl	80116e8 <st_int8_copy>
 800fa54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	f000 8135 	beq.w	800fcc6 <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 800fa5c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800fa5e:	ecf3 1a01 	vldmia	r3!, {s3}
 800fa62:	9330      	str	r3, [sp, #192]	@ 0xc0
 800fa64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	f000 80e8 	beq.w	800fc3c <forward_lite_conv2d_if32of32wf32_pool+0x494>
 800fa6c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800fa6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fa70:	189a      	adds	r2, r3, r2
 800fa72:	920c      	str	r2, [sp, #48]	@ 0x30
 800fa74:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 800fa76:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 800fa7a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800fa7c:	9310      	str	r3, [sp, #64]	@ 0x40
 800fa7e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800fa80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa82:	2300      	movs	r3, #0
 800fa84:	9311      	str	r3, [sp, #68]	@ 0x44
 800fa86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	f2c0 8113 	blt.w	800fcb4 <forward_lite_conv2d_if32of32wf32_pool+0x50c>
 800fa8e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fa90:	2600      	movs	r6, #0
 800fa92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fa94:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800fa96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fa98:	9c61      	ldr	r4, [sp, #388]	@ 0x184
 800fa9a:	4298      	cmp	r0, r3
 800fa9c:	bf94      	ite	ls
 800fa9e:	ebc6 0600 	rsbls	r6, r6, r0
 800faa2:	ebc6 0603 	rsbhi	r6, r6, r3
 800faa6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800faa8:	f1bb 0f00 	cmp.w	fp, #0
 800faac:	eba0 0906 	sub.w	r9, r0, r6
 800fab0:	fb02 4203 	mla	r2, r2, r3, r4
 800fab4:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800fab6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800fab8:	eba4 0a06 	sub.w	sl, r4, r6
 800fabc:	fb00 f606 	mul.w	r6, r0, r6
 800fac0:	f340 80fe 	ble.w	800fcc0 <forward_lite_conv2d_if32of32wf32_pool+0x518>
 800fac4:	f026 070f 	bic.w	r7, r6, #15
 800fac8:	eeb0 7a61 	vmov.f32	s14, s3
 800facc:	fb0a fa03 	mul.w	sl, sl, r3
 800fad0:	f04f 0c00 	mov.w	ip, #0
 800fad4:	f107 38ff 	add.w	r8, r7, #4294967295
 800fad8:	fb09 f903 	mul.w	r9, r9, r3
 800fadc:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800fae0:	f108 0801 	add.w	r8, r8, #1
 800fae4:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800fae8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800faec:	2f00      	cmp	r7, #0
 800faee:	f340 80df 	ble.w	800fcb0 <forward_lite_conv2d_if32of32wf32_pool+0x508>
 800faf2:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 800faf6:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 800fafa:	2400      	movs	r4, #0
 800fafc:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 800fb00:	3410      	adds	r4, #16
 800fb02:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 800fb06:	3340      	adds	r3, #64	@ 0x40
 800fb08:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 800fb0c:	42bc      	cmp	r4, r7
 800fb0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fb12:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 800fb16:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 800fb1a:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800fb1e:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 800fb22:	eee4 7a85 	vfma.f32	s15, s9, s10
 800fb26:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 800fb2a:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 800fb2e:	ed50 da1c 	vldr	s27, [r0, #-112]	@ 0xffffff90
 800fb32:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 800fb36:	ed50 ca1b 	vldr	s25, [r0, #-108]	@ 0xffffff94
 800fb3a:	ed13 ca1b 	vldr	s24, [r3, #-108]	@ 0xffffff94
 800fb3e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800fb42:	ed50 ba1a 	vldr	s23, [r0, #-104]	@ 0xffffff98
 800fb46:	ed13 ba1a 	vldr	s22, [r3, #-104]	@ 0xffffff98
 800fb4a:	ed50 aa19 	vldr	s21, [r0, #-100]	@ 0xffffff9c
 800fb4e:	ed13 aa19 	vldr	s20, [r3, #-100]	@ 0xffffff9c
 800fb52:	ed50 9a18 	vldr	s19, [r0, #-96]	@ 0xffffffa0
 800fb56:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 800fb5a:	eeee 7a26 	vfma.f32	s15, s28, s13
 800fb5e:	ed50 8a17 	vldr	s17, [r0, #-92]	@ 0xffffffa4
 800fb62:	ed13 0a17 	vldr	s0, [r3, #-92]	@ 0xffffffa4
 800fb66:	ed50 0a16 	vldr	s1, [r0, #-88]	@ 0xffffffa8
 800fb6a:	ed13 1a16 	vldr	s2, [r3, #-88]	@ 0xffffffa8
 800fb6e:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 800fb72:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 800fb76:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800fb7a:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 800fb7e:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800fb82:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 800fb86:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800fb8a:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 800fb8e:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800fb92:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800fb96:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 800fb9a:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800fb9e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800fba2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800fba6:	eee9 7a89 	vfma.f32	s15, s19, s18
 800fbaa:	eee8 7a80 	vfma.f32	s15, s17, s0
 800fbae:	eee0 7a81 	vfma.f32	s15, s1, s2
 800fbb2:	eee2 7a22 	vfma.f32	s15, s4, s5
 800fbb6:	eee3 7a23 	vfma.f32	s15, s6, s7
 800fbba:	eee4 7a24 	vfma.f32	s15, s8, s9
 800fbbe:	eee5 7a25 	vfma.f32	s15, s10, s11
 800fbc2:	eee6 7a26 	vfma.f32	s15, s12, s13
 800fbc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fbca:	db97      	blt.n	800fafc <forward_lite_conv2d_if32of32wf32_pool+0x354>
 800fbcc:	4471      	add	r1, lr
 800fbce:	4472      	add	r2, lr
 800fbd0:	4645      	mov	r5, r8
 800fbd2:	42ae      	cmp	r6, r5
 800fbd4:	dd10      	ble.n	800fbf8 <forward_lite_conv2d_if32of32wf32_pool+0x450>
 800fbd6:	462b      	mov	r3, r5
 800fbd8:	460c      	mov	r4, r1
 800fbda:	4610      	mov	r0, r2
 800fbdc:	3301      	adds	r3, #1
 800fbde:	ecf0 6a01 	vldmia	r0!, {s13}
 800fbe2:	ecf4 7a01 	vldmia	r4!, {s15}
 800fbe6:	429e      	cmp	r6, r3
 800fbe8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fbec:	d1f6      	bne.n	800fbdc <forward_lite_conv2d_if32of32wf32_pool+0x434>
 800fbee:	1b75      	subs	r5, r6, r5
 800fbf0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800fbf4:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800fbf8:	f10c 0c01 	add.w	ip, ip, #1
 800fbfc:	4451      	add	r1, sl
 800fbfe:	444a      	add	r2, r9
 800fc00:	45e3      	cmp	fp, ip
 800fc02:	f47f af73 	bne.w	800faec <forward_lite_conv2d_if32of32wf32_pool+0x344>
 800fc06:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800fc08:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800fc0a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800fc0c:	4410      	add	r0, r2
 800fc0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fc10:	ed81 7a00 	vstr	s14, [r1]
 800fc14:	900b      	str	r0, [sp, #44]	@ 0x2c
 800fc16:	3301      	adds	r3, #1
 800fc18:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fc1a:	9311      	str	r3, [sp, #68]	@ 0x44
 800fc1c:	4401      	add	r1, r0
 800fc1e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800fc20:	9110      	str	r1, [sp, #64]	@ 0x40
 800fc22:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fc24:	1a89      	subs	r1, r1, r2
 800fc26:	910e      	str	r1, [sp, #56]	@ 0x38
 800fc28:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fc2a:	4401      	add	r1, r0
 800fc2c:	910d      	str	r1, [sp, #52]	@ 0x34
 800fc2e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fc30:	1a8a      	subs	r2, r1, r2
 800fc32:	920c      	str	r2, [sp, #48]	@ 0x30
 800fc34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fc36:	429a      	cmp	r2, r3
 800fc38:	f47f af25 	bne.w	800fa86 <forward_lite_conv2d_if32of32wf32_pool+0x2de>
 800fc3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fc3e:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800fc40:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800fc42:	440a      	add	r2, r1
 800fc44:	3304      	adds	r3, #4
 800fc46:	921a      	str	r2, [sp, #104]	@ 0x68
 800fc48:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800fc4a:	9326      	str	r3, [sp, #152]	@ 0x98
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	f47f aefc 	bne.w	800fa4a <forward_lite_conv2d_if32of32wf32_pool+0x2a2>
 800fc52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	dd26      	ble.n	800fca6 <forward_lite_conv2d_if32of32wf32_pool+0x4fe>
 800fc58:	9b75      	ldr	r3, [sp, #468]	@ 0x1d4
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	f000 819f 	beq.w	800ff9e <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 800fc60:	4699      	mov	r9, r3
 800fc62:	2400      	movs	r4, #0
 800fc64:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 800fc66:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 800fc6a:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 800fc6c:	f8dd b1e0 	ldr.w	fp, [sp, #480]	@ 0x1e0
 800fc70:	e9dd 6a76 	ldrd	r6, sl, [sp, #472]	@ 0x1d8
 800fc74:	462b      	mov	r3, r5
 800fc76:	4455      	add	r5, sl
 800fc78:	463a      	mov	r2, r7
 800fc7a:	4641      	mov	r1, r8
 800fc7c:	4640      	mov	r0, r8
 800fc7e:	3401      	adds	r4, #1
 800fc80:	47c8      	blx	r9
 800fc82:	1bab      	subs	r3, r5, r6
 800fc84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fc86:	b224      	sxth	r4, r4
 800fc88:	455b      	cmp	r3, fp
 800fc8a:	bfa8      	it	ge
 800fc8c:	4635      	movge	r5, r6
 800fc8e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800fc90:	4490      	add	r8, r2
 800fc92:	4543      	cmp	r3, r8
 800fc94:	d801      	bhi.n	800fc9a <forward_lite_conv2d_if32of32wf32_pool+0x4f2>
 800fc96:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800fc98:	4498      	add	r8, r3
 800fc9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc9c:	42a3      	cmp	r3, r4
 800fc9e:	d1e9      	bne.n	800fc74 <forward_lite_conv2d_if32of32wf32_pool+0x4cc>
 800fca0:	952f      	str	r5, [sp, #188]	@ 0xbc
 800fca2:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
 800fca6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fca8:	3301      	adds	r3, #1
 800fcaa:	b21b      	sxth	r3, r3
 800fcac:	931d      	str	r3, [sp, #116]	@ 0x74
 800fcae:	e638      	b.n	800f922 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 800fcb0:	2500      	movs	r5, #0
 800fcb2:	e78e      	b.n	800fbd2 <forward_lite_conv2d_if32of32wf32_pool+0x42a>
 800fcb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fcb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fcb8:	4616      	mov	r6, r2
 800fcba:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800fcbc:	189a      	adds	r2, r3, r2
 800fcbe:	e6e9      	b.n	800fa94 <forward_lite_conv2d_if32of32wf32_pool+0x2ec>
 800fcc0:	eeb0 7a61 	vmov.f32	s14, s3
 800fcc4:	e79f      	b.n	800fc06 <forward_lite_conv2d_if32of32wf32_pool+0x45e>
 800fcc6:	eef0 1a48 	vmov.f32	s3, s16
 800fcca:	e6cb      	b.n	800fa64 <forward_lite_conv2d_if32of32wf32_pool+0x2bc>
 800fccc:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 800fcce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fcd0:	fb02 f303 	mul.w	r3, r2, r3
 800fcd4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fcd6:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 800fcda:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d901      	bls.n	800fce4 <forward_lite_conv2d_if32of32wf32_pool+0x53c>
 800fce0:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800fce2:	4413      	add	r3, r2
 800fce4:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d217      	bcs.n	800fd1a <forward_lite_conv2d_if32of32wf32_pool+0x572>
 800fcea:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800fcec:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800fcee:	428a      	cmp	r2, r1
 800fcf0:	d013      	beq.n	800fd1a <forward_lite_conv2d_if32of32wf32_pool+0x572>
 800fcf2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d910      	bls.n	800fd1a <forward_lite_conv2d_if32of32wf32_pool+0x572>
 800fcf8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	f852 0b04 	ldr.w	r0, [r2], #4
 800fd00:	f841 0b04 	str.w	r0, [r1], #4
 800fd04:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800fd06:	4290      	cmp	r0, r2
 800fd08:	d8f8      	bhi.n	800fcfc <forward_lite_conv2d_if32of32wf32_pool+0x554>
 800fd0a:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800fd0c:	1ad3      	subs	r3, r2, r3
 800fd0e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fd10:	f023 0303 	bic.w	r3, r3, #3
 800fd14:	3304      	adds	r3, #4
 800fd16:	441a      	add	r2, r3
 800fd18:	921b      	str	r2, [sp, #108]	@ 0x6c
 800fd1a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800fd1c:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800fd1e:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 800fd22:	440a      	add	r2, r1
 800fd24:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 800fd26:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800fd28:	1ad2      	subs	r2, r2, r3
 800fd2a:	4401      	add	r1, r0
 800fd2c:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 800fd2e:	b212      	sxth	r2, r2
 800fd30:	4403      	add	r3, r0
 800fd32:	911b      	str	r1, [sp, #108]	@ 0x6c
 800fd34:	9227      	str	r2, [sp, #156]	@ 0x9c
 800fd36:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800fd38:	b21b      	sxth	r3, r3
 800fd3a:	428a      	cmp	r2, r1
 800fd3c:	931d      	str	r3, [sp, #116]	@ 0x74
 800fd3e:	460b      	mov	r3, r1
 800fd40:	f63f adef 	bhi.w	800f922 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 800fd44:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800fd46:	440b      	add	r3, r1
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d9fc      	bls.n	800fd46 <forward_lite_conv2d_if32of32wf32_pool+0x59e>
 800fd4c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fd4e:	e5e8      	b.n	800f922 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 800fd50:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800fd52:	2a00      	cmp	r2, #0
 800fd54:	f77f af7d 	ble.w	800fc52 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 800fd58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fd5a:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 800fd5c:	fb02 f303 	mul.w	r3, r2, r3
 800fd60:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800fd62:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd64:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800fd66:	189a      	adds	r2, r3, r2
 800fd68:	9326      	str	r3, [sp, #152]	@ 0x98
 800fd6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd6c:	923f      	str	r2, [sp, #252]	@ 0xfc
 800fd6e:	9330      	str	r3, [sp, #192]	@ 0xc0
 800fd70:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fd72:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800fd74:	440a      	add	r2, r1
 800fd76:	9319      	str	r3, [sp, #100]	@ 0x64
 800fd78:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd7a:	9240      	str	r2, [sp, #256]	@ 0x100
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	f000 80fc 	beq.w	800ff7a <forward_lite_conv2d_if32of32wf32_pool+0x7d2>
 800fd82:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800fd84:	ecf3 1a01 	vldmia	r3!, {s3}
 800fd88:	9330      	str	r3, [sp, #192]	@ 0xc0
 800fd8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	f000 80e5 	beq.w	800ff5c <forward_lite_conv2d_if32of32wf32_pool+0x7b4>
 800fd92:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800fd94:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fd96:	189a      	adds	r2, r3, r2
 800fd98:	920c      	str	r2, [sp, #48]	@ 0x30
 800fd9a:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 800fd9c:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 800fda0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800fda2:	9310      	str	r3, [sp, #64]	@ 0x40
 800fda4:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800fda6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fda8:	2300      	movs	r3, #0
 800fdaa:	9311      	str	r3, [sp, #68]	@ 0x44
 800fdac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	f2c0 80e8 	blt.w	800ff84 <forward_lite_conv2d_if32of32wf32_pool+0x7dc>
 800fdb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fdb6:	2000      	movs	r0, #0
 800fdb8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800fdba:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800fdbc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fdbe:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800fdc0:	428c      	cmp	r4, r1
 800fdc2:	bf94      	ite	ls
 800fdc4:	ebc0 0004 	rsbls	r0, r0, r4
 800fdc8:	ebc0 0001 	rsbhi	r0, r0, r1
 800fdcc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800fdce:	f1bb 0f00 	cmp.w	fp, #0
 800fdd2:	eba4 0900 	sub.w	r9, r4, r0
 800fdd6:	fb03 5301 	mla	r3, r3, r1, r5
 800fdda:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 800fddc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800fdde:	eba5 0a00 	sub.w	sl, r5, r0
 800fde2:	fb04 f000 	mul.w	r0, r4, r0
 800fde6:	f340 80d3 	ble.w	800ff90 <forward_lite_conv2d_if32of32wf32_pool+0x7e8>
 800fdea:	f020 080f 	bic.w	r8, r0, #15
 800fdee:	eeb0 7a61 	vmov.f32	s14, s3
 800fdf2:	fb0a fa01 	mul.w	sl, sl, r1
 800fdf6:	2400      	movs	r4, #0
 800fdf8:	f108 37ff 	add.w	r7, r8, #4294967295
 800fdfc:	fb09 f901 	mul.w	r9, r9, r1
 800fe00:	093f      	lsrs	r7, r7, #4
 800fe02:	3701      	adds	r7, #1
 800fe04:	01be      	lsls	r6, r7, #6
 800fe06:	013f      	lsls	r7, r7, #4
 800fe08:	f1b8 0f00 	cmp.w	r8, #0
 800fe0c:	f340 80b8 	ble.w	800ff80 <forward_lite_conv2d_if32of32wf32_pool+0x7d8>
 800fe10:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 800fe14:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800fe18:	f04f 0c00 	mov.w	ip, #0
 800fe1c:	ed51 6a0f 	vldr	s13, [r1, #-60]	@ 0xffffffc4
 800fe20:	f10c 0c10 	add.w	ip, ip, #16
 800fe24:	ed55 7a0f 	vldr	s15, [r5, #-60]	@ 0xffffffc4
 800fe28:	3140      	adds	r1, #64	@ 0x40
 800fe2a:	ed55 4a10 	vldr	s9, [r5, #-64]	@ 0xffffffc0
 800fe2e:	45c4      	cmp	ip, r8
 800fe30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fe34:	ed11 5a20 	vldr	s10, [r1, #-128]	@ 0xffffff80
 800fe38:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 800fe3c:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 800fe40:	ed11 6a1e 	vldr	s12, [r1, #-120]	@ 0xffffff88
 800fe44:	eee4 7a85 	vfma.f32	s15, s9, s10
 800fe48:	ed51 6a1d 	vldr	s13, [r1, #-116]	@ 0xffffff8c
 800fe4c:	ed15 ea1d 	vldr	s28, [r5, #-116]	@ 0xffffff8c
 800fe50:	ed55 da1c 	vldr	s27, [r5, #-112]	@ 0xffffff90
 800fe54:	ed11 da1c 	vldr	s26, [r1, #-112]	@ 0xffffff90
 800fe58:	ed55 ca1b 	vldr	s25, [r5, #-108]	@ 0xffffff94
 800fe5c:	ed11 ca1b 	vldr	s24, [r1, #-108]	@ 0xffffff94
 800fe60:	eee5 7a86 	vfma.f32	s15, s11, s12
 800fe64:	ed55 ba1a 	vldr	s23, [r5, #-104]	@ 0xffffff98
 800fe68:	ed11 ba1a 	vldr	s22, [r1, #-104]	@ 0xffffff98
 800fe6c:	ed55 aa19 	vldr	s21, [r5, #-100]	@ 0xffffff9c
 800fe70:	ed11 aa19 	vldr	s20, [r1, #-100]	@ 0xffffff9c
 800fe74:	ed55 9a18 	vldr	s19, [r5, #-96]	@ 0xffffffa0
 800fe78:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 800fe7c:	eeee 7a26 	vfma.f32	s15, s28, s13
 800fe80:	ed55 8a17 	vldr	s17, [r5, #-92]	@ 0xffffffa4
 800fe84:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 800fe88:	ed55 0a16 	vldr	s1, [r5, #-88]	@ 0xffffffa8
 800fe8c:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 800fe90:	ed15 2a15 	vldr	s4, [r5, #-84]	@ 0xffffffac
 800fe94:	ed51 2a15 	vldr	s5, [r1, #-84]	@ 0xffffffac
 800fe98:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800fe9c:	ed15 3a14 	vldr	s6, [r5, #-80]	@ 0xffffffb0
 800fea0:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 800fea4:	ed15 4a13 	vldr	s8, [r5, #-76]	@ 0xffffffb4
 800fea8:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 800feac:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 800feb0:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 800feb4:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800feb8:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 800febc:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 800fec0:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800fec4:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800fec8:	eee9 7a89 	vfma.f32	s15, s19, s18
 800fecc:	eee8 7a80 	vfma.f32	s15, s17, s0
 800fed0:	eee0 7a81 	vfma.f32	s15, s1, s2
 800fed4:	eee2 7a22 	vfma.f32	s15, s4, s5
 800fed8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800fedc:	eee4 7a24 	vfma.f32	s15, s8, s9
 800fee0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800fee4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800fee8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800feec:	db96      	blt.n	800fe1c <forward_lite_conv2d_if32of32wf32_pool+0x674>
 800feee:	4432      	add	r2, r6
 800fef0:	4433      	add	r3, r6
 800fef2:	4639      	mov	r1, r7
 800fef4:	4288      	cmp	r0, r1
 800fef6:	dd10      	ble.n	800ff1a <forward_lite_conv2d_if32of32wf32_pool+0x772>
 800fef8:	460d      	mov	r5, r1
 800fefa:	4696      	mov	lr, r2
 800fefc:	469c      	mov	ip, r3
 800fefe:	3501      	adds	r5, #1
 800ff00:	ecfc 6a01 	vldmia	ip!, {s13}
 800ff04:	ecfe 7a01 	vldmia	lr!, {s15}
 800ff08:	42a8      	cmp	r0, r5
 800ff0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ff0e:	d1f6      	bne.n	800fefe <forward_lite_conv2d_if32of32wf32_pool+0x756>
 800ff10:	1a41      	subs	r1, r0, r1
 800ff12:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800ff16:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ff1a:	3401      	adds	r4, #1
 800ff1c:	4452      	add	r2, sl
 800ff1e:	444b      	add	r3, r9
 800ff20:	45a3      	cmp	fp, r4
 800ff22:	f47f af71 	bne.w	800fe08 <forward_lite_conv2d_if32of32wf32_pool+0x660>
 800ff26:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ff28:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ff2a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800ff2c:	4410      	add	r0, r2
 800ff2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ff30:	ed81 7a00 	vstr	s14, [r1]
 800ff34:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ff36:	3301      	adds	r3, #1
 800ff38:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ff3a:	9311      	str	r3, [sp, #68]	@ 0x44
 800ff3c:	4401      	add	r1, r0
 800ff3e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800ff40:	9110      	str	r1, [sp, #64]	@ 0x40
 800ff42:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ff44:	1a89      	subs	r1, r1, r2
 800ff46:	910e      	str	r1, [sp, #56]	@ 0x38
 800ff48:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ff4a:	4401      	add	r1, r0
 800ff4c:	910d      	str	r1, [sp, #52]	@ 0x34
 800ff4e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ff50:	1a8a      	subs	r2, r1, r2
 800ff52:	920c      	str	r2, [sp, #48]	@ 0x30
 800ff54:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ff56:	429a      	cmp	r2, r3
 800ff58:	f47f af28 	bne.w	800fdac <forward_lite_conv2d_if32of32wf32_pool+0x604>
 800ff5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff5e:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800ff60:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800ff62:	440a      	add	r2, r1
 800ff64:	3304      	adds	r3, #4
 800ff66:	9219      	str	r2, [sp, #100]	@ 0x64
 800ff68:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800ff6a:	9326      	str	r3, [sp, #152]	@ 0x98
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	f43f ae70 	beq.w	800fc52 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 800ff72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	f47f af04 	bne.w	800fd82 <forward_lite_conv2d_if32of32wf32_pool+0x5da>
 800ff7a:	eef0 1a48 	vmov.f32	s3, s16
 800ff7e:	e704      	b.n	800fd8a <forward_lite_conv2d_if32of32wf32_pool+0x5e2>
 800ff80:	2100      	movs	r1, #0
 800ff82:	e7b7      	b.n	800fef4 <forward_lite_conv2d_if32of32wf32_pool+0x74c>
 800ff84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff86:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ff88:	4610      	mov	r0, r2
 800ff8a:	4413      	add	r3, r2
 800ff8c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ff8e:	e714      	b.n	800fdba <forward_lite_conv2d_if32of32wf32_pool+0x612>
 800ff90:	eeb0 7a61 	vmov.f32	s14, s3
 800ff94:	e7c7      	b.n	800ff26 <forward_lite_conv2d_if32of32wf32_pool+0x77e>
 800ff96:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ff98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ff9a:	921c      	str	r2, [sp, #112]	@ 0x70
 800ff9c:	e52d      	b.n	800f9fa <forward_lite_conv2d_if32of32wf32_pool+0x252>
 800ff9e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ffa0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800ffa6:	440a      	add	r2, r1
 800ffa8:	b219      	sxth	r1, r3
 800ffaa:	4290      	cmp	r0, r2
 800ffac:	d801      	bhi.n	800ffb2 <forward_lite_conv2d_if32of32wf32_pool+0x80a>
 800ffae:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800ffb0:	4402      	add	r2, r0
 800ffb2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800ffb4:	4281      	cmp	r1, r0
 800ffb6:	dbf3      	blt.n	800ffa0 <forward_lite_conv2d_if32of32wf32_pool+0x7f8>
 800ffb8:	921b      	str	r2, [sp, #108]	@ 0x6c
 800ffba:	e674      	b.n	800fca6 <forward_lite_conv2d_if32of32wf32_pool+0x4fe>

0800ffbc <forward_lite_nl_relu_generic_if32of32_kernel>:
 800ffbc:	edd3 6a02 	vldr	s13, [r3, #8]
 800ffc0:	ed93 7a00 	vldr	s14, [r3]
 800ffc4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ffc8:	ed93 6a01 	vldr	s12, [r3, #4]
 800ffcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffd0:	d42b      	bmi.n	801002a <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800ffd2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ffd6:	4413      	add	r3, r2
 800ffd8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800ffdc:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800ffe0:	4291      	cmp	r1, r2
 800ffe2:	d821      	bhi.n	8010028 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800ffe4:	f10c 0104 	add.w	r1, ip, #4
 800ffe8:	1d13      	adds	r3, r2, #4
 800ffea:	eba2 020c 	sub.w	r2, r2, ip
 800ffee:	4408      	add	r0, r1
 800fff0:	e00c      	b.n	801000c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800fff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fff6:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800fffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fffe:	db01      	blt.n	8010004 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8010000:	ee65 7a86 	vmul.f32	s15, s11, s12
 8010004:	4293      	cmp	r3, r2
 8010006:	ed60 7a01 	vstmdb	r0!, {s15}
 801000a:	d00c      	beq.n	8010026 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 801000c:	ed73 7a01 	vldmdb	r3!, {s15}
 8010010:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010018:	daeb      	bge.n	800fff2 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 801001a:	eef0 7a66 	vmov.f32	s15, s13
 801001e:	4293      	cmp	r3, r2
 8010020:	ed60 7a01 	vstmdb	r0!, {s15}
 8010024:	d1f2      	bne.n	801000c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8010026:	4770      	bx	lr
 8010028:	4770      	bx	lr
 801002a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801002e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8010032:	4413      	add	r3, r2
 8010034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010038:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 801003c:	b500      	push	{lr}
 801003e:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8010042:	d019      	beq.n	8010078 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8010044:	4561      	cmp	r1, ip
 8010046:	d815      	bhi.n	8010074 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8010048:	f10e 0204 	add.w	r2, lr, #4
 801004c:	f10c 0304 	add.w	r3, ip, #4
 8010050:	ebac 010e 	sub.w	r1, ip, lr
 8010054:	4402      	add	r2, r0
 8010056:	ed73 7a01 	vldmdb	r3!, {s15}
 801005a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801005e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8010062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010066:	ee66 6a86 	vmul.f32	s13, s13, s12
 801006a:	d827      	bhi.n	80100bc <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 801006c:	428b      	cmp	r3, r1
 801006e:	ed62 6a01 	vstmdb	r2!, {s13}
 8010072:	d1f0      	bne.n	8010056 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8010074:	f85d fb04 	ldr.w	pc, [sp], #4
 8010078:	4561      	cmp	r1, ip
 801007a:	d8fb      	bhi.n	8010074 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 801007c:	f10e 0204 	add.w	r2, lr, #4
 8010080:	f10c 0304 	add.w	r3, ip, #4
 8010084:	ebac 010e 	sub.w	r1, ip, lr
 8010088:	f04f 0c00 	mov.w	ip, #0
 801008c:	4402      	add	r2, r0
 801008e:	ed73 7a01 	vldmdb	r3!, {s15}
 8010092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801009a:	d40a      	bmi.n	80100b2 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 801009c:	428b      	cmp	r3, r1
 801009e:	f842 cd04 	str.w	ip, [r2, #-4]!
 80100a2:	d0e7      	beq.n	8010074 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80100a4:	ed73 7a01 	vldmdb	r3!, {s15}
 80100a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b0:	d5f4      	bpl.n	801009c <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 80100b2:	428b      	cmp	r3, r1
 80100b4:	ed62 7a01 	vstmdb	r2!, {s15}
 80100b8:	d1e9      	bne.n	801008e <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 80100ba:	e7db      	b.n	8010074 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80100bc:	428b      	cmp	r3, r1
 80100be:	ed62 7a01 	vstmdb	r2!, {s15}
 80100c2:	d1c8      	bne.n	8010056 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 80100c4:	e7d6      	b.n	8010074 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80100c6:	bf00      	nop

080100c8 <pool_func_mp_array_f32>:
 80100c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100cc:	b091      	sub	sp, #68	@ 0x44
 80100ce:	468b      	mov	fp, r1
 80100d0:	469c      	mov	ip, r3
 80100d2:	4690      	mov	r8, r2
 80100d4:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 80100d8:	4681      	mov	r9, r0
 80100da:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80100de:	9101      	str	r1, [sp, #4]
 80100e0:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 80100e4:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 80100e8:	9105      	str	r1, [sp, #20]
 80100ea:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80100ee:	9304      	str	r3, [sp, #16]
 80100f0:	9106      	str	r1, [sp, #24]
 80100f2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80100f6:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 80100fa:	ea52 0403 	orrs.w	r4, r2, r3
 80100fe:	9102      	str	r1, [sp, #8]
 8010100:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8010104:	9103      	str	r1, [sp, #12]
 8010106:	d173      	bne.n	80101f0 <pool_func_mp_array_f32+0x128>
 8010108:	9904      	ldr	r1, [sp, #16]
 801010a:	9d02      	ldr	r5, [sp, #8]
 801010c:	eba1 000b 	sub.w	r0, r1, fp
 8010110:	9e05      	ldr	r6, [sp, #20]
 8010112:	1e69      	subs	r1, r5, #1
 8010114:	3801      	subs	r0, #1
 8010116:	fb11 0106 	smlabb	r1, r1, r6, r0
 801011a:	0409      	lsls	r1, r1, #16
 801011c:	d568      	bpl.n	80101f0 <pool_func_mp_array_f32+0x128>
 801011e:	9901      	ldr	r1, [sp, #4]
 8010120:	9e03      	ldr	r6, [sp, #12]
 8010122:	eba1 0008 	sub.w	r0, r1, r8
 8010126:	9f06      	ldr	r7, [sp, #24]
 8010128:	1e71      	subs	r1, r6, #1
 801012a:	3801      	subs	r0, #1
 801012c:	fb11 0107 	smlabb	r1, r1, r7, r0
 8010130:	040f      	lsls	r7, r1, #16
 8010132:	d55d      	bpl.n	80101f0 <pool_func_mp_array_f32+0x128>
 8010134:	2e00      	cmp	r6, #0
 8010136:	d058      	beq.n	80101ea <pool_func_mp_array_f32+0x122>
 8010138:	2d00      	cmp	r5, #0
 801013a:	d056      	beq.n	80101ea <pool_func_mp_array_f32+0x122>
 801013c:	4663      	mov	r3, ip
 801013e:	2b00      	cmp	r3, #0
 8010140:	d053      	beq.n	80101ea <pool_func_mp_array_f32+0x122>
 8010142:	2b01      	cmp	r3, #1
 8010144:	f040 814a 	bne.w	80103dc <pool_func_mp_array_f32+0x314>
 8010148:	46a2      	mov	sl, r4
 801014a:	4623      	mov	r3, r4
 801014c:	9407      	str	r4, [sp, #28]
 801014e:	9a02      	ldr	r2, [sp, #8]
 8010150:	2700      	movs	r7, #0
 8010152:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8010156:	fb02 f303 	mul.w	r3, r2, r3
 801015a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801015e:	46be      	mov	lr, r7
 8010160:	46bc      	mov	ip, r7
 8010162:	9308      	str	r3, [sp, #32]
 8010164:	fa0f f38a 	sxth.w	r3, sl
 8010168:	9309      	str	r3, [sp, #36]	@ 0x24
 801016a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801016c:	b23d      	sxth	r5, r7
 801016e:	9b08      	ldr	r3, [sp, #32]
 8010170:	fa0f f088 	sxth.w	r0, r8
 8010174:	42b4      	cmp	r4, r6
 8010176:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80103d8 <pool_func_mp_array_f32+0x310>
 801017a:	449c      	add	ip, r3
 801017c:	da12      	bge.n	80101a4 <pool_func_mp_array_f32+0xdc>
 801017e:	4285      	cmp	r5, r0
 8010180:	da0c      	bge.n	801019c <pool_func_mp_array_f32+0xd4>
 8010182:	fb04 520b 	mla	r2, r4, fp, r5
 8010186:	462b      	mov	r3, r5
 8010188:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801018c:	3301      	adds	r3, #1
 801018e:	ecb2 7a01 	vldmia	r2!, {s14}
 8010192:	b219      	sxth	r1, r3
 8010194:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8010198:	4281      	cmp	r1, r0
 801019a:	dbf7      	blt.n	801018c <pool_func_mp_array_f32+0xc4>
 801019c:	3401      	adds	r4, #1
 801019e:	b224      	sxth	r4, r4
 80101a0:	42b4      	cmp	r4, r6
 80101a2:	dbec      	blt.n	801017e <pool_func_mp_array_f32+0xb6>
 80101a4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80101a6:	f10e 0e01 	add.w	lr, lr, #1
 80101aa:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80101ae:	9b05      	ldr	r3, [sp, #20]
 80101b0:	fa0f fe8e 	sxth.w	lr, lr
 80101b4:	4498      	add	r8, r3
 80101b6:	441f      	add	r7, r3
 80101b8:	9b02      	ldr	r3, [sp, #8]
 80101ba:	edcc 7a00 	vstr	s15, [ip]
 80101be:	fa1f f888 	uxth.w	r8, r8
 80101c2:	4573      	cmp	r3, lr
 80101c4:	b2bf      	uxth	r7, r7
 80101c6:	46f4      	mov	ip, lr
 80101c8:	dccf      	bgt.n	801016a <pool_func_mp_array_f32+0xa2>
 80101ca:	9a07      	ldr	r2, [sp, #28]
 80101cc:	9906      	ldr	r1, [sp, #24]
 80101ce:	9b01      	ldr	r3, [sp, #4]
 80101d0:	3201      	adds	r2, #1
 80101d2:	448a      	add	sl, r1
 80101d4:	b212      	sxth	r2, r2
 80101d6:	440b      	add	r3, r1
 80101d8:	9903      	ldr	r1, [sp, #12]
 80101da:	fa1f fa8a 	uxth.w	sl, sl
 80101de:	b29b      	uxth	r3, r3
 80101e0:	9207      	str	r2, [sp, #28]
 80101e2:	4291      	cmp	r1, r2
 80101e4:	9301      	str	r3, [sp, #4]
 80101e6:	4613      	mov	r3, r2
 80101e8:	dcb1      	bgt.n	801014e <pool_func_mp_array_f32+0x86>
 80101ea:	b011      	add	sp, #68	@ 0x44
 80101ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101f0:	9903      	ldr	r1, [sp, #12]
 80101f2:	2900      	cmp	r1, #0
 80101f4:	d0f9      	beq.n	80101ea <pool_func_mp_array_f32+0x122>
 80101f6:	9902      	ldr	r1, [sp, #8]
 80101f8:	2900      	cmp	r1, #0
 80101fa:	d0f6      	beq.n	80101ea <pool_func_mp_array_f32+0x122>
 80101fc:	4661      	mov	r1, ip
 80101fe:	2900      	cmp	r1, #0
 8010200:	d0f3      	beq.n	80101ea <pool_func_mp_array_f32+0x122>
 8010202:	2901      	cmp	r1, #1
 8010204:	9901      	ldr	r1, [sp, #4]
 8010206:	d163      	bne.n	80102d0 <pool_func_mp_array_f32+0x208>
 8010208:	1a8a      	subs	r2, r1, r2
 801020a:	9904      	ldr	r1, [sp, #16]
 801020c:	1ac9      	subs	r1, r1, r3
 801020e:	425b      	negs	r3, r3
 8010210:	b292      	uxth	r2, r2
 8010212:	b29b      	uxth	r3, r3
 8010214:	9204      	str	r2, [sp, #16]
 8010216:	b28a      	uxth	r2, r1
 8010218:	930b      	str	r3, [sp, #44]	@ 0x2c
 801021a:	2300      	movs	r3, #0
 801021c:	920a      	str	r2, [sp, #40]	@ 0x28
 801021e:	9307      	str	r3, [sp, #28]
 8010220:	9a02      	ldr	r2, [sp, #8]
 8010222:	2700      	movs	r7, #0
 8010224:	fb02 f303 	mul.w	r3, r2, r3
 8010228:	9a04      	ldr	r2, [sp, #16]
 801022a:	46bc      	mov	ip, r7
 801022c:	9308      	str	r3, [sp, #32]
 801022e:	b216      	sxth	r6, r2
 8010230:	9b01      	ldr	r3, [sp, #4]
 8010232:	1ad3      	subs	r3, r2, r3
 8010234:	e9dd ae0a 	ldrd	sl, lr, [sp, #40]	@ 0x28
 8010238:	b21b      	sxth	r3, r3
 801023a:	9309      	str	r3, [sp, #36]	@ 0x24
 801023c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801023e:	fa0f f58e 	sxth.w	r5, lr
 8010242:	9b08      	ldr	r3, [sp, #32]
 8010244:	fa0f f48a 	sxth.w	r4, sl
 8010248:	428e      	cmp	r6, r1
 801024a:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80103d8 <pool_func_mp_array_f32+0x310>
 801024e:	449c      	add	ip, r3
 8010250:	dd1c      	ble.n	801028c <pool_func_mp_array_f32+0x1c4>
 8010252:	42a5      	cmp	r5, r4
 8010254:	da16      	bge.n	8010284 <pool_func_mp_array_f32+0x1bc>
 8010256:	4588      	cmp	r8, r1
 8010258:	fb01 f20b 	mul.w	r2, r1, fp
 801025c:	dd12      	ble.n	8010284 <pool_func_mp_array_f32+0x1bc>
 801025e:	442a      	add	r2, r5
 8010260:	462b      	mov	r3, r5
 8010262:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8010266:	ea41 0003 	orr.w	r0, r1, r3
 801026a:	0400      	lsls	r0, r0, #16
 801026c:	d405      	bmi.n	801027a <pool_func_mp_array_f32+0x1b2>
 801026e:	459b      	cmp	fp, r3
 8010270:	dd03      	ble.n	801027a <pool_func_mp_array_f32+0x1b2>
 8010272:	ed92 7a00 	vldr	s14, [r2]
 8010276:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801027a:	3301      	adds	r3, #1
 801027c:	3204      	adds	r2, #4
 801027e:	b218      	sxth	r0, r3
 8010280:	42a0      	cmp	r0, r4
 8010282:	dbf0      	blt.n	8010266 <pool_func_mp_array_f32+0x19e>
 8010284:	3101      	adds	r1, #1
 8010286:	b209      	sxth	r1, r1
 8010288:	42b1      	cmp	r1, r6
 801028a:	dbe2      	blt.n	8010252 <pool_func_mp_array_f32+0x18a>
 801028c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801028e:	3701      	adds	r7, #1
 8010290:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8010294:	9b05      	ldr	r3, [sp, #20]
 8010296:	b23f      	sxth	r7, r7
 8010298:	449a      	add	sl, r3
 801029a:	449e      	add	lr, r3
 801029c:	9b02      	ldr	r3, [sp, #8]
 801029e:	edcc 7a00 	vstr	s15, [ip]
 80102a2:	fa1f fa8a 	uxth.w	sl, sl
 80102a6:	42bb      	cmp	r3, r7
 80102a8:	fa1f fe8e 	uxth.w	lr, lr
 80102ac:	46bc      	mov	ip, r7
 80102ae:	dcc5      	bgt.n	801023c <pool_func_mp_array_f32+0x174>
 80102b0:	9a07      	ldr	r2, [sp, #28]
 80102b2:	9b04      	ldr	r3, [sp, #16]
 80102b4:	9906      	ldr	r1, [sp, #24]
 80102b6:	3201      	adds	r2, #1
 80102b8:	440b      	add	r3, r1
 80102ba:	b212      	sxth	r2, r2
 80102bc:	9903      	ldr	r1, [sp, #12]
 80102be:	b29b      	uxth	r3, r3
 80102c0:	9207      	str	r2, [sp, #28]
 80102c2:	4291      	cmp	r1, r2
 80102c4:	9304      	str	r3, [sp, #16]
 80102c6:	4613      	mov	r3, r2
 80102c8:	dcaa      	bgt.n	8010220 <pool_func_mp_array_f32+0x158>
 80102ca:	b011      	add	sp, #68	@ 0x44
 80102cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102d0:	1a88      	subs	r0, r1, r2
 80102d2:	9904      	ldr	r1, [sp, #16]
 80102d4:	4252      	negs	r2, r2
 80102d6:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80102da:	1ac9      	subs	r1, r1, r3
 80102dc:	425b      	negs	r3, r3
 80102de:	b292      	uxth	r2, r2
 80102e0:	46e6      	mov	lr, ip
 80102e2:	b29b      	uxth	r3, r3
 80102e4:	b280      	uxth	r0, r0
 80102e6:	9208      	str	r2, [sp, #32]
 80102e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80102ea:	b28a      	uxth	r2, r1
 80102ec:	2300      	movs	r3, #0
 80102ee:	9007      	str	r0, [sp, #28]
 80102f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80102f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80102f4:	9a02      	ldr	r2, [sp, #8]
 80102f6:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 80102fa:	fb02 f303 	mul.w	r3, r2, r3
 80102fe:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8010302:	920a      	str	r2, [sp, #40]	@ 0x28
 8010304:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010306:	930d      	str	r3, [sp, #52]	@ 0x34
 8010308:	2300      	movs	r3, #0
 801030a:	9201      	str	r2, [sp, #4]
 801030c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801030e:	930c      	str	r3, [sp, #48]	@ 0x30
 8010310:	9204      	str	r2, [sp, #16]
 8010312:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010314:	f04f 0c00 	mov.w	ip, #0
 8010318:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 801031c:	4413      	add	r3, r2
 801031e:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8010322:	4667      	mov	r7, ip
 8010324:	fb0e f303 	mul.w	r3, lr, r3
 8010328:	9309      	str	r3, [sp, #36]	@ 0x24
 801032a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801032c:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 80103d8 <pool_func_mp_array_f32+0x310>
 8010330:	42b1      	cmp	r1, r6
 8010332:	da1e      	bge.n	8010372 <pool_func_mp_array_f32+0x2aa>
 8010334:	42a5      	cmp	r5, r4
 8010336:	da18      	bge.n	801036a <pool_func_mp_array_f32+0x2a2>
 8010338:	4541      	cmp	r1, r8
 801033a:	fb01 f30b 	mul.w	r3, r1, fp
 801033e:	da14      	bge.n	801036a <pool_func_mp_array_f32+0x2a2>
 8010340:	195a      	adds	r2, r3, r5
 8010342:	462b      	mov	r3, r5
 8010344:	fb0e 7202 	mla	r2, lr, r2, r7
 8010348:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801034c:	ea41 0003 	orr.w	r0, r1, r3
 8010350:	0400      	lsls	r0, r0, #16
 8010352:	d405      	bmi.n	8010360 <pool_func_mp_array_f32+0x298>
 8010354:	459b      	cmp	fp, r3
 8010356:	dd03      	ble.n	8010360 <pool_func_mp_array_f32+0x298>
 8010358:	ed92 7a00 	vldr	s14, [r2]
 801035c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8010360:	3301      	adds	r3, #1
 8010362:	4452      	add	r2, sl
 8010364:	b218      	sxth	r0, r3
 8010366:	42a0      	cmp	r0, r4
 8010368:	dbf0      	blt.n	801034c <pool_func_mp_array_f32+0x284>
 801036a:	3101      	adds	r1, #1
 801036c:	b209      	sxth	r1, r1
 801036e:	42b1      	cmp	r1, r6
 8010370:	dbe0      	blt.n	8010334 <pool_func_mp_array_f32+0x26c>
 8010372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010374:	f10c 0c01 	add.w	ip, ip, #1
 8010378:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801037a:	443b      	add	r3, r7
 801037c:	fa0f fc8c 	sxth.w	ip, ip
 8010380:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010384:	45f4      	cmp	ip, lr
 8010386:	4667      	mov	r7, ip
 8010388:	edc3 7a00 	vstr	s15, [r3]
 801038c:	dbcd      	blt.n	801032a <pool_func_mp_array_f32+0x262>
 801038e:	9a01      	ldr	r2, [sp, #4]
 8010390:	9805      	ldr	r0, [sp, #20]
 8010392:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010394:	4402      	add	r2, r0
 8010396:	9b04      	ldr	r3, [sp, #16]
 8010398:	3101      	adds	r1, #1
 801039a:	b292      	uxth	r2, r2
 801039c:	4403      	add	r3, r0
 801039e:	b209      	sxth	r1, r1
 80103a0:	9201      	str	r2, [sp, #4]
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	9a02      	ldr	r2, [sp, #8]
 80103a6:	9304      	str	r3, [sp, #16]
 80103a8:	460b      	mov	r3, r1
 80103aa:	428a      	cmp	r2, r1
 80103ac:	910c      	str	r1, [sp, #48]	@ 0x30
 80103ae:	dcb0      	bgt.n	8010312 <pool_func_mp_array_f32+0x24a>
 80103b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80103b2:	9b08      	ldr	r3, [sp, #32]
 80103b4:	3101      	adds	r1, #1
 80103b6:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 80103ba:	b209      	sxth	r1, r1
 80103bc:	4402      	add	r2, r0
 80103be:	4403      	add	r3, r0
 80103c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80103c2:	b292      	uxth	r2, r2
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	9207      	str	r2, [sp, #28]
 80103c8:	9a03      	ldr	r2, [sp, #12]
 80103ca:	9308      	str	r3, [sp, #32]
 80103cc:	460b      	mov	r3, r1
 80103ce:	428a      	cmp	r2, r1
 80103d0:	dc90      	bgt.n	80102f4 <pool_func_mp_array_f32+0x22c>
 80103d2:	b011      	add	sp, #68	@ 0x44
 80103d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103d8:	cf000000 	.word	0xcf000000
 80103dc:	4623      	mov	r3, r4
 80103de:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80103e2:	46e0      	mov	r8, ip
 80103e4:	9408      	str	r4, [sp, #32]
 80103e6:	9409      	str	r4, [sp, #36]	@ 0x24
 80103e8:	9a02      	ldr	r2, [sp, #8]
 80103ea:	f04f 0c00 	mov.w	ip, #0
 80103ee:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 80103f2:	fb02 f303 	mul.w	r3, r2, r3
 80103f6:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 80103fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80103fc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8010400:	930d      	str	r3, [sp, #52]	@ 0x34
 8010402:	9b04      	ldr	r3, [sp, #16]
 8010404:	9307      	str	r3, [sp, #28]
 8010406:	4663      	mov	r3, ip
 8010408:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801040a:	f04f 0e00 	mov.w	lr, #0
 801040e:	fa0f f58c 	sxth.w	r5, ip
 8010412:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8010416:	4413      	add	r3, r2
 8010418:	4676      	mov	r6, lr
 801041a:	fb08 f303 	mul.w	r3, r8, r3
 801041e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010420:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8010422:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 80103d8 <pool_func_mp_array_f32+0x310>
 8010426:	42bc      	cmp	r4, r7
 8010428:	da15      	bge.n	8010456 <pool_func_mp_array_f32+0x38e>
 801042a:	4285      	cmp	r5, r0
 801042c:	da0f      	bge.n	801044e <pool_func_mp_array_f32+0x386>
 801042e:	fb0b 5304 	mla	r3, fp, r4, r5
 8010432:	462a      	mov	r2, r5
 8010434:	fb08 6303 	mla	r3, r8, r3, r6
 8010438:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801043c:	3201      	adds	r2, #1
 801043e:	ed93 7a00 	vldr	s14, [r3]
 8010442:	4453      	add	r3, sl
 8010444:	b211      	sxth	r1, r2
 8010446:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801044a:	4281      	cmp	r1, r0
 801044c:	dbf6      	blt.n	801043c <pool_func_mp_array_f32+0x374>
 801044e:	3401      	adds	r4, #1
 8010450:	b224      	sxth	r4, r4
 8010452:	42bc      	cmp	r4, r7
 8010454:	dbe9      	blt.n	801042a <pool_func_mp_array_f32+0x362>
 8010456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010458:	f10e 0e01 	add.w	lr, lr, #1
 801045c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801045e:	4433      	add	r3, r6
 8010460:	fa0f fe8e 	sxth.w	lr, lr
 8010464:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010468:	45c6      	cmp	lr, r8
 801046a:	4676      	mov	r6, lr
 801046c:	edc3 7a00 	vstr	s15, [r3]
 8010470:	dbd6      	blt.n	8010420 <pool_func_mp_array_f32+0x358>
 8010472:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010474:	9905      	ldr	r1, [sp, #20]
 8010476:	9b07      	ldr	r3, [sp, #28]
 8010478:	3201      	adds	r2, #1
 801047a:	448c      	add	ip, r1
 801047c:	b212      	sxth	r2, r2
 801047e:	440b      	add	r3, r1
 8010480:	9902      	ldr	r1, [sp, #8]
 8010482:	fa1f fc8c 	uxth.w	ip, ip
 8010486:	b29b      	uxth	r3, r3
 8010488:	920a      	str	r2, [sp, #40]	@ 0x28
 801048a:	4291      	cmp	r1, r2
 801048c:	9307      	str	r3, [sp, #28]
 801048e:	4613      	mov	r3, r2
 8010490:	dcba      	bgt.n	8010408 <pool_func_mp_array_f32+0x340>
 8010492:	9a01      	ldr	r2, [sp, #4]
 8010494:	9806      	ldr	r0, [sp, #24]
 8010496:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010498:	4402      	add	r2, r0
 801049a:	9b08      	ldr	r3, [sp, #32]
 801049c:	3101      	adds	r1, #1
 801049e:	b292      	uxth	r2, r2
 80104a0:	4403      	add	r3, r0
 80104a2:	b209      	sxth	r1, r1
 80104a4:	9201      	str	r2, [sp, #4]
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	9a03      	ldr	r2, [sp, #12]
 80104aa:	9308      	str	r3, [sp, #32]
 80104ac:	460b      	mov	r3, r1
 80104ae:	428a      	cmp	r2, r1
 80104b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80104b2:	dc99      	bgt.n	80103e8 <pool_func_mp_array_f32+0x320>
 80104b4:	e699      	b.n	80101ea <pool_func_mp_array_f32+0x122>
 80104b6:	bf00      	nop

080104b8 <forward_lite_upsample_bilinear_if32of32>:
 80104b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104bc:	ed2d 8b0a 	vpush	{d8-d12}
 80104c0:	b08f      	sub	sp, #60	@ 0x3c
 80104c2:	4683      	mov	fp, r0
 80104c4:	9104      	str	r1, [sp, #16]
 80104c6:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 80104ca:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 80104ce:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 80104d2:	9206      	str	r2, [sp, #24]
 80104d4:	2900      	cmp	r1, #0
 80104d6:	f000 80a7 	beq.w	8010628 <forward_lite_upsample_bilinear_if32of32+0x170>
 80104da:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80104de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80104e2:	ee70 aae7 	vsub.f32	s21, s1, s15
 80104e6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80104ea:	ee6a aa87 	vmul.f32	s21, s21, s14
 80104ee:	ee27 9a87 	vmul.f32	s18, s15, s14
 80104f2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80104f6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80104f8:	ee87 baa0 	vdiv.f32	s22, s15, s1
 80104fc:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8010500:	2a00      	cmp	r2, #0
 8010502:	f000 808c 	beq.w	801061e <forward_lite_upsample_bilinear_if32of32+0x166>
 8010506:	3b01      	subs	r3, #1
 8010508:	ea4f 068a 	mov.w	r6, sl, lsl #2
 801050c:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8010634 <forward_lite_upsample_bilinear_if32of32+0x17c>
 8010510:	ee07 3a90 	vmov	s15, r3
 8010514:	9b06      	ldr	r3, [sp, #24]
 8010516:	1e5a      	subs	r2, r3, #1
 8010518:	fb0a f303 	mul.w	r3, sl, r3
 801051c:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8010520:	ee0c 2a90 	vmov	s25, r2
 8010524:	9305      	str	r3, [sp, #20]
 8010526:	2300      	movs	r3, #0
 8010528:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 801052c:	9303      	str	r3, [sp, #12]
 801052e:	fb06 f308 	mul.w	r3, r6, r8
 8010532:	9307      	str	r3, [sp, #28]
 8010534:	eddd 7a03 	vldr	s15, [sp, #12]
 8010538:	9b05      	ldr	r3, [sp, #20]
 801053a:	eef8 ba67 	vcvt.f32.u32	s23, s15
 801053e:	ee7b baea 	vsub.f32	s23, s23, s21
 8010542:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8010546:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 801054a:	fecb baca 	vminnm.f32	s23, s23, s20
 801054e:	eef4 ba4a 	vcmp.f32	s23, s20
 8010552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010556:	bf14      	ite	ne
 8010558:	4699      	movne	r9, r3
 801055a:	f04f 0900 	moveq.w	r9, #0
 801055e:	f1b8 0f00 	cmp.w	r8, #0
 8010562:	d056      	beq.n	8010612 <forward_lite_upsample_bilinear_if32of32+0x15a>
 8010564:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8010568:	9b06      	ldr	r3, [sp, #24]
 801056a:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801056e:	9d04      	ldr	r5, [sp, #16]
 8010570:	2400      	movs	r4, #0
 8010572:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8010576:	ee17 7a10 	vmov	r7, s14
 801057a:	ee38 ca6b 	vsub.f32	s24, s16, s23
 801057e:	fb03 f707 	mul.w	r7, r3, r7
 8010582:	ee7b bae7 	vsub.f32	s23, s23, s15
 8010586:	ee3c ca27 	vadd.f32	s24, s24, s15
 801058a:	ee07 4a90 	vmov	s15, r4
 801058e:	ab0a      	add	r3, sp, #40	@ 0x28
 8010590:	3401      	adds	r4, #1
 8010592:	4629      	mov	r1, r5
 8010594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010598:	9300      	str	r3, [sp, #0]
 801059a:	4652      	mov	r2, sl
 801059c:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80105a0:	4435      	add	r5, r6
 80105a2:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80105a6:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80105aa:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 80105ae:	fec7 7aec 	vminnm.f32	s15, s15, s25
 80105b2:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80105b6:	eef4 7a6c 	vcmp.f32	s15, s25
 80105ba:	ee38 7a67 	vsub.f32	s14, s16, s15
 80105be:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80105c2:	ee16 0a90 	vmov	r0, s13
 80105c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ca:	4438      	add	r0, r7
 80105cc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80105d0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80105d4:	bf14      	ite	ne
 80105d6:	4653      	movne	r3, sl
 80105d8:	2300      	moveq	r3, #0
 80105da:	fb06 b000 	mla	r0, r6, r0, fp
 80105de:	ee67 5a0c 	vmul.f32	s11, s14, s24
 80105e2:	ee27 6a8c 	vmul.f32	s12, s15, s24
 80105e6:	9308      	str	r3, [sp, #32]
 80105e8:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80105ec:	ab08      	add	r3, sp, #32
 80105ee:	ee67 7aab 	vmul.f32	s15, s15, s23
 80105f2:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 80105f6:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 80105fa:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 80105fe:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8010602:	f001 f9b1 	bl	8011968 <lite_bilinear_if32of32_kernel>
 8010606:	45a0      	cmp	r8, r4
 8010608:	d1bf      	bne.n	801058a <forward_lite_upsample_bilinear_if32of32+0xd2>
 801060a:	9b04      	ldr	r3, [sp, #16]
 801060c:	9a07      	ldr	r2, [sp, #28]
 801060e:	4413      	add	r3, r2
 8010610:	9304      	str	r3, [sp, #16]
 8010612:	9b03      	ldr	r3, [sp, #12]
 8010614:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010616:	3301      	adds	r3, #1
 8010618:	429a      	cmp	r2, r3
 801061a:	9303      	str	r3, [sp, #12]
 801061c:	d18a      	bne.n	8010534 <forward_lite_upsample_bilinear_if32of32+0x7c>
 801061e:	b00f      	add	sp, #60	@ 0x3c
 8010620:	ecbd 8b0a 	vpop	{d8-d12}
 8010624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010628:	eddf aa02 	vldr	s21, [pc, #8]	@ 8010634 <forward_lite_upsample_bilinear_if32of32+0x17c>
 801062c:	eeb0 9a6a 	vmov.f32	s18, s21
 8010630:	e75f      	b.n	80104f2 <forward_lite_upsample_bilinear_if32of32+0x3a>
 8010632:	bf00      	nop
 8010634:	00000000 	.word	0x00000000

08010638 <forward_lite_upsample_bilinear_is8os8>:
 8010638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801063c:	ed2d 8b0a 	vpush	{d8-d12}
 8010640:	b08f      	sub	sp, #60	@ 0x3c
 8010642:	4682      	mov	sl, r0
 8010644:	9104      	str	r1, [sp, #16]
 8010646:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 801064a:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 801064c:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8010650:	9206      	str	r2, [sp, #24]
 8010652:	2900      	cmp	r1, #0
 8010654:	f000 80aa 	beq.w	80107ac <forward_lite_upsample_bilinear_is8os8+0x174>
 8010658:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801065c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010660:	ee70 aae7 	vsub.f32	s21, s1, s15
 8010664:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010668:	ee6a aa87 	vmul.f32	s21, s21, s14
 801066c:	ee27 9a87 	vmul.f32	s18, s15, s14
 8010670:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010674:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010676:	ee87 baa0 	vdiv.f32	s22, s15, s1
 801067a:	eec7 9a80 	vdiv.f32	s19, s15, s0
 801067e:	2a00      	cmp	r2, #0
 8010680:	f000 808f 	beq.w	80107a2 <forward_lite_upsample_bilinear_is8os8+0x16a>
 8010684:	3b01      	subs	r3, #1
 8010686:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 80107b8 <forward_lite_upsample_bilinear_is8os8+0x180>
 801068a:	ee07 3a90 	vmov	s15, r3
 801068e:	9b06      	ldr	r3, [sp, #24]
 8010690:	1e5a      	subs	r2, r3, #1
 8010692:	fb0b f303 	mul.w	r3, fp, r3
 8010696:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 801069a:	ee0c 2a90 	vmov	s25, r2
 801069e:	9305      	str	r3, [sp, #20]
 80106a0:	fb07 f30b 	mul.w	r3, r7, fp
 80106a4:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 80106a8:	9307      	str	r3, [sp, #28]
 80106aa:	2300      	movs	r3, #0
 80106ac:	9303      	str	r3, [sp, #12]
 80106ae:	eddd 7a03 	vldr	s15, [sp, #12]
 80106b2:	9b05      	ldr	r3, [sp, #20]
 80106b4:	eef8 ba67 	vcvt.f32.u32	s23, s15
 80106b8:	ee7b baea 	vsub.f32	s23, s23, s21
 80106bc:	ee6b ba8b 	vmul.f32	s23, s23, s22
 80106c0:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 80106c4:	fecb baca 	vminnm.f32	s23, s23, s20
 80106c8:	eef4 ba4a 	vcmp.f32	s23, s20
 80106cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106d0:	bf14      	ite	ne
 80106d2:	4698      	movne	r8, r3
 80106d4:	f04f 0800 	moveq.w	r8, #0
 80106d8:	2f00      	cmp	r7, #0
 80106da:	d05c      	beq.n	8010796 <forward_lite_upsample_bilinear_is8os8+0x15e>
 80106dc:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 80106e0:	9b06      	ldr	r3, [sp, #24]
 80106e2:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80106e6:	9722      	str	r7, [sp, #136]	@ 0x88
 80106e8:	9d04      	ldr	r5, [sp, #16]
 80106ea:	4647      	mov	r7, r8
 80106ec:	eef8 7a47 	vcvt.f32.u32	s15, s14
 80106f0:	ee17 6a10 	vmov	r6, s14
 80106f4:	ee38 ca6b 	vsub.f32	s24, s16, s23
 80106f8:	2400      	movs	r4, #0
 80106fa:	fb03 f606 	mul.w	r6, r3, r6
 80106fe:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8010702:	ee7b bae7 	vsub.f32	s23, s23, s15
 8010706:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 801070a:	ee3c ca27 	vadd.f32	s24, s24, s15
 801070e:	ee07 4a90 	vmov	s15, r4
 8010712:	3401      	adds	r4, #1
 8010714:	4629      	mov	r1, r5
 8010716:	465a      	mov	r2, fp
 8010718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801071c:	f8cd 9000 	str.w	r9, [sp]
 8010720:	9709      	str	r7, [sp, #36]	@ 0x24
 8010722:	445d      	add	r5, fp
 8010724:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010728:	ee67 7aa9 	vmul.f32	s15, s15, s19
 801072c:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8010730:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8010734:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8010738:	eef4 7a6c 	vcmp.f32	s15, s25
 801073c:	ee38 7a67 	vsub.f32	s14, s16, s15
 8010740:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8010744:	ee16 0a90 	vmov	r0, s13
 8010748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801074c:	4430      	add	r0, r6
 801074e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010752:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010756:	bf14      	ite	ne
 8010758:	465b      	movne	r3, fp
 801075a:	2300      	moveq	r3, #0
 801075c:	fb0b a000 	mla	r0, fp, r0, sl
 8010760:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8010764:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8010768:	9308      	str	r3, [sp, #32]
 801076a:	ee27 7a2b 	vmul.f32	s14, s14, s23
 801076e:	ab08      	add	r3, sp, #32
 8010770:	ee67 7aab 	vmul.f32	s15, s15, s23
 8010774:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8010778:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 801077c:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8010780:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8010784:	f001 f920 	bl	80119c8 <lite_bilinear_is8os8_kernel>
 8010788:	45a0      	cmp	r8, r4
 801078a:	d1c0      	bne.n	801070e <forward_lite_upsample_bilinear_is8os8+0xd6>
 801078c:	9b04      	ldr	r3, [sp, #16]
 801078e:	4647      	mov	r7, r8
 8010790:	9a07      	ldr	r2, [sp, #28]
 8010792:	4413      	add	r3, r2
 8010794:	9304      	str	r3, [sp, #16]
 8010796:	9b03      	ldr	r3, [sp, #12]
 8010798:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801079a:	3301      	adds	r3, #1
 801079c:	429a      	cmp	r2, r3
 801079e:	9303      	str	r3, [sp, #12]
 80107a0:	d185      	bne.n	80106ae <forward_lite_upsample_bilinear_is8os8+0x76>
 80107a2:	b00f      	add	sp, #60	@ 0x3c
 80107a4:	ecbd 8b0a 	vpop	{d8-d12}
 80107a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ac:	eddf aa02 	vldr	s21, [pc, #8]	@ 80107b8 <forward_lite_upsample_bilinear_is8os8+0x180>
 80107b0:	eeb0 9a6a 	vmov.f32	s18, s21
 80107b4:	e75c      	b.n	8010670 <forward_lite_upsample_bilinear_is8os8+0x38>
 80107b6:	bf00      	nop
 80107b8:	00000000 	.word	0x00000000

080107bc <forward_lite_upsample_bilinear_iu8ou8>:
 80107bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c0:	ed2d 8b0a 	vpush	{d8-d12}
 80107c4:	b08f      	sub	sp, #60	@ 0x3c
 80107c6:	4682      	mov	sl, r0
 80107c8:	9104      	str	r1, [sp, #16]
 80107ca:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 80107ce:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 80107d0:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 80107d4:	9206      	str	r2, [sp, #24]
 80107d6:	2900      	cmp	r1, #0
 80107d8:	f000 80aa 	beq.w	8010930 <forward_lite_upsample_bilinear_iu8ou8+0x174>
 80107dc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80107e0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80107e4:	ee70 aae7 	vsub.f32	s21, s1, s15
 80107e8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80107ec:	ee6a aa87 	vmul.f32	s21, s21, s14
 80107f0:	ee27 9a87 	vmul.f32	s18, s15, s14
 80107f4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80107f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80107fa:	ee87 baa0 	vdiv.f32	s22, s15, s1
 80107fe:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8010802:	2a00      	cmp	r2, #0
 8010804:	f000 808f 	beq.w	8010926 <forward_lite_upsample_bilinear_iu8ou8+0x16a>
 8010808:	3b01      	subs	r3, #1
 801080a:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 801093c <forward_lite_upsample_bilinear_iu8ou8+0x180>
 801080e:	ee07 3a90 	vmov	s15, r3
 8010812:	9b06      	ldr	r3, [sp, #24]
 8010814:	1e5a      	subs	r2, r3, #1
 8010816:	fb0b f303 	mul.w	r3, fp, r3
 801081a:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 801081e:	ee0c 2a90 	vmov	s25, r2
 8010822:	9305      	str	r3, [sp, #20]
 8010824:	fb07 f30b 	mul.w	r3, r7, fp
 8010828:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 801082c:	9307      	str	r3, [sp, #28]
 801082e:	2300      	movs	r3, #0
 8010830:	9303      	str	r3, [sp, #12]
 8010832:	eddd 7a03 	vldr	s15, [sp, #12]
 8010836:	9b05      	ldr	r3, [sp, #20]
 8010838:	eef8 ba67 	vcvt.f32.u32	s23, s15
 801083c:	ee7b baea 	vsub.f32	s23, s23, s21
 8010840:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8010844:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8010848:	fecb baca 	vminnm.f32	s23, s23, s20
 801084c:	eef4 ba4a 	vcmp.f32	s23, s20
 8010850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010854:	bf14      	ite	ne
 8010856:	4698      	movne	r8, r3
 8010858:	f04f 0800 	moveq.w	r8, #0
 801085c:	2f00      	cmp	r7, #0
 801085e:	d05c      	beq.n	801091a <forward_lite_upsample_bilinear_iu8ou8+0x15e>
 8010860:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8010864:	9b06      	ldr	r3, [sp, #24]
 8010866:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801086a:	9722      	str	r7, [sp, #136]	@ 0x88
 801086c:	9d04      	ldr	r5, [sp, #16]
 801086e:	4647      	mov	r7, r8
 8010870:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8010874:	ee17 6a10 	vmov	r6, s14
 8010878:	ee38 ca6b 	vsub.f32	s24, s16, s23
 801087c:	2400      	movs	r4, #0
 801087e:	fb03 f606 	mul.w	r6, r3, r6
 8010882:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8010886:	ee7b bae7 	vsub.f32	s23, s23, s15
 801088a:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 801088e:	ee3c ca27 	vadd.f32	s24, s24, s15
 8010892:	ee07 4a90 	vmov	s15, r4
 8010896:	3401      	adds	r4, #1
 8010898:	4629      	mov	r1, r5
 801089a:	465a      	mov	r2, fp
 801089c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108a0:	f8cd 9000 	str.w	r9, [sp]
 80108a4:	9709      	str	r7, [sp, #36]	@ 0x24
 80108a6:	445d      	add	r5, fp
 80108a8:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80108ac:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80108b0:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 80108b4:	fec7 7aec 	vminnm.f32	s15, s15, s25
 80108b8:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80108bc:	eef4 7a6c 	vcmp.f32	s15, s25
 80108c0:	ee38 7a67 	vsub.f32	s14, s16, s15
 80108c4:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80108c8:	ee16 0a90 	vmov	r0, s13
 80108cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d0:	4430      	add	r0, r6
 80108d2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80108d6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80108da:	bf14      	ite	ne
 80108dc:	465b      	movne	r3, fp
 80108de:	2300      	moveq	r3, #0
 80108e0:	fb0b a000 	mla	r0, fp, r0, sl
 80108e4:	ee67 5a0c 	vmul.f32	s11, s14, s24
 80108e8:	ee27 6a8c 	vmul.f32	s12, s15, s24
 80108ec:	9308      	str	r3, [sp, #32]
 80108ee:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80108f2:	ab08      	add	r3, sp, #32
 80108f4:	ee67 7aab 	vmul.f32	s15, s15, s23
 80108f8:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 80108fc:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8010900:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8010904:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8010908:	f001 f8bc 	bl	8011a84 <lite_bilinear_iu8ou8_kernel>
 801090c:	45a0      	cmp	r8, r4
 801090e:	d1c0      	bne.n	8010892 <forward_lite_upsample_bilinear_iu8ou8+0xd6>
 8010910:	9b04      	ldr	r3, [sp, #16]
 8010912:	4647      	mov	r7, r8
 8010914:	9a07      	ldr	r2, [sp, #28]
 8010916:	4413      	add	r3, r2
 8010918:	9304      	str	r3, [sp, #16]
 801091a:	9b03      	ldr	r3, [sp, #12]
 801091c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801091e:	3301      	adds	r3, #1
 8010920:	429a      	cmp	r2, r3
 8010922:	9303      	str	r3, [sp, #12]
 8010924:	d185      	bne.n	8010832 <forward_lite_upsample_bilinear_iu8ou8+0x76>
 8010926:	b00f      	add	sp, #60	@ 0x3c
 8010928:	ecbd 8b0a 	vpop	{d8-d12}
 801092c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010930:	eddf aa02 	vldr	s21, [pc, #8]	@ 801093c <forward_lite_upsample_bilinear_iu8ou8+0x180>
 8010934:	eeb0 9a6a 	vmov.f32	s18, s21
 8010938:	e75c      	b.n	80107f4 <forward_lite_upsample_bilinear_iu8ou8+0x38>
 801093a:	bf00      	nop
 801093c:	00000000 	.word	0x00000000

08010940 <forward_lite_upsample_bilinear_is16os16>:
 8010940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010944:	ed2d 8b0a 	vpush	{d8-d12}
 8010948:	b08f      	sub	sp, #60	@ 0x3c
 801094a:	4683      	mov	fp, r0
 801094c:	9104      	str	r1, [sp, #16]
 801094e:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8010952:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8010956:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 801095a:	9206      	str	r2, [sp, #24]
 801095c:	2900      	cmp	r1, #0
 801095e:	f000 80a7 	beq.w	8010ab0 <forward_lite_upsample_bilinear_is16os16+0x170>
 8010962:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010966:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801096a:	ee70 aae7 	vsub.f32	s21, s1, s15
 801096e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010972:	ee6a aa87 	vmul.f32	s21, s21, s14
 8010976:	ee27 9a87 	vmul.f32	s18, s15, s14
 801097a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801097e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010980:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8010984:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8010988:	2a00      	cmp	r2, #0
 801098a:	f000 808c 	beq.w	8010aa6 <forward_lite_upsample_bilinear_is16os16+0x166>
 801098e:	3b01      	subs	r3, #1
 8010990:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8010994:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8010abc <forward_lite_upsample_bilinear_is16os16+0x17c>
 8010998:	ee07 3a90 	vmov	s15, r3
 801099c:	9b06      	ldr	r3, [sp, #24]
 801099e:	1e5a      	subs	r2, r3, #1
 80109a0:	fb0a f303 	mul.w	r3, sl, r3
 80109a4:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 80109a8:	ee0c 2a90 	vmov	s25, r2
 80109ac:	9305      	str	r3, [sp, #20]
 80109ae:	2300      	movs	r3, #0
 80109b0:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 80109b4:	9303      	str	r3, [sp, #12]
 80109b6:	fb06 f308 	mul.w	r3, r6, r8
 80109ba:	9307      	str	r3, [sp, #28]
 80109bc:	eddd 7a03 	vldr	s15, [sp, #12]
 80109c0:	9b05      	ldr	r3, [sp, #20]
 80109c2:	eef8 ba67 	vcvt.f32.u32	s23, s15
 80109c6:	ee7b baea 	vsub.f32	s23, s23, s21
 80109ca:	ee6b ba8b 	vmul.f32	s23, s23, s22
 80109ce:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 80109d2:	fecb baca 	vminnm.f32	s23, s23, s20
 80109d6:	eef4 ba4a 	vcmp.f32	s23, s20
 80109da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109de:	bf14      	ite	ne
 80109e0:	4699      	movne	r9, r3
 80109e2:	f04f 0900 	moveq.w	r9, #0
 80109e6:	f1b8 0f00 	cmp.w	r8, #0
 80109ea:	d056      	beq.n	8010a9a <forward_lite_upsample_bilinear_is16os16+0x15a>
 80109ec:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 80109f0:	9b06      	ldr	r3, [sp, #24]
 80109f2:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80109f6:	9d04      	ldr	r5, [sp, #16]
 80109f8:	2400      	movs	r4, #0
 80109fa:	eef8 7a47 	vcvt.f32.u32	s15, s14
 80109fe:	ee17 7a10 	vmov	r7, s14
 8010a02:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8010a06:	fb03 f707 	mul.w	r7, r3, r7
 8010a0a:	ee7b bae7 	vsub.f32	s23, s23, s15
 8010a0e:	ee3c ca27 	vadd.f32	s24, s24, s15
 8010a12:	ee07 4a90 	vmov	s15, r4
 8010a16:	ab0a      	add	r3, sp, #40	@ 0x28
 8010a18:	3401      	adds	r4, #1
 8010a1a:	4629      	mov	r1, r5
 8010a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a20:	9300      	str	r3, [sp, #0]
 8010a22:	4652      	mov	r2, sl
 8010a24:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8010a28:	4435      	add	r5, r6
 8010a2a:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010a2e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8010a32:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8010a36:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8010a3a:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8010a3e:	eef4 7a6c 	vcmp.f32	s15, s25
 8010a42:	ee38 7a67 	vsub.f32	s14, s16, s15
 8010a46:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8010a4a:	ee16 0a90 	vmov	r0, s13
 8010a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a52:	4438      	add	r0, r7
 8010a54:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010a58:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010a5c:	bf14      	ite	ne
 8010a5e:	4653      	movne	r3, sl
 8010a60:	2300      	moveq	r3, #0
 8010a62:	fb06 b000 	mla	r0, r6, r0, fp
 8010a66:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8010a6a:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8010a6e:	9308      	str	r3, [sp, #32]
 8010a70:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8010a74:	ab08      	add	r3, sp, #32
 8010a76:	ee67 7aab 	vmul.f32	s15, s15, s23
 8010a7a:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8010a7e:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8010a82:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8010a86:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8010a8a:	f001 f845 	bl	8011b18 <lite_bilinear_is16os16_kernel>
 8010a8e:	45a0      	cmp	r8, r4
 8010a90:	d1bf      	bne.n	8010a12 <forward_lite_upsample_bilinear_is16os16+0xd2>
 8010a92:	9b04      	ldr	r3, [sp, #16]
 8010a94:	9a07      	ldr	r2, [sp, #28]
 8010a96:	4413      	add	r3, r2
 8010a98:	9304      	str	r3, [sp, #16]
 8010a9a:	9b03      	ldr	r3, [sp, #12]
 8010a9c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	9303      	str	r3, [sp, #12]
 8010aa4:	d18a      	bne.n	80109bc <forward_lite_upsample_bilinear_is16os16+0x7c>
 8010aa6:	b00f      	add	sp, #60	@ 0x3c
 8010aa8:	ecbd 8b0a 	vpop	{d8-d12}
 8010aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab0:	eddf aa02 	vldr	s21, [pc, #8]	@ 8010abc <forward_lite_upsample_bilinear_is16os16+0x17c>
 8010ab4:	eeb0 9a6a 	vmov.f32	s18, s21
 8010ab8:	e75f      	b.n	801097a <forward_lite_upsample_bilinear_is16os16+0x3a>
 8010aba:	bf00      	nop
 8010abc:	00000000 	.word	0x00000000

08010ac0 <forward_lite_upsample_bilinear_iu16ou16>:
 8010ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac4:	ed2d 8b0a 	vpush	{d8-d12}
 8010ac8:	b08f      	sub	sp, #60	@ 0x3c
 8010aca:	4683      	mov	fp, r0
 8010acc:	9104      	str	r1, [sp, #16]
 8010ace:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8010ad2:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8010ad6:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 8010ada:	9206      	str	r2, [sp, #24]
 8010adc:	2900      	cmp	r1, #0
 8010ade:	f000 80a7 	beq.w	8010c30 <forward_lite_upsample_bilinear_iu16ou16+0x170>
 8010ae2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010ae6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010aea:	ee70 aae7 	vsub.f32	s21, s1, s15
 8010aee:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010af2:	ee6a aa87 	vmul.f32	s21, s21, s14
 8010af6:	ee27 9a87 	vmul.f32	s18, s15, s14
 8010afa:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010afe:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010b00:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8010b04:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8010b08:	2a00      	cmp	r2, #0
 8010b0a:	f000 808c 	beq.w	8010c26 <forward_lite_upsample_bilinear_iu16ou16+0x166>
 8010b0e:	3b01      	subs	r3, #1
 8010b10:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8010b14:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8010c3c <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 8010b18:	ee07 3a90 	vmov	s15, r3
 8010b1c:	9b06      	ldr	r3, [sp, #24]
 8010b1e:	1e5a      	subs	r2, r3, #1
 8010b20:	fb0a f303 	mul.w	r3, sl, r3
 8010b24:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8010b28:	ee0c 2a90 	vmov	s25, r2
 8010b2c:	9305      	str	r3, [sp, #20]
 8010b2e:	2300      	movs	r3, #0
 8010b30:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8010b34:	9303      	str	r3, [sp, #12]
 8010b36:	fb06 f308 	mul.w	r3, r6, r8
 8010b3a:	9307      	str	r3, [sp, #28]
 8010b3c:	eddd 7a03 	vldr	s15, [sp, #12]
 8010b40:	9b05      	ldr	r3, [sp, #20]
 8010b42:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8010b46:	ee7b baea 	vsub.f32	s23, s23, s21
 8010b4a:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8010b4e:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8010b52:	fecb baca 	vminnm.f32	s23, s23, s20
 8010b56:	eef4 ba4a 	vcmp.f32	s23, s20
 8010b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b5e:	bf14      	ite	ne
 8010b60:	4699      	movne	r9, r3
 8010b62:	f04f 0900 	moveq.w	r9, #0
 8010b66:	f1b8 0f00 	cmp.w	r8, #0
 8010b6a:	d056      	beq.n	8010c1a <forward_lite_upsample_bilinear_iu16ou16+0x15a>
 8010b6c:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8010b70:	9b06      	ldr	r3, [sp, #24]
 8010b72:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8010b76:	9d04      	ldr	r5, [sp, #16]
 8010b78:	2400      	movs	r4, #0
 8010b7a:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8010b7e:	ee17 7a10 	vmov	r7, s14
 8010b82:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8010b86:	fb03 f707 	mul.w	r7, r3, r7
 8010b8a:	ee7b bae7 	vsub.f32	s23, s23, s15
 8010b8e:	ee3c ca27 	vadd.f32	s24, s24, s15
 8010b92:	ee07 4a90 	vmov	s15, r4
 8010b96:	ab0a      	add	r3, sp, #40	@ 0x28
 8010b98:	3401      	adds	r4, #1
 8010b9a:	4629      	mov	r1, r5
 8010b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ba0:	9300      	str	r3, [sp, #0]
 8010ba2:	4652      	mov	r2, sl
 8010ba4:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8010ba8:	4435      	add	r5, r6
 8010baa:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010bae:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8010bb2:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8010bb6:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8010bba:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8010bbe:	eef4 7a6c 	vcmp.f32	s15, s25
 8010bc2:	ee38 7a67 	vsub.f32	s14, s16, s15
 8010bc6:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8010bca:	ee16 0a90 	vmov	r0, s13
 8010bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd2:	4438      	add	r0, r7
 8010bd4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010bd8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010bdc:	bf14      	ite	ne
 8010bde:	4653      	movne	r3, sl
 8010be0:	2300      	moveq	r3, #0
 8010be2:	fb06 b000 	mla	r0, r6, r0, fp
 8010be6:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8010bea:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8010bee:	9308      	str	r3, [sp, #32]
 8010bf0:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8010bf4:	ab08      	add	r3, sp, #32
 8010bf6:	ee67 7aab 	vmul.f32	s15, s15, s23
 8010bfa:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8010bfe:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8010c02:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8010c06:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8010c0a:	f000 ffdb 	bl	8011bc4 <lite_bilinear_iu16ou16_kernel>
 8010c0e:	45a0      	cmp	r8, r4
 8010c10:	d1bf      	bne.n	8010b92 <forward_lite_upsample_bilinear_iu16ou16+0xd2>
 8010c12:	9b04      	ldr	r3, [sp, #16]
 8010c14:	9a07      	ldr	r2, [sp, #28]
 8010c16:	4413      	add	r3, r2
 8010c18:	9304      	str	r3, [sp, #16]
 8010c1a:	9b03      	ldr	r3, [sp, #12]
 8010c1c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010c1e:	3301      	adds	r3, #1
 8010c20:	429a      	cmp	r2, r3
 8010c22:	9303      	str	r3, [sp, #12]
 8010c24:	d18a      	bne.n	8010b3c <forward_lite_upsample_bilinear_iu16ou16+0x7c>
 8010c26:	b00f      	add	sp, #60	@ 0x3c
 8010c28:	ecbd 8b0a 	vpop	{d8-d12}
 8010c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c30:	eddf aa02 	vldr	s21, [pc, #8]	@ 8010c3c <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 8010c34:	eeb0 9a6a 	vmov.f32	s18, s21
 8010c38:	e75f      	b.n	8010afa <forward_lite_upsample_bilinear_iu16ou16+0x3a>
 8010c3a:	bf00      	nop
 8010c3c:	00000000 	.word	0x00000000

08010c40 <forward_lite_dense_if32of32wf32>:
 8010c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c44:	ed2d 8b0c 	vpush	{d8-d13}
 8010c48:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8010c4c:	6801      	ldr	r1, [r0, #0]
 8010c4e:	b083      	sub	sp, #12
 8010c50:	fb02 f303 	mul.w	r3, r2, r3
 8010c54:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8010c58:	9100      	str	r1, [sp, #0]
 8010c5a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010c5e:	4299      	cmp	r1, r3
 8010c60:	9301      	str	r3, [sp, #4]
 8010c62:	f080 811c 	bcs.w	8010e9e <forward_lite_dense_if32of32wf32+0x25e>
 8010c66:	4607      	mov	r7, r0
 8010c68:	6904      	ldr	r4, [r0, #16]
 8010c6a:	0096      	lsls	r6, r2, #2
 8010c6c:	9b00      	ldr	r3, [sp, #0]
 8010c6e:	68bd      	ldr	r5, [r7, #8]
 8010c70:	eb03 0e06 	add.w	lr, r3, r6
 8010c74:	461e      	mov	r6, r3
 8010c76:	459e      	cmp	lr, r3
 8010c78:	f240 8103 	bls.w	8010e82 <forward_lite_dense_if32of32wf32+0x242>
 8010c7c:	f1a4 0c10 	sub.w	ip, r4, #16
 8010c80:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8010c84:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8010c88:	f10c 0c01 	add.w	ip, ip, #1
 8010c8c:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8010c90:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8010c94:	2c0f      	cmp	r4, #15
 8010c96:	f240 8107 	bls.w	8010ea8 <forward_lite_dense_if32of32wf32+0x268>
 8010c9a:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 8010c9e:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8010ca2:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8010ef8 <forward_lite_dense_if32of32wf32+0x2b8>
 8010ca6:	4621      	mov	r1, r4
 8010ca8:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8010cac:	3910      	subs	r1, #16
 8010cae:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8010cb2:	3340      	adds	r3, #64	@ 0x40
 8010cb4:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8010cb8:	290f      	cmp	r1, #15
 8010cba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010cbe:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8010cc2:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8010cc6:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8010cca:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8010cce:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010cd2:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8010cd6:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 8010cda:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 8010cde:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 8010ce2:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 8010ce6:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 8010cea:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010cee:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 8010cf2:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 8010cf6:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 8010cfa:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 8010cfe:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 8010d02:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 8010d06:	eeed 7a26 	vfma.f32	s15, s26, s13
 8010d0a:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 8010d0e:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8010d12:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 8010d16:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8010d1a:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 8010d1e:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8010d22:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8010d26:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8010d2a:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8010d2e:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8010d32:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8010d36:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8010d3a:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8010d3e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8010d42:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8010d46:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8010d4a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8010d4e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8010d52:	eee8 7a88 	vfma.f32	s15, s17, s16
 8010d56:	eee0 7a20 	vfma.f32	s15, s0, s1
 8010d5a:	eee1 7a21 	vfma.f32	s15, s2, s3
 8010d5e:	eee2 7a22 	vfma.f32	s15, s4, s5
 8010d62:	eee3 7a23 	vfma.f32	s15, s6, s7
 8010d66:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010d6a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010d6e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010d72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010d76:	d897      	bhi.n	8010ca8 <forward_lite_dense_if32of32wf32+0x68>
 8010d78:	eb05 020b 	add.w	r2, r5, fp
 8010d7c:	f004 010f 	and.w	r1, r4, #15
 8010d80:	4663      	mov	r3, ip
 8010d82:	2903      	cmp	r1, #3
 8010d84:	d95f      	bls.n	8010e46 <forward_lite_dense_if32of32wf32+0x206>
 8010d86:	edd2 6a01 	vldr	s13, [r2, #4]
 8010d8a:	1f08      	subs	r0, r1, #4
 8010d8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8010d90:	ed93 4a00 	vldr	s8, [r3]
 8010d94:	2803      	cmp	r0, #3
 8010d96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010d9a:	edd2 4a00 	vldr	s9, [r2]
 8010d9e:	ed93 5a02 	vldr	s10, [r3, #8]
 8010da2:	edd2 5a02 	vldr	s11, [r2, #8]
 8010da6:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010daa:	ed93 6a03 	vldr	s12, [r3, #12]
 8010dae:	edd2 6a03 	vldr	s13, [r2, #12]
 8010db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010db6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010dba:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010dbe:	eeb0 7a67 	vmov.f32	s14, s15
 8010dc2:	d938      	bls.n	8010e36 <forward_lite_dense_if32of32wf32+0x1f6>
 8010dc4:	edd2 6a05 	vldr	s13, [r2, #20]
 8010dc8:	f1a1 0a08 	sub.w	sl, r1, #8
 8010dcc:	edd3 7a05 	vldr	s15, [r3, #20]
 8010dd0:	ed93 4a04 	vldr	s8, [r3, #16]
 8010dd4:	f1ba 0f03 	cmp.w	sl, #3
 8010dd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010ddc:	edd2 4a04 	vldr	s9, [r2, #16]
 8010de0:	ed93 5a06 	vldr	s10, [r3, #24]
 8010de4:	edd2 5a06 	vldr	s11, [r2, #24]
 8010de8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010dec:	ed93 6a07 	vldr	s12, [r3, #28]
 8010df0:	edd2 6a07 	vldr	s13, [r2, #28]
 8010df4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010df8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010dfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010e00:	d919      	bls.n	8010e36 <forward_lite_dense_if32of32wf32+0x1f6>
 8010e02:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8010e06:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8010e0a:	ed92 4a08 	vldr	s8, [r2, #32]
 8010e0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010e12:	edd3 4a08 	vldr	s9, [r3, #32]
 8010e16:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8010e1a:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8010e1e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010e22:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8010e26:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8010e2a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010e2e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010e32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010e36:	0880      	lsrs	r0, r0, #2
 8010e38:	f001 0103 	and.w	r1, r1, #3
 8010e3c:	3001      	adds	r0, #1
 8010e3e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8010e42:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8010e46:	b1a9      	cbz	r1, 8010e74 <forward_lite_dense_if32of32wf32+0x234>
 8010e48:	edd3 6a00 	vldr	s13, [r3]
 8010e4c:	3901      	subs	r1, #1
 8010e4e:	edd2 7a00 	vldr	s15, [r2]
 8010e52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e56:	d00d      	beq.n	8010e74 <forward_lite_dense_if32of32wf32+0x234>
 8010e58:	edd3 6a01 	vldr	s13, [r3, #4]
 8010e5c:	2901      	cmp	r1, #1
 8010e5e:	edd2 7a01 	vldr	s15, [r2, #4]
 8010e62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e66:	d005      	beq.n	8010e74 <forward_lite_dense_if32of32wf32+0x234>
 8010e68:	edd2 6a02 	vldr	s13, [r2, #8]
 8010e6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8010e70:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e74:	eca6 7a01 	vstmia	r6!, {s14}
 8010e78:	45b6      	cmp	lr, r6
 8010e7a:	444d      	add	r5, r9
 8010e7c:	f63f af0a 	bhi.w	8010c94 <forward_lite_dense_if32of32wf32+0x54>
 8010e80:	697a      	ldr	r2, [r7, #20]
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	b9b3      	cbnz	r3, 8010eb4 <forward_lite_dense_if32of32wf32+0x274>
 8010e86:	9b00      	ldr	r3, [sp, #0]
 8010e88:	0096      	lsls	r6, r2, #2
 8010e8a:	9901      	ldr	r1, [sp, #4]
 8010e8c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010e90:	693c      	ldr	r4, [r7, #16]
 8010e92:	4299      	cmp	r1, r3
 8010e94:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8010e98:	9300      	str	r3, [sp, #0]
 8010e9a:	f63f aee7 	bhi.w	8010c6c <forward_lite_dense_if32of32wf32+0x2c>
 8010e9e:	b003      	add	sp, #12
 8010ea0:	ecbd 8b0c 	vpop	{d8-d13}
 8010ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea8:	4621      	mov	r1, r4
 8010eaa:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8010ef8 <forward_lite_dense_if32of32wf32+0x2b8>
 8010eae:	462a      	mov	r2, r5
 8010eb0:	4643      	mov	r3, r8
 8010eb2:	e766      	b.n	8010d82 <forward_lite_dense_if32of32wf32+0x142>
 8010eb4:	2a00      	cmp	r2, #0
 8010eb6:	d0e6      	beq.n	8010e86 <forward_lite_dense_if32of32wf32+0x246>
 8010eb8:	9a00      	ldr	r2, [sp, #0]
 8010eba:	ed93 7a00 	vldr	s14, [r3]
 8010ebe:	edd2 7a00 	vldr	s15, [r2]
 8010ec2:	4613      	mov	r3, r2
 8010ec4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010ec8:	edc2 7a00 	vstr	s15, [r2]
 8010ecc:	697a      	ldr	r2, [r7, #20]
 8010ece:	2a01      	cmp	r2, #1
 8010ed0:	d9d9      	bls.n	8010e86 <forward_lite_dense_if32of32wf32+0x246>
 8010ed2:	1d19      	adds	r1, r3, #4
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	68fa      	ldr	r2, [r7, #12]
 8010ed8:	ed91 7a00 	vldr	s14, [r1]
 8010edc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010ee0:	3301      	adds	r3, #1
 8010ee2:	edd2 7a00 	vldr	s15, [r2]
 8010ee6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010eea:	ece1 7a01 	vstmia	r1!, {s15}
 8010eee:	697a      	ldr	r2, [r7, #20]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d8f0      	bhi.n	8010ed6 <forward_lite_dense_if32of32wf32+0x296>
 8010ef4:	e7c7      	b.n	8010e86 <forward_lite_dense_if32of32wf32+0x246>
 8010ef6:	bf00      	nop
 8010ef8:	00000000 	.word	0x00000000

08010efc <forward_lite_dense_if32of32wf32_lut4>:
 8010efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f00:	b08d      	sub	sp, #52	@ 0x34
 8010f02:	4605      	mov	r5, r0
 8010f04:	460c      	mov	r4, r1
 8010f06:	9005      	str	r0, [sp, #20]
 8010f08:	4618      	mov	r0, r3
 8010f0a:	920a      	str	r2, [sp, #40]	@ 0x28
 8010f0c:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8010f0e:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8010f12:	fb02 f303 	mul.w	r3, r2, r3
 8010f16:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010f1a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8010f1c:	9308      	str	r3, [sp, #32]
 8010f1e:	b126      	cbz	r6, 8010f2a <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8010f20:	2240      	movs	r2, #64	@ 0x40
 8010f22:	4631      	mov	r1, r6
 8010f24:	f000 fbe0 	bl	80116e8 <st_int8_copy>
 8010f28:	4630      	mov	r0, r6
 8010f2a:	9b05      	ldr	r3, [sp, #20]
 8010f2c:	9a08      	ldr	r2, [sp, #32]
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	f080 80f7 	bcs.w	8011122 <forward_lite_dense_if32of32wf32_lut4+0x226>
 8010f34:	08eb      	lsrs	r3, r5, #3
 8010f36:	f005 0101 	and.w	r1, r5, #1
 8010f3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010f3c:	f025 0801 	bic.w	r8, r5, #1
 8010f40:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8010f44:	9301      	str	r3, [sp, #4]
 8010f46:	009b      	lsls	r3, r3, #2
 8010f48:	9102      	str	r1, [sp, #8]
 8010f4a:	0092      	lsls	r2, r2, #2
 8010f4c:	f104 0b20 	add.w	fp, r4, #32
 8010f50:	00a9      	lsls	r1, r5, #2
 8010f52:	9304      	str	r3, [sp, #16]
 8010f54:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8010f58:	9b05      	ldr	r3, [sp, #20]
 8010f5a:	9207      	str	r2, [sp, #28]
 8010f5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8010f5e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010f60:	9a07      	ldr	r2, [sp, #28]
 8010f62:	eb03 0902 	add.w	r9, r3, r2
 8010f66:	f1ab 0220 	sub.w	r2, fp, #32
 8010f6a:	4599      	cmp	r9, r3
 8010f6c:	9206      	str	r2, [sp, #24]
 8010f6e:	f240 80db 	bls.w	8011128 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8010f72:	469e      	mov	lr, r3
 8010f74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010f76:	f108 33ff 	add.w	r3, r8, #4294967295
 8010f7a:	9303      	str	r3, [sp, #12]
 8010f7c:	9b01      	ldr	r3, [sp, #4]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	f000 80b4 	beq.w	80110ec <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8010f84:	9b04      	ldr	r3, [sp, #16]
 8010f86:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 801114c <forward_lite_dense_if32of32wf32_lut4+0x250>
 8010f8a:	18d4      	adds	r4, r2, r3
 8010f8c:	465b      	mov	r3, fp
 8010f8e:	7816      	ldrb	r6, [r2, #0]
 8010f90:	3204      	adds	r2, #4
 8010f92:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8010f96:	3320      	adds	r3, #32
 8010f98:	f006 070f 	and.w	r7, r6, #15
 8010f9c:	0936      	lsrs	r6, r6, #4
 8010f9e:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 8010fa2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8010fa6:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 8010faa:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8010fae:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 8010fb2:	edd7 7a00 	vldr	s15, [r7]
 8010fb6:	ed96 3a00 	vldr	s6, [r6]
 8010fba:	092e      	lsrs	r6, r5, #4
 8010fbc:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8010fc0:	f005 050f 	and.w	r5, r5, #15
 8010fc4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8010fc8:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8010fcc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8010fd0:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 8010fd4:	eee3 7a04 	vfma.f32	s15, s6, s8
 8010fd8:	ed96 3a00 	vldr	s6, [r6]
 8010fdc:	ed95 4a00 	vldr	s8, [r5]
 8010fe0:	090d      	lsrs	r5, r1, #4
 8010fe2:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 8010fe6:	f001 010f 	and.w	r1, r1, #15
 8010fea:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8010fee:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 8010ff2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010ff6:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 8010ffa:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 8010ffe:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011002:	eee4 7a05 	vfma.f32	s15, s8, s10
 8011006:	ed95 4a00 	vldr	s8, [r5]
 801100a:	ed91 5a00 	vldr	s10, [r1]
 801100e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011012:	42a2      	cmp	r2, r4
 8011014:	ea4f 1511 	mov.w	r5, r1, lsr #4
 8011018:	f001 010f 	and.w	r1, r1, #15
 801101c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011020:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8011024:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011028:	eee5 7a06 	vfma.f32	s15, s10, s12
 801102c:	ed95 5a00 	vldr	s10, [r5]
 8011030:	ed91 6a00 	vldr	s12, [r1]
 8011034:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011038:	eee6 7a26 	vfma.f32	s15, s12, s13
 801103c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011040:	d1a5      	bne.n	8010f8e <forward_lite_dense_if32of32wf32_lut4+0x92>
 8011042:	4656      	mov	r6, sl
 8011044:	4546      	cmp	r6, r8
 8011046:	d257      	bcs.n	80110f8 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8011048:	9b03      	ldr	r3, [sp, #12]
 801104a:	f106 0208 	add.w	r2, r6, #8
 801104e:	1e61      	subs	r1, r4, #1
 8011050:	1b9d      	subs	r5, r3, r6
 8011052:	08ef      	lsrs	r7, r5, #3
 8011054:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 8011058:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801105c:	3208      	adds	r2, #8
 801105e:	ed52 5a03 	vldr	s11, [r2, #-12]
 8011062:	f003 0c0f 	and.w	ip, r3, #15
 8011066:	091b      	lsrs	r3, r3, #4
 8011068:	ed52 6a04 	vldr	s13, [r2, #-16]
 801106c:	42a9      	cmp	r1, r5
 801106e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8011072:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011076:	eddc 7a00 	vldr	s15, [ip]
 801107a:	ed93 6a00 	vldr	s12, [r3]
 801107e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011082:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011086:	ee37 7a27 	vadd.f32	s14, s14, s15
 801108a:	d1e5      	bne.n	8011058 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 801108c:	3701      	adds	r7, #1
 801108e:	19e2      	adds	r2, r4, r7
 8011090:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8011094:	9b02      	ldr	r3, [sp, #8]
 8011096:	b30b      	cbz	r3, 80110dc <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 8011098:	f812 3b01 	ldrb.w	r3, [r2], #1
 801109c:	edd6 7a00 	vldr	s15, [r6]
 80110a0:	091b      	lsrs	r3, r3, #4
 80110a2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80110a6:	edd3 6a00 	vldr	s13, [r3]
 80110aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80110ae:	ecae 7a01 	vstmia	lr!, {s14}
 80110b2:	45f1      	cmp	r9, lr
 80110b4:	f63f af62 	bhi.w	8010f7c <forward_lite_dense_if32of32wf32_lut4+0x80>
 80110b8:	9b05      	ldr	r3, [sp, #20]
 80110ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80110bc:	1899      	adds	r1, r3, r2
 80110be:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80110c0:	b9e3      	cbnz	r3, 80110fc <forward_lite_dense_if32of32wf32_lut4+0x200>
 80110c2:	9b08      	ldr	r3, [sp, #32]
 80110c4:	428b      	cmp	r3, r1
 80110c6:	d92c      	bls.n	8011122 <forward_lite_dense_if32of32wf32_lut4+0x226>
 80110c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110ca:	4498      	add	r8, r3
 80110cc:	449a      	add	sl, r3
 80110ce:	449b      	add	fp, r3
 80110d0:	9b05      	ldr	r3, [sp, #20]
 80110d2:	4599      	cmp	r9, r3
 80110d4:	d92a      	bls.n	801112c <forward_lite_dense_if32of32wf32_lut4+0x230>
 80110d6:	460b      	mov	r3, r1
 80110d8:	9105      	str	r1, [sp, #20]
 80110da:	e741      	b.n	8010f60 <forward_lite_dense_if32of32wf32_lut4+0x64>
 80110dc:	ecae 7a01 	vstmia	lr!, {s14}
 80110e0:	45f1      	cmp	r9, lr
 80110e2:	d9e9      	bls.n	80110b8 <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 80110e4:	9b01      	ldr	r3, [sp, #4]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	f47f af4c 	bne.w	8010f84 <forward_lite_dense_if32of32wf32_lut4+0x88>
 80110ec:	9e06      	ldr	r6, [sp, #24]
 80110ee:	4614      	mov	r4, r2
 80110f0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 801114c <forward_lite_dense_if32of32wf32_lut4+0x250>
 80110f4:	4546      	cmp	r6, r8
 80110f6:	d3a7      	bcc.n	8011048 <forward_lite_dense_if32of32wf32_lut4+0x14c>
 80110f8:	4622      	mov	r2, r4
 80110fa:	e7cb      	b.n	8011094 <forward_lite_dense_if32of32wf32_lut4+0x198>
 80110fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d0df      	beq.n	80110c2 <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 8011102:	9b07      	ldr	r3, [sp, #28]
 8011104:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011106:	1acb      	subs	r3, r1, r3
 8011108:	edd3 7a00 	vldr	s15, [r3]
 801110c:	ecb2 7a01 	vldmia	r2!, {s14}
 8011110:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011114:	ece3 7a01 	vstmia	r3!, {s15}
 8011118:	428b      	cmp	r3, r1
 801111a:	d1f5      	bne.n	8011108 <forward_lite_dense_if32of32wf32_lut4+0x20c>
 801111c:	9b08      	ldr	r3, [sp, #32]
 801111e:	428b      	cmp	r3, r1
 8011120:	d8d2      	bhi.n	80110c8 <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 8011122:	b00d      	add	sp, #52	@ 0x34
 8011124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011128:	4619      	mov	r1, r3
 801112a:	e7c8      	b.n	80110be <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 801112c:	9b07      	ldr	r3, [sp, #28]
 801112e:	1acb      	subs	r3, r1, r3
 8011130:	461a      	mov	r2, r3
 8011132:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8011134:	ed92 7a00 	vldr	s14, [r2]
 8011138:	ecf0 7a01 	vldmia	r0!, {s15}
 801113c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011140:	ece2 7a01 	vstmia	r2!, {s15}
 8011144:	428a      	cmp	r2, r1
 8011146:	d1f5      	bne.n	8011134 <forward_lite_dense_if32of32wf32_lut4+0x238>
 8011148:	e7f2      	b.n	8011130 <forward_lite_dense_if32of32wf32_lut4+0x234>
 801114a:	bf00      	nop
 801114c:	00000000 	.word	0x00000000

08011150 <forward_lite_dense_if32of32wf32_lut8>:
 8011150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011154:	b091      	sub	sp, #68	@ 0x44
 8011156:	4699      	mov	r9, r3
 8011158:	468b      	mov	fp, r1
 801115a:	920e      	str	r2, [sp, #56]	@ 0x38
 801115c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801115e:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 8011162:	9003      	str	r0, [sp, #12]
 8011164:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 8011168:	fb02 f303 	mul.w	r3, r2, r3
 801116c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011170:	930c      	str	r3, [sp, #48]	@ 0x30
 8011172:	b134      	cbz	r4, 8011182 <forward_lite_dense_if32of32wf32_lut8+0x32>
 8011174:	4648      	mov	r0, r9
 8011176:	46a1      	mov	r9, r4
 8011178:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801117c:	4621      	mov	r1, r4
 801117e:	f000 fab3 	bl	80116e8 <st_int8_copy>
 8011182:	9b03      	ldr	r3, [sp, #12]
 8011184:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011186:	4293      	cmp	r3, r2
 8011188:	f080 8084 	bcs.w	8011294 <forward_lite_dense_if32of32wf32_lut8+0x144>
 801118c:	4bb7      	ldr	r3, [pc, #732]	@ (801146c <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 801118e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011190:	4443      	add	r3, r8
 8011192:	9d03      	ldr	r5, [sp, #12]
 8011194:	0092      	lsls	r2, r2, #2
 8011196:	eddf 3ab6 	vldr	s7, [pc, #728]	@ 8011470 <forward_lite_dense_if32of32wf32_lut8+0x320>
 801119a:	009b      	lsls	r3, r3, #2
 801119c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801119e:	f103 0120 	add.w	r1, r3, #32
 80111a2:	930d      	str	r3, [sp, #52]	@ 0x34
 80111a4:	445b      	add	r3, fp
 80111a6:	920f      	str	r2, [sp, #60]	@ 0x3c
 80111a8:	9105      	str	r1, [sp, #20]
 80111aa:	9300      	str	r3, [sp, #0]
 80111ac:	eb0b 0301 	add.w	r3, fp, r1
 80111b0:	469a      	mov	sl, r3
 80111b2:	469e      	mov	lr, r3
 80111b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111b6:	eb05 0c03 	add.w	ip, r5, r3
 80111ba:	45ac      	cmp	ip, r5
 80111bc:	d952      	bls.n	8011264 <forward_lite_dense_if32of32wf32_lut8+0x114>
 80111be:	9800      	ldr	r0, [sp, #0]
 80111c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80111c2:	f100 011f 	add.w	r1, r0, #31
 80111c6:	eba0 020b 	sub.w	r2, r0, fp
 80111ca:	445b      	add	r3, fp
 80111cc:	9101      	str	r1, [sp, #4]
 80111ce:	eba1 010b 	sub.w	r1, r1, fp
 80111d2:	0952      	lsrs	r2, r2, #5
 80111d4:	9306      	str	r3, [sp, #24]
 80111d6:	0889      	lsrs	r1, r1, #2
 80111d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80111da:	3101      	adds	r1, #1
 80111dc:	9102      	str	r1, [sp, #8]
 80111de:	1c51      	adds	r1, r2, #1
 80111e0:	00d2      	lsls	r2, r2, #3
 80111e2:	3210      	adds	r2, #16
 80111e4:	920a      	str	r2, [sp, #40]	@ 0x28
 80111e6:	00ca      	lsls	r2, r1, #3
 80111e8:	9208      	str	r2, [sp, #32]
 80111ea:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 80111ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80111f0:	1f02      	subs	r2, r0, #4
 80111f2:	9204      	str	r2, [sp, #16]
 80111f4:	f10b 0204 	add.w	r2, fp, #4
 80111f8:	9207      	str	r2, [sp, #28]
 80111fa:	f1b8 0f07 	cmp.w	r8, #7
 80111fe:	d84c      	bhi.n	801129a <forward_lite_dense_if32of32wf32_lut8+0x14a>
 8011200:	45d3      	cmp	fp, sl
 8011202:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8011470 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8011206:	d20f      	bcs.n	8011228 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8011208:	4659      	mov	r1, fp
 801120a:	4618      	mov	r0, r3
 801120c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011210:	ecf1 7a01 	vldmia	r1!, {s15}
 8011214:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8011218:	4551      	cmp	r1, sl
 801121a:	edd2 6a00 	vldr	s13, [r2]
 801121e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011222:	d3f3      	bcc.n	801120c <forward_lite_dense_if32of32wf32_lut8+0xbc>
 8011224:	9a02      	ldr	r2, [sp, #8]
 8011226:	4413      	add	r3, r2
 8011228:	eca5 7a01 	vstmia	r5!, {s14}
 801122c:	45ac      	cmp	ip, r5
 801122e:	d8e4      	bhi.n	80111fa <forward_lite_dense_if32of32wf32_lut8+0xaa>
 8011230:	9b03      	ldr	r3, [sp, #12]
 8011232:	46f3      	mov	fp, lr
 8011234:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011236:	1899      	adds	r1, r3, r2
 8011238:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801123a:	b9c3      	cbnz	r3, 801126e <forward_lite_dense_if32of32wf32_lut8+0x11e>
 801123c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801123e:	428b      	cmp	r3, r1
 8011240:	d928      	bls.n	8011294 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8011242:	9b00      	ldr	r3, [sp, #0]
 8011244:	9a05      	ldr	r2, [sp, #20]
 8011246:	4413      	add	r3, r2
 8011248:	4492      	add	sl, r2
 801124a:	9300      	str	r3, [sp, #0]
 801124c:	9b03      	ldr	r3, [sp, #12]
 801124e:	459c      	cmp	ip, r3
 8011250:	f240 821e 	bls.w	8011690 <forward_lite_dense_if32of32wf32_lut8+0x540>
 8011254:	460d      	mov	r5, r1
 8011256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011258:	4496      	add	lr, r2
 801125a:	9103      	str	r1, [sp, #12]
 801125c:	eb05 0c03 	add.w	ip, r5, r3
 8011260:	45ac      	cmp	ip, r5
 8011262:	d8ac      	bhi.n	80111be <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8011264:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011266:	4629      	mov	r1, r5
 8011268:	46f3      	mov	fp, lr
 801126a:	2b00      	cmp	r3, #0
 801126c:	d0e6      	beq.n	801123c <forward_lite_dense_if32of32wf32_lut8+0xec>
 801126e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011270:	2b00      	cmp	r3, #0
 8011272:	d0e3      	beq.n	801123c <forward_lite_dense_if32of32wf32_lut8+0xec>
 8011274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011276:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011278:	1acb      	subs	r3, r1, r3
 801127a:	edd3 7a00 	vldr	s15, [r3]
 801127e:	ecb2 7a01 	vldmia	r2!, {s14}
 8011282:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011286:	ece3 7a01 	vstmia	r3!, {s15}
 801128a:	428b      	cmp	r3, r1
 801128c:	d1f5      	bne.n	801127a <forward_lite_dense_if32of32wf32_lut8+0x12a>
 801128e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011290:	428b      	cmp	r3, r1
 8011292:	d8d6      	bhi.n	8011242 <forward_lite_dense_if32of32wf32_lut8+0xf2>
 8011294:	b011      	add	sp, #68	@ 0x44
 8011296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801129a:	f003 0203 	and.w	r2, r3, #3
 801129e:	2a02      	cmp	r2, #2
 80112a0:	f000 81ee 	beq.w	8011680 <forward_lite_dense_if32of32wf32_lut8+0x530>
 80112a4:	2a03      	cmp	r2, #3
 80112a6:	f000 80e5 	beq.w	8011474 <forward_lite_dense_if32of32wf32_lut8+0x324>
 80112aa:	2a01      	cmp	r2, #1
 80112ac:	f000 81d2 	beq.w	8011654 <forward_lite_dense_if32of32wf32_lut8+0x504>
 80112b0:	9a06      	ldr	r2, [sp, #24]
 80112b2:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8011470 <forward_lite_dense_if32of32wf32_lut8+0x320>
 80112b6:	4593      	cmp	fp, r2
 80112b8:	f200 81e8 	bhi.w	801168c <forward_lite_dense_if32of32wf32_lut8+0x53c>
 80112bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80112be:	f103 0208 	add.w	r2, r3, #8
 80112c2:	f10b 0120 	add.w	r1, fp, #32
 80112c6:	18c4      	adds	r4, r0, r3
 80112c8:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 80112cc:	3208      	adds	r2, #8
 80112ce:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 80112d2:	3120      	adds	r1, #32
 80112d4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80112d8:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 80112dc:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 80112e0:	edd0 7a00 	vldr	s15, [r0]
 80112e4:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 80112e8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80112ec:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 80112f0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80112f4:	ed11 5a0c 	vldr	s10, [r1, #-48]	@ 0xffffffd0
 80112f8:	ed51 5a0b 	vldr	s11, [r1, #-44]	@ 0xffffffd4
 80112fc:	edd0 2a00 	vldr	s5, [r0]
 8011300:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8011304:	eee2 7a83 	vfma.f32	s15, s5, s6
 8011308:	ed11 6a0a 	vldr	s12, [r1, #-40]	@ 0xffffffd8
 801130c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8011310:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 8011314:	ed90 3a00 	vldr	s6, [r0]
 8011318:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 801131c:	eee3 7a04 	vfma.f32	s15, s6, s8
 8011320:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8011324:	ed90 4a00 	vldr	s8, [r0]
 8011328:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 801132c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8011330:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011334:	edd0 4a00 	vldr	s9, [r0]
 8011338:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 801133c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8011340:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011344:	ed90 5a00 	vldr	s10, [r0]
 8011348:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 801134c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8011350:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011354:	edd0 5a00 	vldr	s11, [r0]
 8011358:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 801135c:	42a2      	cmp	r2, r4
 801135e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8011362:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011366:	ed90 6a00 	vldr	s12, [r0]
 801136a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801136e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011372:	d1a9      	bne.n	80112c8 <forward_lite_dense_if32of32wf32_lut8+0x178>
 8011374:	9a08      	ldr	r2, [sp, #32]
 8011376:	4413      	add	r3, r2
 8011378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801137a:	4572      	cmp	r2, lr
 801137c:	f4bf af54 	bcs.w	8011228 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8011380:	7819      	ldrb	r1, [r3, #0]
 8011382:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011386:	edd1 7a00 	vldr	s15, [r1]
 801138a:	4611      	mov	r1, r2
 801138c:	ecf1 6a01 	vldmia	r1!, {s13}
 8011390:	458a      	cmp	sl, r1
 8011392:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011396:	d963      	bls.n	8011460 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8011398:	7859      	ldrb	r1, [r3, #1]
 801139a:	edd2 6a01 	vldr	s13, [r2, #4]
 801139e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80113a2:	edd1 7a00 	vldr	s15, [r1]
 80113a6:	f102 0108 	add.w	r1, r2, #8
 80113aa:	458a      	cmp	sl, r1
 80113ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80113b0:	d956      	bls.n	8011460 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80113b2:	7899      	ldrb	r1, [r3, #2]
 80113b4:	edd2 6a02 	vldr	s13, [r2, #8]
 80113b8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80113bc:	edd1 7a00 	vldr	s15, [r1]
 80113c0:	f102 010c 	add.w	r1, r2, #12
 80113c4:	458a      	cmp	sl, r1
 80113c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80113ca:	d949      	bls.n	8011460 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80113cc:	78d9      	ldrb	r1, [r3, #3]
 80113ce:	edd2 6a03 	vldr	s13, [r2, #12]
 80113d2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80113d6:	edd1 7a00 	vldr	s15, [r1]
 80113da:	f102 0110 	add.w	r1, r2, #16
 80113de:	458a      	cmp	sl, r1
 80113e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80113e4:	d93c      	bls.n	8011460 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80113e6:	7919      	ldrb	r1, [r3, #4]
 80113e8:	edd2 6a04 	vldr	s13, [r2, #16]
 80113ec:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80113f0:	edd1 7a00 	vldr	s15, [r1]
 80113f4:	f102 0114 	add.w	r1, r2, #20
 80113f8:	458a      	cmp	sl, r1
 80113fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80113fe:	d92f      	bls.n	8011460 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8011400:	7959      	ldrb	r1, [r3, #5]
 8011402:	edd2 6a05 	vldr	s13, [r2, #20]
 8011406:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801140a:	edd1 7a00 	vldr	s15, [r1]
 801140e:	f102 0118 	add.w	r1, r2, #24
 8011412:	458a      	cmp	sl, r1
 8011414:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011418:	d922      	bls.n	8011460 <forward_lite_dense_if32of32wf32_lut8+0x310>
 801141a:	7999      	ldrb	r1, [r3, #6]
 801141c:	edd2 6a06 	vldr	s13, [r2, #24]
 8011420:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011424:	edd1 7a00 	vldr	s15, [r1]
 8011428:	f102 011c 	add.w	r1, r2, #28
 801142c:	458a      	cmp	sl, r1
 801142e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011432:	d915      	bls.n	8011460 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8011434:	79d9      	ldrb	r1, [r3, #7]
 8011436:	edd2 6a07 	vldr	s13, [r2, #28]
 801143a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801143e:	edd1 7a00 	vldr	s15, [r1]
 8011442:	f102 0120 	add.w	r1, r2, #32
 8011446:	458a      	cmp	sl, r1
 8011448:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801144c:	d908      	bls.n	8011460 <forward_lite_dense_if32of32wf32_lut8+0x310>
 801144e:	7a19      	ldrb	r1, [r3, #8]
 8011450:	edd2 7a08 	vldr	s15, [r2, #32]
 8011454:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011458:	edd1 6a00 	vldr	s13, [r1]
 801145c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011460:	9901      	ldr	r1, [sp, #4]
 8011462:	1a8a      	subs	r2, r1, r2
 8011464:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 8011468:	1c53      	adds	r3, r2, #1
 801146a:	e6dd      	b.n	8011228 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 801146c:	3ffffff8 	.word	0x3ffffff8
 8011470:	00000000 	.word	0x00000000
 8011474:	eeb0 7a63 	vmov.f32	s14, s7
 8011478:	465a      	mov	r2, fp
 801147a:	461f      	mov	r7, r3
 801147c:	4610      	mov	r0, r2
 801147e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011482:	ecf0 7a01 	vldmia	r0!, {s15}
 8011486:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801148a:	edd1 6a00 	vldr	s13, [r1]
 801148e:	9900      	ldr	r1, [sp, #0]
 8011490:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011494:	4288      	cmp	r0, r1
 8011496:	f200 80f7 	bhi.w	8011688 <forward_lite_dense_if32of32wf32_lut8+0x538>
 801149a:	9904      	ldr	r1, [sp, #16]
 801149c:	f103 0411 	add.w	r4, r3, #17
 80114a0:	3309      	adds	r3, #9
 80114a2:	1a8e      	subs	r6, r1, r2
 80114a4:	3224      	adds	r2, #36	@ 0x24
 80114a6:	0976      	lsrs	r6, r6, #5
 80114a8:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80114ac:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 80114b0:	3308      	adds	r3, #8
 80114b2:	ed52 2a07 	vldr	s5, [r2, #-28]	@ 0xffffffe4
 80114b6:	3220      	adds	r2, #32
 80114b8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80114bc:	ed12 3a10 	vldr	s6, [r2, #-64]	@ 0xffffffc0
 80114c0:	ed12 4a0e 	vldr	s8, [r2, #-56]	@ 0xffffffc8
 80114c4:	edd1 7a00 	vldr	s15, [r1]
 80114c8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80114cc:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80114d0:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 80114d4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80114d8:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 80114dc:	ed52 5a0b 	vldr	s11, [r2, #-44]	@ 0xffffffd4
 80114e0:	edd1 2a00 	vldr	s5, [r1]
 80114e4:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 80114e8:	eee2 7a83 	vfma.f32	s15, s5, s6
 80114ec:	ed12 6a0a 	vldr	s12, [r2, #-40]	@ 0xffffffd8
 80114f0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80114f4:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 80114f8:	ed91 3a00 	vldr	s6, [r1]
 80114fc:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8011500:	eee3 7a04 	vfma.f32	s15, s6, s8
 8011504:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011508:	ed91 4a00 	vldr	s8, [r1]
 801150c:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8011510:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011514:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011518:	edd1 4a00 	vldr	s9, [r1]
 801151c:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8011520:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011524:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011528:	ed91 5a00 	vldr	s10, [r1]
 801152c:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8011530:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011534:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011538:	edd1 5a00 	vldr	s11, [r1]
 801153c:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8011540:	42a3      	cmp	r3, r4
 8011542:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011546:	eee5 7a86 	vfma.f32	s15, s11, s12
 801154a:	ed91 6a00 	vldr	s12, [r1]
 801154e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011552:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011556:	d1a9      	bne.n	80114ac <forward_lite_dense_if32of32wf32_lut8+0x35c>
 8011558:	3601      	adds	r6, #1
 801155a:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 801155e:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8011562:	4550      	cmp	r0, sl
 8011564:	f4bf ae60 	bcs.w	8011228 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8011568:	781a      	ldrb	r2, [r3, #0]
 801156a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801156e:	edd2 7a00 	vldr	s15, [r2]
 8011572:	4602      	mov	r2, r0
 8011574:	ecf2 6a01 	vldmia	r2!, {s13}
 8011578:	4592      	cmp	sl, r2
 801157a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801157e:	d963      	bls.n	8011648 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8011580:	785a      	ldrb	r2, [r3, #1]
 8011582:	edd0 6a01 	vldr	s13, [r0, #4]
 8011586:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801158a:	edd2 7a00 	vldr	s15, [r2]
 801158e:	f100 0208 	add.w	r2, r0, #8
 8011592:	4592      	cmp	sl, r2
 8011594:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011598:	d956      	bls.n	8011648 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801159a:	789a      	ldrb	r2, [r3, #2]
 801159c:	edd0 6a02 	vldr	s13, [r0, #8]
 80115a0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80115a4:	edd2 7a00 	vldr	s15, [r2]
 80115a8:	f100 020c 	add.w	r2, r0, #12
 80115ac:	4592      	cmp	sl, r2
 80115ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115b2:	d949      	bls.n	8011648 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80115b4:	78da      	ldrb	r2, [r3, #3]
 80115b6:	edd0 6a03 	vldr	s13, [r0, #12]
 80115ba:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80115be:	edd2 7a00 	vldr	s15, [r2]
 80115c2:	f100 0210 	add.w	r2, r0, #16
 80115c6:	4592      	cmp	sl, r2
 80115c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115cc:	d93c      	bls.n	8011648 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80115ce:	791a      	ldrb	r2, [r3, #4]
 80115d0:	edd0 6a04 	vldr	s13, [r0, #16]
 80115d4:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80115d8:	edd2 7a00 	vldr	s15, [r2]
 80115dc:	f100 0214 	add.w	r2, r0, #20
 80115e0:	4592      	cmp	sl, r2
 80115e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115e6:	d92f      	bls.n	8011648 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80115e8:	795a      	ldrb	r2, [r3, #5]
 80115ea:	edd0 6a05 	vldr	s13, [r0, #20]
 80115ee:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80115f2:	edd2 7a00 	vldr	s15, [r2]
 80115f6:	f100 0218 	add.w	r2, r0, #24
 80115fa:	4596      	cmp	lr, r2
 80115fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011600:	d922      	bls.n	8011648 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8011602:	799a      	ldrb	r2, [r3, #6]
 8011604:	edd0 6a06 	vldr	s13, [r0, #24]
 8011608:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801160c:	edd2 7a00 	vldr	s15, [r2]
 8011610:	f100 021c 	add.w	r2, r0, #28
 8011614:	4596      	cmp	lr, r2
 8011616:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801161a:	d915      	bls.n	8011648 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801161c:	79da      	ldrb	r2, [r3, #7]
 801161e:	edd0 6a07 	vldr	s13, [r0, #28]
 8011622:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8011626:	edd2 7a00 	vldr	s15, [r2]
 801162a:	f100 0220 	add.w	r2, r0, #32
 801162e:	4596      	cmp	lr, r2
 8011630:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011634:	d908      	bls.n	8011648 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8011636:	7a1a      	ldrb	r2, [r3, #8]
 8011638:	edd0 7a08 	vldr	s15, [r0, #32]
 801163c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8011640:	edd2 6a00 	vldr	s13, [r2]
 8011644:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011648:	9a01      	ldr	r2, [sp, #4]
 801164a:	1a10      	subs	r0, r2, r0
 801164c:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8011650:	1c43      	adds	r3, r0, #1
 8011652:	e5e9      	b.n	8011228 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8011654:	f813 1b01 	ldrb.w	r1, [r3], #1
 8011658:	eddb 7a00 	vldr	s15, [fp]
 801165c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011660:	9a07      	ldr	r2, [sp, #28]
 8011662:	ed91 7a00 	vldr	s14, [r1]
 8011666:	ee27 7a27 	vmul.f32	s14, s14, s15
 801166a:	f813 1b01 	ldrb.w	r1, [r3], #1
 801166e:	ecf2 7a01 	vldmia	r2!, {s15}
 8011672:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011676:	edd1 6a00 	vldr	s13, [r1]
 801167a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801167e:	e6fc      	b.n	801147a <forward_lite_dense_if32of32wf32_lut8+0x32a>
 8011680:	eeb0 7a63 	vmov.f32	s14, s7
 8011684:	465a      	mov	r2, fp
 8011686:	e7f0      	b.n	801166a <forward_lite_dense_if32of32wf32_lut8+0x51a>
 8011688:	463b      	mov	r3, r7
 801168a:	e76a      	b.n	8011562 <forward_lite_dense_if32of32wf32_lut8+0x412>
 801168c:	465a      	mov	r2, fp
 801168e:	e674      	b.n	801137a <forward_lite_dense_if32of32wf32_lut8+0x22a>
 8011690:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011692:	1acb      	subs	r3, r1, r3
 8011694:	461a      	mov	r2, r3
 8011696:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8011698:	ed92 7a00 	vldr	s14, [r2]
 801169c:	ecf0 7a01 	vldmia	r0!, {s15}
 80116a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80116a4:	ece2 7a01 	vstmia	r2!, {s15}
 80116a8:	4291      	cmp	r1, r2
 80116aa:	d1f5      	bne.n	8011698 <forward_lite_dense_if32of32wf32_lut8+0x548>
 80116ac:	e7f2      	b.n	8011694 <forward_lite_dense_if32of32wf32_lut8+0x544>
 80116ae:	bf00      	nop

080116b0 <forward_lite_nl_relu_if32of32>:
 80116b0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80116b4:	4413      	add	r3, r2
 80116b6:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80116ba:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80116be:	4291      	cmp	r1, r2
 80116c0:	d80f      	bhi.n	80116e2 <forward_lite_nl_relu_if32of32+0x32>
 80116c2:	f10c 0104 	add.w	r1, ip, #4
 80116c6:	1d13      	adds	r3, r2, #4
 80116c8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80116e4 <forward_lite_nl_relu_if32of32+0x34>
 80116cc:	eba2 020c 	sub.w	r2, r2, ip
 80116d0:	4408      	add	r0, r1
 80116d2:	ed73 7a01 	vldmdb	r3!, {s15}
 80116d6:	4293      	cmp	r3, r2
 80116d8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80116dc:	ed60 7a01 	vstmdb	r0!, {s15}
 80116e0:	d1f7      	bne.n	80116d2 <forward_lite_nl_relu_if32of32+0x22>
 80116e2:	4770      	bx	lr
 80116e4:	00000000 	.word	0x00000000

080116e8 <st_int8_copy>:
 80116e8:	4288      	cmp	r0, r1
 80116ea:	d023      	beq.n	8011734 <st_int8_copy+0x4c>
 80116ec:	b312      	cbz	r2, 8011734 <st_int8_copy+0x4c>
 80116ee:	4288      	cmp	r0, r1
 80116f0:	eb00 0302 	add.w	r3, r0, r2
 80116f4:	d20b      	bcs.n	801170e <st_int8_copy+0x26>
 80116f6:	4299      	cmp	r1, r3
 80116f8:	d209      	bcs.n	801170e <st_int8_copy+0x26>
 80116fa:	4298      	cmp	r0, r3
 80116fc:	440a      	add	r2, r1
 80116fe:	d219      	bcs.n	8011734 <st_int8_copy+0x4c>
 8011700:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8011704:	4298      	cmp	r0, r3
 8011706:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801170a:	d1f9      	bne.n	8011700 <st_int8_copy+0x18>
 801170c:	4770      	bx	lr
 801170e:	2a03      	cmp	r2, #3
 8011710:	d811      	bhi.n	8011736 <st_int8_copy+0x4e>
 8011712:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011716:	f801 3b01 	strb.w	r3, [r1], #1
 801171a:	2a01      	cmp	r2, #1
 801171c:	d00a      	beq.n	8011734 <st_int8_copy+0x4c>
 801171e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011722:	f801 3b01 	strb.w	r3, [r1], #1
 8011726:	2a02      	cmp	r2, #2
 8011728:	d004      	beq.n	8011734 <st_int8_copy+0x4c>
 801172a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801172e:	f801 3b01 	strb.w	r3, [r1], #1
 8011732:	4770      	bx	lr
 8011734:	4770      	bx	lr
 8011736:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801173a:	f001 0403 	and.w	r4, r1, #3
 801173e:	f000 0e03 	and.w	lr, r0, #3
 8011742:	f1c4 0304 	rsb	r3, r4, #4
 8011746:	eba2 0c03 	sub.w	ip, r2, r3
 801174a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801174e:	f801 3b01 	strb.w	r3, [r1], #1
 8011752:	2c03      	cmp	r4, #3
 8011754:	f1c4 0202 	rsb	r2, r4, #2
 8011758:	d00e      	beq.n	8011778 <st_int8_copy+0x90>
 801175a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801175e:	f801 3b01 	strb.w	r3, [r1], #1
 8011762:	2a00      	cmp	r2, #0
 8011764:	dd08      	ble.n	8011778 <st_int8_copy+0x90>
 8011766:	f810 3b01 	ldrb.w	r3, [r0], #1
 801176a:	f801 3b01 	strb.w	r3, [r1], #1
 801176e:	b91c      	cbnz	r4, 8011778 <st_int8_copy+0x90>
 8011770:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011774:	f801 3b01 	strb.w	r3, [r1], #1
 8011778:	4574      	cmp	r4, lr
 801177a:	d02b      	beq.n	80117d4 <st_int8_copy+0xec>
 801177c:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8011780:	1e5a      	subs	r2, r3, #1
 8011782:	b153      	cbz	r3, 801179a <st_int8_copy+0xb2>
 8011784:	f850 3b04 	ldr.w	r3, [r0], #4
 8011788:	f850 4b04 	ldr.w	r4, [r0], #4
 801178c:	f850 5b04 	ldr.w	r5, [r0], #4
 8011790:	f850 6b04 	ldr.w	r6, [r0], #4
 8011794:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8011796:	3a01      	subs	r2, #1
 8011798:	d2f4      	bcs.n	8011784 <st_int8_copy+0x9c>
 801179a:	f01c 0f08 	tst.w	ip, #8
 801179e:	d004      	beq.n	80117aa <st_int8_copy+0xc2>
 80117a0:	f850 3b04 	ldr.w	r3, [r0], #4
 80117a4:	f850 4b04 	ldr.w	r4, [r0], #4
 80117a8:	c118      	stmia	r1!, {r3, r4}
 80117aa:	f01c 0f04 	tst.w	ip, #4
 80117ae:	d003      	beq.n	80117b8 <st_int8_copy+0xd0>
 80117b0:	f850 3b04 	ldr.w	r3, [r0], #4
 80117b4:	f841 3b04 	str.w	r3, [r1], #4
 80117b8:	f01c 0f02 	tst.w	ip, #2
 80117bc:	d003      	beq.n	80117c6 <st_int8_copy+0xde>
 80117be:	f830 3b02 	ldrh.w	r3, [r0], #2
 80117c2:	f821 3b02 	strh.w	r3, [r1], #2
 80117c6:	f01c 0f01 	tst.w	ip, #1
 80117ca:	d001      	beq.n	80117d0 <st_int8_copy+0xe8>
 80117cc:	7803      	ldrb	r3, [r0, #0]
 80117ce:	700b      	strb	r3, [r1, #0]
 80117d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117d4:	ea4f 139c 	mov.w	r3, ip, lsr #6
 80117d8:	f103 39ff 	add.w	r9, r3, #4294967295
 80117dc:	b183      	cbz	r3, 8011800 <st_int8_copy+0x118>
 80117de:	4688      	mov	r8, r1
 80117e0:	4686      	mov	lr, r0
 80117e2:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80117e6:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80117ea:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80117ee:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80117f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80117f6:	4641      	mov	r1, r8
 80117f8:	4670      	mov	r0, lr
 80117fa:	f1b9 3fff 	cmp.w	r9, #4294967295
 80117fe:	d1ee      	bne.n	80117de <st_int8_copy+0xf6>
 8011800:	f01c 0f20 	tst.w	ip, #32
 8011804:	d007      	beq.n	8011816 <st_int8_copy+0x12e>
 8011806:	4688      	mov	r8, r1
 8011808:	4686      	mov	lr, r0
 801180a:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801180e:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8011812:	4641      	mov	r1, r8
 8011814:	4670      	mov	r0, lr
 8011816:	f01c 0f10 	tst.w	ip, #16
 801181a:	d001      	beq.n	8011820 <st_int8_copy+0x138>
 801181c:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 801181e:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8011820:	f01c 0f08 	tst.w	ip, #8
 8011824:	d0c1      	beq.n	80117aa <st_int8_copy+0xc2>
 8011826:	c818      	ldmia	r0!, {r3, r4}
 8011828:	c118      	stmia	r1!, {r3, r4}
 801182a:	e7be      	b.n	80117aa <st_int8_copy+0xc2>

0801182c <ai_array_to_buffer_fmt>:
 801182c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8011830:	2b02      	cmp	r3, #2
 8011832:	d055      	beq.n	80118e0 <ai_array_to_buffer_fmt+0xb4>
 8011834:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8011838:	4a2c      	ldr	r2, [pc, #176]	@ (80118ec <ai_array_to_buffer_fmt+0xc0>)
 801183a:	4293      	cmp	r3, r2
 801183c:	d010      	beq.n	8011860 <ai_array_to_buffer_fmt+0x34>
 801183e:	dc21      	bgt.n	8011884 <ai_array_to_buffer_fmt+0x58>
 8011840:	4a2b      	ldr	r2, [pc, #172]	@ (80118f0 <ai_array_to_buffer_fmt+0xc4>)
 8011842:	4293      	cmp	r3, r2
 8011844:	d00c      	beq.n	8011860 <ai_array_to_buffer_fmt+0x34>
 8011846:	dd0f      	ble.n	8011868 <ai_array_to_buffer_fmt+0x3c>
 8011848:	4a2a      	ldr	r2, [pc, #168]	@ (80118f4 <ai_array_to_buffer_fmt+0xc8>)
 801184a:	4293      	cmp	r3, r2
 801184c:	d008      	beq.n	8011860 <ai_array_to_buffer_fmt+0x34>
 801184e:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8011852:	4293      	cmp	r3, r2
 8011854:	d004      	beq.n	8011860 <ai_array_to_buffer_fmt+0x34>
 8011856:	4a28      	ldr	r2, [pc, #160]	@ (80118f8 <ai_array_to_buffer_fmt+0xcc>)
 8011858:	4293      	cmp	r3, r2
 801185a:	bf0c      	ite	eq
 801185c:	4613      	moveq	r3, r2
 801185e:	2340      	movne	r3, #64	@ 0x40
 8011860:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8011864:	4318      	orrs	r0, r3
 8011866:	4770      	bx	lr
 8011868:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801186c:	4293      	cmp	r3, r2
 801186e:	d0f7      	beq.n	8011860 <ai_array_to_buffer_fmt+0x34>
 8011870:	dd2c      	ble.n	80118cc <ai_array_to_buffer_fmt+0xa0>
 8011872:	4a22      	ldr	r2, [pc, #136]	@ (80118fc <ai_array_to_buffer_fmt+0xd0>)
 8011874:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8011878:	4293      	cmp	r3, r2
 801187a:	bf0c      	ite	eq
 801187c:	4613      	moveq	r3, r2
 801187e:	2340      	movne	r3, #64	@ 0x40
 8011880:	4318      	orrs	r0, r3
 8011882:	4770      	bx	lr
 8011884:	4a1e      	ldr	r2, [pc, #120]	@ (8011900 <ai_array_to_buffer_fmt+0xd4>)
 8011886:	4293      	cmp	r3, r2
 8011888:	d0ea      	beq.n	8011860 <ai_array_to_buffer_fmt+0x34>
 801188a:	dd10      	ble.n	80118ae <ai_array_to_buffer_fmt+0x82>
 801188c:	4a1d      	ldr	r2, [pc, #116]	@ (8011904 <ai_array_to_buffer_fmt+0xd8>)
 801188e:	4293      	cmp	r3, r2
 8011890:	d0e6      	beq.n	8011860 <ai_array_to_buffer_fmt+0x34>
 8011892:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8011896:	4293      	cmp	r3, r2
 8011898:	d0e2      	beq.n	8011860 <ai_array_to_buffer_fmt+0x34>
 801189a:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 801189e:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80118a2:	4293      	cmp	r3, r2
 80118a4:	bf0c      	ite	eq
 80118a6:	4613      	moveq	r3, r2
 80118a8:	2340      	movne	r3, #64	@ 0x40
 80118aa:	4318      	orrs	r0, r3
 80118ac:	4770      	bx	lr
 80118ae:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 80118b2:	4293      	cmp	r3, r2
 80118b4:	d0d4      	beq.n	8011860 <ai_array_to_buffer_fmt+0x34>
 80118b6:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 80118ba:	4293      	cmp	r3, r2
 80118bc:	d0d0      	beq.n	8011860 <ai_array_to_buffer_fmt+0x34>
 80118be:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80118c2:	4293      	cmp	r3, r2
 80118c4:	bf0c      	ite	eq
 80118c6:	4613      	moveq	r3, r2
 80118c8:	2340      	movne	r3, #64	@ 0x40
 80118ca:	e7c9      	b.n	8011860 <ai_array_to_buffer_fmt+0x34>
 80118cc:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d0c5      	beq.n	8011860 <ai_array_to_buffer_fmt+0x34>
 80118d4:	3280      	adds	r2, #128	@ 0x80
 80118d6:	4293      	cmp	r3, r2
 80118d8:	bf0c      	ite	eq
 80118da:	4613      	moveq	r3, r2
 80118dc:	2340      	movne	r3, #64	@ 0x40
 80118de:	e7bf      	b.n	8011860 <ai_array_to_buffer_fmt+0x34>
 80118e0:	4b09      	ldr	r3, [pc, #36]	@ (8011908 <ai_array_to_buffer_fmt+0xdc>)
 80118e2:	4003      	ands	r3, r0
 80118e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80118e8:	e7ba      	b.n	8011860 <ai_array_to_buffer_fmt+0x34>
 80118ea:	bf00      	nop
 80118ec:	00821040 	.word	0x00821040
 80118f0:	00040840 	.word	0x00040840
 80118f4:	00041040 	.word	0x00041040
 80118f8:	0004084f 	.word	0x0004084f
 80118fc:	00040447 	.word	0x00040447
 8011900:	00840447 	.word	0x00840447
 8011904:	0084084f 	.word	0x0084084f
 8011908:	00803fff 	.word	0x00803fff

0801190c <ai_array_get_byte_size>:
 801190c:	b321      	cbz	r1, 8011958 <ai_array_get_byte_size+0x4c>
 801190e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8011912:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 8011916:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 801191a:	fb03 f101 	mul.w	r1, r3, r1
 801191e:	b500      	push	{lr}
 8011920:	f3c0 4e43 	ubfx	lr, r0, #17, #4
 8011924:	3107      	adds	r1, #7
 8011926:	11c0      	asrs	r0, r0, #7
 8011928:	fa42 f20e 	asr.w	r2, r2, lr
 801192c:	f021 0107 	bic.w	r1, r1, #7
 8011930:	07d2      	lsls	r2, r2, #31
 8011932:	fa21 f10c 	lsr.w	r1, r1, ip
 8011936:	d505      	bpl.n	8011944 <ai_array_get_byte_size+0x38>
 8011938:	2300      	movs	r3, #0
 801193a:	3107      	adds	r1, #7
 801193c:	4419      	add	r1, r3
 801193e:	08c8      	lsrs	r0, r1, #3
 8011940:	f85d fb04 	ldr.w	pc, [sp], #4
 8011944:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8011948:	3107      	adds	r1, #7
 801194a:	fa40 f00c 	asr.w	r0, r0, ip
 801194e:	4083      	lsls	r3, r0
 8011950:	4419      	add	r1, r3
 8011952:	08c8      	lsrs	r0, r1, #3
 8011954:	f85d fb04 	ldr.w	pc, [sp], #4
 8011958:	4608      	mov	r0, r1
 801195a:	4770      	bx	lr

0801195c <ai_version_get>:
 801195c:	0212      	lsls	r2, r2, #8
 801195e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011962:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8011966:	4770      	bx	lr

08011968 <lite_bilinear_if32of32_kernel>:
 8011968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801196a:	9d05      	ldr	r5, [sp, #20]
 801196c:	b352      	cbz	r2, 80119c4 <lite_bilinear_if32of32_kernel+0x5c>
 801196e:	f04f 0c00 	mov.w	ip, #0
 8011972:	edd5 4a02 	vldr	s9, [r5, #8]
 8011976:	f10c 0c01 	add.w	ip, ip, #1
 801197a:	ed95 5a01 	vldr	s10, [r5, #4]
 801197e:	ed90 6a00 	vldr	s12, [r0]
 8011982:	4562      	cmp	r2, ip
 8011984:	edd5 5a00 	vldr	s11, [r5]
 8011988:	edd5 6a03 	vldr	s13, [r5, #12]
 801198c:	e9d3 4600 	ldrd	r4, r6, [r3]
 8011990:	eb00 0786 	add.w	r7, r0, r6, lsl #2
 8011994:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 8011998:	4434      	add	r4, r6
 801199a:	edd7 7a00 	vldr	s15, [r7]
 801199e:	ed9e 7a00 	vldr	s14, [lr]
 80119a2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80119a6:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80119aa:	f100 0004 	add.w	r0, r0, #4
 80119ae:	eee5 7a07 	vfma.f32	s15, s10, s14
 80119b2:	ed94 7a00 	vldr	s14, [r4]
 80119b6:	eee5 7a86 	vfma.f32	s15, s11, s12
 80119ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80119be:	ece1 7a01 	vstmia	r1!, {s15}
 80119c2:	d1d6      	bne.n	8011972 <lite_bilinear_if32of32_kernel+0xa>
 80119c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119c6:	bf00      	nop

080119c8 <lite_bilinear_is8os8_kernel>:
 80119c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80119cc:	9c07      	ldr	r4, [sp, #28]
 80119ce:	2a00      	cmp	r2, #0
 80119d0:	d04b      	beq.n	8011a6a <lite_bilinear_is8os8_kernel+0xa2>
 80119d2:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80119d6:	eb01 0e02 	add.w	lr, r1, r2
 80119da:	f100 3cff 	add.w	ip, r0, #4294967295
 80119de:	f1c0 0501 	rsb	r5, r0, #1
 80119e2:	685f      	ldr	r7, [r3, #4]
 80119e4:	eb05 060c 	add.w	r6, r5, ip
 80119e8:	681a      	ldr	r2, [r3, #0]
 80119ea:	eb00 0807 	add.w	r8, r0, r7
 80119ee:	edd4 3a02 	vldr	s7, [r4, #8]
 80119f2:	4402      	add	r2, r0
 80119f4:	ed94 4a01 	vldr	s8, [r4, #4]
 80119f8:	f918 8006 	ldrsb.w	r8, [r8, r6]
 80119fc:	f91c 9f01 	ldrsb.w	r9, [ip, #1]!
 8011a00:	ee07 8a90 	vmov	s15, r8
 8011a04:	f912 8006 	ldrsb.w	r8, [r2, r6]
 8011a08:	ee06 9a90 	vmov	s13, r9
 8011a0c:	443a      	add	r2, r7
 8011a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a12:	ee06 8a10 	vmov	s12, r8
 8011a16:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011a1a:	edd4 4a00 	vldr	s9, [r4]
 8011a1e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011a22:	5792      	ldrsb	r2, [r2, r6]
 8011a24:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011a28:	ed94 5a03 	vldr	s10, [r4, #12]
 8011a2c:	ee07 2a10 	vmov	s14, r2
 8011a30:	eee4 7a06 	vfma.f32	s15, s8, s12
 8011a34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011a38:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8011a3c:	eee5 7a07 	vfma.f32	s15, s10, s14
 8011a40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011a44:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8011a48:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8011a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a50:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011a54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a58:	dd09      	ble.n	8011a6e <lite_bilinear_is8os8_kernel+0xa6>
 8011a5a:	ee17 2a10 	vmov	r2, s14
 8011a5e:	f302 0207 	ssat	r2, #8, r2
 8011a62:	f801 2b01 	strb.w	r2, [r1], #1
 8011a66:	4571      	cmp	r1, lr
 8011a68:	d1bb      	bne.n	80119e2 <lite_bilinear_is8os8_kernel+0x1a>
 8011a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a6e:	ee17 2a90 	vmov	r2, s15
 8011a72:	f302 0207 	ssat	r2, #8, r2
 8011a76:	f801 2b01 	strb.w	r2, [r1], #1
 8011a7a:	4571      	cmp	r1, lr
 8011a7c:	d1b1      	bne.n	80119e2 <lite_bilinear_is8os8_kernel+0x1a>
 8011a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a82:	bf00      	nop

08011a84 <lite_bilinear_iu8ou8_kernel>:
 8011a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a88:	9c07      	ldr	r4, [sp, #28]
 8011a8a:	2a00      	cmp	r2, #0
 8011a8c:	d042      	beq.n	8011b14 <lite_bilinear_iu8ou8_kernel+0x90>
 8011a8e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8011a92:	eb01 0e02 	add.w	lr, r1, r2
 8011a96:	f100 3cff 	add.w	ip, r0, #4294967295
 8011a9a:	f1c0 0501 	rsb	r5, r0, #1
 8011a9e:	eb05 060c 	add.w	r6, r5, ip
 8011aa2:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8011aa6:	eef0 7a44 	vmov.f32	s15, s8
 8011aaa:	edd4 6a00 	vldr	s13, [r4]
 8011aae:	ee07 2a10 	vmov	s14, r2
 8011ab2:	681a      	ldr	r2, [r3, #0]
 8011ab4:	685f      	ldr	r7, [r3, #4]
 8011ab6:	4402      	add	r2, r0
 8011ab8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011abc:	eb00 0807 	add.w	r8, r0, r7
 8011ac0:	edd4 4a01 	vldr	s9, [r4, #4]
 8011ac4:	f812 9006 	ldrb.w	r9, [r2, r6]
 8011ac8:	443a      	add	r2, r7
 8011aca:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011ace:	f818 8006 	ldrb.w	r8, [r8, r6]
 8011ad2:	ee06 9a10 	vmov	s12, r9
 8011ad6:	ed94 5a02 	vldr	s10, [r4, #8]
 8011ada:	ee06 8a90 	vmov	s13, r8
 8011ade:	5d92      	ldrb	r2, [r2, r6]
 8011ae0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011ae4:	edd4 5a03 	vldr	s11, [r4, #12]
 8011ae8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011aec:	ee07 2a10 	vmov	s14, r2
 8011af0:	eee4 7a86 	vfma.f32	s15, s9, s12
 8011af4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011af8:	eee5 7a26 	vfma.f32	s15, s10, s13
 8011afc:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011b00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b04:	ee17 2a90 	vmov	r2, s15
 8011b08:	f382 0208 	usat	r2, #8, r2
 8011b0c:	f801 2b01 	strb.w	r2, [r1], #1
 8011b10:	4571      	cmp	r1, lr
 8011b12:	d1c4      	bne.n	8011a9e <lite_bilinear_iu8ou8_kernel+0x1a>
 8011b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011b18 <lite_bilinear_is16os16_kernel>:
 8011b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b1c:	9d07      	ldr	r5, [sp, #28]
 8011b1e:	2a00      	cmp	r2, #0
 8011b20:	d04e      	beq.n	8011bc0 <lite_bilinear_is16os16_kernel+0xa8>
 8011b22:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8011b26:	f1a0 0e02 	sub.w	lr, r0, #2
 8011b2a:	f04f 0c00 	mov.w	ip, #0
 8011b2e:	ed95 7a02 	vldr	s14, [r5, #8]
 8011b32:	ed95 4a01 	vldr	s8, [r5, #4]
 8011b36:	f93e 9f02 	ldrsh.w	r9, [lr, #2]!
 8011b3a:	edd5 4a00 	vldr	s9, [r5]
 8011b3e:	ee06 9a90 	vmov	s13, r9
 8011b42:	ed95 5a03 	vldr	s10, [r5, #12]
 8011b46:	e9d3 4600 	ldrd	r4, r6, [r3]
 8011b4a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011b4e:	eb06 080c 	add.w	r8, r6, ip
 8011b52:	eb04 070c 	add.w	r7, r4, ip
 8011b56:	4434      	add	r4, r6
 8011b58:	f930 6018 	ldrsh.w	r6, [r0, r8, lsl #1]
 8011b5c:	4464      	add	r4, ip
 8011b5e:	ee07 6a90 	vmov	s15, r6
 8011b62:	f930 6017 	ldrsh.w	r6, [r0, r7, lsl #1]
 8011b66:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 8011b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b6e:	ee06 6a10 	vmov	s12, r6
 8011b72:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b7a:	ee07 4a10 	vmov	s14, r4
 8011b7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011b82:	eee4 7a06 	vfma.f32	s15, s8, s12
 8011b86:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8011b8a:	eee5 7a07 	vfma.f32	s15, s10, s14
 8011b8e:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8011b92:	ee77 6ae5 	vsub.f32	s13, s15, s11
 8011b96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011b9a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011b9e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8011ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba6:	bfcc      	ite	gt
 8011ba8:	ee17 4a10 	vmovgt	r4, s14
 8011bac:	ee16 4a90 	vmovle	r4, s13
 8011bb0:	f304 040f 	ssat	r4, #16, r4
 8011bb4:	f10c 0c01 	add.w	ip, ip, #1
 8011bb8:	f821 4b02 	strh.w	r4, [r1], #2
 8011bbc:	4562      	cmp	r2, ip
 8011bbe:	d1b6      	bne.n	8011b2e <lite_bilinear_is16os16_kernel+0x16>
 8011bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011bc4 <lite_bilinear_iu16ou16_kernel>:
 8011bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bc8:	9d06      	ldr	r5, [sp, #24]
 8011bca:	2a00      	cmp	r2, #0
 8011bcc:	d042      	beq.n	8011c54 <lite_bilinear_iu16ou16_kernel+0x90>
 8011bce:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8011bd2:	1e86      	subs	r6, r0, #2
 8011bd4:	f04f 0e00 	mov.w	lr, #0
 8011bd8:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 8011bdc:	eef0 7a44 	vmov.f32	s15, s8
 8011be0:	edd5 6a00 	vldr	s13, [r5]
 8011be4:	ee07 4a10 	vmov	s14, r4
 8011be8:	681c      	ldr	r4, [r3, #0]
 8011bea:	685f      	ldr	r7, [r3, #4]
 8011bec:	eb04 080e 	add.w	r8, r4, lr
 8011bf0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011bf4:	eb07 0c0e 	add.w	ip, r7, lr
 8011bf8:	edd5 4a01 	vldr	s9, [r5, #4]
 8011bfc:	f830 8018 	ldrh.w	r8, [r0, r8, lsl #1]
 8011c00:	443c      	add	r4, r7
 8011c02:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011c06:	f830 701c 	ldrh.w	r7, [r0, ip, lsl #1]
 8011c0a:	ee06 8a10 	vmov	s12, r8
 8011c0e:	4474      	add	r4, lr
 8011c10:	ee06 7a90 	vmov	s13, r7
 8011c14:	ed95 5a02 	vldr	s10, [r5, #8]
 8011c18:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011c1c:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 8011c20:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011c24:	edd5 5a03 	vldr	s11, [r5, #12]
 8011c28:	ee07 4a10 	vmov	s14, r4
 8011c2c:	eee4 7a86 	vfma.f32	s15, s9, s12
 8011c30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011c34:	eee5 7a26 	vfma.f32	s15, s10, s13
 8011c38:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c40:	ee17 ca90 	vmov	ip, s15
 8011c44:	f38c 0c10 	usat	ip, #16, ip
 8011c48:	f10e 0e01 	add.w	lr, lr, #1
 8011c4c:	f821 cb02 	strh.w	ip, [r1], #2
 8011c50:	4572      	cmp	r2, lr
 8011c52:	d1c1      	bne.n	8011bd8 <lite_bilinear_iu16ou16_kernel+0x14>
 8011c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011c58 <malloc>:
 8011c58:	4b02      	ldr	r3, [pc, #8]	@ (8011c64 <malloc+0xc>)
 8011c5a:	4601      	mov	r1, r0
 8011c5c:	6818      	ldr	r0, [r3, #0]
 8011c5e:	f000 b825 	b.w	8011cac <_malloc_r>
 8011c62:	bf00      	nop
 8011c64:	20000818 	.word	0x20000818

08011c68 <sbrk_aligned>:
 8011c68:	b570      	push	{r4, r5, r6, lr}
 8011c6a:	4e0f      	ldr	r6, [pc, #60]	@ (8011ca8 <sbrk_aligned+0x40>)
 8011c6c:	460c      	mov	r4, r1
 8011c6e:	6831      	ldr	r1, [r6, #0]
 8011c70:	4605      	mov	r5, r0
 8011c72:	b911      	cbnz	r1, 8011c7a <sbrk_aligned+0x12>
 8011c74:	f000 ff48 	bl	8012b08 <_sbrk_r>
 8011c78:	6030      	str	r0, [r6, #0]
 8011c7a:	4621      	mov	r1, r4
 8011c7c:	4628      	mov	r0, r5
 8011c7e:	f000 ff43 	bl	8012b08 <_sbrk_r>
 8011c82:	1c43      	adds	r3, r0, #1
 8011c84:	d103      	bne.n	8011c8e <sbrk_aligned+0x26>
 8011c86:	f04f 34ff 	mov.w	r4, #4294967295
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	bd70      	pop	{r4, r5, r6, pc}
 8011c8e:	1cc4      	adds	r4, r0, #3
 8011c90:	f024 0403 	bic.w	r4, r4, #3
 8011c94:	42a0      	cmp	r0, r4
 8011c96:	d0f8      	beq.n	8011c8a <sbrk_aligned+0x22>
 8011c98:	1a21      	subs	r1, r4, r0
 8011c9a:	4628      	mov	r0, r5
 8011c9c:	f000 ff34 	bl	8012b08 <_sbrk_r>
 8011ca0:	3001      	adds	r0, #1
 8011ca2:	d1f2      	bne.n	8011c8a <sbrk_aligned+0x22>
 8011ca4:	e7ef      	b.n	8011c86 <sbrk_aligned+0x1e>
 8011ca6:	bf00      	nop
 8011ca8:	20005eb4 	.word	0x20005eb4

08011cac <_malloc_r>:
 8011cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cb0:	1ccd      	adds	r5, r1, #3
 8011cb2:	f025 0503 	bic.w	r5, r5, #3
 8011cb6:	3508      	adds	r5, #8
 8011cb8:	2d0c      	cmp	r5, #12
 8011cba:	bf38      	it	cc
 8011cbc:	250c      	movcc	r5, #12
 8011cbe:	2d00      	cmp	r5, #0
 8011cc0:	4606      	mov	r6, r0
 8011cc2:	db01      	blt.n	8011cc8 <_malloc_r+0x1c>
 8011cc4:	42a9      	cmp	r1, r5
 8011cc6:	d904      	bls.n	8011cd2 <_malloc_r+0x26>
 8011cc8:	230c      	movs	r3, #12
 8011cca:	6033      	str	r3, [r6, #0]
 8011ccc:	2000      	movs	r0, #0
 8011cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011da8 <_malloc_r+0xfc>
 8011cd6:	f000 f869 	bl	8011dac <__malloc_lock>
 8011cda:	f8d8 3000 	ldr.w	r3, [r8]
 8011cde:	461c      	mov	r4, r3
 8011ce0:	bb44      	cbnz	r4, 8011d34 <_malloc_r+0x88>
 8011ce2:	4629      	mov	r1, r5
 8011ce4:	4630      	mov	r0, r6
 8011ce6:	f7ff ffbf 	bl	8011c68 <sbrk_aligned>
 8011cea:	1c43      	adds	r3, r0, #1
 8011cec:	4604      	mov	r4, r0
 8011cee:	d158      	bne.n	8011da2 <_malloc_r+0xf6>
 8011cf0:	f8d8 4000 	ldr.w	r4, [r8]
 8011cf4:	4627      	mov	r7, r4
 8011cf6:	2f00      	cmp	r7, #0
 8011cf8:	d143      	bne.n	8011d82 <_malloc_r+0xd6>
 8011cfa:	2c00      	cmp	r4, #0
 8011cfc:	d04b      	beq.n	8011d96 <_malloc_r+0xea>
 8011cfe:	6823      	ldr	r3, [r4, #0]
 8011d00:	4639      	mov	r1, r7
 8011d02:	4630      	mov	r0, r6
 8011d04:	eb04 0903 	add.w	r9, r4, r3
 8011d08:	f000 fefe 	bl	8012b08 <_sbrk_r>
 8011d0c:	4581      	cmp	r9, r0
 8011d0e:	d142      	bne.n	8011d96 <_malloc_r+0xea>
 8011d10:	6821      	ldr	r1, [r4, #0]
 8011d12:	1a6d      	subs	r5, r5, r1
 8011d14:	4629      	mov	r1, r5
 8011d16:	4630      	mov	r0, r6
 8011d18:	f7ff ffa6 	bl	8011c68 <sbrk_aligned>
 8011d1c:	3001      	adds	r0, #1
 8011d1e:	d03a      	beq.n	8011d96 <_malloc_r+0xea>
 8011d20:	6823      	ldr	r3, [r4, #0]
 8011d22:	442b      	add	r3, r5
 8011d24:	6023      	str	r3, [r4, #0]
 8011d26:	f8d8 3000 	ldr.w	r3, [r8]
 8011d2a:	685a      	ldr	r2, [r3, #4]
 8011d2c:	bb62      	cbnz	r2, 8011d88 <_malloc_r+0xdc>
 8011d2e:	f8c8 7000 	str.w	r7, [r8]
 8011d32:	e00f      	b.n	8011d54 <_malloc_r+0xa8>
 8011d34:	6822      	ldr	r2, [r4, #0]
 8011d36:	1b52      	subs	r2, r2, r5
 8011d38:	d420      	bmi.n	8011d7c <_malloc_r+0xd0>
 8011d3a:	2a0b      	cmp	r2, #11
 8011d3c:	d917      	bls.n	8011d6e <_malloc_r+0xc2>
 8011d3e:	1961      	adds	r1, r4, r5
 8011d40:	42a3      	cmp	r3, r4
 8011d42:	6025      	str	r5, [r4, #0]
 8011d44:	bf18      	it	ne
 8011d46:	6059      	strne	r1, [r3, #4]
 8011d48:	6863      	ldr	r3, [r4, #4]
 8011d4a:	bf08      	it	eq
 8011d4c:	f8c8 1000 	streq.w	r1, [r8]
 8011d50:	5162      	str	r2, [r4, r5]
 8011d52:	604b      	str	r3, [r1, #4]
 8011d54:	4630      	mov	r0, r6
 8011d56:	f000 f82f 	bl	8011db8 <__malloc_unlock>
 8011d5a:	f104 000b 	add.w	r0, r4, #11
 8011d5e:	1d23      	adds	r3, r4, #4
 8011d60:	f020 0007 	bic.w	r0, r0, #7
 8011d64:	1ac2      	subs	r2, r0, r3
 8011d66:	bf1c      	itt	ne
 8011d68:	1a1b      	subne	r3, r3, r0
 8011d6a:	50a3      	strne	r3, [r4, r2]
 8011d6c:	e7af      	b.n	8011cce <_malloc_r+0x22>
 8011d6e:	6862      	ldr	r2, [r4, #4]
 8011d70:	42a3      	cmp	r3, r4
 8011d72:	bf0c      	ite	eq
 8011d74:	f8c8 2000 	streq.w	r2, [r8]
 8011d78:	605a      	strne	r2, [r3, #4]
 8011d7a:	e7eb      	b.n	8011d54 <_malloc_r+0xa8>
 8011d7c:	4623      	mov	r3, r4
 8011d7e:	6864      	ldr	r4, [r4, #4]
 8011d80:	e7ae      	b.n	8011ce0 <_malloc_r+0x34>
 8011d82:	463c      	mov	r4, r7
 8011d84:	687f      	ldr	r7, [r7, #4]
 8011d86:	e7b6      	b.n	8011cf6 <_malloc_r+0x4a>
 8011d88:	461a      	mov	r2, r3
 8011d8a:	685b      	ldr	r3, [r3, #4]
 8011d8c:	42a3      	cmp	r3, r4
 8011d8e:	d1fb      	bne.n	8011d88 <_malloc_r+0xdc>
 8011d90:	2300      	movs	r3, #0
 8011d92:	6053      	str	r3, [r2, #4]
 8011d94:	e7de      	b.n	8011d54 <_malloc_r+0xa8>
 8011d96:	230c      	movs	r3, #12
 8011d98:	6033      	str	r3, [r6, #0]
 8011d9a:	4630      	mov	r0, r6
 8011d9c:	f000 f80c 	bl	8011db8 <__malloc_unlock>
 8011da0:	e794      	b.n	8011ccc <_malloc_r+0x20>
 8011da2:	6005      	str	r5, [r0, #0]
 8011da4:	e7d6      	b.n	8011d54 <_malloc_r+0xa8>
 8011da6:	bf00      	nop
 8011da8:	20005eb8 	.word	0x20005eb8

08011dac <__malloc_lock>:
 8011dac:	4801      	ldr	r0, [pc, #4]	@ (8011db4 <__malloc_lock+0x8>)
 8011dae:	f000 bef8 	b.w	8012ba2 <__retarget_lock_acquire_recursive>
 8011db2:	bf00      	nop
 8011db4:	20005ffc 	.word	0x20005ffc

08011db8 <__malloc_unlock>:
 8011db8:	4801      	ldr	r0, [pc, #4]	@ (8011dc0 <__malloc_unlock+0x8>)
 8011dba:	f000 bef3 	b.w	8012ba4 <__retarget_lock_release_recursive>
 8011dbe:	bf00      	nop
 8011dc0:	20005ffc 	.word	0x20005ffc

08011dc4 <__cvt>:
 8011dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011dc8:	ec57 6b10 	vmov	r6, r7, d0
 8011dcc:	2f00      	cmp	r7, #0
 8011dce:	460c      	mov	r4, r1
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	463b      	mov	r3, r7
 8011dd4:	bfbb      	ittet	lt
 8011dd6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011dda:	461f      	movlt	r7, r3
 8011ddc:	2300      	movge	r3, #0
 8011dde:	232d      	movlt	r3, #45	@ 0x2d
 8011de0:	700b      	strb	r3, [r1, #0]
 8011de2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011de4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011de8:	4691      	mov	r9, r2
 8011dea:	f023 0820 	bic.w	r8, r3, #32
 8011dee:	bfbc      	itt	lt
 8011df0:	4632      	movlt	r2, r6
 8011df2:	4616      	movlt	r6, r2
 8011df4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011df8:	d005      	beq.n	8011e06 <__cvt+0x42>
 8011dfa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011dfe:	d100      	bne.n	8011e02 <__cvt+0x3e>
 8011e00:	3401      	adds	r4, #1
 8011e02:	2102      	movs	r1, #2
 8011e04:	e000      	b.n	8011e08 <__cvt+0x44>
 8011e06:	2103      	movs	r1, #3
 8011e08:	ab03      	add	r3, sp, #12
 8011e0a:	9301      	str	r3, [sp, #4]
 8011e0c:	ab02      	add	r3, sp, #8
 8011e0e:	9300      	str	r3, [sp, #0]
 8011e10:	ec47 6b10 	vmov	d0, r6, r7
 8011e14:	4653      	mov	r3, sl
 8011e16:	4622      	mov	r2, r4
 8011e18:	f000 ff5e 	bl	8012cd8 <_dtoa_r>
 8011e1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011e20:	4605      	mov	r5, r0
 8011e22:	d119      	bne.n	8011e58 <__cvt+0x94>
 8011e24:	f019 0f01 	tst.w	r9, #1
 8011e28:	d00e      	beq.n	8011e48 <__cvt+0x84>
 8011e2a:	eb00 0904 	add.w	r9, r0, r4
 8011e2e:	2200      	movs	r2, #0
 8011e30:	2300      	movs	r3, #0
 8011e32:	4630      	mov	r0, r6
 8011e34:	4639      	mov	r1, r7
 8011e36:	f7ee fe67 	bl	8000b08 <__aeabi_dcmpeq>
 8011e3a:	b108      	cbz	r0, 8011e40 <__cvt+0x7c>
 8011e3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8011e40:	2230      	movs	r2, #48	@ 0x30
 8011e42:	9b03      	ldr	r3, [sp, #12]
 8011e44:	454b      	cmp	r3, r9
 8011e46:	d31e      	bcc.n	8011e86 <__cvt+0xc2>
 8011e48:	9b03      	ldr	r3, [sp, #12]
 8011e4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e4c:	1b5b      	subs	r3, r3, r5
 8011e4e:	4628      	mov	r0, r5
 8011e50:	6013      	str	r3, [r2, #0]
 8011e52:	b004      	add	sp, #16
 8011e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011e5c:	eb00 0904 	add.w	r9, r0, r4
 8011e60:	d1e5      	bne.n	8011e2e <__cvt+0x6a>
 8011e62:	7803      	ldrb	r3, [r0, #0]
 8011e64:	2b30      	cmp	r3, #48	@ 0x30
 8011e66:	d10a      	bne.n	8011e7e <__cvt+0xba>
 8011e68:	2200      	movs	r2, #0
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	4630      	mov	r0, r6
 8011e6e:	4639      	mov	r1, r7
 8011e70:	f7ee fe4a 	bl	8000b08 <__aeabi_dcmpeq>
 8011e74:	b918      	cbnz	r0, 8011e7e <__cvt+0xba>
 8011e76:	f1c4 0401 	rsb	r4, r4, #1
 8011e7a:	f8ca 4000 	str.w	r4, [sl]
 8011e7e:	f8da 3000 	ldr.w	r3, [sl]
 8011e82:	4499      	add	r9, r3
 8011e84:	e7d3      	b.n	8011e2e <__cvt+0x6a>
 8011e86:	1c59      	adds	r1, r3, #1
 8011e88:	9103      	str	r1, [sp, #12]
 8011e8a:	701a      	strb	r2, [r3, #0]
 8011e8c:	e7d9      	b.n	8011e42 <__cvt+0x7e>

08011e8e <__exponent>:
 8011e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e90:	2900      	cmp	r1, #0
 8011e92:	bfba      	itte	lt
 8011e94:	4249      	neglt	r1, r1
 8011e96:	232d      	movlt	r3, #45	@ 0x2d
 8011e98:	232b      	movge	r3, #43	@ 0x2b
 8011e9a:	2909      	cmp	r1, #9
 8011e9c:	7002      	strb	r2, [r0, #0]
 8011e9e:	7043      	strb	r3, [r0, #1]
 8011ea0:	dd29      	ble.n	8011ef6 <__exponent+0x68>
 8011ea2:	f10d 0307 	add.w	r3, sp, #7
 8011ea6:	461d      	mov	r5, r3
 8011ea8:	270a      	movs	r7, #10
 8011eaa:	461a      	mov	r2, r3
 8011eac:	fbb1 f6f7 	udiv	r6, r1, r7
 8011eb0:	fb07 1416 	mls	r4, r7, r6, r1
 8011eb4:	3430      	adds	r4, #48	@ 0x30
 8011eb6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011eba:	460c      	mov	r4, r1
 8011ebc:	2c63      	cmp	r4, #99	@ 0x63
 8011ebe:	f103 33ff 	add.w	r3, r3, #4294967295
 8011ec2:	4631      	mov	r1, r6
 8011ec4:	dcf1      	bgt.n	8011eaa <__exponent+0x1c>
 8011ec6:	3130      	adds	r1, #48	@ 0x30
 8011ec8:	1e94      	subs	r4, r2, #2
 8011eca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011ece:	1c41      	adds	r1, r0, #1
 8011ed0:	4623      	mov	r3, r4
 8011ed2:	42ab      	cmp	r3, r5
 8011ed4:	d30a      	bcc.n	8011eec <__exponent+0x5e>
 8011ed6:	f10d 0309 	add.w	r3, sp, #9
 8011eda:	1a9b      	subs	r3, r3, r2
 8011edc:	42ac      	cmp	r4, r5
 8011ede:	bf88      	it	hi
 8011ee0:	2300      	movhi	r3, #0
 8011ee2:	3302      	adds	r3, #2
 8011ee4:	4403      	add	r3, r0
 8011ee6:	1a18      	subs	r0, r3, r0
 8011ee8:	b003      	add	sp, #12
 8011eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011eec:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011ef0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011ef4:	e7ed      	b.n	8011ed2 <__exponent+0x44>
 8011ef6:	2330      	movs	r3, #48	@ 0x30
 8011ef8:	3130      	adds	r1, #48	@ 0x30
 8011efa:	7083      	strb	r3, [r0, #2]
 8011efc:	70c1      	strb	r1, [r0, #3]
 8011efe:	1d03      	adds	r3, r0, #4
 8011f00:	e7f1      	b.n	8011ee6 <__exponent+0x58>
	...

08011f04 <_printf_float>:
 8011f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f08:	b08d      	sub	sp, #52	@ 0x34
 8011f0a:	460c      	mov	r4, r1
 8011f0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011f10:	4616      	mov	r6, r2
 8011f12:	461f      	mov	r7, r3
 8011f14:	4605      	mov	r5, r0
 8011f16:	f000 fdbf 	bl	8012a98 <_localeconv_r>
 8011f1a:	6803      	ldr	r3, [r0, #0]
 8011f1c:	9304      	str	r3, [sp, #16]
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7ee f9c6 	bl	80002b0 <strlen>
 8011f24:	2300      	movs	r3, #0
 8011f26:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f28:	f8d8 3000 	ldr.w	r3, [r8]
 8011f2c:	9005      	str	r0, [sp, #20]
 8011f2e:	3307      	adds	r3, #7
 8011f30:	f023 0307 	bic.w	r3, r3, #7
 8011f34:	f103 0208 	add.w	r2, r3, #8
 8011f38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011f3c:	f8d4 b000 	ldr.w	fp, [r4]
 8011f40:	f8c8 2000 	str.w	r2, [r8]
 8011f44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011f48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011f4c:	9307      	str	r3, [sp, #28]
 8011f4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8011f52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011f56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f5a:	4b9c      	ldr	r3, [pc, #624]	@ (80121cc <_printf_float+0x2c8>)
 8011f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f60:	f7ee fe04 	bl	8000b6c <__aeabi_dcmpun>
 8011f64:	bb70      	cbnz	r0, 8011fc4 <_printf_float+0xc0>
 8011f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f6a:	4b98      	ldr	r3, [pc, #608]	@ (80121cc <_printf_float+0x2c8>)
 8011f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f70:	f7ee fdde 	bl	8000b30 <__aeabi_dcmple>
 8011f74:	bb30      	cbnz	r0, 8011fc4 <_printf_float+0xc0>
 8011f76:	2200      	movs	r2, #0
 8011f78:	2300      	movs	r3, #0
 8011f7a:	4640      	mov	r0, r8
 8011f7c:	4649      	mov	r1, r9
 8011f7e:	f7ee fdcd 	bl	8000b1c <__aeabi_dcmplt>
 8011f82:	b110      	cbz	r0, 8011f8a <_printf_float+0x86>
 8011f84:	232d      	movs	r3, #45	@ 0x2d
 8011f86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f8a:	4a91      	ldr	r2, [pc, #580]	@ (80121d0 <_printf_float+0x2cc>)
 8011f8c:	4b91      	ldr	r3, [pc, #580]	@ (80121d4 <_printf_float+0x2d0>)
 8011f8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011f92:	bf94      	ite	ls
 8011f94:	4690      	movls	r8, r2
 8011f96:	4698      	movhi	r8, r3
 8011f98:	2303      	movs	r3, #3
 8011f9a:	6123      	str	r3, [r4, #16]
 8011f9c:	f02b 0304 	bic.w	r3, fp, #4
 8011fa0:	6023      	str	r3, [r4, #0]
 8011fa2:	f04f 0900 	mov.w	r9, #0
 8011fa6:	9700      	str	r7, [sp, #0]
 8011fa8:	4633      	mov	r3, r6
 8011faa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011fac:	4621      	mov	r1, r4
 8011fae:	4628      	mov	r0, r5
 8011fb0:	f000 f9d2 	bl	8012358 <_printf_common>
 8011fb4:	3001      	adds	r0, #1
 8011fb6:	f040 808d 	bne.w	80120d4 <_printf_float+0x1d0>
 8011fba:	f04f 30ff 	mov.w	r0, #4294967295
 8011fbe:	b00d      	add	sp, #52	@ 0x34
 8011fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fc4:	4642      	mov	r2, r8
 8011fc6:	464b      	mov	r3, r9
 8011fc8:	4640      	mov	r0, r8
 8011fca:	4649      	mov	r1, r9
 8011fcc:	f7ee fdce 	bl	8000b6c <__aeabi_dcmpun>
 8011fd0:	b140      	cbz	r0, 8011fe4 <_printf_float+0xe0>
 8011fd2:	464b      	mov	r3, r9
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	bfbc      	itt	lt
 8011fd8:	232d      	movlt	r3, #45	@ 0x2d
 8011fda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011fde:	4a7e      	ldr	r2, [pc, #504]	@ (80121d8 <_printf_float+0x2d4>)
 8011fe0:	4b7e      	ldr	r3, [pc, #504]	@ (80121dc <_printf_float+0x2d8>)
 8011fe2:	e7d4      	b.n	8011f8e <_printf_float+0x8a>
 8011fe4:	6863      	ldr	r3, [r4, #4]
 8011fe6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011fea:	9206      	str	r2, [sp, #24]
 8011fec:	1c5a      	adds	r2, r3, #1
 8011fee:	d13b      	bne.n	8012068 <_printf_float+0x164>
 8011ff0:	2306      	movs	r3, #6
 8011ff2:	6063      	str	r3, [r4, #4]
 8011ff4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	6022      	str	r2, [r4, #0]
 8011ffc:	9303      	str	r3, [sp, #12]
 8011ffe:	ab0a      	add	r3, sp, #40	@ 0x28
 8012000:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012004:	ab09      	add	r3, sp, #36	@ 0x24
 8012006:	9300      	str	r3, [sp, #0]
 8012008:	6861      	ldr	r1, [r4, #4]
 801200a:	ec49 8b10 	vmov	d0, r8, r9
 801200e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012012:	4628      	mov	r0, r5
 8012014:	f7ff fed6 	bl	8011dc4 <__cvt>
 8012018:	9b06      	ldr	r3, [sp, #24]
 801201a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801201c:	2b47      	cmp	r3, #71	@ 0x47
 801201e:	4680      	mov	r8, r0
 8012020:	d129      	bne.n	8012076 <_printf_float+0x172>
 8012022:	1cc8      	adds	r0, r1, #3
 8012024:	db02      	blt.n	801202c <_printf_float+0x128>
 8012026:	6863      	ldr	r3, [r4, #4]
 8012028:	4299      	cmp	r1, r3
 801202a:	dd41      	ble.n	80120b0 <_printf_float+0x1ac>
 801202c:	f1aa 0a02 	sub.w	sl, sl, #2
 8012030:	fa5f fa8a 	uxtb.w	sl, sl
 8012034:	3901      	subs	r1, #1
 8012036:	4652      	mov	r2, sl
 8012038:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801203c:	9109      	str	r1, [sp, #36]	@ 0x24
 801203e:	f7ff ff26 	bl	8011e8e <__exponent>
 8012042:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012044:	1813      	adds	r3, r2, r0
 8012046:	2a01      	cmp	r2, #1
 8012048:	4681      	mov	r9, r0
 801204a:	6123      	str	r3, [r4, #16]
 801204c:	dc02      	bgt.n	8012054 <_printf_float+0x150>
 801204e:	6822      	ldr	r2, [r4, #0]
 8012050:	07d2      	lsls	r2, r2, #31
 8012052:	d501      	bpl.n	8012058 <_printf_float+0x154>
 8012054:	3301      	adds	r3, #1
 8012056:	6123      	str	r3, [r4, #16]
 8012058:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801205c:	2b00      	cmp	r3, #0
 801205e:	d0a2      	beq.n	8011fa6 <_printf_float+0xa2>
 8012060:	232d      	movs	r3, #45	@ 0x2d
 8012062:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012066:	e79e      	b.n	8011fa6 <_printf_float+0xa2>
 8012068:	9a06      	ldr	r2, [sp, #24]
 801206a:	2a47      	cmp	r2, #71	@ 0x47
 801206c:	d1c2      	bne.n	8011ff4 <_printf_float+0xf0>
 801206e:	2b00      	cmp	r3, #0
 8012070:	d1c0      	bne.n	8011ff4 <_printf_float+0xf0>
 8012072:	2301      	movs	r3, #1
 8012074:	e7bd      	b.n	8011ff2 <_printf_float+0xee>
 8012076:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801207a:	d9db      	bls.n	8012034 <_printf_float+0x130>
 801207c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012080:	d118      	bne.n	80120b4 <_printf_float+0x1b0>
 8012082:	2900      	cmp	r1, #0
 8012084:	6863      	ldr	r3, [r4, #4]
 8012086:	dd0b      	ble.n	80120a0 <_printf_float+0x19c>
 8012088:	6121      	str	r1, [r4, #16]
 801208a:	b913      	cbnz	r3, 8012092 <_printf_float+0x18e>
 801208c:	6822      	ldr	r2, [r4, #0]
 801208e:	07d0      	lsls	r0, r2, #31
 8012090:	d502      	bpl.n	8012098 <_printf_float+0x194>
 8012092:	3301      	adds	r3, #1
 8012094:	440b      	add	r3, r1
 8012096:	6123      	str	r3, [r4, #16]
 8012098:	65a1      	str	r1, [r4, #88]	@ 0x58
 801209a:	f04f 0900 	mov.w	r9, #0
 801209e:	e7db      	b.n	8012058 <_printf_float+0x154>
 80120a0:	b913      	cbnz	r3, 80120a8 <_printf_float+0x1a4>
 80120a2:	6822      	ldr	r2, [r4, #0]
 80120a4:	07d2      	lsls	r2, r2, #31
 80120a6:	d501      	bpl.n	80120ac <_printf_float+0x1a8>
 80120a8:	3302      	adds	r3, #2
 80120aa:	e7f4      	b.n	8012096 <_printf_float+0x192>
 80120ac:	2301      	movs	r3, #1
 80120ae:	e7f2      	b.n	8012096 <_printf_float+0x192>
 80120b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80120b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120b6:	4299      	cmp	r1, r3
 80120b8:	db05      	blt.n	80120c6 <_printf_float+0x1c2>
 80120ba:	6823      	ldr	r3, [r4, #0]
 80120bc:	6121      	str	r1, [r4, #16]
 80120be:	07d8      	lsls	r0, r3, #31
 80120c0:	d5ea      	bpl.n	8012098 <_printf_float+0x194>
 80120c2:	1c4b      	adds	r3, r1, #1
 80120c4:	e7e7      	b.n	8012096 <_printf_float+0x192>
 80120c6:	2900      	cmp	r1, #0
 80120c8:	bfd4      	ite	le
 80120ca:	f1c1 0202 	rsble	r2, r1, #2
 80120ce:	2201      	movgt	r2, #1
 80120d0:	4413      	add	r3, r2
 80120d2:	e7e0      	b.n	8012096 <_printf_float+0x192>
 80120d4:	6823      	ldr	r3, [r4, #0]
 80120d6:	055a      	lsls	r2, r3, #21
 80120d8:	d407      	bmi.n	80120ea <_printf_float+0x1e6>
 80120da:	6923      	ldr	r3, [r4, #16]
 80120dc:	4642      	mov	r2, r8
 80120de:	4631      	mov	r1, r6
 80120e0:	4628      	mov	r0, r5
 80120e2:	47b8      	blx	r7
 80120e4:	3001      	adds	r0, #1
 80120e6:	d12b      	bne.n	8012140 <_printf_float+0x23c>
 80120e8:	e767      	b.n	8011fba <_printf_float+0xb6>
 80120ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80120ee:	f240 80dd 	bls.w	80122ac <_printf_float+0x3a8>
 80120f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80120f6:	2200      	movs	r2, #0
 80120f8:	2300      	movs	r3, #0
 80120fa:	f7ee fd05 	bl	8000b08 <__aeabi_dcmpeq>
 80120fe:	2800      	cmp	r0, #0
 8012100:	d033      	beq.n	801216a <_printf_float+0x266>
 8012102:	4a37      	ldr	r2, [pc, #220]	@ (80121e0 <_printf_float+0x2dc>)
 8012104:	2301      	movs	r3, #1
 8012106:	4631      	mov	r1, r6
 8012108:	4628      	mov	r0, r5
 801210a:	47b8      	blx	r7
 801210c:	3001      	adds	r0, #1
 801210e:	f43f af54 	beq.w	8011fba <_printf_float+0xb6>
 8012112:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012116:	4543      	cmp	r3, r8
 8012118:	db02      	blt.n	8012120 <_printf_float+0x21c>
 801211a:	6823      	ldr	r3, [r4, #0]
 801211c:	07d8      	lsls	r0, r3, #31
 801211e:	d50f      	bpl.n	8012140 <_printf_float+0x23c>
 8012120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012124:	4631      	mov	r1, r6
 8012126:	4628      	mov	r0, r5
 8012128:	47b8      	blx	r7
 801212a:	3001      	adds	r0, #1
 801212c:	f43f af45 	beq.w	8011fba <_printf_float+0xb6>
 8012130:	f04f 0900 	mov.w	r9, #0
 8012134:	f108 38ff 	add.w	r8, r8, #4294967295
 8012138:	f104 0a1a 	add.w	sl, r4, #26
 801213c:	45c8      	cmp	r8, r9
 801213e:	dc09      	bgt.n	8012154 <_printf_float+0x250>
 8012140:	6823      	ldr	r3, [r4, #0]
 8012142:	079b      	lsls	r3, r3, #30
 8012144:	f100 8103 	bmi.w	801234e <_printf_float+0x44a>
 8012148:	68e0      	ldr	r0, [r4, #12]
 801214a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801214c:	4298      	cmp	r0, r3
 801214e:	bfb8      	it	lt
 8012150:	4618      	movlt	r0, r3
 8012152:	e734      	b.n	8011fbe <_printf_float+0xba>
 8012154:	2301      	movs	r3, #1
 8012156:	4652      	mov	r2, sl
 8012158:	4631      	mov	r1, r6
 801215a:	4628      	mov	r0, r5
 801215c:	47b8      	blx	r7
 801215e:	3001      	adds	r0, #1
 8012160:	f43f af2b 	beq.w	8011fba <_printf_float+0xb6>
 8012164:	f109 0901 	add.w	r9, r9, #1
 8012168:	e7e8      	b.n	801213c <_printf_float+0x238>
 801216a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801216c:	2b00      	cmp	r3, #0
 801216e:	dc39      	bgt.n	80121e4 <_printf_float+0x2e0>
 8012170:	4a1b      	ldr	r2, [pc, #108]	@ (80121e0 <_printf_float+0x2dc>)
 8012172:	2301      	movs	r3, #1
 8012174:	4631      	mov	r1, r6
 8012176:	4628      	mov	r0, r5
 8012178:	47b8      	blx	r7
 801217a:	3001      	adds	r0, #1
 801217c:	f43f af1d 	beq.w	8011fba <_printf_float+0xb6>
 8012180:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012184:	ea59 0303 	orrs.w	r3, r9, r3
 8012188:	d102      	bne.n	8012190 <_printf_float+0x28c>
 801218a:	6823      	ldr	r3, [r4, #0]
 801218c:	07d9      	lsls	r1, r3, #31
 801218e:	d5d7      	bpl.n	8012140 <_printf_float+0x23c>
 8012190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012194:	4631      	mov	r1, r6
 8012196:	4628      	mov	r0, r5
 8012198:	47b8      	blx	r7
 801219a:	3001      	adds	r0, #1
 801219c:	f43f af0d 	beq.w	8011fba <_printf_float+0xb6>
 80121a0:	f04f 0a00 	mov.w	sl, #0
 80121a4:	f104 0b1a 	add.w	fp, r4, #26
 80121a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121aa:	425b      	negs	r3, r3
 80121ac:	4553      	cmp	r3, sl
 80121ae:	dc01      	bgt.n	80121b4 <_printf_float+0x2b0>
 80121b0:	464b      	mov	r3, r9
 80121b2:	e793      	b.n	80120dc <_printf_float+0x1d8>
 80121b4:	2301      	movs	r3, #1
 80121b6:	465a      	mov	r2, fp
 80121b8:	4631      	mov	r1, r6
 80121ba:	4628      	mov	r0, r5
 80121bc:	47b8      	blx	r7
 80121be:	3001      	adds	r0, #1
 80121c0:	f43f aefb 	beq.w	8011fba <_printf_float+0xb6>
 80121c4:	f10a 0a01 	add.w	sl, sl, #1
 80121c8:	e7ee      	b.n	80121a8 <_printf_float+0x2a4>
 80121ca:	bf00      	nop
 80121cc:	7fefffff 	.word	0x7fefffff
 80121d0:	080be678 	.word	0x080be678
 80121d4:	080be67c 	.word	0x080be67c
 80121d8:	080be680 	.word	0x080be680
 80121dc:	080be684 	.word	0x080be684
 80121e0:	080be688 	.word	0x080be688
 80121e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80121e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80121ea:	4553      	cmp	r3, sl
 80121ec:	bfa8      	it	ge
 80121ee:	4653      	movge	r3, sl
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	4699      	mov	r9, r3
 80121f4:	dc36      	bgt.n	8012264 <_printf_float+0x360>
 80121f6:	f04f 0b00 	mov.w	fp, #0
 80121fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80121fe:	f104 021a 	add.w	r2, r4, #26
 8012202:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012204:	9306      	str	r3, [sp, #24]
 8012206:	eba3 0309 	sub.w	r3, r3, r9
 801220a:	455b      	cmp	r3, fp
 801220c:	dc31      	bgt.n	8012272 <_printf_float+0x36e>
 801220e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012210:	459a      	cmp	sl, r3
 8012212:	dc3a      	bgt.n	801228a <_printf_float+0x386>
 8012214:	6823      	ldr	r3, [r4, #0]
 8012216:	07da      	lsls	r2, r3, #31
 8012218:	d437      	bmi.n	801228a <_printf_float+0x386>
 801221a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801221c:	ebaa 0903 	sub.w	r9, sl, r3
 8012220:	9b06      	ldr	r3, [sp, #24]
 8012222:	ebaa 0303 	sub.w	r3, sl, r3
 8012226:	4599      	cmp	r9, r3
 8012228:	bfa8      	it	ge
 801222a:	4699      	movge	r9, r3
 801222c:	f1b9 0f00 	cmp.w	r9, #0
 8012230:	dc33      	bgt.n	801229a <_printf_float+0x396>
 8012232:	f04f 0800 	mov.w	r8, #0
 8012236:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801223a:	f104 0b1a 	add.w	fp, r4, #26
 801223e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012240:	ebaa 0303 	sub.w	r3, sl, r3
 8012244:	eba3 0309 	sub.w	r3, r3, r9
 8012248:	4543      	cmp	r3, r8
 801224a:	f77f af79 	ble.w	8012140 <_printf_float+0x23c>
 801224e:	2301      	movs	r3, #1
 8012250:	465a      	mov	r2, fp
 8012252:	4631      	mov	r1, r6
 8012254:	4628      	mov	r0, r5
 8012256:	47b8      	blx	r7
 8012258:	3001      	adds	r0, #1
 801225a:	f43f aeae 	beq.w	8011fba <_printf_float+0xb6>
 801225e:	f108 0801 	add.w	r8, r8, #1
 8012262:	e7ec      	b.n	801223e <_printf_float+0x33a>
 8012264:	4642      	mov	r2, r8
 8012266:	4631      	mov	r1, r6
 8012268:	4628      	mov	r0, r5
 801226a:	47b8      	blx	r7
 801226c:	3001      	adds	r0, #1
 801226e:	d1c2      	bne.n	80121f6 <_printf_float+0x2f2>
 8012270:	e6a3      	b.n	8011fba <_printf_float+0xb6>
 8012272:	2301      	movs	r3, #1
 8012274:	4631      	mov	r1, r6
 8012276:	4628      	mov	r0, r5
 8012278:	9206      	str	r2, [sp, #24]
 801227a:	47b8      	blx	r7
 801227c:	3001      	adds	r0, #1
 801227e:	f43f ae9c 	beq.w	8011fba <_printf_float+0xb6>
 8012282:	9a06      	ldr	r2, [sp, #24]
 8012284:	f10b 0b01 	add.w	fp, fp, #1
 8012288:	e7bb      	b.n	8012202 <_printf_float+0x2fe>
 801228a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801228e:	4631      	mov	r1, r6
 8012290:	4628      	mov	r0, r5
 8012292:	47b8      	blx	r7
 8012294:	3001      	adds	r0, #1
 8012296:	d1c0      	bne.n	801221a <_printf_float+0x316>
 8012298:	e68f      	b.n	8011fba <_printf_float+0xb6>
 801229a:	9a06      	ldr	r2, [sp, #24]
 801229c:	464b      	mov	r3, r9
 801229e:	4442      	add	r2, r8
 80122a0:	4631      	mov	r1, r6
 80122a2:	4628      	mov	r0, r5
 80122a4:	47b8      	blx	r7
 80122a6:	3001      	adds	r0, #1
 80122a8:	d1c3      	bne.n	8012232 <_printf_float+0x32e>
 80122aa:	e686      	b.n	8011fba <_printf_float+0xb6>
 80122ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80122b0:	f1ba 0f01 	cmp.w	sl, #1
 80122b4:	dc01      	bgt.n	80122ba <_printf_float+0x3b6>
 80122b6:	07db      	lsls	r3, r3, #31
 80122b8:	d536      	bpl.n	8012328 <_printf_float+0x424>
 80122ba:	2301      	movs	r3, #1
 80122bc:	4642      	mov	r2, r8
 80122be:	4631      	mov	r1, r6
 80122c0:	4628      	mov	r0, r5
 80122c2:	47b8      	blx	r7
 80122c4:	3001      	adds	r0, #1
 80122c6:	f43f ae78 	beq.w	8011fba <_printf_float+0xb6>
 80122ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80122ce:	4631      	mov	r1, r6
 80122d0:	4628      	mov	r0, r5
 80122d2:	47b8      	blx	r7
 80122d4:	3001      	adds	r0, #1
 80122d6:	f43f ae70 	beq.w	8011fba <_printf_float+0xb6>
 80122da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80122de:	2200      	movs	r2, #0
 80122e0:	2300      	movs	r3, #0
 80122e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80122e6:	f7ee fc0f 	bl	8000b08 <__aeabi_dcmpeq>
 80122ea:	b9c0      	cbnz	r0, 801231e <_printf_float+0x41a>
 80122ec:	4653      	mov	r3, sl
 80122ee:	f108 0201 	add.w	r2, r8, #1
 80122f2:	4631      	mov	r1, r6
 80122f4:	4628      	mov	r0, r5
 80122f6:	47b8      	blx	r7
 80122f8:	3001      	adds	r0, #1
 80122fa:	d10c      	bne.n	8012316 <_printf_float+0x412>
 80122fc:	e65d      	b.n	8011fba <_printf_float+0xb6>
 80122fe:	2301      	movs	r3, #1
 8012300:	465a      	mov	r2, fp
 8012302:	4631      	mov	r1, r6
 8012304:	4628      	mov	r0, r5
 8012306:	47b8      	blx	r7
 8012308:	3001      	adds	r0, #1
 801230a:	f43f ae56 	beq.w	8011fba <_printf_float+0xb6>
 801230e:	f108 0801 	add.w	r8, r8, #1
 8012312:	45d0      	cmp	r8, sl
 8012314:	dbf3      	blt.n	80122fe <_printf_float+0x3fa>
 8012316:	464b      	mov	r3, r9
 8012318:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801231c:	e6df      	b.n	80120de <_printf_float+0x1da>
 801231e:	f04f 0800 	mov.w	r8, #0
 8012322:	f104 0b1a 	add.w	fp, r4, #26
 8012326:	e7f4      	b.n	8012312 <_printf_float+0x40e>
 8012328:	2301      	movs	r3, #1
 801232a:	4642      	mov	r2, r8
 801232c:	e7e1      	b.n	80122f2 <_printf_float+0x3ee>
 801232e:	2301      	movs	r3, #1
 8012330:	464a      	mov	r2, r9
 8012332:	4631      	mov	r1, r6
 8012334:	4628      	mov	r0, r5
 8012336:	47b8      	blx	r7
 8012338:	3001      	adds	r0, #1
 801233a:	f43f ae3e 	beq.w	8011fba <_printf_float+0xb6>
 801233e:	f108 0801 	add.w	r8, r8, #1
 8012342:	68e3      	ldr	r3, [r4, #12]
 8012344:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012346:	1a5b      	subs	r3, r3, r1
 8012348:	4543      	cmp	r3, r8
 801234a:	dcf0      	bgt.n	801232e <_printf_float+0x42a>
 801234c:	e6fc      	b.n	8012148 <_printf_float+0x244>
 801234e:	f04f 0800 	mov.w	r8, #0
 8012352:	f104 0919 	add.w	r9, r4, #25
 8012356:	e7f4      	b.n	8012342 <_printf_float+0x43e>

08012358 <_printf_common>:
 8012358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801235c:	4616      	mov	r6, r2
 801235e:	4698      	mov	r8, r3
 8012360:	688a      	ldr	r2, [r1, #8]
 8012362:	690b      	ldr	r3, [r1, #16]
 8012364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012368:	4293      	cmp	r3, r2
 801236a:	bfb8      	it	lt
 801236c:	4613      	movlt	r3, r2
 801236e:	6033      	str	r3, [r6, #0]
 8012370:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012374:	4607      	mov	r7, r0
 8012376:	460c      	mov	r4, r1
 8012378:	b10a      	cbz	r2, 801237e <_printf_common+0x26>
 801237a:	3301      	adds	r3, #1
 801237c:	6033      	str	r3, [r6, #0]
 801237e:	6823      	ldr	r3, [r4, #0]
 8012380:	0699      	lsls	r1, r3, #26
 8012382:	bf42      	ittt	mi
 8012384:	6833      	ldrmi	r3, [r6, #0]
 8012386:	3302      	addmi	r3, #2
 8012388:	6033      	strmi	r3, [r6, #0]
 801238a:	6825      	ldr	r5, [r4, #0]
 801238c:	f015 0506 	ands.w	r5, r5, #6
 8012390:	d106      	bne.n	80123a0 <_printf_common+0x48>
 8012392:	f104 0a19 	add.w	sl, r4, #25
 8012396:	68e3      	ldr	r3, [r4, #12]
 8012398:	6832      	ldr	r2, [r6, #0]
 801239a:	1a9b      	subs	r3, r3, r2
 801239c:	42ab      	cmp	r3, r5
 801239e:	dc26      	bgt.n	80123ee <_printf_common+0x96>
 80123a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80123a4:	6822      	ldr	r2, [r4, #0]
 80123a6:	3b00      	subs	r3, #0
 80123a8:	bf18      	it	ne
 80123aa:	2301      	movne	r3, #1
 80123ac:	0692      	lsls	r2, r2, #26
 80123ae:	d42b      	bmi.n	8012408 <_printf_common+0xb0>
 80123b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80123b4:	4641      	mov	r1, r8
 80123b6:	4638      	mov	r0, r7
 80123b8:	47c8      	blx	r9
 80123ba:	3001      	adds	r0, #1
 80123bc:	d01e      	beq.n	80123fc <_printf_common+0xa4>
 80123be:	6823      	ldr	r3, [r4, #0]
 80123c0:	6922      	ldr	r2, [r4, #16]
 80123c2:	f003 0306 	and.w	r3, r3, #6
 80123c6:	2b04      	cmp	r3, #4
 80123c8:	bf02      	ittt	eq
 80123ca:	68e5      	ldreq	r5, [r4, #12]
 80123cc:	6833      	ldreq	r3, [r6, #0]
 80123ce:	1aed      	subeq	r5, r5, r3
 80123d0:	68a3      	ldr	r3, [r4, #8]
 80123d2:	bf0c      	ite	eq
 80123d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80123d8:	2500      	movne	r5, #0
 80123da:	4293      	cmp	r3, r2
 80123dc:	bfc4      	itt	gt
 80123de:	1a9b      	subgt	r3, r3, r2
 80123e0:	18ed      	addgt	r5, r5, r3
 80123e2:	2600      	movs	r6, #0
 80123e4:	341a      	adds	r4, #26
 80123e6:	42b5      	cmp	r5, r6
 80123e8:	d11a      	bne.n	8012420 <_printf_common+0xc8>
 80123ea:	2000      	movs	r0, #0
 80123ec:	e008      	b.n	8012400 <_printf_common+0xa8>
 80123ee:	2301      	movs	r3, #1
 80123f0:	4652      	mov	r2, sl
 80123f2:	4641      	mov	r1, r8
 80123f4:	4638      	mov	r0, r7
 80123f6:	47c8      	blx	r9
 80123f8:	3001      	adds	r0, #1
 80123fa:	d103      	bne.n	8012404 <_printf_common+0xac>
 80123fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012404:	3501      	adds	r5, #1
 8012406:	e7c6      	b.n	8012396 <_printf_common+0x3e>
 8012408:	18e1      	adds	r1, r4, r3
 801240a:	1c5a      	adds	r2, r3, #1
 801240c:	2030      	movs	r0, #48	@ 0x30
 801240e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012412:	4422      	add	r2, r4
 8012414:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012418:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801241c:	3302      	adds	r3, #2
 801241e:	e7c7      	b.n	80123b0 <_printf_common+0x58>
 8012420:	2301      	movs	r3, #1
 8012422:	4622      	mov	r2, r4
 8012424:	4641      	mov	r1, r8
 8012426:	4638      	mov	r0, r7
 8012428:	47c8      	blx	r9
 801242a:	3001      	adds	r0, #1
 801242c:	d0e6      	beq.n	80123fc <_printf_common+0xa4>
 801242e:	3601      	adds	r6, #1
 8012430:	e7d9      	b.n	80123e6 <_printf_common+0x8e>
	...

08012434 <_printf_i>:
 8012434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012438:	7e0f      	ldrb	r7, [r1, #24]
 801243a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801243c:	2f78      	cmp	r7, #120	@ 0x78
 801243e:	4691      	mov	r9, r2
 8012440:	4680      	mov	r8, r0
 8012442:	460c      	mov	r4, r1
 8012444:	469a      	mov	sl, r3
 8012446:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801244a:	d807      	bhi.n	801245c <_printf_i+0x28>
 801244c:	2f62      	cmp	r7, #98	@ 0x62
 801244e:	d80a      	bhi.n	8012466 <_printf_i+0x32>
 8012450:	2f00      	cmp	r7, #0
 8012452:	f000 80d2 	beq.w	80125fa <_printf_i+0x1c6>
 8012456:	2f58      	cmp	r7, #88	@ 0x58
 8012458:	f000 80b9 	beq.w	80125ce <_printf_i+0x19a>
 801245c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012460:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012464:	e03a      	b.n	80124dc <_printf_i+0xa8>
 8012466:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801246a:	2b15      	cmp	r3, #21
 801246c:	d8f6      	bhi.n	801245c <_printf_i+0x28>
 801246e:	a101      	add	r1, pc, #4	@ (adr r1, 8012474 <_printf_i+0x40>)
 8012470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012474:	080124cd 	.word	0x080124cd
 8012478:	080124e1 	.word	0x080124e1
 801247c:	0801245d 	.word	0x0801245d
 8012480:	0801245d 	.word	0x0801245d
 8012484:	0801245d 	.word	0x0801245d
 8012488:	0801245d 	.word	0x0801245d
 801248c:	080124e1 	.word	0x080124e1
 8012490:	0801245d 	.word	0x0801245d
 8012494:	0801245d 	.word	0x0801245d
 8012498:	0801245d 	.word	0x0801245d
 801249c:	0801245d 	.word	0x0801245d
 80124a0:	080125e1 	.word	0x080125e1
 80124a4:	0801250b 	.word	0x0801250b
 80124a8:	0801259b 	.word	0x0801259b
 80124ac:	0801245d 	.word	0x0801245d
 80124b0:	0801245d 	.word	0x0801245d
 80124b4:	08012603 	.word	0x08012603
 80124b8:	0801245d 	.word	0x0801245d
 80124bc:	0801250b 	.word	0x0801250b
 80124c0:	0801245d 	.word	0x0801245d
 80124c4:	0801245d 	.word	0x0801245d
 80124c8:	080125a3 	.word	0x080125a3
 80124cc:	6833      	ldr	r3, [r6, #0]
 80124ce:	1d1a      	adds	r2, r3, #4
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	6032      	str	r2, [r6, #0]
 80124d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80124d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80124dc:	2301      	movs	r3, #1
 80124de:	e09d      	b.n	801261c <_printf_i+0x1e8>
 80124e0:	6833      	ldr	r3, [r6, #0]
 80124e2:	6820      	ldr	r0, [r4, #0]
 80124e4:	1d19      	adds	r1, r3, #4
 80124e6:	6031      	str	r1, [r6, #0]
 80124e8:	0606      	lsls	r6, r0, #24
 80124ea:	d501      	bpl.n	80124f0 <_printf_i+0xbc>
 80124ec:	681d      	ldr	r5, [r3, #0]
 80124ee:	e003      	b.n	80124f8 <_printf_i+0xc4>
 80124f0:	0645      	lsls	r5, r0, #25
 80124f2:	d5fb      	bpl.n	80124ec <_printf_i+0xb8>
 80124f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80124f8:	2d00      	cmp	r5, #0
 80124fa:	da03      	bge.n	8012504 <_printf_i+0xd0>
 80124fc:	232d      	movs	r3, #45	@ 0x2d
 80124fe:	426d      	negs	r5, r5
 8012500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012504:	4859      	ldr	r0, [pc, #356]	@ (801266c <_printf_i+0x238>)
 8012506:	230a      	movs	r3, #10
 8012508:	e011      	b.n	801252e <_printf_i+0xfa>
 801250a:	6821      	ldr	r1, [r4, #0]
 801250c:	6833      	ldr	r3, [r6, #0]
 801250e:	0608      	lsls	r0, r1, #24
 8012510:	f853 5b04 	ldr.w	r5, [r3], #4
 8012514:	d402      	bmi.n	801251c <_printf_i+0xe8>
 8012516:	0649      	lsls	r1, r1, #25
 8012518:	bf48      	it	mi
 801251a:	b2ad      	uxthmi	r5, r5
 801251c:	2f6f      	cmp	r7, #111	@ 0x6f
 801251e:	4853      	ldr	r0, [pc, #332]	@ (801266c <_printf_i+0x238>)
 8012520:	6033      	str	r3, [r6, #0]
 8012522:	bf14      	ite	ne
 8012524:	230a      	movne	r3, #10
 8012526:	2308      	moveq	r3, #8
 8012528:	2100      	movs	r1, #0
 801252a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801252e:	6866      	ldr	r6, [r4, #4]
 8012530:	60a6      	str	r6, [r4, #8]
 8012532:	2e00      	cmp	r6, #0
 8012534:	bfa2      	ittt	ge
 8012536:	6821      	ldrge	r1, [r4, #0]
 8012538:	f021 0104 	bicge.w	r1, r1, #4
 801253c:	6021      	strge	r1, [r4, #0]
 801253e:	b90d      	cbnz	r5, 8012544 <_printf_i+0x110>
 8012540:	2e00      	cmp	r6, #0
 8012542:	d04b      	beq.n	80125dc <_printf_i+0x1a8>
 8012544:	4616      	mov	r6, r2
 8012546:	fbb5 f1f3 	udiv	r1, r5, r3
 801254a:	fb03 5711 	mls	r7, r3, r1, r5
 801254e:	5dc7      	ldrb	r7, [r0, r7]
 8012550:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012554:	462f      	mov	r7, r5
 8012556:	42bb      	cmp	r3, r7
 8012558:	460d      	mov	r5, r1
 801255a:	d9f4      	bls.n	8012546 <_printf_i+0x112>
 801255c:	2b08      	cmp	r3, #8
 801255e:	d10b      	bne.n	8012578 <_printf_i+0x144>
 8012560:	6823      	ldr	r3, [r4, #0]
 8012562:	07df      	lsls	r7, r3, #31
 8012564:	d508      	bpl.n	8012578 <_printf_i+0x144>
 8012566:	6923      	ldr	r3, [r4, #16]
 8012568:	6861      	ldr	r1, [r4, #4]
 801256a:	4299      	cmp	r1, r3
 801256c:	bfde      	ittt	le
 801256e:	2330      	movle	r3, #48	@ 0x30
 8012570:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012574:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012578:	1b92      	subs	r2, r2, r6
 801257a:	6122      	str	r2, [r4, #16]
 801257c:	f8cd a000 	str.w	sl, [sp]
 8012580:	464b      	mov	r3, r9
 8012582:	aa03      	add	r2, sp, #12
 8012584:	4621      	mov	r1, r4
 8012586:	4640      	mov	r0, r8
 8012588:	f7ff fee6 	bl	8012358 <_printf_common>
 801258c:	3001      	adds	r0, #1
 801258e:	d14a      	bne.n	8012626 <_printf_i+0x1f2>
 8012590:	f04f 30ff 	mov.w	r0, #4294967295
 8012594:	b004      	add	sp, #16
 8012596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801259a:	6823      	ldr	r3, [r4, #0]
 801259c:	f043 0320 	orr.w	r3, r3, #32
 80125a0:	6023      	str	r3, [r4, #0]
 80125a2:	4833      	ldr	r0, [pc, #204]	@ (8012670 <_printf_i+0x23c>)
 80125a4:	2778      	movs	r7, #120	@ 0x78
 80125a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80125aa:	6823      	ldr	r3, [r4, #0]
 80125ac:	6831      	ldr	r1, [r6, #0]
 80125ae:	061f      	lsls	r7, r3, #24
 80125b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80125b4:	d402      	bmi.n	80125bc <_printf_i+0x188>
 80125b6:	065f      	lsls	r7, r3, #25
 80125b8:	bf48      	it	mi
 80125ba:	b2ad      	uxthmi	r5, r5
 80125bc:	6031      	str	r1, [r6, #0]
 80125be:	07d9      	lsls	r1, r3, #31
 80125c0:	bf44      	itt	mi
 80125c2:	f043 0320 	orrmi.w	r3, r3, #32
 80125c6:	6023      	strmi	r3, [r4, #0]
 80125c8:	b11d      	cbz	r5, 80125d2 <_printf_i+0x19e>
 80125ca:	2310      	movs	r3, #16
 80125cc:	e7ac      	b.n	8012528 <_printf_i+0xf4>
 80125ce:	4827      	ldr	r0, [pc, #156]	@ (801266c <_printf_i+0x238>)
 80125d0:	e7e9      	b.n	80125a6 <_printf_i+0x172>
 80125d2:	6823      	ldr	r3, [r4, #0]
 80125d4:	f023 0320 	bic.w	r3, r3, #32
 80125d8:	6023      	str	r3, [r4, #0]
 80125da:	e7f6      	b.n	80125ca <_printf_i+0x196>
 80125dc:	4616      	mov	r6, r2
 80125de:	e7bd      	b.n	801255c <_printf_i+0x128>
 80125e0:	6833      	ldr	r3, [r6, #0]
 80125e2:	6825      	ldr	r5, [r4, #0]
 80125e4:	6961      	ldr	r1, [r4, #20]
 80125e6:	1d18      	adds	r0, r3, #4
 80125e8:	6030      	str	r0, [r6, #0]
 80125ea:	062e      	lsls	r6, r5, #24
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	d501      	bpl.n	80125f4 <_printf_i+0x1c0>
 80125f0:	6019      	str	r1, [r3, #0]
 80125f2:	e002      	b.n	80125fa <_printf_i+0x1c6>
 80125f4:	0668      	lsls	r0, r5, #25
 80125f6:	d5fb      	bpl.n	80125f0 <_printf_i+0x1bc>
 80125f8:	8019      	strh	r1, [r3, #0]
 80125fa:	2300      	movs	r3, #0
 80125fc:	6123      	str	r3, [r4, #16]
 80125fe:	4616      	mov	r6, r2
 8012600:	e7bc      	b.n	801257c <_printf_i+0x148>
 8012602:	6833      	ldr	r3, [r6, #0]
 8012604:	1d1a      	adds	r2, r3, #4
 8012606:	6032      	str	r2, [r6, #0]
 8012608:	681e      	ldr	r6, [r3, #0]
 801260a:	6862      	ldr	r2, [r4, #4]
 801260c:	2100      	movs	r1, #0
 801260e:	4630      	mov	r0, r6
 8012610:	f7ed fdfe 	bl	8000210 <memchr>
 8012614:	b108      	cbz	r0, 801261a <_printf_i+0x1e6>
 8012616:	1b80      	subs	r0, r0, r6
 8012618:	6060      	str	r0, [r4, #4]
 801261a:	6863      	ldr	r3, [r4, #4]
 801261c:	6123      	str	r3, [r4, #16]
 801261e:	2300      	movs	r3, #0
 8012620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012624:	e7aa      	b.n	801257c <_printf_i+0x148>
 8012626:	6923      	ldr	r3, [r4, #16]
 8012628:	4632      	mov	r2, r6
 801262a:	4649      	mov	r1, r9
 801262c:	4640      	mov	r0, r8
 801262e:	47d0      	blx	sl
 8012630:	3001      	adds	r0, #1
 8012632:	d0ad      	beq.n	8012590 <_printf_i+0x15c>
 8012634:	6823      	ldr	r3, [r4, #0]
 8012636:	079b      	lsls	r3, r3, #30
 8012638:	d413      	bmi.n	8012662 <_printf_i+0x22e>
 801263a:	68e0      	ldr	r0, [r4, #12]
 801263c:	9b03      	ldr	r3, [sp, #12]
 801263e:	4298      	cmp	r0, r3
 8012640:	bfb8      	it	lt
 8012642:	4618      	movlt	r0, r3
 8012644:	e7a6      	b.n	8012594 <_printf_i+0x160>
 8012646:	2301      	movs	r3, #1
 8012648:	4632      	mov	r2, r6
 801264a:	4649      	mov	r1, r9
 801264c:	4640      	mov	r0, r8
 801264e:	47d0      	blx	sl
 8012650:	3001      	adds	r0, #1
 8012652:	d09d      	beq.n	8012590 <_printf_i+0x15c>
 8012654:	3501      	adds	r5, #1
 8012656:	68e3      	ldr	r3, [r4, #12]
 8012658:	9903      	ldr	r1, [sp, #12]
 801265a:	1a5b      	subs	r3, r3, r1
 801265c:	42ab      	cmp	r3, r5
 801265e:	dcf2      	bgt.n	8012646 <_printf_i+0x212>
 8012660:	e7eb      	b.n	801263a <_printf_i+0x206>
 8012662:	2500      	movs	r5, #0
 8012664:	f104 0619 	add.w	r6, r4, #25
 8012668:	e7f5      	b.n	8012656 <_printf_i+0x222>
 801266a:	bf00      	nop
 801266c:	080be68a 	.word	0x080be68a
 8012670:	080be69b 	.word	0x080be69b

08012674 <std>:
 8012674:	2300      	movs	r3, #0
 8012676:	b510      	push	{r4, lr}
 8012678:	4604      	mov	r4, r0
 801267a:	e9c0 3300 	strd	r3, r3, [r0]
 801267e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012682:	6083      	str	r3, [r0, #8]
 8012684:	8181      	strh	r1, [r0, #12]
 8012686:	6643      	str	r3, [r0, #100]	@ 0x64
 8012688:	81c2      	strh	r2, [r0, #14]
 801268a:	6183      	str	r3, [r0, #24]
 801268c:	4619      	mov	r1, r3
 801268e:	2208      	movs	r2, #8
 8012690:	305c      	adds	r0, #92	@ 0x5c
 8012692:	f000 f9f9 	bl	8012a88 <memset>
 8012696:	4b0d      	ldr	r3, [pc, #52]	@ (80126cc <std+0x58>)
 8012698:	6263      	str	r3, [r4, #36]	@ 0x24
 801269a:	4b0d      	ldr	r3, [pc, #52]	@ (80126d0 <std+0x5c>)
 801269c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801269e:	4b0d      	ldr	r3, [pc, #52]	@ (80126d4 <std+0x60>)
 80126a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80126a2:	4b0d      	ldr	r3, [pc, #52]	@ (80126d8 <std+0x64>)
 80126a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80126a6:	4b0d      	ldr	r3, [pc, #52]	@ (80126dc <std+0x68>)
 80126a8:	6224      	str	r4, [r4, #32]
 80126aa:	429c      	cmp	r4, r3
 80126ac:	d006      	beq.n	80126bc <std+0x48>
 80126ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80126b2:	4294      	cmp	r4, r2
 80126b4:	d002      	beq.n	80126bc <std+0x48>
 80126b6:	33d0      	adds	r3, #208	@ 0xd0
 80126b8:	429c      	cmp	r4, r3
 80126ba:	d105      	bne.n	80126c8 <std+0x54>
 80126bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80126c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126c4:	f000 ba6c 	b.w	8012ba0 <__retarget_lock_init_recursive>
 80126c8:	bd10      	pop	{r4, pc}
 80126ca:	bf00      	nop
 80126cc:	080128d9 	.word	0x080128d9
 80126d0:	080128fb 	.word	0x080128fb
 80126d4:	08012933 	.word	0x08012933
 80126d8:	08012957 	.word	0x08012957
 80126dc:	20005ebc 	.word	0x20005ebc

080126e0 <stdio_exit_handler>:
 80126e0:	4a02      	ldr	r2, [pc, #8]	@ (80126ec <stdio_exit_handler+0xc>)
 80126e2:	4903      	ldr	r1, [pc, #12]	@ (80126f0 <stdio_exit_handler+0x10>)
 80126e4:	4803      	ldr	r0, [pc, #12]	@ (80126f4 <stdio_exit_handler+0x14>)
 80126e6:	f000 b869 	b.w	80127bc <_fwalk_sglue>
 80126ea:	bf00      	nop
 80126ec:	2000080c 	.word	0x2000080c
 80126f0:	08014385 	.word	0x08014385
 80126f4:	2000081c 	.word	0x2000081c

080126f8 <cleanup_stdio>:
 80126f8:	6841      	ldr	r1, [r0, #4]
 80126fa:	4b0c      	ldr	r3, [pc, #48]	@ (801272c <cleanup_stdio+0x34>)
 80126fc:	4299      	cmp	r1, r3
 80126fe:	b510      	push	{r4, lr}
 8012700:	4604      	mov	r4, r0
 8012702:	d001      	beq.n	8012708 <cleanup_stdio+0x10>
 8012704:	f001 fe3e 	bl	8014384 <_fflush_r>
 8012708:	68a1      	ldr	r1, [r4, #8]
 801270a:	4b09      	ldr	r3, [pc, #36]	@ (8012730 <cleanup_stdio+0x38>)
 801270c:	4299      	cmp	r1, r3
 801270e:	d002      	beq.n	8012716 <cleanup_stdio+0x1e>
 8012710:	4620      	mov	r0, r4
 8012712:	f001 fe37 	bl	8014384 <_fflush_r>
 8012716:	68e1      	ldr	r1, [r4, #12]
 8012718:	4b06      	ldr	r3, [pc, #24]	@ (8012734 <cleanup_stdio+0x3c>)
 801271a:	4299      	cmp	r1, r3
 801271c:	d004      	beq.n	8012728 <cleanup_stdio+0x30>
 801271e:	4620      	mov	r0, r4
 8012720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012724:	f001 be2e 	b.w	8014384 <_fflush_r>
 8012728:	bd10      	pop	{r4, pc}
 801272a:	bf00      	nop
 801272c:	20005ebc 	.word	0x20005ebc
 8012730:	20005f24 	.word	0x20005f24
 8012734:	20005f8c 	.word	0x20005f8c

08012738 <global_stdio_init.part.0>:
 8012738:	b510      	push	{r4, lr}
 801273a:	4b0b      	ldr	r3, [pc, #44]	@ (8012768 <global_stdio_init.part.0+0x30>)
 801273c:	4c0b      	ldr	r4, [pc, #44]	@ (801276c <global_stdio_init.part.0+0x34>)
 801273e:	4a0c      	ldr	r2, [pc, #48]	@ (8012770 <global_stdio_init.part.0+0x38>)
 8012740:	601a      	str	r2, [r3, #0]
 8012742:	4620      	mov	r0, r4
 8012744:	2200      	movs	r2, #0
 8012746:	2104      	movs	r1, #4
 8012748:	f7ff ff94 	bl	8012674 <std>
 801274c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012750:	2201      	movs	r2, #1
 8012752:	2109      	movs	r1, #9
 8012754:	f7ff ff8e 	bl	8012674 <std>
 8012758:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801275c:	2202      	movs	r2, #2
 801275e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012762:	2112      	movs	r1, #18
 8012764:	f7ff bf86 	b.w	8012674 <std>
 8012768:	20005ff4 	.word	0x20005ff4
 801276c:	20005ebc 	.word	0x20005ebc
 8012770:	080126e1 	.word	0x080126e1

08012774 <__sfp_lock_acquire>:
 8012774:	4801      	ldr	r0, [pc, #4]	@ (801277c <__sfp_lock_acquire+0x8>)
 8012776:	f000 ba14 	b.w	8012ba2 <__retarget_lock_acquire_recursive>
 801277a:	bf00      	nop
 801277c:	20005ffd 	.word	0x20005ffd

08012780 <__sfp_lock_release>:
 8012780:	4801      	ldr	r0, [pc, #4]	@ (8012788 <__sfp_lock_release+0x8>)
 8012782:	f000 ba0f 	b.w	8012ba4 <__retarget_lock_release_recursive>
 8012786:	bf00      	nop
 8012788:	20005ffd 	.word	0x20005ffd

0801278c <__sinit>:
 801278c:	b510      	push	{r4, lr}
 801278e:	4604      	mov	r4, r0
 8012790:	f7ff fff0 	bl	8012774 <__sfp_lock_acquire>
 8012794:	6a23      	ldr	r3, [r4, #32]
 8012796:	b11b      	cbz	r3, 80127a0 <__sinit+0x14>
 8012798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801279c:	f7ff bff0 	b.w	8012780 <__sfp_lock_release>
 80127a0:	4b04      	ldr	r3, [pc, #16]	@ (80127b4 <__sinit+0x28>)
 80127a2:	6223      	str	r3, [r4, #32]
 80127a4:	4b04      	ldr	r3, [pc, #16]	@ (80127b8 <__sinit+0x2c>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d1f5      	bne.n	8012798 <__sinit+0xc>
 80127ac:	f7ff ffc4 	bl	8012738 <global_stdio_init.part.0>
 80127b0:	e7f2      	b.n	8012798 <__sinit+0xc>
 80127b2:	bf00      	nop
 80127b4:	080126f9 	.word	0x080126f9
 80127b8:	20005ff4 	.word	0x20005ff4

080127bc <_fwalk_sglue>:
 80127bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127c0:	4607      	mov	r7, r0
 80127c2:	4688      	mov	r8, r1
 80127c4:	4614      	mov	r4, r2
 80127c6:	2600      	movs	r6, #0
 80127c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80127cc:	f1b9 0901 	subs.w	r9, r9, #1
 80127d0:	d505      	bpl.n	80127de <_fwalk_sglue+0x22>
 80127d2:	6824      	ldr	r4, [r4, #0]
 80127d4:	2c00      	cmp	r4, #0
 80127d6:	d1f7      	bne.n	80127c8 <_fwalk_sglue+0xc>
 80127d8:	4630      	mov	r0, r6
 80127da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127de:	89ab      	ldrh	r3, [r5, #12]
 80127e0:	2b01      	cmp	r3, #1
 80127e2:	d907      	bls.n	80127f4 <_fwalk_sglue+0x38>
 80127e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80127e8:	3301      	adds	r3, #1
 80127ea:	d003      	beq.n	80127f4 <_fwalk_sglue+0x38>
 80127ec:	4629      	mov	r1, r5
 80127ee:	4638      	mov	r0, r7
 80127f0:	47c0      	blx	r8
 80127f2:	4306      	orrs	r6, r0
 80127f4:	3568      	adds	r5, #104	@ 0x68
 80127f6:	e7e9      	b.n	80127cc <_fwalk_sglue+0x10>

080127f8 <iprintf>:
 80127f8:	b40f      	push	{r0, r1, r2, r3}
 80127fa:	b507      	push	{r0, r1, r2, lr}
 80127fc:	4906      	ldr	r1, [pc, #24]	@ (8012818 <iprintf+0x20>)
 80127fe:	ab04      	add	r3, sp, #16
 8012800:	6808      	ldr	r0, [r1, #0]
 8012802:	f853 2b04 	ldr.w	r2, [r3], #4
 8012806:	6881      	ldr	r1, [r0, #8]
 8012808:	9301      	str	r3, [sp, #4]
 801280a:	f001 fc1f 	bl	801404c <_vfiprintf_r>
 801280e:	b003      	add	sp, #12
 8012810:	f85d eb04 	ldr.w	lr, [sp], #4
 8012814:	b004      	add	sp, #16
 8012816:	4770      	bx	lr
 8012818:	20000818 	.word	0x20000818

0801281c <_puts_r>:
 801281c:	6a03      	ldr	r3, [r0, #32]
 801281e:	b570      	push	{r4, r5, r6, lr}
 8012820:	6884      	ldr	r4, [r0, #8]
 8012822:	4605      	mov	r5, r0
 8012824:	460e      	mov	r6, r1
 8012826:	b90b      	cbnz	r3, 801282c <_puts_r+0x10>
 8012828:	f7ff ffb0 	bl	801278c <__sinit>
 801282c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801282e:	07db      	lsls	r3, r3, #31
 8012830:	d405      	bmi.n	801283e <_puts_r+0x22>
 8012832:	89a3      	ldrh	r3, [r4, #12]
 8012834:	0598      	lsls	r0, r3, #22
 8012836:	d402      	bmi.n	801283e <_puts_r+0x22>
 8012838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801283a:	f000 f9b2 	bl	8012ba2 <__retarget_lock_acquire_recursive>
 801283e:	89a3      	ldrh	r3, [r4, #12]
 8012840:	0719      	lsls	r1, r3, #28
 8012842:	d502      	bpl.n	801284a <_puts_r+0x2e>
 8012844:	6923      	ldr	r3, [r4, #16]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d135      	bne.n	80128b6 <_puts_r+0x9a>
 801284a:	4621      	mov	r1, r4
 801284c:	4628      	mov	r0, r5
 801284e:	f000 f8c5 	bl	80129dc <__swsetup_r>
 8012852:	b380      	cbz	r0, 80128b6 <_puts_r+0x9a>
 8012854:	f04f 35ff 	mov.w	r5, #4294967295
 8012858:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801285a:	07da      	lsls	r2, r3, #31
 801285c:	d405      	bmi.n	801286a <_puts_r+0x4e>
 801285e:	89a3      	ldrh	r3, [r4, #12]
 8012860:	059b      	lsls	r3, r3, #22
 8012862:	d402      	bmi.n	801286a <_puts_r+0x4e>
 8012864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012866:	f000 f99d 	bl	8012ba4 <__retarget_lock_release_recursive>
 801286a:	4628      	mov	r0, r5
 801286c:	bd70      	pop	{r4, r5, r6, pc}
 801286e:	2b00      	cmp	r3, #0
 8012870:	da04      	bge.n	801287c <_puts_r+0x60>
 8012872:	69a2      	ldr	r2, [r4, #24]
 8012874:	429a      	cmp	r2, r3
 8012876:	dc17      	bgt.n	80128a8 <_puts_r+0x8c>
 8012878:	290a      	cmp	r1, #10
 801287a:	d015      	beq.n	80128a8 <_puts_r+0x8c>
 801287c:	6823      	ldr	r3, [r4, #0]
 801287e:	1c5a      	adds	r2, r3, #1
 8012880:	6022      	str	r2, [r4, #0]
 8012882:	7019      	strb	r1, [r3, #0]
 8012884:	68a3      	ldr	r3, [r4, #8]
 8012886:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801288a:	3b01      	subs	r3, #1
 801288c:	60a3      	str	r3, [r4, #8]
 801288e:	2900      	cmp	r1, #0
 8012890:	d1ed      	bne.n	801286e <_puts_r+0x52>
 8012892:	2b00      	cmp	r3, #0
 8012894:	da11      	bge.n	80128ba <_puts_r+0x9e>
 8012896:	4622      	mov	r2, r4
 8012898:	210a      	movs	r1, #10
 801289a:	4628      	mov	r0, r5
 801289c:	f000 f85f 	bl	801295e <__swbuf_r>
 80128a0:	3001      	adds	r0, #1
 80128a2:	d0d7      	beq.n	8012854 <_puts_r+0x38>
 80128a4:	250a      	movs	r5, #10
 80128a6:	e7d7      	b.n	8012858 <_puts_r+0x3c>
 80128a8:	4622      	mov	r2, r4
 80128aa:	4628      	mov	r0, r5
 80128ac:	f000 f857 	bl	801295e <__swbuf_r>
 80128b0:	3001      	adds	r0, #1
 80128b2:	d1e7      	bne.n	8012884 <_puts_r+0x68>
 80128b4:	e7ce      	b.n	8012854 <_puts_r+0x38>
 80128b6:	3e01      	subs	r6, #1
 80128b8:	e7e4      	b.n	8012884 <_puts_r+0x68>
 80128ba:	6823      	ldr	r3, [r4, #0]
 80128bc:	1c5a      	adds	r2, r3, #1
 80128be:	6022      	str	r2, [r4, #0]
 80128c0:	220a      	movs	r2, #10
 80128c2:	701a      	strb	r2, [r3, #0]
 80128c4:	e7ee      	b.n	80128a4 <_puts_r+0x88>
	...

080128c8 <puts>:
 80128c8:	4b02      	ldr	r3, [pc, #8]	@ (80128d4 <puts+0xc>)
 80128ca:	4601      	mov	r1, r0
 80128cc:	6818      	ldr	r0, [r3, #0]
 80128ce:	f7ff bfa5 	b.w	801281c <_puts_r>
 80128d2:	bf00      	nop
 80128d4:	20000818 	.word	0x20000818

080128d8 <__sread>:
 80128d8:	b510      	push	{r4, lr}
 80128da:	460c      	mov	r4, r1
 80128dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128e0:	f000 f900 	bl	8012ae4 <_read_r>
 80128e4:	2800      	cmp	r0, #0
 80128e6:	bfab      	itete	ge
 80128e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80128ea:	89a3      	ldrhlt	r3, [r4, #12]
 80128ec:	181b      	addge	r3, r3, r0
 80128ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80128f2:	bfac      	ite	ge
 80128f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80128f6:	81a3      	strhlt	r3, [r4, #12]
 80128f8:	bd10      	pop	{r4, pc}

080128fa <__swrite>:
 80128fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128fe:	461f      	mov	r7, r3
 8012900:	898b      	ldrh	r3, [r1, #12]
 8012902:	05db      	lsls	r3, r3, #23
 8012904:	4605      	mov	r5, r0
 8012906:	460c      	mov	r4, r1
 8012908:	4616      	mov	r6, r2
 801290a:	d505      	bpl.n	8012918 <__swrite+0x1e>
 801290c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012910:	2302      	movs	r3, #2
 8012912:	2200      	movs	r2, #0
 8012914:	f000 f8d4 	bl	8012ac0 <_lseek_r>
 8012918:	89a3      	ldrh	r3, [r4, #12]
 801291a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801291e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012922:	81a3      	strh	r3, [r4, #12]
 8012924:	4632      	mov	r2, r6
 8012926:	463b      	mov	r3, r7
 8012928:	4628      	mov	r0, r5
 801292a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801292e:	f000 b8fb 	b.w	8012b28 <_write_r>

08012932 <__sseek>:
 8012932:	b510      	push	{r4, lr}
 8012934:	460c      	mov	r4, r1
 8012936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801293a:	f000 f8c1 	bl	8012ac0 <_lseek_r>
 801293e:	1c43      	adds	r3, r0, #1
 8012940:	89a3      	ldrh	r3, [r4, #12]
 8012942:	bf15      	itete	ne
 8012944:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012946:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801294a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801294e:	81a3      	strheq	r3, [r4, #12]
 8012950:	bf18      	it	ne
 8012952:	81a3      	strhne	r3, [r4, #12]
 8012954:	bd10      	pop	{r4, pc}

08012956 <__sclose>:
 8012956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801295a:	f000 b8a1 	b.w	8012aa0 <_close_r>

0801295e <__swbuf_r>:
 801295e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012960:	460e      	mov	r6, r1
 8012962:	4614      	mov	r4, r2
 8012964:	4605      	mov	r5, r0
 8012966:	b118      	cbz	r0, 8012970 <__swbuf_r+0x12>
 8012968:	6a03      	ldr	r3, [r0, #32]
 801296a:	b90b      	cbnz	r3, 8012970 <__swbuf_r+0x12>
 801296c:	f7ff ff0e 	bl	801278c <__sinit>
 8012970:	69a3      	ldr	r3, [r4, #24]
 8012972:	60a3      	str	r3, [r4, #8]
 8012974:	89a3      	ldrh	r3, [r4, #12]
 8012976:	071a      	lsls	r2, r3, #28
 8012978:	d501      	bpl.n	801297e <__swbuf_r+0x20>
 801297a:	6923      	ldr	r3, [r4, #16]
 801297c:	b943      	cbnz	r3, 8012990 <__swbuf_r+0x32>
 801297e:	4621      	mov	r1, r4
 8012980:	4628      	mov	r0, r5
 8012982:	f000 f82b 	bl	80129dc <__swsetup_r>
 8012986:	b118      	cbz	r0, 8012990 <__swbuf_r+0x32>
 8012988:	f04f 37ff 	mov.w	r7, #4294967295
 801298c:	4638      	mov	r0, r7
 801298e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012990:	6823      	ldr	r3, [r4, #0]
 8012992:	6922      	ldr	r2, [r4, #16]
 8012994:	1a98      	subs	r0, r3, r2
 8012996:	6963      	ldr	r3, [r4, #20]
 8012998:	b2f6      	uxtb	r6, r6
 801299a:	4283      	cmp	r3, r0
 801299c:	4637      	mov	r7, r6
 801299e:	dc05      	bgt.n	80129ac <__swbuf_r+0x4e>
 80129a0:	4621      	mov	r1, r4
 80129a2:	4628      	mov	r0, r5
 80129a4:	f001 fcee 	bl	8014384 <_fflush_r>
 80129a8:	2800      	cmp	r0, #0
 80129aa:	d1ed      	bne.n	8012988 <__swbuf_r+0x2a>
 80129ac:	68a3      	ldr	r3, [r4, #8]
 80129ae:	3b01      	subs	r3, #1
 80129b0:	60a3      	str	r3, [r4, #8]
 80129b2:	6823      	ldr	r3, [r4, #0]
 80129b4:	1c5a      	adds	r2, r3, #1
 80129b6:	6022      	str	r2, [r4, #0]
 80129b8:	701e      	strb	r6, [r3, #0]
 80129ba:	6962      	ldr	r2, [r4, #20]
 80129bc:	1c43      	adds	r3, r0, #1
 80129be:	429a      	cmp	r2, r3
 80129c0:	d004      	beq.n	80129cc <__swbuf_r+0x6e>
 80129c2:	89a3      	ldrh	r3, [r4, #12]
 80129c4:	07db      	lsls	r3, r3, #31
 80129c6:	d5e1      	bpl.n	801298c <__swbuf_r+0x2e>
 80129c8:	2e0a      	cmp	r6, #10
 80129ca:	d1df      	bne.n	801298c <__swbuf_r+0x2e>
 80129cc:	4621      	mov	r1, r4
 80129ce:	4628      	mov	r0, r5
 80129d0:	f001 fcd8 	bl	8014384 <_fflush_r>
 80129d4:	2800      	cmp	r0, #0
 80129d6:	d0d9      	beq.n	801298c <__swbuf_r+0x2e>
 80129d8:	e7d6      	b.n	8012988 <__swbuf_r+0x2a>
	...

080129dc <__swsetup_r>:
 80129dc:	b538      	push	{r3, r4, r5, lr}
 80129de:	4b29      	ldr	r3, [pc, #164]	@ (8012a84 <__swsetup_r+0xa8>)
 80129e0:	4605      	mov	r5, r0
 80129e2:	6818      	ldr	r0, [r3, #0]
 80129e4:	460c      	mov	r4, r1
 80129e6:	b118      	cbz	r0, 80129f0 <__swsetup_r+0x14>
 80129e8:	6a03      	ldr	r3, [r0, #32]
 80129ea:	b90b      	cbnz	r3, 80129f0 <__swsetup_r+0x14>
 80129ec:	f7ff fece 	bl	801278c <__sinit>
 80129f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129f4:	0719      	lsls	r1, r3, #28
 80129f6:	d422      	bmi.n	8012a3e <__swsetup_r+0x62>
 80129f8:	06da      	lsls	r2, r3, #27
 80129fa:	d407      	bmi.n	8012a0c <__swsetup_r+0x30>
 80129fc:	2209      	movs	r2, #9
 80129fe:	602a      	str	r2, [r5, #0]
 8012a00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a04:	81a3      	strh	r3, [r4, #12]
 8012a06:	f04f 30ff 	mov.w	r0, #4294967295
 8012a0a:	e033      	b.n	8012a74 <__swsetup_r+0x98>
 8012a0c:	0758      	lsls	r0, r3, #29
 8012a0e:	d512      	bpl.n	8012a36 <__swsetup_r+0x5a>
 8012a10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012a12:	b141      	cbz	r1, 8012a26 <__swsetup_r+0x4a>
 8012a14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012a18:	4299      	cmp	r1, r3
 8012a1a:	d002      	beq.n	8012a22 <__swsetup_r+0x46>
 8012a1c:	4628      	mov	r0, r5
 8012a1e:	f000 ff1f 	bl	8013860 <_free_r>
 8012a22:	2300      	movs	r3, #0
 8012a24:	6363      	str	r3, [r4, #52]	@ 0x34
 8012a26:	89a3      	ldrh	r3, [r4, #12]
 8012a28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012a2c:	81a3      	strh	r3, [r4, #12]
 8012a2e:	2300      	movs	r3, #0
 8012a30:	6063      	str	r3, [r4, #4]
 8012a32:	6923      	ldr	r3, [r4, #16]
 8012a34:	6023      	str	r3, [r4, #0]
 8012a36:	89a3      	ldrh	r3, [r4, #12]
 8012a38:	f043 0308 	orr.w	r3, r3, #8
 8012a3c:	81a3      	strh	r3, [r4, #12]
 8012a3e:	6923      	ldr	r3, [r4, #16]
 8012a40:	b94b      	cbnz	r3, 8012a56 <__swsetup_r+0x7a>
 8012a42:	89a3      	ldrh	r3, [r4, #12]
 8012a44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a4c:	d003      	beq.n	8012a56 <__swsetup_r+0x7a>
 8012a4e:	4621      	mov	r1, r4
 8012a50:	4628      	mov	r0, r5
 8012a52:	f001 fce5 	bl	8014420 <__smakebuf_r>
 8012a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a5a:	f013 0201 	ands.w	r2, r3, #1
 8012a5e:	d00a      	beq.n	8012a76 <__swsetup_r+0x9a>
 8012a60:	2200      	movs	r2, #0
 8012a62:	60a2      	str	r2, [r4, #8]
 8012a64:	6962      	ldr	r2, [r4, #20]
 8012a66:	4252      	negs	r2, r2
 8012a68:	61a2      	str	r2, [r4, #24]
 8012a6a:	6922      	ldr	r2, [r4, #16]
 8012a6c:	b942      	cbnz	r2, 8012a80 <__swsetup_r+0xa4>
 8012a6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012a72:	d1c5      	bne.n	8012a00 <__swsetup_r+0x24>
 8012a74:	bd38      	pop	{r3, r4, r5, pc}
 8012a76:	0799      	lsls	r1, r3, #30
 8012a78:	bf58      	it	pl
 8012a7a:	6962      	ldrpl	r2, [r4, #20]
 8012a7c:	60a2      	str	r2, [r4, #8]
 8012a7e:	e7f4      	b.n	8012a6a <__swsetup_r+0x8e>
 8012a80:	2000      	movs	r0, #0
 8012a82:	e7f7      	b.n	8012a74 <__swsetup_r+0x98>
 8012a84:	20000818 	.word	0x20000818

08012a88 <memset>:
 8012a88:	4402      	add	r2, r0
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	4293      	cmp	r3, r2
 8012a8e:	d100      	bne.n	8012a92 <memset+0xa>
 8012a90:	4770      	bx	lr
 8012a92:	f803 1b01 	strb.w	r1, [r3], #1
 8012a96:	e7f9      	b.n	8012a8c <memset+0x4>

08012a98 <_localeconv_r>:
 8012a98:	4800      	ldr	r0, [pc, #0]	@ (8012a9c <_localeconv_r+0x4>)
 8012a9a:	4770      	bx	lr
 8012a9c:	20000958 	.word	0x20000958

08012aa0 <_close_r>:
 8012aa0:	b538      	push	{r3, r4, r5, lr}
 8012aa2:	4d06      	ldr	r5, [pc, #24]	@ (8012abc <_close_r+0x1c>)
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	4604      	mov	r4, r0
 8012aa8:	4608      	mov	r0, r1
 8012aaa:	602b      	str	r3, [r5, #0]
 8012aac:	f7ef faf0 	bl	8002090 <_close>
 8012ab0:	1c43      	adds	r3, r0, #1
 8012ab2:	d102      	bne.n	8012aba <_close_r+0x1a>
 8012ab4:	682b      	ldr	r3, [r5, #0]
 8012ab6:	b103      	cbz	r3, 8012aba <_close_r+0x1a>
 8012ab8:	6023      	str	r3, [r4, #0]
 8012aba:	bd38      	pop	{r3, r4, r5, pc}
 8012abc:	20005ff8 	.word	0x20005ff8

08012ac0 <_lseek_r>:
 8012ac0:	b538      	push	{r3, r4, r5, lr}
 8012ac2:	4d07      	ldr	r5, [pc, #28]	@ (8012ae0 <_lseek_r+0x20>)
 8012ac4:	4604      	mov	r4, r0
 8012ac6:	4608      	mov	r0, r1
 8012ac8:	4611      	mov	r1, r2
 8012aca:	2200      	movs	r2, #0
 8012acc:	602a      	str	r2, [r5, #0]
 8012ace:	461a      	mov	r2, r3
 8012ad0:	f7ef fb05 	bl	80020de <_lseek>
 8012ad4:	1c43      	adds	r3, r0, #1
 8012ad6:	d102      	bne.n	8012ade <_lseek_r+0x1e>
 8012ad8:	682b      	ldr	r3, [r5, #0]
 8012ada:	b103      	cbz	r3, 8012ade <_lseek_r+0x1e>
 8012adc:	6023      	str	r3, [r4, #0]
 8012ade:	bd38      	pop	{r3, r4, r5, pc}
 8012ae0:	20005ff8 	.word	0x20005ff8

08012ae4 <_read_r>:
 8012ae4:	b538      	push	{r3, r4, r5, lr}
 8012ae6:	4d07      	ldr	r5, [pc, #28]	@ (8012b04 <_read_r+0x20>)
 8012ae8:	4604      	mov	r4, r0
 8012aea:	4608      	mov	r0, r1
 8012aec:	4611      	mov	r1, r2
 8012aee:	2200      	movs	r2, #0
 8012af0:	602a      	str	r2, [r5, #0]
 8012af2:	461a      	mov	r2, r3
 8012af4:	f7ef fa93 	bl	800201e <_read>
 8012af8:	1c43      	adds	r3, r0, #1
 8012afa:	d102      	bne.n	8012b02 <_read_r+0x1e>
 8012afc:	682b      	ldr	r3, [r5, #0]
 8012afe:	b103      	cbz	r3, 8012b02 <_read_r+0x1e>
 8012b00:	6023      	str	r3, [r4, #0]
 8012b02:	bd38      	pop	{r3, r4, r5, pc}
 8012b04:	20005ff8 	.word	0x20005ff8

08012b08 <_sbrk_r>:
 8012b08:	b538      	push	{r3, r4, r5, lr}
 8012b0a:	4d06      	ldr	r5, [pc, #24]	@ (8012b24 <_sbrk_r+0x1c>)
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	4604      	mov	r4, r0
 8012b10:	4608      	mov	r0, r1
 8012b12:	602b      	str	r3, [r5, #0]
 8012b14:	f7ef faf0 	bl	80020f8 <_sbrk>
 8012b18:	1c43      	adds	r3, r0, #1
 8012b1a:	d102      	bne.n	8012b22 <_sbrk_r+0x1a>
 8012b1c:	682b      	ldr	r3, [r5, #0]
 8012b1e:	b103      	cbz	r3, 8012b22 <_sbrk_r+0x1a>
 8012b20:	6023      	str	r3, [r4, #0]
 8012b22:	bd38      	pop	{r3, r4, r5, pc}
 8012b24:	20005ff8 	.word	0x20005ff8

08012b28 <_write_r>:
 8012b28:	b538      	push	{r3, r4, r5, lr}
 8012b2a:	4d07      	ldr	r5, [pc, #28]	@ (8012b48 <_write_r+0x20>)
 8012b2c:	4604      	mov	r4, r0
 8012b2e:	4608      	mov	r0, r1
 8012b30:	4611      	mov	r1, r2
 8012b32:	2200      	movs	r2, #0
 8012b34:	602a      	str	r2, [r5, #0]
 8012b36:	461a      	mov	r2, r3
 8012b38:	f7ef fa8e 	bl	8002058 <_write>
 8012b3c:	1c43      	adds	r3, r0, #1
 8012b3e:	d102      	bne.n	8012b46 <_write_r+0x1e>
 8012b40:	682b      	ldr	r3, [r5, #0]
 8012b42:	b103      	cbz	r3, 8012b46 <_write_r+0x1e>
 8012b44:	6023      	str	r3, [r4, #0]
 8012b46:	bd38      	pop	{r3, r4, r5, pc}
 8012b48:	20005ff8 	.word	0x20005ff8

08012b4c <__errno>:
 8012b4c:	4b01      	ldr	r3, [pc, #4]	@ (8012b54 <__errno+0x8>)
 8012b4e:	6818      	ldr	r0, [r3, #0]
 8012b50:	4770      	bx	lr
 8012b52:	bf00      	nop
 8012b54:	20000818 	.word	0x20000818

08012b58 <__libc_init_array>:
 8012b58:	b570      	push	{r4, r5, r6, lr}
 8012b5a:	4d0d      	ldr	r5, [pc, #52]	@ (8012b90 <__libc_init_array+0x38>)
 8012b5c:	4c0d      	ldr	r4, [pc, #52]	@ (8012b94 <__libc_init_array+0x3c>)
 8012b5e:	1b64      	subs	r4, r4, r5
 8012b60:	10a4      	asrs	r4, r4, #2
 8012b62:	2600      	movs	r6, #0
 8012b64:	42a6      	cmp	r6, r4
 8012b66:	d109      	bne.n	8012b7c <__libc_init_array+0x24>
 8012b68:	4d0b      	ldr	r5, [pc, #44]	@ (8012b98 <__libc_init_array+0x40>)
 8012b6a:	4c0c      	ldr	r4, [pc, #48]	@ (8012b9c <__libc_init_array+0x44>)
 8012b6c:	f001 fd66 	bl	801463c <_init>
 8012b70:	1b64      	subs	r4, r4, r5
 8012b72:	10a4      	asrs	r4, r4, #2
 8012b74:	2600      	movs	r6, #0
 8012b76:	42a6      	cmp	r6, r4
 8012b78:	d105      	bne.n	8012b86 <__libc_init_array+0x2e>
 8012b7a:	bd70      	pop	{r4, r5, r6, pc}
 8012b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b80:	4798      	blx	r3
 8012b82:	3601      	adds	r6, #1
 8012b84:	e7ee      	b.n	8012b64 <__libc_init_array+0xc>
 8012b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b8a:	4798      	blx	r3
 8012b8c:	3601      	adds	r6, #1
 8012b8e:	e7f2      	b.n	8012b76 <__libc_init_array+0x1e>
 8012b90:	080be9f0 	.word	0x080be9f0
 8012b94:	080be9f0 	.word	0x080be9f0
 8012b98:	080be9f0 	.word	0x080be9f0
 8012b9c:	080be9f4 	.word	0x080be9f4

08012ba0 <__retarget_lock_init_recursive>:
 8012ba0:	4770      	bx	lr

08012ba2 <__retarget_lock_acquire_recursive>:
 8012ba2:	4770      	bx	lr

08012ba4 <__retarget_lock_release_recursive>:
 8012ba4:	4770      	bx	lr

08012ba6 <memcpy>:
 8012ba6:	440a      	add	r2, r1
 8012ba8:	4291      	cmp	r1, r2
 8012baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8012bae:	d100      	bne.n	8012bb2 <memcpy+0xc>
 8012bb0:	4770      	bx	lr
 8012bb2:	b510      	push	{r4, lr}
 8012bb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012bb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012bbc:	4291      	cmp	r1, r2
 8012bbe:	d1f9      	bne.n	8012bb4 <memcpy+0xe>
 8012bc0:	bd10      	pop	{r4, pc}

08012bc2 <quorem>:
 8012bc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bc6:	6903      	ldr	r3, [r0, #16]
 8012bc8:	690c      	ldr	r4, [r1, #16]
 8012bca:	42a3      	cmp	r3, r4
 8012bcc:	4607      	mov	r7, r0
 8012bce:	db7e      	blt.n	8012cce <quorem+0x10c>
 8012bd0:	3c01      	subs	r4, #1
 8012bd2:	f101 0814 	add.w	r8, r1, #20
 8012bd6:	00a3      	lsls	r3, r4, #2
 8012bd8:	f100 0514 	add.w	r5, r0, #20
 8012bdc:	9300      	str	r3, [sp, #0]
 8012bde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012be2:	9301      	str	r3, [sp, #4]
 8012be4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012be8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012bec:	3301      	adds	r3, #1
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012bf4:	fbb2 f6f3 	udiv	r6, r2, r3
 8012bf8:	d32e      	bcc.n	8012c58 <quorem+0x96>
 8012bfa:	f04f 0a00 	mov.w	sl, #0
 8012bfe:	46c4      	mov	ip, r8
 8012c00:	46ae      	mov	lr, r5
 8012c02:	46d3      	mov	fp, sl
 8012c04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012c08:	b298      	uxth	r0, r3
 8012c0a:	fb06 a000 	mla	r0, r6, r0, sl
 8012c0e:	0c02      	lsrs	r2, r0, #16
 8012c10:	0c1b      	lsrs	r3, r3, #16
 8012c12:	fb06 2303 	mla	r3, r6, r3, r2
 8012c16:	f8de 2000 	ldr.w	r2, [lr]
 8012c1a:	b280      	uxth	r0, r0
 8012c1c:	b292      	uxth	r2, r2
 8012c1e:	1a12      	subs	r2, r2, r0
 8012c20:	445a      	add	r2, fp
 8012c22:	f8de 0000 	ldr.w	r0, [lr]
 8012c26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012c2a:	b29b      	uxth	r3, r3
 8012c2c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012c30:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012c34:	b292      	uxth	r2, r2
 8012c36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012c3a:	45e1      	cmp	r9, ip
 8012c3c:	f84e 2b04 	str.w	r2, [lr], #4
 8012c40:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012c44:	d2de      	bcs.n	8012c04 <quorem+0x42>
 8012c46:	9b00      	ldr	r3, [sp, #0]
 8012c48:	58eb      	ldr	r3, [r5, r3]
 8012c4a:	b92b      	cbnz	r3, 8012c58 <quorem+0x96>
 8012c4c:	9b01      	ldr	r3, [sp, #4]
 8012c4e:	3b04      	subs	r3, #4
 8012c50:	429d      	cmp	r5, r3
 8012c52:	461a      	mov	r2, r3
 8012c54:	d32f      	bcc.n	8012cb6 <quorem+0xf4>
 8012c56:	613c      	str	r4, [r7, #16]
 8012c58:	4638      	mov	r0, r7
 8012c5a:	f001 f8c5 	bl	8013de8 <__mcmp>
 8012c5e:	2800      	cmp	r0, #0
 8012c60:	db25      	blt.n	8012cae <quorem+0xec>
 8012c62:	4629      	mov	r1, r5
 8012c64:	2000      	movs	r0, #0
 8012c66:	f858 2b04 	ldr.w	r2, [r8], #4
 8012c6a:	f8d1 c000 	ldr.w	ip, [r1]
 8012c6e:	fa1f fe82 	uxth.w	lr, r2
 8012c72:	fa1f f38c 	uxth.w	r3, ip
 8012c76:	eba3 030e 	sub.w	r3, r3, lr
 8012c7a:	4403      	add	r3, r0
 8012c7c:	0c12      	lsrs	r2, r2, #16
 8012c7e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012c82:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012c8c:	45c1      	cmp	r9, r8
 8012c8e:	f841 3b04 	str.w	r3, [r1], #4
 8012c92:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012c96:	d2e6      	bcs.n	8012c66 <quorem+0xa4>
 8012c98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012c9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012ca0:	b922      	cbnz	r2, 8012cac <quorem+0xea>
 8012ca2:	3b04      	subs	r3, #4
 8012ca4:	429d      	cmp	r5, r3
 8012ca6:	461a      	mov	r2, r3
 8012ca8:	d30b      	bcc.n	8012cc2 <quorem+0x100>
 8012caa:	613c      	str	r4, [r7, #16]
 8012cac:	3601      	adds	r6, #1
 8012cae:	4630      	mov	r0, r6
 8012cb0:	b003      	add	sp, #12
 8012cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cb6:	6812      	ldr	r2, [r2, #0]
 8012cb8:	3b04      	subs	r3, #4
 8012cba:	2a00      	cmp	r2, #0
 8012cbc:	d1cb      	bne.n	8012c56 <quorem+0x94>
 8012cbe:	3c01      	subs	r4, #1
 8012cc0:	e7c6      	b.n	8012c50 <quorem+0x8e>
 8012cc2:	6812      	ldr	r2, [r2, #0]
 8012cc4:	3b04      	subs	r3, #4
 8012cc6:	2a00      	cmp	r2, #0
 8012cc8:	d1ef      	bne.n	8012caa <quorem+0xe8>
 8012cca:	3c01      	subs	r4, #1
 8012ccc:	e7ea      	b.n	8012ca4 <quorem+0xe2>
 8012cce:	2000      	movs	r0, #0
 8012cd0:	e7ee      	b.n	8012cb0 <quorem+0xee>
 8012cd2:	0000      	movs	r0, r0
 8012cd4:	0000      	movs	r0, r0
	...

08012cd8 <_dtoa_r>:
 8012cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cdc:	69c7      	ldr	r7, [r0, #28]
 8012cde:	b099      	sub	sp, #100	@ 0x64
 8012ce0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012ce4:	ec55 4b10 	vmov	r4, r5, d0
 8012ce8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012cea:	9109      	str	r1, [sp, #36]	@ 0x24
 8012cec:	4683      	mov	fp, r0
 8012cee:	920e      	str	r2, [sp, #56]	@ 0x38
 8012cf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012cf2:	b97f      	cbnz	r7, 8012d14 <_dtoa_r+0x3c>
 8012cf4:	2010      	movs	r0, #16
 8012cf6:	f7fe ffaf 	bl	8011c58 <malloc>
 8012cfa:	4602      	mov	r2, r0
 8012cfc:	f8cb 001c 	str.w	r0, [fp, #28]
 8012d00:	b920      	cbnz	r0, 8012d0c <_dtoa_r+0x34>
 8012d02:	4ba7      	ldr	r3, [pc, #668]	@ (8012fa0 <_dtoa_r+0x2c8>)
 8012d04:	21ef      	movs	r1, #239	@ 0xef
 8012d06:	48a7      	ldr	r0, [pc, #668]	@ (8012fa4 <_dtoa_r+0x2cc>)
 8012d08:	f001 fbe8 	bl	80144dc <__assert_func>
 8012d0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012d10:	6007      	str	r7, [r0, #0]
 8012d12:	60c7      	str	r7, [r0, #12]
 8012d14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012d18:	6819      	ldr	r1, [r3, #0]
 8012d1a:	b159      	cbz	r1, 8012d34 <_dtoa_r+0x5c>
 8012d1c:	685a      	ldr	r2, [r3, #4]
 8012d1e:	604a      	str	r2, [r1, #4]
 8012d20:	2301      	movs	r3, #1
 8012d22:	4093      	lsls	r3, r2
 8012d24:	608b      	str	r3, [r1, #8]
 8012d26:	4658      	mov	r0, fp
 8012d28:	f000 fe24 	bl	8013974 <_Bfree>
 8012d2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012d30:	2200      	movs	r2, #0
 8012d32:	601a      	str	r2, [r3, #0]
 8012d34:	1e2b      	subs	r3, r5, #0
 8012d36:	bfb9      	ittee	lt
 8012d38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012d3c:	9303      	strlt	r3, [sp, #12]
 8012d3e:	2300      	movge	r3, #0
 8012d40:	6033      	strge	r3, [r6, #0]
 8012d42:	9f03      	ldr	r7, [sp, #12]
 8012d44:	4b98      	ldr	r3, [pc, #608]	@ (8012fa8 <_dtoa_r+0x2d0>)
 8012d46:	bfbc      	itt	lt
 8012d48:	2201      	movlt	r2, #1
 8012d4a:	6032      	strlt	r2, [r6, #0]
 8012d4c:	43bb      	bics	r3, r7
 8012d4e:	d112      	bne.n	8012d76 <_dtoa_r+0x9e>
 8012d50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012d52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012d56:	6013      	str	r3, [r2, #0]
 8012d58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012d5c:	4323      	orrs	r3, r4
 8012d5e:	f000 854d 	beq.w	80137fc <_dtoa_r+0xb24>
 8012d62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012d64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012fbc <_dtoa_r+0x2e4>
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	f000 854f 	beq.w	801380c <_dtoa_r+0xb34>
 8012d6e:	f10a 0303 	add.w	r3, sl, #3
 8012d72:	f000 bd49 	b.w	8013808 <_dtoa_r+0xb30>
 8012d76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	ec51 0b17 	vmov	r0, r1, d7
 8012d80:	2300      	movs	r3, #0
 8012d82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012d86:	f7ed febf 	bl	8000b08 <__aeabi_dcmpeq>
 8012d8a:	4680      	mov	r8, r0
 8012d8c:	b158      	cbz	r0, 8012da6 <_dtoa_r+0xce>
 8012d8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012d90:	2301      	movs	r3, #1
 8012d92:	6013      	str	r3, [r2, #0]
 8012d94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012d96:	b113      	cbz	r3, 8012d9e <_dtoa_r+0xc6>
 8012d98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012d9a:	4b84      	ldr	r3, [pc, #528]	@ (8012fac <_dtoa_r+0x2d4>)
 8012d9c:	6013      	str	r3, [r2, #0]
 8012d9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012fc0 <_dtoa_r+0x2e8>
 8012da2:	f000 bd33 	b.w	801380c <_dtoa_r+0xb34>
 8012da6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012daa:	aa16      	add	r2, sp, #88	@ 0x58
 8012dac:	a917      	add	r1, sp, #92	@ 0x5c
 8012dae:	4658      	mov	r0, fp
 8012db0:	f001 f8ca 	bl	8013f48 <__d2b>
 8012db4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012db8:	4681      	mov	r9, r0
 8012dba:	2e00      	cmp	r6, #0
 8012dbc:	d077      	beq.n	8012eae <_dtoa_r+0x1d6>
 8012dbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012dc0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012dc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012dcc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012dd0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012dd4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012dd8:	4619      	mov	r1, r3
 8012dda:	2200      	movs	r2, #0
 8012ddc:	4b74      	ldr	r3, [pc, #464]	@ (8012fb0 <_dtoa_r+0x2d8>)
 8012dde:	f7ed fa73 	bl	80002c8 <__aeabi_dsub>
 8012de2:	a369      	add	r3, pc, #420	@ (adr r3, 8012f88 <_dtoa_r+0x2b0>)
 8012de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de8:	f7ed fc26 	bl	8000638 <__aeabi_dmul>
 8012dec:	a368      	add	r3, pc, #416	@ (adr r3, 8012f90 <_dtoa_r+0x2b8>)
 8012dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df2:	f7ed fa6b 	bl	80002cc <__adddf3>
 8012df6:	4604      	mov	r4, r0
 8012df8:	4630      	mov	r0, r6
 8012dfa:	460d      	mov	r5, r1
 8012dfc:	f7ed fbb2 	bl	8000564 <__aeabi_i2d>
 8012e00:	a365      	add	r3, pc, #404	@ (adr r3, 8012f98 <_dtoa_r+0x2c0>)
 8012e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e06:	f7ed fc17 	bl	8000638 <__aeabi_dmul>
 8012e0a:	4602      	mov	r2, r0
 8012e0c:	460b      	mov	r3, r1
 8012e0e:	4620      	mov	r0, r4
 8012e10:	4629      	mov	r1, r5
 8012e12:	f7ed fa5b 	bl	80002cc <__adddf3>
 8012e16:	4604      	mov	r4, r0
 8012e18:	460d      	mov	r5, r1
 8012e1a:	f7ed febd 	bl	8000b98 <__aeabi_d2iz>
 8012e1e:	2200      	movs	r2, #0
 8012e20:	4607      	mov	r7, r0
 8012e22:	2300      	movs	r3, #0
 8012e24:	4620      	mov	r0, r4
 8012e26:	4629      	mov	r1, r5
 8012e28:	f7ed fe78 	bl	8000b1c <__aeabi_dcmplt>
 8012e2c:	b140      	cbz	r0, 8012e40 <_dtoa_r+0x168>
 8012e2e:	4638      	mov	r0, r7
 8012e30:	f7ed fb98 	bl	8000564 <__aeabi_i2d>
 8012e34:	4622      	mov	r2, r4
 8012e36:	462b      	mov	r3, r5
 8012e38:	f7ed fe66 	bl	8000b08 <__aeabi_dcmpeq>
 8012e3c:	b900      	cbnz	r0, 8012e40 <_dtoa_r+0x168>
 8012e3e:	3f01      	subs	r7, #1
 8012e40:	2f16      	cmp	r7, #22
 8012e42:	d851      	bhi.n	8012ee8 <_dtoa_r+0x210>
 8012e44:	4b5b      	ldr	r3, [pc, #364]	@ (8012fb4 <_dtoa_r+0x2dc>)
 8012e46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012e52:	f7ed fe63 	bl	8000b1c <__aeabi_dcmplt>
 8012e56:	2800      	cmp	r0, #0
 8012e58:	d048      	beq.n	8012eec <_dtoa_r+0x214>
 8012e5a:	3f01      	subs	r7, #1
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8012e60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012e62:	1b9b      	subs	r3, r3, r6
 8012e64:	1e5a      	subs	r2, r3, #1
 8012e66:	bf44      	itt	mi
 8012e68:	f1c3 0801 	rsbmi	r8, r3, #1
 8012e6c:	2300      	movmi	r3, #0
 8012e6e:	9208      	str	r2, [sp, #32]
 8012e70:	bf54      	ite	pl
 8012e72:	f04f 0800 	movpl.w	r8, #0
 8012e76:	9308      	strmi	r3, [sp, #32]
 8012e78:	2f00      	cmp	r7, #0
 8012e7a:	db39      	blt.n	8012ef0 <_dtoa_r+0x218>
 8012e7c:	9b08      	ldr	r3, [sp, #32]
 8012e7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012e80:	443b      	add	r3, r7
 8012e82:	9308      	str	r3, [sp, #32]
 8012e84:	2300      	movs	r3, #0
 8012e86:	930a      	str	r3, [sp, #40]	@ 0x28
 8012e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e8a:	2b09      	cmp	r3, #9
 8012e8c:	d864      	bhi.n	8012f58 <_dtoa_r+0x280>
 8012e8e:	2b05      	cmp	r3, #5
 8012e90:	bfc4      	itt	gt
 8012e92:	3b04      	subgt	r3, #4
 8012e94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e98:	f1a3 0302 	sub.w	r3, r3, #2
 8012e9c:	bfcc      	ite	gt
 8012e9e:	2400      	movgt	r4, #0
 8012ea0:	2401      	movle	r4, #1
 8012ea2:	2b03      	cmp	r3, #3
 8012ea4:	d863      	bhi.n	8012f6e <_dtoa_r+0x296>
 8012ea6:	e8df f003 	tbb	[pc, r3]
 8012eaa:	372a      	.short	0x372a
 8012eac:	5535      	.short	0x5535
 8012eae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012eb2:	441e      	add	r6, r3
 8012eb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012eb8:	2b20      	cmp	r3, #32
 8012eba:	bfc1      	itttt	gt
 8012ebc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012ec0:	409f      	lslgt	r7, r3
 8012ec2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012ec6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012eca:	bfd6      	itet	le
 8012ecc:	f1c3 0320 	rsble	r3, r3, #32
 8012ed0:	ea47 0003 	orrgt.w	r0, r7, r3
 8012ed4:	fa04 f003 	lslle.w	r0, r4, r3
 8012ed8:	f7ed fb34 	bl	8000544 <__aeabi_ui2d>
 8012edc:	2201      	movs	r2, #1
 8012ede:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012ee2:	3e01      	subs	r6, #1
 8012ee4:	9214      	str	r2, [sp, #80]	@ 0x50
 8012ee6:	e777      	b.n	8012dd8 <_dtoa_r+0x100>
 8012ee8:	2301      	movs	r3, #1
 8012eea:	e7b8      	b.n	8012e5e <_dtoa_r+0x186>
 8012eec:	9012      	str	r0, [sp, #72]	@ 0x48
 8012eee:	e7b7      	b.n	8012e60 <_dtoa_r+0x188>
 8012ef0:	427b      	negs	r3, r7
 8012ef2:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	eba8 0807 	sub.w	r8, r8, r7
 8012efa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012efc:	e7c4      	b.n	8012e88 <_dtoa_r+0x1b0>
 8012efe:	2300      	movs	r3, #0
 8012f00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	dc35      	bgt.n	8012f74 <_dtoa_r+0x29c>
 8012f08:	2301      	movs	r3, #1
 8012f0a:	9300      	str	r3, [sp, #0]
 8012f0c:	9307      	str	r3, [sp, #28]
 8012f0e:	461a      	mov	r2, r3
 8012f10:	920e      	str	r2, [sp, #56]	@ 0x38
 8012f12:	e00b      	b.n	8012f2c <_dtoa_r+0x254>
 8012f14:	2301      	movs	r3, #1
 8012f16:	e7f3      	b.n	8012f00 <_dtoa_r+0x228>
 8012f18:	2300      	movs	r3, #0
 8012f1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f1e:	18fb      	adds	r3, r7, r3
 8012f20:	9300      	str	r3, [sp, #0]
 8012f22:	3301      	adds	r3, #1
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	9307      	str	r3, [sp, #28]
 8012f28:	bfb8      	it	lt
 8012f2a:	2301      	movlt	r3, #1
 8012f2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012f30:	2100      	movs	r1, #0
 8012f32:	2204      	movs	r2, #4
 8012f34:	f102 0514 	add.w	r5, r2, #20
 8012f38:	429d      	cmp	r5, r3
 8012f3a:	d91f      	bls.n	8012f7c <_dtoa_r+0x2a4>
 8012f3c:	6041      	str	r1, [r0, #4]
 8012f3e:	4658      	mov	r0, fp
 8012f40:	f000 fcd8 	bl	80138f4 <_Balloc>
 8012f44:	4682      	mov	sl, r0
 8012f46:	2800      	cmp	r0, #0
 8012f48:	d13c      	bne.n	8012fc4 <_dtoa_r+0x2ec>
 8012f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8012fb8 <_dtoa_r+0x2e0>)
 8012f4c:	4602      	mov	r2, r0
 8012f4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012f52:	e6d8      	b.n	8012d06 <_dtoa_r+0x2e>
 8012f54:	2301      	movs	r3, #1
 8012f56:	e7e0      	b.n	8012f1a <_dtoa_r+0x242>
 8012f58:	2401      	movs	r4, #1
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012f60:	f04f 33ff 	mov.w	r3, #4294967295
 8012f64:	9300      	str	r3, [sp, #0]
 8012f66:	9307      	str	r3, [sp, #28]
 8012f68:	2200      	movs	r2, #0
 8012f6a:	2312      	movs	r3, #18
 8012f6c:	e7d0      	b.n	8012f10 <_dtoa_r+0x238>
 8012f6e:	2301      	movs	r3, #1
 8012f70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f72:	e7f5      	b.n	8012f60 <_dtoa_r+0x288>
 8012f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f76:	9300      	str	r3, [sp, #0]
 8012f78:	9307      	str	r3, [sp, #28]
 8012f7a:	e7d7      	b.n	8012f2c <_dtoa_r+0x254>
 8012f7c:	3101      	adds	r1, #1
 8012f7e:	0052      	lsls	r2, r2, #1
 8012f80:	e7d8      	b.n	8012f34 <_dtoa_r+0x25c>
 8012f82:	bf00      	nop
 8012f84:	f3af 8000 	nop.w
 8012f88:	636f4361 	.word	0x636f4361
 8012f8c:	3fd287a7 	.word	0x3fd287a7
 8012f90:	8b60c8b3 	.word	0x8b60c8b3
 8012f94:	3fc68a28 	.word	0x3fc68a28
 8012f98:	509f79fb 	.word	0x509f79fb
 8012f9c:	3fd34413 	.word	0x3fd34413
 8012fa0:	080be6b9 	.word	0x080be6b9
 8012fa4:	080be6d0 	.word	0x080be6d0
 8012fa8:	7ff00000 	.word	0x7ff00000
 8012fac:	080be689 	.word	0x080be689
 8012fb0:	3ff80000 	.word	0x3ff80000
 8012fb4:	080be7c8 	.word	0x080be7c8
 8012fb8:	080be728 	.word	0x080be728
 8012fbc:	080be6b5 	.word	0x080be6b5
 8012fc0:	080be688 	.word	0x080be688
 8012fc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012fc8:	6018      	str	r0, [r3, #0]
 8012fca:	9b07      	ldr	r3, [sp, #28]
 8012fcc:	2b0e      	cmp	r3, #14
 8012fce:	f200 80a4 	bhi.w	801311a <_dtoa_r+0x442>
 8012fd2:	2c00      	cmp	r4, #0
 8012fd4:	f000 80a1 	beq.w	801311a <_dtoa_r+0x442>
 8012fd8:	2f00      	cmp	r7, #0
 8012fda:	dd33      	ble.n	8013044 <_dtoa_r+0x36c>
 8012fdc:	4bad      	ldr	r3, [pc, #692]	@ (8013294 <_dtoa_r+0x5bc>)
 8012fde:	f007 020f 	and.w	r2, r7, #15
 8012fe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012fe6:	ed93 7b00 	vldr	d7, [r3]
 8012fea:	05f8      	lsls	r0, r7, #23
 8012fec:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012ff0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012ff4:	d516      	bpl.n	8013024 <_dtoa_r+0x34c>
 8012ff6:	4ba8      	ldr	r3, [pc, #672]	@ (8013298 <_dtoa_r+0x5c0>)
 8012ff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012ffc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013000:	f7ed fc44 	bl	800088c <__aeabi_ddiv>
 8013004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013008:	f004 040f 	and.w	r4, r4, #15
 801300c:	2603      	movs	r6, #3
 801300e:	4da2      	ldr	r5, [pc, #648]	@ (8013298 <_dtoa_r+0x5c0>)
 8013010:	b954      	cbnz	r4, 8013028 <_dtoa_r+0x350>
 8013012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801301a:	f7ed fc37 	bl	800088c <__aeabi_ddiv>
 801301e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013022:	e028      	b.n	8013076 <_dtoa_r+0x39e>
 8013024:	2602      	movs	r6, #2
 8013026:	e7f2      	b.n	801300e <_dtoa_r+0x336>
 8013028:	07e1      	lsls	r1, r4, #31
 801302a:	d508      	bpl.n	801303e <_dtoa_r+0x366>
 801302c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013030:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013034:	f7ed fb00 	bl	8000638 <__aeabi_dmul>
 8013038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801303c:	3601      	adds	r6, #1
 801303e:	1064      	asrs	r4, r4, #1
 8013040:	3508      	adds	r5, #8
 8013042:	e7e5      	b.n	8013010 <_dtoa_r+0x338>
 8013044:	f000 80d2 	beq.w	80131ec <_dtoa_r+0x514>
 8013048:	427c      	negs	r4, r7
 801304a:	4b92      	ldr	r3, [pc, #584]	@ (8013294 <_dtoa_r+0x5bc>)
 801304c:	4d92      	ldr	r5, [pc, #584]	@ (8013298 <_dtoa_r+0x5c0>)
 801304e:	f004 020f 	and.w	r2, r4, #15
 8013052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801305a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801305e:	f7ed faeb 	bl	8000638 <__aeabi_dmul>
 8013062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013066:	1124      	asrs	r4, r4, #4
 8013068:	2300      	movs	r3, #0
 801306a:	2602      	movs	r6, #2
 801306c:	2c00      	cmp	r4, #0
 801306e:	f040 80b2 	bne.w	80131d6 <_dtoa_r+0x4fe>
 8013072:	2b00      	cmp	r3, #0
 8013074:	d1d3      	bne.n	801301e <_dtoa_r+0x346>
 8013076:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013078:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801307c:	2b00      	cmp	r3, #0
 801307e:	f000 80b7 	beq.w	80131f0 <_dtoa_r+0x518>
 8013082:	4b86      	ldr	r3, [pc, #536]	@ (801329c <_dtoa_r+0x5c4>)
 8013084:	2200      	movs	r2, #0
 8013086:	4620      	mov	r0, r4
 8013088:	4629      	mov	r1, r5
 801308a:	f7ed fd47 	bl	8000b1c <__aeabi_dcmplt>
 801308e:	2800      	cmp	r0, #0
 8013090:	f000 80ae 	beq.w	80131f0 <_dtoa_r+0x518>
 8013094:	9b07      	ldr	r3, [sp, #28]
 8013096:	2b00      	cmp	r3, #0
 8013098:	f000 80aa 	beq.w	80131f0 <_dtoa_r+0x518>
 801309c:	9b00      	ldr	r3, [sp, #0]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	dd37      	ble.n	8013112 <_dtoa_r+0x43a>
 80130a2:	1e7b      	subs	r3, r7, #1
 80130a4:	9304      	str	r3, [sp, #16]
 80130a6:	4620      	mov	r0, r4
 80130a8:	4b7d      	ldr	r3, [pc, #500]	@ (80132a0 <_dtoa_r+0x5c8>)
 80130aa:	2200      	movs	r2, #0
 80130ac:	4629      	mov	r1, r5
 80130ae:	f7ed fac3 	bl	8000638 <__aeabi_dmul>
 80130b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130b6:	9c00      	ldr	r4, [sp, #0]
 80130b8:	3601      	adds	r6, #1
 80130ba:	4630      	mov	r0, r6
 80130bc:	f7ed fa52 	bl	8000564 <__aeabi_i2d>
 80130c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80130c4:	f7ed fab8 	bl	8000638 <__aeabi_dmul>
 80130c8:	4b76      	ldr	r3, [pc, #472]	@ (80132a4 <_dtoa_r+0x5cc>)
 80130ca:	2200      	movs	r2, #0
 80130cc:	f7ed f8fe 	bl	80002cc <__adddf3>
 80130d0:	4605      	mov	r5, r0
 80130d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80130d6:	2c00      	cmp	r4, #0
 80130d8:	f040 808d 	bne.w	80131f6 <_dtoa_r+0x51e>
 80130dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130e0:	4b71      	ldr	r3, [pc, #452]	@ (80132a8 <_dtoa_r+0x5d0>)
 80130e2:	2200      	movs	r2, #0
 80130e4:	f7ed f8f0 	bl	80002c8 <__aeabi_dsub>
 80130e8:	4602      	mov	r2, r0
 80130ea:	460b      	mov	r3, r1
 80130ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80130f0:	462a      	mov	r2, r5
 80130f2:	4633      	mov	r3, r6
 80130f4:	f7ed fd30 	bl	8000b58 <__aeabi_dcmpgt>
 80130f8:	2800      	cmp	r0, #0
 80130fa:	f040 828b 	bne.w	8013614 <_dtoa_r+0x93c>
 80130fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013102:	462a      	mov	r2, r5
 8013104:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013108:	f7ed fd08 	bl	8000b1c <__aeabi_dcmplt>
 801310c:	2800      	cmp	r0, #0
 801310e:	f040 8128 	bne.w	8013362 <_dtoa_r+0x68a>
 8013112:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013116:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801311a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801311c:	2b00      	cmp	r3, #0
 801311e:	f2c0 815a 	blt.w	80133d6 <_dtoa_r+0x6fe>
 8013122:	2f0e      	cmp	r7, #14
 8013124:	f300 8157 	bgt.w	80133d6 <_dtoa_r+0x6fe>
 8013128:	4b5a      	ldr	r3, [pc, #360]	@ (8013294 <_dtoa_r+0x5bc>)
 801312a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801312e:	ed93 7b00 	vldr	d7, [r3]
 8013132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013134:	2b00      	cmp	r3, #0
 8013136:	ed8d 7b00 	vstr	d7, [sp]
 801313a:	da03      	bge.n	8013144 <_dtoa_r+0x46c>
 801313c:	9b07      	ldr	r3, [sp, #28]
 801313e:	2b00      	cmp	r3, #0
 8013140:	f340 8101 	ble.w	8013346 <_dtoa_r+0x66e>
 8013144:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013148:	4656      	mov	r6, sl
 801314a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801314e:	4620      	mov	r0, r4
 8013150:	4629      	mov	r1, r5
 8013152:	f7ed fb9b 	bl	800088c <__aeabi_ddiv>
 8013156:	f7ed fd1f 	bl	8000b98 <__aeabi_d2iz>
 801315a:	4680      	mov	r8, r0
 801315c:	f7ed fa02 	bl	8000564 <__aeabi_i2d>
 8013160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013164:	f7ed fa68 	bl	8000638 <__aeabi_dmul>
 8013168:	4602      	mov	r2, r0
 801316a:	460b      	mov	r3, r1
 801316c:	4620      	mov	r0, r4
 801316e:	4629      	mov	r1, r5
 8013170:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013174:	f7ed f8a8 	bl	80002c8 <__aeabi_dsub>
 8013178:	f806 4b01 	strb.w	r4, [r6], #1
 801317c:	9d07      	ldr	r5, [sp, #28]
 801317e:	eba6 040a 	sub.w	r4, r6, sl
 8013182:	42a5      	cmp	r5, r4
 8013184:	4602      	mov	r2, r0
 8013186:	460b      	mov	r3, r1
 8013188:	f040 8117 	bne.w	80133ba <_dtoa_r+0x6e2>
 801318c:	f7ed f89e 	bl	80002cc <__adddf3>
 8013190:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013194:	4604      	mov	r4, r0
 8013196:	460d      	mov	r5, r1
 8013198:	f7ed fcde 	bl	8000b58 <__aeabi_dcmpgt>
 801319c:	2800      	cmp	r0, #0
 801319e:	f040 80f9 	bne.w	8013394 <_dtoa_r+0x6bc>
 80131a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131a6:	4620      	mov	r0, r4
 80131a8:	4629      	mov	r1, r5
 80131aa:	f7ed fcad 	bl	8000b08 <__aeabi_dcmpeq>
 80131ae:	b118      	cbz	r0, 80131b8 <_dtoa_r+0x4e0>
 80131b0:	f018 0f01 	tst.w	r8, #1
 80131b4:	f040 80ee 	bne.w	8013394 <_dtoa_r+0x6bc>
 80131b8:	4649      	mov	r1, r9
 80131ba:	4658      	mov	r0, fp
 80131bc:	f000 fbda 	bl	8013974 <_Bfree>
 80131c0:	2300      	movs	r3, #0
 80131c2:	7033      	strb	r3, [r6, #0]
 80131c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80131c6:	3701      	adds	r7, #1
 80131c8:	601f      	str	r7, [r3, #0]
 80131ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	f000 831d 	beq.w	801380c <_dtoa_r+0xb34>
 80131d2:	601e      	str	r6, [r3, #0]
 80131d4:	e31a      	b.n	801380c <_dtoa_r+0xb34>
 80131d6:	07e2      	lsls	r2, r4, #31
 80131d8:	d505      	bpl.n	80131e6 <_dtoa_r+0x50e>
 80131da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80131de:	f7ed fa2b 	bl	8000638 <__aeabi_dmul>
 80131e2:	3601      	adds	r6, #1
 80131e4:	2301      	movs	r3, #1
 80131e6:	1064      	asrs	r4, r4, #1
 80131e8:	3508      	adds	r5, #8
 80131ea:	e73f      	b.n	801306c <_dtoa_r+0x394>
 80131ec:	2602      	movs	r6, #2
 80131ee:	e742      	b.n	8013076 <_dtoa_r+0x39e>
 80131f0:	9c07      	ldr	r4, [sp, #28]
 80131f2:	9704      	str	r7, [sp, #16]
 80131f4:	e761      	b.n	80130ba <_dtoa_r+0x3e2>
 80131f6:	4b27      	ldr	r3, [pc, #156]	@ (8013294 <_dtoa_r+0x5bc>)
 80131f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80131fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80131fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013202:	4454      	add	r4, sl
 8013204:	2900      	cmp	r1, #0
 8013206:	d053      	beq.n	80132b0 <_dtoa_r+0x5d8>
 8013208:	4928      	ldr	r1, [pc, #160]	@ (80132ac <_dtoa_r+0x5d4>)
 801320a:	2000      	movs	r0, #0
 801320c:	f7ed fb3e 	bl	800088c <__aeabi_ddiv>
 8013210:	4633      	mov	r3, r6
 8013212:	462a      	mov	r2, r5
 8013214:	f7ed f858 	bl	80002c8 <__aeabi_dsub>
 8013218:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801321c:	4656      	mov	r6, sl
 801321e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013222:	f7ed fcb9 	bl	8000b98 <__aeabi_d2iz>
 8013226:	4605      	mov	r5, r0
 8013228:	f7ed f99c 	bl	8000564 <__aeabi_i2d>
 801322c:	4602      	mov	r2, r0
 801322e:	460b      	mov	r3, r1
 8013230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013234:	f7ed f848 	bl	80002c8 <__aeabi_dsub>
 8013238:	3530      	adds	r5, #48	@ 0x30
 801323a:	4602      	mov	r2, r0
 801323c:	460b      	mov	r3, r1
 801323e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013242:	f806 5b01 	strb.w	r5, [r6], #1
 8013246:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801324a:	f7ed fc67 	bl	8000b1c <__aeabi_dcmplt>
 801324e:	2800      	cmp	r0, #0
 8013250:	d171      	bne.n	8013336 <_dtoa_r+0x65e>
 8013252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013256:	4911      	ldr	r1, [pc, #68]	@ (801329c <_dtoa_r+0x5c4>)
 8013258:	2000      	movs	r0, #0
 801325a:	f7ed f835 	bl	80002c8 <__aeabi_dsub>
 801325e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013262:	f7ed fc5b 	bl	8000b1c <__aeabi_dcmplt>
 8013266:	2800      	cmp	r0, #0
 8013268:	f040 8095 	bne.w	8013396 <_dtoa_r+0x6be>
 801326c:	42a6      	cmp	r6, r4
 801326e:	f43f af50 	beq.w	8013112 <_dtoa_r+0x43a>
 8013272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013276:	4b0a      	ldr	r3, [pc, #40]	@ (80132a0 <_dtoa_r+0x5c8>)
 8013278:	2200      	movs	r2, #0
 801327a:	f7ed f9dd 	bl	8000638 <__aeabi_dmul>
 801327e:	4b08      	ldr	r3, [pc, #32]	@ (80132a0 <_dtoa_r+0x5c8>)
 8013280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013284:	2200      	movs	r2, #0
 8013286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801328a:	f7ed f9d5 	bl	8000638 <__aeabi_dmul>
 801328e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013292:	e7c4      	b.n	801321e <_dtoa_r+0x546>
 8013294:	080be7c8 	.word	0x080be7c8
 8013298:	080be7a0 	.word	0x080be7a0
 801329c:	3ff00000 	.word	0x3ff00000
 80132a0:	40240000 	.word	0x40240000
 80132a4:	401c0000 	.word	0x401c0000
 80132a8:	40140000 	.word	0x40140000
 80132ac:	3fe00000 	.word	0x3fe00000
 80132b0:	4631      	mov	r1, r6
 80132b2:	4628      	mov	r0, r5
 80132b4:	f7ed f9c0 	bl	8000638 <__aeabi_dmul>
 80132b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80132bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80132be:	4656      	mov	r6, sl
 80132c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132c4:	f7ed fc68 	bl	8000b98 <__aeabi_d2iz>
 80132c8:	4605      	mov	r5, r0
 80132ca:	f7ed f94b 	bl	8000564 <__aeabi_i2d>
 80132ce:	4602      	mov	r2, r0
 80132d0:	460b      	mov	r3, r1
 80132d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132d6:	f7ec fff7 	bl	80002c8 <__aeabi_dsub>
 80132da:	3530      	adds	r5, #48	@ 0x30
 80132dc:	f806 5b01 	strb.w	r5, [r6], #1
 80132e0:	4602      	mov	r2, r0
 80132e2:	460b      	mov	r3, r1
 80132e4:	42a6      	cmp	r6, r4
 80132e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80132ea:	f04f 0200 	mov.w	r2, #0
 80132ee:	d124      	bne.n	801333a <_dtoa_r+0x662>
 80132f0:	4bac      	ldr	r3, [pc, #688]	@ (80135a4 <_dtoa_r+0x8cc>)
 80132f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80132f6:	f7ec ffe9 	bl	80002cc <__adddf3>
 80132fa:	4602      	mov	r2, r0
 80132fc:	460b      	mov	r3, r1
 80132fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013302:	f7ed fc29 	bl	8000b58 <__aeabi_dcmpgt>
 8013306:	2800      	cmp	r0, #0
 8013308:	d145      	bne.n	8013396 <_dtoa_r+0x6be>
 801330a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801330e:	49a5      	ldr	r1, [pc, #660]	@ (80135a4 <_dtoa_r+0x8cc>)
 8013310:	2000      	movs	r0, #0
 8013312:	f7ec ffd9 	bl	80002c8 <__aeabi_dsub>
 8013316:	4602      	mov	r2, r0
 8013318:	460b      	mov	r3, r1
 801331a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801331e:	f7ed fbfd 	bl	8000b1c <__aeabi_dcmplt>
 8013322:	2800      	cmp	r0, #0
 8013324:	f43f aef5 	beq.w	8013112 <_dtoa_r+0x43a>
 8013328:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801332a:	1e73      	subs	r3, r6, #1
 801332c:	9315      	str	r3, [sp, #84]	@ 0x54
 801332e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013332:	2b30      	cmp	r3, #48	@ 0x30
 8013334:	d0f8      	beq.n	8013328 <_dtoa_r+0x650>
 8013336:	9f04      	ldr	r7, [sp, #16]
 8013338:	e73e      	b.n	80131b8 <_dtoa_r+0x4e0>
 801333a:	4b9b      	ldr	r3, [pc, #620]	@ (80135a8 <_dtoa_r+0x8d0>)
 801333c:	f7ed f97c 	bl	8000638 <__aeabi_dmul>
 8013340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013344:	e7bc      	b.n	80132c0 <_dtoa_r+0x5e8>
 8013346:	d10c      	bne.n	8013362 <_dtoa_r+0x68a>
 8013348:	4b98      	ldr	r3, [pc, #608]	@ (80135ac <_dtoa_r+0x8d4>)
 801334a:	2200      	movs	r2, #0
 801334c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013350:	f7ed f972 	bl	8000638 <__aeabi_dmul>
 8013354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013358:	f7ed fbf4 	bl	8000b44 <__aeabi_dcmpge>
 801335c:	2800      	cmp	r0, #0
 801335e:	f000 8157 	beq.w	8013610 <_dtoa_r+0x938>
 8013362:	2400      	movs	r4, #0
 8013364:	4625      	mov	r5, r4
 8013366:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013368:	43db      	mvns	r3, r3
 801336a:	9304      	str	r3, [sp, #16]
 801336c:	4656      	mov	r6, sl
 801336e:	2700      	movs	r7, #0
 8013370:	4621      	mov	r1, r4
 8013372:	4658      	mov	r0, fp
 8013374:	f000 fafe 	bl	8013974 <_Bfree>
 8013378:	2d00      	cmp	r5, #0
 801337a:	d0dc      	beq.n	8013336 <_dtoa_r+0x65e>
 801337c:	b12f      	cbz	r7, 801338a <_dtoa_r+0x6b2>
 801337e:	42af      	cmp	r7, r5
 8013380:	d003      	beq.n	801338a <_dtoa_r+0x6b2>
 8013382:	4639      	mov	r1, r7
 8013384:	4658      	mov	r0, fp
 8013386:	f000 faf5 	bl	8013974 <_Bfree>
 801338a:	4629      	mov	r1, r5
 801338c:	4658      	mov	r0, fp
 801338e:	f000 faf1 	bl	8013974 <_Bfree>
 8013392:	e7d0      	b.n	8013336 <_dtoa_r+0x65e>
 8013394:	9704      	str	r7, [sp, #16]
 8013396:	4633      	mov	r3, r6
 8013398:	461e      	mov	r6, r3
 801339a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801339e:	2a39      	cmp	r2, #57	@ 0x39
 80133a0:	d107      	bne.n	80133b2 <_dtoa_r+0x6da>
 80133a2:	459a      	cmp	sl, r3
 80133a4:	d1f8      	bne.n	8013398 <_dtoa_r+0x6c0>
 80133a6:	9a04      	ldr	r2, [sp, #16]
 80133a8:	3201      	adds	r2, #1
 80133aa:	9204      	str	r2, [sp, #16]
 80133ac:	2230      	movs	r2, #48	@ 0x30
 80133ae:	f88a 2000 	strb.w	r2, [sl]
 80133b2:	781a      	ldrb	r2, [r3, #0]
 80133b4:	3201      	adds	r2, #1
 80133b6:	701a      	strb	r2, [r3, #0]
 80133b8:	e7bd      	b.n	8013336 <_dtoa_r+0x65e>
 80133ba:	4b7b      	ldr	r3, [pc, #492]	@ (80135a8 <_dtoa_r+0x8d0>)
 80133bc:	2200      	movs	r2, #0
 80133be:	f7ed f93b 	bl	8000638 <__aeabi_dmul>
 80133c2:	2200      	movs	r2, #0
 80133c4:	2300      	movs	r3, #0
 80133c6:	4604      	mov	r4, r0
 80133c8:	460d      	mov	r5, r1
 80133ca:	f7ed fb9d 	bl	8000b08 <__aeabi_dcmpeq>
 80133ce:	2800      	cmp	r0, #0
 80133d0:	f43f aebb 	beq.w	801314a <_dtoa_r+0x472>
 80133d4:	e6f0      	b.n	80131b8 <_dtoa_r+0x4e0>
 80133d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80133d8:	2a00      	cmp	r2, #0
 80133da:	f000 80db 	beq.w	8013594 <_dtoa_r+0x8bc>
 80133de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80133e0:	2a01      	cmp	r2, #1
 80133e2:	f300 80bf 	bgt.w	8013564 <_dtoa_r+0x88c>
 80133e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80133e8:	2a00      	cmp	r2, #0
 80133ea:	f000 80b7 	beq.w	801355c <_dtoa_r+0x884>
 80133ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80133f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80133f4:	4646      	mov	r6, r8
 80133f6:	9a08      	ldr	r2, [sp, #32]
 80133f8:	2101      	movs	r1, #1
 80133fa:	441a      	add	r2, r3
 80133fc:	4658      	mov	r0, fp
 80133fe:	4498      	add	r8, r3
 8013400:	9208      	str	r2, [sp, #32]
 8013402:	f000 fb6b 	bl	8013adc <__i2b>
 8013406:	4605      	mov	r5, r0
 8013408:	b15e      	cbz	r6, 8013422 <_dtoa_r+0x74a>
 801340a:	9b08      	ldr	r3, [sp, #32]
 801340c:	2b00      	cmp	r3, #0
 801340e:	dd08      	ble.n	8013422 <_dtoa_r+0x74a>
 8013410:	42b3      	cmp	r3, r6
 8013412:	9a08      	ldr	r2, [sp, #32]
 8013414:	bfa8      	it	ge
 8013416:	4633      	movge	r3, r6
 8013418:	eba8 0803 	sub.w	r8, r8, r3
 801341c:	1af6      	subs	r6, r6, r3
 801341e:	1ad3      	subs	r3, r2, r3
 8013420:	9308      	str	r3, [sp, #32]
 8013422:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013424:	b1f3      	cbz	r3, 8013464 <_dtoa_r+0x78c>
 8013426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013428:	2b00      	cmp	r3, #0
 801342a:	f000 80b7 	beq.w	801359c <_dtoa_r+0x8c4>
 801342e:	b18c      	cbz	r4, 8013454 <_dtoa_r+0x77c>
 8013430:	4629      	mov	r1, r5
 8013432:	4622      	mov	r2, r4
 8013434:	4658      	mov	r0, fp
 8013436:	f000 fc11 	bl	8013c5c <__pow5mult>
 801343a:	464a      	mov	r2, r9
 801343c:	4601      	mov	r1, r0
 801343e:	4605      	mov	r5, r0
 8013440:	4658      	mov	r0, fp
 8013442:	f000 fb61 	bl	8013b08 <__multiply>
 8013446:	4649      	mov	r1, r9
 8013448:	9004      	str	r0, [sp, #16]
 801344a:	4658      	mov	r0, fp
 801344c:	f000 fa92 	bl	8013974 <_Bfree>
 8013450:	9b04      	ldr	r3, [sp, #16]
 8013452:	4699      	mov	r9, r3
 8013454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013456:	1b1a      	subs	r2, r3, r4
 8013458:	d004      	beq.n	8013464 <_dtoa_r+0x78c>
 801345a:	4649      	mov	r1, r9
 801345c:	4658      	mov	r0, fp
 801345e:	f000 fbfd 	bl	8013c5c <__pow5mult>
 8013462:	4681      	mov	r9, r0
 8013464:	2101      	movs	r1, #1
 8013466:	4658      	mov	r0, fp
 8013468:	f000 fb38 	bl	8013adc <__i2b>
 801346c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801346e:	4604      	mov	r4, r0
 8013470:	2b00      	cmp	r3, #0
 8013472:	f000 81cf 	beq.w	8013814 <_dtoa_r+0xb3c>
 8013476:	461a      	mov	r2, r3
 8013478:	4601      	mov	r1, r0
 801347a:	4658      	mov	r0, fp
 801347c:	f000 fbee 	bl	8013c5c <__pow5mult>
 8013480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013482:	2b01      	cmp	r3, #1
 8013484:	4604      	mov	r4, r0
 8013486:	f300 8095 	bgt.w	80135b4 <_dtoa_r+0x8dc>
 801348a:	9b02      	ldr	r3, [sp, #8]
 801348c:	2b00      	cmp	r3, #0
 801348e:	f040 8087 	bne.w	80135a0 <_dtoa_r+0x8c8>
 8013492:	9b03      	ldr	r3, [sp, #12]
 8013494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013498:	2b00      	cmp	r3, #0
 801349a:	f040 8089 	bne.w	80135b0 <_dtoa_r+0x8d8>
 801349e:	9b03      	ldr	r3, [sp, #12]
 80134a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80134a4:	0d1b      	lsrs	r3, r3, #20
 80134a6:	051b      	lsls	r3, r3, #20
 80134a8:	b12b      	cbz	r3, 80134b6 <_dtoa_r+0x7de>
 80134aa:	9b08      	ldr	r3, [sp, #32]
 80134ac:	3301      	adds	r3, #1
 80134ae:	9308      	str	r3, [sp, #32]
 80134b0:	f108 0801 	add.w	r8, r8, #1
 80134b4:	2301      	movs	r3, #1
 80134b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80134b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	f000 81b0 	beq.w	8013820 <_dtoa_r+0xb48>
 80134c0:	6923      	ldr	r3, [r4, #16]
 80134c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80134c6:	6918      	ldr	r0, [r3, #16]
 80134c8:	f000 fabc 	bl	8013a44 <__hi0bits>
 80134cc:	f1c0 0020 	rsb	r0, r0, #32
 80134d0:	9b08      	ldr	r3, [sp, #32]
 80134d2:	4418      	add	r0, r3
 80134d4:	f010 001f 	ands.w	r0, r0, #31
 80134d8:	d077      	beq.n	80135ca <_dtoa_r+0x8f2>
 80134da:	f1c0 0320 	rsb	r3, r0, #32
 80134de:	2b04      	cmp	r3, #4
 80134e0:	dd6b      	ble.n	80135ba <_dtoa_r+0x8e2>
 80134e2:	9b08      	ldr	r3, [sp, #32]
 80134e4:	f1c0 001c 	rsb	r0, r0, #28
 80134e8:	4403      	add	r3, r0
 80134ea:	4480      	add	r8, r0
 80134ec:	4406      	add	r6, r0
 80134ee:	9308      	str	r3, [sp, #32]
 80134f0:	f1b8 0f00 	cmp.w	r8, #0
 80134f4:	dd05      	ble.n	8013502 <_dtoa_r+0x82a>
 80134f6:	4649      	mov	r1, r9
 80134f8:	4642      	mov	r2, r8
 80134fa:	4658      	mov	r0, fp
 80134fc:	f000 fc08 	bl	8013d10 <__lshift>
 8013500:	4681      	mov	r9, r0
 8013502:	9b08      	ldr	r3, [sp, #32]
 8013504:	2b00      	cmp	r3, #0
 8013506:	dd05      	ble.n	8013514 <_dtoa_r+0x83c>
 8013508:	4621      	mov	r1, r4
 801350a:	461a      	mov	r2, r3
 801350c:	4658      	mov	r0, fp
 801350e:	f000 fbff 	bl	8013d10 <__lshift>
 8013512:	4604      	mov	r4, r0
 8013514:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013516:	2b00      	cmp	r3, #0
 8013518:	d059      	beq.n	80135ce <_dtoa_r+0x8f6>
 801351a:	4621      	mov	r1, r4
 801351c:	4648      	mov	r0, r9
 801351e:	f000 fc63 	bl	8013de8 <__mcmp>
 8013522:	2800      	cmp	r0, #0
 8013524:	da53      	bge.n	80135ce <_dtoa_r+0x8f6>
 8013526:	1e7b      	subs	r3, r7, #1
 8013528:	9304      	str	r3, [sp, #16]
 801352a:	4649      	mov	r1, r9
 801352c:	2300      	movs	r3, #0
 801352e:	220a      	movs	r2, #10
 8013530:	4658      	mov	r0, fp
 8013532:	f000 fa41 	bl	80139b8 <__multadd>
 8013536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013538:	4681      	mov	r9, r0
 801353a:	2b00      	cmp	r3, #0
 801353c:	f000 8172 	beq.w	8013824 <_dtoa_r+0xb4c>
 8013540:	2300      	movs	r3, #0
 8013542:	4629      	mov	r1, r5
 8013544:	220a      	movs	r2, #10
 8013546:	4658      	mov	r0, fp
 8013548:	f000 fa36 	bl	80139b8 <__multadd>
 801354c:	9b00      	ldr	r3, [sp, #0]
 801354e:	2b00      	cmp	r3, #0
 8013550:	4605      	mov	r5, r0
 8013552:	dc67      	bgt.n	8013624 <_dtoa_r+0x94c>
 8013554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013556:	2b02      	cmp	r3, #2
 8013558:	dc41      	bgt.n	80135de <_dtoa_r+0x906>
 801355a:	e063      	b.n	8013624 <_dtoa_r+0x94c>
 801355c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801355e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013562:	e746      	b.n	80133f2 <_dtoa_r+0x71a>
 8013564:	9b07      	ldr	r3, [sp, #28]
 8013566:	1e5c      	subs	r4, r3, #1
 8013568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801356a:	42a3      	cmp	r3, r4
 801356c:	bfbf      	itttt	lt
 801356e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013570:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8013572:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8013574:	1ae3      	sublt	r3, r4, r3
 8013576:	bfb4      	ite	lt
 8013578:	18d2      	addlt	r2, r2, r3
 801357a:	1b1c      	subge	r4, r3, r4
 801357c:	9b07      	ldr	r3, [sp, #28]
 801357e:	bfbc      	itt	lt
 8013580:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8013582:	2400      	movlt	r4, #0
 8013584:	2b00      	cmp	r3, #0
 8013586:	bfb5      	itete	lt
 8013588:	eba8 0603 	sublt.w	r6, r8, r3
 801358c:	9b07      	ldrge	r3, [sp, #28]
 801358e:	2300      	movlt	r3, #0
 8013590:	4646      	movge	r6, r8
 8013592:	e730      	b.n	80133f6 <_dtoa_r+0x71e>
 8013594:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013596:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013598:	4646      	mov	r6, r8
 801359a:	e735      	b.n	8013408 <_dtoa_r+0x730>
 801359c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801359e:	e75c      	b.n	801345a <_dtoa_r+0x782>
 80135a0:	2300      	movs	r3, #0
 80135a2:	e788      	b.n	80134b6 <_dtoa_r+0x7de>
 80135a4:	3fe00000 	.word	0x3fe00000
 80135a8:	40240000 	.word	0x40240000
 80135ac:	40140000 	.word	0x40140000
 80135b0:	9b02      	ldr	r3, [sp, #8]
 80135b2:	e780      	b.n	80134b6 <_dtoa_r+0x7de>
 80135b4:	2300      	movs	r3, #0
 80135b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80135b8:	e782      	b.n	80134c0 <_dtoa_r+0x7e8>
 80135ba:	d099      	beq.n	80134f0 <_dtoa_r+0x818>
 80135bc:	9a08      	ldr	r2, [sp, #32]
 80135be:	331c      	adds	r3, #28
 80135c0:	441a      	add	r2, r3
 80135c2:	4498      	add	r8, r3
 80135c4:	441e      	add	r6, r3
 80135c6:	9208      	str	r2, [sp, #32]
 80135c8:	e792      	b.n	80134f0 <_dtoa_r+0x818>
 80135ca:	4603      	mov	r3, r0
 80135cc:	e7f6      	b.n	80135bc <_dtoa_r+0x8e4>
 80135ce:	9b07      	ldr	r3, [sp, #28]
 80135d0:	9704      	str	r7, [sp, #16]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	dc20      	bgt.n	8013618 <_dtoa_r+0x940>
 80135d6:	9300      	str	r3, [sp, #0]
 80135d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135da:	2b02      	cmp	r3, #2
 80135dc:	dd1e      	ble.n	801361c <_dtoa_r+0x944>
 80135de:	9b00      	ldr	r3, [sp, #0]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	f47f aec0 	bne.w	8013366 <_dtoa_r+0x68e>
 80135e6:	4621      	mov	r1, r4
 80135e8:	2205      	movs	r2, #5
 80135ea:	4658      	mov	r0, fp
 80135ec:	f000 f9e4 	bl	80139b8 <__multadd>
 80135f0:	4601      	mov	r1, r0
 80135f2:	4604      	mov	r4, r0
 80135f4:	4648      	mov	r0, r9
 80135f6:	f000 fbf7 	bl	8013de8 <__mcmp>
 80135fa:	2800      	cmp	r0, #0
 80135fc:	f77f aeb3 	ble.w	8013366 <_dtoa_r+0x68e>
 8013600:	4656      	mov	r6, sl
 8013602:	2331      	movs	r3, #49	@ 0x31
 8013604:	f806 3b01 	strb.w	r3, [r6], #1
 8013608:	9b04      	ldr	r3, [sp, #16]
 801360a:	3301      	adds	r3, #1
 801360c:	9304      	str	r3, [sp, #16]
 801360e:	e6ae      	b.n	801336e <_dtoa_r+0x696>
 8013610:	9c07      	ldr	r4, [sp, #28]
 8013612:	9704      	str	r7, [sp, #16]
 8013614:	4625      	mov	r5, r4
 8013616:	e7f3      	b.n	8013600 <_dtoa_r+0x928>
 8013618:	9b07      	ldr	r3, [sp, #28]
 801361a:	9300      	str	r3, [sp, #0]
 801361c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801361e:	2b00      	cmp	r3, #0
 8013620:	f000 8104 	beq.w	801382c <_dtoa_r+0xb54>
 8013624:	2e00      	cmp	r6, #0
 8013626:	dd05      	ble.n	8013634 <_dtoa_r+0x95c>
 8013628:	4629      	mov	r1, r5
 801362a:	4632      	mov	r2, r6
 801362c:	4658      	mov	r0, fp
 801362e:	f000 fb6f 	bl	8013d10 <__lshift>
 8013632:	4605      	mov	r5, r0
 8013634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013636:	2b00      	cmp	r3, #0
 8013638:	d05a      	beq.n	80136f0 <_dtoa_r+0xa18>
 801363a:	6869      	ldr	r1, [r5, #4]
 801363c:	4658      	mov	r0, fp
 801363e:	f000 f959 	bl	80138f4 <_Balloc>
 8013642:	4606      	mov	r6, r0
 8013644:	b928      	cbnz	r0, 8013652 <_dtoa_r+0x97a>
 8013646:	4b84      	ldr	r3, [pc, #528]	@ (8013858 <_dtoa_r+0xb80>)
 8013648:	4602      	mov	r2, r0
 801364a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801364e:	f7ff bb5a 	b.w	8012d06 <_dtoa_r+0x2e>
 8013652:	692a      	ldr	r2, [r5, #16]
 8013654:	3202      	adds	r2, #2
 8013656:	0092      	lsls	r2, r2, #2
 8013658:	f105 010c 	add.w	r1, r5, #12
 801365c:	300c      	adds	r0, #12
 801365e:	f7ff faa2 	bl	8012ba6 <memcpy>
 8013662:	2201      	movs	r2, #1
 8013664:	4631      	mov	r1, r6
 8013666:	4658      	mov	r0, fp
 8013668:	f000 fb52 	bl	8013d10 <__lshift>
 801366c:	f10a 0301 	add.w	r3, sl, #1
 8013670:	9307      	str	r3, [sp, #28]
 8013672:	9b00      	ldr	r3, [sp, #0]
 8013674:	4453      	add	r3, sl
 8013676:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013678:	9b02      	ldr	r3, [sp, #8]
 801367a:	f003 0301 	and.w	r3, r3, #1
 801367e:	462f      	mov	r7, r5
 8013680:	930a      	str	r3, [sp, #40]	@ 0x28
 8013682:	4605      	mov	r5, r0
 8013684:	9b07      	ldr	r3, [sp, #28]
 8013686:	4621      	mov	r1, r4
 8013688:	3b01      	subs	r3, #1
 801368a:	4648      	mov	r0, r9
 801368c:	9300      	str	r3, [sp, #0]
 801368e:	f7ff fa98 	bl	8012bc2 <quorem>
 8013692:	4639      	mov	r1, r7
 8013694:	9002      	str	r0, [sp, #8]
 8013696:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801369a:	4648      	mov	r0, r9
 801369c:	f000 fba4 	bl	8013de8 <__mcmp>
 80136a0:	462a      	mov	r2, r5
 80136a2:	9008      	str	r0, [sp, #32]
 80136a4:	4621      	mov	r1, r4
 80136a6:	4658      	mov	r0, fp
 80136a8:	f000 fbba 	bl	8013e20 <__mdiff>
 80136ac:	68c2      	ldr	r2, [r0, #12]
 80136ae:	4606      	mov	r6, r0
 80136b0:	bb02      	cbnz	r2, 80136f4 <_dtoa_r+0xa1c>
 80136b2:	4601      	mov	r1, r0
 80136b4:	4648      	mov	r0, r9
 80136b6:	f000 fb97 	bl	8013de8 <__mcmp>
 80136ba:	4602      	mov	r2, r0
 80136bc:	4631      	mov	r1, r6
 80136be:	4658      	mov	r0, fp
 80136c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80136c2:	f000 f957 	bl	8013974 <_Bfree>
 80136c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80136ca:	9e07      	ldr	r6, [sp, #28]
 80136cc:	ea43 0102 	orr.w	r1, r3, r2
 80136d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80136d2:	4319      	orrs	r1, r3
 80136d4:	d110      	bne.n	80136f8 <_dtoa_r+0xa20>
 80136d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80136da:	d029      	beq.n	8013730 <_dtoa_r+0xa58>
 80136dc:	9b08      	ldr	r3, [sp, #32]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	dd02      	ble.n	80136e8 <_dtoa_r+0xa10>
 80136e2:	9b02      	ldr	r3, [sp, #8]
 80136e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80136e8:	9b00      	ldr	r3, [sp, #0]
 80136ea:	f883 8000 	strb.w	r8, [r3]
 80136ee:	e63f      	b.n	8013370 <_dtoa_r+0x698>
 80136f0:	4628      	mov	r0, r5
 80136f2:	e7bb      	b.n	801366c <_dtoa_r+0x994>
 80136f4:	2201      	movs	r2, #1
 80136f6:	e7e1      	b.n	80136bc <_dtoa_r+0x9e4>
 80136f8:	9b08      	ldr	r3, [sp, #32]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	db04      	blt.n	8013708 <_dtoa_r+0xa30>
 80136fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013700:	430b      	orrs	r3, r1
 8013702:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013704:	430b      	orrs	r3, r1
 8013706:	d120      	bne.n	801374a <_dtoa_r+0xa72>
 8013708:	2a00      	cmp	r2, #0
 801370a:	dded      	ble.n	80136e8 <_dtoa_r+0xa10>
 801370c:	4649      	mov	r1, r9
 801370e:	2201      	movs	r2, #1
 8013710:	4658      	mov	r0, fp
 8013712:	f000 fafd 	bl	8013d10 <__lshift>
 8013716:	4621      	mov	r1, r4
 8013718:	4681      	mov	r9, r0
 801371a:	f000 fb65 	bl	8013de8 <__mcmp>
 801371e:	2800      	cmp	r0, #0
 8013720:	dc03      	bgt.n	801372a <_dtoa_r+0xa52>
 8013722:	d1e1      	bne.n	80136e8 <_dtoa_r+0xa10>
 8013724:	f018 0f01 	tst.w	r8, #1
 8013728:	d0de      	beq.n	80136e8 <_dtoa_r+0xa10>
 801372a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801372e:	d1d8      	bne.n	80136e2 <_dtoa_r+0xa0a>
 8013730:	9a00      	ldr	r2, [sp, #0]
 8013732:	2339      	movs	r3, #57	@ 0x39
 8013734:	7013      	strb	r3, [r2, #0]
 8013736:	4633      	mov	r3, r6
 8013738:	461e      	mov	r6, r3
 801373a:	3b01      	subs	r3, #1
 801373c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013740:	2a39      	cmp	r2, #57	@ 0x39
 8013742:	d052      	beq.n	80137ea <_dtoa_r+0xb12>
 8013744:	3201      	adds	r2, #1
 8013746:	701a      	strb	r2, [r3, #0]
 8013748:	e612      	b.n	8013370 <_dtoa_r+0x698>
 801374a:	2a00      	cmp	r2, #0
 801374c:	dd07      	ble.n	801375e <_dtoa_r+0xa86>
 801374e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013752:	d0ed      	beq.n	8013730 <_dtoa_r+0xa58>
 8013754:	9a00      	ldr	r2, [sp, #0]
 8013756:	f108 0301 	add.w	r3, r8, #1
 801375a:	7013      	strb	r3, [r2, #0]
 801375c:	e608      	b.n	8013370 <_dtoa_r+0x698>
 801375e:	9b07      	ldr	r3, [sp, #28]
 8013760:	9a07      	ldr	r2, [sp, #28]
 8013762:	f803 8c01 	strb.w	r8, [r3, #-1]
 8013766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013768:	4293      	cmp	r3, r2
 801376a:	d028      	beq.n	80137be <_dtoa_r+0xae6>
 801376c:	4649      	mov	r1, r9
 801376e:	2300      	movs	r3, #0
 8013770:	220a      	movs	r2, #10
 8013772:	4658      	mov	r0, fp
 8013774:	f000 f920 	bl	80139b8 <__multadd>
 8013778:	42af      	cmp	r7, r5
 801377a:	4681      	mov	r9, r0
 801377c:	f04f 0300 	mov.w	r3, #0
 8013780:	f04f 020a 	mov.w	r2, #10
 8013784:	4639      	mov	r1, r7
 8013786:	4658      	mov	r0, fp
 8013788:	d107      	bne.n	801379a <_dtoa_r+0xac2>
 801378a:	f000 f915 	bl	80139b8 <__multadd>
 801378e:	4607      	mov	r7, r0
 8013790:	4605      	mov	r5, r0
 8013792:	9b07      	ldr	r3, [sp, #28]
 8013794:	3301      	adds	r3, #1
 8013796:	9307      	str	r3, [sp, #28]
 8013798:	e774      	b.n	8013684 <_dtoa_r+0x9ac>
 801379a:	f000 f90d 	bl	80139b8 <__multadd>
 801379e:	4629      	mov	r1, r5
 80137a0:	4607      	mov	r7, r0
 80137a2:	2300      	movs	r3, #0
 80137a4:	220a      	movs	r2, #10
 80137a6:	4658      	mov	r0, fp
 80137a8:	f000 f906 	bl	80139b8 <__multadd>
 80137ac:	4605      	mov	r5, r0
 80137ae:	e7f0      	b.n	8013792 <_dtoa_r+0xaba>
 80137b0:	9b00      	ldr	r3, [sp, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	bfcc      	ite	gt
 80137b6:	461e      	movgt	r6, r3
 80137b8:	2601      	movle	r6, #1
 80137ba:	4456      	add	r6, sl
 80137bc:	2700      	movs	r7, #0
 80137be:	4649      	mov	r1, r9
 80137c0:	2201      	movs	r2, #1
 80137c2:	4658      	mov	r0, fp
 80137c4:	f000 faa4 	bl	8013d10 <__lshift>
 80137c8:	4621      	mov	r1, r4
 80137ca:	4681      	mov	r9, r0
 80137cc:	f000 fb0c 	bl	8013de8 <__mcmp>
 80137d0:	2800      	cmp	r0, #0
 80137d2:	dcb0      	bgt.n	8013736 <_dtoa_r+0xa5e>
 80137d4:	d102      	bne.n	80137dc <_dtoa_r+0xb04>
 80137d6:	f018 0f01 	tst.w	r8, #1
 80137da:	d1ac      	bne.n	8013736 <_dtoa_r+0xa5e>
 80137dc:	4633      	mov	r3, r6
 80137de:	461e      	mov	r6, r3
 80137e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80137e4:	2a30      	cmp	r2, #48	@ 0x30
 80137e6:	d0fa      	beq.n	80137de <_dtoa_r+0xb06>
 80137e8:	e5c2      	b.n	8013370 <_dtoa_r+0x698>
 80137ea:	459a      	cmp	sl, r3
 80137ec:	d1a4      	bne.n	8013738 <_dtoa_r+0xa60>
 80137ee:	9b04      	ldr	r3, [sp, #16]
 80137f0:	3301      	adds	r3, #1
 80137f2:	9304      	str	r3, [sp, #16]
 80137f4:	2331      	movs	r3, #49	@ 0x31
 80137f6:	f88a 3000 	strb.w	r3, [sl]
 80137fa:	e5b9      	b.n	8013370 <_dtoa_r+0x698>
 80137fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80137fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801385c <_dtoa_r+0xb84>
 8013802:	b11b      	cbz	r3, 801380c <_dtoa_r+0xb34>
 8013804:	f10a 0308 	add.w	r3, sl, #8
 8013808:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801380a:	6013      	str	r3, [r2, #0]
 801380c:	4650      	mov	r0, sl
 801380e:	b019      	add	sp, #100	@ 0x64
 8013810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013816:	2b01      	cmp	r3, #1
 8013818:	f77f ae37 	ble.w	801348a <_dtoa_r+0x7b2>
 801381c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801381e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013820:	2001      	movs	r0, #1
 8013822:	e655      	b.n	80134d0 <_dtoa_r+0x7f8>
 8013824:	9b00      	ldr	r3, [sp, #0]
 8013826:	2b00      	cmp	r3, #0
 8013828:	f77f aed6 	ble.w	80135d8 <_dtoa_r+0x900>
 801382c:	4656      	mov	r6, sl
 801382e:	4621      	mov	r1, r4
 8013830:	4648      	mov	r0, r9
 8013832:	f7ff f9c6 	bl	8012bc2 <quorem>
 8013836:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801383a:	f806 8b01 	strb.w	r8, [r6], #1
 801383e:	9b00      	ldr	r3, [sp, #0]
 8013840:	eba6 020a 	sub.w	r2, r6, sl
 8013844:	4293      	cmp	r3, r2
 8013846:	ddb3      	ble.n	80137b0 <_dtoa_r+0xad8>
 8013848:	4649      	mov	r1, r9
 801384a:	2300      	movs	r3, #0
 801384c:	220a      	movs	r2, #10
 801384e:	4658      	mov	r0, fp
 8013850:	f000 f8b2 	bl	80139b8 <__multadd>
 8013854:	4681      	mov	r9, r0
 8013856:	e7ea      	b.n	801382e <_dtoa_r+0xb56>
 8013858:	080be728 	.word	0x080be728
 801385c:	080be6ac 	.word	0x080be6ac

08013860 <_free_r>:
 8013860:	b538      	push	{r3, r4, r5, lr}
 8013862:	4605      	mov	r5, r0
 8013864:	2900      	cmp	r1, #0
 8013866:	d041      	beq.n	80138ec <_free_r+0x8c>
 8013868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801386c:	1f0c      	subs	r4, r1, #4
 801386e:	2b00      	cmp	r3, #0
 8013870:	bfb8      	it	lt
 8013872:	18e4      	addlt	r4, r4, r3
 8013874:	f7fe fa9a 	bl	8011dac <__malloc_lock>
 8013878:	4a1d      	ldr	r2, [pc, #116]	@ (80138f0 <_free_r+0x90>)
 801387a:	6813      	ldr	r3, [r2, #0]
 801387c:	b933      	cbnz	r3, 801388c <_free_r+0x2c>
 801387e:	6063      	str	r3, [r4, #4]
 8013880:	6014      	str	r4, [r2, #0]
 8013882:	4628      	mov	r0, r5
 8013884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013888:	f7fe ba96 	b.w	8011db8 <__malloc_unlock>
 801388c:	42a3      	cmp	r3, r4
 801388e:	d908      	bls.n	80138a2 <_free_r+0x42>
 8013890:	6820      	ldr	r0, [r4, #0]
 8013892:	1821      	adds	r1, r4, r0
 8013894:	428b      	cmp	r3, r1
 8013896:	bf01      	itttt	eq
 8013898:	6819      	ldreq	r1, [r3, #0]
 801389a:	685b      	ldreq	r3, [r3, #4]
 801389c:	1809      	addeq	r1, r1, r0
 801389e:	6021      	streq	r1, [r4, #0]
 80138a0:	e7ed      	b.n	801387e <_free_r+0x1e>
 80138a2:	461a      	mov	r2, r3
 80138a4:	685b      	ldr	r3, [r3, #4]
 80138a6:	b10b      	cbz	r3, 80138ac <_free_r+0x4c>
 80138a8:	42a3      	cmp	r3, r4
 80138aa:	d9fa      	bls.n	80138a2 <_free_r+0x42>
 80138ac:	6811      	ldr	r1, [r2, #0]
 80138ae:	1850      	adds	r0, r2, r1
 80138b0:	42a0      	cmp	r0, r4
 80138b2:	d10b      	bne.n	80138cc <_free_r+0x6c>
 80138b4:	6820      	ldr	r0, [r4, #0]
 80138b6:	4401      	add	r1, r0
 80138b8:	1850      	adds	r0, r2, r1
 80138ba:	4283      	cmp	r3, r0
 80138bc:	6011      	str	r1, [r2, #0]
 80138be:	d1e0      	bne.n	8013882 <_free_r+0x22>
 80138c0:	6818      	ldr	r0, [r3, #0]
 80138c2:	685b      	ldr	r3, [r3, #4]
 80138c4:	6053      	str	r3, [r2, #4]
 80138c6:	4408      	add	r0, r1
 80138c8:	6010      	str	r0, [r2, #0]
 80138ca:	e7da      	b.n	8013882 <_free_r+0x22>
 80138cc:	d902      	bls.n	80138d4 <_free_r+0x74>
 80138ce:	230c      	movs	r3, #12
 80138d0:	602b      	str	r3, [r5, #0]
 80138d2:	e7d6      	b.n	8013882 <_free_r+0x22>
 80138d4:	6820      	ldr	r0, [r4, #0]
 80138d6:	1821      	adds	r1, r4, r0
 80138d8:	428b      	cmp	r3, r1
 80138da:	bf04      	itt	eq
 80138dc:	6819      	ldreq	r1, [r3, #0]
 80138de:	685b      	ldreq	r3, [r3, #4]
 80138e0:	6063      	str	r3, [r4, #4]
 80138e2:	bf04      	itt	eq
 80138e4:	1809      	addeq	r1, r1, r0
 80138e6:	6021      	streq	r1, [r4, #0]
 80138e8:	6054      	str	r4, [r2, #4]
 80138ea:	e7ca      	b.n	8013882 <_free_r+0x22>
 80138ec:	bd38      	pop	{r3, r4, r5, pc}
 80138ee:	bf00      	nop
 80138f0:	20005eb8 	.word	0x20005eb8

080138f4 <_Balloc>:
 80138f4:	b570      	push	{r4, r5, r6, lr}
 80138f6:	69c6      	ldr	r6, [r0, #28]
 80138f8:	4604      	mov	r4, r0
 80138fa:	460d      	mov	r5, r1
 80138fc:	b976      	cbnz	r6, 801391c <_Balloc+0x28>
 80138fe:	2010      	movs	r0, #16
 8013900:	f7fe f9aa 	bl	8011c58 <malloc>
 8013904:	4602      	mov	r2, r0
 8013906:	61e0      	str	r0, [r4, #28]
 8013908:	b920      	cbnz	r0, 8013914 <_Balloc+0x20>
 801390a:	4b18      	ldr	r3, [pc, #96]	@ (801396c <_Balloc+0x78>)
 801390c:	4818      	ldr	r0, [pc, #96]	@ (8013970 <_Balloc+0x7c>)
 801390e:	216b      	movs	r1, #107	@ 0x6b
 8013910:	f000 fde4 	bl	80144dc <__assert_func>
 8013914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013918:	6006      	str	r6, [r0, #0]
 801391a:	60c6      	str	r6, [r0, #12]
 801391c:	69e6      	ldr	r6, [r4, #28]
 801391e:	68f3      	ldr	r3, [r6, #12]
 8013920:	b183      	cbz	r3, 8013944 <_Balloc+0x50>
 8013922:	69e3      	ldr	r3, [r4, #28]
 8013924:	68db      	ldr	r3, [r3, #12]
 8013926:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801392a:	b9b8      	cbnz	r0, 801395c <_Balloc+0x68>
 801392c:	2101      	movs	r1, #1
 801392e:	fa01 f605 	lsl.w	r6, r1, r5
 8013932:	1d72      	adds	r2, r6, #5
 8013934:	0092      	lsls	r2, r2, #2
 8013936:	4620      	mov	r0, r4
 8013938:	f000 fdee 	bl	8014518 <_calloc_r>
 801393c:	b160      	cbz	r0, 8013958 <_Balloc+0x64>
 801393e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013942:	e00e      	b.n	8013962 <_Balloc+0x6e>
 8013944:	2221      	movs	r2, #33	@ 0x21
 8013946:	2104      	movs	r1, #4
 8013948:	4620      	mov	r0, r4
 801394a:	f000 fde5 	bl	8014518 <_calloc_r>
 801394e:	69e3      	ldr	r3, [r4, #28]
 8013950:	60f0      	str	r0, [r6, #12]
 8013952:	68db      	ldr	r3, [r3, #12]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d1e4      	bne.n	8013922 <_Balloc+0x2e>
 8013958:	2000      	movs	r0, #0
 801395a:	bd70      	pop	{r4, r5, r6, pc}
 801395c:	6802      	ldr	r2, [r0, #0]
 801395e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013962:	2300      	movs	r3, #0
 8013964:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013968:	e7f7      	b.n	801395a <_Balloc+0x66>
 801396a:	bf00      	nop
 801396c:	080be6b9 	.word	0x080be6b9
 8013970:	080be739 	.word	0x080be739

08013974 <_Bfree>:
 8013974:	b570      	push	{r4, r5, r6, lr}
 8013976:	69c6      	ldr	r6, [r0, #28]
 8013978:	4605      	mov	r5, r0
 801397a:	460c      	mov	r4, r1
 801397c:	b976      	cbnz	r6, 801399c <_Bfree+0x28>
 801397e:	2010      	movs	r0, #16
 8013980:	f7fe f96a 	bl	8011c58 <malloc>
 8013984:	4602      	mov	r2, r0
 8013986:	61e8      	str	r0, [r5, #28]
 8013988:	b920      	cbnz	r0, 8013994 <_Bfree+0x20>
 801398a:	4b09      	ldr	r3, [pc, #36]	@ (80139b0 <_Bfree+0x3c>)
 801398c:	4809      	ldr	r0, [pc, #36]	@ (80139b4 <_Bfree+0x40>)
 801398e:	218f      	movs	r1, #143	@ 0x8f
 8013990:	f000 fda4 	bl	80144dc <__assert_func>
 8013994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013998:	6006      	str	r6, [r0, #0]
 801399a:	60c6      	str	r6, [r0, #12]
 801399c:	b13c      	cbz	r4, 80139ae <_Bfree+0x3a>
 801399e:	69eb      	ldr	r3, [r5, #28]
 80139a0:	6862      	ldr	r2, [r4, #4]
 80139a2:	68db      	ldr	r3, [r3, #12]
 80139a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80139a8:	6021      	str	r1, [r4, #0]
 80139aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80139ae:	bd70      	pop	{r4, r5, r6, pc}
 80139b0:	080be6b9 	.word	0x080be6b9
 80139b4:	080be739 	.word	0x080be739

080139b8 <__multadd>:
 80139b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139bc:	690d      	ldr	r5, [r1, #16]
 80139be:	4607      	mov	r7, r0
 80139c0:	460c      	mov	r4, r1
 80139c2:	461e      	mov	r6, r3
 80139c4:	f101 0c14 	add.w	ip, r1, #20
 80139c8:	2000      	movs	r0, #0
 80139ca:	f8dc 3000 	ldr.w	r3, [ip]
 80139ce:	b299      	uxth	r1, r3
 80139d0:	fb02 6101 	mla	r1, r2, r1, r6
 80139d4:	0c1e      	lsrs	r6, r3, #16
 80139d6:	0c0b      	lsrs	r3, r1, #16
 80139d8:	fb02 3306 	mla	r3, r2, r6, r3
 80139dc:	b289      	uxth	r1, r1
 80139de:	3001      	adds	r0, #1
 80139e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80139e4:	4285      	cmp	r5, r0
 80139e6:	f84c 1b04 	str.w	r1, [ip], #4
 80139ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80139ee:	dcec      	bgt.n	80139ca <__multadd+0x12>
 80139f0:	b30e      	cbz	r6, 8013a36 <__multadd+0x7e>
 80139f2:	68a3      	ldr	r3, [r4, #8]
 80139f4:	42ab      	cmp	r3, r5
 80139f6:	dc19      	bgt.n	8013a2c <__multadd+0x74>
 80139f8:	6861      	ldr	r1, [r4, #4]
 80139fa:	4638      	mov	r0, r7
 80139fc:	3101      	adds	r1, #1
 80139fe:	f7ff ff79 	bl	80138f4 <_Balloc>
 8013a02:	4680      	mov	r8, r0
 8013a04:	b928      	cbnz	r0, 8013a12 <__multadd+0x5a>
 8013a06:	4602      	mov	r2, r0
 8013a08:	4b0c      	ldr	r3, [pc, #48]	@ (8013a3c <__multadd+0x84>)
 8013a0a:	480d      	ldr	r0, [pc, #52]	@ (8013a40 <__multadd+0x88>)
 8013a0c:	21ba      	movs	r1, #186	@ 0xba
 8013a0e:	f000 fd65 	bl	80144dc <__assert_func>
 8013a12:	6922      	ldr	r2, [r4, #16]
 8013a14:	3202      	adds	r2, #2
 8013a16:	f104 010c 	add.w	r1, r4, #12
 8013a1a:	0092      	lsls	r2, r2, #2
 8013a1c:	300c      	adds	r0, #12
 8013a1e:	f7ff f8c2 	bl	8012ba6 <memcpy>
 8013a22:	4621      	mov	r1, r4
 8013a24:	4638      	mov	r0, r7
 8013a26:	f7ff ffa5 	bl	8013974 <_Bfree>
 8013a2a:	4644      	mov	r4, r8
 8013a2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013a30:	3501      	adds	r5, #1
 8013a32:	615e      	str	r6, [r3, #20]
 8013a34:	6125      	str	r5, [r4, #16]
 8013a36:	4620      	mov	r0, r4
 8013a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a3c:	080be728 	.word	0x080be728
 8013a40:	080be739 	.word	0x080be739

08013a44 <__hi0bits>:
 8013a44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013a48:	4603      	mov	r3, r0
 8013a4a:	bf36      	itet	cc
 8013a4c:	0403      	lslcc	r3, r0, #16
 8013a4e:	2000      	movcs	r0, #0
 8013a50:	2010      	movcc	r0, #16
 8013a52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013a56:	bf3c      	itt	cc
 8013a58:	021b      	lslcc	r3, r3, #8
 8013a5a:	3008      	addcc	r0, #8
 8013a5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013a60:	bf3c      	itt	cc
 8013a62:	011b      	lslcc	r3, r3, #4
 8013a64:	3004      	addcc	r0, #4
 8013a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013a6a:	bf3c      	itt	cc
 8013a6c:	009b      	lslcc	r3, r3, #2
 8013a6e:	3002      	addcc	r0, #2
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	db05      	blt.n	8013a80 <__hi0bits+0x3c>
 8013a74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013a78:	f100 0001 	add.w	r0, r0, #1
 8013a7c:	bf08      	it	eq
 8013a7e:	2020      	moveq	r0, #32
 8013a80:	4770      	bx	lr

08013a82 <__lo0bits>:
 8013a82:	6803      	ldr	r3, [r0, #0]
 8013a84:	4602      	mov	r2, r0
 8013a86:	f013 0007 	ands.w	r0, r3, #7
 8013a8a:	d00b      	beq.n	8013aa4 <__lo0bits+0x22>
 8013a8c:	07d9      	lsls	r1, r3, #31
 8013a8e:	d421      	bmi.n	8013ad4 <__lo0bits+0x52>
 8013a90:	0798      	lsls	r0, r3, #30
 8013a92:	bf49      	itett	mi
 8013a94:	085b      	lsrmi	r3, r3, #1
 8013a96:	089b      	lsrpl	r3, r3, #2
 8013a98:	2001      	movmi	r0, #1
 8013a9a:	6013      	strmi	r3, [r2, #0]
 8013a9c:	bf5c      	itt	pl
 8013a9e:	6013      	strpl	r3, [r2, #0]
 8013aa0:	2002      	movpl	r0, #2
 8013aa2:	4770      	bx	lr
 8013aa4:	b299      	uxth	r1, r3
 8013aa6:	b909      	cbnz	r1, 8013aac <__lo0bits+0x2a>
 8013aa8:	0c1b      	lsrs	r3, r3, #16
 8013aaa:	2010      	movs	r0, #16
 8013aac:	b2d9      	uxtb	r1, r3
 8013aae:	b909      	cbnz	r1, 8013ab4 <__lo0bits+0x32>
 8013ab0:	3008      	adds	r0, #8
 8013ab2:	0a1b      	lsrs	r3, r3, #8
 8013ab4:	0719      	lsls	r1, r3, #28
 8013ab6:	bf04      	itt	eq
 8013ab8:	091b      	lsreq	r3, r3, #4
 8013aba:	3004      	addeq	r0, #4
 8013abc:	0799      	lsls	r1, r3, #30
 8013abe:	bf04      	itt	eq
 8013ac0:	089b      	lsreq	r3, r3, #2
 8013ac2:	3002      	addeq	r0, #2
 8013ac4:	07d9      	lsls	r1, r3, #31
 8013ac6:	d403      	bmi.n	8013ad0 <__lo0bits+0x4e>
 8013ac8:	085b      	lsrs	r3, r3, #1
 8013aca:	f100 0001 	add.w	r0, r0, #1
 8013ace:	d003      	beq.n	8013ad8 <__lo0bits+0x56>
 8013ad0:	6013      	str	r3, [r2, #0]
 8013ad2:	4770      	bx	lr
 8013ad4:	2000      	movs	r0, #0
 8013ad6:	4770      	bx	lr
 8013ad8:	2020      	movs	r0, #32
 8013ada:	4770      	bx	lr

08013adc <__i2b>:
 8013adc:	b510      	push	{r4, lr}
 8013ade:	460c      	mov	r4, r1
 8013ae0:	2101      	movs	r1, #1
 8013ae2:	f7ff ff07 	bl	80138f4 <_Balloc>
 8013ae6:	4602      	mov	r2, r0
 8013ae8:	b928      	cbnz	r0, 8013af6 <__i2b+0x1a>
 8013aea:	4b05      	ldr	r3, [pc, #20]	@ (8013b00 <__i2b+0x24>)
 8013aec:	4805      	ldr	r0, [pc, #20]	@ (8013b04 <__i2b+0x28>)
 8013aee:	f240 1145 	movw	r1, #325	@ 0x145
 8013af2:	f000 fcf3 	bl	80144dc <__assert_func>
 8013af6:	2301      	movs	r3, #1
 8013af8:	6144      	str	r4, [r0, #20]
 8013afa:	6103      	str	r3, [r0, #16]
 8013afc:	bd10      	pop	{r4, pc}
 8013afe:	bf00      	nop
 8013b00:	080be728 	.word	0x080be728
 8013b04:	080be739 	.word	0x080be739

08013b08 <__multiply>:
 8013b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b0c:	4614      	mov	r4, r2
 8013b0e:	690a      	ldr	r2, [r1, #16]
 8013b10:	6923      	ldr	r3, [r4, #16]
 8013b12:	429a      	cmp	r2, r3
 8013b14:	bfa8      	it	ge
 8013b16:	4623      	movge	r3, r4
 8013b18:	460f      	mov	r7, r1
 8013b1a:	bfa4      	itt	ge
 8013b1c:	460c      	movge	r4, r1
 8013b1e:	461f      	movge	r7, r3
 8013b20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013b24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013b28:	68a3      	ldr	r3, [r4, #8]
 8013b2a:	6861      	ldr	r1, [r4, #4]
 8013b2c:	eb0a 0609 	add.w	r6, sl, r9
 8013b30:	42b3      	cmp	r3, r6
 8013b32:	b085      	sub	sp, #20
 8013b34:	bfb8      	it	lt
 8013b36:	3101      	addlt	r1, #1
 8013b38:	f7ff fedc 	bl	80138f4 <_Balloc>
 8013b3c:	b930      	cbnz	r0, 8013b4c <__multiply+0x44>
 8013b3e:	4602      	mov	r2, r0
 8013b40:	4b44      	ldr	r3, [pc, #272]	@ (8013c54 <__multiply+0x14c>)
 8013b42:	4845      	ldr	r0, [pc, #276]	@ (8013c58 <__multiply+0x150>)
 8013b44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013b48:	f000 fcc8 	bl	80144dc <__assert_func>
 8013b4c:	f100 0514 	add.w	r5, r0, #20
 8013b50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013b54:	462b      	mov	r3, r5
 8013b56:	2200      	movs	r2, #0
 8013b58:	4543      	cmp	r3, r8
 8013b5a:	d321      	bcc.n	8013ba0 <__multiply+0x98>
 8013b5c:	f107 0114 	add.w	r1, r7, #20
 8013b60:	f104 0214 	add.w	r2, r4, #20
 8013b64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013b68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013b6c:	9302      	str	r3, [sp, #8]
 8013b6e:	1b13      	subs	r3, r2, r4
 8013b70:	3b15      	subs	r3, #21
 8013b72:	f023 0303 	bic.w	r3, r3, #3
 8013b76:	3304      	adds	r3, #4
 8013b78:	f104 0715 	add.w	r7, r4, #21
 8013b7c:	42ba      	cmp	r2, r7
 8013b7e:	bf38      	it	cc
 8013b80:	2304      	movcc	r3, #4
 8013b82:	9301      	str	r3, [sp, #4]
 8013b84:	9b02      	ldr	r3, [sp, #8]
 8013b86:	9103      	str	r1, [sp, #12]
 8013b88:	428b      	cmp	r3, r1
 8013b8a:	d80c      	bhi.n	8013ba6 <__multiply+0x9e>
 8013b8c:	2e00      	cmp	r6, #0
 8013b8e:	dd03      	ble.n	8013b98 <__multiply+0x90>
 8013b90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d05b      	beq.n	8013c50 <__multiply+0x148>
 8013b98:	6106      	str	r6, [r0, #16]
 8013b9a:	b005      	add	sp, #20
 8013b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ba0:	f843 2b04 	str.w	r2, [r3], #4
 8013ba4:	e7d8      	b.n	8013b58 <__multiply+0x50>
 8013ba6:	f8b1 a000 	ldrh.w	sl, [r1]
 8013baa:	f1ba 0f00 	cmp.w	sl, #0
 8013bae:	d024      	beq.n	8013bfa <__multiply+0xf2>
 8013bb0:	f104 0e14 	add.w	lr, r4, #20
 8013bb4:	46a9      	mov	r9, r5
 8013bb6:	f04f 0c00 	mov.w	ip, #0
 8013bba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013bbe:	f8d9 3000 	ldr.w	r3, [r9]
 8013bc2:	fa1f fb87 	uxth.w	fp, r7
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	fb0a 330b 	mla	r3, sl, fp, r3
 8013bcc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013bd0:	f8d9 7000 	ldr.w	r7, [r9]
 8013bd4:	4463      	add	r3, ip
 8013bd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013bda:	fb0a c70b 	mla	r7, sl, fp, ip
 8013bde:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013be2:	b29b      	uxth	r3, r3
 8013be4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013be8:	4572      	cmp	r2, lr
 8013bea:	f849 3b04 	str.w	r3, [r9], #4
 8013bee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013bf2:	d8e2      	bhi.n	8013bba <__multiply+0xb2>
 8013bf4:	9b01      	ldr	r3, [sp, #4]
 8013bf6:	f845 c003 	str.w	ip, [r5, r3]
 8013bfa:	9b03      	ldr	r3, [sp, #12]
 8013bfc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013c00:	3104      	adds	r1, #4
 8013c02:	f1b9 0f00 	cmp.w	r9, #0
 8013c06:	d021      	beq.n	8013c4c <__multiply+0x144>
 8013c08:	682b      	ldr	r3, [r5, #0]
 8013c0a:	f104 0c14 	add.w	ip, r4, #20
 8013c0e:	46ae      	mov	lr, r5
 8013c10:	f04f 0a00 	mov.w	sl, #0
 8013c14:	f8bc b000 	ldrh.w	fp, [ip]
 8013c18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013c1c:	fb09 770b 	mla	r7, r9, fp, r7
 8013c20:	4457      	add	r7, sl
 8013c22:	b29b      	uxth	r3, r3
 8013c24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013c28:	f84e 3b04 	str.w	r3, [lr], #4
 8013c2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013c30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013c34:	f8be 3000 	ldrh.w	r3, [lr]
 8013c38:	fb09 330a 	mla	r3, r9, sl, r3
 8013c3c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013c40:	4562      	cmp	r2, ip
 8013c42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013c46:	d8e5      	bhi.n	8013c14 <__multiply+0x10c>
 8013c48:	9f01      	ldr	r7, [sp, #4]
 8013c4a:	51eb      	str	r3, [r5, r7]
 8013c4c:	3504      	adds	r5, #4
 8013c4e:	e799      	b.n	8013b84 <__multiply+0x7c>
 8013c50:	3e01      	subs	r6, #1
 8013c52:	e79b      	b.n	8013b8c <__multiply+0x84>
 8013c54:	080be728 	.word	0x080be728
 8013c58:	080be739 	.word	0x080be739

08013c5c <__pow5mult>:
 8013c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c60:	4615      	mov	r5, r2
 8013c62:	f012 0203 	ands.w	r2, r2, #3
 8013c66:	4607      	mov	r7, r0
 8013c68:	460e      	mov	r6, r1
 8013c6a:	d007      	beq.n	8013c7c <__pow5mult+0x20>
 8013c6c:	4c25      	ldr	r4, [pc, #148]	@ (8013d04 <__pow5mult+0xa8>)
 8013c6e:	3a01      	subs	r2, #1
 8013c70:	2300      	movs	r3, #0
 8013c72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c76:	f7ff fe9f 	bl	80139b8 <__multadd>
 8013c7a:	4606      	mov	r6, r0
 8013c7c:	10ad      	asrs	r5, r5, #2
 8013c7e:	d03d      	beq.n	8013cfc <__pow5mult+0xa0>
 8013c80:	69fc      	ldr	r4, [r7, #28]
 8013c82:	b97c      	cbnz	r4, 8013ca4 <__pow5mult+0x48>
 8013c84:	2010      	movs	r0, #16
 8013c86:	f7fd ffe7 	bl	8011c58 <malloc>
 8013c8a:	4602      	mov	r2, r0
 8013c8c:	61f8      	str	r0, [r7, #28]
 8013c8e:	b928      	cbnz	r0, 8013c9c <__pow5mult+0x40>
 8013c90:	4b1d      	ldr	r3, [pc, #116]	@ (8013d08 <__pow5mult+0xac>)
 8013c92:	481e      	ldr	r0, [pc, #120]	@ (8013d0c <__pow5mult+0xb0>)
 8013c94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013c98:	f000 fc20 	bl	80144dc <__assert_func>
 8013c9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013ca0:	6004      	str	r4, [r0, #0]
 8013ca2:	60c4      	str	r4, [r0, #12]
 8013ca4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013ca8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013cac:	b94c      	cbnz	r4, 8013cc2 <__pow5mult+0x66>
 8013cae:	f240 2171 	movw	r1, #625	@ 0x271
 8013cb2:	4638      	mov	r0, r7
 8013cb4:	f7ff ff12 	bl	8013adc <__i2b>
 8013cb8:	2300      	movs	r3, #0
 8013cba:	f8c8 0008 	str.w	r0, [r8, #8]
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	6003      	str	r3, [r0, #0]
 8013cc2:	f04f 0900 	mov.w	r9, #0
 8013cc6:	07eb      	lsls	r3, r5, #31
 8013cc8:	d50a      	bpl.n	8013ce0 <__pow5mult+0x84>
 8013cca:	4631      	mov	r1, r6
 8013ccc:	4622      	mov	r2, r4
 8013cce:	4638      	mov	r0, r7
 8013cd0:	f7ff ff1a 	bl	8013b08 <__multiply>
 8013cd4:	4631      	mov	r1, r6
 8013cd6:	4680      	mov	r8, r0
 8013cd8:	4638      	mov	r0, r7
 8013cda:	f7ff fe4b 	bl	8013974 <_Bfree>
 8013cde:	4646      	mov	r6, r8
 8013ce0:	106d      	asrs	r5, r5, #1
 8013ce2:	d00b      	beq.n	8013cfc <__pow5mult+0xa0>
 8013ce4:	6820      	ldr	r0, [r4, #0]
 8013ce6:	b938      	cbnz	r0, 8013cf8 <__pow5mult+0x9c>
 8013ce8:	4622      	mov	r2, r4
 8013cea:	4621      	mov	r1, r4
 8013cec:	4638      	mov	r0, r7
 8013cee:	f7ff ff0b 	bl	8013b08 <__multiply>
 8013cf2:	6020      	str	r0, [r4, #0]
 8013cf4:	f8c0 9000 	str.w	r9, [r0]
 8013cf8:	4604      	mov	r4, r0
 8013cfa:	e7e4      	b.n	8013cc6 <__pow5mult+0x6a>
 8013cfc:	4630      	mov	r0, r6
 8013cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d02:	bf00      	nop
 8013d04:	080be794 	.word	0x080be794
 8013d08:	080be6b9 	.word	0x080be6b9
 8013d0c:	080be739 	.word	0x080be739

08013d10 <__lshift>:
 8013d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d14:	460c      	mov	r4, r1
 8013d16:	6849      	ldr	r1, [r1, #4]
 8013d18:	6923      	ldr	r3, [r4, #16]
 8013d1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013d1e:	68a3      	ldr	r3, [r4, #8]
 8013d20:	4607      	mov	r7, r0
 8013d22:	4691      	mov	r9, r2
 8013d24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d28:	f108 0601 	add.w	r6, r8, #1
 8013d2c:	42b3      	cmp	r3, r6
 8013d2e:	db0b      	blt.n	8013d48 <__lshift+0x38>
 8013d30:	4638      	mov	r0, r7
 8013d32:	f7ff fddf 	bl	80138f4 <_Balloc>
 8013d36:	4605      	mov	r5, r0
 8013d38:	b948      	cbnz	r0, 8013d4e <__lshift+0x3e>
 8013d3a:	4602      	mov	r2, r0
 8013d3c:	4b28      	ldr	r3, [pc, #160]	@ (8013de0 <__lshift+0xd0>)
 8013d3e:	4829      	ldr	r0, [pc, #164]	@ (8013de4 <__lshift+0xd4>)
 8013d40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013d44:	f000 fbca 	bl	80144dc <__assert_func>
 8013d48:	3101      	adds	r1, #1
 8013d4a:	005b      	lsls	r3, r3, #1
 8013d4c:	e7ee      	b.n	8013d2c <__lshift+0x1c>
 8013d4e:	2300      	movs	r3, #0
 8013d50:	f100 0114 	add.w	r1, r0, #20
 8013d54:	f100 0210 	add.w	r2, r0, #16
 8013d58:	4618      	mov	r0, r3
 8013d5a:	4553      	cmp	r3, sl
 8013d5c:	db33      	blt.n	8013dc6 <__lshift+0xb6>
 8013d5e:	6920      	ldr	r0, [r4, #16]
 8013d60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d64:	f104 0314 	add.w	r3, r4, #20
 8013d68:	f019 091f 	ands.w	r9, r9, #31
 8013d6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013d74:	d02b      	beq.n	8013dce <__lshift+0xbe>
 8013d76:	f1c9 0e20 	rsb	lr, r9, #32
 8013d7a:	468a      	mov	sl, r1
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	6818      	ldr	r0, [r3, #0]
 8013d80:	fa00 f009 	lsl.w	r0, r0, r9
 8013d84:	4310      	orrs	r0, r2
 8013d86:	f84a 0b04 	str.w	r0, [sl], #4
 8013d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d8e:	459c      	cmp	ip, r3
 8013d90:	fa22 f20e 	lsr.w	r2, r2, lr
 8013d94:	d8f3      	bhi.n	8013d7e <__lshift+0x6e>
 8013d96:	ebac 0304 	sub.w	r3, ip, r4
 8013d9a:	3b15      	subs	r3, #21
 8013d9c:	f023 0303 	bic.w	r3, r3, #3
 8013da0:	3304      	adds	r3, #4
 8013da2:	f104 0015 	add.w	r0, r4, #21
 8013da6:	4584      	cmp	ip, r0
 8013da8:	bf38      	it	cc
 8013daa:	2304      	movcc	r3, #4
 8013dac:	50ca      	str	r2, [r1, r3]
 8013dae:	b10a      	cbz	r2, 8013db4 <__lshift+0xa4>
 8013db0:	f108 0602 	add.w	r6, r8, #2
 8013db4:	3e01      	subs	r6, #1
 8013db6:	4638      	mov	r0, r7
 8013db8:	612e      	str	r6, [r5, #16]
 8013dba:	4621      	mov	r1, r4
 8013dbc:	f7ff fdda 	bl	8013974 <_Bfree>
 8013dc0:	4628      	mov	r0, r5
 8013dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8013dca:	3301      	adds	r3, #1
 8013dcc:	e7c5      	b.n	8013d5a <__lshift+0x4a>
 8013dce:	3904      	subs	r1, #4
 8013dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8013dd8:	459c      	cmp	ip, r3
 8013dda:	d8f9      	bhi.n	8013dd0 <__lshift+0xc0>
 8013ddc:	e7ea      	b.n	8013db4 <__lshift+0xa4>
 8013dde:	bf00      	nop
 8013de0:	080be728 	.word	0x080be728
 8013de4:	080be739 	.word	0x080be739

08013de8 <__mcmp>:
 8013de8:	690a      	ldr	r2, [r1, #16]
 8013dea:	4603      	mov	r3, r0
 8013dec:	6900      	ldr	r0, [r0, #16]
 8013dee:	1a80      	subs	r0, r0, r2
 8013df0:	b530      	push	{r4, r5, lr}
 8013df2:	d10e      	bne.n	8013e12 <__mcmp+0x2a>
 8013df4:	3314      	adds	r3, #20
 8013df6:	3114      	adds	r1, #20
 8013df8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013dfc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013e00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013e04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013e08:	4295      	cmp	r5, r2
 8013e0a:	d003      	beq.n	8013e14 <__mcmp+0x2c>
 8013e0c:	d205      	bcs.n	8013e1a <__mcmp+0x32>
 8013e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8013e12:	bd30      	pop	{r4, r5, pc}
 8013e14:	42a3      	cmp	r3, r4
 8013e16:	d3f3      	bcc.n	8013e00 <__mcmp+0x18>
 8013e18:	e7fb      	b.n	8013e12 <__mcmp+0x2a>
 8013e1a:	2001      	movs	r0, #1
 8013e1c:	e7f9      	b.n	8013e12 <__mcmp+0x2a>
	...

08013e20 <__mdiff>:
 8013e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e24:	4689      	mov	r9, r1
 8013e26:	4606      	mov	r6, r0
 8013e28:	4611      	mov	r1, r2
 8013e2a:	4648      	mov	r0, r9
 8013e2c:	4614      	mov	r4, r2
 8013e2e:	f7ff ffdb 	bl	8013de8 <__mcmp>
 8013e32:	1e05      	subs	r5, r0, #0
 8013e34:	d112      	bne.n	8013e5c <__mdiff+0x3c>
 8013e36:	4629      	mov	r1, r5
 8013e38:	4630      	mov	r0, r6
 8013e3a:	f7ff fd5b 	bl	80138f4 <_Balloc>
 8013e3e:	4602      	mov	r2, r0
 8013e40:	b928      	cbnz	r0, 8013e4e <__mdiff+0x2e>
 8013e42:	4b3f      	ldr	r3, [pc, #252]	@ (8013f40 <__mdiff+0x120>)
 8013e44:	f240 2137 	movw	r1, #567	@ 0x237
 8013e48:	483e      	ldr	r0, [pc, #248]	@ (8013f44 <__mdiff+0x124>)
 8013e4a:	f000 fb47 	bl	80144dc <__assert_func>
 8013e4e:	2301      	movs	r3, #1
 8013e50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013e54:	4610      	mov	r0, r2
 8013e56:	b003      	add	sp, #12
 8013e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e5c:	bfbc      	itt	lt
 8013e5e:	464b      	movlt	r3, r9
 8013e60:	46a1      	movlt	r9, r4
 8013e62:	4630      	mov	r0, r6
 8013e64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013e68:	bfba      	itte	lt
 8013e6a:	461c      	movlt	r4, r3
 8013e6c:	2501      	movlt	r5, #1
 8013e6e:	2500      	movge	r5, #0
 8013e70:	f7ff fd40 	bl	80138f4 <_Balloc>
 8013e74:	4602      	mov	r2, r0
 8013e76:	b918      	cbnz	r0, 8013e80 <__mdiff+0x60>
 8013e78:	4b31      	ldr	r3, [pc, #196]	@ (8013f40 <__mdiff+0x120>)
 8013e7a:	f240 2145 	movw	r1, #581	@ 0x245
 8013e7e:	e7e3      	b.n	8013e48 <__mdiff+0x28>
 8013e80:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013e84:	6926      	ldr	r6, [r4, #16]
 8013e86:	60c5      	str	r5, [r0, #12]
 8013e88:	f109 0310 	add.w	r3, r9, #16
 8013e8c:	f109 0514 	add.w	r5, r9, #20
 8013e90:	f104 0e14 	add.w	lr, r4, #20
 8013e94:	f100 0b14 	add.w	fp, r0, #20
 8013e98:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013e9c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013ea0:	9301      	str	r3, [sp, #4]
 8013ea2:	46d9      	mov	r9, fp
 8013ea4:	f04f 0c00 	mov.w	ip, #0
 8013ea8:	9b01      	ldr	r3, [sp, #4]
 8013eaa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013eae:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013eb2:	9301      	str	r3, [sp, #4]
 8013eb4:	fa1f f38a 	uxth.w	r3, sl
 8013eb8:	4619      	mov	r1, r3
 8013eba:	b283      	uxth	r3, r0
 8013ebc:	1acb      	subs	r3, r1, r3
 8013ebe:	0c00      	lsrs	r0, r0, #16
 8013ec0:	4463      	add	r3, ip
 8013ec2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013ec6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013ed0:	4576      	cmp	r6, lr
 8013ed2:	f849 3b04 	str.w	r3, [r9], #4
 8013ed6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013eda:	d8e5      	bhi.n	8013ea8 <__mdiff+0x88>
 8013edc:	1b33      	subs	r3, r6, r4
 8013ede:	3b15      	subs	r3, #21
 8013ee0:	f023 0303 	bic.w	r3, r3, #3
 8013ee4:	3415      	adds	r4, #21
 8013ee6:	3304      	adds	r3, #4
 8013ee8:	42a6      	cmp	r6, r4
 8013eea:	bf38      	it	cc
 8013eec:	2304      	movcc	r3, #4
 8013eee:	441d      	add	r5, r3
 8013ef0:	445b      	add	r3, fp
 8013ef2:	461e      	mov	r6, r3
 8013ef4:	462c      	mov	r4, r5
 8013ef6:	4544      	cmp	r4, r8
 8013ef8:	d30e      	bcc.n	8013f18 <__mdiff+0xf8>
 8013efa:	f108 0103 	add.w	r1, r8, #3
 8013efe:	1b49      	subs	r1, r1, r5
 8013f00:	f021 0103 	bic.w	r1, r1, #3
 8013f04:	3d03      	subs	r5, #3
 8013f06:	45a8      	cmp	r8, r5
 8013f08:	bf38      	it	cc
 8013f0a:	2100      	movcc	r1, #0
 8013f0c:	440b      	add	r3, r1
 8013f0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013f12:	b191      	cbz	r1, 8013f3a <__mdiff+0x11a>
 8013f14:	6117      	str	r7, [r2, #16]
 8013f16:	e79d      	b.n	8013e54 <__mdiff+0x34>
 8013f18:	f854 1b04 	ldr.w	r1, [r4], #4
 8013f1c:	46e6      	mov	lr, ip
 8013f1e:	0c08      	lsrs	r0, r1, #16
 8013f20:	fa1c fc81 	uxtah	ip, ip, r1
 8013f24:	4471      	add	r1, lr
 8013f26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013f2a:	b289      	uxth	r1, r1
 8013f2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013f30:	f846 1b04 	str.w	r1, [r6], #4
 8013f34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013f38:	e7dd      	b.n	8013ef6 <__mdiff+0xd6>
 8013f3a:	3f01      	subs	r7, #1
 8013f3c:	e7e7      	b.n	8013f0e <__mdiff+0xee>
 8013f3e:	bf00      	nop
 8013f40:	080be728 	.word	0x080be728
 8013f44:	080be739 	.word	0x080be739

08013f48 <__d2b>:
 8013f48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013f4c:	460f      	mov	r7, r1
 8013f4e:	2101      	movs	r1, #1
 8013f50:	ec59 8b10 	vmov	r8, r9, d0
 8013f54:	4616      	mov	r6, r2
 8013f56:	f7ff fccd 	bl	80138f4 <_Balloc>
 8013f5a:	4604      	mov	r4, r0
 8013f5c:	b930      	cbnz	r0, 8013f6c <__d2b+0x24>
 8013f5e:	4602      	mov	r2, r0
 8013f60:	4b23      	ldr	r3, [pc, #140]	@ (8013ff0 <__d2b+0xa8>)
 8013f62:	4824      	ldr	r0, [pc, #144]	@ (8013ff4 <__d2b+0xac>)
 8013f64:	f240 310f 	movw	r1, #783	@ 0x30f
 8013f68:	f000 fab8 	bl	80144dc <__assert_func>
 8013f6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013f70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013f74:	b10d      	cbz	r5, 8013f7a <__d2b+0x32>
 8013f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013f7a:	9301      	str	r3, [sp, #4]
 8013f7c:	f1b8 0300 	subs.w	r3, r8, #0
 8013f80:	d023      	beq.n	8013fca <__d2b+0x82>
 8013f82:	4668      	mov	r0, sp
 8013f84:	9300      	str	r3, [sp, #0]
 8013f86:	f7ff fd7c 	bl	8013a82 <__lo0bits>
 8013f8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013f8e:	b1d0      	cbz	r0, 8013fc6 <__d2b+0x7e>
 8013f90:	f1c0 0320 	rsb	r3, r0, #32
 8013f94:	fa02 f303 	lsl.w	r3, r2, r3
 8013f98:	430b      	orrs	r3, r1
 8013f9a:	40c2      	lsrs	r2, r0
 8013f9c:	6163      	str	r3, [r4, #20]
 8013f9e:	9201      	str	r2, [sp, #4]
 8013fa0:	9b01      	ldr	r3, [sp, #4]
 8013fa2:	61a3      	str	r3, [r4, #24]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	bf0c      	ite	eq
 8013fa8:	2201      	moveq	r2, #1
 8013faa:	2202      	movne	r2, #2
 8013fac:	6122      	str	r2, [r4, #16]
 8013fae:	b1a5      	cbz	r5, 8013fda <__d2b+0x92>
 8013fb0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013fb4:	4405      	add	r5, r0
 8013fb6:	603d      	str	r5, [r7, #0]
 8013fb8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013fbc:	6030      	str	r0, [r6, #0]
 8013fbe:	4620      	mov	r0, r4
 8013fc0:	b003      	add	sp, #12
 8013fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fc6:	6161      	str	r1, [r4, #20]
 8013fc8:	e7ea      	b.n	8013fa0 <__d2b+0x58>
 8013fca:	a801      	add	r0, sp, #4
 8013fcc:	f7ff fd59 	bl	8013a82 <__lo0bits>
 8013fd0:	9b01      	ldr	r3, [sp, #4]
 8013fd2:	6163      	str	r3, [r4, #20]
 8013fd4:	3020      	adds	r0, #32
 8013fd6:	2201      	movs	r2, #1
 8013fd8:	e7e8      	b.n	8013fac <__d2b+0x64>
 8013fda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013fde:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013fe2:	6038      	str	r0, [r7, #0]
 8013fe4:	6918      	ldr	r0, [r3, #16]
 8013fe6:	f7ff fd2d 	bl	8013a44 <__hi0bits>
 8013fea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013fee:	e7e5      	b.n	8013fbc <__d2b+0x74>
 8013ff0:	080be728 	.word	0x080be728
 8013ff4:	080be739 	.word	0x080be739

08013ff8 <__sfputc_r>:
 8013ff8:	6893      	ldr	r3, [r2, #8]
 8013ffa:	3b01      	subs	r3, #1
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	b410      	push	{r4}
 8014000:	6093      	str	r3, [r2, #8]
 8014002:	da08      	bge.n	8014016 <__sfputc_r+0x1e>
 8014004:	6994      	ldr	r4, [r2, #24]
 8014006:	42a3      	cmp	r3, r4
 8014008:	db01      	blt.n	801400e <__sfputc_r+0x16>
 801400a:	290a      	cmp	r1, #10
 801400c:	d103      	bne.n	8014016 <__sfputc_r+0x1e>
 801400e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014012:	f7fe bca4 	b.w	801295e <__swbuf_r>
 8014016:	6813      	ldr	r3, [r2, #0]
 8014018:	1c58      	adds	r0, r3, #1
 801401a:	6010      	str	r0, [r2, #0]
 801401c:	7019      	strb	r1, [r3, #0]
 801401e:	4608      	mov	r0, r1
 8014020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014024:	4770      	bx	lr

08014026 <__sfputs_r>:
 8014026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014028:	4606      	mov	r6, r0
 801402a:	460f      	mov	r7, r1
 801402c:	4614      	mov	r4, r2
 801402e:	18d5      	adds	r5, r2, r3
 8014030:	42ac      	cmp	r4, r5
 8014032:	d101      	bne.n	8014038 <__sfputs_r+0x12>
 8014034:	2000      	movs	r0, #0
 8014036:	e007      	b.n	8014048 <__sfputs_r+0x22>
 8014038:	f814 1b01 	ldrb.w	r1, [r4], #1
 801403c:	463a      	mov	r2, r7
 801403e:	4630      	mov	r0, r6
 8014040:	f7ff ffda 	bl	8013ff8 <__sfputc_r>
 8014044:	1c43      	adds	r3, r0, #1
 8014046:	d1f3      	bne.n	8014030 <__sfputs_r+0xa>
 8014048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801404c <_vfiprintf_r>:
 801404c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014050:	460d      	mov	r5, r1
 8014052:	b09d      	sub	sp, #116	@ 0x74
 8014054:	4614      	mov	r4, r2
 8014056:	4698      	mov	r8, r3
 8014058:	4606      	mov	r6, r0
 801405a:	b118      	cbz	r0, 8014064 <_vfiprintf_r+0x18>
 801405c:	6a03      	ldr	r3, [r0, #32]
 801405e:	b90b      	cbnz	r3, 8014064 <_vfiprintf_r+0x18>
 8014060:	f7fe fb94 	bl	801278c <__sinit>
 8014064:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014066:	07d9      	lsls	r1, r3, #31
 8014068:	d405      	bmi.n	8014076 <_vfiprintf_r+0x2a>
 801406a:	89ab      	ldrh	r3, [r5, #12]
 801406c:	059a      	lsls	r2, r3, #22
 801406e:	d402      	bmi.n	8014076 <_vfiprintf_r+0x2a>
 8014070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014072:	f7fe fd96 	bl	8012ba2 <__retarget_lock_acquire_recursive>
 8014076:	89ab      	ldrh	r3, [r5, #12]
 8014078:	071b      	lsls	r3, r3, #28
 801407a:	d501      	bpl.n	8014080 <_vfiprintf_r+0x34>
 801407c:	692b      	ldr	r3, [r5, #16]
 801407e:	b99b      	cbnz	r3, 80140a8 <_vfiprintf_r+0x5c>
 8014080:	4629      	mov	r1, r5
 8014082:	4630      	mov	r0, r6
 8014084:	f7fe fcaa 	bl	80129dc <__swsetup_r>
 8014088:	b170      	cbz	r0, 80140a8 <_vfiprintf_r+0x5c>
 801408a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801408c:	07dc      	lsls	r4, r3, #31
 801408e:	d504      	bpl.n	801409a <_vfiprintf_r+0x4e>
 8014090:	f04f 30ff 	mov.w	r0, #4294967295
 8014094:	b01d      	add	sp, #116	@ 0x74
 8014096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801409a:	89ab      	ldrh	r3, [r5, #12]
 801409c:	0598      	lsls	r0, r3, #22
 801409e:	d4f7      	bmi.n	8014090 <_vfiprintf_r+0x44>
 80140a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80140a2:	f7fe fd7f 	bl	8012ba4 <__retarget_lock_release_recursive>
 80140a6:	e7f3      	b.n	8014090 <_vfiprintf_r+0x44>
 80140a8:	2300      	movs	r3, #0
 80140aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80140ac:	2320      	movs	r3, #32
 80140ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80140b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80140b6:	2330      	movs	r3, #48	@ 0x30
 80140b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014268 <_vfiprintf_r+0x21c>
 80140bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80140c0:	f04f 0901 	mov.w	r9, #1
 80140c4:	4623      	mov	r3, r4
 80140c6:	469a      	mov	sl, r3
 80140c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80140cc:	b10a      	cbz	r2, 80140d2 <_vfiprintf_r+0x86>
 80140ce:	2a25      	cmp	r2, #37	@ 0x25
 80140d0:	d1f9      	bne.n	80140c6 <_vfiprintf_r+0x7a>
 80140d2:	ebba 0b04 	subs.w	fp, sl, r4
 80140d6:	d00b      	beq.n	80140f0 <_vfiprintf_r+0xa4>
 80140d8:	465b      	mov	r3, fp
 80140da:	4622      	mov	r2, r4
 80140dc:	4629      	mov	r1, r5
 80140de:	4630      	mov	r0, r6
 80140e0:	f7ff ffa1 	bl	8014026 <__sfputs_r>
 80140e4:	3001      	adds	r0, #1
 80140e6:	f000 80a7 	beq.w	8014238 <_vfiprintf_r+0x1ec>
 80140ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80140ec:	445a      	add	r2, fp
 80140ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80140f0:	f89a 3000 	ldrb.w	r3, [sl]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	f000 809f 	beq.w	8014238 <_vfiprintf_r+0x1ec>
 80140fa:	2300      	movs	r3, #0
 80140fc:	f04f 32ff 	mov.w	r2, #4294967295
 8014100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014104:	f10a 0a01 	add.w	sl, sl, #1
 8014108:	9304      	str	r3, [sp, #16]
 801410a:	9307      	str	r3, [sp, #28]
 801410c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014110:	931a      	str	r3, [sp, #104]	@ 0x68
 8014112:	4654      	mov	r4, sl
 8014114:	2205      	movs	r2, #5
 8014116:	f814 1b01 	ldrb.w	r1, [r4], #1
 801411a:	4853      	ldr	r0, [pc, #332]	@ (8014268 <_vfiprintf_r+0x21c>)
 801411c:	f7ec f878 	bl	8000210 <memchr>
 8014120:	9a04      	ldr	r2, [sp, #16]
 8014122:	b9d8      	cbnz	r0, 801415c <_vfiprintf_r+0x110>
 8014124:	06d1      	lsls	r1, r2, #27
 8014126:	bf44      	itt	mi
 8014128:	2320      	movmi	r3, #32
 801412a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801412e:	0713      	lsls	r3, r2, #28
 8014130:	bf44      	itt	mi
 8014132:	232b      	movmi	r3, #43	@ 0x2b
 8014134:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014138:	f89a 3000 	ldrb.w	r3, [sl]
 801413c:	2b2a      	cmp	r3, #42	@ 0x2a
 801413e:	d015      	beq.n	801416c <_vfiprintf_r+0x120>
 8014140:	9a07      	ldr	r2, [sp, #28]
 8014142:	4654      	mov	r4, sl
 8014144:	2000      	movs	r0, #0
 8014146:	f04f 0c0a 	mov.w	ip, #10
 801414a:	4621      	mov	r1, r4
 801414c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014150:	3b30      	subs	r3, #48	@ 0x30
 8014152:	2b09      	cmp	r3, #9
 8014154:	d94b      	bls.n	80141ee <_vfiprintf_r+0x1a2>
 8014156:	b1b0      	cbz	r0, 8014186 <_vfiprintf_r+0x13a>
 8014158:	9207      	str	r2, [sp, #28]
 801415a:	e014      	b.n	8014186 <_vfiprintf_r+0x13a>
 801415c:	eba0 0308 	sub.w	r3, r0, r8
 8014160:	fa09 f303 	lsl.w	r3, r9, r3
 8014164:	4313      	orrs	r3, r2
 8014166:	9304      	str	r3, [sp, #16]
 8014168:	46a2      	mov	sl, r4
 801416a:	e7d2      	b.n	8014112 <_vfiprintf_r+0xc6>
 801416c:	9b03      	ldr	r3, [sp, #12]
 801416e:	1d19      	adds	r1, r3, #4
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	9103      	str	r1, [sp, #12]
 8014174:	2b00      	cmp	r3, #0
 8014176:	bfbb      	ittet	lt
 8014178:	425b      	neglt	r3, r3
 801417a:	f042 0202 	orrlt.w	r2, r2, #2
 801417e:	9307      	strge	r3, [sp, #28]
 8014180:	9307      	strlt	r3, [sp, #28]
 8014182:	bfb8      	it	lt
 8014184:	9204      	strlt	r2, [sp, #16]
 8014186:	7823      	ldrb	r3, [r4, #0]
 8014188:	2b2e      	cmp	r3, #46	@ 0x2e
 801418a:	d10a      	bne.n	80141a2 <_vfiprintf_r+0x156>
 801418c:	7863      	ldrb	r3, [r4, #1]
 801418e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014190:	d132      	bne.n	80141f8 <_vfiprintf_r+0x1ac>
 8014192:	9b03      	ldr	r3, [sp, #12]
 8014194:	1d1a      	adds	r2, r3, #4
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	9203      	str	r2, [sp, #12]
 801419a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801419e:	3402      	adds	r4, #2
 80141a0:	9305      	str	r3, [sp, #20]
 80141a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014278 <_vfiprintf_r+0x22c>
 80141a6:	7821      	ldrb	r1, [r4, #0]
 80141a8:	2203      	movs	r2, #3
 80141aa:	4650      	mov	r0, sl
 80141ac:	f7ec f830 	bl	8000210 <memchr>
 80141b0:	b138      	cbz	r0, 80141c2 <_vfiprintf_r+0x176>
 80141b2:	9b04      	ldr	r3, [sp, #16]
 80141b4:	eba0 000a 	sub.w	r0, r0, sl
 80141b8:	2240      	movs	r2, #64	@ 0x40
 80141ba:	4082      	lsls	r2, r0
 80141bc:	4313      	orrs	r3, r2
 80141be:	3401      	adds	r4, #1
 80141c0:	9304      	str	r3, [sp, #16]
 80141c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141c6:	4829      	ldr	r0, [pc, #164]	@ (801426c <_vfiprintf_r+0x220>)
 80141c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80141cc:	2206      	movs	r2, #6
 80141ce:	f7ec f81f 	bl	8000210 <memchr>
 80141d2:	2800      	cmp	r0, #0
 80141d4:	d03f      	beq.n	8014256 <_vfiprintf_r+0x20a>
 80141d6:	4b26      	ldr	r3, [pc, #152]	@ (8014270 <_vfiprintf_r+0x224>)
 80141d8:	bb1b      	cbnz	r3, 8014222 <_vfiprintf_r+0x1d6>
 80141da:	9b03      	ldr	r3, [sp, #12]
 80141dc:	3307      	adds	r3, #7
 80141de:	f023 0307 	bic.w	r3, r3, #7
 80141e2:	3308      	adds	r3, #8
 80141e4:	9303      	str	r3, [sp, #12]
 80141e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141e8:	443b      	add	r3, r7
 80141ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80141ec:	e76a      	b.n	80140c4 <_vfiprintf_r+0x78>
 80141ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80141f2:	460c      	mov	r4, r1
 80141f4:	2001      	movs	r0, #1
 80141f6:	e7a8      	b.n	801414a <_vfiprintf_r+0xfe>
 80141f8:	2300      	movs	r3, #0
 80141fa:	3401      	adds	r4, #1
 80141fc:	9305      	str	r3, [sp, #20]
 80141fe:	4619      	mov	r1, r3
 8014200:	f04f 0c0a 	mov.w	ip, #10
 8014204:	4620      	mov	r0, r4
 8014206:	f810 2b01 	ldrb.w	r2, [r0], #1
 801420a:	3a30      	subs	r2, #48	@ 0x30
 801420c:	2a09      	cmp	r2, #9
 801420e:	d903      	bls.n	8014218 <_vfiprintf_r+0x1cc>
 8014210:	2b00      	cmp	r3, #0
 8014212:	d0c6      	beq.n	80141a2 <_vfiprintf_r+0x156>
 8014214:	9105      	str	r1, [sp, #20]
 8014216:	e7c4      	b.n	80141a2 <_vfiprintf_r+0x156>
 8014218:	fb0c 2101 	mla	r1, ip, r1, r2
 801421c:	4604      	mov	r4, r0
 801421e:	2301      	movs	r3, #1
 8014220:	e7f0      	b.n	8014204 <_vfiprintf_r+0x1b8>
 8014222:	ab03      	add	r3, sp, #12
 8014224:	9300      	str	r3, [sp, #0]
 8014226:	462a      	mov	r2, r5
 8014228:	4b12      	ldr	r3, [pc, #72]	@ (8014274 <_vfiprintf_r+0x228>)
 801422a:	a904      	add	r1, sp, #16
 801422c:	4630      	mov	r0, r6
 801422e:	f7fd fe69 	bl	8011f04 <_printf_float>
 8014232:	4607      	mov	r7, r0
 8014234:	1c78      	adds	r0, r7, #1
 8014236:	d1d6      	bne.n	80141e6 <_vfiprintf_r+0x19a>
 8014238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801423a:	07d9      	lsls	r1, r3, #31
 801423c:	d405      	bmi.n	801424a <_vfiprintf_r+0x1fe>
 801423e:	89ab      	ldrh	r3, [r5, #12]
 8014240:	059a      	lsls	r2, r3, #22
 8014242:	d402      	bmi.n	801424a <_vfiprintf_r+0x1fe>
 8014244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014246:	f7fe fcad 	bl	8012ba4 <__retarget_lock_release_recursive>
 801424a:	89ab      	ldrh	r3, [r5, #12]
 801424c:	065b      	lsls	r3, r3, #25
 801424e:	f53f af1f 	bmi.w	8014090 <_vfiprintf_r+0x44>
 8014252:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014254:	e71e      	b.n	8014094 <_vfiprintf_r+0x48>
 8014256:	ab03      	add	r3, sp, #12
 8014258:	9300      	str	r3, [sp, #0]
 801425a:	462a      	mov	r2, r5
 801425c:	4b05      	ldr	r3, [pc, #20]	@ (8014274 <_vfiprintf_r+0x228>)
 801425e:	a904      	add	r1, sp, #16
 8014260:	4630      	mov	r0, r6
 8014262:	f7fe f8e7 	bl	8012434 <_printf_i>
 8014266:	e7e4      	b.n	8014232 <_vfiprintf_r+0x1e6>
 8014268:	080be890 	.word	0x080be890
 801426c:	080be89a 	.word	0x080be89a
 8014270:	08011f05 	.word	0x08011f05
 8014274:	08014027 	.word	0x08014027
 8014278:	080be896 	.word	0x080be896

0801427c <__sflush_r>:
 801427c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014284:	0716      	lsls	r6, r2, #28
 8014286:	4605      	mov	r5, r0
 8014288:	460c      	mov	r4, r1
 801428a:	d454      	bmi.n	8014336 <__sflush_r+0xba>
 801428c:	684b      	ldr	r3, [r1, #4]
 801428e:	2b00      	cmp	r3, #0
 8014290:	dc02      	bgt.n	8014298 <__sflush_r+0x1c>
 8014292:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014294:	2b00      	cmp	r3, #0
 8014296:	dd48      	ble.n	801432a <__sflush_r+0xae>
 8014298:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801429a:	2e00      	cmp	r6, #0
 801429c:	d045      	beq.n	801432a <__sflush_r+0xae>
 801429e:	2300      	movs	r3, #0
 80142a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80142a4:	682f      	ldr	r7, [r5, #0]
 80142a6:	6a21      	ldr	r1, [r4, #32]
 80142a8:	602b      	str	r3, [r5, #0]
 80142aa:	d030      	beq.n	801430e <__sflush_r+0x92>
 80142ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80142ae:	89a3      	ldrh	r3, [r4, #12]
 80142b0:	0759      	lsls	r1, r3, #29
 80142b2:	d505      	bpl.n	80142c0 <__sflush_r+0x44>
 80142b4:	6863      	ldr	r3, [r4, #4]
 80142b6:	1ad2      	subs	r2, r2, r3
 80142b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80142ba:	b10b      	cbz	r3, 80142c0 <__sflush_r+0x44>
 80142bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80142be:	1ad2      	subs	r2, r2, r3
 80142c0:	2300      	movs	r3, #0
 80142c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80142c4:	6a21      	ldr	r1, [r4, #32]
 80142c6:	4628      	mov	r0, r5
 80142c8:	47b0      	blx	r6
 80142ca:	1c43      	adds	r3, r0, #1
 80142cc:	89a3      	ldrh	r3, [r4, #12]
 80142ce:	d106      	bne.n	80142de <__sflush_r+0x62>
 80142d0:	6829      	ldr	r1, [r5, #0]
 80142d2:	291d      	cmp	r1, #29
 80142d4:	d82b      	bhi.n	801432e <__sflush_r+0xb2>
 80142d6:	4a2a      	ldr	r2, [pc, #168]	@ (8014380 <__sflush_r+0x104>)
 80142d8:	410a      	asrs	r2, r1
 80142da:	07d6      	lsls	r6, r2, #31
 80142dc:	d427      	bmi.n	801432e <__sflush_r+0xb2>
 80142de:	2200      	movs	r2, #0
 80142e0:	6062      	str	r2, [r4, #4]
 80142e2:	04d9      	lsls	r1, r3, #19
 80142e4:	6922      	ldr	r2, [r4, #16]
 80142e6:	6022      	str	r2, [r4, #0]
 80142e8:	d504      	bpl.n	80142f4 <__sflush_r+0x78>
 80142ea:	1c42      	adds	r2, r0, #1
 80142ec:	d101      	bne.n	80142f2 <__sflush_r+0x76>
 80142ee:	682b      	ldr	r3, [r5, #0]
 80142f0:	b903      	cbnz	r3, 80142f4 <__sflush_r+0x78>
 80142f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80142f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80142f6:	602f      	str	r7, [r5, #0]
 80142f8:	b1b9      	cbz	r1, 801432a <__sflush_r+0xae>
 80142fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80142fe:	4299      	cmp	r1, r3
 8014300:	d002      	beq.n	8014308 <__sflush_r+0x8c>
 8014302:	4628      	mov	r0, r5
 8014304:	f7ff faac 	bl	8013860 <_free_r>
 8014308:	2300      	movs	r3, #0
 801430a:	6363      	str	r3, [r4, #52]	@ 0x34
 801430c:	e00d      	b.n	801432a <__sflush_r+0xae>
 801430e:	2301      	movs	r3, #1
 8014310:	4628      	mov	r0, r5
 8014312:	47b0      	blx	r6
 8014314:	4602      	mov	r2, r0
 8014316:	1c50      	adds	r0, r2, #1
 8014318:	d1c9      	bne.n	80142ae <__sflush_r+0x32>
 801431a:	682b      	ldr	r3, [r5, #0]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d0c6      	beq.n	80142ae <__sflush_r+0x32>
 8014320:	2b1d      	cmp	r3, #29
 8014322:	d001      	beq.n	8014328 <__sflush_r+0xac>
 8014324:	2b16      	cmp	r3, #22
 8014326:	d11e      	bne.n	8014366 <__sflush_r+0xea>
 8014328:	602f      	str	r7, [r5, #0]
 801432a:	2000      	movs	r0, #0
 801432c:	e022      	b.n	8014374 <__sflush_r+0xf8>
 801432e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014332:	b21b      	sxth	r3, r3
 8014334:	e01b      	b.n	801436e <__sflush_r+0xf2>
 8014336:	690f      	ldr	r7, [r1, #16]
 8014338:	2f00      	cmp	r7, #0
 801433a:	d0f6      	beq.n	801432a <__sflush_r+0xae>
 801433c:	0793      	lsls	r3, r2, #30
 801433e:	680e      	ldr	r6, [r1, #0]
 8014340:	bf08      	it	eq
 8014342:	694b      	ldreq	r3, [r1, #20]
 8014344:	600f      	str	r7, [r1, #0]
 8014346:	bf18      	it	ne
 8014348:	2300      	movne	r3, #0
 801434a:	eba6 0807 	sub.w	r8, r6, r7
 801434e:	608b      	str	r3, [r1, #8]
 8014350:	f1b8 0f00 	cmp.w	r8, #0
 8014354:	dde9      	ble.n	801432a <__sflush_r+0xae>
 8014356:	6a21      	ldr	r1, [r4, #32]
 8014358:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801435a:	4643      	mov	r3, r8
 801435c:	463a      	mov	r2, r7
 801435e:	4628      	mov	r0, r5
 8014360:	47b0      	blx	r6
 8014362:	2800      	cmp	r0, #0
 8014364:	dc08      	bgt.n	8014378 <__sflush_r+0xfc>
 8014366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801436a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801436e:	81a3      	strh	r3, [r4, #12]
 8014370:	f04f 30ff 	mov.w	r0, #4294967295
 8014374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014378:	4407      	add	r7, r0
 801437a:	eba8 0800 	sub.w	r8, r8, r0
 801437e:	e7e7      	b.n	8014350 <__sflush_r+0xd4>
 8014380:	dfbffffe 	.word	0xdfbffffe

08014384 <_fflush_r>:
 8014384:	b538      	push	{r3, r4, r5, lr}
 8014386:	690b      	ldr	r3, [r1, #16]
 8014388:	4605      	mov	r5, r0
 801438a:	460c      	mov	r4, r1
 801438c:	b913      	cbnz	r3, 8014394 <_fflush_r+0x10>
 801438e:	2500      	movs	r5, #0
 8014390:	4628      	mov	r0, r5
 8014392:	bd38      	pop	{r3, r4, r5, pc}
 8014394:	b118      	cbz	r0, 801439e <_fflush_r+0x1a>
 8014396:	6a03      	ldr	r3, [r0, #32]
 8014398:	b90b      	cbnz	r3, 801439e <_fflush_r+0x1a>
 801439a:	f7fe f9f7 	bl	801278c <__sinit>
 801439e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d0f3      	beq.n	801438e <_fflush_r+0xa>
 80143a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80143a8:	07d0      	lsls	r0, r2, #31
 80143aa:	d404      	bmi.n	80143b6 <_fflush_r+0x32>
 80143ac:	0599      	lsls	r1, r3, #22
 80143ae:	d402      	bmi.n	80143b6 <_fflush_r+0x32>
 80143b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80143b2:	f7fe fbf6 	bl	8012ba2 <__retarget_lock_acquire_recursive>
 80143b6:	4628      	mov	r0, r5
 80143b8:	4621      	mov	r1, r4
 80143ba:	f7ff ff5f 	bl	801427c <__sflush_r>
 80143be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80143c0:	07da      	lsls	r2, r3, #31
 80143c2:	4605      	mov	r5, r0
 80143c4:	d4e4      	bmi.n	8014390 <_fflush_r+0xc>
 80143c6:	89a3      	ldrh	r3, [r4, #12]
 80143c8:	059b      	lsls	r3, r3, #22
 80143ca:	d4e1      	bmi.n	8014390 <_fflush_r+0xc>
 80143cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80143ce:	f7fe fbe9 	bl	8012ba4 <__retarget_lock_release_recursive>
 80143d2:	e7dd      	b.n	8014390 <_fflush_r+0xc>

080143d4 <__swhatbuf_r>:
 80143d4:	b570      	push	{r4, r5, r6, lr}
 80143d6:	460c      	mov	r4, r1
 80143d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143dc:	2900      	cmp	r1, #0
 80143de:	b096      	sub	sp, #88	@ 0x58
 80143e0:	4615      	mov	r5, r2
 80143e2:	461e      	mov	r6, r3
 80143e4:	da0d      	bge.n	8014402 <__swhatbuf_r+0x2e>
 80143e6:	89a3      	ldrh	r3, [r4, #12]
 80143e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80143ec:	f04f 0100 	mov.w	r1, #0
 80143f0:	bf14      	ite	ne
 80143f2:	2340      	movne	r3, #64	@ 0x40
 80143f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80143f8:	2000      	movs	r0, #0
 80143fa:	6031      	str	r1, [r6, #0]
 80143fc:	602b      	str	r3, [r5, #0]
 80143fe:	b016      	add	sp, #88	@ 0x58
 8014400:	bd70      	pop	{r4, r5, r6, pc}
 8014402:	466a      	mov	r2, sp
 8014404:	f000 f848 	bl	8014498 <_fstat_r>
 8014408:	2800      	cmp	r0, #0
 801440a:	dbec      	blt.n	80143e6 <__swhatbuf_r+0x12>
 801440c:	9901      	ldr	r1, [sp, #4]
 801440e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014412:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014416:	4259      	negs	r1, r3
 8014418:	4159      	adcs	r1, r3
 801441a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801441e:	e7eb      	b.n	80143f8 <__swhatbuf_r+0x24>

08014420 <__smakebuf_r>:
 8014420:	898b      	ldrh	r3, [r1, #12]
 8014422:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014424:	079d      	lsls	r5, r3, #30
 8014426:	4606      	mov	r6, r0
 8014428:	460c      	mov	r4, r1
 801442a:	d507      	bpl.n	801443c <__smakebuf_r+0x1c>
 801442c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014430:	6023      	str	r3, [r4, #0]
 8014432:	6123      	str	r3, [r4, #16]
 8014434:	2301      	movs	r3, #1
 8014436:	6163      	str	r3, [r4, #20]
 8014438:	b003      	add	sp, #12
 801443a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801443c:	ab01      	add	r3, sp, #4
 801443e:	466a      	mov	r2, sp
 8014440:	f7ff ffc8 	bl	80143d4 <__swhatbuf_r>
 8014444:	9f00      	ldr	r7, [sp, #0]
 8014446:	4605      	mov	r5, r0
 8014448:	4639      	mov	r1, r7
 801444a:	4630      	mov	r0, r6
 801444c:	f7fd fc2e 	bl	8011cac <_malloc_r>
 8014450:	b948      	cbnz	r0, 8014466 <__smakebuf_r+0x46>
 8014452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014456:	059a      	lsls	r2, r3, #22
 8014458:	d4ee      	bmi.n	8014438 <__smakebuf_r+0x18>
 801445a:	f023 0303 	bic.w	r3, r3, #3
 801445e:	f043 0302 	orr.w	r3, r3, #2
 8014462:	81a3      	strh	r3, [r4, #12]
 8014464:	e7e2      	b.n	801442c <__smakebuf_r+0xc>
 8014466:	89a3      	ldrh	r3, [r4, #12]
 8014468:	6020      	str	r0, [r4, #0]
 801446a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801446e:	81a3      	strh	r3, [r4, #12]
 8014470:	9b01      	ldr	r3, [sp, #4]
 8014472:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014476:	b15b      	cbz	r3, 8014490 <__smakebuf_r+0x70>
 8014478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801447c:	4630      	mov	r0, r6
 801447e:	f000 f81d 	bl	80144bc <_isatty_r>
 8014482:	b128      	cbz	r0, 8014490 <__smakebuf_r+0x70>
 8014484:	89a3      	ldrh	r3, [r4, #12]
 8014486:	f023 0303 	bic.w	r3, r3, #3
 801448a:	f043 0301 	orr.w	r3, r3, #1
 801448e:	81a3      	strh	r3, [r4, #12]
 8014490:	89a3      	ldrh	r3, [r4, #12]
 8014492:	431d      	orrs	r5, r3
 8014494:	81a5      	strh	r5, [r4, #12]
 8014496:	e7cf      	b.n	8014438 <__smakebuf_r+0x18>

08014498 <_fstat_r>:
 8014498:	b538      	push	{r3, r4, r5, lr}
 801449a:	4d07      	ldr	r5, [pc, #28]	@ (80144b8 <_fstat_r+0x20>)
 801449c:	2300      	movs	r3, #0
 801449e:	4604      	mov	r4, r0
 80144a0:	4608      	mov	r0, r1
 80144a2:	4611      	mov	r1, r2
 80144a4:	602b      	str	r3, [r5, #0]
 80144a6:	f7ed fdff 	bl	80020a8 <_fstat>
 80144aa:	1c43      	adds	r3, r0, #1
 80144ac:	d102      	bne.n	80144b4 <_fstat_r+0x1c>
 80144ae:	682b      	ldr	r3, [r5, #0]
 80144b0:	b103      	cbz	r3, 80144b4 <_fstat_r+0x1c>
 80144b2:	6023      	str	r3, [r4, #0]
 80144b4:	bd38      	pop	{r3, r4, r5, pc}
 80144b6:	bf00      	nop
 80144b8:	20005ff8 	.word	0x20005ff8

080144bc <_isatty_r>:
 80144bc:	b538      	push	{r3, r4, r5, lr}
 80144be:	4d06      	ldr	r5, [pc, #24]	@ (80144d8 <_isatty_r+0x1c>)
 80144c0:	2300      	movs	r3, #0
 80144c2:	4604      	mov	r4, r0
 80144c4:	4608      	mov	r0, r1
 80144c6:	602b      	str	r3, [r5, #0]
 80144c8:	f7ed fdfe 	bl	80020c8 <_isatty>
 80144cc:	1c43      	adds	r3, r0, #1
 80144ce:	d102      	bne.n	80144d6 <_isatty_r+0x1a>
 80144d0:	682b      	ldr	r3, [r5, #0]
 80144d2:	b103      	cbz	r3, 80144d6 <_isatty_r+0x1a>
 80144d4:	6023      	str	r3, [r4, #0]
 80144d6:	bd38      	pop	{r3, r4, r5, pc}
 80144d8:	20005ff8 	.word	0x20005ff8

080144dc <__assert_func>:
 80144dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80144de:	4614      	mov	r4, r2
 80144e0:	461a      	mov	r2, r3
 80144e2:	4b09      	ldr	r3, [pc, #36]	@ (8014508 <__assert_func+0x2c>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	4605      	mov	r5, r0
 80144e8:	68d8      	ldr	r0, [r3, #12]
 80144ea:	b954      	cbnz	r4, 8014502 <__assert_func+0x26>
 80144ec:	4b07      	ldr	r3, [pc, #28]	@ (801450c <__assert_func+0x30>)
 80144ee:	461c      	mov	r4, r3
 80144f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80144f4:	9100      	str	r1, [sp, #0]
 80144f6:	462b      	mov	r3, r5
 80144f8:	4905      	ldr	r1, [pc, #20]	@ (8014510 <__assert_func+0x34>)
 80144fa:	f000 f841 	bl	8014580 <fiprintf>
 80144fe:	f000 f851 	bl	80145a4 <abort>
 8014502:	4b04      	ldr	r3, [pc, #16]	@ (8014514 <__assert_func+0x38>)
 8014504:	e7f4      	b.n	80144f0 <__assert_func+0x14>
 8014506:	bf00      	nop
 8014508:	20000818 	.word	0x20000818
 801450c:	080be8e6 	.word	0x080be8e6
 8014510:	080be8b8 	.word	0x080be8b8
 8014514:	080be8ab 	.word	0x080be8ab

08014518 <_calloc_r>:
 8014518:	b570      	push	{r4, r5, r6, lr}
 801451a:	fba1 5402 	umull	r5, r4, r1, r2
 801451e:	b93c      	cbnz	r4, 8014530 <_calloc_r+0x18>
 8014520:	4629      	mov	r1, r5
 8014522:	f7fd fbc3 	bl	8011cac <_malloc_r>
 8014526:	4606      	mov	r6, r0
 8014528:	b928      	cbnz	r0, 8014536 <_calloc_r+0x1e>
 801452a:	2600      	movs	r6, #0
 801452c:	4630      	mov	r0, r6
 801452e:	bd70      	pop	{r4, r5, r6, pc}
 8014530:	220c      	movs	r2, #12
 8014532:	6002      	str	r2, [r0, #0]
 8014534:	e7f9      	b.n	801452a <_calloc_r+0x12>
 8014536:	462a      	mov	r2, r5
 8014538:	4621      	mov	r1, r4
 801453a:	f7fe faa5 	bl	8012a88 <memset>
 801453e:	e7f5      	b.n	801452c <_calloc_r+0x14>

08014540 <__ascii_mbtowc>:
 8014540:	b082      	sub	sp, #8
 8014542:	b901      	cbnz	r1, 8014546 <__ascii_mbtowc+0x6>
 8014544:	a901      	add	r1, sp, #4
 8014546:	b142      	cbz	r2, 801455a <__ascii_mbtowc+0x1a>
 8014548:	b14b      	cbz	r3, 801455e <__ascii_mbtowc+0x1e>
 801454a:	7813      	ldrb	r3, [r2, #0]
 801454c:	600b      	str	r3, [r1, #0]
 801454e:	7812      	ldrb	r2, [r2, #0]
 8014550:	1e10      	subs	r0, r2, #0
 8014552:	bf18      	it	ne
 8014554:	2001      	movne	r0, #1
 8014556:	b002      	add	sp, #8
 8014558:	4770      	bx	lr
 801455a:	4610      	mov	r0, r2
 801455c:	e7fb      	b.n	8014556 <__ascii_mbtowc+0x16>
 801455e:	f06f 0001 	mvn.w	r0, #1
 8014562:	e7f8      	b.n	8014556 <__ascii_mbtowc+0x16>

08014564 <__ascii_wctomb>:
 8014564:	4603      	mov	r3, r0
 8014566:	4608      	mov	r0, r1
 8014568:	b141      	cbz	r1, 801457c <__ascii_wctomb+0x18>
 801456a:	2aff      	cmp	r2, #255	@ 0xff
 801456c:	d904      	bls.n	8014578 <__ascii_wctomb+0x14>
 801456e:	228a      	movs	r2, #138	@ 0x8a
 8014570:	601a      	str	r2, [r3, #0]
 8014572:	f04f 30ff 	mov.w	r0, #4294967295
 8014576:	4770      	bx	lr
 8014578:	700a      	strb	r2, [r1, #0]
 801457a:	2001      	movs	r0, #1
 801457c:	4770      	bx	lr
	...

08014580 <fiprintf>:
 8014580:	b40e      	push	{r1, r2, r3}
 8014582:	b503      	push	{r0, r1, lr}
 8014584:	4601      	mov	r1, r0
 8014586:	ab03      	add	r3, sp, #12
 8014588:	4805      	ldr	r0, [pc, #20]	@ (80145a0 <fiprintf+0x20>)
 801458a:	f853 2b04 	ldr.w	r2, [r3], #4
 801458e:	6800      	ldr	r0, [r0, #0]
 8014590:	9301      	str	r3, [sp, #4]
 8014592:	f7ff fd5b 	bl	801404c <_vfiprintf_r>
 8014596:	b002      	add	sp, #8
 8014598:	f85d eb04 	ldr.w	lr, [sp], #4
 801459c:	b003      	add	sp, #12
 801459e:	4770      	bx	lr
 80145a0:	20000818 	.word	0x20000818

080145a4 <abort>:
 80145a4:	b508      	push	{r3, lr}
 80145a6:	2006      	movs	r0, #6
 80145a8:	f000 f82c 	bl	8014604 <raise>
 80145ac:	2001      	movs	r0, #1
 80145ae:	f7ed fd2b 	bl	8002008 <_exit>

080145b2 <_raise_r>:
 80145b2:	291f      	cmp	r1, #31
 80145b4:	b538      	push	{r3, r4, r5, lr}
 80145b6:	4605      	mov	r5, r0
 80145b8:	460c      	mov	r4, r1
 80145ba:	d904      	bls.n	80145c6 <_raise_r+0x14>
 80145bc:	2316      	movs	r3, #22
 80145be:	6003      	str	r3, [r0, #0]
 80145c0:	f04f 30ff 	mov.w	r0, #4294967295
 80145c4:	bd38      	pop	{r3, r4, r5, pc}
 80145c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80145c8:	b112      	cbz	r2, 80145d0 <_raise_r+0x1e>
 80145ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80145ce:	b94b      	cbnz	r3, 80145e4 <_raise_r+0x32>
 80145d0:	4628      	mov	r0, r5
 80145d2:	f000 f831 	bl	8014638 <_getpid_r>
 80145d6:	4622      	mov	r2, r4
 80145d8:	4601      	mov	r1, r0
 80145da:	4628      	mov	r0, r5
 80145dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80145e0:	f000 b818 	b.w	8014614 <_kill_r>
 80145e4:	2b01      	cmp	r3, #1
 80145e6:	d00a      	beq.n	80145fe <_raise_r+0x4c>
 80145e8:	1c59      	adds	r1, r3, #1
 80145ea:	d103      	bne.n	80145f4 <_raise_r+0x42>
 80145ec:	2316      	movs	r3, #22
 80145ee:	6003      	str	r3, [r0, #0]
 80145f0:	2001      	movs	r0, #1
 80145f2:	e7e7      	b.n	80145c4 <_raise_r+0x12>
 80145f4:	2100      	movs	r1, #0
 80145f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80145fa:	4620      	mov	r0, r4
 80145fc:	4798      	blx	r3
 80145fe:	2000      	movs	r0, #0
 8014600:	e7e0      	b.n	80145c4 <_raise_r+0x12>
	...

08014604 <raise>:
 8014604:	4b02      	ldr	r3, [pc, #8]	@ (8014610 <raise+0xc>)
 8014606:	4601      	mov	r1, r0
 8014608:	6818      	ldr	r0, [r3, #0]
 801460a:	f7ff bfd2 	b.w	80145b2 <_raise_r>
 801460e:	bf00      	nop
 8014610:	20000818 	.word	0x20000818

08014614 <_kill_r>:
 8014614:	b538      	push	{r3, r4, r5, lr}
 8014616:	4d07      	ldr	r5, [pc, #28]	@ (8014634 <_kill_r+0x20>)
 8014618:	2300      	movs	r3, #0
 801461a:	4604      	mov	r4, r0
 801461c:	4608      	mov	r0, r1
 801461e:	4611      	mov	r1, r2
 8014620:	602b      	str	r3, [r5, #0]
 8014622:	f7ed fce1 	bl	8001fe8 <_kill>
 8014626:	1c43      	adds	r3, r0, #1
 8014628:	d102      	bne.n	8014630 <_kill_r+0x1c>
 801462a:	682b      	ldr	r3, [r5, #0]
 801462c:	b103      	cbz	r3, 8014630 <_kill_r+0x1c>
 801462e:	6023      	str	r3, [r4, #0]
 8014630:	bd38      	pop	{r3, r4, r5, pc}
 8014632:	bf00      	nop
 8014634:	20005ff8 	.word	0x20005ff8

08014638 <_getpid_r>:
 8014638:	f7ed bcce 	b.w	8001fd8 <_getpid>

0801463c <_init>:
 801463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801463e:	bf00      	nop
 8014640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014642:	bc08      	pop	{r3}
 8014644:	469e      	mov	lr, r3
 8014646:	4770      	bx	lr

08014648 <_fini>:
 8014648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801464a:	bf00      	nop
 801464c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801464e:	bc08      	pop	{r3}
 8014650:	469e      	mov	lr, r3
 8014652:	4770      	bx	lr
