
Microphone_wav_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000151cc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000bdb70  080153a0  080153a0  000163a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080d2f10  080d2f10  000d49d4  2**0
                  CONTENTS
  4 .ARM          00000008  080d2f10  080d2f10  000d3f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080d2f18  080d2f18  000d49d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080d2f18  080d2f18  000d3f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080d2f1c  080d2f1c  000d3f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000009d4  20000000  080d2f20  000d4000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d744  200009d4  080d38f4  000d49d4  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  2000e118  080d38f4  000d5118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000d49d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000215e3  00000000  00000000  000d4a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005332  00000000  00000000  000f5fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  000fb320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001373  00000000  00000000  000fcce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dc87  00000000  00000000  000fe05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025c3a  00000000  00000000  0012bce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001052df  00000000  00000000  0015191c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000f4  00000000  00000000  00256bfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078b8  00000000  00000000  00256cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0025e5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000004cd  00000000  00000000  0025e610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0025eadd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009d4 	.word	0x200009d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015384 	.word	0x08015384

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009d8 	.word	0x200009d8
 800020c:	08015384 	.word	0x08015384

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000edc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <MX_CRC_Init+0x3c>)
 8000ede:	4a0e      	ldr	r2, [pc, #56]	@ (8000f18 <MX_CRC_Init+0x40>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <MX_CRC_Init+0x3c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <MX_CRC_Init+0x3c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <MX_CRC_Init+0x3c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <MX_CRC_Init+0x3c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <MX_CRC_Init+0x3c>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <MX_CRC_Init+0x3c>)
 8000f02:	f003 fd01 	bl	8004908 <HAL_CRC_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000f0c:	f000 fe36 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200009f0 	.word	0x200009f0
 8000f18:	40023000 	.word	0x40023000

08000f1c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <HAL_CRC_MspInit+0x38>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10b      	bne.n	8000f46 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <HAL_CRC_MspInit+0x3c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a09      	ldr	r2, [pc, #36]	@ (8000f58 <HAL_CRC_MspInit+0x3c>)
 8000f34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <HAL_CRC_MspInit+0x3c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023000 	.word	0x40023000
 8000f58:	40023800 	.word	0x40023800

08000f5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <MX_DMA_Init+0x58>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a13      	ldr	r2, [pc, #76]	@ (8000fb4 <MX_DMA_Init+0x58>)
 8000f68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <MX_DMA_Init+0x58>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2039      	movs	r0, #57	@ 0x39
 8000f80:	f003 fc8b 	bl	800489a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f84:	2039      	movs	r0, #57	@ 0x39
 8000f86:	f003 fca4 	bl	80048d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	203b      	movs	r0, #59	@ 0x3b
 8000f90:	f003 fc83 	bl	800489a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f94:	203b      	movs	r0, #59	@ 0x3b
 8000f96:	f003 fc9c 	bl	80048d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 2, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	2045      	movs	r0, #69	@ 0x45
 8000fa0:	f003 fc7b 	bl	800489a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000fa4:	2045      	movs	r0, #69	@ 0x45
 8000fa6:	f003 fc94 	bl	80048d2 <HAL_NVIC_EnableIRQ>

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b090      	sub	sp, #64	@ 0x40
 8000fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fce:	4ba6      	ldr	r3, [pc, #664]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4aa5      	ldr	r2, [pc, #660]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8000fd4:	f043 0310 	orr.w	r3, r3, #16
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4ba3      	ldr	r3, [pc, #652]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe6:	4ba0      	ldr	r3, [pc, #640]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a9f      	ldr	r2, [pc, #636]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8000fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b9d      	ldr	r3, [pc, #628]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b9a      	ldr	r3, [pc, #616]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a99      	ldr	r2, [pc, #612]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b97      	ldr	r3, [pc, #604]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	623b      	str	r3, [r7, #32]
 8001014:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	4b94      	ldr	r3, [pc, #592]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a93      	ldr	r2, [pc, #588]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b91      	ldr	r3, [pc, #580]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	4b8e      	ldr	r3, [pc, #568]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a8d      	ldr	r2, [pc, #564]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b8b      	ldr	r3, [pc, #556]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b88      	ldr	r3, [pc, #544]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a87      	ldr	r2, [pc, #540]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b85      	ldr	r3, [pc, #532]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800105e:	4b82      	ldr	r3, [pc, #520]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a81      	ldr	r2, [pc, #516]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001064:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b7f      	ldr	r3, [pc, #508]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001076:	4b7c      	ldr	r3, [pc, #496]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a7b      	ldr	r2, [pc, #492]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 800107c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b79      	ldr	r3, [pc, #484]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800108e:	4b76      	ldr	r3, [pc, #472]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a75      	ldr	r2, [pc, #468]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 8001094:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b73      	ldr	r3, [pc, #460]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a6:	4b70      	ldr	r3, [pc, #448]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	4b6a      	ldr	r3, [pc, #424]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a69      	ldr	r2, [pc, #420]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b67      	ldr	r3, [pc, #412]	@ (8001268 <MX_GPIO_Init+0x2b0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2102      	movs	r1, #2
 80010da:	4864      	ldr	r0, [pc, #400]	@ (800126c <MX_GPIO_Init+0x2b4>)
 80010dc:	f004 fc4a 	bl	8005974 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE8 PE9 PE11 PE14
                           PE7 PE10 PE12 PE15
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 80010e0:	f64f 738f 	movw	r3, #65423	@ 0xff8f
 80010e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e6:	2303      	movs	r3, #3
 80010e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f2:	4619      	mov	r1, r3
 80010f4:	485e      	ldr	r0, [pc, #376]	@ (8001270 <MX_GPIO_Init+0x2b8>)
 80010f6:	f004 f96d 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 80010fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001100:	2303      	movs	r3, #3
 8001102:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001108:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800110c:	4619      	mov	r1, r3
 800110e:	4859      	ldr	r0, [pc, #356]	@ (8001274 <MX_GPIO_Init+0x2bc>)
 8001110:	f004 f960 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001114:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111a:	2303      	movs	r3, #3
 800111c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001122:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001126:	4619      	mov	r1, r3
 8001128:	4853      	ldr	r0, [pc, #332]	@ (8001278 <MX_GPIO_Init+0x2c0>)
 800112a:	f004 f953 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD15
                           PD10 PD14 PD9 PD8
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 800112e:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8001132:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001134:	2303      	movs	r3, #3
 8001136:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800113c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001140:	4619      	mov	r1, r3
 8001142:	484e      	ldr	r0, [pc, #312]	@ (800127c <MX_GPIO_Init+0x2c4>)
 8001144:	f004 f946 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 8001148:	f649 53ff 	movw	r3, #40447	@ 0x9dff
 800114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114e:	2303      	movs	r3, #3
 8001150:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800115a:	4619      	mov	r1, r3
 800115c:	4848      	ldr	r0, [pc, #288]	@ (8001280 <MX_GPIO_Init+0x2c8>)
 800115e:	f004 f939 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8001162:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001168:	2303      	movs	r3, #3
 800116a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001170:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001174:	4619      	mov	r1, r3
 8001176:	4843      	ldr	r0, [pc, #268]	@ (8001284 <MX_GPIO_Init+0x2cc>)
 8001178:	f004 f92c 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC9 PC7 PC6 PC3
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 800117c:	f64c 63ff 	movw	r3, #52991	@ 0xceff
 8001180:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800118e:	4619      	mov	r1, r3
 8001190:	483d      	ldr	r0, [pc, #244]	@ (8001288 <MX_GPIO_Init+0x2d0>)
 8001192:	f004 f91f 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI12 PI9 PI0 PI13
                           PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001196:	f24f 73fd 	movw	r3, #63485	@ 0xf7fd
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_13
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119c:	2303      	movs	r3, #3
 800119e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a8:	4619      	mov	r1, r3
 80011aa:	4830      	ldr	r0, [pc, #192]	@ (800126c <MX_GPIO_Init+0x2b4>)
 80011ac:	f004 f912 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80011b0:	23ff      	movs	r3, #255	@ 0xff
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b4:	2303      	movs	r3, #3
 80011b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80011bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c0:	4619      	mov	r1, r3
 80011c2:	4832      	ldr	r0, [pc, #200]	@ (800128c <MX_GPIO_Init+0x2d4>)
 80011c4:	f004 f906 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80011c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ce:	2300      	movs	r3, #0
 80011d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011da:	4619      	mov	r1, r3
 80011dc:	482a      	ldr	r0, [pc, #168]	@ (8001288 <MX_GPIO_Init+0x2d0>)
 80011de:	f004 f8f9 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e8:	2303      	movs	r3, #3
 80011ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011f4:	4619      	mov	r1, r3
 80011f6:	4826      	ldr	r0, [pc, #152]	@ (8001290 <MX_GPIO_Init+0x2d8>)
 80011f8:	f004 f8ec 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 80011fc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8001200:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001202:	2303      	movs	r3, #3
 8001204:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800120a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800120e:	4619      	mov	r1, r3
 8001210:	4820      	ldr	r0, [pc, #128]	@ (8001294 <MX_GPIO_Init+0x2dc>)
 8001212:	f004 f8df 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001216:	2302      	movs	r3, #2
 8001218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800122a:	4619      	mov	r1, r3
 800122c:	480f      	ldr	r0, [pc, #60]	@ (800126c <MX_GPIO_Init+0x2b4>)
 800122e:	f004 f8d1 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001232:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001238:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800123c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001246:	4619      	mov	r1, r3
 8001248:	4808      	ldr	r0, [pc, #32]	@ (800126c <MX_GPIO_Init+0x2b4>)
 800124a:	f004 f8c3 	bl	80053d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	2028      	movs	r0, #40	@ 0x28
 8001254:	f003 fb21 	bl	800489a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001258:	2028      	movs	r0, #40	@ 0x28
 800125a:	f003 fb3a 	bl	80048d2 <HAL_NVIC_EnableIRQ>

}
 800125e:	bf00      	nop
 8001260:	3740      	adds	r7, #64	@ 0x40
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40022000 	.word	0x40022000
 8001270:	40021000 	.word	0x40021000
 8001274:	40021800 	.word	0x40021800
 8001278:	40020400 	.word	0x40020400
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40020000 	.word	0x40020000
 8001284:	40022400 	.word	0x40022400
 8001288:	40020800 	.word	0x40020800
 800128c:	40022800 	.word	0x40022800
 8001290:	40021400 	.word	0x40021400
 8001294:	40021c00 	.word	0x40021c00

08001298 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800129c:	f3bf 8f4f 	dsb	sy
}
 80012a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012a2:	f3bf 8f6f 	isb	sy
}
 80012a6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012a8:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <SCB_EnableICache+0x48>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b0:	f3bf 8f4f 	dsb	sy
}
 80012b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012b6:	f3bf 8f6f 	isb	sy
}
 80012ba:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <SCB_EnableICache+0x48>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	4a07      	ldr	r2, [pc, #28]	@ (80012e0 <SCB_EnableICache+0x48>)
 80012c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012c8:	f3bf 8f4f 	dsb	sy
}
 80012cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ce:	f3bf 8f6f 	isb	sy
}
 80012d2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <SCB_DisableICache>:
/**
  \brief   Disable I-Cache
  \details Turns off I-Cache
  */
__STATIC_INLINE void SCB_DisableICache (void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80012e8:	f3bf 8f4f 	dsb	sy
}
 80012ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ee:	f3bf 8f6f 	isb	sy
}
 80012f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <SCB_DisableICache+0x3c>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	4a09      	ldr	r2, [pc, #36]	@ (8001320 <SCB_DisableICache+0x3c>)
 80012fa:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80012fe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001300:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <SCB_DisableICache+0x3c>)
 8001302:	2200      	movs	r2, #0
 8001304:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001308:	f3bf 8f4f 	dsb	sy
}
 800130c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800130e:	f3bf 8f6f 	isb	sy
}
 8001312:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800132a:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <SCB_EnableDCache+0x84>)
 800132c:	2200      	movs	r2, #0
 800132e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001332:	f3bf 8f4f 	dsb	sy
}
 8001336:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <SCB_EnableDCache+0x84>)
 800133a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800133e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	0b5b      	lsrs	r3, r3, #13
 8001344:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001348:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	08db      	lsrs	r3, r3, #3
 800134e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001352:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	015a      	lsls	r2, r3, #5
 8001358:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800135c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001362:	4911      	ldr	r1, [pc, #68]	@ (80013a8 <SCB_EnableDCache+0x84>)
 8001364:	4313      	orrs	r3, r2
 8001366:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1e5a      	subs	r2, r3, #1
 800136e:	60ba      	str	r2, [r7, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1ef      	bne.n	8001354 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	1e5a      	subs	r2, r3, #1
 8001378:	60fa      	str	r2, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1e5      	bne.n	800134a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800137e:	f3bf 8f4f 	dsb	sy
}
 8001382:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001384:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <SCB_EnableDCache+0x84>)
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	4a07      	ldr	r2, [pc, #28]	@ (80013a8 <SCB_EnableDCache+0x84>)
 800138a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800138e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001390:	f3bf 8f4f 	dsb	sy
}
 8001394:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001396:	f3bf 8f6f 	isb	sy
}
 800139a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <SCB_DisableDCache>:
/**
  \brief   Disable D-Cache
  \details Turns off D-Cache
  */
__STATIC_INLINE void SCB_DisableDCache (void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80013b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <SCB_DisableDCache+0x84>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80013ba:	f3bf 8f4f 	dsb	sy
}
 80013be:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 80013c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <SCB_DisableDCache+0x84>)
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001430 <SCB_DisableDCache+0x84>)
 80013c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013cc:	f3bf 8f4f 	dsb	sy
}
 80013d0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80013d2:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <SCB_DisableDCache+0x84>)
 80013d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013d8:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	0b5b      	lsrs	r3, r3, #13
 80013de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013e2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	08db      	lsrs	r3, r3, #3
 80013e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013ec:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	015a      	lsls	r2, r3, #5
 80013f2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80013f6:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80013fc:	490c      	ldr	r1, [pc, #48]	@ (8001430 <SCB_DisableDCache+0x84>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	1e5a      	subs	r2, r3, #1
 8001408:	60ba      	str	r2, [r7, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1ef      	bne.n	80013ee <SCB_DisableDCache+0x42>
    } while(sets-- != 0U);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1e5a      	subs	r2, r3, #1
 8001412:	60fa      	str	r2, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e5      	bne.n	80013e4 <SCB_DisableDCache+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8001418:	f3bf 8f4f 	dsb	sy
}
 800141c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800141e:	f3bf 8f6f 	isb	sy
}
 8001422:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <AI_Init.0>:
	ai_buffer ai_output[AI_NETWORK_OUT_NUM];

	/**
	 * @brief Initialize the AI model
	 */
	void AI_Init(void) {
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b093      	sub	sp, #76	@ 0x4c
 8001438:	af00      	add	r7, sp, #0
 800143a:	4664      	mov	r4, ip
 800143c:	f8c7 c004 	str.w	ip, [r7, #4]
	    ai_error ai_err;

	    // Set working memory and get weights/biases from the model
	    ai_network_params ai_params = {
	        AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8001440:	f00d fbd2 	bl	800ebe8 <ai_network_data_weights_get>
 8001444:	4602      	mov	r2, r0
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f00d fb95 	bl	800eb7c <ai_network_data_weights_buffer_get>
	        AI_NETWORK_DATA_ACTIVATIONS(activations)
 8001452:	f64f 235c 	movw	r3, #64092	@ 0xfa5c
 8001456:	4423      	add	r3, r4
 8001458:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f00d fb56 	bl	800eb10 <ai_network_data_activations_buffer_get>
	    };

	    // Create and initialize the network
	    ai_err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8001464:	f64f 2358 	movw	r3, #64088	@ 0xfa58
 8001468:	4423      	add	r3, r4
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f00d fac9 	bl	800ea04 <ai_network_create>
 8001472:	4603      	mov	r3, r0
 8001474:	647b      	str	r3, [r7, #68]	@ 0x44
	    if (ai_err.type != AI_ERROR_NONE) {
 8001476:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <AI_Init.0+0x62>
	        printf("AI network creation failed: type=%d, code=%d\r\n", ai_err.type, ai_err.code);
 800147e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001482:	4619      	mov	r1, r3
 8001484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001486:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800148a:	461a      	mov	r2, r3
 800148c:	4823      	ldr	r0, [pc, #140]	@ (800151c <AI_Init.0+0xe8>)
 800148e:	f011 fb21 	bl	8012ad4 <iprintf>
	        Error_Handler();
 8001492:	f000 fb73 	bl	8001b7c <Error_Handler>
	    }

	    if (!ai_network_init(network, &ai_params)) {
 8001496:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 800149a:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	@ 0xa58
 800149e:	f107 020c 	add.w	r2, r7, #12
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00d faf7 	bl	800ea98 <ai_network_init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	f083 0301 	eor.w	r3, r3, #1
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d014      	beq.n	80014e0 <AI_Init.0+0xac>
	        ai_err = ai_network_get_error(network);
 80014b6:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 80014ba:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	@ 0xa58
 80014be:	4618      	mov	r0, r3
 80014c0:	f00d fa94 	bl	800e9ec <ai_network_get_error>
 80014c4:	4603      	mov	r3, r0
 80014c6:	647b      	str	r3, [r7, #68]	@ 0x44
	        printf("AI network initialization failed: type=%d, code=%d\r\n", ai_err.type, ai_err.code);
 80014c8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80014cc:	4619      	mov	r1, r3
 80014ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80014d4:	461a      	mov	r2, r3
 80014d6:	4812      	ldr	r0, [pc, #72]	@ (8001520 <AI_Init.0+0xec>)
 80014d8:	f011 fafc 	bl	8012ad4 <iprintf>
	        Error_Handler();
 80014dc:	f000 fb4e 	bl	8001b7c <Error_Handler>
	    }

	    // Retrieve input and output buffer structures dynamically
	    ai_network_inputs_get(network, ai_input);
 80014e0:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 80014e4:	f8d3 2a58 	ldr.w	r2, [r3, #2648]	@ 0xa58
 80014e8:	f64f 233c 	movw	r3, #64060	@ 0xfa3c
 80014ec:	4423      	add	r3, r4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4610      	mov	r0, r2
 80014f2:	f00d fa9d 	bl	800ea30 <ai_network_inputs_get>
	    ai_network_outputs_get(network, ai_output);
 80014f6:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 80014fa:	f8d3 2a58 	ldr.w	r2, [r3, #2648]	@ 0xa58
 80014fe:	f64f 2320 	movw	r3, #64032	@ 0xfa20
 8001502:	4423      	add	r3, r4
 8001504:	4619      	mov	r1, r3
 8001506:	4610      	mov	r0, r2
 8001508:	f00d faac 	bl	800ea64 <ai_network_outputs_get>

	    printf("AI model initialized successfully.\r\n");
 800150c:	4805      	ldr	r0, [pc, #20]	@ (8001524 <AI_Init.0+0xf0>)
 800150e:	f011 fb49 	bl	8012ba4 <puts>
	}
 8001512:	bf00      	nop
 8001514:	374c      	adds	r7, #76	@ 0x4c
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}
 800151a:	bf00      	nop
 800151c:	080153a0 	.word	0x080153a0
 8001520:	080153d0 	.word	0x080153d0
 8001524:	08015408 	.word	0x08015408

08001528 <main>:
{
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	f5ad 3d00 	sub.w	sp, sp, #131072	@ 0x20000
 800152e:	b0b4      	sub	sp, #208	@ 0xd0
 8001530:	af00      	add	r7, sp, #0
int main(void)
 8001532:	4b51      	ldr	r3, [pc, #324]	@ (8001678 <main+0x150>)
 8001534:	443b      	add	r3, r7
 8001536:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800153a:	f502 32f8 	add.w	r2, r2, #126976	@ 0x1f000
 800153e:	f8c2 3ff4 	str.w	r3, [r2, #4084]	@ 0xff4
	int buf_len = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	4a4d      	ldr	r2, [pc, #308]	@ (800167c <main+0x154>)
 8001546:	443a      	add	r2, r7
 8001548:	6013      	str	r3, [r2, #0]
	const char* activities[AI_NETWORK_OUT_1_SIZE] = {
 800154a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800154e:	4a4c      	ldr	r2, [pc, #304]	@ (8001680 <main+0x158>)
 8001550:	f1a3 0498 	sub.w	r4, r3, #152	@ 0x98
 8001554:	4615      	mov	r5, r2
 8001556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800155a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800155e:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_handle network = AI_HANDLE_NULL;
 8001562:	2300      	movs	r3, #0
 8001564:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8001568:	f502 4270 	add.w	r2, r2, #61440	@ 0xf000
 800156c:	f8c2 39c0 	str.w	r3, [r2, #2496]	@ 0x9c0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001570:	f7ff fe92 	bl	8001298 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001574:	f7ff fed6 	bl	8001324 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001578:	f003 f832 	bl	80045e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157c:	f000 f8a0 	bl	80016c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001580:	f7ff fd1a 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001584:	f7ff fcea 	bl	8000f5c <MX_DMA_Init>
  MX_SAI1_Init();
 8001588:	f000 fafe 	bl	8001b88 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 800158c:	f000 feb6 	bl	80022fc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001590:	f009 fd9e 	bl	800b0d0 <MX_FATFS_Init>
  MX_SDMMC1_SD_Init();
 8001594:	f000 fc1c 	bl	8001dd0 <MX_SDMMC1_SD_Init>
  MX_CRC_Init();
 8001598:	f7ff fc9e 	bl	8000ed8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* We format the SD card */
  printf("SD card init...\r\n");
 800159c:	4839      	ldr	r0, [pc, #228]	@ (8001684 <main+0x15c>)
 800159e:	f011 fb01 	bl	8012ba4 <puts>
  SDCard_InitAndFormat();
 80015a2:	f000 f93b 	bl	800181c <SDCard_InitAndFormat>

  AI_Init();
 80015a6:	4b38      	ldr	r3, [pc, #224]	@ (8001688 <main+0x160>)
 80015a8:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80015ac:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 80015b0:	443b      	add	r3, r7
 80015b2:	469c      	mov	ip, r3
 80015b4:	f7ff ff3e 	bl	8001434 <AI_Init.0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t write_index = 0; // AI stuff
 80015b8:	2300      	movs	r3, #0
 80015ba:	4a34      	ldr	r2, [pc, #208]	@ (800168c <main+0x164>)
 80015bc:	443a      	add	r2, r7
 80015be:	6013      	str	r3, [r2, #0]
    while (1)
    {
        check_button_release();
 80015c0:	f000 f918 	bl	80017f4 <check_button_release>
        printf("Waiting for input to record...\r\n");
 80015c4:	4832      	ldr	r0, [pc, #200]	@ (8001690 <main+0x168>)
 80015c6:	f011 faed 	bl	8012ba4 <puts>
        HAL_Delay(1000);
 80015ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015ce:	f003 f865 	bl	800469c <HAL_Delay>


        if (button_pressed == 1)
 80015d2:	4b30      	ldr	r3, [pc, #192]	@ (8001694 <main+0x16c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d149      	bne.n	8001670 <main+0x148>
        {
            /* Toggle the green led to visually show action */
            HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 80015dc:	2102      	movs	r1, #2
 80015de:	482e      	ldr	r0, [pc, #184]	@ (8001698 <main+0x170>)
 80015e0:	f004 f9e1 	bl	80059a6 <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 80015e4:	2064      	movs	r0, #100	@ 0x64
 80015e6:	f003 f859 	bl	800469c <HAL_Delay>
            HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 80015ea:	2102      	movs	r1, #2
 80015ec:	482a      	ldr	r0, [pc, #168]	@ (8001698 <main+0x170>)
 80015ee:	f004 f9da 	bl	80059a6 <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 80015f2:	2064      	movs	r0, #100	@ 0x64
 80015f4:	f003 f852 	bl	800469c <HAL_Delay>

            /* If the program is not already recording... */
            if (AudioState == AUDIO_STATE_IDLE)
 80015f8:	4b28      	ldr	r3, [pc, #160]	@ (800169c <main+0x174>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d108      	bne.n	8001612 <main+0xea>
            {
                /* Configure the audio recorder: sampling frequency, bits-depth, number of channels */
                AUDIO_REC_Start();
 8001600:	f009 f9fa 	bl	800a9f8 <AUDIO_REC_Start>
            }

            /* While recording, we loop the recording process */
            while (AudioState == AUDIO_STATE_RECORD)
 8001604:	e005      	b.n	8001612 <main+0xea>
            {
                status = AUDIO_REC_Process();
 8001606:	f009 fa7d 	bl	800ab04 <AUDIO_REC_Process>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <main+0x178>)
 8001610:	701a      	strb	r2, [r3, #0]
            while (AudioState == AUDIO_STATE_RECORD)
 8001612:	4b22      	ldr	r3, [pc, #136]	@ (800169c <main+0x174>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b05      	cmp	r3, #5
 8001618:	d0f5      	beq.n	8001606 <main+0xde>
            }

            /* Once we stop recording, we correctly close the .WAV */
            if (AudioState == AUDIO_STATE_STOP)
 800161a:	4b20      	ldr	r3, [pc, #128]	@ (800169c <main+0x174>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b0a      	cmp	r3, #10
 8001620:	d108      	bne.n	8001634 <main+0x10c>
            {
                status = AUDIO_REC_Process();
 8001622:	f009 fa6f 	bl	800ab04 <AUDIO_REC_Process>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <main+0x178>)
 800162c:	701a      	strb	r2, [r3, #0]
                printf("Recording stopped.\r\n");
 800162e:	481d      	ldr	r0, [pc, #116]	@ (80016a4 <main+0x17c>)
 8001630:	f011 fab8 	bl	8012ba4 <puts>
            }

            ReadWAVFileInfo("WAVE.wav");
 8001634:	481c      	ldr	r0, [pc, #112]	@ (80016a8 <main+0x180>)
 8001636:	f000 f941 	bl	80018bc <ReadWAVFileInfo>

            /* Audio processing step*/

            // We read the contents of the file, save the info in the "audio_buffer" variable
            read_wav_file("WAVE.wav", audio_buffer);
 800163a:	491c      	ldr	r1, [pc, #112]	@ (80016ac <main+0x184>)
 800163c:	481a      	ldr	r0, [pc, #104]	@ (80016a8 <main+0x180>)
 800163e:	f000 fa03 	bl	8001a48 <read_wav_file>

            HAL_Delay(1000);
 8001642:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001646:	f003 f829 	bl	800469c <HAL_Delay>

            printf("test .\r\n");
 800164a:	4819      	ldr	r0, [pc, #100]	@ (80016b0 <main+0x188>)
 800164c:	f011 faaa 	bl	8012ba4 <puts>

            // We create a fast fft instance (lookup)
        	if (arm_rfft_fast_init_f32(&fft, FFT_SIZE) != ARM_MATH_SUCCESS) {
 8001650:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001654:	4817      	ldr	r0, [pc, #92]	@ (80016b4 <main+0x18c>)
 8001656:	f00d fad1 	bl	800ebfc <arm_rfft_fast_init_f32>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <main+0x13e>
        		printf("Failed to init RFFT");
 8001660:	4815      	ldr	r0, [pc, #84]	@ (80016b8 <main+0x190>)
 8001662:	f011 fa37 	bl	8012ad4 <iprintf>
        	}

        	// We create a hanning window, of size 256
            static float32_t hanning[FFT_SIZE];
        	arm_hanning_f32(hanning, FFT_SIZE);
 8001666:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800166a:	4814      	ldr	r0, [pc, #80]	@ (80016bc <main+0x194>)
 800166c:	f000 fa40 	bl	8001af0 <arm_hanning_f32>

        }

        HAL_Delay(100);  // Small delay for stability
 8001670:	2064      	movs	r0, #100	@ 0x64
 8001672:	f003 f813 	bl	800469c <HAL_Delay>
    {
 8001676:	e7a3      	b.n	80015c0 <main+0x98>
 8001678:	000200e0 	.word	0x000200e0
 800167c:	000200cc 	.word	0x000200cc
 8001680:	080154c4 	.word	0x080154c4
 8001684:	0801542c 	.word	0x0801542c
 8001688:	fffdff68 	.word	0xfffdff68
 800168c:	000200c8 	.word	0x000200c8
 8001690:	08015440 	.word	0x08015440
 8001694:	20008930 	.word	0x20008930
 8001698:	40022000 	.word	0x40022000
 800169c:	20000a14 	.word	0x20000a14
 80016a0:	20000a15 	.word	0x20000a15
 80016a4:	08015460 	.word	0x08015460
 80016a8:	08015474 	.word	0x08015474
 80016ac:	20000c18 	.word	0x20000c18
 80016b0:	08015480 	.word	0x08015480
 80016b4:	20008918 	.word	0x20008918
 80016b8:	08015488 	.word	0x08015488
 80016bc:	20008934 	.word	0x20008934

080016c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b094      	sub	sp, #80	@ 0x50
 80016c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c6:	f107 0320 	add.w	r3, r7, #32
 80016ca:	2230      	movs	r2, #48	@ 0x30
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f011 fb48 	bl	8012d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001790 <SystemClock_Config+0xd0>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	4a29      	ldr	r2, [pc, #164]	@ (8001790 <SystemClock_Config+0xd0>)
 80016ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f0:	4b27      	ldr	r3, [pc, #156]	@ (8001790 <SystemClock_Config+0xd0>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016fc:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <SystemClock_Config+0xd4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a24      	ldr	r2, [pc, #144]	@ (8001794 <SystemClock_Config+0xd4>)
 8001702:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <SystemClock_Config+0xd4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001714:	2302      	movs	r3, #2
 8001716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001718:	2301      	movs	r3, #1
 800171a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800171c:	2310      	movs	r3, #16
 800171e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001720:	2302      	movs	r3, #2
 8001722:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001724:	2300      	movs	r3, #0
 8001726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001728:	2308      	movs	r3, #8
 800172a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 800172c:	23c8      	movs	r3, #200	@ 0xc8
 800172e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001730:	2302      	movs	r3, #2
 8001732:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001734:	2308      	movs	r3, #8
 8001736:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	4618      	mov	r0, r3
 800173e:	f004 ff93 	bl	8006668 <HAL_RCC_OscConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001748:	f000 fa18 	bl	8001b7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800174c:	f004 ff3c 	bl	80065c8 <HAL_PWREx_EnableOverDrive>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001756:	f000 fa11 	bl	8001b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175a:	230f      	movs	r3, #15
 800175c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175e:	2302      	movs	r3, #2
 8001760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001766:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800176a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800176c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	2106      	movs	r1, #6
 8001778:	4618      	mov	r0, r3
 800177a:	f005 fa19 	bl	8006bb0 <HAL_RCC_ClockConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001784:	f000 f9fa 	bl	8001b7c <Error_Handler>
  }
}
 8001788:	bf00      	nop
 800178a:	3750      	adds	r7, #80	@ 0x50
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000

08001798 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* Needed to send messages easier to terminal for debugging */
PUTCHAR_PROTOTYPE
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 80017a0:	1d39      	adds	r1, r7, #4
 80017a2:	2364      	movs	r3, #100	@ 0x64
 80017a4:	2201      	movs	r2, #1
 80017a6:	4804      	ldr	r0, [pc, #16]	@ (80017b8 <__io_putchar+0x20>)
 80017a8:	f007 ff3c 	bl	8009624 <HAL_UART_Transmit>
return ch;
 80017ac:	687b      	ldr	r3, [r7, #4]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20008f64 	.word	0x20008f64

080017bc <HAL_GPIO_EXTI_Callback>:
/* ======================================================== */


/* User button interruption and variable change */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if (GPIO_Pin == USR_BTN_Pin && button_pressed == 0)
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017cc:	d10a      	bne.n	80017e4 <HAL_GPIO_EXTI_Callback+0x28>
 80017ce:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <HAL_GPIO_EXTI_Callback+0x30>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <HAL_GPIO_EXTI_Callback+0x28>
      {
	  	  button_pressed = 1;
 80017d8:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <HAL_GPIO_EXTI_Callback+0x30>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
	  	  printf("Button pressed...\r\n");
 80017de:	4804      	ldr	r0, [pc, #16]	@ (80017f0 <HAL_GPIO_EXTI_Callback+0x34>)
 80017e0:	f011 f9e0 	bl	8012ba4 <puts>
      }
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20008930 	.word	0x20008930
 80017f0:	080154dc 	.word	0x080154dc

080017f4 <check_button_release>:
/* ======================================================== */


/* Used to verify the state of the button */
void check_button_release()
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOI, USR_BTN_Pin) == GPIO_PIN_RESET) button_pressed = 0;
 80017f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017fc:	4805      	ldr	r0, [pc, #20]	@ (8001814 <check_button_release+0x20>)
 80017fe:	f004 f8a1 	bl	8005944 <HAL_GPIO_ReadPin>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <check_button_release+0x1a>
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <check_button_release+0x24>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40022000 	.word	0x40022000
 8001818:	20008930 	.word	0x20008930

0800181c <SDCard_InitAndFormat>:
/* ======================================================== */


/* Used to initialize the SD card */
void SDCard_InitAndFormat(void) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af02      	add	r7, sp, #8
    FRESULT res;

    // Mount the file system
    res = f_mount(&SDFatFS, (TCHAR const *)SDPath, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	491e      	ldr	r1, [pc, #120]	@ (80018a0 <SDCard_InitAndFormat+0x84>)
 8001826:	481f      	ldr	r0, [pc, #124]	@ (80018a4 <SDCard_InitAndFormat+0x88>)
 8001828:	f00b fbe0 	bl	800cfec <f_mount>
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <SDCard_InitAndFormat+0x28>
        printf("Error: Failed to mount SD card (Code: %d).\r\n", res);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4619      	mov	r1, r3
 800183a:	481b      	ldr	r0, [pc, #108]	@ (80018a8 <SDCard_InitAndFormat+0x8c>)
 800183c:	f011 f94a 	bl	8012ad4 <iprintf>
        Error_Handler();
 8001840:	f000 f99c 	bl	8001b7c <Error_Handler>
    }

    // Format the SD card
    res = f_mkfs((TCHAR const *)SDPath, FM_ANY, 0, workBuffer_init, sizeof(workBuffer_init));
 8001844:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <SDCard_InitAndFormat+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	2107      	movs	r1, #7
 8001850:	4813      	ldr	r0, [pc, #76]	@ (80018a0 <SDCard_InitAndFormat+0x84>)
 8001852:	f00c fb31 	bl	800deb8 <f_mkfs>
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <SDCard_InitAndFormat+0x52>
        printf("Error: Failed to format SD card (Code: %d).\r\n", res);
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	4619      	mov	r1, r3
 8001864:	4812      	ldr	r0, [pc, #72]	@ (80018b0 <SDCard_InitAndFormat+0x94>)
 8001866:	f011 f935 	bl	8012ad4 <iprintf>
        Error_Handler();
 800186a:	f000 f987 	bl	8001b7c <Error_Handler>
    }

    // Unmount the file system to complete formatting
    res = f_mount(NULL, (TCHAR const *)SDPath, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	490b      	ldr	r1, [pc, #44]	@ (80018a0 <SDCard_InitAndFormat+0x84>)
 8001872:	2000      	movs	r0, #0
 8001874:	f00b fbba 	bl	800cfec <f_mount>
 8001878:	4603      	mov	r3, r0
 800187a:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d006      	beq.n	8001890 <SDCard_InitAndFormat+0x74>
        printf("Error: Failed to unmount SD card after formatting (Code: %d).\r\n", res);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	4619      	mov	r1, r3
 8001886:	480b      	ldr	r0, [pc, #44]	@ (80018b4 <SDCard_InitAndFormat+0x98>)
 8001888:	f011 f924 	bl	8012ad4 <iprintf>
        Error_Handler();
 800188c:	f000 f976 	bl	8001b7c <Error_Handler>
    }

    printf("SD card initialized and formatted successfully.\r\n");
 8001890:	4809      	ldr	r0, [pc, #36]	@ (80018b8 <SDCard_InitAndFormat+0x9c>)
 8001892:	f011 f987 	bl	8012ba4 <puts>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000dcb4 	.word	0x2000dcb4
 80018a4:	2000dcb8 	.word	0x2000dcb8
 80018a8:	080154f0 	.word	0x080154f0
 80018ac:	20000a18 	.word	0x20000a18
 80018b0:	08015520 	.word	0x08015520
 80018b4:	08015550 	.word	0x08015550
 80018b8:	08015590 	.word	0x08015590

080018bc <ReadWAVFileInfo>:
}
/* ======================================================== */


/* Debug function : reads the characteristics of a .wav file in the SD card */
void ReadWAVFileInfo(const char *filename) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80018c8:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80018cc:	6018      	str	r0, [r3, #0]
    FIL file;               // File object
    WAV_Header header;      // WAV file header
    UINT bytesRead;         // Number of bytes read
    FRESULT res;

    SCB_DisableDCache();
 80018ce:	f7ff fd6d 	bl	80013ac <SCB_DisableDCache>
    SCB_DisableICache();
 80018d2:	f7ff fd07 	bl	80012e4 <SCB_DisableICache>

    // Open the WAV file
    res = f_open(&file, filename, FA_READ);
 80018d6:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80018da:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80018de:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80018e2:	2201      	movs	r2, #1
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	f00b fbc7 	bl	800d078 <f_open>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if (res != FR_OK) {
 80018f0:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00a      	beq.n	800190e <ReadWAVFileInfo+0x52>
        printf("Error: Failed to open file '%s' (Code: %d).\n", filename, res);
 80018f8:	f897 226f 	ldrb.w	r2, [r7, #623]	@ 0x26f
 80018fc:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001900:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001904:	6819      	ldr	r1, [r3, #0]
 8001906:	4843      	ldr	r0, [pc, #268]	@ (8001a14 <ReadWAVFileInfo+0x158>)
 8001908:	f011 f8e4 	bl	8012ad4 <iprintf>
        return;
 800190c:	e07d      	b.n	8001a0a <ReadWAVFileInfo+0x14e>
    }

    // Read the WAV file header
    res = f_read(&file, &header, sizeof(WAV_Header), &bytesRead);
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	f107 0110 	add.w	r1, r7, #16
 8001916:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800191a:	222c      	movs	r2, #44	@ 0x2c
 800191c:	f00b fd66 	bl	800d3ec <f_read>
 8001920:	4603      	mov	r3, r0
 8001922:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if (res != FR_OK || bytesRead != sizeof(WAV_Header)) {
 8001926:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 800192a:	2b00      	cmp	r3, #0
 800192c:	d106      	bne.n	800193c <ReadWAVFileInfo+0x80>
 800192e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001932:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b2c      	cmp	r3, #44	@ 0x2c
 800193a:	d00b      	beq.n	8001954 <ReadWAVFileInfo+0x98>
        printf("Error: Failed to read WAV file header (Code: %d).\n", res);
 800193c:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8001940:	4619      	mov	r1, r3
 8001942:	4835      	ldr	r0, [pc, #212]	@ (8001a18 <ReadWAVFileInfo+0x15c>)
 8001944:	f011 f8c6 	bl	8012ad4 <iprintf>
        f_close(&file);
 8001948:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800194c:	4618      	mov	r0, r3
 800194e:	f00c f87f 	bl	800da50 <f_close>
        return;
 8001952:	e05a      	b.n	8001a0a <ReadWAVFileInfo+0x14e>
    }

    // Print WAV file information
    printf("WAV File Info:\r\n");
 8001954:	4831      	ldr	r0, [pc, #196]	@ (8001a1c <ReadWAVFileInfo+0x160>)
 8001956:	f011 f925 	bl	8012ba4 <puts>
    printf("  ChunkID: %.4s\r\n", header.ChunkID);
 800195a:	f107 0310 	add.w	r3, r7, #16
 800195e:	4619      	mov	r1, r3
 8001960:	482f      	ldr	r0, [pc, #188]	@ (8001a20 <ReadWAVFileInfo+0x164>)
 8001962:	f011 f8b7 	bl	8012ad4 <iprintf>
    printf("  Format: %.4s\r\n", header.Format);
 8001966:	f107 0310 	add.w	r3, r7, #16
 800196a:	3308      	adds	r3, #8
 800196c:	4619      	mov	r1, r3
 800196e:	482d      	ldr	r0, [pc, #180]	@ (8001a24 <ReadWAVFileInfo+0x168>)
 8001970:	f011 f8b0 	bl	8012ad4 <iprintf>
    printf("  Audio Format: %d\r\n", header.AudioFormat);
 8001974:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001978:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800197c:	8a9b      	ldrh	r3, [r3, #20]
 800197e:	4619      	mov	r1, r3
 8001980:	4829      	ldr	r0, [pc, #164]	@ (8001a28 <ReadWAVFileInfo+0x16c>)
 8001982:	f011 f8a7 	bl	8012ad4 <iprintf>
    printf("  Number of Channels: %d\r\n", header.NumChannels);
 8001986:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800198a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800198e:	8adb      	ldrh	r3, [r3, #22]
 8001990:	4619      	mov	r1, r3
 8001992:	4826      	ldr	r0, [pc, #152]	@ (8001a2c <ReadWAVFileInfo+0x170>)
 8001994:	f011 f89e 	bl	8012ad4 <iprintf>
    printf("  Sample Rate: %d Hz\r\n", header.SampleRate);
 8001998:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800199c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	4619      	mov	r1, r3
 80019a4:	4822      	ldr	r0, [pc, #136]	@ (8001a30 <ReadWAVFileInfo+0x174>)
 80019a6:	f011 f895 	bl	8012ad4 <iprintf>
    printf("  Byte Rate: %d\r\n", header.ByteRate);
 80019aa:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80019ae:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	4619      	mov	r1, r3
 80019b6:	481f      	ldr	r0, [pc, #124]	@ (8001a34 <ReadWAVFileInfo+0x178>)
 80019b8:	f011 f88c 	bl	8012ad4 <iprintf>
    printf("  Block Align: %d\r\n", header.BlockAlign);
 80019bc:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80019c0:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80019c4:	8c1b      	ldrh	r3, [r3, #32]
 80019c6:	4619      	mov	r1, r3
 80019c8:	481b      	ldr	r0, [pc, #108]	@ (8001a38 <ReadWAVFileInfo+0x17c>)
 80019ca:	f011 f883 	bl	8012ad4 <iprintf>
    printf("  Bits Per Sample: %d\r\n", header.BitsPerSample);
 80019ce:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80019d2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80019d6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80019d8:	4619      	mov	r1, r3
 80019da:	4818      	ldr	r0, [pc, #96]	@ (8001a3c <ReadWAVFileInfo+0x180>)
 80019dc:	f011 f87a 	bl	8012ad4 <iprintf>
    printf("  Subchunk2ID: %.4s\r\n", header.Subchunk2ID);
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	3324      	adds	r3, #36	@ 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	4815      	ldr	r0, [pc, #84]	@ (8001a40 <ReadWAVFileInfo+0x184>)
 80019ea:	f011 f873 	bl	8012ad4 <iprintf>
    printf("  Subchunk2Size: %d bytes\r\n", header.Subchunk2Size);
 80019ee:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80019f2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80019f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f8:	4619      	mov	r1, r3
 80019fa:	4812      	ldr	r0, [pc, #72]	@ (8001a44 <ReadWAVFileInfo+0x188>)
 80019fc:	f011 f86a 	bl	8012ad4 <iprintf>

//    SCB_EnableDCache();
//    SCB_EnableICache();

    // Close the file
    f_close(&file);
 8001a00:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a04:	4618      	mov	r0, r3
 8001a06:	f00c f823 	bl	800da50 <f_close>
}
 8001a0a:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	080155d8 	.word	0x080155d8
 8001a18:	08015608 	.word	0x08015608
 8001a1c:	0801563c 	.word	0x0801563c
 8001a20:	0801564c 	.word	0x0801564c
 8001a24:	08015660 	.word	0x08015660
 8001a28:	08015674 	.word	0x08015674
 8001a2c:	0801568c 	.word	0x0801568c
 8001a30:	080156a8 	.word	0x080156a8
 8001a34:	080156c0 	.word	0x080156c0
 8001a38:	080156d4 	.word	0x080156d4
 8001a3c:	080156e8 	.word	0x080156e8
 8001a40:	08015700 	.word	0x08015700
 8001a44:	08015718 	.word	0x08015718

08001a48 <read_wav_file>:
/* ======================================================== */

int read_wav_file(const char *filename, int16_t *buffer) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001a54:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001a58:	6018      	str	r0, [r3, #0]
 8001a5a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001a5e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001a62:	6019      	str	r1, [r3, #0]
    FIL file;
    UINT bytes_read;
    FRESULT result = f_open(&file, filename, FA_READ);
 8001a64:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001a68:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001a6c:	f107 000c 	add.w	r0, r7, #12
 8001a70:	2201      	movs	r2, #1
 8001a72:	6819      	ldr	r1, [r3, #0]
 8001a74:	f00b fb00 	bl	800d078 <f_open>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

    if (result != FR_OK) {
 8001a7e:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <read_wav_file+0x44>
        return -1;  // File open error
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	e02a      	b.n	8001ae2 <read_wav_file+0x9a>
    }

    // Skip WAV header (44 bytes)
    f_lseek(&file, 44);
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	212c      	movs	r1, #44	@ 0x2c
 8001a92:	4618      	mov	r0, r3
 8001a94:	f00c f806 	bl	800daa4 <f_lseek>

    // Read audio samples into the buffer
    result = f_read(&file, buffer, BUFFER_SIZE * sizeof(int16_t), &bytes_read);
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001aa0:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8001aa4:	f107 000c 	add.w	r0, r7, #12
 8001aa8:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001aac:	6809      	ldr	r1, [r1, #0]
 8001aae:	f00b fc9d 	bl	800d3ec <f_read>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

    if (result != FR_OK) {
 8001ab8:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d007      	beq.n	8001ad0 <read_wav_file+0x88>
        f_close(&file);
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f00b ffc3 	bl	800da50 <f_close>
        return -1;  // Read error
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	e008      	b.n	8001ae2 <read_wav_file+0x9a>
    }

    f_close(&file);
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f00b ffbb 	bl	800da50 <f_close>
    printf("file successfully read! \r\n");
 8001ada:	4804      	ldr	r0, [pc, #16]	@ (8001aec <read_wav_file+0xa4>)
 8001adc:	f011 f862 	bl	8012ba4 <puts>
    return 0;  // Success
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f507 7710 	add.w	r7, r7, #576	@ 0x240
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	08015734 	.word	0x08015734

08001af0 <arm_hanning_f32>:


void arm_hanning_f32(float32_t * pDst, uint32_t blockSize) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
   float32_t k = 2.0f / ((float32_t) blockSize);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b04:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0c:	edc7 7a04 	vstr	s15, [r7, #16]
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e027      	b.n	8001b66 <arm_hanning_f32+0x76>
   {
     w = PI * i * k;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	ee07 3a90 	vmov	s15, r3
 8001b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b20:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001b78 <arm_hanning_f32+0x88>
 8001b24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b28:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b30:	edc7 7a03 	vstr	s15, [r7, #12]
     w = 0.5f * (1.0f - cosf (w));
 8001b34:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b38:	f012 feec 	bl	8014914 <cosf>
 8001b3c:	eef0 7a40 	vmov.f32	s15, s0
 8001b40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b48:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b50:	edc7 7a03 	vstr	s15, [r7, #12]
     pDst[i] = w;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	601a      	str	r2, [r3, #0]
   for(uint32_t i=0;i<blockSize;i++)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d3d3      	bcc.n	8001b16 <arm_hanning_f32+0x26>
   }
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40490fdb 	.word	0x40490fdb

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <Error_Handler+0x8>

08001b88 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001b8c:	4b27      	ldr	r3, [pc, #156]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001b8e:	4a28      	ldr	r2, [pc, #160]	@ (8001c30 <MX_SAI1_Init+0xa8>)
 8001b90:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b92:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001b98:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8001b9e:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001ba0:	2280      	movs	r2, #128	@ 0x80
 8001ba2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ba4:	4b21      	ldr	r3, [pc, #132]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001baa:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001bc8:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001bca:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001bce:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001bd6:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 16;
 8001be2:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001be4:	2210      	movs	r2, #16
 8001be6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001be8:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001bee:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001c00:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001c12:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001c18:	4804      	ldr	r0, [pc, #16]	@ (8001c2c <MX_SAI1_Init+0xa4>)
 8001c1a:	f005 ffeb 	bl	8007bf4 <HAL_SAI_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_SAI1_Init+0xa0>
  {
    Error_Handler();
 8001c24:	f7ff ffaa 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20008d34 	.word	0x20008d34
 8001c30:	40015804 	.word	0x40015804

08001c34 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b0aa      	sub	sp, #168	@ 0xa8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	2284      	movs	r2, #132	@ 0x84
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f011 f88d 	bl	8012d64 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a41      	ldr	r2, [pc, #260]	@ (8001d54 <HAL_SAI_MspInit+0x120>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d17b      	bne.n	8001d4c <HAL_SAI_MspInit+0x118>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001c54:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001c58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001c5a:	2332      	movs	r3, #50	@ 0x32
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001c62:	2302      	movs	r3, #2
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001c66:	2300      	movs	r3, #0
 8001c68:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001c72:	2300      	movs	r3, #0
 8001c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c76:	f107 0310 	add.w	r3, r7, #16
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f005 f97e 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_SAI_MspInit+0x56>
    {
      Error_Handler();
 8001c86:	f7ff ff79 	bl	8001b7c <Error_Handler>
    }

    if (SAI1_client == 0)
 8001c8a:	4b33      	ldr	r3, [pc, #204]	@ (8001d58 <HAL_SAI_MspInit+0x124>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10b      	bne.n	8001caa <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001c92:	4b32      	ldr	r3, [pc, #200]	@ (8001d5c <HAL_SAI_MspInit+0x128>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	4a31      	ldr	r2, [pc, #196]	@ (8001d5c <HAL_SAI_MspInit+0x128>)
 8001c98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d5c <HAL_SAI_MspInit+0x128>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001caa:	4b2b      	ldr	r3, [pc, #172]	@ (8001d58 <HAL_SAI_MspInit+0x124>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	4a29      	ldr	r2, [pc, #164]	@ (8001d58 <HAL_SAI_MspInit+0x124>)
 8001cb2:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001cb4:	2370      	movs	r3, #112	@ 0x70
 8001cb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001ccc:	2306      	movs	r3, #6
 8001cce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4821      	ldr	r0, [pc, #132]	@ (8001d60 <HAL_SAI_MspInit+0x12c>)
 8001cda:	f003 fb7b 	bl	80053d4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001cde:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <HAL_SAI_MspInit+0x130>)
 8001ce0:	4a21      	ldr	r2, [pc, #132]	@ (8001d68 <HAL_SAI_MspInit+0x134>)
 8001ce2:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <HAL_SAI_MspInit+0x130>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cea:	4b1e      	ldr	r3, [pc, #120]	@ (8001d64 <HAL_SAI_MspInit+0x130>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <HAL_SAI_MspInit+0x130>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d64 <HAL_SAI_MspInit+0x130>)
 8001cf8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cfc:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cfe:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <HAL_SAI_MspInit+0x130>)
 8001d00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d04:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d06:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <HAL_SAI_MspInit+0x130>)
 8001d08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d0c:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001d0e:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <HAL_SAI_MspInit+0x130>)
 8001d10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d14:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001d16:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <HAL_SAI_MspInit+0x130>)
 8001d18:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d1c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <HAL_SAI_MspInit+0x130>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001d24:	480f      	ldr	r0, [pc, #60]	@ (8001d64 <HAL_SAI_MspInit+0x130>)
 8001d26:	f002 fee1 	bl	8004aec <HAL_DMA_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 8001d30:	f7ff ff24 	bl	8001b7c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a0b      	ldr	r2, [pc, #44]	@ (8001d64 <HAL_SAI_MspInit+0x130>)
 8001d38:	671a      	str	r2, [r3, #112]	@ 0x70
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d64 <HAL_SAI_MspInit+0x130>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a08      	ldr	r2, [pc, #32]	@ (8001d64 <HAL_SAI_MspInit+0x130>)
 8001d44:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001d46:	4a07      	ldr	r2, [pc, #28]	@ (8001d64 <HAL_SAI_MspInit+0x130>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001d4c:	bf00      	nop
 8001d4e:	37a8      	adds	r7, #168	@ 0xa8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40015804 	.word	0x40015804
 8001d58:	20008e18 	.word	0x20008e18
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40021000 	.word	0x40021000
 8001d64:	20008db8 	.word	0x20008db8
 8001d68:	40026428 	.word	0x40026428

08001d6c <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a11      	ldr	r2, [pc, #68]	@ (8001dc0 <HAL_SAI_MspDeInit+0x54>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d11c      	bne.n	8001db8 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI1_client --;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <HAL_SAI_MspDeInit+0x58>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc4 <HAL_SAI_MspDeInit+0x58>)
 8001d86:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8001d88:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <HAL_SAI_MspDeInit+0x58>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8001d90:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc8 <HAL_SAI_MspDeInit+0x5c>)
 8001d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d94:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc8 <HAL_SAI_MspDeInit+0x5c>)
 8001d96:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001d9a:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8001d9c:	2170      	movs	r1, #112	@ 0x70
 8001d9e:	480b      	ldr	r0, [pc, #44]	@ (8001dcc <HAL_SAI_MspDeInit+0x60>)
 8001da0:	f003 fcc4 	bl	800572c <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da8:	4618      	mov	r0, r3
 8001daa:	f002 ff4d 	bl	8004c48 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 ff48 	bl	8004c48 <HAL_DMA_DeInit>
    }
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40015804 	.word	0x40015804
 8001dc4:	20008e18 	.word	0x20008e18
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <MX_SDMMC1_SD_Init+0x38>)
 8001dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8001e0c <MX_SDMMC1_SD_Init+0x3c>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <MX_SDMMC1_SD_Init+0x38>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001de0:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <MX_SDMMC1_SD_Init+0x38>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <MX_SDMMC1_SD_Init+0x38>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001dec:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <MX_SDMMC1_SD_Init+0x38>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001df2:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <MX_SDMMC1_SD_Init+0x38>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001df8:	4b03      	ldr	r3, [pc, #12]	@ (8001e08 <MX_SDMMC1_SD_Init+0x38>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	20008e1c 	.word	0x20008e1c
 8001e0c:	40012c00 	.word	0x40012c00

08001e10 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b0ac      	sub	sp, #176	@ 0xb0
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e28:	f107 0318 	add.w	r3, r7, #24
 8001e2c:	2284      	movs	r2, #132	@ 0x84
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f010 ff97 	bl	8012d64 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a74      	ldr	r2, [pc, #464]	@ (800200c <HAL_SD_MspInit+0x1fc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	f040 80e0 	bne.w	8002002 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001e42:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8001e46:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e54:	f107 0318 	add.w	r3, r7, #24
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f005 f88f 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001e64:	f7ff fe8a 	bl	8001b7c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001e68:	4b69      	ldr	r3, [pc, #420]	@ (8002010 <HAL_SD_MspInit+0x200>)
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6c:	4a68      	ldr	r2, [pc, #416]	@ (8002010 <HAL_SD_MspInit+0x200>)
 8001e6e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e72:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e74:	4b66      	ldr	r3, [pc, #408]	@ (8002010 <HAL_SD_MspInit+0x200>)
 8001e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e80:	4b63      	ldr	r3, [pc, #396]	@ (8002010 <HAL_SD_MspInit+0x200>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e84:	4a62      	ldr	r2, [pc, #392]	@ (8002010 <HAL_SD_MspInit+0x200>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8c:	4b60      	ldr	r3, [pc, #384]	@ (8002010 <HAL_SD_MspInit+0x200>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e98:	4b5d      	ldr	r3, [pc, #372]	@ (8002010 <HAL_SD_MspInit+0x200>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9c:	4a5c      	ldr	r2, [pc, #368]	@ (8002010 <HAL_SD_MspInit+0x200>)
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea4:	4b5a      	ldr	r3, [pc, #360]	@ (8002010 <HAL_SD_MspInit+0x200>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8001eb0:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001eb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001eca:	230c      	movs	r3, #12
 8001ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	484f      	ldr	r0, [pc, #316]	@ (8002014 <HAL_SD_MspInit+0x204>)
 8001ed8:	f003 fa7c 	bl	80053d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001edc:	2304      	movs	r3, #4
 8001ede:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ef4:	230c      	movs	r3, #12
 8001ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001efa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001efe:	4619      	mov	r1, r3
 8001f00:	4845      	ldr	r0, [pc, #276]	@ (8002018 <HAL_SD_MspInit+0x208>)
 8001f02:	f003 fa67 	bl	80053d4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001f06:	4b45      	ldr	r3, [pc, #276]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f08:	4a45      	ldr	r2, [pc, #276]	@ (8002020 <HAL_SD_MspInit+0x210>)
 8001f0a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001f0c:	4b43      	ldr	r3, [pc, #268]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f0e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f12:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f14:	4b41      	ldr	r3, [pc, #260]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1a:	4b40      	ldr	r3, [pc, #256]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f20:	4b3e      	ldr	r3, [pc, #248]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f26:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f28:	4b3c      	ldr	r3, [pc, #240]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f2e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f30:	4b3a      	ldr	r3, [pc, #232]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f36:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001f38:	4b38      	ldr	r3, [pc, #224]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f3e:	4b37      	ldr	r3, [pc, #220]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f44:	4b35      	ldr	r3, [pc, #212]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f46:	2204      	movs	r2, #4
 8001f48:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f4a:	4b34      	ldr	r3, [pc, #208]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001f50:	4b32      	ldr	r3, [pc, #200]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f52:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f56:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001f58:	4b30      	ldr	r3, [pc, #192]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f5a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001f5e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001f60:	482e      	ldr	r0, [pc, #184]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f62:	f002 fdc3 	bl	8004aec <HAL_DMA_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001f6c:	f7ff fe06 	bl	8001b7c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a2a      	ldr	r2, [pc, #168]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f74:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f76:	4a29      	ldr	r2, [pc, #164]	@ (800201c <HAL_SD_MspInit+0x20c>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001f7c:	4b29      	ldr	r3, [pc, #164]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001f7e:	4a2a      	ldr	r2, [pc, #168]	@ (8002028 <HAL_SD_MspInit+0x218>)
 8001f80:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001f82:	4b28      	ldr	r3, [pc, #160]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001f84:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f88:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f8a:	4b26      	ldr	r3, [pc, #152]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001f8c:	2240      	movs	r2, #64	@ 0x40
 8001f8e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f90:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f96:	4b23      	ldr	r3, [pc, #140]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001f98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f9c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f9e:	4b21      	ldr	r3, [pc, #132]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001fa0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fa4:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001fa8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fac:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001fae:	4b1d      	ldr	r3, [pc, #116]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001fba:	4b1a      	ldr	r3, [pc, #104]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001fc0:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001fc6:	4b17      	ldr	r3, [pc, #92]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001fc8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001fd0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001fd4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001fd6:	4813      	ldr	r0, [pc, #76]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001fd8:	f002 fd88 	bl	8004aec <HAL_DMA_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001fe2:	f7ff fdcb 	bl	8001b7c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a0e      	ldr	r2, [pc, #56]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001fea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fec:	4a0d      	ldr	r2, [pc, #52]	@ (8002024 <HAL_SD_MspInit+0x214>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 1, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	2031      	movs	r0, #49	@ 0x31
 8001ff8:	f002 fc4f 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001ffc:	2031      	movs	r0, #49	@ 0x31
 8001ffe:	f002 fc68 	bl	80048d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002002:	bf00      	nop
 8002004:	37b0      	adds	r7, #176	@ 0xb0
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40012c00 	.word	0x40012c00
 8002010:	40023800 	.word	0x40023800
 8002014:	40020800 	.word	0x40020800
 8002018:	40020c00 	.word	0x40020c00
 800201c:	20008ea0 	.word	0x20008ea0
 8002020:	40026458 	.word	0x40026458
 8002024:	20008f00 	.word	0x20008f00
 8002028:	400264a0 	.word	0x400264a0

0800202c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	4b0f      	ldr	r3, [pc, #60]	@ (8002070 <HAL_MspInit+0x44>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	4a0e      	ldr	r2, [pc, #56]	@ (8002070 <HAL_MspInit+0x44>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	@ 0x40
 800203e:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <HAL_MspInit+0x44>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <HAL_MspInit+0x44>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	4a08      	ldr	r2, [pc, #32]	@ (8002070 <HAL_MspInit+0x44>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002054:	6453      	str	r3, [r2, #68]	@ 0x44
 8002056:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_MspInit+0x44>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800

08002074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <NMI_Handler+0x4>

0800207c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <HardFault_Handler+0x4>

08002084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <MemManage_Handler+0x4>

0800208c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <BusFault_Handler+0x4>

08002094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <UsageFault_Handler+0x4>

0800209c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ca:	f002 fac7 	bl	800465c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80020d6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80020da:	f003 fc7f 	bl	80059dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80020e8:	4802      	ldr	r0, [pc, #8]	@ (80020f4 <SDMMC1_IRQHandler+0x10>)
 80020ea:	f006 fba5 	bl	8008838 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20008e1c 	.word	0x20008e1c

080020f8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80020fc:	4802      	ldr	r0, [pc, #8]	@ (8002108 <DMA2_Stream1_IRQHandler+0x10>)
 80020fe:	f002 fef3 	bl	8004ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20008db8 	.word	0x20008db8

0800210c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8002110:	4802      	ldr	r0, [pc, #8]	@ (800211c <DMA2_Stream3_IRQHandler+0x10>)
 8002112:	f002 fee9 	bl	8004ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20008ea0 	.word	0x20008ea0

08002120 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002124:	4802      	ldr	r0, [pc, #8]	@ (8002130 <DMA2_Stream6_IRQHandler+0x10>)
 8002126:	f002 fedf 	bl	8004ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20008f00 	.word	0x20008f00

08002134 <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 Stream 7 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	//extern SAI_HandleTypeDef haudio_in_sai;
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8002138:	4b03      	ldr	r3, [pc, #12]	@ (8002148 <DMA2_Stream7_IRQHandler+0x14>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213c:	4618      	mov	r0, r3
 800213e:	f002 fed3 	bl	8004ee8 <HAL_DMA_IRQHandler>
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200090d0 	.word	0x200090d0

0800214c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return 1;
 8002150:	2301      	movs	r3, #1
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_kill>:

int _kill(int pid, int sig)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002166:	f010 fe5f 	bl	8012e28 <__errno>
 800216a:	4603      	mov	r3, r0
 800216c:	2216      	movs	r2, #22
 800216e:	601a      	str	r2, [r3, #0]
  return -1;
 8002170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_exit>:

void _exit (int status)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ffe7 	bl	800215c <_kill>
  while (1) {}    /* Make sure we hang here */
 800218e:	bf00      	nop
 8002190:	e7fd      	b.n	800218e <_exit+0x12>

08002192 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e00a      	b.n	80021ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021a4:	f3af 8000 	nop.w
 80021a8:	4601      	mov	r1, r0
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	60ba      	str	r2, [r7, #8]
 80021b0:	b2ca      	uxtb	r2, r1
 80021b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3301      	adds	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	429a      	cmp	r2, r3
 80021c0:	dbf0      	blt.n	80021a4 <_read+0x12>
  }

  return len;
 80021c2:	687b      	ldr	r3, [r7, #4]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e009      	b.n	80021f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	60ba      	str	r2, [r7, #8]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fad6 	bl	8001798 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3301      	adds	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	dbf1      	blt.n	80021de <_write+0x12>
  }
  return len;
 80021fa:	687b      	ldr	r3, [r7, #4]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_close>:

int _close(int file)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800220c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800222c:	605a      	str	r2, [r3, #4]
  return 0;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_isatty>:

int _isatty(int file)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002244:	2301      	movs	r3, #1
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002252:	b480      	push	{r7}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002274:	4a14      	ldr	r2, [pc, #80]	@ (80022c8 <_sbrk+0x5c>)
 8002276:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <_sbrk+0x60>)
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002280:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <_sbrk+0x64>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d102      	bne.n	800228e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002288:	4b11      	ldr	r3, [pc, #68]	@ (80022d0 <_sbrk+0x64>)
 800228a:	4a12      	ldr	r2, [pc, #72]	@ (80022d4 <_sbrk+0x68>)
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800228e:	4b10      	ldr	r3, [pc, #64]	@ (80022d0 <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	429a      	cmp	r2, r3
 800229a:	d207      	bcs.n	80022ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800229c:	f010 fdc4 	bl	8012e28 <__errno>
 80022a0:	4603      	mov	r3, r0
 80022a2:	220c      	movs	r2, #12
 80022a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	e009      	b.n	80022c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022ac:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <_sbrk+0x64>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022b2:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <_sbrk+0x64>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	4a05      	ldr	r2, [pc, #20]	@ (80022d0 <_sbrk+0x64>)
 80022bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022be:	68fb      	ldr	r3, [r7, #12]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20050000 	.word	0x20050000
 80022cc:	00002000 	.word	0x00002000
 80022d0:	20008f60 	.word	0x20008f60
 80022d4:	2000e118 	.word	0x2000e118

080022d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022dc:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <SystemInit+0x20>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	4a05      	ldr	r2, [pc, #20]	@ (80022f8 <SystemInit+0x20>)
 80022e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002300:	4b14      	ldr	r3, [pc, #80]	@ (8002354 <MX_USART1_UART_Init+0x58>)
 8002302:	4a15      	ldr	r2, [pc, #84]	@ (8002358 <MX_USART1_UART_Init+0x5c>)
 8002304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002306:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <MX_USART1_UART_Init+0x58>)
 8002308:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800230c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800230e:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <MX_USART1_UART_Init+0x58>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002314:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <MX_USART1_UART_Init+0x58>)
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800231a:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <MX_USART1_UART_Init+0x58>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002320:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <MX_USART1_UART_Init+0x58>)
 8002322:	220c      	movs	r2, #12
 8002324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002326:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <MX_USART1_UART_Init+0x58>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800232c:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <MX_USART1_UART_Init+0x58>)
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002332:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <MX_USART1_UART_Init+0x58>)
 8002334:	2200      	movs	r2, #0
 8002336:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <MX_USART1_UART_Init+0x58>)
 800233a:	2200      	movs	r2, #0
 800233c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800233e:	4805      	ldr	r0, [pc, #20]	@ (8002354 <MX_USART1_UART_Init+0x58>)
 8002340:	f007 f922 	bl	8009588 <HAL_UART_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800234a:	f7ff fc17 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20008f64 	.word	0x20008f64
 8002358:	40011000 	.word	0x40011000

0800235c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b0ac      	sub	sp, #176	@ 0xb0
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002374:	f107 0318 	add.w	r3, r7, #24
 8002378:	2284      	movs	r2, #132	@ 0x84
 800237a:	2100      	movs	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f010 fcf1 	bl	8012d64 <memset>
  if(uartHandle->Instance==USART1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a32      	ldr	r2, [pc, #200]	@ (8002450 <HAL_UART_MspInit+0xf4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d15c      	bne.n	8002446 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800238c:	2340      	movs	r3, #64	@ 0x40
 800238e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002390:	2300      	movs	r3, #0
 8002392:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002394:	f107 0318 	add.w	r3, r7, #24
 8002398:	4618      	mov	r0, r3
 800239a:	f004 fdef 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023a4:	f7ff fbea 	bl	8001b7c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002454 <HAL_UART_MspInit+0xf8>)
 80023aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ac:	4a29      	ldr	r2, [pc, #164]	@ (8002454 <HAL_UART_MspInit+0xf8>)
 80023ae:	f043 0310 	orr.w	r3, r3, #16
 80023b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b4:	4b27      	ldr	r3, [pc, #156]	@ (8002454 <HAL_UART_MspInit+0xf8>)
 80023b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c0:	4b24      	ldr	r3, [pc, #144]	@ (8002454 <HAL_UART_MspInit+0xf8>)
 80023c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c4:	4a23      	ldr	r2, [pc, #140]	@ (8002454 <HAL_UART_MspInit+0xf8>)
 80023c6:	f043 0302 	orr.w	r3, r3, #2
 80023ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80023cc:	4b21      	ldr	r3, [pc, #132]	@ (8002454 <HAL_UART_MspInit+0xf8>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <HAL_UART_MspInit+0xf8>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002454 <HAL_UART_MspInit+0xf8>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <HAL_UART_MspInit+0xf8>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023f0:	2380      	movs	r3, #128	@ 0x80
 80023f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002402:	2303      	movs	r3, #3
 8002404:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002408:	2307      	movs	r3, #7
 800240a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002412:	4619      	mov	r1, r3
 8002414:	4810      	ldr	r0, [pc, #64]	@ (8002458 <HAL_UART_MspInit+0xfc>)
 8002416:	f002 ffdd 	bl	80053d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800241a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800241e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242e:	2303      	movs	r3, #3
 8002430:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002434:	2307      	movs	r3, #7
 8002436:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800243e:	4619      	mov	r1, r3
 8002440:	4806      	ldr	r0, [pc, #24]	@ (800245c <HAL_UART_MspInit+0x100>)
 8002442:	f002 ffc7 	bl	80053d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002446:	bf00      	nop
 8002448:	37b0      	adds	r7, #176	@ 0xb0
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40011000 	.word	0x40011000
 8002454:	40023800 	.word	0x40023800
 8002458:	40020400 	.word	0x40020400
 800245c:	40020000 	.word	0x40020000

08002460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002460:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002498 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002464:	f7ff ff38 	bl	80022d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002468:	480c      	ldr	r0, [pc, #48]	@ (800249c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800246a:	490d      	ldr	r1, [pc, #52]	@ (80024a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800246c:	4a0d      	ldr	r2, [pc, #52]	@ (80024a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002470:	e002      	b.n	8002478 <LoopCopyDataInit>

08002472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002476:	3304      	adds	r3, #4

08002478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800247c:	d3f9      	bcc.n	8002472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247e:	4a0a      	ldr	r2, [pc, #40]	@ (80024a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002480:	4c0a      	ldr	r4, [pc, #40]	@ (80024ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002484:	e001      	b.n	800248a <LoopFillZerobss>

08002486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002488:	3204      	adds	r2, #4

0800248a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800248c:	d3fb      	bcc.n	8002486 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800248e:	f010 fcd1 	bl	8012e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002492:	f7ff f849 	bl	8001528 <main>
  bx  lr    
 8002496:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002498:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800249c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a0:	200009d4 	.word	0x200009d4
  ldr r2, =_sidata
 80024a4:	080d2f20 	.word	0x080d2f20
  ldr r2, =_sbss
 80024a8:	200009d4 	.word	0x200009d4
  ldr r4, =_ebss
 80024ac:	2000e118 	.word	0x2000e118

080024b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b0:	e7fe      	b.n	80024b0 <ADC_IRQHandler>
	...

080024b4 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	4603      	mov	r3, r0
 80024be:	81fb      	strh	r3, [r7, #14]
 80024c0:	460b      	mov	r3, r1
 80024c2:	81bb      	strh	r3, [r7, #12]
 80024c4:	4613      	mov	r3, r2
 80024c6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 80024cc:	89bb      	ldrh	r3, [r7, #12]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 80024d2:	89bb      	ldrh	r3, [r7, #12]
 80024d4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024d8:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80024de:	f001 fc71 	bl	8003dc4 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80024e2:	89fb      	ldrh	r3, [r7, #14]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2203      	movs	r2, #3
 80024e8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80024ec:	4618      	mov	r0, r3
 80024ee:	f001 fafb 	bl	8003ae8 <CODEC_IO_Write>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461a      	mov	r2, r3
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	4413      	add	r3, r2
 80024fa:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80024fc:	89fb      	ldrh	r3, [r7, #14]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2200      	movs	r2, #0
 8002502:	f640 0117 	movw	r1, #2071	@ 0x817
 8002506:	4618      	mov	r0, r3
 8002508:	f001 faee 	bl	8003ae8 <CODEC_IO_Write>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8002516:	89fb      	ldrh	r3, [r7, #14]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2200      	movs	r2, #0
 800251c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002520:	4618      	mov	r0, r3
 8002522:	f001 fae1 	bl	8003ae8 <CODEC_IO_Write>
 8002526:	4603      	mov	r3, r0
 8002528:	461a      	mov	r2, r3
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	4413      	add	r3, r2
 800252e:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8002530:	89fb      	ldrh	r3, [r7, #14]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	226c      	movs	r2, #108	@ 0x6c
 8002536:	2139      	movs	r1, #57	@ 0x39
 8002538:	4618      	mov	r0, r3
 800253a:	f001 fad5 	bl	8003ae8 <CODEC_IO_Write>
 800253e:	4603      	mov	r3, r0
 8002540:	461a      	mov	r2, r3
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	4413      	add	r3, r2
 8002546:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8002548:	8afb      	ldrh	r3, [r7, #22]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00c      	beq.n	8002568 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800254e:	89fb      	ldrh	r3, [r7, #14]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2213      	movs	r2, #19
 8002554:	2101      	movs	r1, #1
 8002556:	4618      	mov	r0, r3
 8002558:	f001 fac6 	bl	8003ae8 <CODEC_IO_Write>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	4413      	add	r3, r2
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	e00b      	b.n	8002580 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8002568:	89fb      	ldrh	r3, [r7, #14]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2203      	movs	r2, #3
 800256e:	2101      	movs	r1, #1
 8002570:	4618      	mov	r0, r3
 8002572:	f001 fab9 	bl	8003ae8 <CODEC_IO_Write>
 8002576:	4603      	mov	r3, r0
 8002578:	461a      	mov	r2, r3
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	4413      	add	r3, r2
 800257e:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002580:	2032      	movs	r0, #50	@ 0x32
 8002582:	f001 fc87 	bl	8003e94 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8002586:	8b3b      	ldrh	r3, [r7, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 815f 	beq.w	800284c <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 800258e:	4bae      	ldr	r3, [pc, #696]	@ (8002848 <wm8994_Init+0x394>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002594:	8b3b      	ldrh	r3, [r7, #24]
 8002596:	2b03      	cmp	r3, #3
 8002598:	f000 808c 	beq.w	80026b4 <wm8994_Init+0x200>
 800259c:	2b03      	cmp	r3, #3
 800259e:	f300 8111 	bgt.w	80027c4 <wm8994_Init+0x310>
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d002      	beq.n	80025ac <wm8994_Init+0xf8>
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d042      	beq.n	8002630 <wm8994_Init+0x17c>
 80025aa:	e10b      	b.n	80027c4 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80025ac:	89fb      	ldrh	r3, [r7, #14]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80025b4:	2105      	movs	r1, #5
 80025b6:	4618      	mov	r0, r3
 80025b8:	f001 fa96 	bl	8003ae8 <CODEC_IO_Write>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	4413      	add	r3, r2
 80025c4:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80025c6:	89fb      	ldrh	r3, [r7, #14]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2200      	movs	r2, #0
 80025cc:	f240 6101 	movw	r1, #1537	@ 0x601
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 fa89 	bl	8003ae8 <CODEC_IO_Write>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461a      	mov	r2, r3
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	4413      	add	r3, r2
 80025de:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80025e0:	89fb      	ldrh	r3, [r7, #14]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2200      	movs	r2, #0
 80025e6:	f240 6102 	movw	r1, #1538	@ 0x602
 80025ea:	4618      	mov	r0, r3
 80025ec:	f001 fa7c 	bl	8003ae8 <CODEC_IO_Write>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	4413      	add	r3, r2
 80025f8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80025fa:	89fb      	ldrh	r3, [r7, #14]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2202      	movs	r2, #2
 8002600:	f240 6104 	movw	r1, #1540	@ 0x604
 8002604:	4618      	mov	r0, r3
 8002606:	f001 fa6f 	bl	8003ae8 <CODEC_IO_Write>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	4413      	add	r3, r2
 8002612:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002614:	89fb      	ldrh	r3, [r7, #14]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2202      	movs	r2, #2
 800261a:	f240 6105 	movw	r1, #1541	@ 0x605
 800261e:	4618      	mov	r0, r3
 8002620:	f001 fa62 	bl	8003ae8 <CODEC_IO_Write>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	4413      	add	r3, r2
 800262c:	61fb      	str	r3, [r7, #28]
      break;
 800262e:	e110      	b.n	8002852 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002630:	89fb      	ldrh	r3, [r7, #14]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f240 3203 	movw	r2, #771	@ 0x303
 8002638:	2105      	movs	r1, #5
 800263a:	4618      	mov	r0, r3
 800263c:	f001 fa54 	bl	8003ae8 <CODEC_IO_Write>
 8002640:	4603      	mov	r3, r0
 8002642:	461a      	mov	r2, r3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4413      	add	r3, r2
 8002648:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800264a:	89fb      	ldrh	r3, [r7, #14]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2201      	movs	r2, #1
 8002650:	f240 6101 	movw	r1, #1537	@ 0x601
 8002654:	4618      	mov	r0, r3
 8002656:	f001 fa47 	bl	8003ae8 <CODEC_IO_Write>
 800265a:	4603      	mov	r3, r0
 800265c:	461a      	mov	r2, r3
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	4413      	add	r3, r2
 8002662:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002664:	89fb      	ldrh	r3, [r7, #14]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2201      	movs	r2, #1
 800266a:	f240 6102 	movw	r1, #1538	@ 0x602
 800266e:	4618      	mov	r0, r3
 8002670:	f001 fa3a 	bl	8003ae8 <CODEC_IO_Write>
 8002674:	4603      	mov	r3, r0
 8002676:	461a      	mov	r2, r3
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	4413      	add	r3, r2
 800267c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800267e:	89fb      	ldrh	r3, [r7, #14]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2200      	movs	r2, #0
 8002684:	f240 6104 	movw	r1, #1540	@ 0x604
 8002688:	4618      	mov	r0, r3
 800268a:	f001 fa2d 	bl	8003ae8 <CODEC_IO_Write>
 800268e:	4603      	mov	r3, r0
 8002690:	461a      	mov	r2, r3
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002698:	89fb      	ldrh	r3, [r7, #14]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2200      	movs	r2, #0
 800269e:	f240 6105 	movw	r1, #1541	@ 0x605
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 fa20 	bl	8003ae8 <CODEC_IO_Write>
 80026a8:	4603      	mov	r3, r0
 80026aa:	461a      	mov	r2, r3
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	4413      	add	r3, r2
 80026b0:	61fb      	str	r3, [r7, #28]
      break;
 80026b2:	e0ce      	b.n	8002852 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80026b4:	8afb      	ldrh	r3, [r7, #22]
 80026b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026ba:	d141      	bne.n	8002740 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80026bc:	89fb      	ldrh	r3, [r7, #14]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80026c4:	2105      	movs	r1, #5
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 fa0e 	bl	8003ae8 <CODEC_IO_Write>
 80026cc:	4603      	mov	r3, r0
 80026ce:	461a      	mov	r2, r3
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	4413      	add	r3, r2
 80026d4:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80026d6:	89fb      	ldrh	r3, [r7, #14]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2203      	movs	r2, #3
 80026dc:	f240 6101 	movw	r1, #1537	@ 0x601
 80026e0:	4618      	mov	r0, r3
 80026e2:	f001 fa01 	bl	8003ae8 <CODEC_IO_Write>
 80026e6:	4603      	mov	r3, r0
 80026e8:	461a      	mov	r2, r3
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80026f0:	89fb      	ldrh	r3, [r7, #14]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2203      	movs	r2, #3
 80026f6:	f240 6102 	movw	r1, #1538	@ 0x602
 80026fa:	4618      	mov	r0, r3
 80026fc:	f001 f9f4 	bl	8003ae8 <CODEC_IO_Write>
 8002700:	4603      	mov	r3, r0
 8002702:	461a      	mov	r2, r3
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	4413      	add	r3, r2
 8002708:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800270a:	89fb      	ldrh	r3, [r7, #14]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2203      	movs	r2, #3
 8002710:	f240 6104 	movw	r1, #1540	@ 0x604
 8002714:	4618      	mov	r0, r3
 8002716:	f001 f9e7 	bl	8003ae8 <CODEC_IO_Write>
 800271a:	4603      	mov	r3, r0
 800271c:	461a      	mov	r2, r3
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	4413      	add	r3, r2
 8002722:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8002724:	89fb      	ldrh	r3, [r7, #14]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2203      	movs	r2, #3
 800272a:	f240 6105 	movw	r1, #1541	@ 0x605
 800272e:	4618      	mov	r0, r3
 8002730:	f001 f9da 	bl	8003ae8 <CODEC_IO_Write>
 8002734:	4603      	mov	r3, r0
 8002736:	461a      	mov	r2, r3
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	4413      	add	r3, r2
 800273c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 800273e:	e088      	b.n	8002852 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002740:	89fb      	ldrh	r3, [r7, #14]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002748:	2105      	movs	r1, #5
 800274a:	4618      	mov	r0, r3
 800274c:	f001 f9cc 	bl	8003ae8 <CODEC_IO_Write>
 8002750:	4603      	mov	r3, r0
 8002752:	461a      	mov	r2, r3
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800275a:	89fb      	ldrh	r3, [r7, #14]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2201      	movs	r2, #1
 8002760:	f240 6101 	movw	r1, #1537	@ 0x601
 8002764:	4618      	mov	r0, r3
 8002766:	f001 f9bf 	bl	8003ae8 <CODEC_IO_Write>
 800276a:	4603      	mov	r3, r0
 800276c:	461a      	mov	r2, r3
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	4413      	add	r3, r2
 8002772:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002774:	89fb      	ldrh	r3, [r7, #14]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2201      	movs	r2, #1
 800277a:	f240 6102 	movw	r1, #1538	@ 0x602
 800277e:	4618      	mov	r0, r3
 8002780:	f001 f9b2 	bl	8003ae8 <CODEC_IO_Write>
 8002784:	4603      	mov	r3, r0
 8002786:	461a      	mov	r2, r3
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	4413      	add	r3, r2
 800278c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800278e:	89fb      	ldrh	r3, [r7, #14]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2202      	movs	r2, #2
 8002794:	f240 6104 	movw	r1, #1540	@ 0x604
 8002798:	4618      	mov	r0, r3
 800279a:	f001 f9a5 	bl	8003ae8 <CODEC_IO_Write>
 800279e:	4603      	mov	r3, r0
 80027a0:	461a      	mov	r2, r3
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	4413      	add	r3, r2
 80027a6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80027a8:	89fb      	ldrh	r3, [r7, #14]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2202      	movs	r2, #2
 80027ae:	f240 6105 	movw	r1, #1541	@ 0x605
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 f998 	bl	8003ae8 <CODEC_IO_Write>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461a      	mov	r2, r3
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	4413      	add	r3, r2
 80027c0:	61fb      	str	r3, [r7, #28]
      break;
 80027c2:	e046      	b.n	8002852 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80027c4:	89fb      	ldrh	r3, [r7, #14]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f240 3203 	movw	r2, #771	@ 0x303
 80027cc:	2105      	movs	r1, #5
 80027ce:	4618      	mov	r0, r3
 80027d0:	f001 f98a 	bl	8003ae8 <CODEC_IO_Write>
 80027d4:	4603      	mov	r3, r0
 80027d6:	461a      	mov	r2, r3
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	4413      	add	r3, r2
 80027dc:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80027de:	89fb      	ldrh	r3, [r7, #14]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2201      	movs	r2, #1
 80027e4:	f240 6101 	movw	r1, #1537	@ 0x601
 80027e8:	4618      	mov	r0, r3
 80027ea:	f001 f97d 	bl	8003ae8 <CODEC_IO_Write>
 80027ee:	4603      	mov	r3, r0
 80027f0:	461a      	mov	r2, r3
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4413      	add	r3, r2
 80027f6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80027f8:	89fb      	ldrh	r3, [r7, #14]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2201      	movs	r2, #1
 80027fe:	f240 6102 	movw	r1, #1538	@ 0x602
 8002802:	4618      	mov	r0, r3
 8002804:	f001 f970 	bl	8003ae8 <CODEC_IO_Write>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	4413      	add	r3, r2
 8002810:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002812:	89fb      	ldrh	r3, [r7, #14]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2200      	movs	r2, #0
 8002818:	f240 6104 	movw	r1, #1540	@ 0x604
 800281c:	4618      	mov	r0, r3
 800281e:	f001 f963 	bl	8003ae8 <CODEC_IO_Write>
 8002822:	4603      	mov	r3, r0
 8002824:	461a      	mov	r2, r3
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	4413      	add	r3, r2
 800282a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800282c:	89fb      	ldrh	r3, [r7, #14]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2200      	movs	r2, #0
 8002832:	f240 6105 	movw	r1, #1541	@ 0x605
 8002836:	4618      	mov	r0, r3
 8002838:	f001 f956 	bl	8003ae8 <CODEC_IO_Write>
 800283c:	4603      	mov	r3, r0
 800283e:	461a      	mov	r2, r3
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	61fb      	str	r3, [r7, #28]
      break;
 8002846:	e004      	b.n	8002852 <wm8994_Init+0x39e>
 8002848:	20008fec 	.word	0x20008fec
    }
  }
  else
  {
    outputEnabled = 0;
 800284c:	4b99      	ldr	r3, [pc, #612]	@ (8002ab4 <wm8994_Init+0x600>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002852:	8afb      	ldrh	r3, [r7, #22]
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 81ab 	beq.w	8002bb0 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800285a:	4b97      	ldr	r3, [pc, #604]	@ (8002ab8 <wm8994_Init+0x604>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002860:	8afb      	ldrh	r3, [r7, #22]
 8002862:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002866:	f000 8129 	beq.w	8002abc <wm8994_Init+0x608>
 800286a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800286e:	f300 819b 	bgt.w	8002ba8 <wm8994_Init+0x6f4>
 8002872:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002876:	d05a      	beq.n	800292e <wm8994_Init+0x47a>
 8002878:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800287c:	f300 8194 	bgt.w	8002ba8 <wm8994_Init+0x6f4>
 8002880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002884:	f000 80c6 	beq.w	8002a14 <wm8994_Init+0x560>
 8002888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800288c:	f040 818c 	bne.w	8002ba8 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002890:	89fb      	ldrh	r3, [r7, #14]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8002898:	2104      	movs	r1, #4
 800289a:	4618      	mov	r0, r3
 800289c:	f001 f924 	bl	8003ae8 <CODEC_IO_Write>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461a      	mov	r2, r3
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4413      	add	r3, r2
 80028a8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80028aa:	89fb      	ldrh	r3, [r7, #14]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	22db      	movs	r2, #219	@ 0xdb
 80028b0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 f917 	bl	8003ae8 <CODEC_IO_Write>
 80028ba:	4603      	mov	r3, r0
 80028bc:	461a      	mov	r2, r3
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80028c4:	89fb      	ldrh	r3, [r7, #14]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 80028cc:	2102      	movs	r1, #2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f001 f90a 	bl	8003ae8 <CODEC_IO_Write>
 80028d4:	4603      	mov	r3, r0
 80028d6:	461a      	mov	r2, r3
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	4413      	add	r3, r2
 80028dc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80028de:	89fb      	ldrh	r3, [r7, #14]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2202      	movs	r2, #2
 80028e4:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80028e8:	4618      	mov	r0, r3
 80028ea:	f001 f8fd 	bl	8003ae8 <CODEC_IO_Write>
 80028ee:	4603      	mov	r3, r0
 80028f0:	461a      	mov	r2, r3
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4413      	add	r3, r2
 80028f6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80028f8:	89fb      	ldrh	r3, [r7, #14]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2202      	movs	r2, #2
 80028fe:	f240 6109 	movw	r1, #1545	@ 0x609
 8002902:	4618      	mov	r0, r3
 8002904:	f001 f8f0 	bl	8003ae8 <CODEC_IO_Write>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	4413      	add	r3, r2
 8002910:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8002912:	89fb      	ldrh	r3, [r7, #14]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	220e      	movs	r2, #14
 8002918:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800291c:	4618      	mov	r0, r3
 800291e:	f001 f8e3 	bl	8003ae8 <CODEC_IO_Write>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	4413      	add	r3, r2
 800292a:	61fb      	str	r3, [r7, #28]
      break;
 800292c:	e143      	b.n	8002bb6 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800292e:	89fb      	ldrh	r3, [r7, #14]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2211      	movs	r2, #17
 8002934:	2128      	movs	r1, #40	@ 0x28
 8002936:	4618      	mov	r0, r3
 8002938:	f001 f8d6 	bl	8003ae8 <CODEC_IO_Write>
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4413      	add	r3, r2
 8002944:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8002946:	89fb      	ldrh	r3, [r7, #14]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2235      	movs	r2, #53	@ 0x35
 800294c:	2129      	movs	r1, #41	@ 0x29
 800294e:	4618      	mov	r0, r3
 8002950:	f001 f8ca 	bl	8003ae8 <CODEC_IO_Write>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4413      	add	r3, r2
 800295c:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 800295e:	89fb      	ldrh	r3, [r7, #14]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2235      	movs	r2, #53	@ 0x35
 8002964:	212a      	movs	r1, #42	@ 0x2a
 8002966:	4618      	mov	r0, r3
 8002968:	f001 f8be 	bl	8003ae8 <CODEC_IO_Write>
 800296c:	4603      	mov	r3, r0
 800296e:	461a      	mov	r2, r3
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	4413      	add	r3, r2
 8002974:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8002976:	89fb      	ldrh	r3, [r7, #14]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f240 3203 	movw	r2, #771	@ 0x303
 800297e:	2104      	movs	r1, #4
 8002980:	4618      	mov	r0, r3
 8002982:	f001 f8b1 	bl	8003ae8 <CODEC_IO_Write>
 8002986:	4603      	mov	r3, r0
 8002988:	461a      	mov	r2, r3
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	4413      	add	r3, r2
 800298e:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002990:	89fb      	ldrh	r3, [r7, #14]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	22db      	movs	r2, #219	@ 0xdb
 8002996:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800299a:	4618      	mov	r0, r3
 800299c:	f001 f8a4 	bl	8003ae8 <CODEC_IO_Write>
 80029a0:	4603      	mov	r3, r0
 80029a2:	461a      	mov	r2, r3
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	4413      	add	r3, r2
 80029a8:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80029aa:	89fb      	ldrh	r3, [r7, #14]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f246 3250 	movw	r2, #25424	@ 0x6350
 80029b2:	2102      	movs	r1, #2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 f897 	bl	8003ae8 <CODEC_IO_Write>
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80029c4:	89fb      	ldrh	r3, [r7, #14]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2202      	movs	r2, #2
 80029ca:	f240 6106 	movw	r1, #1542	@ 0x606
 80029ce:	4618      	mov	r0, r3
 80029d0:	f001 f88a 	bl	8003ae8 <CODEC_IO_Write>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	4413      	add	r3, r2
 80029dc:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80029de:	89fb      	ldrh	r3, [r7, #14]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2202      	movs	r2, #2
 80029e4:	f240 6107 	movw	r1, #1543	@ 0x607
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 f87d 	bl	8003ae8 <CODEC_IO_Write>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4413      	add	r3, r2
 80029f6:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80029f8:	89fb      	ldrh	r3, [r7, #14]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	220d      	movs	r2, #13
 80029fe:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 f870 	bl	8003ae8 <CODEC_IO_Write>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	61fb      	str	r3, [r7, #28]
      break;
 8002a12:	e0d0      	b.n	8002bb6 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8002a14:	89fb      	ldrh	r3, [r7, #14]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f001 f862 	bl	8003ae8 <CODEC_IO_Write>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002a2e:	89fb      	ldrh	r3, [r7, #14]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	22db      	movs	r2, #219	@ 0xdb
 8002a34:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 f855 	bl	8003ae8 <CODEC_IO_Write>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	461a      	mov	r2, r3
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	4413      	add	r3, r2
 8002a46:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002a48:	89fb      	ldrh	r3, [r7, #14]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002a50:	2102      	movs	r1, #2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f001 f848 	bl	8003ae8 <CODEC_IO_Write>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	4413      	add	r3, r2
 8002a60:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002a62:	89fb      	ldrh	r3, [r7, #14]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2202      	movs	r2, #2
 8002a68:	f240 6106 	movw	r1, #1542	@ 0x606
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f001 f83b 	bl	8003ae8 <CODEC_IO_Write>
 8002a72:	4603      	mov	r3, r0
 8002a74:	461a      	mov	r2, r3
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	4413      	add	r3, r2
 8002a7a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002a7c:	89fb      	ldrh	r3, [r7, #14]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2202      	movs	r2, #2
 8002a82:	f240 6107 	movw	r1, #1543	@ 0x607
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 f82e 	bl	8003ae8 <CODEC_IO_Write>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	461a      	mov	r2, r3
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	4413      	add	r3, r2
 8002a94:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002a96:	89fb      	ldrh	r3, [r7, #14]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	220d      	movs	r2, #13
 8002a9c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 f821 	bl	8003ae8 <CODEC_IO_Write>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	61fb      	str	r3, [r7, #28]
      break; 
 8002ab0:	e081      	b.n	8002bb6 <wm8994_Init+0x702>
 8002ab2:	bf00      	nop
 8002ab4:	20008fec 	.word	0x20008fec
 8002ab8:	20008ff0 	.word	0x20008ff0
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002abc:	89fb      	ldrh	r3, [r7, #14]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8002ac4:	2104      	movs	r1, #4
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f001 f80e 	bl	8003ae8 <CODEC_IO_Write>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461a      	mov	r2, r3
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002ad6:	89fb      	ldrh	r3, [r7, #14]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	22db      	movs	r2, #219	@ 0xdb
 8002adc:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 f801 	bl	8003ae8 <CODEC_IO_Write>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	461a      	mov	r2, r3
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	4413      	add	r3, r2
 8002aee:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002af0:	89fb      	ldrh	r3, [r7, #14]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	22db      	movs	r2, #219	@ 0xdb
 8002af6:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fff4 	bl	8003ae8 <CODEC_IO_Write>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	4413      	add	r3, r2
 8002b08:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8002b0a:	89fb      	ldrh	r3, [r7, #14]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8002b12:	2102      	movs	r1, #2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 ffe7 	bl	8003ae8 <CODEC_IO_Write>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	4413      	add	r3, r2
 8002b22:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002b24:	89fb      	ldrh	r3, [r7, #14]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2202      	movs	r2, #2
 8002b2a:	f240 6106 	movw	r1, #1542	@ 0x606
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 ffda 	bl	8003ae8 <CODEC_IO_Write>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002b3e:	89fb      	ldrh	r3, [r7, #14]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2202      	movs	r2, #2
 8002b44:	f240 6107 	movw	r1, #1543	@ 0x607
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 ffcd 	bl	8003ae8 <CODEC_IO_Write>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	4413      	add	r3, r2
 8002b56:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002b58:	89fb      	ldrh	r3, [r7, #14]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 ffc0 	bl	8003ae8 <CODEC_IO_Write>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	4413      	add	r3, r2
 8002b70:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002b72:	89fb      	ldrh	r3, [r7, #14]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2202      	movs	r2, #2
 8002b78:	f240 6109 	movw	r1, #1545	@ 0x609
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 ffb3 	bl	8003ae8 <CODEC_IO_Write>
 8002b82:	4603      	mov	r3, r0
 8002b84:	461a      	mov	r2, r3
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	4413      	add	r3, r2
 8002b8a:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002b8c:	89fb      	ldrh	r3, [r7, #14]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	220d      	movs	r2, #13
 8002b92:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 ffa6 	bl	8003ae8 <CODEC_IO_Write>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	61fb      	str	r3, [r7, #28]
      break;    
 8002ba6:	e006      	b.n	8002bb6 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	3301      	adds	r3, #1
 8002bac:	61fb      	str	r3, [r7, #28]
      break;
 8002bae:	e002      	b.n	8002bb6 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002bb0:	4ba4      	ldr	r3, [pc, #656]	@ (8002e44 <wm8994_Init+0x990>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4aa3      	ldr	r2, [pc, #652]	@ (8002e48 <wm8994_Init+0x994>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d079      	beq.n	8002cb2 <wm8994_Init+0x7fe>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4aa1      	ldr	r2, [pc, #644]	@ (8002e48 <wm8994_Init+0x994>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	f200 80ad 	bhi.w	8002d22 <wm8994_Init+0x86e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d061      	beq.n	8002c96 <wm8994_Init+0x7e2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	f200 80a2 	bhi.w	8002d22 <wm8994_Init+0x86e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002be4:	4293      	cmp	r3, r2
 8002be6:	f000 808e 	beq.w	8002d06 <wm8994_Init+0x852>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	f200 8096 	bhi.w	8002d22 <wm8994_Init+0x86e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002bfc:	d03d      	beq.n	8002c7a <wm8994_Init+0x7c6>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002c04:	f200 808d 	bhi.w	8002d22 <wm8994_Init+0x86e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d06b      	beq.n	8002cea <wm8994_Init+0x836>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	f200 8082 	bhi.w	8002d22 <wm8994_Init+0x86e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002c24:	d01b      	beq.n	8002c5e <wm8994_Init+0x7aa>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002c2c:	d879      	bhi.n	8002d22 <wm8994_Init+0x86e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002c34:	d005      	beq.n	8002c42 <wm8994_Init+0x78e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d046      	beq.n	8002cce <wm8994_Init+0x81a>
 8002c40:	e06f      	b.n	8002d22 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002c42:	89fb      	ldrh	r3, [r7, #14]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2203      	movs	r2, #3
 8002c48:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 ff4b 	bl	8003ae8 <CODEC_IO_Write>
 8002c52:	4603      	mov	r3, r0
 8002c54:	461a      	mov	r2, r3
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	4413      	add	r3, r2
 8002c5a:	61fb      	str	r3, [r7, #28]
    break;
 8002c5c:	e06f      	b.n	8002d3e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002c5e:	89fb      	ldrh	r3, [r7, #14]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2233      	movs	r2, #51	@ 0x33
 8002c64:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 ff3d 	bl	8003ae8 <CODEC_IO_Write>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	461a      	mov	r2, r3
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	4413      	add	r3, r2
 8002c76:	61fb      	str	r3, [r7, #28]
    break;
 8002c78:	e061      	b.n	8002d3e <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002c7a:	89fb      	ldrh	r3, [r7, #14]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2263      	movs	r2, #99	@ 0x63
 8002c80:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 ff2f 	bl	8003ae8 <CODEC_IO_Write>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	4413      	add	r3, r2
 8002c92:	61fb      	str	r3, [r7, #28]
    break;
 8002c94:	e053      	b.n	8002d3e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002c96:	89fb      	ldrh	r3, [r7, #14]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2283      	movs	r2, #131	@ 0x83
 8002c9c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 ff21 	bl	8003ae8 <CODEC_IO_Write>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	461a      	mov	r2, r3
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	4413      	add	r3, r2
 8002cae:	61fb      	str	r3, [r7, #28]
    break;
 8002cb0:	e045      	b.n	8002d3e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002cb2:	89fb      	ldrh	r3, [r7, #14]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	22a3      	movs	r2, #163	@ 0xa3
 8002cb8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 ff13 	bl	8003ae8 <CODEC_IO_Write>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	61fb      	str	r3, [r7, #28]
    break;
 8002ccc:	e037      	b.n	8002d3e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002cce:	89fb      	ldrh	r3, [r7, #14]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2213      	movs	r2, #19
 8002cd4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 ff05 	bl	8003ae8 <CODEC_IO_Write>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	61fb      	str	r3, [r7, #28]
    break;
 8002ce8:	e029      	b.n	8002d3e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002cea:	89fb      	ldrh	r3, [r7, #14]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2243      	movs	r2, #67	@ 0x43
 8002cf0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 fef7 	bl	8003ae8 <CODEC_IO_Write>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	4413      	add	r3, r2
 8002d02:	61fb      	str	r3, [r7, #28]
    break;
 8002d04:	e01b      	b.n	8002d3e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8002d06:	89fb      	ldrh	r3, [r7, #14]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2273      	movs	r2, #115	@ 0x73
 8002d0c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fee9 	bl	8003ae8 <CODEC_IO_Write>
 8002d16:	4603      	mov	r3, r0
 8002d18:	461a      	mov	r2, r3
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	61fb      	str	r3, [r7, #28]
    break; 
 8002d20:	e00d      	b.n	8002d3e <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002d22:	89fb      	ldrh	r3, [r7, #14]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2283      	movs	r2, #131	@ 0x83
 8002d28:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fedb 	bl	8003ae8 <CODEC_IO_Write>
 8002d32:	4603      	mov	r3, r0
 8002d34:	461a      	mov	r2, r3
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4413      	add	r3, r2
 8002d3a:	61fb      	str	r3, [r7, #28]
    break; 
 8002d3c:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002d3e:	8afb      	ldrh	r3, [r7, #22]
 8002d40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d44:	d10e      	bne.n	8002d64 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8002d46:	89fb      	ldrh	r3, [r7, #14]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	f244 0218 	movw	r2, #16408	@ 0x4018
 8002d4e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fec8 	bl	8003ae8 <CODEC_IO_Write>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4413      	add	r3, r2
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	e00d      	b.n	8002d80 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002d64:	89fb      	ldrh	r3, [r7, #14]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f244 0210 	movw	r2, #16400	@ 0x4010
 8002d6c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 feb9 	bl	8003ae8 <CODEC_IO_Write>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461a      	mov	r2, r3
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002d80:	89fb      	ldrh	r3, [r7, #14]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2200      	movs	r2, #0
 8002d86:	f240 3102 	movw	r1, #770	@ 0x302
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 feac 	bl	8003ae8 <CODEC_IO_Write>
 8002d90:	4603      	mov	r3, r0
 8002d92:	461a      	mov	r2, r3
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	4413      	add	r3, r2
 8002d98:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8002d9a:	89fb      	ldrh	r3, [r7, #14]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	220a      	movs	r2, #10
 8002da0:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fe9f 	bl	8003ae8 <CODEC_IO_Write>
 8002daa:	4603      	mov	r3, r0
 8002dac:	461a      	mov	r2, r3
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8002db4:	89fb      	ldrh	r3, [r7, #14]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2201      	movs	r2, #1
 8002dba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fe92 	bl	8003ae8 <CODEC_IO_Write>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	4413      	add	r3, r2
 8002dcc:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8002dce:	8b3b      	ldrh	r3, [r7, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 817b 	beq.w	80030cc <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8002dd6:	8b3b      	ldrh	r3, [r7, #24]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d157      	bne.n	8002e8c <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8002ddc:	89fb      	ldrh	r3, [r7, #14]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002de4:	212d      	movs	r1, #45	@ 0x2d
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fe7e 	bl	8003ae8 <CODEC_IO_Write>
 8002dec:	4603      	mov	r3, r0
 8002dee:	461a      	mov	r2, r3
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8002df6:	89fb      	ldrh	r3, [r7, #14]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dfe:	212e      	movs	r1, #46	@ 0x2e
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fe71 	bl	8003ae8 <CODEC_IO_Write>
 8002e06:	4603      	mov	r3, r0
 8002e08:	461a      	mov	r2, r3
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8002e10:	4b0e      	ldr	r3, [pc, #56]	@ (8002e4c <wm8994_Init+0x998>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01b      	beq.n	8002e50 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8002e18:	89fb      	ldrh	r3, [r7, #14]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8002e20:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fe5f 	bl	8003ae8 <CODEC_IO_Write>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	4413      	add	r3, r2
 8002e32:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8002e34:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <wm8994_Init+0x998>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8002e3a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002e3e:	f001 f829 	bl	8003e94 <AUDIO_IO_Delay>
 8002e42:	e016      	b.n	8002e72 <wm8994_Init+0x9be>
 8002e44:	20008ff0 	.word	0x20008ff0
 8002e48:	00017700 	.word	0x00017700
 8002e4c:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8002e50:	89fb      	ldrh	r3, [r7, #14]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f248 1208 	movw	r2, #33032	@ 0x8108
 8002e58:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fe43 	bl	8003ae8 <CODEC_IO_Write>
 8002e62:	4603      	mov	r3, r0
 8002e64:	461a      	mov	r2, r3
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	4413      	add	r3, r2
 8002e6a:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8002e6c:	2032      	movs	r0, #50	@ 0x32
 8002e6e:	f001 f811 	bl	8003e94 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8002e72:	89fb      	ldrh	r3, [r7, #14]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2200      	movs	r2, #0
 8002e78:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fe33 	bl	8003ae8 <CODEC_IO_Write>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	4413      	add	r3, r2
 8002e8a:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8002e8c:	89fb      	ldrh	r3, [r7, #14]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002e94:	2103      	movs	r1, #3
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fe26 	bl	8003ae8 <CODEC_IO_Write>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8002ea6:	89fb      	ldrh	r3, [r7, #14]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2122      	movs	r1, #34	@ 0x22
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fe1a 	bl	8003ae8 <CODEC_IO_Write>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	4413      	add	r3, r2
 8002ebc:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8002ebe:	89fb      	ldrh	r3, [r7, #14]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2123      	movs	r1, #35	@ 0x23
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fe0e 	bl	8003ae8 <CODEC_IO_Write>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	461a      	mov	r2, r3
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8002ed6:	89fb      	ldrh	r3, [r7, #14]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002ede:	2136      	movs	r1, #54	@ 0x36
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fe01 	bl	8003ae8 <CODEC_IO_Write>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	461a      	mov	r2, r3
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	4413      	add	r3, r2
 8002eee:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8002ef0:	89fb      	ldrh	r3, [r7, #14]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f243 0203 	movw	r2, #12291	@ 0x3003
 8002ef8:	2101      	movs	r1, #1
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fdf4 	bl	8003ae8 <CODEC_IO_Write>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461a      	mov	r2, r3
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	4413      	add	r3, r2
 8002f08:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002f0a:	8afb      	ldrh	r3, [r7, #22]
 8002f0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f10:	d10d      	bne.n	8002f2e <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8002f12:	89fb      	ldrh	r3, [r7, #14]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f240 2205 	movw	r2, #517	@ 0x205
 8002f1a:	2151      	movs	r1, #81	@ 0x51
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fde3 	bl	8003ae8 <CODEC_IO_Write>
 8002f22:	4603      	mov	r3, r0
 8002f24:	461a      	mov	r2, r3
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	4413      	add	r3, r2
 8002f2a:	61fb      	str	r3, [r7, #28]
 8002f2c:	e00b      	b.n	8002f46 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8002f2e:	89fb      	ldrh	r3, [r7, #14]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2205      	movs	r2, #5
 8002f34:	2151      	movs	r1, #81	@ 0x51
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fdd6 	bl	8003ae8 <CODEC_IO_Write>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	461a      	mov	r2, r3
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8002f46:	8b7b      	ldrh	r3, [r7, #26]
 8002f48:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8002f4c:	f043 0303 	orr.w	r3, r3, #3
 8002f50:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002f52:	89fb      	ldrh	r3, [r7, #14]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	8b7a      	ldrh	r2, [r7, #26]
 8002f58:	2101      	movs	r1, #1
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fdc4 	bl	8003ae8 <CODEC_IO_Write>
 8002f60:	4603      	mov	r3, r0
 8002f62:	461a      	mov	r2, r3
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	4413      	add	r3, r2
 8002f68:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002f6a:	89fb      	ldrh	r3, [r7, #14]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2222      	movs	r2, #34	@ 0x22
 8002f70:	2160      	movs	r1, #96	@ 0x60
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fdb8 	bl	8003ae8 <CODEC_IO_Write>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	4413      	add	r3, r2
 8002f80:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002f82:	89fb      	ldrh	r3, [r7, #14]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8002f8a:	214c      	movs	r1, #76	@ 0x4c
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fdab 	bl	8003ae8 <CODEC_IO_Write>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461a      	mov	r2, r3
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	4413      	add	r3, r2
 8002f9a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8002f9c:	200f      	movs	r0, #15
 8002f9e:	f000 ff79 	bl	8003e94 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002fa2:	89fb      	ldrh	r3, [r7, #14]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	212d      	movs	r1, #45	@ 0x2d
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fd9c 	bl	8003ae8 <CODEC_IO_Write>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8002fba:	89fb      	ldrh	r3, [r7, #14]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	212e      	movs	r1, #46	@ 0x2e
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fd90 	bl	8003ae8 <CODEC_IO_Write>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	4413      	add	r3, r2
 8002fd0:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002fd2:	89fb      	ldrh	r3, [r7, #14]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8002fda:	2103      	movs	r1, #3
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fd83 	bl	8003ae8 <CODEC_IO_Write>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	4413      	add	r3, r2
 8002fea:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002fec:	89fb      	ldrh	r3, [r7, #14]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2233      	movs	r2, #51	@ 0x33
 8002ff2:	2154      	movs	r1, #84	@ 0x54
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fd77 	bl	8003ae8 <CODEC_IO_Write>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	4413      	add	r3, r2
 8003002:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8003004:	f240 1001 	movw	r0, #257	@ 0x101
 8003008:	f000 ff44 	bl	8003e94 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 800300c:	89fb      	ldrh	r3, [r7, #14]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	22ee      	movs	r2, #238	@ 0xee
 8003012:	2160      	movs	r1, #96	@ 0x60
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fd67 	bl	8003ae8 <CODEC_IO_Write>
 800301a:	4603      	mov	r3, r0
 800301c:	461a      	mov	r2, r3
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	4413      	add	r3, r2
 8003022:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8003024:	89fb      	ldrh	r3, [r7, #14]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	22c0      	movs	r2, #192	@ 0xc0
 800302a:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fd5a 	bl	8003ae8 <CODEC_IO_Write>
 8003034:	4603      	mov	r3, r0
 8003036:	461a      	mov	r2, r3
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	4413      	add	r3, r2
 800303c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800303e:	89fb      	ldrh	r3, [r7, #14]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	22c0      	movs	r2, #192	@ 0xc0
 8003044:	f240 6111 	movw	r1, #1553	@ 0x611
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fd4d 	bl	8003ae8 <CODEC_IO_Write>
 800304e:	4603      	mov	r3, r0
 8003050:	461a      	mov	r2, r3
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003058:	89fb      	ldrh	r3, [r7, #14]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2210      	movs	r2, #16
 800305e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fd40 	bl	8003ae8 <CODEC_IO_Write>
 8003068:	4603      	mov	r3, r0
 800306a:	461a      	mov	r2, r3
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	4413      	add	r3, r2
 8003070:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8003072:	89fb      	ldrh	r3, [r7, #14]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	22c0      	movs	r2, #192	@ 0xc0
 8003078:	f240 6112 	movw	r1, #1554	@ 0x612
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fd33 	bl	8003ae8 <CODEC_IO_Write>
 8003082:	4603      	mov	r3, r0
 8003084:	461a      	mov	r2, r3
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	4413      	add	r3, r2
 800308a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 800308c:	89fb      	ldrh	r3, [r7, #14]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	22c0      	movs	r2, #192	@ 0xc0
 8003092:	f240 6113 	movw	r1, #1555	@ 0x613
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fd26 	bl	8003ae8 <CODEC_IO_Write>
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	4413      	add	r3, r2
 80030a4:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80030a6:	89fb      	ldrh	r3, [r7, #14]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2210      	movs	r2, #16
 80030ac:	f240 4122 	movw	r1, #1058	@ 0x422
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fd19 	bl	8003ae8 <CODEC_IO_Write>
 80030b6:	4603      	mov	r3, r0
 80030b8:	461a      	mov	r2, r3
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80030c0:	7afa      	ldrb	r2, [r7, #11]
 80030c2:	89fb      	ldrh	r3, [r7, #14]
 80030c4:	4611      	mov	r1, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 f984 	bl	80033d4 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80030cc:	8afb      	ldrh	r3, [r7, #22]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80a6 	beq.w	8003220 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80030d4:	8afb      	ldrh	r3, [r7, #22]
 80030d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030da:	d003      	beq.n	80030e4 <wm8994_Init+0xc30>
 80030dc:	8afb      	ldrh	r3, [r7, #22]
 80030de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030e2:	d12b      	bne.n	800313c <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80030e4:	8b7b      	ldrh	r3, [r7, #26]
 80030e6:	f043 0313 	orr.w	r3, r3, #19
 80030ea:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80030ec:	89fb      	ldrh	r3, [r7, #14]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	8b7a      	ldrh	r2, [r7, #26]
 80030f2:	2101      	movs	r1, #1
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fcf7 	bl	8003ae8 <CODEC_IO_Write>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461a      	mov	r2, r3
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	4413      	add	r3, r2
 8003102:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003104:	89fb      	ldrh	r3, [r7, #14]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2202      	movs	r2, #2
 800310a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fcea 	bl	8003ae8 <CODEC_IO_Write>
 8003114:	4603      	mov	r3, r0
 8003116:	461a      	mov	r2, r3
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	4413      	add	r3, r2
 800311c:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800311e:	89fb      	ldrh	r3, [r7, #14]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003126:	f240 4111 	movw	r1, #1041	@ 0x411
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fcdc 	bl	8003ae8 <CODEC_IO_Write>
 8003130:	4603      	mov	r3, r0
 8003132:	461a      	mov	r2, r3
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	4413      	add	r3, r2
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	e06b      	b.n	8003214 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800313c:	8afb      	ldrh	r3, [r7, #22]
 800313e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003142:	d139      	bne.n	80031b8 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003144:	8b7b      	ldrh	r3, [r7, #26]
 8003146:	f043 0313 	orr.w	r3, r3, #19
 800314a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800314c:	89fb      	ldrh	r3, [r7, #14]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	8b7a      	ldrh	r2, [r7, #26]
 8003152:	2101      	movs	r1, #1
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fcc7 	bl	8003ae8 <CODEC_IO_Write>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	4413      	add	r3, r2
 8003162:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003164:	89fb      	ldrh	r3, [r7, #14]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2202      	movs	r2, #2
 800316a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fcba 	bl	8003ae8 <CODEC_IO_Write>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	4413      	add	r3, r2
 800317c:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800317e:	89fb      	ldrh	r3, [r7, #14]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003186:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fcac 	bl	8003ae8 <CODEC_IO_Write>
 8003190:	4603      	mov	r3, r0
 8003192:	461a      	mov	r2, r3
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	4413      	add	r3, r2
 8003198:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800319a:	89fb      	ldrh	r3, [r7, #14]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80031a2:	f240 4111 	movw	r1, #1041	@ 0x411
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fc9e 	bl	8003ae8 <CODEC_IO_Write>
 80031ac:	4603      	mov	r3, r0
 80031ae:	461a      	mov	r2, r3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	4413      	add	r3, r2
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	e02d      	b.n	8003214 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80031b8:	8afb      	ldrh	r3, [r7, #22]
 80031ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031be:	d003      	beq.n	80031c8 <wm8994_Init+0xd14>
 80031c0:	8afb      	ldrh	r3, [r7, #22]
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031c6:	d125      	bne.n	8003214 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80031c8:	89fb      	ldrh	r3, [r7, #14]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	220b      	movs	r2, #11
 80031ce:	2118      	movs	r1, #24
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fc89 	bl	8003ae8 <CODEC_IO_Write>
 80031d6:	4603      	mov	r3, r0
 80031d8:	461a      	mov	r2, r3
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	4413      	add	r3, r2
 80031de:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 80031e0:	89fb      	ldrh	r3, [r7, #14]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	220b      	movs	r2, #11
 80031e6:	211a      	movs	r1, #26
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fc7d 	bl	8003ae8 <CODEC_IO_Write>
 80031ee:	4603      	mov	r3, r0
 80031f0:	461a      	mov	r2, r3
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	4413      	add	r3, r2
 80031f6:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80031f8:	89fb      	ldrh	r3, [r7, #14]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003200:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fc6f 	bl	8003ae8 <CODEC_IO_Write>
 800320a:	4603      	mov	r3, r0
 800320c:	461a      	mov	r2, r3
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	4413      	add	r3, r2
 8003212:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003214:	7afa      	ldrb	r2, [r7, #11]
 8003216:	89fb      	ldrh	r3, [r7, #14]
 8003218:	4611      	mov	r1, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f000 f8da 	bl	80033d4 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8003220:	69fb      	ldr	r3, [r7, #28]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop

0800322c <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8003230:	f000 fdd2 	bl	8003dd8 <AUDIO_IO_DeInit>
}
 8003234:	bf00      	nop
 8003236:	bd80      	pop	{r7, pc}

08003238 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8003242:	f000 fdbf 	bl	8003dc4 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fdf5 	bl	8003e3c <AUDIO_IO_Read>
 8003252:	4603      	mov	r3, r0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	6039      	str	r1, [r7, #0]
 8003266:	80fb      	strh	r3, [r7, #6]
 8003268:	4613      	mov	r3, r2
 800326a:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f9d1 	bl	800361c <wm8994_SetMute>
 800327a:	4602      	mov	r2, r0
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003282:	68fb      	ldr	r3, [r7, #12]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	2101      	movs	r1, #1
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 f9bc 	bl	800361c <wm8994_SetMute>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80032ac:	88fb      	ldrh	r3, [r7, #6]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2201      	movs	r2, #1
 80032b2:	2102      	movs	r1, #2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fc17 	bl	8003ae8 <CODEC_IO_Write>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4413      	add	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80032c4:	68fb      	ldr	r3, [r7, #12]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	4603      	mov	r3, r0
 80032d6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 f99b 	bl	800361c <wm8994_SetMute>
 80032e6:	4602      	mov	r2, r0
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80032ee:	68fb      	ldr	r3, [r7, #12]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8003308:	4b31      	ldr	r3, [pc, #196]	@ (80033d0 <wm8994_Stop+0xd8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d05a      	beq.n	80033c6 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	2101      	movs	r1, #1
 8003314:	4618      	mov	r0, r3
 8003316:	f000 f981 	bl	800361c <wm8994_SetMute>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d04e      	beq.n	80033c6 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003330:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fbd7 	bl	8003ae8 <CODEC_IO_Write>
 800333a:	4603      	mov	r3, r0
 800333c:	461a      	mov	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4413      	add	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800334c:	f240 4122 	movw	r1, #1058	@ 0x422
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fbc9 	bl	8003ae8 <CODEC_IO_Write>
 8003356:	4603      	mov	r3, r0
 8003358:	461a      	mov	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4413      	add	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2200      	movs	r2, #0
 8003366:	212d      	movs	r1, #45	@ 0x2d
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fbbd 	bl	8003ae8 <CODEC_IO_Write>
 800336e:	4603      	mov	r3, r0
 8003370:	461a      	mov	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4413      	add	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2200      	movs	r2, #0
 800337e:	212e      	movs	r1, #46	@ 0x2e
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fbb1 	bl	8003ae8 <CODEC_IO_Write>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4413      	add	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2200      	movs	r2, #0
 8003396:	2105      	movs	r1, #5
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fba5 	bl	8003ae8 <CODEC_IO_Write>
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4413      	add	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2200      	movs	r2, #0
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fb99 	bl	8003ae8 <CODEC_IO_Write>
 80033b6:	4603      	mov	r3, r0
 80033b8:	461a      	mov	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4413      	add	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 80033c0:	4b03      	ldr	r3, [pc, #12]	@ (80033d0 <wm8994_Stop+0xd8>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 80033c6:	68fb      	ldr	r3, [r7, #12]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20008fec 	.word	0x20008fec

080033d4 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	460a      	mov	r2, r1
 80033de:	80fb      	strh	r3, [r7, #6]
 80033e0:	4613      	mov	r3, r2
 80033e2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80033e8:	797b      	ldrb	r3, [r7, #5]
 80033ea:	2b64      	cmp	r3, #100	@ 0x64
 80033ec:	d80b      	bhi.n	8003406 <wm8994_SetVolume+0x32>
 80033ee:	797a      	ldrb	r2, [r7, #5]
 80033f0:	4613      	mov	r3, r2
 80033f2:	019b      	lsls	r3, r3, #6
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	4a86      	ldr	r2, [pc, #536]	@ (8003610 <wm8994_SetVolume+0x23c>)
 80033f8:	fb82 1203 	smull	r1, r2, r2, r3
 80033fc:	1152      	asrs	r2, r2, #5
 80033fe:	17db      	asrs	r3, r3, #31
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	e000      	b.n	8003408 <wm8994_SetVolume+0x34>
 8003406:	2364      	movs	r3, #100	@ 0x64
 8003408:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 800340a:	4b82      	ldr	r3, [pc, #520]	@ (8003614 <wm8994_SetVolume+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 809b 	beq.w	800354a <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8003414:	7afb      	ldrb	r3, [r7, #11]
 8003416:	2b3e      	cmp	r3, #62	@ 0x3e
 8003418:	d93d      	bls.n	8003496 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	2100      	movs	r1, #0
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f8fc 	bl	800361c <wm8994_SetMute>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4413      	add	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 800342c:	88fb      	ldrh	r3, [r7, #6]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f240 127f 	movw	r2, #383	@ 0x17f
 8003434:	211c      	movs	r1, #28
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fb56 	bl	8003ae8 <CODEC_IO_Write>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4413      	add	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f240 127f 	movw	r2, #383	@ 0x17f
 800344e:	211d      	movs	r1, #29
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fb49 	bl	8003ae8 <CODEC_IO_Write>
 8003456:	4603      	mov	r3, r0
 8003458:	461a      	mov	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4413      	add	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f240 127f 	movw	r2, #383	@ 0x17f
 8003468:	2126      	movs	r1, #38	@ 0x26
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fb3c 	bl	8003ae8 <CODEC_IO_Write>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f240 127f 	movw	r2, #383	@ 0x17f
 8003482:	2127      	movs	r1, #39	@ 0x27
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fb2f 	bl	8003ae8 <CODEC_IO_Write>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4413      	add	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	e059      	b.n	800354a <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8003496:	797b      	ldrb	r3, [r7, #5]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d109      	bne.n	80034b0 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	2101      	movs	r1, #1
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f8bb 	bl	800361c <wm8994_SetMute>
 80034a6:	4602      	mov	r2, r0
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4413      	add	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	e04c      	b.n	800354a <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 f8b1 	bl	800361c <wm8994_SetMute>
 80034ba:	4602      	mov	r2, r0
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	b2d8      	uxtb	r0, r3
 80034c6:	7afb      	ldrb	r3, [r7, #11]
 80034c8:	b21b      	sxth	r3, r3
 80034ca:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80034ce:	b21b      	sxth	r3, r3
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	211c      	movs	r1, #28
 80034d6:	f000 fb07 	bl	8003ae8 <CODEC_IO_Write>
 80034da:	4603      	mov	r3, r0
 80034dc:	461a      	mov	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4413      	add	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	b2d8      	uxtb	r0, r3
 80034e8:	7afb      	ldrb	r3, [r7, #11]
 80034ea:	b21b      	sxth	r3, r3
 80034ec:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80034f0:	b21b      	sxth	r3, r3
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	211d      	movs	r1, #29
 80034f8:	f000 faf6 	bl	8003ae8 <CODEC_IO_Write>
 80034fc:	4603      	mov	r3, r0
 80034fe:	461a      	mov	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	b2d8      	uxtb	r0, r3
 800350a:	7afb      	ldrb	r3, [r7, #11]
 800350c:	b21b      	sxth	r3, r3
 800350e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003512:	b21b      	sxth	r3, r3
 8003514:	b29b      	uxth	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	2126      	movs	r1, #38	@ 0x26
 800351a:	f000 fae5 	bl	8003ae8 <CODEC_IO_Write>
 800351e:	4603      	mov	r3, r0
 8003520:	461a      	mov	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4413      	add	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	b2d8      	uxtb	r0, r3
 800352c:	7afb      	ldrb	r3, [r7, #11]
 800352e:	b21b      	sxth	r3, r3
 8003530:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003534:	b21b      	sxth	r3, r3
 8003536:	b29b      	uxth	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	2127      	movs	r1, #39	@ 0x27
 800353c:	f000 fad4 	bl	8003ae8 <CODEC_IO_Write>
 8003540:	4603      	mov	r3, r0
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800354a:	4b33      	ldr	r3, [pc, #204]	@ (8003618 <wm8994_SetVolume+0x244>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d059      	beq.n	8003606 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8003552:	797b      	ldrb	r3, [r7, #5]
 8003554:	2b63      	cmp	r3, #99	@ 0x63
 8003556:	d80c      	bhi.n	8003572 <wm8994_SetVolume+0x19e>
 8003558:	797a      	ldrb	r2, [r7, #5]
 800355a:	4613      	mov	r3, r2
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	4a2b      	ldr	r2, [pc, #172]	@ (8003610 <wm8994_SetVolume+0x23c>)
 8003564:	fb82 1203 	smull	r1, r2, r2, r3
 8003568:	1152      	asrs	r2, r2, #5
 800356a:	17db      	asrs	r3, r3, #31
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	e000      	b.n	8003574 <wm8994_SetVolume+0x1a0>
 8003572:	23ef      	movs	r3, #239	@ 0xef
 8003574:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	b2d8      	uxtb	r0, r3
 800357a:	7afb      	ldrb	r3, [r7, #11]
 800357c:	b21b      	sxth	r3, r3
 800357e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003582:	b21b      	sxth	r3, r3
 8003584:	b29b      	uxth	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800358c:	f000 faac 	bl	8003ae8 <CODEC_IO_Write>
 8003590:	4603      	mov	r3, r0
 8003592:	461a      	mov	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	b2d8      	uxtb	r0, r3
 800359e:	7afb      	ldrb	r3, [r7, #11]
 80035a0:	b21b      	sxth	r3, r3
 80035a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a6:	b21b      	sxth	r3, r3
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	f240 4101 	movw	r1, #1025	@ 0x401
 80035b0:	f000 fa9a 	bl	8003ae8 <CODEC_IO_Write>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461a      	mov	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	b2d8      	uxtb	r0, r3
 80035c2:	7afb      	ldrb	r3, [r7, #11]
 80035c4:	b21b      	sxth	r3, r3
 80035c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ca:	b21b      	sxth	r3, r3
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	f240 4104 	movw	r1, #1028	@ 0x404
 80035d4:	f000 fa88 	bl	8003ae8 <CODEC_IO_Write>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4413      	add	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	b2d8      	uxtb	r0, r3
 80035e6:	7afb      	ldrb	r3, [r7, #11]
 80035e8:	b21b      	sxth	r3, r3
 80035ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ee:	b21b      	sxth	r3, r3
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	f240 4105 	movw	r1, #1029	@ 0x405
 80035f8:	f000 fa76 	bl	8003ae8 <CODEC_IO_Write>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8003606:	68fb      	ldr	r3, [r7, #12]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	51eb851f 	.word	0x51eb851f
 8003614:	20008fec 	.word	0x20008fec
 8003618:	20008ff0 	.word	0x20008ff0

0800361c <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	6039      	str	r1, [r7, #0]
 8003626:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 800362c:	4b21      	ldr	r3, [pc, #132]	@ (80036b4 <wm8994_SetMute+0x98>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d039      	beq.n	80036a8 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d11c      	bne.n	8003674 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003642:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fa4e 	bl	8003ae8 <CODEC_IO_Write>
 800364c:	4603      	mov	r3, r0
 800364e:	461a      	mov	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800365e:	f240 4122 	movw	r1, #1058	@ 0x422
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fa40 	bl	8003ae8 <CODEC_IO_Write>
 8003668:	4603      	mov	r3, r0
 800366a:	461a      	mov	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	e019      	b.n	80036a8 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2210      	movs	r2, #16
 800367a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fa32 	bl	8003ae8 <CODEC_IO_Write>
 8003684:	4603      	mov	r3, r0
 8003686:	461a      	mov	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2210      	movs	r2, #16
 8003694:	f240 4122 	movw	r1, #1058	@ 0x422
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fa25 	bl	8003ae8 <CODEC_IO_Write>
 800369e:	4603      	mov	r3, r0
 80036a0:	461a      	mov	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4413      	add	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80036a8:	68fb      	ldr	r3, [r7, #12]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20008fec 	.word	0x20008fec

080036b8 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	460a      	mov	r2, r1
 80036c2:	80fb      	strh	r3, [r7, #6]
 80036c4:	4613      	mov	r3, r2
 80036c6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80036cc:	797b      	ldrb	r3, [r7, #5]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	f000 808c 	beq.w	80037ec <wm8994_SetOutputMode+0x134>
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	f300 80cb 	bgt.w	8003870 <wm8994_SetOutputMode+0x1b8>
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d002      	beq.n	80036e4 <wm8994_SetOutputMode+0x2c>
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d042      	beq.n	8003768 <wm8994_SetOutputMode+0xb0>
 80036e2:	e0c5      	b.n	8003870 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80036e4:	88fb      	ldrh	r3, [r7, #6]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80036ec:	2105      	movs	r1, #5
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f9fa 	bl	8003ae8 <CODEC_IO_Write>
 80036f4:	4603      	mov	r3, r0
 80036f6:	461a      	mov	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2200      	movs	r2, #0
 8003704:	f240 6101 	movw	r1, #1537	@ 0x601
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f9ed 	bl	8003ae8 <CODEC_IO_Write>
 800370e:	4603      	mov	r3, r0
 8003710:	461a      	mov	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4413      	add	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2200      	movs	r2, #0
 800371e:	f240 6102 	movw	r1, #1538	@ 0x602
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f9e0 	bl	8003ae8 <CODEC_IO_Write>
 8003728:	4603      	mov	r3, r0
 800372a:	461a      	mov	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2202      	movs	r2, #2
 8003738:	f240 6104 	movw	r1, #1540	@ 0x604
 800373c:	4618      	mov	r0, r3
 800373e:	f000 f9d3 	bl	8003ae8 <CODEC_IO_Write>
 8003742:	4603      	mov	r3, r0
 8003744:	461a      	mov	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4413      	add	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2202      	movs	r2, #2
 8003752:	f240 6105 	movw	r1, #1541	@ 0x605
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f9c6 	bl	8003ae8 <CODEC_IO_Write>
 800375c:	4603      	mov	r3, r0
 800375e:	461a      	mov	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4413      	add	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
    break;
 8003766:	e0c5      	b.n	80038f4 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f240 3203 	movw	r2, #771	@ 0x303
 8003770:	2105      	movs	r1, #5
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f9b8 	bl	8003ae8 <CODEC_IO_Write>
 8003778:	4603      	mov	r3, r0
 800377a:	461a      	mov	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2201      	movs	r2, #1
 8003788:	f240 6101 	movw	r1, #1537	@ 0x601
 800378c:	4618      	mov	r0, r3
 800378e:	f000 f9ab 	bl	8003ae8 <CODEC_IO_Write>
 8003792:	4603      	mov	r3, r0
 8003794:	461a      	mov	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4413      	add	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2201      	movs	r2, #1
 80037a2:	f240 6102 	movw	r1, #1538	@ 0x602
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f99e 	bl	8003ae8 <CODEC_IO_Write>
 80037ac:	4603      	mov	r3, r0
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2200      	movs	r2, #0
 80037bc:	f240 6104 	movw	r1, #1540	@ 0x604
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 f991 	bl	8003ae8 <CODEC_IO_Write>
 80037c6:	4603      	mov	r3, r0
 80037c8:	461a      	mov	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4413      	add	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80037d0:	88fb      	ldrh	r3, [r7, #6]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2200      	movs	r2, #0
 80037d6:	f240 6105 	movw	r1, #1541	@ 0x605
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f984 	bl	8003ae8 <CODEC_IO_Write>
 80037e0:	4603      	mov	r3, r0
 80037e2:	461a      	mov	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4413      	add	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
    break;
 80037ea:	e083      	b.n	80038f4 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80037f4:	2105      	movs	r1, #5
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f976 	bl	8003ae8 <CODEC_IO_Write>
 80037fc:	4603      	mov	r3, r0
 80037fe:	461a      	mov	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2201      	movs	r2, #1
 800380c:	f240 6101 	movw	r1, #1537	@ 0x601
 8003810:	4618      	mov	r0, r3
 8003812:	f000 f969 	bl	8003ae8 <CODEC_IO_Write>
 8003816:	4603      	mov	r3, r0
 8003818:	461a      	mov	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2201      	movs	r2, #1
 8003826:	f240 6102 	movw	r1, #1538	@ 0x602
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f95c 	bl	8003ae8 <CODEC_IO_Write>
 8003830:	4603      	mov	r3, r0
 8003832:	461a      	mov	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2202      	movs	r2, #2
 8003840:	f240 6104 	movw	r1, #1540	@ 0x604
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f94f 	bl	8003ae8 <CODEC_IO_Write>
 800384a:	4603      	mov	r3, r0
 800384c:	461a      	mov	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2202      	movs	r2, #2
 800385a:	f240 6105 	movw	r1, #1541	@ 0x605
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f942 	bl	8003ae8 <CODEC_IO_Write>
 8003864:	4603      	mov	r3, r0
 8003866:	461a      	mov	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4413      	add	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
    break;
 800386e:	e041      	b.n	80038f4 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f240 3203 	movw	r2, #771	@ 0x303
 8003878:	2105      	movs	r1, #5
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f934 	bl	8003ae8 <CODEC_IO_Write>
 8003880:	4603      	mov	r3, r0
 8003882:	461a      	mov	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4413      	add	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2201      	movs	r2, #1
 8003890:	f240 6101 	movw	r1, #1537	@ 0x601
 8003894:	4618      	mov	r0, r3
 8003896:	f000 f927 	bl	8003ae8 <CODEC_IO_Write>
 800389a:	4603      	mov	r3, r0
 800389c:	461a      	mov	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4413      	add	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2201      	movs	r2, #1
 80038aa:	f240 6102 	movw	r1, #1538	@ 0x602
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 f91a 	bl	8003ae8 <CODEC_IO_Write>
 80038b4:	4603      	mov	r3, r0
 80038b6:	461a      	mov	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4413      	add	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2200      	movs	r2, #0
 80038c4:	f240 6104 	movw	r1, #1540	@ 0x604
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f90d 	bl	8003ae8 <CODEC_IO_Write>
 80038ce:	4603      	mov	r3, r0
 80038d0:	461a      	mov	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4413      	add	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2200      	movs	r2, #0
 80038de:	f240 6105 	movw	r1, #1541	@ 0x605
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f900 	bl	8003ae8 <CODEC_IO_Write>
 80038e8:	4603      	mov	r3, r0
 80038ea:	461a      	mov	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
    break;    
 80038f2:	bf00      	nop
  }  
  return counter;
 80038f4:	68fb      	ldr	r3, [r7, #12]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	6039      	str	r1, [r7, #0]
 800390a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4a64      	ldr	r2, [pc, #400]	@ (8003aa4 <wm8994_SetFrequency+0x1a4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d079      	beq.n	8003a0c <wm8994_SetFrequency+0x10c>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	4a62      	ldr	r2, [pc, #392]	@ (8003aa4 <wm8994_SetFrequency+0x1a4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	f200 80ad 	bhi.w	8003a7c <wm8994_SetFrequency+0x17c>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003928:	4293      	cmp	r3, r2
 800392a:	d061      	beq.n	80039f0 <wm8994_SetFrequency+0xf0>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003932:	4293      	cmp	r3, r2
 8003934:	f200 80a2 	bhi.w	8003a7c <wm8994_SetFrequency+0x17c>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800393e:	4293      	cmp	r3, r2
 8003940:	f000 808e 	beq.w	8003a60 <wm8994_SetFrequency+0x160>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800394a:	4293      	cmp	r3, r2
 800394c:	f200 8096 	bhi.w	8003a7c <wm8994_SetFrequency+0x17c>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003956:	d03d      	beq.n	80039d4 <wm8994_SetFrequency+0xd4>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800395e:	f200 808d 	bhi.w	8003a7c <wm8994_SetFrequency+0x17c>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003968:	4293      	cmp	r3, r2
 800396a:	d06b      	beq.n	8003a44 <wm8994_SetFrequency+0x144>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003972:	4293      	cmp	r3, r2
 8003974:	f200 8082 	bhi.w	8003a7c <wm8994_SetFrequency+0x17c>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800397e:	d01b      	beq.n	80039b8 <wm8994_SetFrequency+0xb8>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003986:	d879      	bhi.n	8003a7c <wm8994_SetFrequency+0x17c>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800398e:	d005      	beq.n	800399c <wm8994_SetFrequency+0x9c>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003996:	4293      	cmp	r3, r2
 8003998:	d046      	beq.n	8003a28 <wm8994_SetFrequency+0x128>
 800399a:	e06f      	b.n	8003a7c <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2203      	movs	r2, #3
 80039a2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 f89e 	bl	8003ae8 <CODEC_IO_Write>
 80039ac:	4603      	mov	r3, r0
 80039ae:	461a      	mov	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
    break;
 80039b6:	e06f      	b.n	8003a98 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2233      	movs	r2, #51	@ 0x33
 80039be:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f890 	bl	8003ae8 <CODEC_IO_Write>
 80039c8:	4603      	mov	r3, r0
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
    break;
 80039d2:	e061      	b.n	8003a98 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2263      	movs	r2, #99	@ 0x63
 80039da:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f882 	bl	8003ae8 <CODEC_IO_Write>
 80039e4:	4603      	mov	r3, r0
 80039e6:	461a      	mov	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
    break;
 80039ee:	e053      	b.n	8003a98 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2283      	movs	r2, #131	@ 0x83
 80039f6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f874 	bl	8003ae8 <CODEC_IO_Write>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
    break;
 8003a0a:	e045      	b.n	8003a98 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	22a3      	movs	r2, #163	@ 0xa3
 8003a12:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f866 	bl	8003ae8 <CODEC_IO_Write>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
    break;
 8003a26:	e037      	b.n	8003a98 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2213      	movs	r2, #19
 8003a2e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f858 	bl	8003ae8 <CODEC_IO_Write>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4413      	add	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
    break;
 8003a42:	e029      	b.n	8003a98 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003a44:	88fb      	ldrh	r3, [r7, #6]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2243      	movs	r2, #67	@ 0x43
 8003a4a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f84a 	bl	8003ae8 <CODEC_IO_Write>
 8003a54:	4603      	mov	r3, r0
 8003a56:	461a      	mov	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
    break;
 8003a5e:	e01b      	b.n	8003a98 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2273      	movs	r2, #115	@ 0x73
 8003a66:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 f83c 	bl	8003ae8 <CODEC_IO_Write>
 8003a70:	4603      	mov	r3, r0
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
    break; 
 8003a7a:	e00d      	b.n	8003a98 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2283      	movs	r2, #131	@ 0x83
 8003a82:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f82e 	bl	8003ae8 <CODEC_IO_Write>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]
    break; 
 8003a96:	bf00      	nop
  }
  return counter;
 8003a98:	68fb      	ldr	r3, [r7, #12]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	00017700 	.word	0x00017700

08003aa8 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2200      	movs	r2, #0
 8003abc:	2100      	movs	r1, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f812 	bl	8003ae8 <CODEC_IO_Write>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003ac8:	4b05      	ldr	r3, [pc, #20]	@ (8003ae0 <wm8994_Reset+0x38>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8003ace:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <wm8994_Reset+0x3c>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

  return counter;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20008fec 	.word	0x20008fec
 8003ae4:	20008ff0 	.word	0x20008ff0

08003ae8 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]
 8003af2:	460b      	mov	r3, r1
 8003af4:	80bb      	strh	r3, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8003afe:	887a      	ldrh	r2, [r7, #2]
 8003b00:	88b9      	ldrh	r1, [r7, #4]
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 f96f 	bl	8003de8 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	b2db      	uxtb	r3, r3
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08c      	sub	sp, #48	@ 0x30
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a51      	ldr	r2, [pc, #324]	@ (8003c68 <I2Cx_MspInit+0x150>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d14d      	bne.n	8003bc4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003b28:	4b50      	ldr	r3, [pc, #320]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2c:	4a4f      	ldr	r2, [pc, #316]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b32:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b34:	4b4d      	ldr	r3, [pc, #308]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003b40:	2380      	movs	r3, #128	@ 0x80
 8003b42:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003b44:	2312      	movs	r3, #18
 8003b46:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003b50:	2304      	movs	r3, #4
 8003b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b54:	f107 031c 	add.w	r3, r7, #28
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4845      	ldr	r0, [pc, #276]	@ (8003c70 <I2Cx_MspInit+0x158>)
 8003b5c:	f001 fc3a 	bl	80053d4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003b60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b66:	f107 031c 	add.w	r3, r7, #28
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4840      	ldr	r0, [pc, #256]	@ (8003c70 <I2Cx_MspInit+0x158>)
 8003b6e:	f001 fc31 	bl	80053d4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003b72:	4b3e      	ldr	r3, [pc, #248]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	4a3d      	ldr	r2, [pc, #244]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003b78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003b8a:	4b38      	ldr	r3, [pc, #224]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	4a37      	ldr	r2, [pc, #220]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003b90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b94:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003b96:	4b35      	ldr	r3, [pc, #212]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4a34      	ldr	r2, [pc, #208]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003b9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003ba0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	210f      	movs	r1, #15
 8003ba6:	2048      	movs	r0, #72	@ 0x48
 8003ba8:	f000 fe77 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003bac:	2048      	movs	r0, #72	@ 0x48
 8003bae:	f000 fe90 	bl	80048d2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	210f      	movs	r1, #15
 8003bb6:	2049      	movs	r0, #73	@ 0x49
 8003bb8:	f000 fe6f 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003bbc:	2049      	movs	r0, #73	@ 0x49
 8003bbe:	f000 fe88 	bl	80048d2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003bc2:	e04d      	b.n	8003c60 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003bc4:	4b29      	ldr	r3, [pc, #164]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc8:	4a28      	ldr	r2, [pc, #160]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003bca:	f043 0302 	orr.w	r3, r3, #2
 8003bce:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bd0:	4b26      	ldr	r3, [pc, #152]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003bdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003be0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003be2:	2312      	movs	r3, #18
 8003be4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003bea:	2302      	movs	r3, #2
 8003bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003bee:	2304      	movs	r3, #4
 8003bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003bf2:	f107 031c 	add.w	r3, r7, #28
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	481e      	ldr	r0, [pc, #120]	@ (8003c74 <I2Cx_MspInit+0x15c>)
 8003bfa:	f001 fbeb 	bl	80053d4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003bfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003c04:	f107 031c 	add.w	r3, r7, #28
 8003c08:	4619      	mov	r1, r3
 8003c0a:	481a      	ldr	r0, [pc, #104]	@ (8003c74 <I2Cx_MspInit+0x15c>)
 8003c0c:	f001 fbe2 	bl	80053d4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003c10:	4b16      	ldr	r3, [pc, #88]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	4a15      	ldr	r2, [pc, #84]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003c16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c1c:	4b13      	ldr	r3, [pc, #76]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003c28:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003c2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c32:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003c34:	4b0d      	ldr	r3, [pc, #52]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4a0c      	ldr	r2, [pc, #48]	@ (8003c6c <I2Cx_MspInit+0x154>)
 8003c3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c3e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003c40:	2200      	movs	r2, #0
 8003c42:	210f      	movs	r1, #15
 8003c44:	201f      	movs	r0, #31
 8003c46:	f000 fe28 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003c4a:	201f      	movs	r0, #31
 8003c4c:	f000 fe41 	bl	80048d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003c50:	2200      	movs	r2, #0
 8003c52:	210f      	movs	r1, #15
 8003c54:	2020      	movs	r0, #32
 8003c56:	f000 fe20 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003c5a:	2020      	movs	r0, #32
 8003c5c:	f000 fe39 	bl	80048d2 <HAL_NVIC_EnableIRQ>
}
 8003c60:	bf00      	nop
 8003c62:	3730      	adds	r7, #48	@ 0x30
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20008ff4 	.word	0x20008ff4
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40021c00 	.word	0x40021c00
 8003c74:	40020400 	.word	0x40020400

08003c78 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f002 f9d1 	bl	8006028 <HAL_I2C_GetState>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d125      	bne.n	8003cd8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a14      	ldr	r2, [pc, #80]	@ (8003ce0 <I2Cx_Init+0x68>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d103      	bne.n	8003c9c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a13      	ldr	r2, [pc, #76]	@ (8003ce4 <I2Cx_Init+0x6c>)
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e002      	b.n	8003ca2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a12      	ldr	r2, [pc, #72]	@ (8003ce8 <I2Cx_Init+0x70>)
 8003ca0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a11      	ldr	r2, [pc, #68]	@ (8003cec <I2Cx_Init+0x74>)
 8003ca6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ff23 	bl	8003b18 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f001 fe9a 	bl	8005a0c <HAL_I2C_Init>
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20008ff4 	.word	0x20008ff4
 8003ce4:	40005c00 	.word	0x40005c00
 8003ce8:	40005400 	.word	0x40005400
 8003cec:	40912732 	.word	0x40912732

08003cf0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	@ 0x28
 8003cf4:	af04      	add	r7, sp, #16
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	4608      	mov	r0, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	72fb      	strb	r3, [r7, #11]
 8003d02:	460b      	mov	r3, r1
 8003d04:	813b      	strh	r3, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003d0e:	7afb      	ldrb	r3, [r7, #11]
 8003d10:	b299      	uxth	r1, r3
 8003d12:	88f8      	ldrh	r0, [r7, #6]
 8003d14:	893a      	ldrh	r2, [r7, #8]
 8003d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d1a:	9302      	str	r3, [sp, #8]
 8003d1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	4603      	mov	r3, r0
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f002 f864 	bl	8005df4 <HAL_I2C_Mem_Read>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003d36:	7afb      	ldrb	r3, [r7, #11]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f832 	bl	8003da4 <I2Cx_Error>
  }
  return status;    
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b08a      	sub	sp, #40	@ 0x28
 8003d4e:	af04      	add	r7, sp, #16
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	4608      	mov	r0, r1
 8003d54:	4611      	mov	r1, r2
 8003d56:	461a      	mov	r2, r3
 8003d58:	4603      	mov	r3, r0
 8003d5a:	72fb      	strb	r3, [r7, #11]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	813b      	strh	r3, [r7, #8]
 8003d60:	4613      	mov	r3, r2
 8003d62:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003d68:	7afb      	ldrb	r3, [r7, #11]
 8003d6a:	b299      	uxth	r1, r3
 8003d6c:	88f8      	ldrh	r0, [r7, #6]
 8003d6e:	893a      	ldrh	r2, [r7, #8]
 8003d70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d74:	9302      	str	r3, [sp, #8]
 8003d76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	4603      	mov	r3, r0
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f001 ff23 	bl	8005bcc <HAL_I2C_Mem_Write>
 8003d86:	4603      	mov	r3, r0
 8003d88:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d004      	beq.n	8003d9a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003d90:	7afb      	ldrb	r3, [r7, #11]
 8003d92:	4619      	mov	r1, r3
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f805 	bl	8003da4 <I2Cx_Error>
  }
  return status;
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f001 fec7 	bl	8005b44 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff ff5e 	bl	8003c78 <I2Cx_Init>
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003dc8:	4802      	ldr	r0, [pc, #8]	@ (8003dd4 <AUDIO_IO_Init+0x10>)
 8003dca:	f7ff ff55 	bl	8003c78 <I2Cx_Init>
}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20008ff4 	.word	0x20008ff4

08003dd8 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
}
 8003ddc:	bf00      	nop
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
	...

08003de8 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
 8003df2:	460b      	mov	r3, r1
 8003df4:	80bb      	strh	r3, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8003dfa:	887b      	ldrh	r3, [r7, #2]
 8003dfc:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003dfe:	89fb      	ldrh	r3, [r7, #14]
 8003e00:	0a1b      	lsrs	r3, r3, #8
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003e06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	b21a      	sxth	r2, r3
 8003e0e:	887b      	ldrh	r3, [r7, #2]
 8003e10:	b21b      	sxth	r3, r3
 8003e12:	4313      	orrs	r3, r2
 8003e14:	b21b      	sxth	r3, r3
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003e1a:	88ba      	ldrh	r2, [r7, #4]
 8003e1c:	79f9      	ldrb	r1, [r7, #7]
 8003e1e:	2302      	movs	r3, #2
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	1cbb      	adds	r3, r7, #2
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	2302      	movs	r3, #2
 8003e28:	4803      	ldr	r0, [pc, #12]	@ (8003e38 <AUDIO_IO_Write+0x50>)
 8003e2a:	f7ff ff8e 	bl	8003d4a <I2Cx_WriteMultiple>
}
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20008ff4 	.word	0x20008ff4

08003e3c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	4603      	mov	r3, r0
 8003e44:	460a      	mov	r2, r1
 8003e46:	71fb      	strb	r3, [r7, #7]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	81bb      	strh	r3, [r7, #12]
 8003e50:	2300      	movs	r3, #0
 8003e52:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003e54:	88ba      	ldrh	r2, [r7, #4]
 8003e56:	79f9      	ldrb	r1, [r7, #7]
 8003e58:	2302      	movs	r3, #2
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	f107 030c 	add.w	r3, r7, #12
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	2302      	movs	r3, #2
 8003e64:	480a      	ldr	r0, [pc, #40]	@ (8003e90 <AUDIO_IO_Read+0x54>)
 8003e66:	f7ff ff43 	bl	8003cf0 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003e6a:	89bb      	ldrh	r3, [r7, #12]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003e70:	89bb      	ldrh	r3, [r7, #12]
 8003e72:	b21b      	sxth	r3, r3
 8003e74:	021b      	lsls	r3, r3, #8
 8003e76:	b21a      	sxth	r2, r3
 8003e78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	b21b      	sxth	r3, r3
 8003e80:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8003e82:	89fb      	ldrh	r3, [r7, #14]
 8003e84:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8003e86:	89bb      	ldrh	r3, [r7, #12]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20008ff4 	.word	0x20008ff4

08003e94 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fbfd 	bl	800469c <HAL_Delay>
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8003eb4:	480e      	ldr	r0, [pc, #56]	@ (8003ef0 <HAL_SAI_ErrorCallback+0x44>)
 8003eb6:	f004 f951 	bl	800815c <HAL_SAI_GetState>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8003ebe:	480d      	ldr	r0, [pc, #52]	@ (8003ef4 <HAL_SAI_ErrorCallback+0x48>)
 8003ec0:	f004 f94c 	bl	800815c <HAL_SAI_GetState>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d002      	beq.n	8003ed4 <HAL_SAI_ErrorCallback+0x28>
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	2b12      	cmp	r3, #18
 8003ed2:	d101      	bne.n	8003ed8 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8003ed4:	f000 f810 	bl	8003ef8 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8003ed8:	7bbb      	ldrb	r3, [r7, #14]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d002      	beq.n	8003ee4 <HAL_SAI_ErrorCallback+0x38>
 8003ede:	7bbb      	ldrb	r3, [r7, #14]
 8003ee0:	2b22      	cmp	r3, #34	@ 0x22
 8003ee2:	d101      	bne.n	8003ee8 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8003ee4:	f000 f9f6 	bl	80042d4 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8003ee8:	bf00      	nop
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	2000904c 	.word	0x2000904c
 8003ef4:	200090d0 	.word	0x200090d0

08003ef8 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08c      	sub	sp, #48	@ 0x30
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8003f12:	4b63      	ldr	r3, [pc, #396]	@ (80040a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	4a62      	ldr	r2, [pc, #392]	@ (80040a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f1e:	4b60      	ldr	r3, [pc, #384]	@ (80040a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8003f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80040a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2e:	4a5c      	ldr	r2, [pc, #368]	@ (80040a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f36:	4b5a      	ldr	r3, [pc, #360]	@ (80040a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8003f42:	4b57      	ldr	r3, [pc, #348]	@ (80040a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	4a56      	ldr	r2, [pc, #344]	@ (80040a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f4e:	4b54      	ldr	r3, [pc, #336]	@ (80040a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8003f5a:	4b51      	ldr	r3, [pc, #324]	@ (80040a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5e:	4a50      	ldr	r2, [pc, #320]	@ (80040a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f66:	4b4e      	ldr	r3, [pc, #312]	@ (80040a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8003f72:	2380      	movs	r3, #128	@ 0x80
 8003f74:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003f76:	2302      	movs	r3, #2
 8003f78:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003f82:	230a      	movs	r3, #10
 8003f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8003f86:	f107 031c 	add.w	r3, r7, #28
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4845      	ldr	r0, [pc, #276]	@ (80040a4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003f8e:	f001 fa21 	bl	80053d4 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8003f92:	2320      	movs	r3, #32
 8003f94:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003f96:	2302      	movs	r3, #2
 8003f98:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8003fa2:	230a      	movs	r3, #10
 8003fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003fa6:	f107 031c 	add.w	r3, r7, #28
 8003faa:	4619      	mov	r1, r3
 8003fac:	483d      	ldr	r0, [pc, #244]	@ (80040a4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003fae:	f001 fa11 	bl	80053d4 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8003fb2:	2340      	movs	r3, #64	@ 0x40
 8003fb4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003fc2:	230a      	movs	r3, #10
 8003fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003fc6:	f107 031c 	add.w	r3, r7, #28
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4835      	ldr	r0, [pc, #212]	@ (80040a4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003fce:	f001 fa01 	bl	80053d4 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8003fd2:	2310      	movs	r3, #16
 8003fd4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003fe2:	230a      	movs	r3, #10
 8003fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8003fe6:	f107 031c 	add.w	r3, r7, #28
 8003fea:	4619      	mov	r1, r3
 8003fec:	482d      	ldr	r0, [pc, #180]	@ (80040a4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003fee:	f001 f9f1 	bl	80053d4 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8003ff2:	4b2b      	ldr	r3, [pc, #172]	@ (80040a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80040a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ff8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ffe:	4b28      	ldr	r3, [pc, #160]	@ (80040a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a26      	ldr	r2, [pc, #152]	@ (80040a8 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d138      	bne.n	8004086 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8004014:	4b25      	ldr	r3, [pc, #148]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004016:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800401a:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800401c:	4b23      	ldr	r3, [pc, #140]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800401e:	2240      	movs	r2, #64	@ 0x40
 8004020:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004022:	4b22      	ldr	r3, [pc, #136]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004024:	2200      	movs	r2, #0
 8004026:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004028:	4b20      	ldr	r3, [pc, #128]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800402a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800402e:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8004030:	4b1e      	ldr	r3, [pc, #120]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004032:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004036:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8004038:	4b1c      	ldr	r3, [pc, #112]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800403a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800403e:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8004040:	4b1a      	ldr	r3, [pc, #104]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004042:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004046:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004048:	4b18      	ldr	r3, [pc, #96]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800404a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800404e:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8004050:	4b16      	ldr	r3, [pc, #88]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004052:	2204      	movs	r2, #4
 8004054:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004056:	4b15      	ldr	r3, [pc, #84]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004058:	2203      	movs	r2, #3
 800405a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800405c:	4b13      	ldr	r3, [pc, #76]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800405e:	2200      	movs	r2, #0
 8004060:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004062:	4b12      	ldr	r3, [pc, #72]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8004068:	4b10      	ldr	r3, [pc, #64]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800406a:	4a11      	ldr	r2, [pc, #68]	@ (80040b0 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 800406c:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a0e      	ldr	r2, [pc, #56]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004072:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004074:	4a0d      	ldr	r2, [pc, #52]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 800407a:	480c      	ldr	r0, [pc, #48]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800407c:	f000 fde4 	bl	8004c48 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8004080:	480a      	ldr	r0, [pc, #40]	@ (80040ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004082:	f000 fd33 	bl	8004aec <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8004086:	2200      	movs	r2, #0
 8004088:	210e      	movs	r1, #14
 800408a:	203c      	movs	r0, #60	@ 0x3c
 800408c:	f000 fc05 	bl	800489a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8004090:	203c      	movs	r0, #60	@ 0x3c
 8004092:	f000 fc1e 	bl	80048d2 <HAL_NVIC_EnableIRQ>
}
 8004096:	bf00      	nop
 8004098:	3730      	adds	r7, #48	@ 0x30
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40022000 	.word	0x40022000
 80040a8:	40015c04 	.word	0x40015c04
 80040ac:	20009154 	.word	0x20009154
 80040b0:	40026470 	.word	0x40026470

080040b4 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b0a6      	sub	sp, #152	@ 0x98
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80040c0:	f107 0314 	add.w	r3, r7, #20
 80040c4:	4618      	mov	r0, r3
 80040c6:	f003 fb49 	bl	800775c <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d009      	beq.n	80040e8 <BSP_AUDIO_OUT_ClockConfig+0x34>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f245 6222 	movw	r2, #22050	@ 0x5622
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <BSP_AUDIO_OUT_ClockConfig+0x34>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d112      	bne.n	800410e <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80040e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80040ec:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80040ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80040f2:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 80040f4:	f240 13ad 	movw	r3, #429	@ 0x1ad
 80040f8:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 80040fa:	2302      	movs	r3, #2
 80040fc:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 80040fe:	2313      	movs	r3, #19
 8004100:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004102:	f107 0314 	add.w	r3, r7, #20
 8004106:	4618      	mov	r0, r3
 8004108:	f002 ff38 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 800410c:	e012      	b.n	8004134 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800410e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004112:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004114:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004118:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800411a:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 800411e:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8004120:	2307      	movs	r3, #7
 8004122:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8004124:	2301      	movs	r3, #1
 8004126:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004128:	f107 0314 	add.w	r3, r7, #20
 800412c:	4618      	mov	r0, r3
 800412e:	f002 ff25 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8004132:	bf00      	nop
 8004134:	bf00      	nop
 8004136:	3798      	adds	r7, #152	@ 0x98
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	68f9      	ldr	r1, [r7, #12]
 800414e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004152:	f000 f805 	bl	8004160 <BSP_AUDIO_IN_InitEx>
 8004156:	4603      	mov	r3, r0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b089      	sub	sp, #36	@ 0x24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	4603      	mov	r3, r0
 800416e:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8004178:	89fb      	ldrh	r3, [r7, #14]
 800417a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800417e:	d006      	beq.n	800418e <BSP_AUDIO_IN_InitEx+0x2e>
 8004180:	89fb      	ldrh	r3, [r7, #14]
 8004182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004186:	d002      	beq.n	800418e <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e046      	b.n	800421c <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 800418e:	f000 fa11 	bl	80045b4 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8004192:	2200      	movs	r2, #0
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	4824      	ldr	r0, [pc, #144]	@ (8004228 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004198:	f7ff ff8c 	bl	80040b4 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800419c:	4b22      	ldr	r3, [pc, #136]	@ (8004228 <BSP_AUDIO_IN_InitEx+0xc8>)
 800419e:	4a23      	ldr	r2, [pc, #140]	@ (800422c <BSP_AUDIO_IN_InitEx+0xcc>)
 80041a0:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80041a2:	4821      	ldr	r0, [pc, #132]	@ (8004228 <BSP_AUDIO_IN_InitEx+0xc8>)
 80041a4:	f003 ffda 	bl	800815c <HAL_SAI_GetState>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d107      	bne.n	80041be <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 80041ae:	2100      	movs	r1, #0
 80041b0:	481d      	ldr	r0, [pc, #116]	@ (8004228 <BSP_AUDIO_IN_InitEx+0xc8>)
 80041b2:	f7ff fea9 	bl	8003f08 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80041b6:	2100      	movs	r1, #0
 80041b8:	481b      	ldr	r0, [pc, #108]	@ (8004228 <BSP_AUDIO_IN_InitEx+0xc8>)
 80041ba:	f000 f893 	bl	80042e4 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 80041be:	89fb      	ldrh	r3, [r7, #14]
 80041c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041c4:	d102      	bne.n	80041cc <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 80041c6:	230a      	movs	r3, #10
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	e001      	b.n	80041d0 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80041cc:	2305      	movs	r3, #5
 80041ce:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	69b9      	ldr	r1, [r7, #24]
 80041d4:	2001      	movs	r0, #1
 80041d6:	f000 f937 	bl	8004448 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80041da:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <BSP_AUDIO_IN_InitEx+0xd0>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2034      	movs	r0, #52	@ 0x34
 80041e0:	4798      	blx	r3
 80041e2:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f648 1294 	movw	r2, #35220	@ 0x8994
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d109      	bne.n	8004202 <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80041ee:	4b10      	ldr	r3, [pc, #64]	@ (8004230 <BSP_AUDIO_IN_InitEx+0xd0>)
 80041f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f2:	2034      	movs	r0, #52	@ 0x34
 80041f4:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 80041f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004234 <BSP_AUDIO_IN_InitEx+0xd4>)
 80041f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004230 <BSP_AUDIO_IN_InitEx+0xd0>)
 80041fa:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e001      	b.n	8004206 <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8004206:	7ffb      	ldrb	r3, [r7, #31]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d107      	bne.n	800421c <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 800420c:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <BSP_AUDIO_IN_InitEx+0xd4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681c      	ldr	r4, [r3, #0]
 8004212:	89f9      	ldrh	r1, [r7, #14]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2264      	movs	r2, #100	@ 0x64
 8004218:	2034      	movs	r0, #52	@ 0x34
 800421a:	47a0      	blx	r4
    }
  }
  return ret;
 800421c:	7ffb      	ldrb	r3, [r7, #31]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3724      	adds	r7, #36	@ 0x24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd90      	pop	{r4, r7, pc}
 8004226:	bf00      	nop
 8004228:	200090d0 	.word	0x200090d0
 800422c:	40015c24 	.word	0x40015c24
 8004230:	20000004 	.word	0x20000004
 8004234:	20009048 	.word	0x20009048

08004238 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	b29b      	uxth	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	4805      	ldr	r0, [pc, #20]	@ (8004264 <BSP_AUDIO_IN_Record+0x2c>)
 8004250:	f003 fef6 	bl	8008040 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	b2db      	uxtb	r3, r3
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	200090d0 	.word	0x200090d0

08004268 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8004270:	480c      	ldr	r0, [pc, #48]	@ (80042a4 <BSP_AUDIO_IN_Stop+0x3c>)
 8004272:	f003 fe72 	bl	8007f5a <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8004276:	4b0c      	ldr	r3, [pc, #48]	@ (80042a8 <BSP_AUDIO_IN_Stop+0x40>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	2034      	movs	r0, #52	@ 0x34
 8004280:	4798      	blx	r3
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e006      	b.n	800429a <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d102      	bne.n	8004298 <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 8004292:	2001      	movs	r0, #1
 8004294:	f000 fa02 	bl	800469c <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8004298:	2300      	movs	r3, #0
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	200090d0 	.word	0x200090d0
 80042a8:	20009048 	.word	0x20009048

080042ac <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80042b4:	f006 fcfc 	bl	800acb0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80042c8:	f006 fd3a 	bl	800ad40 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08c      	sub	sp, #48	@ 0x30
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 80042ee:	4b50      	ldr	r3, [pc, #320]	@ (8004430 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f2:	4a4f      	ldr	r2, [pc, #316]	@ (8004430 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80042fa:	4b4d      	ldr	r3, [pc, #308]	@ (8004430 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8004306:	4b4a      	ldr	r3, [pc, #296]	@ (8004430 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430a:	4a49      	ldr	r2, [pc, #292]	@ (8004430 <BSP_AUDIO_IN_MspInit+0x14c>)
 800430c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004310:	6313      	str	r3, [r2, #48]	@ 0x30
 8004312:	4b47      	ldr	r3, [pc, #284]	@ (8004430 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800431e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004322:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004324:	2302      	movs	r3, #2
 8004326:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004328:	2300      	movs	r3, #0
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800432c:	2302      	movs	r3, #2
 800432e:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8004330:	230a      	movs	r3, #10
 8004332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8004334:	f107 031c 	add.w	r3, r7, #28
 8004338:	4619      	mov	r1, r3
 800433a:	483e      	ldr	r0, [pc, #248]	@ (8004434 <BSP_AUDIO_IN_MspInit+0x150>)
 800433c:	f001 f84a 	bl	80053d4 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8004340:	4b3b      	ldr	r3, [pc, #236]	@ (8004430 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004344:	4a3a      	ldr	r2, [pc, #232]	@ (8004430 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800434a:	6313      	str	r3, [r2, #48]	@ 0x30
 800434c:	4b38      	ldr	r3, [pc, #224]	@ (8004430 <BSP_AUDIO_IN_MspInit+0x14c>)
 800434e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8004358:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800435c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800435e:	2300      	movs	r3, #0
 8004360:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004366:	2302      	movs	r3, #2
 8004368:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800436a:	f107 031c 	add.w	r3, r7, #28
 800436e:	4619      	mov	r1, r3
 8004370:	4831      	ldr	r0, [pc, #196]	@ (8004438 <BSP_AUDIO_IN_MspInit+0x154>)
 8004372:	f001 f82f 	bl	80053d4 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8004376:	4b2e      	ldr	r3, [pc, #184]	@ (8004430 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437a:	4a2d      	ldr	r2, [pc, #180]	@ (8004430 <BSP_AUDIO_IN_MspInit+0x14c>)
 800437c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004380:	6313      	str	r3, [r2, #48]	@ 0x30
 8004382:	4b2b      	ldr	r3, [pc, #172]	@ (8004430 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2a      	ldr	r2, [pc, #168]	@ (800443c <BSP_AUDIO_IN_MspInit+0x158>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d137      	bne.n	8004408 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004398:	4b29      	ldr	r3, [pc, #164]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 800439a:	2200      	movs	r2, #0
 800439c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800439e:	4b28      	ldr	r3, [pc, #160]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80043a4:	4b26      	ldr	r3, [pc, #152]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80043aa:	4b25      	ldr	r3, [pc, #148]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043b0:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 80043b2:	4b23      	ldr	r3, [pc, #140]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043b8:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80043ba:	4b21      	ldr	r3, [pc, #132]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043c0:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 80043c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043c8:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80043ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043d0:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80043d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80043d8:	4b19      	ldr	r3, [pc, #100]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043da:	2203      	movs	r2, #3
 80043dc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80043de:	4b18      	ldr	r3, [pc, #96]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80043e4:	4b16      	ldr	r3, [pc, #88]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80043ea:	4b15      	ldr	r3, [pc, #84]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043ec:	4a15      	ldr	r2, [pc, #84]	@ (8004444 <BSP_AUDIO_IN_MspInit+0x160>)
 80043ee:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a13      	ldr	r2, [pc, #76]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043f4:	671a      	str	r2, [r3, #112]	@ 0x70
 80043f6:	4a12      	ldr	r2, [pc, #72]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 80043fc:	4810      	ldr	r0, [pc, #64]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043fe:	f000 fc23 	bl	8004c48 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8004402:	480f      	ldr	r0, [pc, #60]	@ (8004440 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004404:	f000 fb72 	bl	8004aec <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004408:	2200      	movs	r2, #0
 800440a:	210f      	movs	r1, #15
 800440c:	2046      	movs	r0, #70	@ 0x46
 800440e:	f000 fa44 	bl	800489a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8004412:	2046      	movs	r0, #70	@ 0x46
 8004414:	f000 fa5d 	bl	80048d2 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004418:	2200      	movs	r2, #0
 800441a:	210f      	movs	r1, #15
 800441c:	2028      	movs	r0, #40	@ 0x28
 800441e:	f000 fa3c 	bl	800489a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8004422:	2028      	movs	r0, #40	@ 0x28
 8004424:	f000 fa55 	bl	80048d2 <HAL_NVIC_EnableIRQ>
}
 8004428:	bf00      	nop
 800442a:	3730      	adds	r7, #48	@ 0x30
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40023800 	.word	0x40023800
 8004434:	40021800 	.word	0x40021800
 8004438:	40021c00 	.word	0x40021c00
 800443c:	40015c24 	.word	0x40015c24
 8004440:	200091b4 	.word	0x200091b4
 8004444:	400264b8 	.word	0x400264b8

08004448 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004454:	4b53      	ldr	r3, [pc, #332]	@ (80045a4 <SAIx_In_Init+0x15c>)
 8004456:	4a54      	ldr	r2, [pc, #336]	@ (80045a8 <SAIx_In_Init+0x160>)
 8004458:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800445a:	4b52      	ldr	r3, [pc, #328]	@ (80045a4 <SAIx_In_Init+0x15c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	4b50      	ldr	r3, [pc, #320]	@ (80045a4 <SAIx_In_Init+0x15c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004468:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800446a:	4a4e      	ldr	r2, [pc, #312]	@ (80045a4 <SAIx_In_Init+0x15c>)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8004470:	4a4c      	ldr	r2, [pc, #304]	@ (80045a4 <SAIx_In_Init+0x15c>)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004476:	4b4b      	ldr	r3, [pc, #300]	@ (80045a4 <SAIx_In_Init+0x15c>)
 8004478:	2200      	movs	r2, #0
 800447a:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800447c:	4b49      	ldr	r3, [pc, #292]	@ (80045a4 <SAIx_In_Init+0x15c>)
 800447e:	2200      	movs	r2, #0
 8004480:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8004482:	4b48      	ldr	r3, [pc, #288]	@ (80045a4 <SAIx_In_Init+0x15c>)
 8004484:	2280      	movs	r2, #128	@ 0x80
 8004486:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004488:	4b46      	ldr	r3, [pc, #280]	@ (80045a4 <SAIx_In_Init+0x15c>)
 800448a:	2200      	movs	r2, #0
 800448c:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800448e:	4b45      	ldr	r3, [pc, #276]	@ (80045a4 <SAIx_In_Init+0x15c>)
 8004490:	2201      	movs	r2, #1
 8004492:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8004494:	4b43      	ldr	r3, [pc, #268]	@ (80045a4 <SAIx_In_Init+0x15c>)
 8004496:	2200      	movs	r2, #0
 8004498:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800449a:	4b42      	ldr	r3, [pc, #264]	@ (80045a4 <SAIx_In_Init+0x15c>)
 800449c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044a0:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80044a2:	4b40      	ldr	r3, [pc, #256]	@ (80045a4 <SAIx_In_Init+0x15c>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 80044a8:	4b3e      	ldr	r3, [pc, #248]	@ (80045a4 <SAIx_In_Init+0x15c>)
 80044aa:	2240      	movs	r2, #64	@ 0x40
 80044ac:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80044ae:	4b3d      	ldr	r3, [pc, #244]	@ (80045a4 <SAIx_In_Init+0x15c>)
 80044b0:	2220      	movs	r2, #32
 80044b2:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80044b4:	4b3b      	ldr	r3, [pc, #236]	@ (80045a4 <SAIx_In_Init+0x15c>)
 80044b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80044ba:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80044bc:	4b39      	ldr	r3, [pc, #228]	@ (80045a4 <SAIx_In_Init+0x15c>)
 80044be:	2200      	movs	r2, #0
 80044c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80044c2:	4b38      	ldr	r3, [pc, #224]	@ (80045a4 <SAIx_In_Init+0x15c>)
 80044c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80044c8:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80044ca:	4b36      	ldr	r3, [pc, #216]	@ (80045a4 <SAIx_In_Init+0x15c>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80044d0:	4b34      	ldr	r3, [pc, #208]	@ (80045a4 <SAIx_In_Init+0x15c>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 80044d6:	4b33      	ldr	r3, [pc, #204]	@ (80045a4 <SAIx_In_Init+0x15c>)
 80044d8:	2204      	movs	r2, #4
 80044da:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80044dc:	4a31      	ldr	r2, [pc, #196]	@ (80045a4 <SAIx_In_Init+0x15c>)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 80044e2:	4830      	ldr	r0, [pc, #192]	@ (80045a4 <SAIx_In_Init+0x15c>)
 80044e4:	f003 fb86 	bl	8007bf4 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80044e8:	4b30      	ldr	r3, [pc, #192]	@ (80045ac <SAIx_In_Init+0x164>)
 80044ea:	4a31      	ldr	r2, [pc, #196]	@ (80045b0 <SAIx_In_Init+0x168>)
 80044ec:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80044ee:	4b2f      	ldr	r3, [pc, #188]	@ (80045ac <SAIx_In_Init+0x164>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b2d      	ldr	r3, [pc, #180]	@ (80045ac <SAIx_In_Init+0x164>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80044fc:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80044fe:	4a2b      	ldr	r2, [pc, #172]	@ (80045ac <SAIx_In_Init+0x164>)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8004504:	4b29      	ldr	r3, [pc, #164]	@ (80045ac <SAIx_In_Init+0x164>)
 8004506:	2203      	movs	r2, #3
 8004508:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800450a:	4b28      	ldr	r3, [pc, #160]	@ (80045ac <SAIx_In_Init+0x164>)
 800450c:	2200      	movs	r2, #0
 800450e:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004510:	4b26      	ldr	r3, [pc, #152]	@ (80045ac <SAIx_In_Init+0x164>)
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8004516:	4b25      	ldr	r3, [pc, #148]	@ (80045ac <SAIx_In_Init+0x164>)
 8004518:	2280      	movs	r2, #128	@ 0x80
 800451a:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800451c:	4b23      	ldr	r3, [pc, #140]	@ (80045ac <SAIx_In_Init+0x164>)
 800451e:	2200      	movs	r2, #0
 8004520:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004522:	4b22      	ldr	r3, [pc, #136]	@ (80045ac <SAIx_In_Init+0x164>)
 8004524:	2201      	movs	r2, #1
 8004526:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8004528:	4b20      	ldr	r3, [pc, #128]	@ (80045ac <SAIx_In_Init+0x164>)
 800452a:	2201      	movs	r2, #1
 800452c:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 800452e:	4b1f      	ldr	r3, [pc, #124]	@ (80045ac <SAIx_In_Init+0x164>)
 8004530:	2200      	movs	r2, #0
 8004532:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004534:	4b1d      	ldr	r3, [pc, #116]	@ (80045ac <SAIx_In_Init+0x164>)
 8004536:	2201      	movs	r2, #1
 8004538:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 800453a:	4b1c      	ldr	r3, [pc, #112]	@ (80045ac <SAIx_In_Init+0x164>)
 800453c:	2240      	movs	r2, #64	@ 0x40
 800453e:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8004540:	4b1a      	ldr	r3, [pc, #104]	@ (80045ac <SAIx_In_Init+0x164>)
 8004542:	2220      	movs	r2, #32
 8004544:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004546:	4b19      	ldr	r3, [pc, #100]	@ (80045ac <SAIx_In_Init+0x164>)
 8004548:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800454c:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800454e:	4b17      	ldr	r3, [pc, #92]	@ (80045ac <SAIx_In_Init+0x164>)
 8004550:	2200      	movs	r2, #0
 8004552:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004554:	4b15      	ldr	r3, [pc, #84]	@ (80045ac <SAIx_In_Init+0x164>)
 8004556:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800455a:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 800455c:	4b13      	ldr	r3, [pc, #76]	@ (80045ac <SAIx_In_Init+0x164>)
 800455e:	2200      	movs	r2, #0
 8004560:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004562:	4b12      	ldr	r3, [pc, #72]	@ (80045ac <SAIx_In_Init+0x164>)
 8004564:	2200      	movs	r2, #0
 8004566:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8004568:	4b10      	ldr	r3, [pc, #64]	@ (80045ac <SAIx_In_Init+0x164>)
 800456a:	2204      	movs	r2, #4
 800456c:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 800456e:	4a0f      	ldr	r2, [pc, #60]	@ (80045ac <SAIx_In_Init+0x164>)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8004574:	480d      	ldr	r0, [pc, #52]	@ (80045ac <SAIx_In_Init+0x164>)
 8004576:	f003 fb3d 	bl	8007bf4 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800457a:	4b0a      	ldr	r3, [pc, #40]	@ (80045a4 <SAIx_In_Init+0x15c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	4b08      	ldr	r3, [pc, #32]	@ (80045a4 <SAIx_In_Init+0x15c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004588:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 800458a:	4b08      	ldr	r3, [pc, #32]	@ (80045ac <SAIx_In_Init+0x164>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b06      	ldr	r3, [pc, #24]	@ (80045ac <SAIx_In_Init+0x164>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004598:	601a      	str	r2, [r3, #0]
}
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	2000904c 	.word	0x2000904c
 80045a8:	40015c04 	.word	0x40015c04
 80045ac:	200090d0 	.word	0x200090d0
 80045b0:	40015c24 	.word	0x40015c24

080045b4 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80045b8:	4b07      	ldr	r3, [pc, #28]	@ (80045d8 <SAIx_In_DeInit+0x24>)
 80045ba:	4a08      	ldr	r2, [pc, #32]	@ (80045dc <SAIx_In_DeInit+0x28>)
 80045bc:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80045be:	4b06      	ldr	r3, [pc, #24]	@ (80045d8 <SAIx_In_DeInit+0x24>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4b04      	ldr	r3, [pc, #16]	@ (80045d8 <SAIx_In_DeInit+0x24>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80045cc:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 80045ce:	4802      	ldr	r0, [pc, #8]	@ (80045d8 <SAIx_In_DeInit+0x24>)
 80045d0:	f003 fc8e 	bl	8007ef0 <HAL_SAI_DeInit>
}
 80045d4:	bf00      	nop
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	200090d0 	.word	0x200090d0
 80045dc:	40015c24 	.word	0x40015c24

080045e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045e4:	2003      	movs	r0, #3
 80045e6:	f000 f94d 	bl	8004884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045ea:	2000      	movs	r0, #0
 80045ec:	f000 f806 	bl	80045fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045f0:	f7fd fd1c 	bl	800202c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004604:	4b12      	ldr	r3, [pc, #72]	@ (8004650 <HAL_InitTick+0x54>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	4b12      	ldr	r3, [pc, #72]	@ (8004654 <HAL_InitTick+0x58>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	4619      	mov	r1, r3
 800460e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004612:	fbb3 f3f1 	udiv	r3, r3, r1
 8004616:	fbb2 f3f3 	udiv	r3, r2, r3
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f967 	bl	80048ee <HAL_SYSTICK_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e00e      	b.n	8004648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b0f      	cmp	r3, #15
 800462e:	d80a      	bhi.n	8004646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004630:	2200      	movs	r2, #0
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	f04f 30ff 	mov.w	r0, #4294967295
 8004638:	f000 f92f 	bl	800489a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800463c:	4a06      	ldr	r2, [pc, #24]	@ (8004658 <HAL_InitTick+0x5c>)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	e000      	b.n	8004648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20000000 	.word	0x20000000
 8004654:	2000003c 	.word	0x2000003c
 8004658:	20000038 	.word	0x20000038

0800465c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004660:	4b06      	ldr	r3, [pc, #24]	@ (800467c <HAL_IncTick+0x20>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	4b06      	ldr	r3, [pc, #24]	@ (8004680 <HAL_IncTick+0x24>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4413      	add	r3, r2
 800466c:	4a04      	ldr	r2, [pc, #16]	@ (8004680 <HAL_IncTick+0x24>)
 800466e:	6013      	str	r3, [r2, #0]
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	2000003c 	.word	0x2000003c
 8004680:	20009214 	.word	0x20009214

08004684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return uwTick;
 8004688:	4b03      	ldr	r3, [pc, #12]	@ (8004698 <HAL_GetTick+0x14>)
 800468a:	681b      	ldr	r3, [r3, #0]
}
 800468c:	4618      	mov	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20009214 	.word	0x20009214

0800469c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046a4:	f7ff ffee 	bl	8004684 <HAL_GetTick>
 80046a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d005      	beq.n	80046c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046b6:	4b0a      	ldr	r3, [pc, #40]	@ (80046e0 <HAL_Delay+0x44>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80046c2:	bf00      	nop
 80046c4:	f7ff ffde 	bl	8004684 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d8f7      	bhi.n	80046c4 <HAL_Delay+0x28>
  {
  }
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	2000003c 	.word	0x2000003c

080046e4 <__NVIC_SetPriorityGrouping>:
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <__NVIC_SetPriorityGrouping+0x40>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004700:	4013      	ands	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800470c:	4b06      	ldr	r3, [pc, #24]	@ (8004728 <__NVIC_SetPriorityGrouping+0x44>)
 800470e:	4313      	orrs	r3, r2
 8004710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004712:	4a04      	ldr	r2, [pc, #16]	@ (8004724 <__NVIC_SetPriorityGrouping+0x40>)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	60d3      	str	r3, [r2, #12]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	e000ed00 	.word	0xe000ed00
 8004728:	05fa0000 	.word	0x05fa0000

0800472c <__NVIC_GetPriorityGrouping>:
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004730:	4b04      	ldr	r3, [pc, #16]	@ (8004744 <__NVIC_GetPriorityGrouping+0x18>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	0a1b      	lsrs	r3, r3, #8
 8004736:	f003 0307 	and.w	r3, r3, #7
}
 800473a:	4618      	mov	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	e000ed00 	.word	0xe000ed00

08004748 <__NVIC_EnableIRQ>:
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004756:	2b00      	cmp	r3, #0
 8004758:	db0b      	blt.n	8004772 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	f003 021f 	and.w	r2, r3, #31
 8004760:	4907      	ldr	r1, [pc, #28]	@ (8004780 <__NVIC_EnableIRQ+0x38>)
 8004762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2001      	movs	r0, #1
 800476a:	fa00 f202 	lsl.w	r2, r0, r2
 800476e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	e000e100 	.word	0xe000e100

08004784 <__NVIC_SetPriority>:
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	6039      	str	r1, [r7, #0]
 800478e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004794:	2b00      	cmp	r3, #0
 8004796:	db0a      	blt.n	80047ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	b2da      	uxtb	r2, r3
 800479c:	490c      	ldr	r1, [pc, #48]	@ (80047d0 <__NVIC_SetPriority+0x4c>)
 800479e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a2:	0112      	lsls	r2, r2, #4
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	440b      	add	r3, r1
 80047a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80047ac:	e00a      	b.n	80047c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	4908      	ldr	r1, [pc, #32]	@ (80047d4 <__NVIC_SetPriority+0x50>)
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	3b04      	subs	r3, #4
 80047bc:	0112      	lsls	r2, r2, #4
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	440b      	add	r3, r1
 80047c2:	761a      	strb	r2, [r3, #24]
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	e000e100 	.word	0xe000e100
 80047d4:	e000ed00 	.word	0xe000ed00

080047d8 <NVIC_EncodePriority>:
{
 80047d8:	b480      	push	{r7}
 80047da:	b089      	sub	sp, #36	@ 0x24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f1c3 0307 	rsb	r3, r3, #7
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	bf28      	it	cs
 80047f6:	2304      	movcs	r3, #4
 80047f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	3304      	adds	r3, #4
 80047fe:	2b06      	cmp	r3, #6
 8004800:	d902      	bls.n	8004808 <NVIC_EncodePriority+0x30>
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3b03      	subs	r3, #3
 8004806:	e000      	b.n	800480a <NVIC_EncodePriority+0x32>
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800480c:	f04f 32ff 	mov.w	r2, #4294967295
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43da      	mvns	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	401a      	ands	r2, r3
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004820:	f04f 31ff 	mov.w	r1, #4294967295
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	fa01 f303 	lsl.w	r3, r1, r3
 800482a:	43d9      	mvns	r1, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004830:	4313      	orrs	r3, r2
}
 8004832:	4618      	mov	r0, r3
 8004834:	3724      	adds	r7, #36	@ 0x24
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3b01      	subs	r3, #1
 800484c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004850:	d301      	bcc.n	8004856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004852:	2301      	movs	r3, #1
 8004854:	e00f      	b.n	8004876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004856:	4a0a      	ldr	r2, [pc, #40]	@ (8004880 <SysTick_Config+0x40>)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3b01      	subs	r3, #1
 800485c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800485e:	210f      	movs	r1, #15
 8004860:	f04f 30ff 	mov.w	r0, #4294967295
 8004864:	f7ff ff8e 	bl	8004784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004868:	4b05      	ldr	r3, [pc, #20]	@ (8004880 <SysTick_Config+0x40>)
 800486a:	2200      	movs	r2, #0
 800486c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800486e:	4b04      	ldr	r3, [pc, #16]	@ (8004880 <SysTick_Config+0x40>)
 8004870:	2207      	movs	r2, #7
 8004872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	e000e010 	.word	0xe000e010

08004884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff ff29 	bl	80046e4 <__NVIC_SetPriorityGrouping>
}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800489a:	b580      	push	{r7, lr}
 800489c:	b086      	sub	sp, #24
 800489e:	af00      	add	r7, sp, #0
 80048a0:	4603      	mov	r3, r0
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
 80048a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048ac:	f7ff ff3e 	bl	800472c <__NVIC_GetPriorityGrouping>
 80048b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	6978      	ldr	r0, [r7, #20]
 80048b8:	f7ff ff8e 	bl	80047d8 <NVIC_EncodePriority>
 80048bc:	4602      	mov	r2, r0
 80048be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048c2:	4611      	mov	r1, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff ff5d 	bl	8004784 <__NVIC_SetPriority>
}
 80048ca:	bf00      	nop
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	4603      	mov	r3, r0
 80048da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff ff31 	bl	8004748 <__NVIC_EnableIRQ>
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff ffa2 	bl	8004840 <SysTick_Config>
 80048fc:	4603      	mov	r3, r0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e054      	b.n	80049c4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	7f5b      	ldrb	r3, [r3, #29]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d105      	bne.n	8004930 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fc faf6 	bl	8000f1c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	791b      	ldrb	r3, [r3, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10c      	bne.n	8004958 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a22      	ldr	r2, [pc, #136]	@ (80049cc <HAL_CRC_Init+0xc4>)
 8004944:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0218 	bic.w	r2, r2, #24
 8004954:	609a      	str	r2, [r3, #8]
 8004956:	e00c      	b.n	8004972 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6899      	ldr	r1, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	461a      	mov	r2, r3
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f834 	bl	80049d0 <HAL_CRCEx_Polynomial_Set>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e028      	b.n	80049c4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	795b      	ldrb	r3, [r3, #5]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d105      	bne.n	8004986 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f04f 32ff 	mov.w	r2, #4294967295
 8004982:	611a      	str	r2, [r3, #16]
 8004984:	e004      	b.n	8004990 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6912      	ldr	r2, [r2, #16]
 800498e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695a      	ldr	r2, [r3, #20]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	04c11db7 	.word	0x04c11db7

080049d0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80049e0:	231f      	movs	r3, #31
 80049e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d102      	bne.n	80049f4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	75fb      	strb	r3, [r7, #23]
 80049f2:	e063      	b.n	8004abc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80049f4:	bf00      	nop
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1e5a      	subs	r2, r3, #1
 80049fa:	613a      	str	r2, [r7, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d009      	beq.n	8004a14 <HAL_CRCEx_Polynomial_Set+0x44>
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b18      	cmp	r3, #24
 8004a18:	d846      	bhi.n	8004aa8 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a20 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a20:	08004aaf 	.word	0x08004aaf
 8004a24:	08004aa9 	.word	0x08004aa9
 8004a28:	08004aa9 	.word	0x08004aa9
 8004a2c:	08004aa9 	.word	0x08004aa9
 8004a30:	08004aa9 	.word	0x08004aa9
 8004a34:	08004aa9 	.word	0x08004aa9
 8004a38:	08004aa9 	.word	0x08004aa9
 8004a3c:	08004aa9 	.word	0x08004aa9
 8004a40:	08004a9d 	.word	0x08004a9d
 8004a44:	08004aa9 	.word	0x08004aa9
 8004a48:	08004aa9 	.word	0x08004aa9
 8004a4c:	08004aa9 	.word	0x08004aa9
 8004a50:	08004aa9 	.word	0x08004aa9
 8004a54:	08004aa9 	.word	0x08004aa9
 8004a58:	08004aa9 	.word	0x08004aa9
 8004a5c:	08004aa9 	.word	0x08004aa9
 8004a60:	08004a91 	.word	0x08004a91
 8004a64:	08004aa9 	.word	0x08004aa9
 8004a68:	08004aa9 	.word	0x08004aa9
 8004a6c:	08004aa9 	.word	0x08004aa9
 8004a70:	08004aa9 	.word	0x08004aa9
 8004a74:	08004aa9 	.word	0x08004aa9
 8004a78:	08004aa9 	.word	0x08004aa9
 8004a7c:	08004aa9 	.word	0x08004aa9
 8004a80:	08004a85 	.word	0x08004a85
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b06      	cmp	r3, #6
 8004a88:	d913      	bls.n	8004ab2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004a8e:	e010      	b.n	8004ab2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	2b07      	cmp	r3, #7
 8004a94:	d90f      	bls.n	8004ab6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004a9a:	e00c      	b.n	8004ab6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b0f      	cmp	r3, #15
 8004aa0:	d90b      	bls.n	8004aba <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004aa6:	e008      	b.n	8004aba <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	75fb      	strb	r3, [r7, #23]
        break;
 8004aac:	e006      	b.n	8004abc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004aae:	bf00      	nop
 8004ab0:	e004      	b.n	8004abc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004ab2:	bf00      	nop
 8004ab4:	e002      	b.n	8004abc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004ab6:	bf00      	nop
 8004ab8:	e000      	b.n	8004abc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004aba:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10d      	bne.n	8004ade <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f023 0118 	bic.w	r1, r3, #24
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004af8:	f7ff fdc4 	bl	8004684 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e099      	b.n	8004c3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0201 	bic.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b28:	e00f      	b.n	8004b4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b2a:	f7ff fdab 	bl	8004684 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b05      	cmp	r3, #5
 8004b36:	d908      	bls.n	8004b4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2203      	movs	r2, #3
 8004b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e078      	b.n	8004c3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e8      	bne.n	8004b2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4b38      	ldr	r3, [pc, #224]	@ (8004c44 <HAL_DMA_Init+0x158>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d107      	bne.n	8004bb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bac:	4313      	orrs	r3, r2
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f023 0307 	bic.w	r3, r3, #7
 8004bca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d117      	bne.n	8004c0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00e      	beq.n	8004c0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fb73 	bl	80052dc <DMA_CheckFifoParam>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d008      	beq.n	8004c0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2240      	movs	r2, #64	@ 0x40
 8004c00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e016      	b.n	8004c3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fb2a 	bl	8005270 <DMA_CalcBaseAndBitshift>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c24:	223f      	movs	r2, #63	@ 0x3f
 8004c26:	409a      	lsls	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	f010803f 	.word	0xf010803f

08004c48 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e050      	b.n	8004cfc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d101      	bne.n	8004c6a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004c66:	2302      	movs	r3, #2
 8004c68:	e048      	b.n	8004cfc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0201 	bic.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2200      	movs	r2, #0
 8004c88:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2200      	movs	r2, #0
 8004c98:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2221      	movs	r2, #33	@ 0x21
 8004ca8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fae0 	bl	8005270 <DMA_CalcBaseAndBitshift>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb8:	223f      	movs	r2, #63	@ 0x3f
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_DMA_Start_IT+0x26>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e048      	b.n	8004dbc <HAL_DMA_Start_IT+0xb8>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d137      	bne.n	8004dae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fa5e 	bl	8005214 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5c:	223f      	movs	r2, #63	@ 0x3f
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0216 	orr.w	r2, r2, #22
 8004d72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d82:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0208 	orr.w	r2, r2, #8
 8004d9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	e005      	b.n	8004dba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004db6:	2302      	movs	r3, #2
 8004db8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004dd2:	f7ff fc57 	bl	8004684 <HAL_GetTick>
 8004dd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d008      	beq.n	8004df6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2280      	movs	r2, #128	@ 0x80
 8004de8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e052      	b.n	8004e9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0216 	bic.w	r2, r2, #22
 8004e04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d103      	bne.n	8004e26 <HAL_DMA_Abort+0x62>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d007      	beq.n	8004e36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0208 	bic.w	r2, r2, #8
 8004e34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0201 	bic.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e46:	e013      	b.n	8004e70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e48:	f7ff fc1c 	bl	8004684 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b05      	cmp	r3, #5
 8004e54:	d90c      	bls.n	8004e70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2203      	movs	r2, #3
 8004e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e015      	b.n	8004e9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e4      	bne.n	8004e48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e82:	223f      	movs	r2, #63	@ 0x3f
 8004e84:	409a      	lsls	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d004      	beq.n	8004ec2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2280      	movs	r2, #128	@ 0x80
 8004ebc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e00c      	b.n	8004edc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2205      	movs	r2, #5
 8004ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0201 	bic.w	r2, r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004ef4:	4b8e      	ldr	r3, [pc, #568]	@ (8005130 <HAL_DMA_IRQHandler+0x248>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a8e      	ldr	r2, [pc, #568]	@ (8005134 <HAL_DMA_IRQHandler+0x24c>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	0a9b      	lsrs	r3, r3, #10
 8004f00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f12:	2208      	movs	r2, #8
 8004f14:	409a      	lsls	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01a      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d013      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0204 	bic.w	r2, r2, #4
 8004f3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f40:	2208      	movs	r2, #8
 8004f42:	409a      	lsls	r2, r3
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4c:	f043 0201 	orr.w	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f58:	2201      	movs	r2, #1
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d012      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00b      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f76:	2201      	movs	r2, #1
 8004f78:	409a      	lsls	r2, r3
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f82:	f043 0202 	orr.w	r2, r3, #2
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f8e:	2204      	movs	r2, #4
 8004f90:	409a      	lsls	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4013      	ands	r3, r2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d012      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00b      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fac:	2204      	movs	r2, #4
 8004fae:	409a      	lsls	r2, r3
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb8:	f043 0204 	orr.w	r2, r3, #4
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	409a      	lsls	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d043      	beq.n	8005058 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d03c      	beq.n	8005058 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe2:	2210      	movs	r2, #16
 8004fe4:	409a      	lsls	r2, r3
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d018      	beq.n	800502a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d108      	bne.n	8005018 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d024      	beq.n	8005058 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	4798      	blx	r3
 8005016:	e01f      	b.n	8005058 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01b      	beq.n	8005058 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4798      	blx	r3
 8005028:	e016      	b.n	8005058 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005034:	2b00      	cmp	r3, #0
 8005036:	d107      	bne.n	8005048 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0208 	bic.w	r2, r2, #8
 8005046:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800505c:	2220      	movs	r2, #32
 800505e:	409a      	lsls	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4013      	ands	r3, r2
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 808f 	beq.w	8005188 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8087 	beq.w	8005188 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507e:	2220      	movs	r2, #32
 8005080:	409a      	lsls	r2, r3
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b05      	cmp	r3, #5
 8005090:	d136      	bne.n	8005100 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0216 	bic.w	r2, r2, #22
 80050a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <HAL_DMA_IRQHandler+0x1da>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d007      	beq.n	80050d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0208 	bic.w	r2, r2, #8
 80050d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d6:	223f      	movs	r2, #63	@ 0x3f
 80050d8:	409a      	lsls	r2, r3
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d07e      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	4798      	blx	r3
        }
        return;
 80050fe:	e079      	b.n	80051f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d01d      	beq.n	800514a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10d      	bne.n	8005138 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005120:	2b00      	cmp	r3, #0
 8005122:	d031      	beq.n	8005188 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	4798      	blx	r3
 800512c:	e02c      	b.n	8005188 <HAL_DMA_IRQHandler+0x2a0>
 800512e:	bf00      	nop
 8005130:	20000000 	.word	0x20000000
 8005134:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800513c:	2b00      	cmp	r3, #0
 800513e:	d023      	beq.n	8005188 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	4798      	blx	r3
 8005148:	e01e      	b.n	8005188 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10f      	bne.n	8005178 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0210 	bic.w	r2, r2, #16
 8005166:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518c:	2b00      	cmp	r3, #0
 800518e:	d032      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d022      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2205      	movs	r2, #5
 80051a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0201 	bic.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	3301      	adds	r3, #1
 80051b8:	60bb      	str	r3, [r7, #8]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d307      	bcc.n	80051d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f2      	bne.n	80051b4 <HAL_DMA_IRQHandler+0x2cc>
 80051ce:	e000      	b.n	80051d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80051d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d005      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
 80051f2:	e000      	b.n	80051f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80051f4:	bf00      	nop
    }
  }
}
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005208:	4618      	mov	r0, r3
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005230:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2b40      	cmp	r3, #64	@ 0x40
 8005240:	d108      	bne.n	8005254 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005252:	e007      	b.n	8005264 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	60da      	str	r2, [r3, #12]
}
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	3b10      	subs	r3, #16
 8005280:	4a13      	ldr	r2, [pc, #76]	@ (80052d0 <DMA_CalcBaseAndBitshift+0x60>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	091b      	lsrs	r3, r3, #4
 8005288:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800528a:	4a12      	ldr	r2, [pc, #72]	@ (80052d4 <DMA_CalcBaseAndBitshift+0x64>)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b03      	cmp	r3, #3
 800529c:	d908      	bls.n	80052b0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	4b0c      	ldr	r3, [pc, #48]	@ (80052d8 <DMA_CalcBaseAndBitshift+0x68>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	1d1a      	adds	r2, r3, #4
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80052ae:	e006      	b.n	80052be <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	4b08      	ldr	r3, [pc, #32]	@ (80052d8 <DMA_CalcBaseAndBitshift+0x68>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	aaaaaaab 	.word	0xaaaaaaab
 80052d4:	080158d4 	.word	0x080158d4
 80052d8:	fffffc00 	.word	0xfffffc00

080052dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d11f      	bne.n	8005336 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d856      	bhi.n	80053aa <DMA_CheckFifoParam+0xce>
 80052fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <DMA_CheckFifoParam+0x28>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	08005315 	.word	0x08005315
 8005308:	08005327 	.word	0x08005327
 800530c:	08005315 	.word	0x08005315
 8005310:	080053ab 	.word	0x080053ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d046      	beq.n	80053ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005324:	e043      	b.n	80053ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800532e:	d140      	bne.n	80053b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005334:	e03d      	b.n	80053b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800533e:	d121      	bne.n	8005384 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b03      	cmp	r3, #3
 8005344:	d837      	bhi.n	80053b6 <DMA_CheckFifoParam+0xda>
 8005346:	a201      	add	r2, pc, #4	@ (adr r2, 800534c <DMA_CheckFifoParam+0x70>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	0800535d 	.word	0x0800535d
 8005350:	08005363 	.word	0x08005363
 8005354:	0800535d 	.word	0x0800535d
 8005358:	08005375 	.word	0x08005375
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	73fb      	strb	r3, [r7, #15]
      break;
 8005360:	e030      	b.n	80053c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d025      	beq.n	80053ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005372:	e022      	b.n	80053ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800537c:	d11f      	bne.n	80053be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005382:	e01c      	b.n	80053be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d903      	bls.n	8005392 <DMA_CheckFifoParam+0xb6>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d003      	beq.n	8005398 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005390:	e018      	b.n	80053c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	73fb      	strb	r3, [r7, #15]
      break;
 8005396:	e015      	b.n	80053c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00e      	beq.n	80053c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]
      break;
 80053a8:	e00b      	b.n	80053c2 <DMA_CheckFifoParam+0xe6>
      break;
 80053aa:	bf00      	nop
 80053ac:	e00a      	b.n	80053c4 <DMA_CheckFifoParam+0xe8>
      break;
 80053ae:	bf00      	nop
 80053b0:	e008      	b.n	80053c4 <DMA_CheckFifoParam+0xe8>
      break;
 80053b2:	bf00      	nop
 80053b4:	e006      	b.n	80053c4 <DMA_CheckFifoParam+0xe8>
      break;
 80053b6:	bf00      	nop
 80053b8:	e004      	b.n	80053c4 <DMA_CheckFifoParam+0xe8>
      break;
 80053ba:	bf00      	nop
 80053bc:	e002      	b.n	80053c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80053be:	bf00      	nop
 80053c0:	e000      	b.n	80053c4 <DMA_CheckFifoParam+0xe8>
      break;
 80053c2:	bf00      	nop
    }
  } 
  
  return status; 
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop

080053d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b089      	sub	sp, #36	@ 0x24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	e175      	b.n	80056e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80053f4:	2201      	movs	r2, #1
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4013      	ands	r3, r2
 8005406:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	429a      	cmp	r2, r3
 800540e:	f040 8164 	bne.w	80056da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b01      	cmp	r3, #1
 800541c:	d005      	beq.n	800542a <HAL_GPIO_Init+0x56>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d130      	bne.n	800548c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	2203      	movs	r2, #3
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4013      	ands	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	4313      	orrs	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005460:	2201      	movs	r2, #1
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	fa02 f303 	lsl.w	r3, r2, r3
 8005468:	43db      	mvns	r3, r3
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	4013      	ands	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	091b      	lsrs	r3, r3, #4
 8005476:	f003 0201 	and.w	r2, r3, #1
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	4313      	orrs	r3, r2
 8005484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	2b03      	cmp	r3, #3
 8005496:	d017      	beq.n	80054c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	2203      	movs	r2, #3
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	43db      	mvns	r3, r3
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	4013      	ands	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4313      	orrs	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d123      	bne.n	800551c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	08da      	lsrs	r2, r3, #3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3208      	adds	r2, #8
 80054dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	220f      	movs	r2, #15
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	4013      	ands	r3, r2
 80054f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	08da      	lsrs	r2, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3208      	adds	r2, #8
 8005516:	69b9      	ldr	r1, [r7, #24]
 8005518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	2203      	movs	r2, #3
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	43db      	mvns	r3, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4013      	ands	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f003 0203 	and.w	r2, r3, #3
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4313      	orrs	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80be 	beq.w	80056da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800555e:	4b66      	ldr	r3, [pc, #408]	@ (80056f8 <HAL_GPIO_Init+0x324>)
 8005560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005562:	4a65      	ldr	r2, [pc, #404]	@ (80056f8 <HAL_GPIO_Init+0x324>)
 8005564:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005568:	6453      	str	r3, [r2, #68]	@ 0x44
 800556a:	4b63      	ldr	r3, [pc, #396]	@ (80056f8 <HAL_GPIO_Init+0x324>)
 800556c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005576:	4a61      	ldr	r2, [pc, #388]	@ (80056fc <HAL_GPIO_Init+0x328>)
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	089b      	lsrs	r3, r3, #2
 800557c:	3302      	adds	r3, #2
 800557e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005582:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	220f      	movs	r2, #15
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	43db      	mvns	r3, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4013      	ands	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a58      	ldr	r2, [pc, #352]	@ (8005700 <HAL_GPIO_Init+0x32c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d037      	beq.n	8005612 <HAL_GPIO_Init+0x23e>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a57      	ldr	r2, [pc, #348]	@ (8005704 <HAL_GPIO_Init+0x330>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d031      	beq.n	800560e <HAL_GPIO_Init+0x23a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a56      	ldr	r2, [pc, #344]	@ (8005708 <HAL_GPIO_Init+0x334>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d02b      	beq.n	800560a <HAL_GPIO_Init+0x236>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a55      	ldr	r2, [pc, #340]	@ (800570c <HAL_GPIO_Init+0x338>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d025      	beq.n	8005606 <HAL_GPIO_Init+0x232>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a54      	ldr	r2, [pc, #336]	@ (8005710 <HAL_GPIO_Init+0x33c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d01f      	beq.n	8005602 <HAL_GPIO_Init+0x22e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a53      	ldr	r2, [pc, #332]	@ (8005714 <HAL_GPIO_Init+0x340>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d019      	beq.n	80055fe <HAL_GPIO_Init+0x22a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a52      	ldr	r2, [pc, #328]	@ (8005718 <HAL_GPIO_Init+0x344>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d013      	beq.n	80055fa <HAL_GPIO_Init+0x226>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a51      	ldr	r2, [pc, #324]	@ (800571c <HAL_GPIO_Init+0x348>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00d      	beq.n	80055f6 <HAL_GPIO_Init+0x222>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a50      	ldr	r2, [pc, #320]	@ (8005720 <HAL_GPIO_Init+0x34c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d007      	beq.n	80055f2 <HAL_GPIO_Init+0x21e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a4f      	ldr	r2, [pc, #316]	@ (8005724 <HAL_GPIO_Init+0x350>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d101      	bne.n	80055ee <HAL_GPIO_Init+0x21a>
 80055ea:	2309      	movs	r3, #9
 80055ec:	e012      	b.n	8005614 <HAL_GPIO_Init+0x240>
 80055ee:	230a      	movs	r3, #10
 80055f0:	e010      	b.n	8005614 <HAL_GPIO_Init+0x240>
 80055f2:	2308      	movs	r3, #8
 80055f4:	e00e      	b.n	8005614 <HAL_GPIO_Init+0x240>
 80055f6:	2307      	movs	r3, #7
 80055f8:	e00c      	b.n	8005614 <HAL_GPIO_Init+0x240>
 80055fa:	2306      	movs	r3, #6
 80055fc:	e00a      	b.n	8005614 <HAL_GPIO_Init+0x240>
 80055fe:	2305      	movs	r3, #5
 8005600:	e008      	b.n	8005614 <HAL_GPIO_Init+0x240>
 8005602:	2304      	movs	r3, #4
 8005604:	e006      	b.n	8005614 <HAL_GPIO_Init+0x240>
 8005606:	2303      	movs	r3, #3
 8005608:	e004      	b.n	8005614 <HAL_GPIO_Init+0x240>
 800560a:	2302      	movs	r3, #2
 800560c:	e002      	b.n	8005614 <HAL_GPIO_Init+0x240>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <HAL_GPIO_Init+0x240>
 8005612:	2300      	movs	r3, #0
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	f002 0203 	and.w	r2, r2, #3
 800561a:	0092      	lsls	r2, r2, #2
 800561c:	4093      	lsls	r3, r2
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	4313      	orrs	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005624:	4935      	ldr	r1, [pc, #212]	@ (80056fc <HAL_GPIO_Init+0x328>)
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	089b      	lsrs	r3, r3, #2
 800562a:	3302      	adds	r3, #2
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005632:	4b3d      	ldr	r3, [pc, #244]	@ (8005728 <HAL_GPIO_Init+0x354>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	43db      	mvns	r3, r3
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	4013      	ands	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005656:	4a34      	ldr	r2, [pc, #208]	@ (8005728 <HAL_GPIO_Init+0x354>)
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800565c:	4b32      	ldr	r3, [pc, #200]	@ (8005728 <HAL_GPIO_Init+0x354>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	43db      	mvns	r3, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4013      	ands	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005680:	4a29      	ldr	r2, [pc, #164]	@ (8005728 <HAL_GPIO_Init+0x354>)
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005686:	4b28      	ldr	r3, [pc, #160]	@ (8005728 <HAL_GPIO_Init+0x354>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	43db      	mvns	r3, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4013      	ands	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005728 <HAL_GPIO_Init+0x354>)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005728 <HAL_GPIO_Init+0x354>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	43db      	mvns	r3, r3
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	4013      	ands	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056d4:	4a14      	ldr	r2, [pc, #80]	@ (8005728 <HAL_GPIO_Init+0x354>)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	3301      	adds	r3, #1
 80056de:	61fb      	str	r3, [r7, #28]
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	2b0f      	cmp	r3, #15
 80056e4:	f67f ae86 	bls.w	80053f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
 80056ec:	3724      	adds	r7, #36	@ 0x24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40023800 	.word	0x40023800
 80056fc:	40013800 	.word	0x40013800
 8005700:	40020000 	.word	0x40020000
 8005704:	40020400 	.word	0x40020400
 8005708:	40020800 	.word	0x40020800
 800570c:	40020c00 	.word	0x40020c00
 8005710:	40021000 	.word	0x40021000
 8005714:	40021400 	.word	0x40021400
 8005718:	40021800 	.word	0x40021800
 800571c:	40021c00 	.word	0x40021c00
 8005720:	40022000 	.word	0x40022000
 8005724:	40022400 	.word	0x40022400
 8005728:	40013c00 	.word	0x40013c00

0800572c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	e0d9      	b.n	80058fc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005748:	2201      	movs	r2, #1
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4013      	ands	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	429a      	cmp	r2, r3
 8005760:	f040 80c9 	bne.w	80058f6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005764:	4a6b      	ldr	r2, [pc, #428]	@ (8005914 <HAL_GPIO_DeInit+0x1e8>)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	089b      	lsrs	r3, r3, #2
 800576a:	3302      	adds	r3, #2
 800576c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005770:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f003 0303 	and.w	r3, r3, #3
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	220f      	movs	r2, #15
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	4013      	ands	r3, r2
 8005784:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a63      	ldr	r2, [pc, #396]	@ (8005918 <HAL_GPIO_DeInit+0x1ec>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d037      	beq.n	80057fe <HAL_GPIO_DeInit+0xd2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a62      	ldr	r2, [pc, #392]	@ (800591c <HAL_GPIO_DeInit+0x1f0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d031      	beq.n	80057fa <HAL_GPIO_DeInit+0xce>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a61      	ldr	r2, [pc, #388]	@ (8005920 <HAL_GPIO_DeInit+0x1f4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d02b      	beq.n	80057f6 <HAL_GPIO_DeInit+0xca>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a60      	ldr	r2, [pc, #384]	@ (8005924 <HAL_GPIO_DeInit+0x1f8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d025      	beq.n	80057f2 <HAL_GPIO_DeInit+0xc6>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a5f      	ldr	r2, [pc, #380]	@ (8005928 <HAL_GPIO_DeInit+0x1fc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01f      	beq.n	80057ee <HAL_GPIO_DeInit+0xc2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a5e      	ldr	r2, [pc, #376]	@ (800592c <HAL_GPIO_DeInit+0x200>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d019      	beq.n	80057ea <HAL_GPIO_DeInit+0xbe>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a5d      	ldr	r2, [pc, #372]	@ (8005930 <HAL_GPIO_DeInit+0x204>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <HAL_GPIO_DeInit+0xba>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a5c      	ldr	r2, [pc, #368]	@ (8005934 <HAL_GPIO_DeInit+0x208>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00d      	beq.n	80057e2 <HAL_GPIO_DeInit+0xb6>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a5b      	ldr	r2, [pc, #364]	@ (8005938 <HAL_GPIO_DeInit+0x20c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d007      	beq.n	80057de <HAL_GPIO_DeInit+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a5a      	ldr	r2, [pc, #360]	@ (800593c <HAL_GPIO_DeInit+0x210>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d101      	bne.n	80057da <HAL_GPIO_DeInit+0xae>
 80057d6:	2309      	movs	r3, #9
 80057d8:	e012      	b.n	8005800 <HAL_GPIO_DeInit+0xd4>
 80057da:	230a      	movs	r3, #10
 80057dc:	e010      	b.n	8005800 <HAL_GPIO_DeInit+0xd4>
 80057de:	2308      	movs	r3, #8
 80057e0:	e00e      	b.n	8005800 <HAL_GPIO_DeInit+0xd4>
 80057e2:	2307      	movs	r3, #7
 80057e4:	e00c      	b.n	8005800 <HAL_GPIO_DeInit+0xd4>
 80057e6:	2306      	movs	r3, #6
 80057e8:	e00a      	b.n	8005800 <HAL_GPIO_DeInit+0xd4>
 80057ea:	2305      	movs	r3, #5
 80057ec:	e008      	b.n	8005800 <HAL_GPIO_DeInit+0xd4>
 80057ee:	2304      	movs	r3, #4
 80057f0:	e006      	b.n	8005800 <HAL_GPIO_DeInit+0xd4>
 80057f2:	2303      	movs	r3, #3
 80057f4:	e004      	b.n	8005800 <HAL_GPIO_DeInit+0xd4>
 80057f6:	2302      	movs	r3, #2
 80057f8:	e002      	b.n	8005800 <HAL_GPIO_DeInit+0xd4>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <HAL_GPIO_DeInit+0xd4>
 80057fe:	2300      	movs	r3, #0
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	f002 0203 	and.w	r2, r2, #3
 8005806:	0092      	lsls	r2, r2, #2
 8005808:	4093      	lsls	r3, r2
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	429a      	cmp	r2, r3
 800580e:	d132      	bne.n	8005876 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005810:	4b4b      	ldr	r3, [pc, #300]	@ (8005940 <HAL_GPIO_DeInit+0x214>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	43db      	mvns	r3, r3
 8005818:	4949      	ldr	r1, [pc, #292]	@ (8005940 <HAL_GPIO_DeInit+0x214>)
 800581a:	4013      	ands	r3, r2
 800581c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800581e:	4b48      	ldr	r3, [pc, #288]	@ (8005940 <HAL_GPIO_DeInit+0x214>)
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	43db      	mvns	r3, r3
 8005826:	4946      	ldr	r1, [pc, #280]	@ (8005940 <HAL_GPIO_DeInit+0x214>)
 8005828:	4013      	ands	r3, r2
 800582a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800582c:	4b44      	ldr	r3, [pc, #272]	@ (8005940 <HAL_GPIO_DeInit+0x214>)
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	43db      	mvns	r3, r3
 8005834:	4942      	ldr	r1, [pc, #264]	@ (8005940 <HAL_GPIO_DeInit+0x214>)
 8005836:	4013      	ands	r3, r2
 8005838:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800583a:	4b41      	ldr	r3, [pc, #260]	@ (8005940 <HAL_GPIO_DeInit+0x214>)
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	43db      	mvns	r3, r3
 8005842:	493f      	ldr	r1, [pc, #252]	@ (8005940 <HAL_GPIO_DeInit+0x214>)
 8005844:	4013      	ands	r3, r2
 8005846:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	220f      	movs	r2, #15
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005858:	4a2e      	ldr	r2, [pc, #184]	@ (8005914 <HAL_GPIO_DeInit+0x1e8>)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	089b      	lsrs	r3, r3, #2
 800585e:	3302      	adds	r3, #2
 8005860:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	43da      	mvns	r2, r3
 8005868:	482a      	ldr	r0, [pc, #168]	@ (8005914 <HAL_GPIO_DeInit+0x1e8>)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	089b      	lsrs	r3, r3, #2
 800586e:	400a      	ands	r2, r1
 8005870:	3302      	adds	r3, #2
 8005872:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	2103      	movs	r1, #3
 8005880:	fa01 f303 	lsl.w	r3, r1, r3
 8005884:	43db      	mvns	r3, r3
 8005886:	401a      	ands	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	08da      	lsrs	r2, r3, #3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3208      	adds	r2, #8
 8005894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	220f      	movs	r2, #15
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	43db      	mvns	r3, r3
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	08d2      	lsrs	r2, r2, #3
 80058ac:	4019      	ands	r1, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3208      	adds	r2, #8
 80058b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	2103      	movs	r1, #3
 80058c0:	fa01 f303 	lsl.w	r3, r1, r3
 80058c4:	43db      	mvns	r3, r3
 80058c6:	401a      	ands	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	2101      	movs	r1, #1
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	fa01 f303 	lsl.w	r3, r1, r3
 80058d8:	43db      	mvns	r3, r3
 80058da:	401a      	ands	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	2103      	movs	r1, #3
 80058ea:	fa01 f303 	lsl.w	r3, r1, r3
 80058ee:	43db      	mvns	r3, r3
 80058f0:	401a      	ands	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	3301      	adds	r3, #1
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b0f      	cmp	r3, #15
 8005900:	f67f af22 	bls.w	8005748 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40013800 	.word	0x40013800
 8005918:	40020000 	.word	0x40020000
 800591c:	40020400 	.word	0x40020400
 8005920:	40020800 	.word	0x40020800
 8005924:	40020c00 	.word	0x40020c00
 8005928:	40021000 	.word	0x40021000
 800592c:	40021400 	.word	0x40021400
 8005930:	40021800 	.word	0x40021800
 8005934:	40021c00 	.word	0x40021c00
 8005938:	40022000 	.word	0x40022000
 800593c:	40022400 	.word	0x40022400
 8005940:	40013c00 	.word	0x40013c00

08005944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	887b      	ldrh	r3, [r7, #2]
 8005956:	4013      	ands	r3, r2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800595c:	2301      	movs	r3, #1
 800595e:	73fb      	strb	r3, [r7, #15]
 8005960:	e001      	b.n	8005966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005962:	2300      	movs	r3, #0
 8005964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	807b      	strh	r3, [r7, #2]
 8005980:	4613      	mov	r3, r2
 8005982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005984:	787b      	ldrb	r3, [r7, #1]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800598a:	887a      	ldrh	r2, [r7, #2]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005990:	e003      	b.n	800599a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005992:	887b      	ldrh	r3, [r7, #2]
 8005994:	041a      	lsls	r2, r3, #16
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	619a      	str	r2, [r3, #24]
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b085      	sub	sp, #20
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	460b      	mov	r3, r1
 80059b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059b8:	887a      	ldrh	r2, [r7, #2]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4013      	ands	r3, r2
 80059be:	041a      	lsls	r2, r3, #16
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	43d9      	mvns	r1, r3
 80059c4:	887b      	ldrh	r3, [r7, #2]
 80059c6:	400b      	ands	r3, r1
 80059c8:	431a      	orrs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	619a      	str	r2, [r3, #24]
}
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	4603      	mov	r3, r0
 80059e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80059e6:	4b08      	ldr	r3, [pc, #32]	@ (8005a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	4013      	ands	r3, r2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d006      	beq.n	8005a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059f2:	4a05      	ldr	r2, [pc, #20]	@ (8005a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059f8:	88fb      	ldrh	r3, [r7, #6]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fb fede 	bl	80017bc <HAL_GPIO_EXTI_Callback>
  }
}
 8005a00:	bf00      	nop
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40013c00 	.word	0x40013c00

08005a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e08b      	b.n	8005b36 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f8b5 	bl	8005ba2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2224      	movs	r2, #36	@ 0x24
 8005a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0201 	bic.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005a5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d107      	bne.n	8005a86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a82:	609a      	str	r2, [r3, #8]
 8005a84:	e006      	b.n	8005a94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005a92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d108      	bne.n	8005aae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005aaa:	605a      	str	r2, [r3, #4]
 8005aac:	e007      	b.n	8005abe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005abc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6859      	ldr	r1, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b40 <HAL_I2C_Init+0x134>)
 8005aca:	430b      	orrs	r3, r1
 8005acc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005adc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691a      	ldr	r2, [r3, #16]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	69d9      	ldr	r1, [r3, #28]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1a      	ldr	r2, [r3, #32]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	02008000 	.word	0x02008000

08005b44 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e021      	b.n	8005b9a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2224      	movs	r2, #36	@ 0x24
 8005b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0201 	bic.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f821 	bl	8005bb6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
	...

08005bcc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4603      	mov	r3, r0
 8005bdc:	817b      	strh	r3, [r7, #10]
 8005bde:	460b      	mov	r3, r1
 8005be0:	813b      	strh	r3, [r7, #8]
 8005be2:	4613      	mov	r3, r2
 8005be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	f040 80f9 	bne.w	8005de6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_I2C_Mem_Write+0x34>
 8005bfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d105      	bne.n	8005c0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c06:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0ed      	b.n	8005de8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <HAL_I2C_Mem_Write+0x4e>
 8005c16:	2302      	movs	r3, #2
 8005c18:	e0e6      	b.n	8005de8 <HAL_I2C_Mem_Write+0x21c>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c22:	f7fe fd2f 	bl	8004684 <HAL_GetTick>
 8005c26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	2319      	movs	r3, #25
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 fad1 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0d1      	b.n	8005de8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2221      	movs	r2, #33	@ 0x21
 8005c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2240      	movs	r2, #64	@ 0x40
 8005c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a3a      	ldr	r2, [r7, #32]
 8005c5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c6c:	88f8      	ldrh	r0, [r7, #6]
 8005c6e:	893a      	ldrh	r2, [r7, #8]
 8005c70:	8979      	ldrh	r1, [r7, #10]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f9e1 	bl	8006044 <I2C_RequestMemoryWrite>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e0a9      	b.n	8005de8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2bff      	cmp	r3, #255	@ 0xff
 8005c9c:	d90e      	bls.n	8005cbc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	22ff      	movs	r2, #255	@ 0xff
 8005ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	8979      	ldrh	r1, [r7, #10]
 8005cac:	2300      	movs	r3, #0
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fc55 	bl	8006564 <I2C_TransferConfig>
 8005cba:	e00f      	b.n	8005cdc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	8979      	ldrh	r1, [r7, #10]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 fc44 	bl	8006564 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 fad4 	bl	800628e <I2C_WaitOnTXISFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e07b      	b.n	8005de8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	781a      	ldrb	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d034      	beq.n	8005d94 <HAL_I2C_Mem_Write+0x1c8>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d130      	bne.n	8005d94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2180      	movs	r1, #128	@ 0x80
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fa4d 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e04d      	b.n	8005de8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2bff      	cmp	r3, #255	@ 0xff
 8005d54:	d90e      	bls.n	8005d74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	22ff      	movs	r2, #255	@ 0xff
 8005d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	8979      	ldrh	r1, [r7, #10]
 8005d64:	2300      	movs	r3, #0
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 fbf9 	bl	8006564 <I2C_TransferConfig>
 8005d72:	e00f      	b.n	8005d94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	8979      	ldrh	r1, [r7, #10]
 8005d86:	2300      	movs	r3, #0
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 fbe8 	bl	8006564 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d19e      	bne.n	8005cdc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 faba 	bl	800631c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e01a      	b.n	8005de8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2220      	movs	r2, #32
 8005db8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6859      	ldr	r1, [r3, #4]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005df0 <HAL_I2C_Mem_Write+0x224>)
 8005dc6:	400b      	ands	r3, r1
 8005dc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	e000      	b.n	8005de8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005de6:	2302      	movs	r3, #2
  }
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	fe00e800 	.word	0xfe00e800

08005df4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	4608      	mov	r0, r1
 8005dfe:	4611      	mov	r1, r2
 8005e00:	461a      	mov	r2, r3
 8005e02:	4603      	mov	r3, r0
 8005e04:	817b      	strh	r3, [r7, #10]
 8005e06:	460b      	mov	r3, r1
 8005e08:	813b      	strh	r3, [r7, #8]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	f040 80fd 	bne.w	8006016 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_I2C_Mem_Read+0x34>
 8005e22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d105      	bne.n	8005e34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e0f1      	b.n	8006018 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <HAL_I2C_Mem_Read+0x4e>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e0ea      	b.n	8006018 <HAL_I2C_Mem_Read+0x224>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e4a:	f7fe fc1b 	bl	8004684 <HAL_GetTick>
 8005e4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	2319      	movs	r3, #25
 8005e56:	2201      	movs	r2, #1
 8005e58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f9bd 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e0d5      	b.n	8006018 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2222      	movs	r2, #34	@ 0x22
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2240      	movs	r2, #64	@ 0x40
 8005e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a3a      	ldr	r2, [r7, #32]
 8005e86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e94:	88f8      	ldrh	r0, [r7, #6]
 8005e96:	893a      	ldrh	r2, [r7, #8]
 8005e98:	8979      	ldrh	r1, [r7, #10]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f921 	bl	80060ec <I2C_RequestMemoryRead>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e0ad      	b.n	8006018 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2bff      	cmp	r3, #255	@ 0xff
 8005ec4:	d90e      	bls.n	8005ee4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	8979      	ldrh	r1, [r7, #10]
 8005ed4:	4b52      	ldr	r3, [pc, #328]	@ (8006020 <HAL_I2C_Mem_Read+0x22c>)
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 fb41 	bl	8006564 <I2C_TransferConfig>
 8005ee2:	e00f      	b.n	8005f04 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	8979      	ldrh	r1, [r7, #10]
 8005ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8006020 <HAL_I2C_Mem_Read+0x22c>)
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 fb30 	bl	8006564 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2104      	movs	r1, #4
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 f964 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e07c      	b.n	8006018 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d034      	beq.n	8005fc4 <HAL_I2C_Mem_Read+0x1d0>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d130      	bne.n	8005fc4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2180      	movs	r1, #128	@ 0x80
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 f935 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e04d      	b.n	8006018 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2bff      	cmp	r3, #255	@ 0xff
 8005f84:	d90e      	bls.n	8005fa4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	8979      	ldrh	r1, [r7, #10]
 8005f94:	2300      	movs	r3, #0
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 fae1 	bl	8006564 <I2C_TransferConfig>
 8005fa2:	e00f      	b.n	8005fc4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	8979      	ldrh	r1, [r7, #10]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 fad0 	bl	8006564 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d19a      	bne.n	8005f04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f9a2 	bl	800631c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e01a      	b.n	8006018 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6859      	ldr	r1, [r3, #4]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8006024 <HAL_I2C_Mem_Read+0x230>)
 8005ff6:	400b      	ands	r3, r1
 8005ff8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	e000      	b.n	8006018 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006016:	2302      	movs	r3, #2
  }
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	80002400 	.word	0x80002400
 8006024:	fe00e800 	.word	0xfe00e800

08006028 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006036:	b2db      	uxtb	r3, r3
}
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af02      	add	r7, sp, #8
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	4608      	mov	r0, r1
 800604e:	4611      	mov	r1, r2
 8006050:	461a      	mov	r2, r3
 8006052:	4603      	mov	r3, r0
 8006054:	817b      	strh	r3, [r7, #10]
 8006056:	460b      	mov	r3, r1
 8006058:	813b      	strh	r3, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800605e:	88fb      	ldrh	r3, [r7, #6]
 8006060:	b2da      	uxtb	r2, r3
 8006062:	8979      	ldrh	r1, [r7, #10]
 8006064:	4b20      	ldr	r3, [pc, #128]	@ (80060e8 <I2C_RequestMemoryWrite+0xa4>)
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 fa79 	bl	8006564 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	69b9      	ldr	r1, [r7, #24]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 f909 	bl	800628e <I2C_WaitOnTXISFlagUntilTimeout>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e02c      	b.n	80060e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006086:	88fb      	ldrh	r3, [r7, #6]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d105      	bne.n	8006098 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800608c:	893b      	ldrh	r3, [r7, #8]
 800608e:	b2da      	uxtb	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	629a      	str	r2, [r3, #40]	@ 0x28
 8006096:	e015      	b.n	80060c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006098:	893b      	ldrh	r3, [r7, #8]
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	b29b      	uxth	r3, r3
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	69b9      	ldr	r1, [r7, #24]
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 f8ef 	bl	800628e <I2C_WaitOnTXISFlagUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e012      	b.n	80060e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060ba:	893b      	ldrh	r3, [r7, #8]
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	2200      	movs	r2, #0
 80060cc:	2180      	movs	r1, #128	@ 0x80
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 f884 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	80002000 	.word	0x80002000

080060ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	4608      	mov	r0, r1
 80060f6:	4611      	mov	r1, r2
 80060f8:	461a      	mov	r2, r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	817b      	strh	r3, [r7, #10]
 80060fe:	460b      	mov	r3, r1
 8006100:	813b      	strh	r3, [r7, #8]
 8006102:	4613      	mov	r3, r2
 8006104:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006106:	88fb      	ldrh	r3, [r7, #6]
 8006108:	b2da      	uxtb	r2, r3
 800610a:	8979      	ldrh	r1, [r7, #10]
 800610c:	4b20      	ldr	r3, [pc, #128]	@ (8006190 <I2C_RequestMemoryRead+0xa4>)
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	2300      	movs	r3, #0
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 fa26 	bl	8006564 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006118:	69fa      	ldr	r2, [r7, #28]
 800611a:	69b9      	ldr	r1, [r7, #24]
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f8b6 	bl	800628e <I2C_WaitOnTXISFlagUntilTimeout>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e02c      	b.n	8006186 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800612c:	88fb      	ldrh	r3, [r7, #6]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d105      	bne.n	800613e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006132:	893b      	ldrh	r3, [r7, #8]
 8006134:	b2da      	uxtb	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	629a      	str	r2, [r3, #40]	@ 0x28
 800613c:	e015      	b.n	800616a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800613e:	893b      	ldrh	r3, [r7, #8]
 8006140:	0a1b      	lsrs	r3, r3, #8
 8006142:	b29b      	uxth	r3, r3
 8006144:	b2da      	uxtb	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800614c:	69fa      	ldr	r2, [r7, #28]
 800614e:	69b9      	ldr	r1, [r7, #24]
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 f89c 	bl	800628e <I2C_WaitOnTXISFlagUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e012      	b.n	8006186 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006160:	893b      	ldrh	r3, [r7, #8]
 8006162:	b2da      	uxtb	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	2200      	movs	r2, #0
 8006172:	2140      	movs	r1, #64	@ 0x40
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 f831 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	80002000 	.word	0x80002000

08006194 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d103      	bne.n	80061b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2200      	movs	r2, #0
 80061b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d007      	beq.n	80061d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	619a      	str	r2, [r3, #24]
  }
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	4613      	mov	r3, r2
 80061ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061ec:	e03b      	b.n	8006266 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 f8d6 	bl	80063a4 <I2C_IsErrorOccurred>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e041      	b.n	8006286 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006208:	d02d      	beq.n	8006266 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800620a:	f7fe fa3b 	bl	8004684 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d302      	bcc.n	8006220 <I2C_WaitOnFlagUntilTimeout+0x44>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d122      	bne.n	8006266 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4013      	ands	r3, r2
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	429a      	cmp	r2, r3
 800622e:	bf0c      	ite	eq
 8006230:	2301      	moveq	r3, #1
 8006232:	2300      	movne	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	461a      	mov	r2, r3
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	429a      	cmp	r2, r3
 800623c:	d113      	bne.n	8006266 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006242:	f043 0220 	orr.w	r2, r3, #32
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e00f      	b.n	8006286 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	699a      	ldr	r2, [r3, #24]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4013      	ands	r3, r2
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	429a      	cmp	r2, r3
 8006274:	bf0c      	ite	eq
 8006276:	2301      	moveq	r3, #1
 8006278:	2300      	movne	r3, #0
 800627a:	b2db      	uxtb	r3, r3
 800627c:	461a      	mov	r2, r3
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	429a      	cmp	r2, r3
 8006282:	d0b4      	beq.n	80061ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800629a:	e033      	b.n	8006304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f87f 	bl	80063a4 <I2C_IsErrorOccurred>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e031      	b.n	8006314 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b6:	d025      	beq.n	8006304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b8:	f7fe f9e4 	bl	8004684 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d302      	bcc.n	80062ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d11a      	bne.n	8006304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d013      	beq.n	8006304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e0:	f043 0220 	orr.w	r2, r3, #32
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e007      	b.n	8006314 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b02      	cmp	r3, #2
 8006310:	d1c4      	bne.n	800629c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006328:	e02f      	b.n	800638a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	68b9      	ldr	r1, [r7, #8]
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 f838 	bl	80063a4 <I2C_IsErrorOccurred>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e02d      	b.n	800639a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800633e:	f7fe f9a1 	bl	8004684 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	429a      	cmp	r2, r3
 800634c:	d302      	bcc.n	8006354 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d11a      	bne.n	800638a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	2b20      	cmp	r3, #32
 8006360:	d013      	beq.n	800638a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006366:	f043 0220 	orr.w	r2, r3, #32
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e007      	b.n	800639a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b20      	cmp	r3, #32
 8006396:	d1c8      	bne.n	800632a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b08a      	sub	sp, #40	@ 0x28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	f003 0310 	and.w	r3, r3, #16
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d068      	beq.n	80064a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2210      	movs	r2, #16
 80063d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063d8:	e049      	b.n	800646e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e0:	d045      	beq.n	800646e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80063e2:	f7fe f94f 	bl	8004684 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d302      	bcc.n	80063f8 <I2C_IsErrorOccurred+0x54>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d13a      	bne.n	800646e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006402:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800640a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006416:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800641a:	d121      	bne.n	8006460 <I2C_IsErrorOccurred+0xbc>
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006422:	d01d      	beq.n	8006460 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006424:	7cfb      	ldrb	r3, [r7, #19]
 8006426:	2b20      	cmp	r3, #32
 8006428:	d01a      	beq.n	8006460 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006438:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800643a:	f7fe f923 	bl	8004684 <HAL_GetTick>
 800643e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006440:	e00e      	b.n	8006460 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006442:	f7fe f91f 	bl	8004684 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b19      	cmp	r3, #25
 800644e:	d907      	bls.n	8006460 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	f043 0320 	orr.w	r3, r3, #32
 8006456:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800645e:	e006      	b.n	800646e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b20      	cmp	r3, #32
 800646c:	d1e9      	bne.n	8006442 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b20      	cmp	r3, #32
 800647a:	d003      	beq.n	8006484 <I2C_IsErrorOccurred+0xe0>
 800647c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0aa      	beq.n	80063da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006488:	2b00      	cmp	r3, #0
 800648a:	d103      	bne.n	8006494 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2220      	movs	r2, #32
 8006492:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	f043 0304 	orr.w	r3, r3, #4
 800649a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00b      	beq.n	80064ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	f043 0308 	orr.w	r3, r3, #8
 80064dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	f043 0302 	orr.w	r3, r3, #2
 80064fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006508:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006510:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01c      	beq.n	8006552 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f7ff fe3b 	bl	8006194 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6859      	ldr	r1, [r3, #4]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	4b0d      	ldr	r3, [pc, #52]	@ (8006560 <I2C_IsErrorOccurred+0x1bc>)
 800652a:	400b      	ands	r3, r1
 800652c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	431a      	orrs	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006552:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006556:	4618      	mov	r0, r3
 8006558:	3728      	adds	r7, #40	@ 0x28
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	fe00e800 	.word	0xfe00e800

08006564 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	607b      	str	r3, [r7, #4]
 800656e:	460b      	mov	r3, r1
 8006570:	817b      	strh	r3, [r7, #10]
 8006572:	4613      	mov	r3, r2
 8006574:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006576:	897b      	ldrh	r3, [r7, #10]
 8006578:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800657c:	7a7b      	ldrb	r3, [r7, #9]
 800657e:	041b      	lsls	r3, r3, #16
 8006580:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006584:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	4313      	orrs	r3, r2
 800658e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006592:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	0d5b      	lsrs	r3, r3, #21
 800659e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80065a2:	4b08      	ldr	r3, [pc, #32]	@ (80065c4 <I2C_TransferConfig+0x60>)
 80065a4:	430b      	orrs	r3, r1
 80065a6:	43db      	mvns	r3, r3
 80065a8:	ea02 0103 	and.w	r1, r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80065b6:	bf00      	nop
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	03ff63ff 	.word	0x03ff63ff

080065c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80065d2:	4b23      	ldr	r3, [pc, #140]	@ (8006660 <HAL_PWREx_EnableOverDrive+0x98>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d6:	4a22      	ldr	r2, [pc, #136]	@ (8006660 <HAL_PWREx_EnableOverDrive+0x98>)
 80065d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80065de:	4b20      	ldr	r3, [pc, #128]	@ (8006660 <HAL_PWREx_EnableOverDrive+0x98>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80065ea:	4b1e      	ldr	r3, [pc, #120]	@ (8006664 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006664 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065f6:	f7fe f845 	bl	8004684 <HAL_GetTick>
 80065fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065fc:	e009      	b.n	8006612 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80065fe:	f7fe f841 	bl	8004684 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800660c:	d901      	bls.n	8006612 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e022      	b.n	8006658 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006612:	4b14      	ldr	r3, [pc, #80]	@ (8006664 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800661a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800661e:	d1ee      	bne.n	80065fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006620:	4b10      	ldr	r3, [pc, #64]	@ (8006664 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a0f      	ldr	r2, [pc, #60]	@ (8006664 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800662a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800662c:	f7fe f82a 	bl	8004684 <HAL_GetTick>
 8006630:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006632:	e009      	b.n	8006648 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006634:	f7fe f826 	bl	8004684 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006642:	d901      	bls.n	8006648 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e007      	b.n	8006658 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006648:	4b06      	ldr	r3, [pc, #24]	@ (8006664 <HAL_PWREx_EnableOverDrive+0x9c>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006650:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006654:	d1ee      	bne.n	8006634 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40023800 	.word	0x40023800
 8006664:	40007000 	.word	0x40007000

08006668 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006670:	2300      	movs	r3, #0
 8006672:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e291      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 8087 	beq.w	800679a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800668c:	4b96      	ldr	r3, [pc, #600]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f003 030c 	and.w	r3, r3, #12
 8006694:	2b04      	cmp	r3, #4
 8006696:	d00c      	beq.n	80066b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006698:	4b93      	ldr	r3, [pc, #588]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 030c 	and.w	r3, r3, #12
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d112      	bne.n	80066ca <HAL_RCC_OscConfig+0x62>
 80066a4:	4b90      	ldr	r3, [pc, #576]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066b0:	d10b      	bne.n	80066ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b2:	4b8d      	ldr	r3, [pc, #564]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d06c      	beq.n	8006798 <HAL_RCC_OscConfig+0x130>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d168      	bne.n	8006798 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e26b      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066d2:	d106      	bne.n	80066e2 <HAL_RCC_OscConfig+0x7a>
 80066d4:	4b84      	ldr	r3, [pc, #528]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a83      	ldr	r2, [pc, #524]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	e02e      	b.n	8006740 <HAL_RCC_OscConfig+0xd8>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10c      	bne.n	8006704 <HAL_RCC_OscConfig+0x9c>
 80066ea:	4b7f      	ldr	r3, [pc, #508]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a7e      	ldr	r2, [pc, #504]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	4b7c      	ldr	r3, [pc, #496]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a7b      	ldr	r2, [pc, #492]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	e01d      	b.n	8006740 <HAL_RCC_OscConfig+0xd8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800670c:	d10c      	bne.n	8006728 <HAL_RCC_OscConfig+0xc0>
 800670e:	4b76      	ldr	r3, [pc, #472]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a75      	ldr	r2, [pc, #468]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	4b73      	ldr	r3, [pc, #460]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a72      	ldr	r2, [pc, #456]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	e00b      	b.n	8006740 <HAL_RCC_OscConfig+0xd8>
 8006728:	4b6f      	ldr	r3, [pc, #444]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a6e      	ldr	r2, [pc, #440]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 800672e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	4b6c      	ldr	r3, [pc, #432]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a6b      	ldr	r2, [pc, #428]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 800673a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800673e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d013      	beq.n	8006770 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006748:	f7fd ff9c 	bl	8004684 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006750:	f7fd ff98 	bl	8004684 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b64      	cmp	r3, #100	@ 0x64
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e21f      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006762:	4b61      	ldr	r3, [pc, #388]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0f0      	beq.n	8006750 <HAL_RCC_OscConfig+0xe8>
 800676e:	e014      	b.n	800679a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006770:	f7fd ff88 	bl	8004684 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006778:	f7fd ff84 	bl	8004684 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b64      	cmp	r3, #100	@ 0x64
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e20b      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800678a:	4b57      	ldr	r3, [pc, #348]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f0      	bne.n	8006778 <HAL_RCC_OscConfig+0x110>
 8006796:	e000      	b.n	800679a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d069      	beq.n	800687a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067a6:	4b50      	ldr	r3, [pc, #320]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 030c 	and.w	r3, r3, #12
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067b2:	4b4d      	ldr	r3, [pc, #308]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f003 030c 	and.w	r3, r3, #12
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	d11c      	bne.n	80067f8 <HAL_RCC_OscConfig+0x190>
 80067be:	4b4a      	ldr	r3, [pc, #296]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d116      	bne.n	80067f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ca:	4b47      	ldr	r3, [pc, #284]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <HAL_RCC_OscConfig+0x17a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d001      	beq.n	80067e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e1df      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067e2:	4b41      	ldr	r3, [pc, #260]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	493d      	ldr	r1, [pc, #244]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067f6:	e040      	b.n	800687a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d023      	beq.n	8006848 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006800:	4b39      	ldr	r3, [pc, #228]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a38      	ldr	r2, [pc, #224]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006806:	f043 0301 	orr.w	r3, r3, #1
 800680a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680c:	f7fd ff3a 	bl	8004684 <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006814:	f7fd ff36 	bl	8004684 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e1bd      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006826:	4b30      	ldr	r3, [pc, #192]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0f0      	beq.n	8006814 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006832:	4b2d      	ldr	r3, [pc, #180]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	4929      	ldr	r1, [pc, #164]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006842:	4313      	orrs	r3, r2
 8006844:	600b      	str	r3, [r1, #0]
 8006846:	e018      	b.n	800687a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006848:	4b27      	ldr	r3, [pc, #156]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a26      	ldr	r2, [pc, #152]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 800684e:	f023 0301 	bic.w	r3, r3, #1
 8006852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006854:	f7fd ff16 	bl	8004684 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800685c:	f7fd ff12 	bl	8004684 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e199      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800686e:	4b1e      	ldr	r3, [pc, #120]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f0      	bne.n	800685c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b00      	cmp	r3, #0
 8006884:	d038      	beq.n	80068f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d019      	beq.n	80068c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800688e:	4b16      	ldr	r3, [pc, #88]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006892:	4a15      	ldr	r2, [pc, #84]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006894:	f043 0301 	orr.w	r3, r3, #1
 8006898:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800689a:	f7fd fef3 	bl	8004684 <HAL_GetTick>
 800689e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068a2:	f7fd feef 	bl	8004684 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e176      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068b4:	4b0c      	ldr	r3, [pc, #48]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80068b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <HAL_RCC_OscConfig+0x23a>
 80068c0:	e01a      	b.n	80068f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068c2:	4b09      	ldr	r3, [pc, #36]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80068c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c6:	4a08      	ldr	r2, [pc, #32]	@ (80068e8 <HAL_RCC_OscConfig+0x280>)
 80068c8:	f023 0301 	bic.w	r3, r3, #1
 80068cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ce:	f7fd fed9 	bl	8004684 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068d4:	e00a      	b.n	80068ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068d6:	f7fd fed5 	bl	8004684 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d903      	bls.n	80068ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e15c      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
 80068e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068ec:	4b91      	ldr	r3, [pc, #580]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80068ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1ee      	bne.n	80068d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 80a4 	beq.w	8006a4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006906:	4b8b      	ldr	r3, [pc, #556]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10d      	bne.n	800692e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006912:	4b88      	ldr	r3, [pc, #544]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006916:	4a87      	ldr	r2, [pc, #540]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800691c:	6413      	str	r3, [r2, #64]	@ 0x40
 800691e:	4b85      	ldr	r3, [pc, #532]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006926:	60bb      	str	r3, [r7, #8]
 8006928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800692a:	2301      	movs	r3, #1
 800692c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800692e:	4b82      	ldr	r3, [pc, #520]	@ (8006b38 <HAL_RCC_OscConfig+0x4d0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006936:	2b00      	cmp	r3, #0
 8006938:	d118      	bne.n	800696c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800693a:	4b7f      	ldr	r3, [pc, #508]	@ (8006b38 <HAL_RCC_OscConfig+0x4d0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a7e      	ldr	r2, [pc, #504]	@ (8006b38 <HAL_RCC_OscConfig+0x4d0>)
 8006940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006946:	f7fd fe9d 	bl	8004684 <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800694e:	f7fd fe99 	bl	8004684 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b64      	cmp	r3, #100	@ 0x64
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e120      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006960:	4b75      	ldr	r3, [pc, #468]	@ (8006b38 <HAL_RCC_OscConfig+0x4d0>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0f0      	beq.n	800694e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d106      	bne.n	8006982 <HAL_RCC_OscConfig+0x31a>
 8006974:	4b6f      	ldr	r3, [pc, #444]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006978:	4a6e      	ldr	r2, [pc, #440]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006980:	e02d      	b.n	80069de <HAL_RCC_OscConfig+0x376>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10c      	bne.n	80069a4 <HAL_RCC_OscConfig+0x33c>
 800698a:	4b6a      	ldr	r3, [pc, #424]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800698e:	4a69      	ldr	r2, [pc, #420]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006990:	f023 0301 	bic.w	r3, r3, #1
 8006994:	6713      	str	r3, [r2, #112]	@ 0x70
 8006996:	4b67      	ldr	r3, [pc, #412]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699a:	4a66      	ldr	r2, [pc, #408]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 800699c:	f023 0304 	bic.w	r3, r3, #4
 80069a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80069a2:	e01c      	b.n	80069de <HAL_RCC_OscConfig+0x376>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	2b05      	cmp	r3, #5
 80069aa:	d10c      	bne.n	80069c6 <HAL_RCC_OscConfig+0x35e>
 80069ac:	4b61      	ldr	r3, [pc, #388]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b0:	4a60      	ldr	r2, [pc, #384]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069b2:	f043 0304 	orr.w	r3, r3, #4
 80069b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80069b8:	4b5e      	ldr	r3, [pc, #376]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069bc:	4a5d      	ldr	r2, [pc, #372]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80069c4:	e00b      	b.n	80069de <HAL_RCC_OscConfig+0x376>
 80069c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ca:	4a5a      	ldr	r2, [pc, #360]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80069d2:	4b58      	ldr	r3, [pc, #352]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d6:	4a57      	ldr	r2, [pc, #348]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069d8:	f023 0304 	bic.w	r3, r3, #4
 80069dc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d015      	beq.n	8006a12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e6:	f7fd fe4d 	bl	8004684 <HAL_GetTick>
 80069ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ec:	e00a      	b.n	8006a04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ee:	f7fd fe49 	bl	8004684 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d901      	bls.n	8006a04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e0ce      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a04:	4b4b      	ldr	r3, [pc, #300]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d0ee      	beq.n	80069ee <HAL_RCC_OscConfig+0x386>
 8006a10:	e014      	b.n	8006a3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a12:	f7fd fe37 	bl	8004684 <HAL_GetTick>
 8006a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a18:	e00a      	b.n	8006a30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a1a:	f7fd fe33 	bl	8004684 <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e0b8      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a30:	4b40      	ldr	r3, [pc, #256]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1ee      	bne.n	8006a1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d105      	bne.n	8006a4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a42:	4b3c      	ldr	r3, [pc, #240]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a46:	4a3b      	ldr	r2, [pc, #236]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a4c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 80a4 	beq.w	8006ba0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a58:	4b36      	ldr	r3, [pc, #216]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f003 030c 	and.w	r3, r3, #12
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d06b      	beq.n	8006b3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d149      	bne.n	8006b00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a6c:	4b31      	ldr	r3, [pc, #196]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a30      	ldr	r2, [pc, #192]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fd fe04 	bl	8004684 <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a80:	f7fd fe00 	bl	8004684 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e087      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a92:	4b28      	ldr	r3, [pc, #160]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f0      	bne.n	8006a80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69da      	ldr	r2, [r3, #28]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aac:	019b      	lsls	r3, r3, #6
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab4:	085b      	lsrs	r3, r3, #1
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	041b      	lsls	r3, r3, #16
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac0:	061b      	lsls	r3, r3, #24
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006ac6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006aca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006acc:	4b19      	ldr	r3, [pc, #100]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a18      	ldr	r2, [pc, #96]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006ad2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad8:	f7fd fdd4 	bl	8004684 <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae0:	f7fd fdd0 	bl	8004684 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e057      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af2:	4b10      	ldr	r3, [pc, #64]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0f0      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x478>
 8006afe:	e04f      	b.n	8006ba0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b00:	4b0c      	ldr	r3, [pc, #48]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a0b      	ldr	r2, [pc, #44]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006b06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0c:	f7fd fdba 	bl	8004684 <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b14:	f7fd fdb6 	bl	8004684 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e03d      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b26:	4b03      	ldr	r3, [pc, #12]	@ (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1f0      	bne.n	8006b14 <HAL_RCC_OscConfig+0x4ac>
 8006b32:	e035      	b.n	8006ba0 <HAL_RCC_OscConfig+0x538>
 8006b34:	40023800 	.word	0x40023800
 8006b38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bac <HAL_RCC_OscConfig+0x544>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d028      	beq.n	8006b9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d121      	bne.n	8006b9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d11a      	bne.n	8006b9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d111      	bne.n	8006b9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b82:	085b      	lsrs	r3, r3, #1
 8006b84:	3b01      	subs	r3, #1
 8006b86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d107      	bne.n	8006b9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d001      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40023800 	.word	0x40023800

08006bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e0d0      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d910      	bls.n	8006bf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bd6:	4b67      	ldr	r3, [pc, #412]	@ (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f023 020f 	bic.w	r2, r3, #15
 8006bde:	4965      	ldr	r1, [pc, #404]	@ (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006be6:	4b63      	ldr	r3, [pc, #396]	@ (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d001      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e0b8      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0302 	and.w	r3, r3, #2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d020      	beq.n	8006c46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c10:	4b59      	ldr	r3, [pc, #356]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	4a58      	ldr	r2, [pc, #352]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006c1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d005      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c28:	4b53      	ldr	r3, [pc, #332]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	4a52      	ldr	r2, [pc, #328]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006c32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c34:	4b50      	ldr	r3, [pc, #320]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	494d      	ldr	r1, [pc, #308]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d040      	beq.n	8006cd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d107      	bne.n	8006c6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c5a:	4b47      	ldr	r3, [pc, #284]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d115      	bne.n	8006c92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e07f      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d107      	bne.n	8006c82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c72:	4b41      	ldr	r3, [pc, #260]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d109      	bne.n	8006c92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e073      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c82:	4b3d      	ldr	r3, [pc, #244]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e06b      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c92:	4b39      	ldr	r3, [pc, #228]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f023 0203 	bic.w	r2, r3, #3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	4936      	ldr	r1, [pc, #216]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ca4:	f7fd fcee 	bl	8004684 <HAL_GetTick>
 8006ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006caa:	e00a      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cac:	f7fd fcea 	bl	8004684 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e053      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 020c 	and.w	r2, r3, #12
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d1eb      	bne.n	8006cac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cd4:	4b27      	ldr	r3, [pc, #156]	@ (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 030f 	and.w	r3, r3, #15
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d210      	bcs.n	8006d04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce2:	4b24      	ldr	r3, [pc, #144]	@ (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f023 020f 	bic.w	r2, r3, #15
 8006cea:	4922      	ldr	r1, [pc, #136]	@ (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf2:	4b20      	ldr	r3, [pc, #128]	@ (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d001      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e032      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d008      	beq.n	8006d22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d10:	4b19      	ldr	r3, [pc, #100]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	4916      	ldr	r1, [pc, #88]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0308 	and.w	r3, r3, #8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d2e:	4b12      	ldr	r3, [pc, #72]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	490e      	ldr	r1, [pc, #56]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d42:	f000 f821 	bl	8006d88 <HAL_RCC_GetSysClockFreq>
 8006d46:	4602      	mov	r2, r0
 8006d48:	4b0b      	ldr	r3, [pc, #44]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	091b      	lsrs	r3, r3, #4
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	490a      	ldr	r1, [pc, #40]	@ (8006d7c <HAL_RCC_ClockConfig+0x1cc>)
 8006d54:	5ccb      	ldrb	r3, [r1, r3]
 8006d56:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5a:	4a09      	ldr	r2, [pc, #36]	@ (8006d80 <HAL_RCC_ClockConfig+0x1d0>)
 8006d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006d5e:	4b09      	ldr	r3, [pc, #36]	@ (8006d84 <HAL_RCC_ClockConfig+0x1d4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fd fc4a 	bl	80045fc <HAL_InitTick>

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	40023c00 	.word	0x40023c00
 8006d78:	40023800 	.word	0x40023800
 8006d7c:	080158bc 	.word	0x080158bc
 8006d80:	20000000 	.word	0x20000000
 8006d84:	20000038 	.word	0x20000038

08006d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d8c:	b090      	sub	sp, #64	@ 0x40
 8006d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d94:	2300      	movs	r3, #0
 8006d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d98:	2300      	movs	r3, #0
 8006d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006da0:	4b59      	ldr	r3, [pc, #356]	@ (8006f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f003 030c 	and.w	r3, r3, #12
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d00d      	beq.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8006dac:	2b08      	cmp	r3, #8
 8006dae:	f200 80a1 	bhi.w	8006ef4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <HAL_RCC_GetSysClockFreq+0x34>
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d003      	beq.n	8006dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006dba:	e09b      	b.n	8006ef4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006dbc:	4b53      	ldr	r3, [pc, #332]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x184>)
 8006dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006dc0:	e09b      	b.n	8006efa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dc2:	4b53      	ldr	r3, [pc, #332]	@ (8006f10 <HAL_RCC_GetSysClockFreq+0x188>)
 8006dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006dc6:	e098      	b.n	8006efa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dc8:	4b4f      	ldr	r3, [pc, #316]	@ (8006f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dd0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006dd2:	4b4d      	ldr	r3, [pc, #308]	@ (8006f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d028      	beq.n	8006e30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dde:	4b4a      	ldr	r3, [pc, #296]	@ (8006f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	099b      	lsrs	r3, r3, #6
 8006de4:	2200      	movs	r2, #0
 8006de6:	623b      	str	r3, [r7, #32]
 8006de8:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006df0:	2100      	movs	r1, #0
 8006df2:	4b47      	ldr	r3, [pc, #284]	@ (8006f10 <HAL_RCC_GetSysClockFreq+0x188>)
 8006df4:	fb03 f201 	mul.w	r2, r3, r1
 8006df8:	2300      	movs	r3, #0
 8006dfa:	fb00 f303 	mul.w	r3, r0, r3
 8006dfe:	4413      	add	r3, r2
 8006e00:	4a43      	ldr	r2, [pc, #268]	@ (8006f10 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e02:	fba0 1202 	umull	r1, r2, r0, r2
 8006e06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e08:	460a      	mov	r2, r1
 8006e0a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006e0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e0e:	4413      	add	r3, r2
 8006e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e14:	2200      	movs	r2, #0
 8006e16:	61bb      	str	r3, [r7, #24]
 8006e18:	61fa      	str	r2, [r7, #28]
 8006e1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006e22:	f7f9 fee1 	bl	8000be8 <__aeabi_uldivmod>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e2e:	e053      	b.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e30:	4b35      	ldr	r3, [pc, #212]	@ (8006f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	099b      	lsrs	r3, r3, #6
 8006e36:	2200      	movs	r2, #0
 8006e38:	613b      	str	r3, [r7, #16]
 8006e3a:	617a      	str	r2, [r7, #20]
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006e42:	f04f 0b00 	mov.w	fp, #0
 8006e46:	4652      	mov	r2, sl
 8006e48:	465b      	mov	r3, fp
 8006e4a:	f04f 0000 	mov.w	r0, #0
 8006e4e:	f04f 0100 	mov.w	r1, #0
 8006e52:	0159      	lsls	r1, r3, #5
 8006e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e58:	0150      	lsls	r0, r2, #5
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	ebb2 080a 	subs.w	r8, r2, sl
 8006e62:	eb63 090b 	sbc.w	r9, r3, fp
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e7a:	ebb2 0408 	subs.w	r4, r2, r8
 8006e7e:	eb63 0509 	sbc.w	r5, r3, r9
 8006e82:	f04f 0200 	mov.w	r2, #0
 8006e86:	f04f 0300 	mov.w	r3, #0
 8006e8a:	00eb      	lsls	r3, r5, #3
 8006e8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e90:	00e2      	lsls	r2, r4, #3
 8006e92:	4614      	mov	r4, r2
 8006e94:	461d      	mov	r5, r3
 8006e96:	eb14 030a 	adds.w	r3, r4, sl
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	eb45 030b 	adc.w	r3, r5, fp
 8006ea0:	607b      	str	r3, [r7, #4]
 8006ea2:	f04f 0200 	mov.w	r2, #0
 8006ea6:	f04f 0300 	mov.w	r3, #0
 8006eaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006eae:	4629      	mov	r1, r5
 8006eb0:	028b      	lsls	r3, r1, #10
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006eb8:	4621      	mov	r1, r4
 8006eba:	028a      	lsls	r2, r1, #10
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	60bb      	str	r3, [r7, #8]
 8006ec6:	60fa      	str	r2, [r7, #12]
 8006ec8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ecc:	f7f9 fe8c 	bl	8000be8 <__aeabi_uldivmod>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8006f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	0c1b      	lsrs	r3, r3, #16
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006ee8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ef2:	e002      	b.n	8006efa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ef4:	4b05      	ldr	r3, [pc, #20]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x184>)
 8006ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3740      	adds	r7, #64	@ 0x40
 8006f00:	46bd      	mov	sp, r7
 8006f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f06:	bf00      	nop
 8006f08:	40023800 	.word	0x40023800
 8006f0c:	00f42400 	.word	0x00f42400
 8006f10:	017d7840 	.word	0x017d7840

08006f14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f18:	4b03      	ldr	r3, [pc, #12]	@ (8006f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	20000000 	.word	0x20000000

08006f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f30:	f7ff fff0 	bl	8006f14 <HAL_RCC_GetHCLKFreq>
 8006f34:	4602      	mov	r2, r0
 8006f36:	4b05      	ldr	r3, [pc, #20]	@ (8006f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	0a9b      	lsrs	r3, r3, #10
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	4903      	ldr	r1, [pc, #12]	@ (8006f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f42:	5ccb      	ldrb	r3, [r1, r3]
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	080158cc 	.word	0x080158cc

08006f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f58:	f7ff ffdc 	bl	8006f14 <HAL_RCC_GetHCLKFreq>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	4b05      	ldr	r3, [pc, #20]	@ (8006f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	0b5b      	lsrs	r3, r3, #13
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	4903      	ldr	r1, [pc, #12]	@ (8006f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f6a:	5ccb      	ldrb	r3, [r1, r3]
 8006f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40023800 	.word	0x40023800
 8006f78:	080158cc 	.word	0x080158cc

08006f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d012      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006fa4:	4b69      	ldr	r3, [pc, #420]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	4a68      	ldr	r2, [pc, #416]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006faa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006fae:	6093      	str	r3, [r2, #8]
 8006fb0:	4b66      	ldr	r3, [pc, #408]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fb8:	4964      	ldr	r1, [pc, #400]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d017      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fdc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe4:	4959      	ldr	r1, [pc, #356]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007002:	2301      	movs	r3, #1
 8007004:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d017      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007012:	4b4e      	ldr	r3, [pc, #312]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007018:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007020:	494a      	ldr	r1, [pc, #296]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007022:	4313      	orrs	r3, r2
 8007024:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007030:	d101      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007032:	2301      	movs	r3, #1
 8007034:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800703e:	2301      	movs	r3, #1
 8007040:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800704e:	2301      	movs	r3, #1
 8007050:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 808b 	beq.w	8007176 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007060:	4b3a      	ldr	r3, [pc, #232]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007064:	4a39      	ldr	r2, [pc, #228]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800706a:	6413      	str	r3, [r2, #64]	@ 0x40
 800706c:	4b37      	ldr	r3, [pc, #220]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800706e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007074:	60bb      	str	r3, [r7, #8]
 8007076:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007078:	4b35      	ldr	r3, [pc, #212]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a34      	ldr	r2, [pc, #208]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800707e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007084:	f7fd fafe 	bl	8004684 <HAL_GetTick>
 8007088:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800708a:	e008      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800708c:	f7fd fafa 	bl	8004684 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b64      	cmp	r3, #100	@ 0x64
 8007098:	d901      	bls.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e357      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800709e:	4b2c      	ldr	r3, [pc, #176]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0f0      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070aa:	4b28      	ldr	r3, [pc, #160]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d035      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d02e      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070c8:	4b20      	ldr	r3, [pc, #128]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070d2:	4b1e      	ldr	r3, [pc, #120]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070d6:	4a1d      	ldr	r2, [pc, #116]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070dc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070de:	4b1b      	ldr	r3, [pc, #108]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070e2:	4a1a      	ldr	r2, [pc, #104]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80070ea:	4a18      	ldr	r2, [pc, #96]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80070f0:	4b16      	ldr	r3, [pc, #88]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d114      	bne.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fc:	f7fd fac2 	bl	8004684 <HAL_GetTick>
 8007100:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007102:	e00a      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007104:	f7fd fabe 	bl	8004684 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007112:	4293      	cmp	r3, r2
 8007114:	d901      	bls.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e319      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800711a:	4b0c      	ldr	r3, [pc, #48]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800711c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0ee      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800712e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007132:	d111      	bne.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007134:	4b05      	ldr	r3, [pc, #20]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007140:	4b04      	ldr	r3, [pc, #16]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007142:	400b      	ands	r3, r1
 8007144:	4901      	ldr	r1, [pc, #4]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007146:	4313      	orrs	r3, r2
 8007148:	608b      	str	r3, [r1, #8]
 800714a:	e00b      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800714c:	40023800 	.word	0x40023800
 8007150:	40007000 	.word	0x40007000
 8007154:	0ffffcff 	.word	0x0ffffcff
 8007158:	4baa      	ldr	r3, [pc, #680]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	4aa9      	ldr	r2, [pc, #676]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800715e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007162:	6093      	str	r3, [r2, #8]
 8007164:	4ba7      	ldr	r3, [pc, #668]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007166:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007170:	49a4      	ldr	r1, [pc, #656]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007172:	4313      	orrs	r3, r2
 8007174:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0310 	and.w	r3, r3, #16
 800717e:	2b00      	cmp	r3, #0
 8007180:	d010      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007182:	4ba0      	ldr	r3, [pc, #640]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007188:	4a9e      	ldr	r2, [pc, #632]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800718a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800718e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007192:	4b9c      	ldr	r3, [pc, #624]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007194:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719c:	4999      	ldr	r1, [pc, #612]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00a      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071b0:	4b94      	ldr	r3, [pc, #592]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071be:	4991      	ldr	r1, [pc, #580]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071d2:	4b8c      	ldr	r3, [pc, #560]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071e0:	4988      	ldr	r1, [pc, #544]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00a      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071f4:	4b83      	ldr	r3, [pc, #524]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007202:	4980      	ldr	r1, [pc, #512]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007204:	4313      	orrs	r3, r2
 8007206:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007216:	4b7b      	ldr	r3, [pc, #492]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800721c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007224:	4977      	ldr	r1, [pc, #476]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007226:	4313      	orrs	r3, r2
 8007228:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00a      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007238:	4b72      	ldr	r3, [pc, #456]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800723a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800723e:	f023 0203 	bic.w	r2, r3, #3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007246:	496f      	ldr	r1, [pc, #444]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007248:	4313      	orrs	r3, r2
 800724a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800725a:	4b6a      	ldr	r3, [pc, #424]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800725c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007260:	f023 020c 	bic.w	r2, r3, #12
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007268:	4966      	ldr	r1, [pc, #408]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800726a:	4313      	orrs	r3, r2
 800726c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00a      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800727c:	4b61      	ldr	r3, [pc, #388]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800727e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007282:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800728a:	495e      	ldr	r1, [pc, #376]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800728c:	4313      	orrs	r3, r2
 800728e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800729e:	4b59      	ldr	r3, [pc, #356]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072ac:	4955      	ldr	r1, [pc, #340]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80072c0:	4b50      	ldr	r3, [pc, #320]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ce:	494d      	ldr	r1, [pc, #308]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80072e2:	4b48      	ldr	r3, [pc, #288]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072f0:	4944      	ldr	r1, [pc, #272]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00a      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007304:	4b3f      	ldr	r3, [pc, #252]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800730a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007312:	493c      	ldr	r1, [pc, #240]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007314:	4313      	orrs	r3, r2
 8007316:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00a      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007326:	4b37      	ldr	r3, [pc, #220]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800732c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007334:	4933      	ldr	r1, [pc, #204]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007336:	4313      	orrs	r3, r2
 8007338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00a      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007348:	4b2e      	ldr	r3, [pc, #184]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800734a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800734e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007356:	492b      	ldr	r1, [pc, #172]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007358:	4313      	orrs	r3, r2
 800735a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d011      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800736a:	4b26      	ldr	r3, [pc, #152]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800736c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007370:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007378:	4922      	ldr	r1, [pc, #136]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800737a:	4313      	orrs	r3, r2
 800737c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007388:	d101      	bne.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800738a:	2301      	movs	r3, #1
 800738c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0308 	and.w	r3, r3, #8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800739a:	2301      	movs	r3, #1
 800739c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073aa:	4b16      	ldr	r3, [pc, #88]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073b8:	4912      	ldr	r1, [pc, #72]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00b      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80073cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073dc:	4909      	ldr	r1, [pc, #36]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d006      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 80d9 	beq.w	80075aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073f8:	4b02      	ldr	r3, [pc, #8]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a01      	ldr	r2, [pc, #4]	@ (8007404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007402:	e001      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007404:	40023800 	.word	0x40023800
 8007408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800740a:	f7fd f93b 	bl	8004684 <HAL_GetTick>
 800740e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007410:	e008      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007412:	f7fd f937 	bl	8004684 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	2b64      	cmp	r3, #100	@ 0x64
 800741e:	d901      	bls.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e194      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007424:	4b6c      	ldr	r3, [pc, #432]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1f0      	bne.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b00      	cmp	r3, #0
 800743a:	d021      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007440:	2b00      	cmp	r3, #0
 8007442:	d11d      	bne.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007444:	4b64      	ldr	r3, [pc, #400]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800744a:	0c1b      	lsrs	r3, r3, #16
 800744c:	f003 0303 	and.w	r3, r3, #3
 8007450:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007452:	4b61      	ldr	r3, [pc, #388]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007458:	0e1b      	lsrs	r3, r3, #24
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	019a      	lsls	r2, r3, #6
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	041b      	lsls	r3, r3, #16
 800746a:	431a      	orrs	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	061b      	lsls	r3, r3, #24
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	071b      	lsls	r3, r3, #28
 8007478:	4957      	ldr	r1, [pc, #348]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800747a:	4313      	orrs	r3, r2
 800747c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d004      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007490:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007494:	d00a      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d02e      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074aa:	d129      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80074ac:	4b4a      	ldr	r3, [pc, #296]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074b2:	0c1b      	lsrs	r3, r3, #16
 80074b4:	f003 0303 	and.w	r3, r3, #3
 80074b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074ba:	4b47      	ldr	r3, [pc, #284]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074c0:	0f1b      	lsrs	r3, r3, #28
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	019a      	lsls	r2, r3, #6
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	041b      	lsls	r3, r3, #16
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	061b      	lsls	r3, r3, #24
 80074da:	431a      	orrs	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	071b      	lsls	r3, r3, #28
 80074e0:	493d      	ldr	r1, [pc, #244]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80074e8:	4b3b      	ldr	r3, [pc, #236]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074ee:	f023 021f 	bic.w	r2, r3, #31
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f6:	3b01      	subs	r3, #1
 80074f8:	4937      	ldr	r1, [pc, #220]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01d      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800750c:	4b32      	ldr	r3, [pc, #200]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800750e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007512:	0e1b      	lsrs	r3, r3, #24
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800751a:	4b2f      	ldr	r3, [pc, #188]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800751c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007520:	0f1b      	lsrs	r3, r3, #28
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	019a      	lsls	r2, r3, #6
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	041b      	lsls	r3, r3, #16
 8007534:	431a      	orrs	r2, r3
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	061b      	lsls	r3, r3, #24
 800753a:	431a      	orrs	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	071b      	lsls	r3, r3, #28
 8007540:	4925      	ldr	r1, [pc, #148]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007542:	4313      	orrs	r3, r2
 8007544:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d011      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	019a      	lsls	r2, r3, #6
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	041b      	lsls	r3, r3, #16
 8007560:	431a      	orrs	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	061b      	lsls	r3, r3, #24
 8007568:	431a      	orrs	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	071b      	lsls	r3, r3, #28
 8007570:	4919      	ldr	r1, [pc, #100]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007572:	4313      	orrs	r3, r2
 8007574:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007578:	4b17      	ldr	r3, [pc, #92]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a16      	ldr	r2, [pc, #88]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800757e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007584:	f7fd f87e 	bl	8004684 <HAL_GetTick>
 8007588:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800758a:	e008      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800758c:	f7fd f87a 	bl	8004684 <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	2b64      	cmp	r3, #100	@ 0x64
 8007598:	d901      	bls.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e0d7      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800759e:	4b0e      	ldr	r3, [pc, #56]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0f0      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	f040 80cd 	bne.w	800774c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80075b2:	4b09      	ldr	r3, [pc, #36]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a08      	ldr	r2, [pc, #32]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075be:	f7fd f861 	bl	8004684 <HAL_GetTick>
 80075c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075c4:	e00a      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075c6:	f7fd f85d 	bl	8004684 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b64      	cmp	r3, #100	@ 0x64
 80075d2:	d903      	bls.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e0ba      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80075d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075dc:	4b5e      	ldr	r3, [pc, #376]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075e8:	d0ed      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x682>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d009      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007606:	2b00      	cmp	r3, #0
 8007608:	d02e      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d12a      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007612:	4b51      	ldr	r3, [pc, #324]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007618:	0c1b      	lsrs	r3, r3, #16
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007620:	4b4d      	ldr	r3, [pc, #308]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007626:	0f1b      	lsrs	r3, r3, #28
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	019a      	lsls	r2, r3, #6
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	041b      	lsls	r3, r3, #16
 8007638:	431a      	orrs	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	061b      	lsls	r3, r3, #24
 8007640:	431a      	orrs	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	071b      	lsls	r3, r3, #28
 8007646:	4944      	ldr	r1, [pc, #272]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007648:	4313      	orrs	r3, r2
 800764a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800764e:	4b42      	ldr	r3, [pc, #264]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007654:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765c:	3b01      	subs	r3, #1
 800765e:	021b      	lsls	r3, r3, #8
 8007660:	493d      	ldr	r1, [pc, #244]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007662:	4313      	orrs	r3, r2
 8007664:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d022      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007678:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800767c:	d11d      	bne.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800767e:	4b36      	ldr	r3, [pc, #216]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007684:	0e1b      	lsrs	r3, r3, #24
 8007686:	f003 030f 	and.w	r3, r3, #15
 800768a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800768c:	4b32      	ldr	r3, [pc, #200]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800768e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007692:	0f1b      	lsrs	r3, r3, #28
 8007694:	f003 0307 	and.w	r3, r3, #7
 8007698:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	019a      	lsls	r2, r3, #6
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	041b      	lsls	r3, r3, #16
 80076a6:	431a      	orrs	r2, r3
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	061b      	lsls	r3, r3, #24
 80076ac:	431a      	orrs	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	071b      	lsls	r3, r3, #28
 80076b2:	4929      	ldr	r1, [pc, #164]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0308 	and.w	r3, r3, #8
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d028      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076c6:	4b24      	ldr	r3, [pc, #144]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076cc:	0e1b      	lsrs	r3, r3, #24
 80076ce:	f003 030f 	and.w	r3, r3, #15
 80076d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80076d4:	4b20      	ldr	r3, [pc, #128]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076da:	0c1b      	lsrs	r3, r3, #16
 80076dc:	f003 0303 	and.w	r3, r3, #3
 80076e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	019a      	lsls	r2, r3, #6
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	041b      	lsls	r3, r3, #16
 80076ec:	431a      	orrs	r2, r3
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	061b      	lsls	r3, r3, #24
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	071b      	lsls	r3, r3, #28
 80076fa:	4917      	ldr	r1, [pc, #92]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007702:	4b15      	ldr	r3, [pc, #84]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007704:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007708:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007710:	4911      	ldr	r1, [pc, #68]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007712:	4313      	orrs	r3, r2
 8007714:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007718:	4b0f      	ldr	r3, [pc, #60]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a0e      	ldr	r2, [pc, #56]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800771e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007724:	f7fc ffae 	bl	8004684 <HAL_GetTick>
 8007728:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800772a:	e008      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800772c:	f7fc ffaa 	bl	8004684 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b64      	cmp	r3, #100	@ 0x64
 8007738:	d901      	bls.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e007      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800773e:	4b06      	ldr	r3, [pc, #24]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007746:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800774a:	d1ef      	bne.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3720      	adds	r7, #32
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	40023800 	.word	0x40023800

0800775c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a80      	ldr	r2, [pc, #512]	@ (800796c <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800776c:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800776e:	4b80      	ldr	r3, [pc, #512]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007774:	099b      	lsrs	r3, r3, #6
 8007776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800777e:	4b7c      	ldr	r3, [pc, #496]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007784:	0c1b      	lsrs	r3, r3, #16
 8007786:	f003 0203 	and.w	r2, r3, #3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800778e:	4b78      	ldr	r3, [pc, #480]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007794:	0e1b      	lsrs	r3, r3, #24
 8007796:	f003 020f 	and.w	r2, r3, #15
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800779e:	4b74      	ldr	r3, [pc, #464]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077a4:	0f1b      	lsrs	r3, r3, #28
 80077a6:	f003 0207 	and.w	r2, r3, #7
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 80077ae:	4b70      	ldr	r3, [pc, #448]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077b4:	099b      	lsrs	r3, r3, #6
 80077b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077be:	4b6c      	ldr	r3, [pc, #432]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c4:	0c1b      	lsrs	r3, r3, #16
 80077c6:	f003 0203 	and.w	r2, r3, #3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80077ce:	4b68      	ldr	r3, [pc, #416]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d4:	0e1b      	lsrs	r3, r3, #24
 80077d6:	f003 020f 	and.w	r2, r3, #15
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80077de:	4b64      	ldr	r3, [pc, #400]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e4:	0f1b      	lsrs	r3, r3, #28
 80077e6:	f003 0207 	and.w	r2, r3, #7
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 80077ee:	4b60      	ldr	r3, [pc, #384]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077f4:	f003 021f 	and.w	r2, r3, #31
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 80077fc:	4b5c      	ldr	r3, [pc, #368]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007802:	0a1b      	lsrs	r3, r3, #8
 8007804:	f003 021f 	and.w	r2, r3, #31
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800780c:	4b58      	ldr	r3, [pc, #352]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800780e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007812:	0c1b      	lsrs	r3, r3, #16
 8007814:	f003 0203 	and.w	r2, r3, #3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800781c:	4b54      	ldr	r3, [pc, #336]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800781e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007822:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800782a:	4b51      	ldr	r3, [pc, #324]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800782c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007830:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8007838:	4b4d      	ldr	r3, [pc, #308]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8007844:	4b4a      	ldr	r3, [pc, #296]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800784a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8007852:	4b47      	ldr	r3, [pc, #284]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007858:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8007860:	4b43      	ldr	r3, [pc, #268]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007866:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800786e:	4b40      	ldr	r3, [pc, #256]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007874:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800787c:	4b3c      	ldr	r3, [pc, #240]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800787e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007882:	f003 0203 	and.w	r2, r3, #3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800788a:	4b39      	ldr	r3, [pc, #228]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800788c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007890:	f003 020c 	and.w	r2, r3, #12
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8007898:	4b35      	ldr	r3, [pc, #212]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800789a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800789e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80078a6:	4b32      	ldr	r3, [pc, #200]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ac:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80078b4:	4b2e      	ldr	r3, [pc, #184]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ba:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80078c2:	4b2b      	ldr	r3, [pc, #172]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078c8:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80078d0:	4b27      	ldr	r3, [pc, #156]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d6:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80078de:	4b24      	ldr	r3, [pc, #144]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e4:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80078ec:	4b20      	ldr	r3, [pc, #128]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078f2:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80078fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007900:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8007908:	4b19      	ldr	r3, [pc, #100]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800790a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800790e:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007916:	4b16      	ldr	r3, [pc, #88]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800791c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007926:	4b12      	ldr	r3, [pc, #72]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800792e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007930:	4b0f      	ldr	r3, [pc, #60]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007934:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	431a      	orrs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8007940:	4b0b      	ldr	r3, [pc, #44]	@ (8007970 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007942:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007946:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d103      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8007954:	e003      	b.n	800795e <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800795c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800795e:	bf00      	nop
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	00fffff1 	.word	0x00fffff1
 8007970:	40023800 	.word	0x40023800

08007974 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800797c:	2300      	movs	r3, #0
 800797e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007984:	2300      	movs	r3, #0
 8007986:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007988:	2300      	movs	r3, #0
 800798a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007992:	f040 808d 	bne.w	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007996:	4b93      	ldr	r3, [pc, #588]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800799c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80079a4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079ac:	d07c      	beq.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079b4:	d87b      	bhi.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d004      	beq.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079c2:	d039      	beq.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80079c4:	e073      	b.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80079c6:	4b87      	ldr	r3, [pc, #540]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d108      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80079d2:	4b84      	ldr	r3, [pc, #528]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079da:	4a83      	ldr	r2, [pc, #524]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80079dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	e007      	b.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80079e4:	4b7f      	ldr	r3, [pc, #508]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079ec:	4a7f      	ldr	r2, [pc, #508]	@ (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80079ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80079f4:	4b7b      	ldr	r3, [pc, #492]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079fa:	0e1b      	lsrs	r3, r3, #24
 80079fc:	f003 030f 	and.w	r3, r3, #15
 8007a00:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007a02:	4b78      	ldr	r3, [pc, #480]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a08:	099b      	lsrs	r3, r3, #6
 8007a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	fb03 f202 	mul.w	r2, r3, r2
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a1a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007a1c:	4b71      	ldr	r3, [pc, #452]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a22:	0a1b      	lsrs	r3, r3, #8
 8007a24:	f003 031f 	and.w	r3, r3, #31
 8007a28:	3301      	adds	r3, #1
 8007a2a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a34:	617b      	str	r3, [r7, #20]
        break;
 8007a36:	e03b      	b.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007a38:	4b6a      	ldr	r3, [pc, #424]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d108      	bne.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a44:	4b67      	ldr	r3, [pc, #412]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a4c:	4a66      	ldr	r2, [pc, #408]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a52:	613b      	str	r3, [r7, #16]
 8007a54:	e007      	b.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007a56:	4b63      	ldr	r3, [pc, #396]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a5e:	4a63      	ldr	r2, [pc, #396]	@ (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a64:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007a66:	4b5f      	ldr	r3, [pc, #380]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a6c:	0e1b      	lsrs	r3, r3, #24
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007a74:	4b5b      	ldr	r3, [pc, #364]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a7a:	099b      	lsrs	r3, r3, #6
 8007a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	fb03 f202 	mul.w	r2, r3, r2
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a8c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007a8e:	4b55      	ldr	r3, [pc, #340]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a94:	f003 031f 	and.w	r3, r3, #31
 8007a98:	3301      	adds	r3, #1
 8007a9a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa4:	617b      	str	r3, [r7, #20]
        break;
 8007aa6:	e003      	b.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007aa8:	4b51      	ldr	r3, [pc, #324]	@ (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007aaa:	617b      	str	r3, [r7, #20]
        break;
 8007aac:	e000      	b.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8007aae:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ab6:	f040 808d 	bne.w	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007aba:	4b4a      	ldr	r3, [pc, #296]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ac0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007ac8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ad0:	d07c      	beq.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ad8:	d87b      	bhi.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d004      	beq.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ae6:	d039      	beq.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007ae8:	e073      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007aea:	4b3e      	ldr	r3, [pc, #248]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d108      	bne.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007af6:	4b3b      	ldr	r3, [pc, #236]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007afe:	4a3a      	ldr	r2, [pc, #232]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b04:	613b      	str	r3, [r7, #16]
 8007b06:	e007      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007b08:	4b36      	ldr	r3, [pc, #216]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b10:	4a36      	ldr	r2, [pc, #216]	@ (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b16:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007b18:	4b32      	ldr	r3, [pc, #200]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b1e:	0e1b      	lsrs	r3, r3, #24
 8007b20:	f003 030f 	and.w	r3, r3, #15
 8007b24:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007b26:	4b2f      	ldr	r3, [pc, #188]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b2c:	099b      	lsrs	r3, r3, #6
 8007b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	fb03 f202 	mul.w	r2, r3, r2
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b3e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007b40:	4b28      	ldr	r3, [pc, #160]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b46:	0a1b      	lsrs	r3, r3, #8
 8007b48:	f003 031f 	and.w	r3, r3, #31
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b58:	617b      	str	r3, [r7, #20]
        break;
 8007b5a:	e03b      	b.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007b5c:	4b21      	ldr	r3, [pc, #132]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d108      	bne.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b68:	4b1e      	ldr	r3, [pc, #120]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b70:	4a1d      	ldr	r2, [pc, #116]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b76:	613b      	str	r3, [r7, #16]
 8007b78:	e007      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b82:	4a1a      	ldr	r2, [pc, #104]	@ (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b88:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007b8a:	4b16      	ldr	r3, [pc, #88]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b90:	0e1b      	lsrs	r3, r3, #24
 8007b92:	f003 030f 	and.w	r3, r3, #15
 8007b96:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007b98:	4b12      	ldr	r3, [pc, #72]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b9e:	099b      	lsrs	r3, r3, #6
 8007ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	fb03 f202 	mul.w	r2, r3, r2
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bb8:	f003 031f 	and.w	r3, r3, #31
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc8:	617b      	str	r3, [r7, #20]
        break;
 8007bca:	e003      	b.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007bcc:	4b08      	ldr	r3, [pc, #32]	@ (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007bce:	617b      	str	r3, [r7, #20]
        break;
 8007bd0:	e000      	b.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8007bd2:	bf00      	nop
      }
    }
  }

  return frequency;
 8007bd4:	697b      	ldr	r3, [r7, #20]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	371c      	adds	r7, #28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	40023800 	.word	0x40023800
 8007be8:	00f42400 	.word	0x00f42400
 8007bec:	017d7840 	.word	0x017d7840
 8007bf0:	00bb8000 	.word	0x00bb8000

08007bf4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b088      	sub	sp, #32
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e156      	b.n	8007ec0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d106      	bne.n	8007c2c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7fa f804 	bl	8001c34 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fad5 	bl	80081e4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d00c      	beq.n	8007c5c <HAL_SAI_Init+0x68>
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d80d      	bhi.n	8007c62 <HAL_SAI_Init+0x6e>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <HAL_SAI_Init+0x5c>
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d003      	beq.n	8007c56 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8007c4e:	e008      	b.n	8007c62 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	61fb      	str	r3, [r7, #28]
      break;
 8007c54:	e006      	b.n	8007c64 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007c56:	2310      	movs	r3, #16
 8007c58:	61fb      	str	r3, [r7, #28]
      break;
 8007c5a:	e003      	b.n	8007c64 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007c5c:	2320      	movs	r3, #32
 8007c5e:	61fb      	str	r3, [r7, #28]
      break;
 8007c60:	e000      	b.n	8007c64 <HAL_SAI_Init+0x70>
      break;
 8007c62:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	d81e      	bhi.n	8007caa <HAL_SAI_Init+0xb6>
 8007c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c74 <HAL_SAI_Init+0x80>)
 8007c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c72:	bf00      	nop
 8007c74:	08007c85 	.word	0x08007c85
 8007c78:	08007c8b 	.word	0x08007c8b
 8007c7c:	08007c93 	.word	0x08007c93
 8007c80:	08007c9b 	.word	0x08007c9b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8007c84:	2300      	movs	r3, #0
 8007c86:	617b      	str	r3, [r7, #20]
    }
    break;
 8007c88:	e010      	b.n	8007cac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007c8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c8e:	617b      	str	r3, [r7, #20]
    }
    break;
 8007c90:	e00c      	b.n	8007cac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007c92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007c96:	617b      	str	r3, [r7, #20]
    }
    break;
 8007c98:	e008      	b.n	8007cac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007c9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007c9e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	f043 0301 	orr.w	r3, r3, #1
 8007ca6:	61fb      	str	r3, [r7, #28]
    }
    break;
 8007ca8:	e000      	b.n	8007cac <HAL_SAI_Init+0xb8>
    default:
      break;
 8007caa:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a85      	ldr	r2, [pc, #532]	@ (8007ec8 <HAL_SAI_Init+0x2d4>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d004      	beq.n	8007cc0 <HAL_SAI_Init+0xcc>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a84      	ldr	r2, [pc, #528]	@ (8007ecc <HAL_SAI_Init+0x2d8>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d103      	bne.n	8007cc8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8007cc0:	4a83      	ldr	r2, [pc, #524]	@ (8007ed0 <HAL_SAI_Init+0x2dc>)
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	e002      	b.n	8007cce <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007cc8:	4a82      	ldr	r2, [pc, #520]	@ (8007ed4 <HAL_SAI_Init+0x2e0>)
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d04c      	beq.n	8007d70 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a7a      	ldr	r2, [pc, #488]	@ (8007ec8 <HAL_SAI_Init+0x2d4>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d004      	beq.n	8007cee <HAL_SAI_Init+0xfa>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a78      	ldr	r2, [pc, #480]	@ (8007ecc <HAL_SAI_Init+0x2d8>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d104      	bne.n	8007cf8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007cee:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007cf2:	f7ff fe3f 	bl	8007974 <HAL_RCCEx_GetPeriphCLKFreq>
 8007cf6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a76      	ldr	r2, [pc, #472]	@ (8007ed8 <HAL_SAI_Init+0x2e4>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d004      	beq.n	8007d0c <HAL_SAI_Init+0x118>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a75      	ldr	r2, [pc, #468]	@ (8007edc <HAL_SAI_Init+0x2e8>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d104      	bne.n	8007d16 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007d0c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007d10:	f7ff fe30 	bl	8007974 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d14:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	461a      	mov	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	025b      	lsls	r3, r3, #9
 8007d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	4a6b      	ldr	r2, [pc, #428]	@ (8007ee0 <HAL_SAI_Init+0x2ec>)
 8007d32:	fba2 2303 	umull	r2, r3, r2, r3
 8007d36:	08da      	lsrs	r2, r3, #3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8007d3c:	68f9      	ldr	r1, [r7, #12]
 8007d3e:	4b68      	ldr	r3, [pc, #416]	@ (8007ee0 <HAL_SAI_Init+0x2ec>)
 8007d40:	fba3 2301 	umull	r2, r3, r3, r1
 8007d44:	08da      	lsrs	r2, r3, #3
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	005b      	lsls	r3, r3, #1
 8007d4e:	1aca      	subs	r2, r1, r3
 8007d50:	2a08      	cmp	r2, #8
 8007d52:	d904      	bls.n	8007d5e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	1c5a      	adds	r2, r3, #1
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d104      	bne.n	8007d70 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	085a      	lsrs	r2, r3, #1
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <HAL_SAI_Init+0x18c>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d109      	bne.n	8007d94 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d101      	bne.n	8007d8c <HAL_SAI_Init+0x198>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	e001      	b.n	8007d90 <HAL_SAI_Init+0x19c>
 8007d8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d90:	61bb      	str	r3, [r7, #24]
 8007d92:	e008      	b.n	8007da6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d102      	bne.n	8007da2 <HAL_SAI_Init+0x1ae>
 8007d9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007da0:	e000      	b.n	8007da4 <HAL_SAI_Init+0x1b0>
 8007da2:	2300      	movs	r3, #0
 8007da4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6819      	ldr	r1, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	4b4c      	ldr	r3, [pc, #304]	@ (8007ee4 <HAL_SAI_Init+0x2f0>)
 8007db2:	400b      	ands	r3, r1
 8007db4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6819      	ldr	r1, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007dca:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8007dde:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007dea:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	051b      	lsls	r3, r3, #20
 8007df2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6859      	ldr	r1, [r3, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	4b38      	ldr	r3, [pc, #224]	@ (8007ee8 <HAL_SAI_Init+0x2f4>)
 8007e08:	400b      	ands	r3, r1
 8007e0a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6859      	ldr	r1, [r3, #4]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	699a      	ldr	r2, [r3, #24]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e1a:	431a      	orrs	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e20:	431a      	orrs	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6899      	ldr	r1, [r3, #8]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	4b2d      	ldr	r3, [pc, #180]	@ (8007eec <HAL_SAI_Init+0x2f8>)
 8007e36:	400b      	ands	r3, r1
 8007e38:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6899      	ldr	r1, [r3, #8]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e44:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007e4a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8007e50:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8007e56:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007e60:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68d9      	ldr	r1, [r3, #12]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007e78:	400b      	ands	r3, r1
 8007e7a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68d9      	ldr	r1, [r3, #12]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e8a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e90:	041b      	lsls	r3, r3, #16
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	021b      	lsls	r3, r3, #8
 8007e9c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3720      	adds	r7, #32
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	40015804 	.word	0x40015804
 8007ecc:	40015824 	.word	0x40015824
 8007ed0:	40015800 	.word	0x40015800
 8007ed4:	40015c00 	.word	0x40015c00
 8007ed8:	40015c04 	.word	0x40015c04
 8007edc:	40015c24 	.word	0x40015c24
 8007ee0:	cccccccd 	.word	0xcccccccd
 8007ee4:	ff05c010 	.word	0xff05c010
 8007ee8:	ffff1ff0 	.word	0xffff1ff0
 8007eec:	fff88000 	.word	0xfff88000

08007ef0 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e027      	b.n	8007f52 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f04f 32ff 	mov.w	r2, #4294967295
 8007f1a:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f961 	bl	80081e4 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f042 0208 	orr.w	r2, r2, #8
 8007f30:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7f9 ff1a 	bl	8001d6c <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d101      	bne.n	8007f74 <HAL_SAI_DMAStop+0x1a>
 8007f70:	2302      	movs	r3, #2
 8007f72:	e061      	b.n	8008038 <HAL_SAI_DMAStop+0xde>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f931 	bl	80081e4 <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007f90:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d01c      	beq.n	8007fd4 <HAL_SAI_DMAStop+0x7a>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b12      	cmp	r3, #18
 8007fa4:	d116      	bne.n	8007fd4 <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fc ff0a 	bl	8004dc4 <HAL_DMA_Abort>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00e      	beq.n	8007fd4 <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fbc:	2b80      	cmp	r3, #128	@ 0x80
 8007fbe:	d009      	beq.n	8007fd4 <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d01c      	beq.n	8008016 <HAL_SAI_DMAStop+0xbc>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b22      	cmp	r3, #34	@ 0x22
 8007fe6:	d116      	bne.n	8008016 <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fc fee9 	bl	8004dc4 <HAL_DMA_Abort>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00e      	beq.n	8008016 <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffe:	2b80      	cmp	r3, #128	@ 0x80
 8008000:	d009      	beq.n	8008016 <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800800c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 0208 	orr.w	r2, r2, #8
 8008024:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8008036:	7bfb      	ldrb	r3, [r7, #15]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	4613      	mov	r3, r2
 800804c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <HAL_SAI_Receive_DMA+0x1a>
 8008054:	88fb      	ldrh	r3, [r7, #6]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e074      	b.n	8008148 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b01      	cmp	r3, #1
 8008068:	d16d      	bne.n	8008146 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8008070:	2b01      	cmp	r3, #1
 8008072:	d101      	bne.n	8008078 <HAL_SAI_Receive_DMA+0x38>
 8008074:	2302      	movs	r3, #2
 8008076:	e067      	b.n	8008148 <HAL_SAI_Receive_DMA+0x108>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	88fa      	ldrh	r2, [r7, #6]
 800808a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	88fa      	ldrh	r2, [r7, #6]
 8008092:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2222      	movs	r2, #34	@ 0x22
 80080a2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080aa:	4a29      	ldr	r2, [pc, #164]	@ (8008150 <HAL_SAI_Receive_DMA+0x110>)
 80080ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080b2:	4a28      	ldr	r2, [pc, #160]	@ (8008154 <HAL_SAI_Receive_DMA+0x114>)
 80080b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ba:	4a27      	ldr	r2, [pc, #156]	@ (8008158 <HAL_SAI_Receive_DMA+0x118>)
 80080bc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080c2:	2200      	movs	r2, #0
 80080c4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	331c      	adds	r3, #28
 80080d0:	4619      	mov	r1, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080d6:	461a      	mov	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80080de:	f7fc fe11 	bl	8004d04 <HAL_DMA_Start_IT>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d005      	beq.n	80080f4 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e029      	b.n	8008148 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80080f4:	2100      	movs	r1, #0
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 f83e 	bl	8008178 <SAI_InterruptFlag>
 80080fc:	4601      	mov	r1, r0
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800811a:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d107      	bne.n	800813a <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008138:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	e000      	b.n	8008148 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8008146:	2302      	movs	r3, #2
  }
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	080082b5 	.word	0x080082b5
 8008154:	08008255 	.word	0x08008255
 8008158:	080082d1 	.word	0x080082d1

0800815c <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800816a:	b2db      	uxtb	r3, r3
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008182:	2301      	movs	r3, #1
 8008184:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d103      	bne.n	8008194 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f043 0308 	orr.w	r3, r3, #8
 8008192:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008198:	2b08      	cmp	r3, #8
 800819a:	d10b      	bne.n	80081b4 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d003      	beq.n	80081ac <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d103      	bne.n	80081b4 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f043 0310 	orr.w	r3, r3, #16
 80081b2:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d003      	beq.n	80081c4 <SAI_InterruptFlag+0x4c>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d104      	bne.n	80081ce <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	e003      	b.n	80081d6 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f043 0304 	orr.w	r3, r3, #4
 80081d4:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80081d6:	68fb      	ldr	r3, [r7, #12]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80081ec:	4b17      	ldr	r3, [pc, #92]	@ (800824c <SAI_Disable+0x68>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a17      	ldr	r2, [pc, #92]	@ (8008250 <SAI_Disable+0x6c>)
 80081f2:	fba2 2303 	umull	r2, r3, r2, r3
 80081f6:	0b1b      	lsrs	r3, r3, #12
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800820e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	1e5a      	subs	r2, r3, #1
 8008214:	60fa      	str	r2, [r7, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10a      	bne.n	8008230 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008220:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	72fb      	strb	r3, [r7, #11]
      break;
 800822e:	e006      	b.n	800823e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e8      	bne.n	8008210 <SAI_Disable+0x2c>

  return status;
 800823e:	7afb      	ldrb	r3, [r7, #11]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	20000000 	.word	0x20000000
 8008250:	95cbec1b 	.word	0x95cbec1b

08008254 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008260:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800826a:	d01c      	beq.n	80082a6 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800827a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008284:	2100      	movs	r1, #0
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f7ff ff76 	bl	8008178 <SAI_InterruptFlag>
 800828c:	4603      	mov	r3, r0
 800828e:	43d9      	mvns	r1, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691a      	ldr	r2, [r3, #16]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	400a      	ands	r2, r1
 800829c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f7fc f800 	bl	80042ac <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80082ac:	bf00      	nop
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7fb fffc 	bl	80042c0 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80082c8:	bf00      	nop
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082dc:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d004      	beq.n	8008302 <SAI_DMAError+0x32>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d112      	bne.n	8008328 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008310:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7ff ff66 	bl	80081e4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7fb fdbf 	bl	8003eac <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b082      	sub	sp, #8
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e022      	b.n	800838e <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b00      	cmp	r3, #0
 8008352:	d105      	bne.n	8008360 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7f9 fd58 	bl	8001e10 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2203      	movs	r2, #3
 8008364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f815 	bl	8008398 <HAL_SD_InitCard>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e00a      	b.n	800838e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008398:	b5b0      	push	{r4, r5, r7, lr}
 800839a:	b08e      	sub	sp, #56	@ 0x38
 800839c:	af04      	add	r7, sp, #16
 800839e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80083a0:	2300      	movs	r3, #0
 80083a2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80083a8:	2300      	movs	r3, #0
 80083aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80083ac:	2300      	movs	r3, #0
 80083ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80083b0:	2300      	movs	r3, #0
 80083b2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80083b4:	2376      	movs	r3, #118	@ 0x76
 80083b6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681d      	ldr	r5, [r3, #0]
 80083bc:	466c      	mov	r4, sp
 80083be:	f107 0314 	add.w	r3, r7, #20
 80083c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083ca:	f107 0308 	add.w	r3, r7, #8
 80083ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083d0:	4628      	mov	r0, r5
 80083d2:	f001 fddf 	bl	8009f94 <SDMMC_Init>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80083dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e059      	b.n	800849c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083f6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f001 fe13 	bl	800a028 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008410:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008412:	2002      	movs	r0, #2
 8008414:	f7fc f942 	bl	800469c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 ff59 	bl	80092d0 <SD_PowerON>
 800841e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	431a      	orrs	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e02e      	b.n	800849c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fe78 	bl	8009134 <SD_InitCard>
 8008444:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00b      	beq.n	8008464 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	431a      	orrs	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e01b      	b.n	800849c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800846c:	4618      	mov	r0, r3
 800846e:	f001 fe6d 	bl	800a14c <SDMMC_CmdBlockLength>
 8008472:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00f      	beq.n	800849a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a09      	ldr	r2, [pc, #36]	@ (80084a4 <HAL_SD_InitCard+0x10c>)
 8008480:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	431a      	orrs	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e000      	b.n	800849c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3728      	adds	r7, #40	@ 0x28
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bdb0      	pop	{r4, r5, r7, pc}
 80084a4:	004005ff 	.word	0x004005ff

080084a8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08c      	sub	sp, #48	@ 0x30
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d107      	bne.n	80084d0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e0c3      	b.n	8008658 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b01      	cmp	r3, #1
 80084da:	f040 80bc 	bne.w	8008656 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80084e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	441a      	add	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d907      	bls.n	8008502 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e0aa      	b.n	8008658 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2203      	movs	r2, #3
 8008506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2200      	movs	r2, #0
 8008510:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008520:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008526:	4a4e      	ldr	r2, [pc, #312]	@ (8008660 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008528:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800852e:	4a4d      	ldr	r2, [pc, #308]	@ (8008664 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008530:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008536:	2200      	movs	r2, #0
 8008538:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800853e:	2200      	movs	r2, #0
 8008540:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3380      	adds	r3, #128	@ 0x80
 8008568:	4619      	mov	r1, r3
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	025b      	lsls	r3, r3, #9
 8008570:	089b      	lsrs	r3, r3, #2
 8008572:	f7fc fbc7 	bl	8004d04 <HAL_DMA_Start_IT>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d017      	beq.n	80085ac <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800858a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a35      	ldr	r2, [pc, #212]	@ (8008668 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008592:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008598:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e055      	b.n	8008658 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f042 0208 	orr.w	r2, r2, #8
 80085ba:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d002      	beq.n	80085ca <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80085c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c6:	025b      	lsls	r3, r3, #9
 80085c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80085ca:	f04f 33ff 	mov.w	r3, #4294967295
 80085ce:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	025b      	lsls	r3, r3, #9
 80085d4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80085d6:	2390      	movs	r3, #144	@ 0x90
 80085d8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80085da:	2302      	movs	r3, #2
 80085dc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80085de:	2300      	movs	r3, #0
 80085e0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80085e2:	2301      	movs	r3, #1
 80085e4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f107 0210 	add.w	r2, r7, #16
 80085ee:	4611      	mov	r1, r2
 80085f0:	4618      	mov	r0, r3
 80085f2:	f001 fd7f 	bl	800a0f4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d90a      	bls.n	8008612 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2282      	movs	r2, #130	@ 0x82
 8008600:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008608:	4618      	mov	r0, r3
 800860a:	f001 fde3 	bl	800a1d4 <SDMMC_CmdReadMultiBlock>
 800860e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008610:	e009      	b.n	8008626 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2281      	movs	r2, #129	@ 0x81
 8008616:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800861e:	4618      	mov	r0, r3
 8008620:	f001 fdb6 	bl	800a190 <SDMMC_CmdReadSingleBlock>
 8008624:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008628:	2b00      	cmp	r3, #0
 800862a:	d012      	beq.n	8008652 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a0d      	ldr	r2, [pc, #52]	@ (8008668 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008632:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863a:	431a      	orrs	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e002      	b.n	8008658 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	e000      	b.n	8008658 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008656:	2302      	movs	r3, #2
  }
}
 8008658:	4618      	mov	r0, r3
 800865a:	3730      	adds	r7, #48	@ 0x30
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	08008f43 	.word	0x08008f43
 8008664:	08008fb5 	.word	0x08008fb5
 8008668:	004005ff 	.word	0x004005ff

0800866c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08c      	sub	sp, #48	@ 0x30
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d107      	bne.n	8008694 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008688:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e0c6      	b.n	8008822 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b01      	cmp	r3, #1
 800869e:	f040 80bf 	bne.w	8008820 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80086a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	441a      	add	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d907      	bls.n	80086c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ba:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e0ad      	b.n	8008822 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2203      	movs	r2, #3
 80086ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2200      	movs	r2, #0
 80086d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f042 021a 	orr.w	r2, r2, #26
 80086e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ea:	4a50      	ldr	r2, [pc, #320]	@ (800882c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80086ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086f2:	4a4f      	ldr	r2, [pc, #316]	@ (8008830 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80086f4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086fa:	2200      	movs	r2, #0
 80086fc:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008702:	2b01      	cmp	r3, #1
 8008704:	d002      	beq.n	800870c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008708:	025b      	lsls	r3, r3, #9
 800870a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d90a      	bls.n	8008728 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	22a0      	movs	r2, #160	@ 0xa0
 8008716:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800871e:	4618      	mov	r0, r3
 8008720:	f001 fd9c 	bl	800a25c <SDMMC_CmdWriteMultiBlock>
 8008724:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008726:	e009      	b.n	800873c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2290      	movs	r2, #144	@ 0x90
 800872c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008734:	4618      	mov	r0, r3
 8008736:	f001 fd6f 	bl	800a218 <SDMMC_CmdWriteSingleBlock>
 800873a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800873c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873e:	2b00      	cmp	r3, #0
 8008740:	d012      	beq.n	8008768 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a3b      	ldr	r2, [pc, #236]	@ (8008834 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008748:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800874e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008750:	431a      	orrs	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e05c      	b.n	8008822 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f042 0208 	orr.w	r2, r2, #8
 8008776:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800877c:	2240      	movs	r2, #64	@ 0x40
 800877e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008790:	689a      	ldr	r2, [r3, #8]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	430a      	orrs	r2, r1
 800879a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80087a0:	68b9      	ldr	r1, [r7, #8]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3380      	adds	r3, #128	@ 0x80
 80087a8:	461a      	mov	r2, r3
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	025b      	lsls	r3, r3, #9
 80087ae:	089b      	lsrs	r3, r3, #2
 80087b0:	f7fc faa8 	bl	8004d04 <HAL_DMA_Start_IT>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d01a      	beq.n	80087f0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f022 021a 	bic.w	r2, r2, #26
 80087c8:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a19      	ldr	r2, [pc, #100]	@ (8008834 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80087d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e018      	b.n	8008822 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087f0:	f04f 33ff 	mov.w	r3, #4294967295
 80087f4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	025b      	lsls	r3, r3, #9
 80087fa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80087fc:	2390      	movs	r3, #144	@ 0x90
 80087fe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008800:	2300      	movs	r3, #0
 8008802:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008804:	2300      	movs	r3, #0
 8008806:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008808:	2301      	movs	r3, #1
 800880a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f107 0210 	add.w	r2, r7, #16
 8008814:	4611      	mov	r1, r2
 8008816:	4618      	mov	r0, r3
 8008818:	f001 fc6c 	bl	800a0f4 <SDMMC_ConfigData>

      return HAL_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	e000      	b.n	8008822 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008820:	2302      	movs	r3, #2
  }
}
 8008822:	4618      	mov	r0, r3
 8008824:	3730      	adds	r7, #48	@ 0x30
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	08008f19 	.word	0x08008f19
 8008830:	08008fb5 	.word	0x08008fb5
 8008834:	004005ff 	.word	0x004005ff

08008838 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008844:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800884c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d008      	beq.n	8008866 <HAL_SD_IRQHandler+0x2e>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f003 0308 	and.w	r3, r3, #8
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fdec 	bl	800943c <SD_Read_IT>
 8008864:	e15a      	b.n	8008b1c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800886c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 808d 	beq.w	8008990 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800887e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	4b9a      	ldr	r3, [pc, #616]	@ (8008af4 <HAL_SD_IRQHandler+0x2bc>)
 800888c:	400b      	ands	r3, r1
 800888e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 0201 	bic.w	r2, r2, #1
 800889e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f003 0308 	and.w	r3, r3, #8
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d039      	beq.n	800891e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f003 0302 	and.w	r3, r3, #2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d104      	bne.n	80088be <HAL_SD_IRQHandler+0x86>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f003 0320 	and.w	r3, r3, #32
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d011      	beq.n	80088e2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f001 fcec 	bl	800a2a0 <SDMMC_CmdStopTransfer>
 80088c8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d008      	beq.n	80088e2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	431a      	orrs	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f921 	bl	8008b24 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80088ea:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d104      	bne.n	800890e <HAL_SD_IRQHandler+0xd6>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d003      	beq.n	8008916 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f002 fc76 	bl	800b200 <HAL_SD_RxCpltCallback>
 8008914:	e102      	b.n	8008b1c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f002 fc68 	bl	800b1ec <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800891c:	e0fe      	b.n	8008b1c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 80f9 	beq.w	8008b1c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f003 0320 	and.w	r3, r3, #32
 8008930:	2b00      	cmp	r3, #0
 8008932:	d011      	beq.n	8008958 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4618      	mov	r0, r3
 800893a:	f001 fcb1 	bl	800a2a0 <SDMMC_CmdStopTransfer>
 800893e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d008      	beq.n	8008958 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	431a      	orrs	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f8e6 	bl	8008b24 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	2b00      	cmp	r3, #0
 8008960:	f040 80dc 	bne.w	8008b1c <HAL_SD_IRQHandler+0x2e4>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b00      	cmp	r3, #0
 800896c:	f040 80d6 	bne.w	8008b1c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f022 0208 	bic.w	r2, r2, #8
 800897e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f002 fc2f 	bl	800b1ec <HAL_SD_TxCpltCallback>
}
 800898e:	e0c5      	b.n	8008b1c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d008      	beq.n	80089b0 <HAL_SD_IRQHandler+0x178>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f003 0308 	and.w	r3, r3, #8
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d003      	beq.n	80089b0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fd98 	bl	80094de <SD_Write_IT>
 80089ae:	e0b5      	b.n	8008b1c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089b6:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 80ae 	beq.w	8008b1c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d005      	beq.n	80089da <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d2:	f043 0202 	orr.w	r2, r3, #2
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089e0:	f003 0308 	and.w	r3, r3, #8
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d005      	beq.n	80089f4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ec:	f043 0208 	orr.w	r2, r3, #8
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089fa:	f003 0320 	and.w	r3, r3, #32
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d005      	beq.n	8008a0e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a06:	f043 0220 	orr.w	r2, r3, #32
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a14:	f003 0310 	and.w	r3, r3, #16
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d005      	beq.n	8008a28 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a20:	f043 0210 	orr.w	r2, r3, #16
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008a30:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008a40:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 fc2a 	bl	800a2a0 <SDMMC_CmdStopTransfer>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a52:	431a      	orrs	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f003 0308 	and.w	r3, r3, #8
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00a      	beq.n	8008a78 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f857 	bl	8008b24 <HAL_SD_ErrorCallback>
}
 8008a76:	e051      	b.n	8008b1c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d04c      	beq.n	8008b1c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f003 0310 	and.w	r3, r3, #16
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d104      	bne.n	8008a96 <HAL_SD_IRQHandler+0x25e>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f003 0320 	and.w	r3, r3, #32
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d011      	beq.n	8008aba <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a9a:	4a17      	ldr	r2, [pc, #92]	@ (8008af8 <HAL_SD_IRQHandler+0x2c0>)
 8008a9c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fc f9fe 	bl	8004ea4 <HAL_DMA_Abort_IT>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d036      	beq.n	8008b1c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 fad0 	bl	8009058 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008ab8:	e030      	b.n	8008b1c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d104      	bne.n	8008ace <HAL_SD_IRQHandler+0x296>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d018      	beq.n	8008b00 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8008afc <HAL_SD_IRQHandler+0x2c4>)
 8008ad4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fc f9e2 	bl	8004ea4 <HAL_DMA_Abort_IT>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d01a      	beq.n	8008b1c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 faeb 	bl	80090c6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008af0:	e014      	b.n	8008b1c <HAL_SD_IRQHandler+0x2e4>
 8008af2:	bf00      	nop
 8008af4:	ffff3ec5 	.word	0xffff3ec5
 8008af8:	08009059 	.word	0x08009059
 8008afc:	080090c7 	.word	0x080090c7
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f002 fb5f 	bl	800b1d8 <HAL_SD_AbortCallback>
}
 8008b1a:	e7ff      	b.n	8008b1c <HAL_SD_IRQHandler+0x2e4>
 8008b1c:	bf00      	nop
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b46:	0f9b      	lsrs	r3, r3, #30
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b52:	0e9b      	lsrs	r3, r3, #26
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	f003 030f 	and.w	r3, r3, #15
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b64:	0e1b      	lsrs	r3, r3, #24
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	f003 0303 	and.w	r3, r3, #3
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b76:	0c1b      	lsrs	r3, r3, #16
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b82:	0a1b      	lsrs	r3, r3, #8
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b98:	0d1b      	lsrs	r3, r3, #20
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ba4:	0c1b      	lsrs	r3, r3, #16
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	f003 030f 	and.w	r3, r3, #15
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bb6:	0bdb      	lsrs	r3, r3, #15
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bc8:	0b9b      	lsrs	r3, r3, #14
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bda:	0b5b      	lsrs	r3, r3, #13
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	b2da      	uxtb	r2, r3
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bec:	0b1b      	lsrs	r3, r3, #12
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d163      	bne.n	8008cd0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c0c:	009a      	lsls	r2, r3, #2
 8008c0e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008c12:	4013      	ands	r3, r2
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008c18:	0f92      	lsrs	r2, r2, #30
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c24:	0edb      	lsrs	r3, r3, #27
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	f003 0307 	and.w	r3, r3, #7
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c36:	0e1b      	lsrs	r3, r3, #24
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c48:	0d5b      	lsrs	r3, r3, #21
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	f003 0307 	and.w	r3, r3, #7
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c5a:	0c9b      	lsrs	r3, r3, #18
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	f003 0307 	and.w	r3, r3, #7
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c6c:	0bdb      	lsrs	r3, r3, #15
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	f003 0307 	and.w	r3, r3, #7
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	7e1b      	ldrb	r3, [r3, #24]
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	f003 0307 	and.w	r3, r3, #7
 8008c8e:	3302      	adds	r3, #2
 8008c90:	2201      	movs	r2, #1
 8008c92:	fa02 f303 	lsl.w	r3, r2, r3
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008c9a:	fb03 f202 	mul.w	r2, r3, r2
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	7a1b      	ldrb	r3, [r3, #8]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	f003 030f 	and.w	r3, r3, #15
 8008cac:	2201      	movs	r2, #1
 8008cae:	409a      	lsls	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008cbc:	0a52      	lsrs	r2, r2, #9
 8008cbe:	fb03 f202 	mul.w	r2, r3, r2
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ccc:	661a      	str	r2, [r3, #96]	@ 0x60
 8008cce:	e031      	b.n	8008d34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d11d      	bne.n	8008d14 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cdc:	041b      	lsls	r3, r3, #16
 8008cde:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ce6:	0c1b      	lsrs	r3, r3, #16
 8008ce8:	431a      	orrs	r2, r3
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	029a      	lsls	r2, r3, #10
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d08:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	661a      	str	r2, [r3, #96]	@ 0x60
 8008d12:	e00f      	b.n	8008d34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a58      	ldr	r2, [pc, #352]	@ (8008e7c <HAL_SD_GetCardCSD+0x344>)
 8008d1a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d20:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e09d      	b.n	8008e70 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d38:	0b9b      	lsrs	r3, r3, #14
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d4a:	09db      	lsrs	r3, r3, #7
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d6c:	0fdb      	lsrs	r3, r3, #31
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d78:	0f5b      	lsrs	r3, r3, #29
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	f003 0303 	and.w	r3, r3, #3
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d8a:	0e9b      	lsrs	r3, r3, #26
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	f003 0307 	and.w	r3, r3, #7
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d9c:	0d9b      	lsrs	r3, r3, #22
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	f003 030f 	and.w	r3, r3, #15
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dae:	0d5b      	lsrs	r3, r3, #21
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dca:	0c1b      	lsrs	r3, r3, #16
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dde:	0bdb      	lsrs	r3, r3, #15
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008df2:	0b9b      	lsrs	r3, r3, #14
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e06:	0b5b      	lsrs	r3, r3, #13
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e1a:	0b1b      	lsrs	r3, r3, #12
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e2e:	0a9b      	lsrs	r3, r3, #10
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	f003 0303 	and.w	r3, r3, #3
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e42:	0a1b      	lsrs	r3, r3, #8
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e56:	085b      	lsrs	r3, r3, #1
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	004005ff 	.word	0x004005ff

08008e80 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008ee4:	f107 030c 	add.w	r3, r7, #12
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa7e 	bl	80093ec <SD_SendStatus>
 8008ef0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d005      	beq.n	8008f04 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	431a      	orrs	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	0a5b      	lsrs	r3, r3, #9
 8008f08:	f003 030f 	and.w	r3, r3, #15
 8008f0c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008f0e:	693b      	ldr	r3, [r7, #16]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3718      	adds	r7, #24
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f24:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f34:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8008f36:	bf00      	nop
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f54:	2b82      	cmp	r3, #130	@ 0x82
 8008f56:	d111      	bne.n	8008f7c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f001 f99f 	bl	800a2a0 <SDMMC_CmdStopTransfer>
 8008f62:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d008      	beq.n	8008f7c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	431a      	orrs	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7ff fdd4 	bl	8008b24 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0208 	bic.w	r2, r2, #8
 8008f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008f94:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f002 f92b 	bl	800b200 <HAL_SD_RxCpltCallback>
#endif
}
 8008faa:	bf00      	nop
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
	...

08008fb4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b086      	sub	sp, #24
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7fc f91a 	bl	80051fc <HAL_DMA_GetError>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d03e      	beq.n	800904c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fd4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fdc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d002      	beq.n	8008fea <SD_DMAError+0x36>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d12d      	bne.n	8009046 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a19      	ldr	r2, [pc, #100]	@ (8009054 <SD_DMAError+0xa0>)
 8008ff0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009000:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009006:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800900e:	6978      	ldr	r0, [r7, #20]
 8009010:	f7ff ff62 	bl	8008ed8 <HAL_SD_GetCardState>
 8009014:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2b06      	cmp	r3, #6
 800901a:	d002      	beq.n	8009022 <SD_DMAError+0x6e>
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2b05      	cmp	r3, #5
 8009020:	d10a      	bne.n	8009038 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4618      	mov	r0, r3
 8009028:	f001 f93a 	bl	800a2a0 <SDMMC_CmdStopTransfer>
 800902c:	4602      	mov	r2, r0
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009032:	431a      	orrs	r2, r3
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	2200      	movs	r2, #0
 8009044:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009046:	6978      	ldr	r0, [r7, #20]
 8009048:	f7ff fd6c 	bl	8008b24 <HAL_SD_ErrorCallback>
#endif
  }
}
 800904c:	bf00      	nop
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	004005ff 	.word	0x004005ff

08009058 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009064:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800906e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f7ff ff31 	bl	8008ed8 <HAL_SD_GetCardState>
 8009076:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2b06      	cmp	r3, #6
 800908a:	d002      	beq.n	8009092 <SD_DMATxAbort+0x3a>
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	2b05      	cmp	r3, #5
 8009090:	d10a      	bne.n	80090a8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4618      	mov	r0, r3
 8009098:	f001 f902 	bl	800a2a0 <SDMMC_CmdStopTransfer>
 800909c:	4602      	mov	r2, r0
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a2:	431a      	orrs	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d103      	bne.n	80090b8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f002 f891 	bl	800b1d8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80090b6:	e002      	b.n	80090be <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f7ff fd33 	bl	8008b24 <HAL_SD_ErrorCallback>
}
 80090be:	bf00      	nop
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b084      	sub	sp, #16
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80090dc:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f7ff fefa 	bl	8008ed8 <HAL_SD_GetCardState>
 80090e4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2b06      	cmp	r3, #6
 80090f8:	d002      	beq.n	8009100 <SD_DMARxAbort+0x3a>
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	2b05      	cmp	r3, #5
 80090fe:	d10a      	bne.n	8009116 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4618      	mov	r0, r3
 8009106:	f001 f8cb 	bl	800a2a0 <SDMMC_CmdStopTransfer>
 800910a:	4602      	mov	r2, r0
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009110:	431a      	orrs	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800911a:	2b00      	cmp	r3, #0
 800911c:	d103      	bne.n	8009126 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f002 f85a 	bl	800b1d8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009124:	e002      	b.n	800912c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f7ff fcfc 	bl	8008b24 <HAL_SD_ErrorCallback>
}
 800912c:	bf00      	nop
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009134:	b5b0      	push	{r4, r5, r7, lr}
 8009136:	b094      	sub	sp, #80	@ 0x50
 8009138:	af04      	add	r7, sp, #16
 800913a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800913c:	2301      	movs	r3, #1
 800913e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4618      	mov	r0, r3
 8009146:	f000 ff7d 	bl	800a044 <SDMMC_GetPowerState>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d102      	bne.n	8009156 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009150:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009154:	e0b8      	b.n	80092c8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800915a:	2b03      	cmp	r3, #3
 800915c:	d02f      	beq.n	80091be <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4618      	mov	r0, r3
 8009164:	f001 f964 	bl	800a430 <SDMMC_CmdSendCID>
 8009168:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800916a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <SD_InitCard+0x40>
    {
      return errorstate;
 8009170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009172:	e0a9      	b.n	80092c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2100      	movs	r1, #0
 800917a:	4618      	mov	r0, r3
 800917c:	f000 ffa7 	bl	800a0ce <SDMMC_GetResponse>
 8009180:	4602      	mov	r2, r0
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2104      	movs	r1, #4
 800918c:	4618      	mov	r0, r3
 800918e:	f000 ff9e 	bl	800a0ce <SDMMC_GetResponse>
 8009192:	4602      	mov	r2, r0
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2108      	movs	r1, #8
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 ff95 	bl	800a0ce <SDMMC_GetResponse>
 80091a4:	4602      	mov	r2, r0
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	210c      	movs	r1, #12
 80091b0:	4618      	mov	r0, r3
 80091b2:	f000 ff8c 	bl	800a0ce <SDMMC_GetResponse>
 80091b6:	4602      	mov	r2, r0
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091c2:	2b03      	cmp	r3, #3
 80091c4:	d00d      	beq.n	80091e2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f107 020e 	add.w	r2, r7, #14
 80091ce:	4611      	mov	r1, r2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f001 f96a 	bl	800a4aa <SDMMC_CmdSetRelAdd>
 80091d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80091d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <SD_InitCard+0xae>
    {
      return errorstate;
 80091de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091e0:	e072      	b.n	80092c8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d036      	beq.n	8009258 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80091ea:	89fb      	ldrh	r3, [r7, #14]
 80091ec:	461a      	mov	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091fa:	041b      	lsls	r3, r3, #16
 80091fc:	4619      	mov	r1, r3
 80091fe:	4610      	mov	r0, r2
 8009200:	f001 f934 	bl	800a46c <SDMMC_CmdSendCSD>
 8009204:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <SD_InitCard+0xdc>
    {
      return errorstate;
 800920c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800920e:	e05b      	b.n	80092c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2100      	movs	r1, #0
 8009216:	4618      	mov	r0, r3
 8009218:	f000 ff59 	bl	800a0ce <SDMMC_GetResponse>
 800921c:	4602      	mov	r2, r0
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2104      	movs	r1, #4
 8009228:	4618      	mov	r0, r3
 800922a:	f000 ff50 	bl	800a0ce <SDMMC_GetResponse>
 800922e:	4602      	mov	r2, r0
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2108      	movs	r1, #8
 800923a:	4618      	mov	r0, r3
 800923c:	f000 ff47 	bl	800a0ce <SDMMC_GetResponse>
 8009240:	4602      	mov	r2, r0
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	210c      	movs	r1, #12
 800924c:	4618      	mov	r0, r3
 800924e:	f000 ff3e 	bl	800a0ce <SDMMC_GetResponse>
 8009252:	4602      	mov	r2, r0
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2104      	movs	r1, #4
 800925e:	4618      	mov	r0, r3
 8009260:	f000 ff35 	bl	800a0ce <SDMMC_GetResponse>
 8009264:	4603      	mov	r3, r0
 8009266:	0d1a      	lsrs	r2, r3, #20
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800926c:	f107 0310 	add.w	r3, r7, #16
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff fc60 	bl	8008b38 <HAL_SD_GetCardCSD>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d002      	beq.n	8009284 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800927e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009282:	e021      	b.n	80092c8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6819      	ldr	r1, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800928c:	041b      	lsls	r3, r3, #16
 800928e:	2200      	movs	r2, #0
 8009290:	461c      	mov	r4, r3
 8009292:	4615      	mov	r5, r2
 8009294:	4622      	mov	r2, r4
 8009296:	462b      	mov	r3, r5
 8009298:	4608      	mov	r0, r1
 800929a:	f001 f823 	bl	800a2e4 <SDMMC_CmdSelDesel>
 800929e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80092a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <SD_InitCard+0x176>
  {
    return errorstate;
 80092a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092a8:	e00e      	b.n	80092c8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681d      	ldr	r5, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	466c      	mov	r4, sp
 80092b2:	f103 0210 	add.w	r2, r3, #16
 80092b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80092b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80092bc:	3304      	adds	r3, #4
 80092be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092c0:	4628      	mov	r0, r5
 80092c2:	f000 fe67 	bl	8009f94 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3740      	adds	r7, #64	@ 0x40
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bdb0      	pop	{r4, r5, r7, pc}

080092d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092d8:	2300      	movs	r3, #0
 80092da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80092dc:	2300      	movs	r3, #0
 80092de:	617b      	str	r3, [r7, #20]
 80092e0:	2300      	movs	r3, #0
 80092e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f001 f81e 	bl	800a32a <SDMMC_CmdGoIdleState>
 80092ee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <SD_PowerON+0x2a>
  {
    return errorstate;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	e072      	b.n	80093e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4618      	mov	r0, r3
 8009300:	f001 f831 	bl	800a366 <SDMMC_CmdOperCond>
 8009304:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00d      	beq.n	8009328 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4618      	mov	r0, r3
 8009318:	f001 f807 	bl	800a32a <SDMMC_CmdGoIdleState>
 800931c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d004      	beq.n	800932e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	e05b      	b.n	80093e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009332:	2b01      	cmp	r3, #1
 8009334:	d137      	bne.n	80093a6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2100      	movs	r1, #0
 800933c:	4618      	mov	r0, r3
 800933e:	f001 f831 	bl	800a3a4 <SDMMC_CmdAppCommand>
 8009342:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d02d      	beq.n	80093a6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800934a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800934e:	e047      	b.n	80093e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2100      	movs	r1, #0
 8009356:	4618      	mov	r0, r3
 8009358:	f001 f824 	bl	800a3a4 <SDMMC_CmdAppCommand>
 800935c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <SD_PowerON+0x98>
    {
      return errorstate;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	e03b      	b.n	80093e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	491e      	ldr	r1, [pc, #120]	@ (80093e8 <SD_PowerON+0x118>)
 800936e:	4618      	mov	r0, r3
 8009370:	f001 f83a 	bl	800a3e8 <SDMMC_CmdAppOperCommand>
 8009374:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800937c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009380:	e02e      	b.n	80093e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2100      	movs	r1, #0
 8009388:	4618      	mov	r0, r3
 800938a:	f000 fea0 	bl	800a0ce <SDMMC_GetResponse>
 800938e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	0fdb      	lsrs	r3, r3, #31
 8009394:	2b01      	cmp	r3, #1
 8009396:	d101      	bne.n	800939c <SD_PowerON+0xcc>
 8009398:	2301      	movs	r3, #1
 800939a:	e000      	b.n	800939e <SD_PowerON+0xce>
 800939c:	2300      	movs	r3, #0
 800939e:	613b      	str	r3, [r7, #16]

    count++;
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	3301      	adds	r3, #1
 80093a4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d802      	bhi.n	80093b6 <SD_PowerON+0xe6>
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d0cc      	beq.n	8009350 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80093bc:	4293      	cmp	r3, r2
 80093be:	d902      	bls.n	80093c6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80093c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80093c4:	e00c      	b.n	80093e0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d003      	beq.n	80093d8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	645a      	str	r2, [r3, #68]	@ 0x44
 80093d6:	e002      	b.n	80093de <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3718      	adds	r7, #24
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	c1100000 	.word	0xc1100000

080093ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d102      	bne.n	8009402 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80093fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009400:	e018      	b.n	8009434 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800940a:	041b      	lsls	r3, r3, #16
 800940c:	4619      	mov	r1, r3
 800940e:	4610      	mov	r0, r2
 8009410:	f001 f86c 	bl	800a4ec <SDMMC_CmdSendStatus>
 8009414:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <SD_SendStatus+0x34>
  {
    return errorstate;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	e009      	b.n	8009434 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2100      	movs	r1, #0
 8009426:	4618      	mov	r0, r3
 8009428:	f000 fe51 	bl	800a0ce <SDMMC_GetResponse>
 800942c:	4602      	mov	r2, r0
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009448:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800944e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d03f      	beq.n	80094d6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009456:	2300      	movs	r3, #0
 8009458:	617b      	str	r3, [r7, #20]
 800945a:	e033      	b.n	80094c4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4618      	mov	r0, r3
 8009462:	f000 fdc3 	bl	8009fec <SDMMC_ReadFIFO>
 8009466:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	b2da      	uxtb	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3301      	adds	r3, #1
 8009474:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	3b01      	subs	r3, #1
 800947a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	0a1b      	lsrs	r3, r3, #8
 8009480:	b2da      	uxtb	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3301      	adds	r3, #1
 800948a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	3b01      	subs	r3, #1
 8009490:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	0c1b      	lsrs	r3, r3, #16
 8009496:	b2da      	uxtb	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	3301      	adds	r3, #1
 80094a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	3b01      	subs	r3, #1
 80094a6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	0e1b      	lsrs	r3, r3, #24
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3301      	adds	r3, #1
 80094b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	3b01      	subs	r3, #1
 80094bc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	3301      	adds	r3, #1
 80094c2:	617b      	str	r3, [r7, #20]
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	2b07      	cmp	r3, #7
 80094c8:	d9c8      	bls.n	800945c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80094d6:	bf00      	nop
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b086      	sub	sp, #24
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a1b      	ldr	r3, [r3, #32]
 80094ea:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d043      	beq.n	8009580 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80094f8:	2300      	movs	r3, #0
 80094fa:	617b      	str	r3, [r7, #20]
 80094fc:	e037      	b.n	800956e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	3301      	adds	r3, #1
 8009508:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	3b01      	subs	r3, #1
 800950e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	021a      	lsls	r2, r3, #8
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	4313      	orrs	r3, r2
 800951a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3301      	adds	r3, #1
 8009520:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	3b01      	subs	r3, #1
 8009526:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	041a      	lsls	r2, r3, #16
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	4313      	orrs	r3, r2
 8009532:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	3301      	adds	r3, #1
 8009538:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	3b01      	subs	r3, #1
 800953e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	061a      	lsls	r2, r3, #24
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	4313      	orrs	r3, r2
 800954a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	3301      	adds	r3, #1
 8009550:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	3b01      	subs	r3, #1
 8009556:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f107 0208 	add.w	r2, r7, #8
 8009560:	4611      	mov	r1, r2
 8009562:	4618      	mov	r0, r3
 8009564:	f000 fd4f 	bl	800a006 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	3301      	adds	r3, #1
 800956c:	617b      	str	r3, [r7, #20]
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2b07      	cmp	r3, #7
 8009572:	d9c4      	bls.n	80094fe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8009580:	bf00      	nop
 8009582:	3718      	adds	r7, #24
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e040      	b.n	800961c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d106      	bne.n	80095b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7f8 fed6 	bl	800235c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2224      	movs	r2, #36	@ 0x24
 80095b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f022 0201 	bic.w	r2, r2, #1
 80095c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d002      	beq.n	80095d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fb16 	bl	8009c00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f8af 	bl	8009738 <UART_SetConfig>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d101      	bne.n	80095e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e01b      	b.n	800961c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	685a      	ldr	r2, [r3, #4]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80095f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689a      	ldr	r2, [r3, #8]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009602:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f042 0201 	orr.w	r2, r2, #1
 8009612:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fb95 	bl	8009d44 <UART_CheckIdleState>
 800961a:	4603      	mov	r3, r0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08a      	sub	sp, #40	@ 0x28
 8009628:	af02      	add	r7, sp, #8
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	603b      	str	r3, [r7, #0]
 8009630:	4613      	mov	r3, r2
 8009632:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009638:	2b20      	cmp	r3, #32
 800963a:	d177      	bne.n	800972c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d002      	beq.n	8009648 <HAL_UART_Transmit+0x24>
 8009642:	88fb      	ldrh	r3, [r7, #6]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e070      	b.n	800972e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2221      	movs	r2, #33	@ 0x21
 8009658:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800965a:	f7fb f813 	bl	8004684 <HAL_GetTick>
 800965e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	88fa      	ldrh	r2, [r7, #6]
 8009664:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	88fa      	ldrh	r2, [r7, #6]
 800966c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009678:	d108      	bne.n	800968c <HAL_UART_Transmit+0x68>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d104      	bne.n	800968c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009682:	2300      	movs	r3, #0
 8009684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	61bb      	str	r3, [r7, #24]
 800968a:	e003      	b.n	8009694 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009690:	2300      	movs	r3, #0
 8009692:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009694:	e02f      	b.n	80096f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2200      	movs	r2, #0
 800969e:	2180      	movs	r1, #128	@ 0x80
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 fba6 	bl	8009df2 <UART_WaitOnFlagUntilTimeout>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d004      	beq.n	80096b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2220      	movs	r2, #32
 80096b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e03b      	b.n	800972e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10b      	bne.n	80096d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	461a      	mov	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	3302      	adds	r3, #2
 80096d0:	61bb      	str	r3, [r7, #24]
 80096d2:	e007      	b.n	80096e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	781a      	ldrb	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	3301      	adds	r3, #1
 80096e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	3b01      	subs	r3, #1
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1c9      	bne.n	8009696 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2200      	movs	r2, #0
 800970a:	2140      	movs	r1, #64	@ 0x40
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 fb70 	bl	8009df2 <UART_WaitOnFlagUntilTimeout>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d004      	beq.n	8009722 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2220      	movs	r2, #32
 800971c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800971e:	2303      	movs	r3, #3
 8009720:	e005      	b.n	800972e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2220      	movs	r2, #32
 8009726:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	e000      	b.n	800972e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800972c:	2302      	movs	r3, #2
  }
}
 800972e:	4618      	mov	r0, r3
 8009730:	3720      	adds	r7, #32
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b088      	sub	sp, #32
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	689a      	ldr	r2, [r3, #8]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	431a      	orrs	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	431a      	orrs	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	69db      	ldr	r3, [r3, #28]
 8009758:	4313      	orrs	r3, r2
 800975a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	4ba6      	ldr	r3, [pc, #664]	@ (80099fc <UART_SetConfig+0x2c4>)
 8009764:	4013      	ands	r3, r2
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	6812      	ldr	r2, [r2, #0]
 800976a:	6979      	ldr	r1, [r7, #20]
 800976c:	430b      	orrs	r3, r1
 800976e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68da      	ldr	r2, [r3, #12]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	430a      	orrs	r2, r1
 8009784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	4313      	orrs	r3, r2
 8009794:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	430a      	orrs	r2, r1
 80097a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a94      	ldr	r2, [pc, #592]	@ (8009a00 <UART_SetConfig+0x2c8>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d120      	bne.n	80097f6 <UART_SetConfig+0xbe>
 80097b4:	4b93      	ldr	r3, [pc, #588]	@ (8009a04 <UART_SetConfig+0x2cc>)
 80097b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d816      	bhi.n	80097f0 <UART_SetConfig+0xb8>
 80097c2:	a201      	add	r2, pc, #4	@ (adr r2, 80097c8 <UART_SetConfig+0x90>)
 80097c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c8:	080097d9 	.word	0x080097d9
 80097cc:	080097e5 	.word	0x080097e5
 80097d0:	080097df 	.word	0x080097df
 80097d4:	080097eb 	.word	0x080097eb
 80097d8:	2301      	movs	r3, #1
 80097da:	77fb      	strb	r3, [r7, #31]
 80097dc:	e150      	b.n	8009a80 <UART_SetConfig+0x348>
 80097de:	2302      	movs	r3, #2
 80097e0:	77fb      	strb	r3, [r7, #31]
 80097e2:	e14d      	b.n	8009a80 <UART_SetConfig+0x348>
 80097e4:	2304      	movs	r3, #4
 80097e6:	77fb      	strb	r3, [r7, #31]
 80097e8:	e14a      	b.n	8009a80 <UART_SetConfig+0x348>
 80097ea:	2308      	movs	r3, #8
 80097ec:	77fb      	strb	r3, [r7, #31]
 80097ee:	e147      	b.n	8009a80 <UART_SetConfig+0x348>
 80097f0:	2310      	movs	r3, #16
 80097f2:	77fb      	strb	r3, [r7, #31]
 80097f4:	e144      	b.n	8009a80 <UART_SetConfig+0x348>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a83      	ldr	r2, [pc, #524]	@ (8009a08 <UART_SetConfig+0x2d0>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d132      	bne.n	8009866 <UART_SetConfig+0x12e>
 8009800:	4b80      	ldr	r3, [pc, #512]	@ (8009a04 <UART_SetConfig+0x2cc>)
 8009802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009806:	f003 030c 	and.w	r3, r3, #12
 800980a:	2b0c      	cmp	r3, #12
 800980c:	d828      	bhi.n	8009860 <UART_SetConfig+0x128>
 800980e:	a201      	add	r2, pc, #4	@ (adr r2, 8009814 <UART_SetConfig+0xdc>)
 8009810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009814:	08009849 	.word	0x08009849
 8009818:	08009861 	.word	0x08009861
 800981c:	08009861 	.word	0x08009861
 8009820:	08009861 	.word	0x08009861
 8009824:	08009855 	.word	0x08009855
 8009828:	08009861 	.word	0x08009861
 800982c:	08009861 	.word	0x08009861
 8009830:	08009861 	.word	0x08009861
 8009834:	0800984f 	.word	0x0800984f
 8009838:	08009861 	.word	0x08009861
 800983c:	08009861 	.word	0x08009861
 8009840:	08009861 	.word	0x08009861
 8009844:	0800985b 	.word	0x0800985b
 8009848:	2300      	movs	r3, #0
 800984a:	77fb      	strb	r3, [r7, #31]
 800984c:	e118      	b.n	8009a80 <UART_SetConfig+0x348>
 800984e:	2302      	movs	r3, #2
 8009850:	77fb      	strb	r3, [r7, #31]
 8009852:	e115      	b.n	8009a80 <UART_SetConfig+0x348>
 8009854:	2304      	movs	r3, #4
 8009856:	77fb      	strb	r3, [r7, #31]
 8009858:	e112      	b.n	8009a80 <UART_SetConfig+0x348>
 800985a:	2308      	movs	r3, #8
 800985c:	77fb      	strb	r3, [r7, #31]
 800985e:	e10f      	b.n	8009a80 <UART_SetConfig+0x348>
 8009860:	2310      	movs	r3, #16
 8009862:	77fb      	strb	r3, [r7, #31]
 8009864:	e10c      	b.n	8009a80 <UART_SetConfig+0x348>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a68      	ldr	r2, [pc, #416]	@ (8009a0c <UART_SetConfig+0x2d4>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d120      	bne.n	80098b2 <UART_SetConfig+0x17a>
 8009870:	4b64      	ldr	r3, [pc, #400]	@ (8009a04 <UART_SetConfig+0x2cc>)
 8009872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009876:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800987a:	2b30      	cmp	r3, #48	@ 0x30
 800987c:	d013      	beq.n	80098a6 <UART_SetConfig+0x16e>
 800987e:	2b30      	cmp	r3, #48	@ 0x30
 8009880:	d814      	bhi.n	80098ac <UART_SetConfig+0x174>
 8009882:	2b20      	cmp	r3, #32
 8009884:	d009      	beq.n	800989a <UART_SetConfig+0x162>
 8009886:	2b20      	cmp	r3, #32
 8009888:	d810      	bhi.n	80098ac <UART_SetConfig+0x174>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d002      	beq.n	8009894 <UART_SetConfig+0x15c>
 800988e:	2b10      	cmp	r3, #16
 8009890:	d006      	beq.n	80098a0 <UART_SetConfig+0x168>
 8009892:	e00b      	b.n	80098ac <UART_SetConfig+0x174>
 8009894:	2300      	movs	r3, #0
 8009896:	77fb      	strb	r3, [r7, #31]
 8009898:	e0f2      	b.n	8009a80 <UART_SetConfig+0x348>
 800989a:	2302      	movs	r3, #2
 800989c:	77fb      	strb	r3, [r7, #31]
 800989e:	e0ef      	b.n	8009a80 <UART_SetConfig+0x348>
 80098a0:	2304      	movs	r3, #4
 80098a2:	77fb      	strb	r3, [r7, #31]
 80098a4:	e0ec      	b.n	8009a80 <UART_SetConfig+0x348>
 80098a6:	2308      	movs	r3, #8
 80098a8:	77fb      	strb	r3, [r7, #31]
 80098aa:	e0e9      	b.n	8009a80 <UART_SetConfig+0x348>
 80098ac:	2310      	movs	r3, #16
 80098ae:	77fb      	strb	r3, [r7, #31]
 80098b0:	e0e6      	b.n	8009a80 <UART_SetConfig+0x348>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a56      	ldr	r2, [pc, #344]	@ (8009a10 <UART_SetConfig+0x2d8>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d120      	bne.n	80098fe <UART_SetConfig+0x1c6>
 80098bc:	4b51      	ldr	r3, [pc, #324]	@ (8009a04 <UART_SetConfig+0x2cc>)
 80098be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80098c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80098c8:	d013      	beq.n	80098f2 <UART_SetConfig+0x1ba>
 80098ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80098cc:	d814      	bhi.n	80098f8 <UART_SetConfig+0x1c0>
 80098ce:	2b80      	cmp	r3, #128	@ 0x80
 80098d0:	d009      	beq.n	80098e6 <UART_SetConfig+0x1ae>
 80098d2:	2b80      	cmp	r3, #128	@ 0x80
 80098d4:	d810      	bhi.n	80098f8 <UART_SetConfig+0x1c0>
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d002      	beq.n	80098e0 <UART_SetConfig+0x1a8>
 80098da:	2b40      	cmp	r3, #64	@ 0x40
 80098dc:	d006      	beq.n	80098ec <UART_SetConfig+0x1b4>
 80098de:	e00b      	b.n	80098f8 <UART_SetConfig+0x1c0>
 80098e0:	2300      	movs	r3, #0
 80098e2:	77fb      	strb	r3, [r7, #31]
 80098e4:	e0cc      	b.n	8009a80 <UART_SetConfig+0x348>
 80098e6:	2302      	movs	r3, #2
 80098e8:	77fb      	strb	r3, [r7, #31]
 80098ea:	e0c9      	b.n	8009a80 <UART_SetConfig+0x348>
 80098ec:	2304      	movs	r3, #4
 80098ee:	77fb      	strb	r3, [r7, #31]
 80098f0:	e0c6      	b.n	8009a80 <UART_SetConfig+0x348>
 80098f2:	2308      	movs	r3, #8
 80098f4:	77fb      	strb	r3, [r7, #31]
 80098f6:	e0c3      	b.n	8009a80 <UART_SetConfig+0x348>
 80098f8:	2310      	movs	r3, #16
 80098fa:	77fb      	strb	r3, [r7, #31]
 80098fc:	e0c0      	b.n	8009a80 <UART_SetConfig+0x348>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a44      	ldr	r2, [pc, #272]	@ (8009a14 <UART_SetConfig+0x2dc>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d125      	bne.n	8009954 <UART_SetConfig+0x21c>
 8009908:	4b3e      	ldr	r3, [pc, #248]	@ (8009a04 <UART_SetConfig+0x2cc>)
 800990a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800990e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009912:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009916:	d017      	beq.n	8009948 <UART_SetConfig+0x210>
 8009918:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800991c:	d817      	bhi.n	800994e <UART_SetConfig+0x216>
 800991e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009922:	d00b      	beq.n	800993c <UART_SetConfig+0x204>
 8009924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009928:	d811      	bhi.n	800994e <UART_SetConfig+0x216>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <UART_SetConfig+0x1fe>
 800992e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009932:	d006      	beq.n	8009942 <UART_SetConfig+0x20a>
 8009934:	e00b      	b.n	800994e <UART_SetConfig+0x216>
 8009936:	2300      	movs	r3, #0
 8009938:	77fb      	strb	r3, [r7, #31]
 800993a:	e0a1      	b.n	8009a80 <UART_SetConfig+0x348>
 800993c:	2302      	movs	r3, #2
 800993e:	77fb      	strb	r3, [r7, #31]
 8009940:	e09e      	b.n	8009a80 <UART_SetConfig+0x348>
 8009942:	2304      	movs	r3, #4
 8009944:	77fb      	strb	r3, [r7, #31]
 8009946:	e09b      	b.n	8009a80 <UART_SetConfig+0x348>
 8009948:	2308      	movs	r3, #8
 800994a:	77fb      	strb	r3, [r7, #31]
 800994c:	e098      	b.n	8009a80 <UART_SetConfig+0x348>
 800994e:	2310      	movs	r3, #16
 8009950:	77fb      	strb	r3, [r7, #31]
 8009952:	e095      	b.n	8009a80 <UART_SetConfig+0x348>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a2f      	ldr	r2, [pc, #188]	@ (8009a18 <UART_SetConfig+0x2e0>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d125      	bne.n	80099aa <UART_SetConfig+0x272>
 800995e:	4b29      	ldr	r3, [pc, #164]	@ (8009a04 <UART_SetConfig+0x2cc>)
 8009960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009964:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009968:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800996c:	d017      	beq.n	800999e <UART_SetConfig+0x266>
 800996e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009972:	d817      	bhi.n	80099a4 <UART_SetConfig+0x26c>
 8009974:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009978:	d00b      	beq.n	8009992 <UART_SetConfig+0x25a>
 800997a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800997e:	d811      	bhi.n	80099a4 <UART_SetConfig+0x26c>
 8009980:	2b00      	cmp	r3, #0
 8009982:	d003      	beq.n	800998c <UART_SetConfig+0x254>
 8009984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009988:	d006      	beq.n	8009998 <UART_SetConfig+0x260>
 800998a:	e00b      	b.n	80099a4 <UART_SetConfig+0x26c>
 800998c:	2301      	movs	r3, #1
 800998e:	77fb      	strb	r3, [r7, #31]
 8009990:	e076      	b.n	8009a80 <UART_SetConfig+0x348>
 8009992:	2302      	movs	r3, #2
 8009994:	77fb      	strb	r3, [r7, #31]
 8009996:	e073      	b.n	8009a80 <UART_SetConfig+0x348>
 8009998:	2304      	movs	r3, #4
 800999a:	77fb      	strb	r3, [r7, #31]
 800999c:	e070      	b.n	8009a80 <UART_SetConfig+0x348>
 800999e:	2308      	movs	r3, #8
 80099a0:	77fb      	strb	r3, [r7, #31]
 80099a2:	e06d      	b.n	8009a80 <UART_SetConfig+0x348>
 80099a4:	2310      	movs	r3, #16
 80099a6:	77fb      	strb	r3, [r7, #31]
 80099a8:	e06a      	b.n	8009a80 <UART_SetConfig+0x348>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a1b      	ldr	r2, [pc, #108]	@ (8009a1c <UART_SetConfig+0x2e4>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d138      	bne.n	8009a26 <UART_SetConfig+0x2ee>
 80099b4:	4b13      	ldr	r3, [pc, #76]	@ (8009a04 <UART_SetConfig+0x2cc>)
 80099b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099ba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80099be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099c2:	d017      	beq.n	80099f4 <UART_SetConfig+0x2bc>
 80099c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099c8:	d82a      	bhi.n	8009a20 <UART_SetConfig+0x2e8>
 80099ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099ce:	d00b      	beq.n	80099e8 <UART_SetConfig+0x2b0>
 80099d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099d4:	d824      	bhi.n	8009a20 <UART_SetConfig+0x2e8>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <UART_SetConfig+0x2aa>
 80099da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099de:	d006      	beq.n	80099ee <UART_SetConfig+0x2b6>
 80099e0:	e01e      	b.n	8009a20 <UART_SetConfig+0x2e8>
 80099e2:	2300      	movs	r3, #0
 80099e4:	77fb      	strb	r3, [r7, #31]
 80099e6:	e04b      	b.n	8009a80 <UART_SetConfig+0x348>
 80099e8:	2302      	movs	r3, #2
 80099ea:	77fb      	strb	r3, [r7, #31]
 80099ec:	e048      	b.n	8009a80 <UART_SetConfig+0x348>
 80099ee:	2304      	movs	r3, #4
 80099f0:	77fb      	strb	r3, [r7, #31]
 80099f2:	e045      	b.n	8009a80 <UART_SetConfig+0x348>
 80099f4:	2308      	movs	r3, #8
 80099f6:	77fb      	strb	r3, [r7, #31]
 80099f8:	e042      	b.n	8009a80 <UART_SetConfig+0x348>
 80099fa:	bf00      	nop
 80099fc:	efff69f3 	.word	0xefff69f3
 8009a00:	40011000 	.word	0x40011000
 8009a04:	40023800 	.word	0x40023800
 8009a08:	40004400 	.word	0x40004400
 8009a0c:	40004800 	.word	0x40004800
 8009a10:	40004c00 	.word	0x40004c00
 8009a14:	40005000 	.word	0x40005000
 8009a18:	40011400 	.word	0x40011400
 8009a1c:	40007800 	.word	0x40007800
 8009a20:	2310      	movs	r3, #16
 8009a22:	77fb      	strb	r3, [r7, #31]
 8009a24:	e02c      	b.n	8009a80 <UART_SetConfig+0x348>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a72      	ldr	r2, [pc, #456]	@ (8009bf4 <UART_SetConfig+0x4bc>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d125      	bne.n	8009a7c <UART_SetConfig+0x344>
 8009a30:	4b71      	ldr	r3, [pc, #452]	@ (8009bf8 <UART_SetConfig+0x4c0>)
 8009a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a36:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009a3a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009a3e:	d017      	beq.n	8009a70 <UART_SetConfig+0x338>
 8009a40:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009a44:	d817      	bhi.n	8009a76 <UART_SetConfig+0x33e>
 8009a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a4a:	d00b      	beq.n	8009a64 <UART_SetConfig+0x32c>
 8009a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a50:	d811      	bhi.n	8009a76 <UART_SetConfig+0x33e>
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <UART_SetConfig+0x326>
 8009a56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a5a:	d006      	beq.n	8009a6a <UART_SetConfig+0x332>
 8009a5c:	e00b      	b.n	8009a76 <UART_SetConfig+0x33e>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	77fb      	strb	r3, [r7, #31]
 8009a62:	e00d      	b.n	8009a80 <UART_SetConfig+0x348>
 8009a64:	2302      	movs	r3, #2
 8009a66:	77fb      	strb	r3, [r7, #31]
 8009a68:	e00a      	b.n	8009a80 <UART_SetConfig+0x348>
 8009a6a:	2304      	movs	r3, #4
 8009a6c:	77fb      	strb	r3, [r7, #31]
 8009a6e:	e007      	b.n	8009a80 <UART_SetConfig+0x348>
 8009a70:	2308      	movs	r3, #8
 8009a72:	77fb      	strb	r3, [r7, #31]
 8009a74:	e004      	b.n	8009a80 <UART_SetConfig+0x348>
 8009a76:	2310      	movs	r3, #16
 8009a78:	77fb      	strb	r3, [r7, #31]
 8009a7a:	e001      	b.n	8009a80 <UART_SetConfig+0x348>
 8009a7c:	2310      	movs	r3, #16
 8009a7e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a88:	d15b      	bne.n	8009b42 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009a8a:	7ffb      	ldrb	r3, [r7, #31]
 8009a8c:	2b08      	cmp	r3, #8
 8009a8e:	d828      	bhi.n	8009ae2 <UART_SetConfig+0x3aa>
 8009a90:	a201      	add	r2, pc, #4	@ (adr r2, 8009a98 <UART_SetConfig+0x360>)
 8009a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a96:	bf00      	nop
 8009a98:	08009abd 	.word	0x08009abd
 8009a9c:	08009ac5 	.word	0x08009ac5
 8009aa0:	08009acd 	.word	0x08009acd
 8009aa4:	08009ae3 	.word	0x08009ae3
 8009aa8:	08009ad3 	.word	0x08009ad3
 8009aac:	08009ae3 	.word	0x08009ae3
 8009ab0:	08009ae3 	.word	0x08009ae3
 8009ab4:	08009ae3 	.word	0x08009ae3
 8009ab8:	08009adb 	.word	0x08009adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009abc:	f7fd fa36 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 8009ac0:	61b8      	str	r0, [r7, #24]
        break;
 8009ac2:	e013      	b.n	8009aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ac4:	f7fd fa46 	bl	8006f54 <HAL_RCC_GetPCLK2Freq>
 8009ac8:	61b8      	str	r0, [r7, #24]
        break;
 8009aca:	e00f      	b.n	8009aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009acc:	4b4b      	ldr	r3, [pc, #300]	@ (8009bfc <UART_SetConfig+0x4c4>)
 8009ace:	61bb      	str	r3, [r7, #24]
        break;
 8009ad0:	e00c      	b.n	8009aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ad2:	f7fd f959 	bl	8006d88 <HAL_RCC_GetSysClockFreq>
 8009ad6:	61b8      	str	r0, [r7, #24]
        break;
 8009ad8:	e008      	b.n	8009aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ade:	61bb      	str	r3, [r7, #24]
        break;
 8009ae0:	e004      	b.n	8009aec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	77bb      	strb	r3, [r7, #30]
        break;
 8009aea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d074      	beq.n	8009bdc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	005a      	lsls	r2, r3, #1
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	085b      	lsrs	r3, r3, #1
 8009afc:	441a      	add	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	2b0f      	cmp	r3, #15
 8009b0c:	d916      	bls.n	8009b3c <UART_SetConfig+0x404>
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b14:	d212      	bcs.n	8009b3c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	f023 030f 	bic.w	r3, r3, #15
 8009b1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	085b      	lsrs	r3, r3, #1
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	f003 0307 	and.w	r3, r3, #7
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	89fb      	ldrh	r3, [r7, #14]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	89fa      	ldrh	r2, [r7, #14]
 8009b38:	60da      	str	r2, [r3, #12]
 8009b3a:	e04f      	b.n	8009bdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	77bb      	strb	r3, [r7, #30]
 8009b40:	e04c      	b.n	8009bdc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b42:	7ffb      	ldrb	r3, [r7, #31]
 8009b44:	2b08      	cmp	r3, #8
 8009b46:	d828      	bhi.n	8009b9a <UART_SetConfig+0x462>
 8009b48:	a201      	add	r2, pc, #4	@ (adr r2, 8009b50 <UART_SetConfig+0x418>)
 8009b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4e:	bf00      	nop
 8009b50:	08009b75 	.word	0x08009b75
 8009b54:	08009b7d 	.word	0x08009b7d
 8009b58:	08009b85 	.word	0x08009b85
 8009b5c:	08009b9b 	.word	0x08009b9b
 8009b60:	08009b8b 	.word	0x08009b8b
 8009b64:	08009b9b 	.word	0x08009b9b
 8009b68:	08009b9b 	.word	0x08009b9b
 8009b6c:	08009b9b 	.word	0x08009b9b
 8009b70:	08009b93 	.word	0x08009b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b74:	f7fd f9da 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 8009b78:	61b8      	str	r0, [r7, #24]
        break;
 8009b7a:	e013      	b.n	8009ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b7c:	f7fd f9ea 	bl	8006f54 <HAL_RCC_GetPCLK2Freq>
 8009b80:	61b8      	str	r0, [r7, #24]
        break;
 8009b82:	e00f      	b.n	8009ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b84:	4b1d      	ldr	r3, [pc, #116]	@ (8009bfc <UART_SetConfig+0x4c4>)
 8009b86:	61bb      	str	r3, [r7, #24]
        break;
 8009b88:	e00c      	b.n	8009ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b8a:	f7fd f8fd 	bl	8006d88 <HAL_RCC_GetSysClockFreq>
 8009b8e:	61b8      	str	r0, [r7, #24]
        break;
 8009b90:	e008      	b.n	8009ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b96:	61bb      	str	r3, [r7, #24]
        break;
 8009b98:	e004      	b.n	8009ba4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	77bb      	strb	r3, [r7, #30]
        break;
 8009ba2:	bf00      	nop
    }

    if (pclk != 0U)
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d018      	beq.n	8009bdc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	085a      	lsrs	r2, r3, #1
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	441a      	add	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	2b0f      	cmp	r3, #15
 8009bc2:	d909      	bls.n	8009bd8 <UART_SetConfig+0x4a0>
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bca:	d205      	bcs.n	8009bd8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	60da      	str	r2, [r3, #12]
 8009bd6:	e001      	b.n	8009bdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009be8:	7fbb      	ldrb	r3, [r7, #30]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3720      	adds	r7, #32
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	40007c00 	.word	0x40007c00
 8009bf8:	40023800 	.word	0x40023800
 8009bfc:	00f42400 	.word	0x00f42400

08009c00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c0c:	f003 0308 	and.w	r3, r3, #8
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00a      	beq.n	8009c2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	430a      	orrs	r2, r1
 8009c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00a      	beq.n	8009c4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	430a      	orrs	r2, r1
 8009c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c50:	f003 0302 	and.w	r3, r3, #2
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00a      	beq.n	8009c6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c72:	f003 0304 	and.w	r3, r3, #4
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00a      	beq.n	8009c90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c94:	f003 0310 	and.w	r3, r3, #16
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00a      	beq.n	8009cb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	430a      	orrs	r2, r1
 8009cb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb6:	f003 0320 	and.w	r3, r3, #32
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00a      	beq.n	8009cd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d01a      	beq.n	8009d16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cfe:	d10a      	bne.n	8009d16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	430a      	orrs	r2, r1
 8009d14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00a      	beq.n	8009d38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	430a      	orrs	r2, r1
 8009d36:	605a      	str	r2, [r3, #4]
  }
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b08c      	sub	sp, #48	@ 0x30
 8009d48:	af02      	add	r7, sp, #8
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d54:	f7fa fc96 	bl	8004684 <HAL_GetTick>
 8009d58:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0308 	and.w	r3, r3, #8
 8009d64:	2b08      	cmp	r3, #8
 8009d66:	d12e      	bne.n	8009dc6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d70:	2200      	movs	r2, #0
 8009d72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f83b 	bl	8009df2 <UART_WaitOnFlagUntilTimeout>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d021      	beq.n	8009dc6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	e853 3f00 	ldrex	r3, [r3]
 8009d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d96:	623b      	str	r3, [r7, #32]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	61fb      	str	r3, [r7, #28]
 8009da2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da4:	69b9      	ldr	r1, [r7, #24]
 8009da6:	69fa      	ldr	r2, [r7, #28]
 8009da8:	e841 2300 	strex	r3, r2, [r1]
 8009dac:	617b      	str	r3, [r7, #20]
   return(result);
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1e6      	bne.n	8009d82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2220      	movs	r2, #32
 8009db8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	e011      	b.n	8009dea <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2220      	movs	r2, #32
 8009dd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3728      	adds	r7, #40	@ 0x28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b084      	sub	sp, #16
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	60f8      	str	r0, [r7, #12]
 8009dfa:	60b9      	str	r1, [r7, #8]
 8009dfc:	603b      	str	r3, [r7, #0]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e02:	e04f      	b.n	8009ea4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0a:	d04b      	beq.n	8009ea4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e0c:	f7fa fc3a 	bl	8004684 <HAL_GetTick>
 8009e10:	4602      	mov	r2, r0
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	69ba      	ldr	r2, [r7, #24]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d302      	bcc.n	8009e22 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e04e      	b.n	8009ec4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f003 0304 	and.w	r3, r3, #4
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d037      	beq.n	8009ea4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b80      	cmp	r3, #128	@ 0x80
 8009e38:	d034      	beq.n	8009ea4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2b40      	cmp	r3, #64	@ 0x40
 8009e3e:	d031      	beq.n	8009ea4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	f003 0308 	and.w	r3, r3, #8
 8009e4a:	2b08      	cmp	r3, #8
 8009e4c:	d110      	bne.n	8009e70 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2208      	movs	r2, #8
 8009e54:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f000 f838 	bl	8009ecc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2208      	movs	r2, #8
 8009e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e029      	b.n	8009ec4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	69db      	ldr	r3, [r3, #28]
 8009e76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e7e:	d111      	bne.n	8009ea4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e88:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f000 f81e 	bl	8009ecc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2220      	movs	r2, #32
 8009e94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	e00f      	b.n	8009ec4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	69da      	ldr	r2, [r3, #28]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	4013      	ands	r3, r2
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	bf0c      	ite	eq
 8009eb4:	2301      	moveq	r3, #1
 8009eb6:	2300      	movne	r3, #0
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	461a      	mov	r2, r3
 8009ebc:	79fb      	ldrb	r3, [r7, #7]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d0a0      	beq.n	8009e04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b095      	sub	sp, #84	@ 0x54
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ef2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ef4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ef8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009efa:	e841 2300 	strex	r3, r2, [r1]
 8009efe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1e6      	bne.n	8009ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	3308      	adds	r3, #8
 8009f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	e853 3f00 	ldrex	r3, [r3]
 8009f14:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	f023 0301 	bic.w	r3, r3, #1
 8009f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	3308      	adds	r3, #8
 8009f24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f2e:	e841 2300 	strex	r3, r2, [r1]
 8009f32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1e5      	bne.n	8009f06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d118      	bne.n	8009f74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	e853 3f00 	ldrex	r3, [r3]
 8009f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	f023 0310 	bic.w	r3, r3, #16
 8009f56:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f60:	61bb      	str	r3, [r7, #24]
 8009f62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	6979      	ldr	r1, [r7, #20]
 8009f66:	69ba      	ldr	r2, [r7, #24]
 8009f68:	e841 2300 	strex	r3, r2, [r1]
 8009f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e6      	bne.n	8009f42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2220      	movs	r2, #32
 8009f78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009f88:	bf00      	nop
 8009f8a:	3754      	adds	r7, #84	@ 0x54
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009f94:	b084      	sub	sp, #16
 8009f96:	b480      	push	{r7}
 8009f98:	b085      	sub	sp, #20
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	f107 001c 	add.w	r0, r7, #28
 8009fa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009faa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009fac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009fae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009fb2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009fb6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009fba:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009fbe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	4b07      	ldr	r3, [pc, #28]	@ (8009fe8 <SDMMC_Init+0x54>)
 8009fcc:	4013      	ands	r3, r2
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	431a      	orrs	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	b004      	add	sp, #16
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	ffff8100 	.word	0xffff8100

08009fec <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	370c      	adds	r7, #12
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800a006:	b480      	push	{r7}
 800a008:	b083      	sub	sp, #12
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2203      	movs	r2, #3
 800a034:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 0303 	and.w	r3, r3, #3
}
 800a054:	4618      	mov	r0, r3
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a07e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a084:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a08a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	4313      	orrs	r3, r2
 800a090:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68da      	ldr	r2, [r3, #12]
 800a096:	4b06      	ldr	r3, [pc, #24]	@ (800a0b0 <SDMMC_SendCommand+0x50>)
 800a098:	4013      	ands	r3, r2
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	431a      	orrs	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	fffff000 	.word	0xfffff000

0800a0b4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	b2db      	uxtb	r3, r3
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	370c      	adds	r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	3314      	adds	r3, #20
 800a0dc:	461a      	mov	r2, r3
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
}  
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a0fe:	2300      	movs	r3, #0
 800a100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	685a      	ldr	r2, [r3, #4]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a11a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a120:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a126:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a132:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	431a      	orrs	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a13e:	2300      	movs	r3, #0

}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b088      	sub	sp, #32
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a15a:	2310      	movs	r3, #16
 800a15c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a15e:	2340      	movs	r3, #64	@ 0x40
 800a160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a162:	2300      	movs	r3, #0
 800a164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a16a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a16c:	f107 0308 	add.w	r3, r7, #8
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7ff ff74 	bl	800a060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a17c:	2110      	movs	r1, #16
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f9d6 	bl	800a530 <SDMMC_GetCmdResp1>
 800a184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a186:	69fb      	ldr	r3, [r7, #28]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3720      	adds	r7, #32
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b088      	sub	sp, #32
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a19e:	2311      	movs	r3, #17
 800a1a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1a2:	2340      	movs	r3, #64	@ 0x40
 800a1a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1b0:	f107 0308 	add.w	r3, r7, #8
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7ff ff52 	bl	800a060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a1bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1c0:	2111      	movs	r1, #17
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f9b4 	bl	800a530 <SDMMC_GetCmdResp1>
 800a1c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1ca:	69fb      	ldr	r3, [r7, #28]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3720      	adds	r7, #32
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b088      	sub	sp, #32
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a1e2:	2312      	movs	r3, #18
 800a1e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1e6:	2340      	movs	r3, #64	@ 0x40
 800a1e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1f4:	f107 0308 	add.w	r3, r7, #8
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7ff ff30 	bl	800a060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a200:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a204:	2112      	movs	r1, #18
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f992 	bl	800a530 <SDMMC_GetCmdResp1>
 800a20c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a20e:	69fb      	ldr	r3, [r7, #28]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3720      	adds	r7, #32
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a226:	2318      	movs	r3, #24
 800a228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a22a:	2340      	movs	r3, #64	@ 0x40
 800a22c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a22e:	2300      	movs	r3, #0
 800a230:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a232:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a236:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a238:	f107 0308 	add.w	r3, r7, #8
 800a23c:	4619      	mov	r1, r3
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f7ff ff0e 	bl	800a060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a244:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a248:	2118      	movs	r1, #24
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f970 	bl	800a530 <SDMMC_GetCmdResp1>
 800a250:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a252:	69fb      	ldr	r3, [r7, #28]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3720      	adds	r7, #32
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a26a:	2319      	movs	r3, #25
 800a26c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a26e:	2340      	movs	r3, #64	@ 0x40
 800a270:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a272:	2300      	movs	r3, #0
 800a274:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a27a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a27c:	f107 0308 	add.w	r3, r7, #8
 800a280:	4619      	mov	r1, r3
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7ff feec 	bl	800a060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a28c:	2119      	movs	r1, #25
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f94e 	bl	800a530 <SDMMC_GetCmdResp1>
 800a294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a296:	69fb      	ldr	r3, [r7, #28]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3720      	adds	r7, #32
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b088      	sub	sp, #32
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a2ac:	230c      	movs	r3, #12
 800a2ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2b0:	2340      	movs	r3, #64	@ 0x40
 800a2b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2be:	f107 0308 	add.w	r3, r7, #8
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff fecb 	bl	800a060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a2ca:	4a05      	ldr	r2, [pc, #20]	@ (800a2e0 <SDMMC_CmdStopTransfer+0x40>)
 800a2cc:	210c      	movs	r1, #12
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f92e 	bl	800a530 <SDMMC_GetCmdResp1>
 800a2d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2d6:	69fb      	ldr	r3, [r7, #28]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3720      	adds	r7, #32
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	05f5e100 	.word	0x05f5e100

0800a2e4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b08a      	sub	sp, #40	@ 0x28
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a2f4:	2307      	movs	r3, #7
 800a2f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2f8:	2340      	movs	r3, #64	@ 0x40
 800a2fa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a300:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a304:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a306:	f107 0310 	add.w	r3, r7, #16
 800a30a:	4619      	mov	r1, r3
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f7ff fea7 	bl	800a060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a312:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a316:	2107      	movs	r1, #7
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 f909 	bl	800a530 <SDMMC_GetCmdResp1>
 800a31e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a322:	4618      	mov	r0, r3
 800a324:	3728      	adds	r7, #40	@ 0x28
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b088      	sub	sp, #32
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a332:	2300      	movs	r3, #0
 800a334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a336:	2300      	movs	r3, #0
 800a338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a33a:	2300      	movs	r3, #0
 800a33c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a33e:	2300      	movs	r3, #0
 800a340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a346:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a348:	f107 0308 	add.w	r3, r7, #8
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7ff fe86 	bl	800a060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fb23 	bl	800a9a0 <SDMMC_GetCmdError>
 800a35a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a35c:	69fb      	ldr	r3, [r7, #28]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3720      	adds	r7, #32
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b088      	sub	sp, #32
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a36e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a372:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a374:	2308      	movs	r3, #8
 800a376:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a378:	2340      	movs	r3, #64	@ 0x40
 800a37a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a37c:	2300      	movs	r3, #0
 800a37e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a380:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a384:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a386:	f107 0308 	add.w	r3, r7, #8
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7ff fe67 	bl	800a060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 fab6 	bl	800a904 <SDMMC_GetCmdResp7>
 800a398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a39a:	69fb      	ldr	r3, [r7, #28]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3720      	adds	r7, #32
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b088      	sub	sp, #32
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a3b2:	2337      	movs	r3, #55	@ 0x37
 800a3b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3b6:	2340      	movs	r3, #64	@ 0x40
 800a3b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3c4:	f107 0308 	add.w	r3, r7, #8
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f7ff fe48 	bl	800a060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a3d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3d4:	2137      	movs	r1, #55	@ 0x37
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f8aa 	bl	800a530 <SDMMC_GetCmdResp1>
 800a3dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3de:	69fb      	ldr	r3, [r7, #28]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3720      	adds	r7, #32
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b088      	sub	sp, #32
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a3f2:	683a      	ldr	r2, [r7, #0]
 800a3f4:	4b0d      	ldr	r3, [pc, #52]	@ (800a42c <SDMMC_CmdAppOperCommand+0x44>)
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a3fa:	2329      	movs	r3, #41	@ 0x29
 800a3fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3fe:	2340      	movs	r3, #64	@ 0x40
 800a400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a402:	2300      	movs	r3, #0
 800a404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a406:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a40a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a40c:	f107 0308 	add.w	r3, r7, #8
 800a410:	4619      	mov	r1, r3
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f7ff fe24 	bl	800a060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 f9bf 	bl	800a79c <SDMMC_GetCmdResp3>
 800a41e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a420:	69fb      	ldr	r3, [r7, #28]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3720      	adds	r7, #32
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	80100000 	.word	0x80100000

0800a430 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b088      	sub	sp, #32
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a438:	2300      	movs	r3, #0
 800a43a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a43c:	2302      	movs	r3, #2
 800a43e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a440:	23c0      	movs	r3, #192	@ 0xc0
 800a442:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a444:	2300      	movs	r3, #0
 800a446:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a448:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a44c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a44e:	f107 0308 	add.w	r3, r7, #8
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7ff fe03 	bl	800a060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f956 	bl	800a70c <SDMMC_GetCmdResp2>
 800a460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a462:	69fb      	ldr	r3, [r7, #28]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3720      	adds	r7, #32
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b088      	sub	sp, #32
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a47a:	2309      	movs	r3, #9
 800a47c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a47e:	23c0      	movs	r3, #192	@ 0xc0
 800a480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a482:	2300      	movs	r3, #0
 800a484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a48a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a48c:	f107 0308 	add.w	r3, r7, #8
 800a490:	4619      	mov	r1, r3
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7ff fde4 	bl	800a060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f937 	bl	800a70c <SDMMC_GetCmdResp2>
 800a49e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4a0:	69fb      	ldr	r3, [r7, #28]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3720      	adds	r7, #32
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b088      	sub	sp, #32
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4bc:	2340      	movs	r3, #64	@ 0x40
 800a4be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4ca:	f107 0308 	add.w	r3, r7, #8
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f7ff fdc5 	bl	800a060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	2103      	movs	r1, #3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f99c 	bl	800a818 <SDMMC_GetCmdResp6>
 800a4e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4e2:	69fb      	ldr	r3, [r7, #28]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3720      	adds	r7, #32
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b088      	sub	sp, #32
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a4fa:	230d      	movs	r3, #13
 800a4fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4fe:	2340      	movs	r3, #64	@ 0x40
 800a500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a502:	2300      	movs	r3, #0
 800a504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a50a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a50c:	f107 0308 	add.w	r3, r7, #8
 800a510:	4619      	mov	r1, r3
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7ff fda4 	bl	800a060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a51c:	210d      	movs	r1, #13
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f806 	bl	800a530 <SDMMC_GetCmdResp1>
 800a524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a526:	69fb      	ldr	r3, [r7, #28]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3720      	adds	r7, #32
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b088      	sub	sp, #32
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	460b      	mov	r3, r1
 800a53a:	607a      	str	r2, [r7, #4]
 800a53c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a53e:	4b70      	ldr	r3, [pc, #448]	@ (800a700 <SDMMC_GetCmdResp1+0x1d0>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a70      	ldr	r2, [pc, #448]	@ (800a704 <SDMMC_GetCmdResp1+0x1d4>)
 800a544:	fba2 2303 	umull	r2, r3, r2, r3
 800a548:	0a5a      	lsrs	r2, r3, #9
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	fb02 f303 	mul.w	r3, r2, r3
 800a550:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	1e5a      	subs	r2, r3, #1
 800a556:	61fa      	str	r2, [r7, #28]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d102      	bne.n	800a562 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a55c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a560:	e0c9      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a566:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d0ef      	beq.n	800a552 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1ea      	bne.n	800a552 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	2b00      	cmp	r3, #0
 800a586:	d004      	beq.n	800a592 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2204      	movs	r2, #4
 800a58c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a58e:	2304      	movs	r3, #4
 800a590:	e0b1      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d004      	beq.n	800a5a8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e0a6      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	22c5      	movs	r2, #197	@ 0xc5
 800a5ac:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f7ff fd80 	bl	800a0b4 <SDMMC_GetCommandResponse>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	7afb      	ldrb	r3, [r7, #11]
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d001      	beq.n	800a5c2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e099      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f7ff fd82 	bl	800a0ce <SDMMC_GetResponse>
 800a5ca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a5cc:	697a      	ldr	r2, [r7, #20]
 800a5ce:	4b4e      	ldr	r3, [pc, #312]	@ (800a708 <SDMMC_GetCmdResp1+0x1d8>)
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	e08d      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	da02      	bge.n	800a5e6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a5e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a5e4:	e087      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d001      	beq.n	800a5f4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a5f0:	2340      	movs	r3, #64	@ 0x40
 800a5f2:	e080      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a5fe:	2380      	movs	r3, #128	@ 0x80
 800a600:	e079      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a60c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a610:	e071      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a61c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a620:	e069      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a62c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a630:	e061      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a63c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a640:	e059      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d002      	beq.n	800a652 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a64c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a650:	e051      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a65c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a660:	e049      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a66c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a670:	e041      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a67c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a680:	e039      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a68c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a690:	e031      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a69c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a6a0:	e029      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a6ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a6b0:	e021      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a6bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a6c0:	e019      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d002      	beq.n	800a6d2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a6cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a6d0:	e011      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d002      	beq.n	800a6e2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a6dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a6e0:	e009      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f003 0308 	and.w	r3, r3, #8
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d002      	beq.n	800a6f2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a6ec:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a6f0:	e001      	b.n	800a6f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3720      	adds	r7, #32
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20000000 	.word	0x20000000
 800a704:	10624dd3 	.word	0x10624dd3
 800a708:	fdffe008 	.word	0xfdffe008

0800a70c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a714:	4b1f      	ldr	r3, [pc, #124]	@ (800a794 <SDMMC_GetCmdResp2+0x88>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a1f      	ldr	r2, [pc, #124]	@ (800a798 <SDMMC_GetCmdResp2+0x8c>)
 800a71a:	fba2 2303 	umull	r2, r3, r2, r3
 800a71e:	0a5b      	lsrs	r3, r3, #9
 800a720:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a724:	fb02 f303 	mul.w	r3, r2, r3
 800a728:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	1e5a      	subs	r2, r3, #1
 800a72e:	60fa      	str	r2, [r7, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d102      	bne.n	800a73a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a734:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a738:	e026      	b.n	800a788 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a73e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a746:	2b00      	cmp	r3, #0
 800a748:	d0ef      	beq.n	800a72a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a750:	2b00      	cmp	r3, #0
 800a752:	d1ea      	bne.n	800a72a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a758:	f003 0304 	and.w	r3, r3, #4
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d004      	beq.n	800a76a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2204      	movs	r2, #4
 800a764:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a766:	2304      	movs	r3, #4
 800a768:	e00e      	b.n	800a788 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	2b00      	cmp	r3, #0
 800a774:	d004      	beq.n	800a780 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2201      	movs	r2, #1
 800a77a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a77c:	2301      	movs	r3, #1
 800a77e:	e003      	b.n	800a788 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	22c5      	movs	r2, #197	@ 0xc5
 800a784:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	20000000 	.word	0x20000000
 800a798:	10624dd3 	.word	0x10624dd3

0800a79c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7a4:	4b1a      	ldr	r3, [pc, #104]	@ (800a810 <SDMMC_GetCmdResp3+0x74>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a1a      	ldr	r2, [pc, #104]	@ (800a814 <SDMMC_GetCmdResp3+0x78>)
 800a7aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ae:	0a5b      	lsrs	r3, r3, #9
 800a7b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7b4:	fb02 f303 	mul.w	r3, r2, r3
 800a7b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	1e5a      	subs	r2, r3, #1
 800a7be:	60fa      	str	r2, [r7, #12]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d102      	bne.n	800a7ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a7c8:	e01b      	b.n	800a802 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0ef      	beq.n	800a7ba <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d1ea      	bne.n	800a7ba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d004      	beq.n	800a7fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2204      	movs	r2, #4
 800a7f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7f6:	2304      	movs	r3, #4
 800a7f8:	e003      	b.n	800a802 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	22c5      	movs	r2, #197	@ 0xc5
 800a7fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3714      	adds	r7, #20
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	20000000 	.word	0x20000000
 800a814:	10624dd3 	.word	0x10624dd3

0800a818 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b088      	sub	sp, #32
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	460b      	mov	r3, r1
 800a822:	607a      	str	r2, [r7, #4]
 800a824:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a826:	4b35      	ldr	r3, [pc, #212]	@ (800a8fc <SDMMC_GetCmdResp6+0xe4>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a35      	ldr	r2, [pc, #212]	@ (800a900 <SDMMC_GetCmdResp6+0xe8>)
 800a82c:	fba2 2303 	umull	r2, r3, r2, r3
 800a830:	0a5b      	lsrs	r3, r3, #9
 800a832:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a836:	fb02 f303 	mul.w	r3, r2, r3
 800a83a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	1e5a      	subs	r2, r3, #1
 800a840:	61fa      	str	r2, [r7, #28]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d102      	bne.n	800a84c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a846:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a84a:	e052      	b.n	800a8f2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a850:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d0ef      	beq.n	800a83c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1ea      	bne.n	800a83c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a86a:	f003 0304 	and.w	r3, r3, #4
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d004      	beq.n	800a87c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2204      	movs	r2, #4
 800a876:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a878:	2304      	movs	r3, #4
 800a87a:	e03a      	b.n	800a8f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	2b00      	cmp	r3, #0
 800a886:	d004      	beq.n	800a892 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2201      	movs	r2, #1
 800a88c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a88e:	2301      	movs	r3, #1
 800a890:	e02f      	b.n	800a8f2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f7ff fc0e 	bl	800a0b4 <SDMMC_GetCommandResponse>
 800a898:	4603      	mov	r3, r0
 800a89a:	461a      	mov	r2, r3
 800a89c:	7afb      	ldrb	r3, [r7, #11]
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d001      	beq.n	800a8a6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e025      	b.n	800a8f2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	22c5      	movs	r2, #197	@ 0xc5
 800a8aa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f7ff fc0d 	bl	800a0ce <SDMMC_GetResponse>
 800a8b4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d106      	bne.n	800a8ce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	0c1b      	lsrs	r3, r3, #16
 800a8c4:	b29a      	uxth	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e011      	b.n	800a8f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a8d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a8dc:	e009      	b.n	800a8f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a8e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8ec:	e001      	b.n	800a8f2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a8ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3720      	adds	r7, #32
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	20000000 	.word	0x20000000
 800a900:	10624dd3 	.word	0x10624dd3

0800a904 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a90c:	4b22      	ldr	r3, [pc, #136]	@ (800a998 <SDMMC_GetCmdResp7+0x94>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a22      	ldr	r2, [pc, #136]	@ (800a99c <SDMMC_GetCmdResp7+0x98>)
 800a912:	fba2 2303 	umull	r2, r3, r2, r3
 800a916:	0a5b      	lsrs	r3, r3, #9
 800a918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a91c:	fb02 f303 	mul.w	r3, r2, r3
 800a920:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	1e5a      	subs	r2, r3, #1
 800a926:	60fa      	str	r2, [r7, #12]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d102      	bne.n	800a932 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a92c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a930:	e02c      	b.n	800a98c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a936:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d0ef      	beq.n	800a922 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1ea      	bne.n	800a922 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a950:	f003 0304 	and.w	r3, r3, #4
 800a954:	2b00      	cmp	r3, #0
 800a956:	d004      	beq.n	800a962 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2204      	movs	r2, #4
 800a95c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a95e:	2304      	movs	r3, #4
 800a960:	e014      	b.n	800a98c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d004      	beq.n	800a978 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a974:	2301      	movs	r3, #1
 800a976:	e009      	b.n	800a98c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a97c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2240      	movs	r2, #64	@ 0x40
 800a988:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a98a:	2300      	movs	r3, #0
  
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3714      	adds	r7, #20
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr
 800a998:	20000000 	.word	0x20000000
 800a99c:	10624dd3 	.word	0x10624dd3

0800a9a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9a8:	4b11      	ldr	r3, [pc, #68]	@ (800a9f0 <SDMMC_GetCmdError+0x50>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a11      	ldr	r2, [pc, #68]	@ (800a9f4 <SDMMC_GetCmdError+0x54>)
 800a9ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a9b2:	0a5b      	lsrs	r3, r3, #9
 800a9b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9b8:	fb02 f303 	mul.w	r3, r2, r3
 800a9bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	1e5a      	subs	r2, r3, #1
 800a9c2:	60fa      	str	r2, [r7, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d102      	bne.n	800a9ce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a9c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a9cc:	e009      	b.n	800a9e2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d0f1      	beq.n	800a9be <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	22c5      	movs	r2, #197	@ 0xc5
 800a9de:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	20000000 	.word	0x20000000
 800a9f4:	10624dd3 	.word	0x10624dd3

0800a9f8 <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b090      	sub	sp, #64	@ 0x40
 800a9fc:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20];

  uwVolume = 100;
 800aa02:	4b33      	ldr	r3, [pc, #204]	@ (800aad0 <AUDIO_REC_Start+0xd8>)
 800aa04:	2264      	movs	r2, #100	@ 0x64
 800aa06:	601a      	str	r2, [r3, #0]

  /* Create a new file system */
  if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 800aa08:	2200      	movs	r2, #0
 800aa0a:	4932      	ldr	r1, [pc, #200]	@ (800aad4 <AUDIO_REC_Start+0xdc>)
 800aa0c:	4832      	ldr	r0, [pc, #200]	@ (800aad8 <AUDIO_REC_Start+0xe0>)
 800aa0e:	f002 faed 	bl	800cfec <f_mount>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d002      	beq.n	800aa1e <AUDIO_REC_Start+0x26>
    	Error_Handler(); /* FatFs Initialization Error */
 800aa18:	f7f7 f8b0 	bl	8001b7c <Error_Handler>
 800aa1c:	e052      	b.n	800aac4 <AUDIO_REC_Start+0xcc>
  } else {
	  printf("SD card mounted\r\n");
 800aa1e:	482f      	ldr	r0, [pc, #188]	@ (800aadc <AUDIO_REC_Start+0xe4>)
 800aa20:	f008 f8c0 	bl	8012ba4 <puts>
		  	  sizeof(workBuffer)) != FR_OK) {
		  Error_Handler(); / * FatFs Format Error */
//	  } else {
//	  */

	  printf("WAV file created\r\n");
 800aa24:	482e      	ldr	r0, [pc, #184]	@ (800aae0 <AUDIO_REC_Start+0xe8>)
 800aa26:	f008 f8bd 	bl	8012ba4 <puts>
	  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800aa2a:	220a      	movs	r2, #10
 800aa2c:	492d      	ldr	r1, [pc, #180]	@ (800aae4 <AUDIO_REC_Start+0xec>)
 800aa2e:	482e      	ldr	r0, [pc, #184]	@ (800aae8 <AUDIO_REC_Start+0xf0>)
 800aa30:	f002 fb22 	bl	800d078 <f_open>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d144      	bne.n	800aac4 <AUDIO_REC_Start+0xcc>
	  {
		/* Initialize header file */
		WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 800aa3a:	492c      	ldr	r1, [pc, #176]	@ (800aaec <AUDIO_REC_Start+0xf4>)
 800aa3c:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800aa40:	f000 f9c6 	bl	800add0 <WavProcess_EncInit>

		/* Write header file */
		if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 800aa44:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800aa48:	222c      	movs	r2, #44	@ 0x2c
 800aa4a:	4928      	ldr	r1, [pc, #160]	@ (800aaec <AUDIO_REC_Start+0xf4>)
 800aa4c:	4826      	ldr	r0, [pc, #152]	@ (800aae8 <AUDIO_REC_Start+0xf0>)
 800aa4e:	f002 fe0c 	bl	800d66a <f_write>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d135      	bne.n	800aac4 <AUDIO_REC_Start+0xcc>
		{
		  printf("State : ready to record\r\n");
 800aa58:	4825      	ldr	r0, [pc, #148]	@ (800aaf0 <AUDIO_REC_Start+0xf8>)
 800aa5a:	f008 f8a3 	bl	8012ba4 <puts>
		  AudioState = AUDIO_STATE_RECORD;
 800aa5e:	4b25      	ldr	r3, [pc, #148]	@ (800aaf4 <AUDIO_REC_Start+0xfc>)
 800aa60:	2205      	movs	r2, #5
 800aa62:	701a      	strb	r2, [r3, #0]

			if(byteswritten != 0)
 800aa64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d02c      	beq.n	800aac4 <AUDIO_REC_Start+0xcc>
			{
			  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	2110      	movs	r1, #16
 800aa6e:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800aa72:	f7f9 fb63 	bl	800413c <BSP_AUDIO_IN_Init>
			  printf("Recording config initialized\r\n");
 800aa76:	4820      	ldr	r0, [pc, #128]	@ (800aaf8 <AUDIO_REC_Start+0x100>)
 800aa78:	f008 f894 	bl	8012ba4 <puts>
			  BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
 800aa7c:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 800aa80:	481e      	ldr	r0, [pc, #120]	@ (800aafc <AUDIO_REC_Start+0x104>)
 800aa82:	f7f9 fbd9 	bl	8004238 <BSP_AUDIO_IN_Record>
			  printf("Recording started...\r\n");
 800aa86:	481e      	ldr	r0, [pc, #120]	@ (800ab00 <AUDIO_REC_Start+0x108>)
 800aa88:	f008 f88c 	bl	8012ba4 <puts>
			  BufferCtl.fptr = byteswritten;
 800aa8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa8e:	4a1b      	ldr	r2, [pc, #108]	@ (800aafc <AUDIO_REC_Start+0x104>)
 800aa90:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800aa94:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
			  BufferCtl.pcm_ptr = 0;
 800aa98:	4b18      	ldr	r3, [pc, #96]	@ (800aafc <AUDIO_REC_Start+0x104>)
 800aa9a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
			  BufferCtl.offset = 0;
 800aaa6:	4b15      	ldr	r3, [pc, #84]	@ (800aafc <AUDIO_REC_Start+0x104>)
 800aaa8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aaac:	461a      	mov	r2, r3
 800aaae:	2300      	movs	r3, #0
 800aab0:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
			  BufferCtl.wr_state = BUFFER_EMPTY;
 800aab4:	4b11      	ldr	r3, [pc, #68]	@ (800aafc <AUDIO_REC_Start+0x104>)
 800aab6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aaba:	2200      	movs	r2, #0
 800aabc:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			  return AUDIO_ERROR_NONE;
 800aac0:	2300      	movs	r3, #0
 800aac2:	e000      	b.n	800aac6 <AUDIO_REC_Start+0xce>
			}
		}
	  }
	  //}
  }
  return AUDIO_ERROR_IO;
 800aac4:	2301      	movs	r3, #1
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3740      	adds	r7, #64	@ 0x40
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	20000040 	.word	0x20000040
 800aad4:	2000dcb4 	.word	0x2000dcb4
 800aad8:	2000dcb8 	.word	0x2000dcb8
 800aadc:	08015750 	.word	0x08015750
 800aae0:	08015764 	.word	0x08015764
 800aae4:	08015778 	.word	0x08015778
 800aae8:	2000da80 	.word	0x2000da80
 800aaec:	20009218 	.word	0x20009218
 800aaf0:	08015784 	.word	0x08015784
 800aaf4:	20000a14 	.word	0x20000a14
 800aaf8:	080157a0 	.word	0x080157a0
 800aafc:	20009244 	.word	0x20009244
 800ab00:	080157c0 	.word	0x080157c0

0800ab04 <AUDIO_REC_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_REC_Process(void)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b088      	sub	sp, #32
 800ab08:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	617b      	str	r3, [r7, #20]
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	77fb      	strb	r3, [r7, #31]
  uint32_t elapsed_time; 
  static uint32_t prev_elapsed_time = 0xFFFFFFFF;
  uint8_t str[16];
  //static TS_StateTypeDef  TS_State={0};
  //printf("PRE SWITCH\r\n");
  switch(AudioState)
 800ab12:	4b59      	ldr	r3, [pc, #356]	@ (800ac78 <AUDIO_REC_Process+0x174>)
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	2b05      	cmp	r3, #5
 800ab18:	d002      	beq.n	800ab20 <AUDIO_REC_Process+0x1c>
 800ab1a:	2b0a      	cmp	r3, #10
 800ab1c:	d079      	beq.n	800ac12 <AUDIO_REC_Process+0x10e>

  	case AUDIO_STATE_IDLE:
  	case AUDIO_STATE_INIT:
  	default:
      /* Do Nothing */
      break;
 800ab1e:	e0a7      	b.n	800ac70 <AUDIO_REC_Process+0x16c>
      if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
 800ab20:	4b56      	ldr	r3, [pc, #344]	@ (800ac7c <AUDIO_REC_Process+0x178>)
 800ab22:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab26:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ab2a:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 800ab2e:	d303      	bcc.n	800ab38 <AUDIO_REC_Process+0x34>
        AudioState = AUDIO_STATE_STOP;
 800ab30:	4b51      	ldr	r3, [pc, #324]	@ (800ac78 <AUDIO_REC_Process+0x174>)
 800ab32:	220a      	movs	r2, #10
 800ab34:	701a      	strb	r2, [r3, #0]
        break;
 800ab36:	e09b      	b.n	800ac70 <AUDIO_REC_Process+0x16c>
      if(BufferCtl.wr_state == BUFFER_FULL)
 800ab38:	4b50      	ldr	r3, [pc, #320]	@ (800ac7c <AUDIO_REC_Process+0x178>)
 800ab3a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab3e:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d128      	bne.n	800ab98 <AUDIO_REC_Process+0x94>
        if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset),
 800ab46:	4b4d      	ldr	r3, [pc, #308]	@ (800ac7c <AUDIO_REC_Process+0x178>)
 800ab48:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab4c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800ab50:	005b      	lsls	r3, r3, #1
 800ab52:	4a4a      	ldr	r2, [pc, #296]	@ (800ac7c <AUDIO_REC_Process+0x178>)
 800ab54:	1899      	adds	r1, r3, r2
 800ab56:	f107 0314 	add.w	r3, r7, #20
 800ab5a:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 800ab5e:	4848      	ldr	r0, [pc, #288]	@ (800ac80 <AUDIO_REC_Process+0x17c>)
 800ab60:	f002 fd83 	bl	800d66a <f_write>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d004      	beq.n	800ab74 <AUDIO_REC_Process+0x70>
          printf("recording failed\r\n");
 800ab6a:	4846      	ldr	r0, [pc, #280]	@ (800ac84 <AUDIO_REC_Process+0x180>)
 800ab6c:	f008 f81a 	bl	8012ba4 <puts>
          return AUDIO_ERROR_IO;
 800ab70:	2301      	movs	r3, #1
 800ab72:	e07d      	b.n	800ac70 <AUDIO_REC_Process+0x16c>
        BufferCtl.fptr += byteswritten;
 800ab74:	4b41      	ldr	r3, [pc, #260]	@ (800ac7c <AUDIO_REC_Process+0x178>)
 800ab76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab7a:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	4413      	add	r3, r2
 800ab82:	4a3e      	ldr	r2, [pc, #248]	@ (800ac7c <AUDIO_REC_Process+0x178>)
 800ab84:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800ab88:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
        BufferCtl.wr_state =  BUFFER_EMPTY;
 800ab8c:	4b3b      	ldr	r3, [pc, #236]	@ (800ac7c <AUDIO_REC_Process+0x178>)
 800ab8e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab92:	2200      	movs	r2, #0
 800ab94:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
      elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2);
 800ab98:	4b38      	ldr	r3, [pc, #224]	@ (800ac7c <AUDIO_REC_Process+0x178>)
 800ab9a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab9e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aba2:	4a39      	ldr	r2, [pc, #228]	@ (800ac88 <AUDIO_REC_Process+0x184>)
 800aba4:	fba2 2303 	umull	r2, r3, r2, r3
 800aba8:	0b1b      	lsrs	r3, r3, #12
 800abaa:	61bb      	str	r3, [r7, #24]
      if(prev_elapsed_time != elapsed_time)
 800abac:	4b37      	ldr	r3, [pc, #220]	@ (800ac8c <AUDIO_REC_Process+0x188>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d05b      	beq.n	800ac6e <AUDIO_REC_Process+0x16a>
        prev_elapsed_time = elapsed_time;
 800abb6:	4a35      	ldr	r2, [pc, #212]	@ (800ac8c <AUDIO_REC_Process+0x188>)
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	6013      	str	r3, [r2, #0]
        printf("Elapsed time : \r\n");
 800abbc:	4834      	ldr	r0, [pc, #208]	@ (800ac90 <AUDIO_REC_Process+0x18c>)
 800abbe:	f007 fff1 	bl	8012ba4 <puts>
        printf("[%02d:%02d]\r\n", (int)(elapsed_time /60), (int)(elapsed_time%60));
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	4a33      	ldr	r2, [pc, #204]	@ (800ac94 <AUDIO_REC_Process+0x190>)
 800abc6:	fba2 2303 	umull	r2, r3, r2, r3
 800abca:	095b      	lsrs	r3, r3, #5
 800abcc:	4618      	mov	r0, r3
 800abce:	69b9      	ldr	r1, [r7, #24]
 800abd0:	4b30      	ldr	r3, [pc, #192]	@ (800ac94 <AUDIO_REC_Process+0x190>)
 800abd2:	fba3 2301 	umull	r2, r3, r3, r1
 800abd6:	095a      	lsrs	r2, r3, #5
 800abd8:	4613      	mov	r3, r2
 800abda:	011b      	lsls	r3, r3, #4
 800abdc:	1a9b      	subs	r3, r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	1aca      	subs	r2, r1, r3
 800abe2:	4613      	mov	r3, r2
 800abe4:	461a      	mov	r2, r3
 800abe6:	4601      	mov	r1, r0
 800abe8:	482b      	ldr	r0, [pc, #172]	@ (800ac98 <AUDIO_REC_Process+0x194>)
 800abea:	f007 ff73 	bl	8012ad4 <iprintf>
        printf("File size : \r\n");
 800abee:	482b      	ldr	r0, [pc, #172]	@ (800ac9c <AUDIO_REC_Process+0x198>)
 800abf0:	f007 ffd8 	bl	8012ba4 <puts>
        printf("%4d KB\r\n", (int)((int32_t)BufferCtl.fptr/1024));
 800abf4:	4b21      	ldr	r3, [pc, #132]	@ (800ac7c <AUDIO_REC_Process+0x178>)
 800abf6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800abfa:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	da01      	bge.n	800ac06 <AUDIO_REC_Process+0x102>
 800ac02:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800ac06:	129b      	asrs	r3, r3, #10
 800ac08:	4619      	mov	r1, r3
 800ac0a:	4825      	ldr	r0, [pc, #148]	@ (800aca0 <AUDIO_REC_Process+0x19c>)
 800ac0c:	f007 ff62 	bl	8012ad4 <iprintf>
      break;
 800ac10:	e02d      	b.n	800ac6e <AUDIO_REC_Process+0x16a>
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800ac12:	2002      	movs	r0, #2
 800ac14:	f7f9 fb28 	bl	8004268 <BSP_AUDIO_IN_Stop>
      HAL_Delay(300);
 800ac18:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ac1c:	f7f9 fd3e 	bl	800469c <HAL_Delay>
      if(f_lseek(&WavFile, 0) == FR_OK)
 800ac20:	2100      	movs	r1, #0
 800ac22:	4817      	ldr	r0, [pc, #92]	@ (800ac80 <AUDIO_REC_Process+0x17c>)
 800ac24:	f002 ff3e 	bl	800daa4 <f_lseek>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d113      	bne.n	800ac56 <AUDIO_REC_Process+0x152>
        WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 800ac2e:	491d      	ldr	r1, [pc, #116]	@ (800aca4 <AUDIO_REC_Process+0x1a0>)
 800ac30:	481d      	ldr	r0, [pc, #116]	@ (800aca8 <AUDIO_REC_Process+0x1a4>)
 800ac32:	f000 f9e5 	bl	800b000 <WavProcess_HeaderUpdate>
        if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 800ac36:	f107 0314 	add.w	r3, r7, #20
 800ac3a:	222c      	movs	r2, #44	@ 0x2c
 800ac3c:	491a      	ldr	r1, [pc, #104]	@ (800aca8 <AUDIO_REC_Process+0x1a4>)
 800ac3e:	4810      	ldr	r0, [pc, #64]	@ (800ac80 <AUDIO_REC_Process+0x17c>)
 800ac40:	f002 fd13 	bl	800d66a <f_write>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d102      	bne.n	800ac50 <AUDIO_REC_Process+0x14c>
          audio_error = AUDIO_ERROR_EOF;
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	77fb      	strb	r3, [r7, #31]
 800ac4e:	e004      	b.n	800ac5a <AUDIO_REC_Process+0x156>
          audio_error = AUDIO_ERROR_IO;
 800ac50:	2301      	movs	r3, #1
 800ac52:	77fb      	strb	r3, [r7, #31]
 800ac54:	e001      	b.n	800ac5a <AUDIO_REC_Process+0x156>
        audio_error = AUDIO_ERROR_IO;
 800ac56:	2301      	movs	r3, #1
 800ac58:	77fb      	strb	r3, [r7, #31]
      AudioState = AUDIO_STATE_IDLE;
 800ac5a:	4b07      	ldr	r3, [pc, #28]	@ (800ac78 <AUDIO_REC_Process+0x174>)
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	701a      	strb	r2, [r3, #0]
      f_close(&WavFile);
 800ac60:	4807      	ldr	r0, [pc, #28]	@ (800ac80 <AUDIO_REC_Process+0x17c>)
 800ac62:	f002 fef5 	bl	800da50 <f_close>
      printf("wave file closed success\r\n");
 800ac66:	4811      	ldr	r0, [pc, #68]	@ (800acac <AUDIO_REC_Process+0x1a8>)
 800ac68:	f007 ff9c 	bl	8012ba4 <puts>
      break;
 800ac6c:	e000      	b.n	800ac70 <AUDIO_REC_Process+0x16c>
      break;
 800ac6e:	bf00      	nop
      return audio_error;
    }
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3720      	adds	r7, #32
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20000a14 	.word	0x20000a14
 800ac7c:	20009244 	.word	0x20009244
 800ac80:	2000da80 	.word	0x2000da80
 800ac84:	080157d8 	.word	0x080157d8
 800ac88:	10624dd3 	.word	0x10624dd3
 800ac8c:	20000044 	.word	0x20000044
 800ac90:	080157ec 	.word	0x080157ec
 800ac94:	88888889 	.word	0x88888889
 800ac98:	08015800 	.word	0x08015800
 800ac9c:	08015810 	.word	0x08015810
 800aca0:	08015820 	.word	0x08015820
 800aca4:	2000da54 	.word	0x2000da54
 800aca8:	20009218 	.word	0x20009218
 800acac:	0801582c 	.word	0x0801582c

0800acb0 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800acb0:	b480      	push	{r7}
 800acb2:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800acb4:	4b21      	ldr	r3, [pc, #132]	@ (800ad3c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800acb6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800acba:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800acbe:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800acc2:	4a1e      	ldr	r2, [pc, #120]	@ (800ad3c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800acc4:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800acc8:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800accc:	4b1b      	ldr	r3, [pc, #108]	@ (800ad3c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800acce:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800acd2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800acd6:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800acda:	d10c      	bne.n	800acf6 <BSP_AUDIO_IN_TransferComplete_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800acdc:	4b17      	ldr	r3, [pc, #92]	@ (800ad3c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800acde:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800ace8:	4b14      	ldr	r3, [pc, #80]	@ (800ad3c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800acea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800acee:	461a      	mov	r2, r3
 800acf0:	2300      	movs	r3, #0
 800acf2:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800acf6:	4b11      	ldr	r3, [pc, #68]	@ (800ad3c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800acf8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800acfc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ad00:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800ad04:	d314      	bcc.n	800ad30 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800ad06:	4b0d      	ldr	r3, [pc, #52]	@ (800ad3c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ad08:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800ad12:	4b0a      	ldr	r3, [pc, #40]	@ (800ad3c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ad14:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad18:	461a      	mov	r2, r3
 800ad1a:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800ad1e:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800ad22:	4b06      	ldr	r3, [pc, #24]	@ (800ad3c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ad24:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad28:	461a      	mov	r2, r3
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800ad30:	bf00      	nop
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	20009244 	.word	0x20009244

0800ad40 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 800ad40:	b480      	push	{r7}
 800ad42:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800ad44:	4b21      	ldr	r3, [pc, #132]	@ (800adcc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ad46:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad4a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ad4e:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800ad52:	4a1e      	ldr	r2, [pc, #120]	@ (800adcc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ad54:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800ad58:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800ad5c:	4b1b      	ldr	r3, [pc, #108]	@ (800adcc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ad5e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad62:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ad66:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800ad6a:	d10c      	bne.n	800ad86 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800ad6c:	4b17      	ldr	r3, [pc, #92]	@ (800adcc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ad6e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800ad78:	4b14      	ldr	r3, [pc, #80]	@ (800adcc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ad7a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad7e:	461a      	mov	r2, r3
 800ad80:	2300      	movs	r3, #0
 800ad82:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800ad86:	4b11      	ldr	r3, [pc, #68]	@ (800adcc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ad88:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad8c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ad90:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800ad94:	d314      	bcc.n	800adc0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800ad96:	4b0d      	ldr	r3, [pc, #52]	@ (800adcc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ad98:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800ada2:	4b0a      	ldr	r3, [pc, #40]	@ (800adcc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ada4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ada8:	461a      	mov	r2, r3
 800adaa:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800adae:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800adb2:	4b06      	ldr	r3, [pc, #24]	@ (800adcc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800adb4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800adb8:	461a      	mov	r2, r3
 800adba:	2300      	movs	r3, #0
 800adbc:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800adc0:	bf00      	nop
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	20009244 	.word	0x20009244

0800add0 <WavProcess_EncInit>:
  * @param  Freq: Sampling frequency.
  * @param  pHeader: Pointer to the WAV file header to be written.  
  * @retval 0 if success, !0 else.
  */
static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{  
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 800adda:	4a1b      	ldr	r2, [pc, #108]	@ (800ae48 <WavProcess_EncInit+0x78>)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800ade0:	4b19      	ldr	r3, [pc, #100]	@ (800ae48 <WavProcess_EncInit+0x78>)
 800ade2:	2202      	movs	r2, #2
 800ade4:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800ade6:	4b18      	ldr	r3, [pc, #96]	@ (800ae48 <WavProcess_EncInit+0x78>)
 800ade8:	2210      	movs	r2, #16
 800adea:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800adec:	4b16      	ldr	r3, [pc, #88]	@ (800ae48 <WavProcess_EncInit+0x78>)
 800adee:	4a17      	ldr	r2, [pc, #92]	@ (800ae4c <WavProcess_EncInit+0x7c>)
 800adf0:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800adf2:	4b15      	ldr	r3, [pc, #84]	@ (800ae48 <WavProcess_EncInit+0x78>)
 800adf4:	222c      	movs	r2, #44	@ 0x2c
 800adf6:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800adf8:	4b13      	ldr	r3, [pc, #76]	@ (800ae48 <WavProcess_EncInit+0x78>)
 800adfa:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800adfc:	4a12      	ldr	r2, [pc, #72]	@ (800ae48 <WavProcess_EncInit+0x78>)
 800adfe:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800ae00:	08d2      	lsrs	r2, r2, #3
 800ae02:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800ae04:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800ae08:	4a0f      	ldr	r2, [pc, #60]	@ (800ae48 <WavProcess_EncInit+0x78>)
 800ae0a:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800ae0c:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800ae10:	4a0d      	ldr	r2, [pc, #52]	@ (800ae48 <WavProcess_EncInit+0x78>)
 800ae12:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800ae14:	4b0c      	ldr	r3, [pc, #48]	@ (800ae48 <WavProcess_EncInit+0x78>)
 800ae16:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800ae18:	4b0b      	ldr	r3, [pc, #44]	@ (800ae48 <WavProcess_EncInit+0x78>)
 800ae1a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800ae1c:	08db      	lsrs	r3, r3, #3
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	fb12 f303 	smulbb	r3, r2, r3
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	4b08      	ldr	r3, [pc, #32]	@ (800ae48 <WavProcess_EncInit+0x78>)
 800ae28:	841a      	strh	r2, [r3, #32]
  
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 800ae2a:	4907      	ldr	r1, [pc, #28]	@ (800ae48 <WavProcess_EncInit+0x78>)
 800ae2c:	6838      	ldr	r0, [r7, #0]
 800ae2e:	f000 f80f 	bl	800ae50 <WavProcess_HeaderInit>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d001      	beq.n	800ae3c <WavProcess_EncInit+0x6c>
  {
    return 1;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e000      	b.n	800ae3e <WavProcess_EncInit+0x6e>
  }
  return 0;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	2000da54 	.word	0x2000da54
 800ae4c:	001d4c00 	.word	0x001d4c00

0800ae50 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2252      	movs	r2, #82	@ 0x52
 800ae5e:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	3301      	adds	r3, #1
 800ae64:	2249      	movs	r2, #73	@ 0x49
 800ae66:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	3302      	adds	r3, #2
 800ae6c:	2246      	movs	r2, #70	@ 0x46
 800ae6e:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3303      	adds	r3, #3
 800ae74:	2246      	movs	r2, #70	@ 0x46
 800ae76:	701a      	strb	r2, [r3, #0]
  
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	3305      	adds	r3, #5
 800ae84:	224c      	movs	r2, #76	@ 0x4c
 800ae86:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	3306      	adds	r3, #6
 800ae8c:	221d      	movs	r2, #29
 800ae8e:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	3307      	adds	r3, #7
 800ae94:	2200      	movs	r2, #0
 800ae96:	701a      	strb	r2, [r3, #0]
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	3308      	adds	r3, #8
 800ae9c:	2257      	movs	r2, #87	@ 0x57
 800ae9e:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	3309      	adds	r3, #9
 800aea4:	2241      	movs	r2, #65	@ 0x41
 800aea6:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	330a      	adds	r3, #10
 800aeac:	2256      	movs	r2, #86	@ 0x56
 800aeae:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	330b      	adds	r3, #11
 800aeb4:	2245      	movs	r2, #69	@ 0x45
 800aeb6:	701a      	strb	r2, [r3, #0]
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	330c      	adds	r3, #12
 800aebc:	2266      	movs	r2, #102	@ 0x66
 800aebe:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	330d      	adds	r3, #13
 800aec4:	226d      	movs	r2, #109	@ 0x6d
 800aec6:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	330e      	adds	r3, #14
 800aecc:	2274      	movs	r2, #116	@ 0x74
 800aece:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	330f      	adds	r3, #15
 800aed4:	2220      	movs	r2, #32
 800aed6:	701a      	strb	r2, [r3, #0]
  
  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	3310      	adds	r3, #16
 800aedc:	2210      	movs	r2, #16
 800aede:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	3311      	adds	r3, #17
 800aee4:	2200      	movs	r2, #0
 800aee6:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	3312      	adds	r3, #18
 800aeec:	2200      	movs	r2, #0
 800aeee:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	3313      	adds	r3, #19
 800aef4:	2200      	movs	r2, #0
 800aef6:	701a      	strb	r2, [r3, #0]
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	3314      	adds	r3, #20
 800aefc:	2201      	movs	r2, #1
 800aefe:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	3315      	adds	r3, #21
 800af04:	2200      	movs	r2, #0
 800af06:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	8ada      	ldrh	r2, [r3, #22]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	3316      	adds	r3, #22
 800af10:	b2d2      	uxtb	r2, r2
 800af12:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	3317      	adds	r3, #23
 800af18:	2200      	movs	r2, #0
 800af1a:	701a      	strb	r2, [r3, #0]
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	699a      	ldr	r2, [r3, #24]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	3318      	adds	r3, #24
 800af24:	b2d2      	uxtb	r2, r2
 800af26:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	0a1a      	lsrs	r2, r3, #8
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	3319      	adds	r3, #25
 800af32:	b2d2      	uxtb	r2, r2
 800af34:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	0c1a      	lsrs	r2, r3, #16
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	331a      	adds	r3, #26
 800af40:	b2d2      	uxtb	r2, r2
 800af42:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	699b      	ldr	r3, [r3, #24]
 800af48:	0e1a      	lsrs	r2, r3, #24
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	331b      	adds	r3, #27
 800af4e:	b2d2      	uxtb	r2, r2
 800af50:	701a      	strb	r2, [r3, #0]
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	69da      	ldr	r2, [r3, #28]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	331c      	adds	r3, #28
 800af5a:	b2d2      	uxtb	r2, r2
 800af5c:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	69db      	ldr	r3, [r3, #28]
 800af62:	0a1a      	lsrs	r2, r3, #8
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	331d      	adds	r3, #29
 800af68:	b2d2      	uxtb	r2, r2
 800af6a:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	69db      	ldr	r3, [r3, #28]
 800af70:	0c1a      	lsrs	r2, r3, #16
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	331e      	adds	r3, #30
 800af76:	b2d2      	uxtb	r2, r2
 800af78:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	69db      	ldr	r3, [r3, #28]
 800af7e:	0e1a      	lsrs	r2, r3, #24
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	331f      	adds	r3, #31
 800af84:	b2d2      	uxtb	r2, r2
 800af86:	701a      	strb	r2, [r3, #0]
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	8c1a      	ldrh	r2, [r3, #32]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3320      	adds	r3, #32
 800af90:	b2d2      	uxtb	r2, r2
 800af92:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	3321      	adds	r3, #33	@ 0x21
 800af98:	2200      	movs	r2, #0
 800af9a:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	3322      	adds	r3, #34	@ 0x22
 800afa4:	b2d2      	uxtb	r2, r2
 800afa6:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	3323      	adds	r3, #35	@ 0x23
 800afac:	2200      	movs	r2, #0
 800afae:	701a      	strb	r2, [r3, #0]
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	3324      	adds	r3, #36	@ 0x24
 800afb4:	2264      	movs	r2, #100	@ 0x64
 800afb6:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3325      	adds	r3, #37	@ 0x25
 800afbc:	2261      	movs	r2, #97	@ 0x61
 800afbe:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	3326      	adds	r3, #38	@ 0x26
 800afc4:	2274      	movs	r2, #116	@ 0x74
 800afc6:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	3327      	adds	r3, #39	@ 0x27
 800afcc:	2261      	movs	r2, #97	@ 0x61
 800afce:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3328      	adds	r3, #40	@ 0x28
 800afd4:	2200      	movs	r2, #0
 800afd6:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3329      	adds	r3, #41	@ 0x29
 800afdc:	224c      	movs	r2, #76	@ 0x4c
 800afde:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	332a      	adds	r3, #42	@ 0x2a
 800afe4:	221d      	movs	r2, #29
 800afe6:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	332b      	adds	r3, #43	@ 0x2b
 800afec:	2200      	movs	r2, #0
 800afee:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
	...

0800b000 <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 800b00a:	4b30      	ldr	r3, [pc, #192]	@ (800b0cc <WavProcess_HeaderUpdate+0xcc>)
 800b00c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b010:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	3304      	adds	r3, #4
 800b018:	b2d2      	uxtb	r2, r2
 800b01a:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 800b01c:	4b2b      	ldr	r3, [pc, #172]	@ (800b0cc <WavProcess_HeaderUpdate+0xcc>)
 800b01e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b022:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b026:	0a1a      	lsrs	r2, r3, #8
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	3305      	adds	r3, #5
 800b02c:	b2d2      	uxtb	r2, r2
 800b02e:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 800b030:	4b26      	ldr	r3, [pc, #152]	@ (800b0cc <WavProcess_HeaderUpdate+0xcc>)
 800b032:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b036:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b03a:	0c1a      	lsrs	r2, r3, #16
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	3306      	adds	r3, #6
 800b040:	b2d2      	uxtb	r2, r2
 800b042:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 800b044:	4b21      	ldr	r3, [pc, #132]	@ (800b0cc <WavProcess_HeaderUpdate+0xcc>)
 800b046:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b04a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b04e:	0e1a      	lsrs	r2, r3, #24
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	3307      	adds	r3, #7
 800b054:	b2d2      	uxtb	r2, r2
 800b056:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 800b058:	4b1c      	ldr	r3, [pc, #112]	@ (800b0cc <WavProcess_HeaderUpdate+0xcc>)
 800b05a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b05e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b062:	3b2c      	subs	r3, #44	@ 0x2c
 800b064:	4a19      	ldr	r2, [pc, #100]	@ (800b0cc <WavProcess_HeaderUpdate+0xcc>)
 800b066:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800b06a:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 800b06e:	4b17      	ldr	r3, [pc, #92]	@ (800b0cc <WavProcess_HeaderUpdate+0xcc>)
 800b070:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b074:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	3328      	adds	r3, #40	@ 0x28
 800b07c:	b2d2      	uxtb	r2, r2
 800b07e:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 800b080:	4b12      	ldr	r3, [pc, #72]	@ (800b0cc <WavProcess_HeaderUpdate+0xcc>)
 800b082:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b086:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b08a:	0a1a      	lsrs	r2, r3, #8
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	3329      	adds	r3, #41	@ 0x29
 800b090:	b2d2      	uxtb	r2, r2
 800b092:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 800b094:	4b0d      	ldr	r3, [pc, #52]	@ (800b0cc <WavProcess_HeaderUpdate+0xcc>)
 800b096:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b09a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b09e:	0c1a      	lsrs	r2, r3, #16
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	332a      	adds	r3, #42	@ 0x2a
 800b0a4:	b2d2      	uxtb	r2, r2
 800b0a6:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 800b0a8:	4b08      	ldr	r3, [pc, #32]	@ (800b0cc <WavProcess_HeaderUpdate+0xcc>)
 800b0aa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b0ae:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b0b2:	0e1a      	lsrs	r2, r3, #24
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	332b      	adds	r3, #43	@ 0x2b
 800b0b8:	b2d2      	uxtb	r2, r2
 800b0ba:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	370c      	adds	r7, #12
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	20009244 	.word	0x20009244

0800b0d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b0d4:	4904      	ldr	r1, [pc, #16]	@ (800b0e8 <MX_FATFS_Init+0x18>)
 800b0d6:	4805      	ldr	r0, [pc, #20]	@ (800b0ec <MX_FATFS_Init+0x1c>)
 800b0d8:	f003 fb66 	bl	800e7a8 <FATFS_LinkDriver>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	461a      	mov	r2, r3
 800b0e0:	4b03      	ldr	r3, [pc, #12]	@ (800b0f0 <MX_FATFS_Init+0x20>)
 800b0e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b0e4:	bf00      	nop
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	2000dcb4 	.word	0x2000dcb4
 800b0ec:	080158dc 	.word	0x080158dc
 800b0f0:	2000dcb0 	.word	0x2000dcb0

0800b0f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b0f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr

0800b104 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b10a:	2300      	movs	r3, #0
 800b10c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b10e:	f000 f888 	bl	800b222 <BSP_SD_IsDetected>
 800b112:	4603      	mov	r3, r0
 800b114:	2b01      	cmp	r3, #1
 800b116:	d001      	beq.n	800b11c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b118:	2302      	movs	r3, #2
 800b11a:	e005      	b.n	800b128 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b11c:	4804      	ldr	r0, [pc, #16]	@ (800b130 <BSP_SD_Init+0x2c>)
 800b11e:	f7fd f90a 	bl	8008336 <HAL_SD_Init>
 800b122:	4603      	mov	r3, r0
 800b124:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b126:	79fb      	ldrb	r3, [r7, #7]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	20008e1c 	.word	0x20008e1c

0800b134 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	68f9      	ldr	r1, [r7, #12]
 800b14a:	4806      	ldr	r0, [pc, #24]	@ (800b164 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b14c:	f7fd f9ac 	bl	80084a8 <HAL_SD_ReadBlocks_DMA>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d001      	beq.n	800b15a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3718      	adds	r7, #24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	20008e1c 	.word	0x20008e1c

0800b168 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	68f9      	ldr	r1, [r7, #12]
 800b17e:	4806      	ldr	r0, [pc, #24]	@ (800b198 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b180:	f7fd fa74 	bl	800866c <HAL_SD_WriteBlocks_DMA>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d001      	beq.n	800b18e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b18e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3718      	adds	r7, #24
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	20008e1c 	.word	0x20008e1c

0800b19c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b1a0:	4805      	ldr	r0, [pc, #20]	@ (800b1b8 <BSP_SD_GetCardState+0x1c>)
 800b1a2:	f7fd fe99 	bl	8008ed8 <HAL_SD_GetCardState>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b04      	cmp	r3, #4
 800b1aa:	bf14      	ite	ne
 800b1ac:	2301      	movne	r3, #1
 800b1ae:	2300      	moveq	r3, #0
 800b1b0:	b2db      	uxtb	r3, r3
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20008e1c 	.word	0x20008e1c

0800b1bc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b1c4:	6879      	ldr	r1, [r7, #4]
 800b1c6:	4803      	ldr	r0, [pc, #12]	@ (800b1d4 <BSP_SD_GetCardInfo+0x18>)
 800b1c8:	f7fd fe5a 	bl	8008e80 <HAL_SD_GetCardInfo>
}
 800b1cc:	bf00      	nop
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	20008e1c 	.word	0x20008e1c

0800b1d8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b1e0:	f000 f818 	bl	800b214 <BSP_SD_AbortCallback>
}
 800b1e4:	bf00      	nop
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b1f4:	f000 f9a8 	bl	800b548 <BSP_SD_WriteCpltCallback>
}
 800b1f8:	bf00      	nop
 800b1fa:	3708      	adds	r7, #8
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b208:	f000 f9aa 	bl	800b560 <BSP_SD_ReadCpltCallback>
}
 800b20c:	bf00      	nop
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b214:	b480      	push	{r7}
 800b216:	af00      	add	r7, sp, #0

}
 800b218:	bf00      	nop
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b082      	sub	sp, #8
 800b226:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b228:	2301      	movs	r3, #1
 800b22a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b22c:	f000 f80c 	bl	800b248 <BSP_PlatformIsDetected>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b236:	2300      	movs	r3, #0
 800b238:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b23a:	79fb      	ldrb	r3, [r7, #7]
 800b23c:	b2db      	uxtb	r3, r3
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
	...

0800b248 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b24e:	2301      	movs	r3, #1
 800b250:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b252:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b256:	4806      	ldr	r0, [pc, #24]	@ (800b270 <BSP_PlatformIsDetected+0x28>)
 800b258:	f7fa fb74 	bl	8005944 <HAL_GPIO_ReadPin>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b262:	2300      	movs	r3, #0
 800b264:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b266:	79fb      	ldrb	r3, [r7, #7]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	40020800 	.word	0x40020800

0800b274 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b27c:	f7f9 fa02 	bl	8004684 <HAL_GetTick>
 800b280:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b282:	e006      	b.n	800b292 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b284:	f7ff ff8a 	bl	800b19c <BSP_SD_GetCardState>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d101      	bne.n	800b292 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b28e:	2300      	movs	r3, #0
 800b290:	e009      	b.n	800b2a6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b292:	f7f9 f9f7 	bl	8004684 <HAL_GetTick>
 800b296:	4602      	mov	r2, r0
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d8f0      	bhi.n	800b284 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b2a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b2ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b2e8 <SD_CheckStatus+0x38>)
 800b2bc:	2201      	movs	r2, #1
 800b2be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b2c0:	f7ff ff6c 	bl	800b19c <BSP_SD_GetCardState>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d107      	bne.n	800b2da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b2ca:	4b07      	ldr	r3, [pc, #28]	@ (800b2e8 <SD_CheckStatus+0x38>)
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	f023 0301 	bic.w	r3, r3, #1
 800b2d4:	b2da      	uxtb	r2, r3
 800b2d6:	4b04      	ldr	r3, [pc, #16]	@ (800b2e8 <SD_CheckStatus+0x38>)
 800b2d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b2da:	4b03      	ldr	r3, [pc, #12]	@ (800b2e8 <SD_CheckStatus+0x38>)
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	b2db      	uxtb	r3, r3
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	20000048 	.word	0x20000048

0800b2ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b2f6:	f7ff ff05 	bl	800b104 <BSP_SD_Init>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d107      	bne.n	800b310 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b300:	79fb      	ldrb	r3, [r7, #7]
 800b302:	4618      	mov	r0, r3
 800b304:	f7ff ffd4 	bl	800b2b0 <SD_CheckStatus>
 800b308:	4603      	mov	r3, r0
 800b30a:	461a      	mov	r2, r3
 800b30c:	4b04      	ldr	r3, [pc, #16]	@ (800b320 <SD_initialize+0x34>)
 800b30e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b310:	4b03      	ldr	r3, [pc, #12]	@ (800b320 <SD_initialize+0x34>)
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	b2db      	uxtb	r3, r3
}
 800b316:	4618      	mov	r0, r3
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	20000048 	.word	0x20000048

0800b324 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4603      	mov	r3, r0
 800b32c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b32e:	79fb      	ldrb	r3, [r7, #7]
 800b330:	4618      	mov	r0, r3
 800b332:	f7ff ffbd 	bl	800b2b0 <SD_CheckStatus>
 800b336:	4603      	mov	r3, r0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3708      	adds	r7, #8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
 800b346:	60b9      	str	r1, [r7, #8]
 800b348:	607a      	str	r2, [r7, #4]
 800b34a:	603b      	str	r3, [r7, #0]
 800b34c:	4603      	mov	r3, r0
 800b34e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b354:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b358:	f7ff ff8c 	bl	800b274 <SD_CheckStatusWithTimeout>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	da01      	bge.n	800b366 <SD_read+0x26>
  {
    return res;
 800b362:	7dfb      	ldrb	r3, [r7, #23]
 800b364:	e03b      	b.n	800b3de <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	6879      	ldr	r1, [r7, #4]
 800b36a:	68b8      	ldr	r0, [r7, #8]
 800b36c:	f7ff fee2 	bl	800b134 <BSP_SD_ReadBlocks_DMA>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d132      	bne.n	800b3dc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b376:	4b1c      	ldr	r3, [pc, #112]	@ (800b3e8 <SD_read+0xa8>)
 800b378:	2200      	movs	r2, #0
 800b37a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b37c:	f7f9 f982 	bl	8004684 <HAL_GetTick>
 800b380:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b382:	bf00      	nop
 800b384:	4b18      	ldr	r3, [pc, #96]	@ (800b3e8 <SD_read+0xa8>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d108      	bne.n	800b39e <SD_read+0x5e>
 800b38c:	f7f9 f97a 	bl	8004684 <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d9f2      	bls.n	800b384 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b39e:	4b12      	ldr	r3, [pc, #72]	@ (800b3e8 <SD_read+0xa8>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d102      	bne.n	800b3ac <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	75fb      	strb	r3, [r7, #23]
 800b3aa:	e017      	b.n	800b3dc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b3ac:	4b0e      	ldr	r3, [pc, #56]	@ (800b3e8 <SD_read+0xa8>)
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b3b2:	f7f9 f967 	bl	8004684 <HAL_GetTick>
 800b3b6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b3b8:	e007      	b.n	800b3ca <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b3ba:	f7ff feef 	bl	800b19c <BSP_SD_GetCardState>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d102      	bne.n	800b3ca <SD_read+0x8a>
          {
            res = RES_OK;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b3c8:	e008      	b.n	800b3dc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b3ca:	f7f9 f95b 	bl	8004684 <HAL_GetTick>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d9ee      	bls.n	800b3ba <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	2000deec 	.word	0x2000deec

0800b3ec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60b9      	str	r1, [r7, #8]
 800b3f4:	607a      	str	r2, [r7, #4]
 800b3f6:	603b      	str	r3, [r7, #0]
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b400:	4b24      	ldr	r3, [pc, #144]	@ (800b494 <SD_write+0xa8>)
 800b402:	2200      	movs	r2, #0
 800b404:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b406:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b40a:	f7ff ff33 	bl	800b274 <SD_CheckStatusWithTimeout>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	da01      	bge.n	800b418 <SD_write+0x2c>
  {
    return res;
 800b414:	7dfb      	ldrb	r3, [r7, #23]
 800b416:	e038      	b.n	800b48a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	6879      	ldr	r1, [r7, #4]
 800b41c:	68b8      	ldr	r0, [r7, #8]
 800b41e:	f7ff fea3 	bl	800b168 <BSP_SD_WriteBlocks_DMA>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d12f      	bne.n	800b488 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b428:	f7f9 f92c 	bl	8004684 <HAL_GetTick>
 800b42c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b42e:	bf00      	nop
 800b430:	4b18      	ldr	r3, [pc, #96]	@ (800b494 <SD_write+0xa8>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d108      	bne.n	800b44a <SD_write+0x5e>
 800b438:	f7f9 f924 	bl	8004684 <HAL_GetTick>
 800b43c:	4602      	mov	r2, r0
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b446:	4293      	cmp	r3, r2
 800b448:	d9f2      	bls.n	800b430 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b44a:	4b12      	ldr	r3, [pc, #72]	@ (800b494 <SD_write+0xa8>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d102      	bne.n	800b458 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	75fb      	strb	r3, [r7, #23]
 800b456:	e017      	b.n	800b488 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b458:	4b0e      	ldr	r3, [pc, #56]	@ (800b494 <SD_write+0xa8>)
 800b45a:	2200      	movs	r2, #0
 800b45c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b45e:	f7f9 f911 	bl	8004684 <HAL_GetTick>
 800b462:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b464:	e007      	b.n	800b476 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b466:	f7ff fe99 	bl	800b19c <BSP_SD_GetCardState>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d102      	bne.n	800b476 <SD_write+0x8a>
          {
            res = RES_OK;
 800b470:	2300      	movs	r3, #0
 800b472:	75fb      	strb	r3, [r7, #23]
            break;
 800b474:	e008      	b.n	800b488 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b476:	f7f9 f905 	bl	8004684 <HAL_GetTick>
 800b47a:	4602      	mov	r2, r0
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	1ad3      	subs	r3, r2, r3
 800b480:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b484:	4293      	cmp	r3, r2
 800b486:	d9ee      	bls.n	800b466 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b488:	7dfb      	ldrb	r3, [r7, #23]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3718      	adds	r7, #24
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	2000dee8 	.word	0x2000dee8

0800b498 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08c      	sub	sp, #48	@ 0x30
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	4603      	mov	r3, r0
 800b4a0:	603a      	str	r2, [r7, #0]
 800b4a2:	71fb      	strb	r3, [r7, #7]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b4ae:	4b25      	ldr	r3, [pc, #148]	@ (800b544 <SD_ioctl+0xac>)
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	f003 0301 	and.w	r3, r3, #1
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <SD_ioctl+0x28>
 800b4bc:	2303      	movs	r3, #3
 800b4be:	e03c      	b.n	800b53a <SD_ioctl+0xa2>

  switch (cmd)
 800b4c0:	79bb      	ldrb	r3, [r7, #6]
 800b4c2:	2b03      	cmp	r3, #3
 800b4c4:	d834      	bhi.n	800b530 <SD_ioctl+0x98>
 800b4c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4cc <SD_ioctl+0x34>)
 800b4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4cc:	0800b4dd 	.word	0x0800b4dd
 800b4d0:	0800b4e5 	.word	0x0800b4e5
 800b4d4:	0800b4fd 	.word	0x0800b4fd
 800b4d8:	0800b517 	.word	0x0800b517
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b4e2:	e028      	b.n	800b536 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4e4:	f107 030c 	add.w	r3, r7, #12
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7ff fe67 	bl	800b1bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b4ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b4fa:	e01c      	b.n	800b536 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b4fc:	f107 030c 	add.w	r3, r7, #12
 800b500:	4618      	mov	r0, r3
 800b502:	f7ff fe5b 	bl	800b1bc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b508:	b29a      	uxth	r2, r3
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b50e:	2300      	movs	r3, #0
 800b510:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b514:	e00f      	b.n	800b536 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b516:	f107 030c 	add.w	r3, r7, #12
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7ff fe4e 	bl	800b1bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b522:	0a5a      	lsrs	r2, r3, #9
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b528:	2300      	movs	r3, #0
 800b52a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b52e:	e002      	b.n	800b536 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b530:	2304      	movs	r3, #4
 800b532:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b536:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3730      	adds	r7, #48	@ 0x30
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	20000048 	.word	0x20000048

0800b548 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b548:	b480      	push	{r7}
 800b54a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b54c:	4b03      	ldr	r3, [pc, #12]	@ (800b55c <BSP_SD_WriteCpltCallback+0x14>)
 800b54e:	2201      	movs	r2, #1
 800b550:	601a      	str	r2, [r3, #0]
}
 800b552:	bf00      	nop
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	2000dee8 	.word	0x2000dee8

0800b560 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b560:	b480      	push	{r7}
 800b562:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b564:	4b03      	ldr	r3, [pc, #12]	@ (800b574 <BSP_SD_ReadCpltCallback+0x14>)
 800b566:	2201      	movs	r2, #1
 800b568:	601a      	str	r2, [r3, #0]
}
 800b56a:	bf00      	nop
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr
 800b574:	2000deec 	.word	0x2000deec

0800b578 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	4603      	mov	r3, r0
 800b580:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b582:	79fb      	ldrb	r3, [r7, #7]
 800b584:	4a08      	ldr	r2, [pc, #32]	@ (800b5a8 <disk_status+0x30>)
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4413      	add	r3, r2
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	79fa      	ldrb	r2, [r7, #7]
 800b590:	4905      	ldr	r1, [pc, #20]	@ (800b5a8 <disk_status+0x30>)
 800b592:	440a      	add	r2, r1
 800b594:	7a12      	ldrb	r2, [r2, #8]
 800b596:	4610      	mov	r0, r2
 800b598:	4798      	blx	r3
 800b59a:	4603      	mov	r3, r0
 800b59c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	2000df18 	.word	0x2000df18

0800b5ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b5ba:	79fb      	ldrb	r3, [r7, #7]
 800b5bc:	4a0d      	ldr	r2, [pc, #52]	@ (800b5f4 <disk_initialize+0x48>)
 800b5be:	5cd3      	ldrb	r3, [r2, r3]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d111      	bne.n	800b5e8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b5c4:	79fb      	ldrb	r3, [r7, #7]
 800b5c6:	4a0b      	ldr	r2, [pc, #44]	@ (800b5f4 <disk_initialize+0x48>)
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b5cc:	79fb      	ldrb	r3, [r7, #7]
 800b5ce:	4a09      	ldr	r2, [pc, #36]	@ (800b5f4 <disk_initialize+0x48>)
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4413      	add	r3, r2
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	79fa      	ldrb	r2, [r7, #7]
 800b5da:	4906      	ldr	r1, [pc, #24]	@ (800b5f4 <disk_initialize+0x48>)
 800b5dc:	440a      	add	r2, r1
 800b5de:	7a12      	ldrb	r2, [r2, #8]
 800b5e0:	4610      	mov	r0, r2
 800b5e2:	4798      	blx	r3
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	2000df18 	.word	0x2000df18

0800b5f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b5f8:	b590      	push	{r4, r7, lr}
 800b5fa:	b087      	sub	sp, #28
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60b9      	str	r1, [r7, #8]
 800b600:	607a      	str	r2, [r7, #4]
 800b602:	603b      	str	r3, [r7, #0]
 800b604:	4603      	mov	r3, r0
 800b606:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b608:	7bfb      	ldrb	r3, [r7, #15]
 800b60a:	4a0a      	ldr	r2, [pc, #40]	@ (800b634 <disk_read+0x3c>)
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4413      	add	r3, r2
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	689c      	ldr	r4, [r3, #8]
 800b614:	7bfb      	ldrb	r3, [r7, #15]
 800b616:	4a07      	ldr	r2, [pc, #28]	@ (800b634 <disk_read+0x3c>)
 800b618:	4413      	add	r3, r2
 800b61a:	7a18      	ldrb	r0, [r3, #8]
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	68b9      	ldr	r1, [r7, #8]
 800b622:	47a0      	blx	r4
 800b624:	4603      	mov	r3, r0
 800b626:	75fb      	strb	r3, [r7, #23]
  return res;
 800b628:	7dfb      	ldrb	r3, [r7, #23]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	371c      	adds	r7, #28
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd90      	pop	{r4, r7, pc}
 800b632:	bf00      	nop
 800b634:	2000df18 	.word	0x2000df18

0800b638 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b638:	b590      	push	{r4, r7, lr}
 800b63a:	b087      	sub	sp, #28
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60b9      	str	r1, [r7, #8]
 800b640:	607a      	str	r2, [r7, #4]
 800b642:	603b      	str	r3, [r7, #0]
 800b644:	4603      	mov	r3, r0
 800b646:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b648:	7bfb      	ldrb	r3, [r7, #15]
 800b64a:	4a0a      	ldr	r2, [pc, #40]	@ (800b674 <disk_write+0x3c>)
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4413      	add	r3, r2
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	68dc      	ldr	r4, [r3, #12]
 800b654:	7bfb      	ldrb	r3, [r7, #15]
 800b656:	4a07      	ldr	r2, [pc, #28]	@ (800b674 <disk_write+0x3c>)
 800b658:	4413      	add	r3, r2
 800b65a:	7a18      	ldrb	r0, [r3, #8]
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	68b9      	ldr	r1, [r7, #8]
 800b662:	47a0      	blx	r4
 800b664:	4603      	mov	r3, r0
 800b666:	75fb      	strb	r3, [r7, #23]
  return res;
 800b668:	7dfb      	ldrb	r3, [r7, #23]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	371c      	adds	r7, #28
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd90      	pop	{r4, r7, pc}
 800b672:	bf00      	nop
 800b674:	2000df18 	.word	0x2000df18

0800b678 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	603a      	str	r2, [r7, #0]
 800b682:	71fb      	strb	r3, [r7, #7]
 800b684:	460b      	mov	r3, r1
 800b686:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b688:	79fb      	ldrb	r3, [r7, #7]
 800b68a:	4a09      	ldr	r2, [pc, #36]	@ (800b6b0 <disk_ioctl+0x38>)
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	4413      	add	r3, r2
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	79fa      	ldrb	r2, [r7, #7]
 800b696:	4906      	ldr	r1, [pc, #24]	@ (800b6b0 <disk_ioctl+0x38>)
 800b698:	440a      	add	r2, r1
 800b69a:	7a10      	ldrb	r0, [r2, #8]
 800b69c:	79b9      	ldrb	r1, [r7, #6]
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	4798      	blx	r3
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	73fb      	strb	r3, [r7, #15]
  return res;
 800b6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	2000df18 	.word	0x2000df18

0800b6b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b6c4:	89fb      	ldrh	r3, [r7, #14]
 800b6c6:	021b      	lsls	r3, r3, #8
 800b6c8:	b21a      	sxth	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	b21b      	sxth	r3, r3
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	b21b      	sxth	r3, r3
 800b6d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b6d6:	89fb      	ldrh	r3, [r7, #14]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3714      	adds	r7, #20
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	3303      	adds	r3, #3
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	021b      	lsls	r3, r3, #8
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	3202      	adds	r2, #2
 800b6fc:	7812      	ldrb	r2, [r2, #0]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	021b      	lsls	r3, r3, #8
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	3201      	adds	r2, #1
 800b70a:	7812      	ldrb	r2, [r2, #0]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	021b      	lsls	r3, r3, #8
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	7812      	ldrb	r2, [r2, #0]
 800b718:	4313      	orrs	r3, r2
 800b71a:	60fb      	str	r3, [r7, #12]
	return rv;
 800b71c:	68fb      	ldr	r3, [r7, #12]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b72a:	b480      	push	{r7}
 800b72c:	b083      	sub	sp, #12
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	460b      	mov	r3, r1
 800b734:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	1c5a      	adds	r2, r3, #1
 800b73a:	607a      	str	r2, [r7, #4]
 800b73c:	887a      	ldrh	r2, [r7, #2]
 800b73e:	b2d2      	uxtb	r2, r2
 800b740:	701a      	strb	r2, [r3, #0]
 800b742:	887b      	ldrh	r3, [r7, #2]
 800b744:	0a1b      	lsrs	r3, r3, #8
 800b746:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	607a      	str	r2, [r7, #4]
 800b74e:	887a      	ldrh	r2, [r7, #2]
 800b750:	b2d2      	uxtb	r2, r2
 800b752:	701a      	strb	r2, [r3, #0]
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	1c5a      	adds	r2, r3, #1
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	b2d2      	uxtb	r2, r2
 800b774:	701a      	strb	r2, [r3, #0]
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	0a1b      	lsrs	r3, r3, #8
 800b77a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	1c5a      	adds	r2, r3, #1
 800b780:	607a      	str	r2, [r7, #4]
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	b2d2      	uxtb	r2, r2
 800b786:	701a      	strb	r2, [r3, #0]
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	0a1b      	lsrs	r3, r3, #8
 800b78c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	1c5a      	adds	r2, r3, #1
 800b792:	607a      	str	r2, [r7, #4]
 800b794:	683a      	ldr	r2, [r7, #0]
 800b796:	b2d2      	uxtb	r2, r2
 800b798:	701a      	strb	r2, [r3, #0]
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	0a1b      	lsrs	r3, r3, #8
 800b79e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	1c5a      	adds	r2, r3, #1
 800b7a4:	607a      	str	r2, [r7, #4]
 800b7a6:	683a      	ldr	r2, [r7, #0]
 800b7a8:	b2d2      	uxtb	r2, r2
 800b7aa:	701a      	strb	r2, [r3, #0]
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b7b8:	b480      	push	{r7}
 800b7ba:	b087      	sub	sp, #28
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00d      	beq.n	800b7ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b7d2:	693a      	ldr	r2, [r7, #16]
 800b7d4:	1c53      	adds	r3, r2, #1
 800b7d6:	613b      	str	r3, [r7, #16]
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	1c59      	adds	r1, r3, #1
 800b7dc:	6179      	str	r1, [r7, #20]
 800b7de:	7812      	ldrb	r2, [r2, #0]
 800b7e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	607b      	str	r3, [r7, #4]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1f1      	bne.n	800b7d2 <mem_cpy+0x1a>
	}
}
 800b7ee:	bf00      	nop
 800b7f0:	371c      	adds	r7, #28
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b7fa:	b480      	push	{r7}
 800b7fc:	b087      	sub	sp, #28
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	60f8      	str	r0, [r7, #12]
 800b802:	60b9      	str	r1, [r7, #8]
 800b804:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	1c5a      	adds	r2, r3, #1
 800b80e:	617a      	str	r2, [r7, #20]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	b2d2      	uxtb	r2, r2
 800b814:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	3b01      	subs	r3, #1
 800b81a:	607b      	str	r3, [r7, #4]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d1f3      	bne.n	800b80a <mem_set+0x10>
}
 800b822:	bf00      	nop
 800b824:	bf00      	nop
 800b826:	371c      	adds	r7, #28
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b830:	b480      	push	{r7}
 800b832:	b089      	sub	sp, #36	@ 0x24
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	61fb      	str	r3, [r7, #28]
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b844:	2300      	movs	r3, #0
 800b846:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	1c5a      	adds	r2, r3, #1
 800b84c:	61fa      	str	r2, [r7, #28]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	4619      	mov	r1, r3
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	1c5a      	adds	r2, r3, #1
 800b856:	61ba      	str	r2, [r7, #24]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	1acb      	subs	r3, r1, r3
 800b85c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	3b01      	subs	r3, #1
 800b862:	607b      	str	r3, [r7, #4]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d002      	beq.n	800b870 <mem_cmp+0x40>
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0eb      	beq.n	800b848 <mem_cmp+0x18>

	return r;
 800b870:	697b      	ldr	r3, [r7, #20]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3724      	adds	r7, #36	@ 0x24
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr

0800b87e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b87e:	b480      	push	{r7}
 800b880:	b083      	sub	sp, #12
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b888:	e002      	b.n	800b890 <chk_chr+0x12>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	3301      	adds	r3, #1
 800b88e:	607b      	str	r3, [r7, #4]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d005      	beq.n	800b8a4 <chk_chr+0x26>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	461a      	mov	r2, r3
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d1f2      	bne.n	800b88a <chk_chr+0xc>
	return *str;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b8be:	2300      	movs	r3, #0
 800b8c0:	60bb      	str	r3, [r7, #8]
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	60fb      	str	r3, [r7, #12]
 800b8c6:	e029      	b.n	800b91c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b8c8:	4a27      	ldr	r2, [pc, #156]	@ (800b968 <chk_lock+0xb4>)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	011b      	lsls	r3, r3, #4
 800b8ce:	4413      	add	r3, r2
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d01d      	beq.n	800b912 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b8d6:	4a24      	ldr	r2, [pc, #144]	@ (800b968 <chk_lock+0xb4>)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	011b      	lsls	r3, r3, #4
 800b8dc:	4413      	add	r3, r2
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d116      	bne.n	800b916 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b8e8:	4a1f      	ldr	r2, [pc, #124]	@ (800b968 <chk_lock+0xb4>)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	011b      	lsls	r3, r3, #4
 800b8ee:	4413      	add	r3, r2
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d10c      	bne.n	800b916 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b8fc:	4a1a      	ldr	r2, [pc, #104]	@ (800b968 <chk_lock+0xb4>)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	011b      	lsls	r3, r3, #4
 800b902:	4413      	add	r3, r2
 800b904:	3308      	adds	r3, #8
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d102      	bne.n	800b916 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b910:	e007      	b.n	800b922 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b912:	2301      	movs	r3, #1
 800b914:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	3301      	adds	r3, #1
 800b91a:	60fb      	str	r3, [r7, #12]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d9d2      	bls.n	800b8c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2b02      	cmp	r3, #2
 800b926:	d109      	bne.n	800b93c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d102      	bne.n	800b934 <chk_lock+0x80>
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b02      	cmp	r3, #2
 800b932:	d101      	bne.n	800b938 <chk_lock+0x84>
 800b934:	2300      	movs	r3, #0
 800b936:	e010      	b.n	800b95a <chk_lock+0xa6>
 800b938:	2312      	movs	r3, #18
 800b93a:	e00e      	b.n	800b95a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d108      	bne.n	800b954 <chk_lock+0xa0>
 800b942:	4a09      	ldr	r2, [pc, #36]	@ (800b968 <chk_lock+0xb4>)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	011b      	lsls	r3, r3, #4
 800b948:	4413      	add	r3, r2
 800b94a:	330c      	adds	r3, #12
 800b94c:	881b      	ldrh	r3, [r3, #0]
 800b94e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b952:	d101      	bne.n	800b958 <chk_lock+0xa4>
 800b954:	2310      	movs	r3, #16
 800b956:	e000      	b.n	800b95a <chk_lock+0xa6>
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3714      	adds	r7, #20
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	2000def8 	.word	0x2000def8

0800b96c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b972:	2300      	movs	r3, #0
 800b974:	607b      	str	r3, [r7, #4]
 800b976:	e002      	b.n	800b97e <enq_lock+0x12>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	3301      	adds	r3, #1
 800b97c:	607b      	str	r3, [r7, #4]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d806      	bhi.n	800b992 <enq_lock+0x26>
 800b984:	4a09      	ldr	r2, [pc, #36]	@ (800b9ac <enq_lock+0x40>)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	011b      	lsls	r3, r3, #4
 800b98a:	4413      	add	r3, r2
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1f2      	bne.n	800b978 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b02      	cmp	r3, #2
 800b996:	bf14      	ite	ne
 800b998:	2301      	movne	r3, #1
 800b99a:	2300      	moveq	r3, #0
 800b99c:	b2db      	uxtb	r3, r3
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	2000def8 	.word	0x2000def8

0800b9b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b085      	sub	sp, #20
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	60fb      	str	r3, [r7, #12]
 800b9be:	e01f      	b.n	800ba00 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b9c0:	4a41      	ldr	r2, [pc, #260]	@ (800bac8 <inc_lock+0x118>)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	011b      	lsls	r3, r3, #4
 800b9c6:	4413      	add	r3, r2
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d113      	bne.n	800b9fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b9d2:	4a3d      	ldr	r2, [pc, #244]	@ (800bac8 <inc_lock+0x118>)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	011b      	lsls	r3, r3, #4
 800b9d8:	4413      	add	r3, r2
 800b9da:	3304      	adds	r3, #4
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d109      	bne.n	800b9fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b9e6:	4a38      	ldr	r2, [pc, #224]	@ (800bac8 <inc_lock+0x118>)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	011b      	lsls	r3, r3, #4
 800b9ec:	4413      	add	r3, r2
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d006      	beq.n	800ba08 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d9dc      	bls.n	800b9c0 <inc_lock+0x10>
 800ba06:	e000      	b.n	800ba0a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ba08:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d132      	bne.n	800ba76 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ba10:	2300      	movs	r3, #0
 800ba12:	60fb      	str	r3, [r7, #12]
 800ba14:	e002      	b.n	800ba1c <inc_lock+0x6c>
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	60fb      	str	r3, [r7, #12]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d806      	bhi.n	800ba30 <inc_lock+0x80>
 800ba22:	4a29      	ldr	r2, [pc, #164]	@ (800bac8 <inc_lock+0x118>)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	011b      	lsls	r3, r3, #4
 800ba28:	4413      	add	r3, r2
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1f2      	bne.n	800ba16 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2b02      	cmp	r3, #2
 800ba34:	d101      	bne.n	800ba3a <inc_lock+0x8a>
 800ba36:	2300      	movs	r3, #0
 800ba38:	e040      	b.n	800babc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	4922      	ldr	r1, [pc, #136]	@ (800bac8 <inc_lock+0x118>)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	011b      	lsls	r3, r3, #4
 800ba44:	440b      	add	r3, r1
 800ba46:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	689a      	ldr	r2, [r3, #8]
 800ba4c:	491e      	ldr	r1, [pc, #120]	@ (800bac8 <inc_lock+0x118>)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	011b      	lsls	r3, r3, #4
 800ba52:	440b      	add	r3, r1
 800ba54:	3304      	adds	r3, #4
 800ba56:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	695a      	ldr	r2, [r3, #20]
 800ba5c:	491a      	ldr	r1, [pc, #104]	@ (800bac8 <inc_lock+0x118>)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	011b      	lsls	r3, r3, #4
 800ba62:	440b      	add	r3, r1
 800ba64:	3308      	adds	r3, #8
 800ba66:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ba68:	4a17      	ldr	r2, [pc, #92]	@ (800bac8 <inc_lock+0x118>)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	011b      	lsls	r3, r3, #4
 800ba6e:	4413      	add	r3, r2
 800ba70:	330c      	adds	r3, #12
 800ba72:	2200      	movs	r2, #0
 800ba74:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d009      	beq.n	800ba90 <inc_lock+0xe0>
 800ba7c:	4a12      	ldr	r2, [pc, #72]	@ (800bac8 <inc_lock+0x118>)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	011b      	lsls	r3, r3, #4
 800ba82:	4413      	add	r3, r2
 800ba84:	330c      	adds	r3, #12
 800ba86:	881b      	ldrh	r3, [r3, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <inc_lock+0xe0>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	e015      	b.n	800babc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d108      	bne.n	800baa8 <inc_lock+0xf8>
 800ba96:	4a0c      	ldr	r2, [pc, #48]	@ (800bac8 <inc_lock+0x118>)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	011b      	lsls	r3, r3, #4
 800ba9c:	4413      	add	r3, r2
 800ba9e:	330c      	adds	r3, #12
 800baa0:	881b      	ldrh	r3, [r3, #0]
 800baa2:	3301      	adds	r3, #1
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	e001      	b.n	800baac <inc_lock+0xfc>
 800baa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800baac:	4906      	ldr	r1, [pc, #24]	@ (800bac8 <inc_lock+0x118>)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	011b      	lsls	r3, r3, #4
 800bab2:	440b      	add	r3, r1
 800bab4:	330c      	adds	r3, #12
 800bab6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	3301      	adds	r3, #1
}
 800babc:	4618      	mov	r0, r3
 800babe:	3714      	adds	r7, #20
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr
 800bac8:	2000def8 	.word	0x2000def8

0800bacc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bacc:	b480      	push	{r7}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	3b01      	subs	r3, #1
 800bad8:	607b      	str	r3, [r7, #4]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2b01      	cmp	r3, #1
 800bade:	d825      	bhi.n	800bb2c <dec_lock+0x60>
		n = Files[i].ctr;
 800bae0:	4a17      	ldr	r2, [pc, #92]	@ (800bb40 <dec_lock+0x74>)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	011b      	lsls	r3, r3, #4
 800bae6:	4413      	add	r3, r2
 800bae8:	330c      	adds	r3, #12
 800baea:	881b      	ldrh	r3, [r3, #0]
 800baec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800baee:	89fb      	ldrh	r3, [r7, #14]
 800baf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800baf4:	d101      	bne.n	800bafa <dec_lock+0x2e>
 800baf6:	2300      	movs	r3, #0
 800baf8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bafa:	89fb      	ldrh	r3, [r7, #14]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d002      	beq.n	800bb06 <dec_lock+0x3a>
 800bb00:	89fb      	ldrh	r3, [r7, #14]
 800bb02:	3b01      	subs	r3, #1
 800bb04:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bb06:	4a0e      	ldr	r2, [pc, #56]	@ (800bb40 <dec_lock+0x74>)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	011b      	lsls	r3, r3, #4
 800bb0c:	4413      	add	r3, r2
 800bb0e:	330c      	adds	r3, #12
 800bb10:	89fa      	ldrh	r2, [r7, #14]
 800bb12:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bb14:	89fb      	ldrh	r3, [r7, #14]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d105      	bne.n	800bb26 <dec_lock+0x5a>
 800bb1a:	4a09      	ldr	r2, [pc, #36]	@ (800bb40 <dec_lock+0x74>)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	011b      	lsls	r3, r3, #4
 800bb20:	4413      	add	r3, r2
 800bb22:	2200      	movs	r2, #0
 800bb24:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	737b      	strb	r3, [r7, #13]
 800bb2a:	e001      	b.n	800bb30 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bb30:	7b7b      	ldrb	r3, [r7, #13]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3714      	adds	r7, #20
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	2000def8 	.word	0x2000def8

0800bb44 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	60fb      	str	r3, [r7, #12]
 800bb50:	e010      	b.n	800bb74 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bb52:	4a0d      	ldr	r2, [pc, #52]	@ (800bb88 <clear_lock+0x44>)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	011b      	lsls	r3, r3, #4
 800bb58:	4413      	add	r3, r2
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d105      	bne.n	800bb6e <clear_lock+0x2a>
 800bb62:	4a09      	ldr	r2, [pc, #36]	@ (800bb88 <clear_lock+0x44>)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	011b      	lsls	r3, r3, #4
 800bb68:	4413      	add	r3, r2
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3301      	adds	r3, #1
 800bb72:	60fb      	str	r3, [r7, #12]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d9eb      	bls.n	800bb52 <clear_lock+0xe>
	}
}
 800bb7a:	bf00      	nop
 800bb7c:	bf00      	nop
 800bb7e:	3714      	adds	r7, #20
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr
 800bb88:	2000def8 	.word	0x2000def8

0800bb8c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bb94:	2300      	movs	r3, #0
 800bb96:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	78db      	ldrb	r3, [r3, #3]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d034      	beq.n	800bc0a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	7858      	ldrb	r0, [r3, #1]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	f7ff fd40 	bl	800b638 <disk_write>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d002      	beq.n	800bbc4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	73fb      	strb	r3, [r7, #15]
 800bbc2:	e022      	b.n	800bc0a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a1b      	ldr	r3, [r3, #32]
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	1ad2      	subs	r2, r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d217      	bcs.n	800bc0a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	789b      	ldrb	r3, [r3, #2]
 800bbde:	613b      	str	r3, [r7, #16]
 800bbe0:	e010      	b.n	800bc04 <sync_window+0x78>
					wsect += fs->fsize;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	699b      	ldr	r3, [r3, #24]
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	4413      	add	r3, r2
 800bbea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	7858      	ldrb	r0, [r3, #1]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	f7ff fd1d 	bl	800b638 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	3b01      	subs	r3, #1
 800bc02:	613b      	str	r3, [r7, #16]
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d8eb      	bhi.n	800bbe2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bc0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3718      	adds	r7, #24
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d01b      	beq.n	800bc64 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f7ff ffad 	bl	800bb8c <sync_window>
 800bc32:	4603      	mov	r3, r0
 800bc34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bc36:	7bfb      	ldrb	r3, [r7, #15]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d113      	bne.n	800bc64 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	7858      	ldrb	r0, [r3, #1]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc46:	2301      	movs	r3, #1
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	f7ff fcd5 	bl	800b5f8 <disk_read>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d004      	beq.n	800bc5e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bc54:	f04f 33ff 	mov.w	r3, #4294967295
 800bc58:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
	...

0800bc70 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7ff ff87 	bl	800bb8c <sync_window>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bc82:	7bfb      	ldrb	r3, [r7, #15]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d158      	bne.n	800bd3a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d148      	bne.n	800bd22 <sync_fs+0xb2>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	791b      	ldrb	r3, [r3, #4]
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d144      	bne.n	800bd22 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	3330      	adds	r3, #48	@ 0x30
 800bc9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bca0:	2100      	movs	r1, #0
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7ff fda9 	bl	800b7fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	3330      	adds	r3, #48	@ 0x30
 800bcac:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bcb0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7ff fd38 	bl	800b72a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	3330      	adds	r3, #48	@ 0x30
 800bcbe:	4921      	ldr	r1, [pc, #132]	@ (800bd44 <sync_fs+0xd4>)
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7ff fd4d 	bl	800b760 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	3330      	adds	r3, #48	@ 0x30
 800bcca:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bcce:	491e      	ldr	r1, [pc, #120]	@ (800bd48 <sync_fs+0xd8>)
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7ff fd45 	bl	800b760 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	3330      	adds	r3, #48	@ 0x30
 800bcda:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	4619      	mov	r1, r3
 800bce4:	4610      	mov	r0, r2
 800bce6:	f7ff fd3b 	bl	800b760 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	3330      	adds	r3, #48	@ 0x30
 800bcee:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	f7ff fd31 	bl	800b760 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	69db      	ldr	r3, [r3, #28]
 800bd02:	1c5a      	adds	r2, r3, #1
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	7858      	ldrb	r0, [r3, #1]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd16:	2301      	movs	r3, #1
 800bd18:	f7ff fc8e 	bl	800b638 <disk_write>
			fs->fsi_flag = 0;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	785b      	ldrb	r3, [r3, #1]
 800bd26:	2200      	movs	r2, #0
 800bd28:	2100      	movs	r1, #0
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7ff fca4 	bl	800b678 <disk_ioctl>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <sync_fs+0xca>
 800bd36:	2301      	movs	r3, #1
 800bd38:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bd3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	41615252 	.word	0x41615252
 800bd48:	61417272 	.word	0x61417272

0800bd4c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	3b02      	subs	r3, #2
 800bd5a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	695b      	ldr	r3, [r3, #20]
 800bd60:	3b02      	subs	r3, #2
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d301      	bcc.n	800bd6c <clust2sect+0x20>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	e008      	b.n	800bd7e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	895b      	ldrh	r3, [r3, #10]
 800bd70:	461a      	mov	r2, r3
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	fb03 f202 	mul.w	r2, r3, r2
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd7c:	4413      	add	r3, r2
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	370c      	adds	r7, #12
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr

0800bd8a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b086      	sub	sp, #24
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
 800bd92:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d904      	bls.n	800bdaa <get_fat+0x20>
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	695b      	ldr	r3, [r3, #20]
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d302      	bcc.n	800bdb0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bdaa:	2301      	movs	r3, #1
 800bdac:	617b      	str	r3, [r7, #20]
 800bdae:	e08e      	b.n	800bece <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bdb0:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	2b03      	cmp	r3, #3
 800bdbc:	d061      	beq.n	800be82 <get_fat+0xf8>
 800bdbe:	2b03      	cmp	r3, #3
 800bdc0:	dc7b      	bgt.n	800beba <get_fat+0x130>
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d002      	beq.n	800bdcc <get_fat+0x42>
 800bdc6:	2b02      	cmp	r3, #2
 800bdc8:	d041      	beq.n	800be4e <get_fat+0xc4>
 800bdca:	e076      	b.n	800beba <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	60fb      	str	r3, [r7, #12]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	085b      	lsrs	r3, r3, #1
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	6a1a      	ldr	r2, [r3, #32]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	0a5b      	lsrs	r3, r3, #9
 800bde2:	4413      	add	r3, r2
 800bde4:	4619      	mov	r1, r3
 800bde6:	6938      	ldr	r0, [r7, #16]
 800bde8:	f7ff ff14 	bl	800bc14 <move_window>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d166      	bne.n	800bec0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	1c5a      	adds	r2, r3, #1
 800bdf6:	60fa      	str	r2, [r7, #12]
 800bdf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdfc:	693a      	ldr	r2, [r7, #16]
 800bdfe:	4413      	add	r3, r2
 800be00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800be04:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	6a1a      	ldr	r2, [r3, #32]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	0a5b      	lsrs	r3, r3, #9
 800be0e:	4413      	add	r3, r2
 800be10:	4619      	mov	r1, r3
 800be12:	6938      	ldr	r0, [r7, #16]
 800be14:	f7ff fefe 	bl	800bc14 <move_window>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d152      	bne.n	800bec4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	4413      	add	r3, r2
 800be28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800be2c:	021b      	lsls	r3, r3, #8
 800be2e:	68ba      	ldr	r2, [r7, #8]
 800be30:	4313      	orrs	r3, r2
 800be32:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d002      	beq.n	800be44 <get_fat+0xba>
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	091b      	lsrs	r3, r3, #4
 800be42:	e002      	b.n	800be4a <get_fat+0xc0>
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be4a:	617b      	str	r3, [r7, #20]
			break;
 800be4c:	e03f      	b.n	800bece <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	6a1a      	ldr	r2, [r3, #32]
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	0a1b      	lsrs	r3, r3, #8
 800be56:	4413      	add	r3, r2
 800be58:	4619      	mov	r1, r3
 800be5a:	6938      	ldr	r0, [r7, #16]
 800be5c:	f7ff feda 	bl	800bc14 <move_window>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d130      	bne.n	800bec8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	005b      	lsls	r3, r3, #1
 800be70:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800be74:	4413      	add	r3, r2
 800be76:	4618      	mov	r0, r3
 800be78:	f7ff fc1c 	bl	800b6b4 <ld_word>
 800be7c:	4603      	mov	r3, r0
 800be7e:	617b      	str	r3, [r7, #20]
			break;
 800be80:	e025      	b.n	800bece <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	6a1a      	ldr	r2, [r3, #32]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	09db      	lsrs	r3, r3, #7
 800be8a:	4413      	add	r3, r2
 800be8c:	4619      	mov	r1, r3
 800be8e:	6938      	ldr	r0, [r7, #16]
 800be90:	f7ff fec0 	bl	800bc14 <move_window>
 800be94:	4603      	mov	r3, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d118      	bne.n	800becc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bea8:	4413      	add	r3, r2
 800beaa:	4618      	mov	r0, r3
 800beac:	f7ff fc1a 	bl	800b6e4 <ld_dword>
 800beb0:	4603      	mov	r3, r0
 800beb2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800beb6:	617b      	str	r3, [r7, #20]
			break;
 800beb8:	e009      	b.n	800bece <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800beba:	2301      	movs	r3, #1
 800bebc:	617b      	str	r3, [r7, #20]
 800bebe:	e006      	b.n	800bece <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bec0:	bf00      	nop
 800bec2:	e004      	b.n	800bece <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bec4:	bf00      	nop
 800bec6:	e002      	b.n	800bece <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bec8:	bf00      	nop
 800beca:	e000      	b.n	800bece <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800becc:	bf00      	nop
		}
	}

	return val;
 800bece:	697b      	ldr	r3, [r7, #20]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3718      	adds	r7, #24
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bed8:	b590      	push	{r4, r7, lr}
 800beda:	b089      	sub	sp, #36	@ 0x24
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bee4:	2302      	movs	r3, #2
 800bee6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	2b01      	cmp	r3, #1
 800beec:	f240 80d9 	bls.w	800c0a2 <put_fat+0x1ca>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	695b      	ldr	r3, [r3, #20]
 800bef4:	68ba      	ldr	r2, [r7, #8]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	f080 80d3 	bcs.w	800c0a2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	2b03      	cmp	r3, #3
 800bf02:	f000 8096 	beq.w	800c032 <put_fat+0x15a>
 800bf06:	2b03      	cmp	r3, #3
 800bf08:	f300 80cb 	bgt.w	800c0a2 <put_fat+0x1ca>
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d002      	beq.n	800bf16 <put_fat+0x3e>
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d06e      	beq.n	800bff2 <put_fat+0x11a>
 800bf14:	e0c5      	b.n	800c0a2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	61bb      	str	r3, [r7, #24]
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	085b      	lsrs	r3, r3, #1
 800bf1e:	69ba      	ldr	r2, [r7, #24]
 800bf20:	4413      	add	r3, r2
 800bf22:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6a1a      	ldr	r2, [r3, #32]
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	0a5b      	lsrs	r3, r3, #9
 800bf2c:	4413      	add	r3, r2
 800bf2e:	4619      	mov	r1, r3
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f7ff fe6f 	bl	800bc14 <move_window>
 800bf36:	4603      	mov	r3, r0
 800bf38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf3a:	7ffb      	ldrb	r3, [r7, #31]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f040 80a9 	bne.w	800c094 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	1c59      	adds	r1, r3, #1
 800bf4c:	61b9      	str	r1, [r7, #24]
 800bf4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf52:	4413      	add	r3, r2
 800bf54:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	f003 0301 	and.w	r3, r3, #1
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00d      	beq.n	800bf7c <put_fat+0xa4>
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	b25b      	sxtb	r3, r3
 800bf66:	f003 030f 	and.w	r3, r3, #15
 800bf6a:	b25a      	sxtb	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	011b      	lsls	r3, r3, #4
 800bf72:	b25b      	sxtb	r3, r3
 800bf74:	4313      	orrs	r3, r2
 800bf76:	b25b      	sxtb	r3, r3
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	e001      	b.n	800bf80 <put_fat+0xa8>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	697a      	ldr	r2, [r7, #20]
 800bf82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2201      	movs	r2, #1
 800bf88:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	6a1a      	ldr	r2, [r3, #32]
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	0a5b      	lsrs	r3, r3, #9
 800bf92:	4413      	add	r3, r2
 800bf94:	4619      	mov	r1, r3
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f7ff fe3c 	bl	800bc14 <move_window>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfa0:	7ffb      	ldrb	r3, [r7, #31]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d178      	bne.n	800c098 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfb2:	4413      	add	r3, r2
 800bfb4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	f003 0301 	and.w	r3, r3, #1
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d003      	beq.n	800bfc8 <put_fat+0xf0>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	091b      	lsrs	r3, r3, #4
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	e00e      	b.n	800bfe6 <put_fat+0x10e>
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	b25b      	sxtb	r3, r3
 800bfce:	f023 030f 	bic.w	r3, r3, #15
 800bfd2:	b25a      	sxtb	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	0a1b      	lsrs	r3, r3, #8
 800bfd8:	b25b      	sxtb	r3, r3
 800bfda:	f003 030f 	and.w	r3, r3, #15
 800bfde:	b25b      	sxtb	r3, r3
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	b25b      	sxtb	r3, r3
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	697a      	ldr	r2, [r7, #20]
 800bfe8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2201      	movs	r2, #1
 800bfee:	70da      	strb	r2, [r3, #3]
			break;
 800bff0:	e057      	b.n	800c0a2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6a1a      	ldr	r2, [r3, #32]
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	0a1b      	lsrs	r3, r3, #8
 800bffa:	4413      	add	r3, r2
 800bffc:	4619      	mov	r1, r3
 800bffe:	68f8      	ldr	r0, [r7, #12]
 800c000:	f7ff fe08 	bl	800bc14 <move_window>
 800c004:	4603      	mov	r3, r0
 800c006:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c008:	7ffb      	ldrb	r3, [r7, #31]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d146      	bne.n	800c09c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	005b      	lsls	r3, r3, #1
 800c018:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c01c:	4413      	add	r3, r2
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	b292      	uxth	r2, r2
 800c022:	4611      	mov	r1, r2
 800c024:	4618      	mov	r0, r3
 800c026:	f7ff fb80 	bl	800b72a <st_word>
			fs->wflag = 1;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2201      	movs	r2, #1
 800c02e:	70da      	strb	r2, [r3, #3]
			break;
 800c030:	e037      	b.n	800c0a2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6a1a      	ldr	r2, [r3, #32]
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	09db      	lsrs	r3, r3, #7
 800c03a:	4413      	add	r3, r2
 800c03c:	4619      	mov	r1, r3
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f7ff fde8 	bl	800bc14 <move_window>
 800c044:	4603      	mov	r3, r0
 800c046:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c048:	7ffb      	ldrb	r3, [r7, #31]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d128      	bne.n	800c0a0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c062:	4413      	add	r3, r2
 800c064:	4618      	mov	r0, r3
 800c066:	f7ff fb3d 	bl	800b6e4 <ld_dword>
 800c06a:	4603      	mov	r3, r0
 800c06c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c070:	4323      	orrs	r3, r4
 800c072:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c082:	4413      	add	r3, r2
 800c084:	6879      	ldr	r1, [r7, #4]
 800c086:	4618      	mov	r0, r3
 800c088:	f7ff fb6a 	bl	800b760 <st_dword>
			fs->wflag = 1;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2201      	movs	r2, #1
 800c090:	70da      	strb	r2, [r3, #3]
			break;
 800c092:	e006      	b.n	800c0a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c094:	bf00      	nop
 800c096:	e004      	b.n	800c0a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c098:	bf00      	nop
 800c09a:	e002      	b.n	800c0a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c09c:	bf00      	nop
 800c09e:	e000      	b.n	800c0a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c0a0:	bf00      	nop
		}
	}
	return res;
 800c0a2:	7ffb      	ldrb	r3, [r7, #31]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3724      	adds	r7, #36	@ 0x24
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd90      	pop	{r4, r7, pc}

0800c0ac <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b088      	sub	sp, #32
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d904      	bls.n	800c0d2 <remove_chain+0x26>
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d301      	bcc.n	800c0d6 <remove_chain+0x2a>
 800c0d2:	2302      	movs	r3, #2
 800c0d4:	e04b      	b.n	800c16e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d00c      	beq.n	800c0f6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e0:	6879      	ldr	r1, [r7, #4]
 800c0e2:	69b8      	ldr	r0, [r7, #24]
 800c0e4:	f7ff fef8 	bl	800bed8 <put_fat>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c0ec:	7ffb      	ldrb	r3, [r7, #31]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d001      	beq.n	800c0f6 <remove_chain+0x4a>
 800c0f2:	7ffb      	ldrb	r3, [r7, #31]
 800c0f4:	e03b      	b.n	800c16e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c0f6:	68b9      	ldr	r1, [r7, #8]
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f7ff fe46 	bl	800bd8a <get_fat>
 800c0fe:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d031      	beq.n	800c16a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d101      	bne.n	800c110 <remove_chain+0x64>
 800c10c:	2302      	movs	r3, #2
 800c10e:	e02e      	b.n	800c16e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c116:	d101      	bne.n	800c11c <remove_chain+0x70>
 800c118:	2301      	movs	r3, #1
 800c11a:	e028      	b.n	800c16e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c11c:	2200      	movs	r2, #0
 800c11e:	68b9      	ldr	r1, [r7, #8]
 800c120:	69b8      	ldr	r0, [r7, #24]
 800c122:	f7ff fed9 	bl	800bed8 <put_fat>
 800c126:	4603      	mov	r3, r0
 800c128:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c12a:	7ffb      	ldrb	r3, [r7, #31]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d001      	beq.n	800c134 <remove_chain+0x88>
 800c130:	7ffb      	ldrb	r3, [r7, #31]
 800c132:	e01c      	b.n	800c16e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	691a      	ldr	r2, [r3, #16]
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	695b      	ldr	r3, [r3, #20]
 800c13c:	3b02      	subs	r3, #2
 800c13e:	429a      	cmp	r2, r3
 800c140:	d20b      	bcs.n	800c15a <remove_chain+0xae>
			fs->free_clst++;
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	691b      	ldr	r3, [r3, #16]
 800c146:	1c5a      	adds	r2, r3, #1
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	791b      	ldrb	r3, [r3, #4]
 800c150:	f043 0301 	orr.w	r3, r3, #1
 800c154:	b2da      	uxtb	r2, r3
 800c156:	69bb      	ldr	r3, [r7, #24]
 800c158:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	695b      	ldr	r3, [r3, #20]
 800c162:	68ba      	ldr	r2, [r7, #8]
 800c164:	429a      	cmp	r2, r3
 800c166:	d3c6      	bcc.n	800c0f6 <remove_chain+0x4a>
 800c168:	e000      	b.n	800c16c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c16a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3720      	adds	r7, #32
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b088      	sub	sp, #32
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
 800c17e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d10d      	bne.n	800c1a8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d004      	beq.n	800c1a2 <create_chain+0x2c>
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	695b      	ldr	r3, [r3, #20]
 800c19c:	69ba      	ldr	r2, [r7, #24]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d31b      	bcc.n	800c1da <create_chain+0x64>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	61bb      	str	r3, [r7, #24]
 800c1a6:	e018      	b.n	800c1da <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f7ff fded 	bl	800bd8a <get_fat>
 800c1b0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d801      	bhi.n	800c1bc <create_chain+0x46>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e070      	b.n	800c29e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c2:	d101      	bne.n	800c1c8 <create_chain+0x52>
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	e06a      	b.n	800c29e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	695b      	ldr	r3, [r3, #20]
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d201      	bcs.n	800c1d6 <create_chain+0x60>
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	e063      	b.n	800c29e <create_chain+0x128>
		scl = clst;
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	695b      	ldr	r3, [r3, #20]
 800c1e8:	69fa      	ldr	r2, [r7, #28]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d307      	bcc.n	800c1fe <create_chain+0x88>
				ncl = 2;
 800c1ee:	2302      	movs	r3, #2
 800c1f0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c1f2:	69fa      	ldr	r2, [r7, #28]
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d901      	bls.n	800c1fe <create_chain+0x88>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	e04f      	b.n	800c29e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c1fe:	69f9      	ldr	r1, [r7, #28]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f7ff fdc2 	bl	800bd8a <get_fat>
 800c206:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00e      	beq.n	800c22c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d003      	beq.n	800c21c <create_chain+0xa6>
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c21a:	d101      	bne.n	800c220 <create_chain+0xaa>
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	e03e      	b.n	800c29e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c220:	69fa      	ldr	r2, [r7, #28]
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	429a      	cmp	r2, r3
 800c226:	d1da      	bne.n	800c1de <create_chain+0x68>
 800c228:	2300      	movs	r3, #0
 800c22a:	e038      	b.n	800c29e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c22c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c22e:	f04f 32ff 	mov.w	r2, #4294967295
 800c232:	69f9      	ldr	r1, [r7, #28]
 800c234:	6938      	ldr	r0, [r7, #16]
 800c236:	f7ff fe4f 	bl	800bed8 <put_fat>
 800c23a:	4603      	mov	r3, r0
 800c23c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c23e:	7dfb      	ldrb	r3, [r7, #23]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d109      	bne.n	800c258 <create_chain+0xe2>
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d006      	beq.n	800c258 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c24a:	69fa      	ldr	r2, [r7, #28]
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	6938      	ldr	r0, [r7, #16]
 800c250:	f7ff fe42 	bl	800bed8 <put_fat>
 800c254:	4603      	mov	r3, r0
 800c256:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c258:	7dfb      	ldrb	r3, [r7, #23]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d116      	bne.n	800c28c <create_chain+0x116>
		fs->last_clst = ncl;
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	69fa      	ldr	r2, [r7, #28]
 800c262:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	691a      	ldr	r2, [r3, #16]
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	695b      	ldr	r3, [r3, #20]
 800c26c:	3b02      	subs	r3, #2
 800c26e:	429a      	cmp	r2, r3
 800c270:	d804      	bhi.n	800c27c <create_chain+0x106>
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	691b      	ldr	r3, [r3, #16]
 800c276:	1e5a      	subs	r2, r3, #1
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	791b      	ldrb	r3, [r3, #4]
 800c280:	f043 0301 	orr.w	r3, r3, #1
 800c284:	b2da      	uxtb	r2, r3
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	711a      	strb	r2, [r3, #4]
 800c28a:	e007      	b.n	800c29c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d102      	bne.n	800c298 <create_chain+0x122>
 800c292:	f04f 33ff 	mov.w	r3, #4294967295
 800c296:	e000      	b.n	800c29a <create_chain+0x124>
 800c298:	2301      	movs	r3, #1
 800c29a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c29c:	69fb      	ldr	r3, [r7, #28]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3720      	adds	r7, #32
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c2a6:	b480      	push	{r7}
 800c2a8:	b087      	sub	sp, #28
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
 800c2ae:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ba:	3304      	adds	r3, #4
 800c2bc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	0a5b      	lsrs	r3, r3, #9
 800c2c2:	68fa      	ldr	r2, [r7, #12]
 800c2c4:	8952      	ldrh	r2, [r2, #10]
 800c2c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2ca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	1d1a      	adds	r2, r3, #4
 800c2d0:	613a      	str	r2, [r7, #16]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d101      	bne.n	800c2e0 <clmt_clust+0x3a>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	e010      	b.n	800c302 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c2e0:	697a      	ldr	r2, [r7, #20]
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d307      	bcc.n	800c2f8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c2e8:	697a      	ldr	r2, [r7, #20]
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	617b      	str	r3, [r7, #20]
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c2f6:	e7e9      	b.n	800c2cc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c2f8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	681a      	ldr	r2, [r3, #0]
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	4413      	add	r3, r2
}
 800c302:	4618      	mov	r0, r3
 800c304:	371c      	adds	r7, #28
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr

0800c30e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b086      	sub	sp, #24
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
 800c316:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c324:	d204      	bcs.n	800c330 <dir_sdi+0x22>
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	f003 031f 	and.w	r3, r3, #31
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d001      	beq.n	800c334 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c330:	2302      	movs	r3, #2
 800c332:	e063      	b.n	800c3fc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d106      	bne.n	800c354 <dir_sdi+0x46>
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	2b02      	cmp	r3, #2
 800c34c:	d902      	bls.n	800c354 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c352:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d10c      	bne.n	800c374 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	095b      	lsrs	r3, r3, #5
 800c35e:	693a      	ldr	r2, [r7, #16]
 800c360:	8912      	ldrh	r2, [r2, #8]
 800c362:	4293      	cmp	r3, r2
 800c364:	d301      	bcc.n	800c36a <dir_sdi+0x5c>
 800c366:	2302      	movs	r3, #2
 800c368:	e048      	b.n	800c3fc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	61da      	str	r2, [r3, #28]
 800c372:	e029      	b.n	800c3c8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	895b      	ldrh	r3, [r3, #10]
 800c378:	025b      	lsls	r3, r3, #9
 800c37a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c37c:	e019      	b.n	800c3b2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6979      	ldr	r1, [r7, #20]
 800c382:	4618      	mov	r0, r3
 800c384:	f7ff fd01 	bl	800bd8a <get_fat>
 800c388:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c390:	d101      	bne.n	800c396 <dir_sdi+0x88>
 800c392:	2301      	movs	r3, #1
 800c394:	e032      	b.n	800c3fc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d904      	bls.n	800c3a6 <dir_sdi+0x98>
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	695b      	ldr	r3, [r3, #20]
 800c3a0:	697a      	ldr	r2, [r7, #20]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d301      	bcc.n	800c3aa <dir_sdi+0x9c>
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	e028      	b.n	800c3fc <dir_sdi+0xee>
			ofs -= csz;
 800c3aa:	683a      	ldr	r2, [r7, #0]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	1ad3      	subs	r3, r2, r3
 800c3b0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c3b2:	683a      	ldr	r2, [r7, #0]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d2e1      	bcs.n	800c37e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c3ba:	6979      	ldr	r1, [r7, #20]
 800c3bc:	6938      	ldr	r0, [r7, #16]
 800c3be:	f7ff fcc5 	bl	800bd4c <clust2sect>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	697a      	ldr	r2, [r7, #20]
 800c3cc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	69db      	ldr	r3, [r3, #28]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d101      	bne.n	800c3da <dir_sdi+0xcc>
 800c3d6:	2302      	movs	r3, #2
 800c3d8:	e010      	b.n	800c3fc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	69da      	ldr	r2, [r3, #28]
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	0a5b      	lsrs	r3, r3, #9
 800c3e2:	441a      	add	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3f4:	441a      	add	r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3718      	adds	r7, #24
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	695b      	ldr	r3, [r3, #20]
 800c418:	3320      	adds	r3, #32
 800c41a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	69db      	ldr	r3, [r3, #28]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d003      	beq.n	800c42c <dir_next+0x28>
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c42a:	d301      	bcc.n	800c430 <dir_next+0x2c>
 800c42c:	2304      	movs	r3, #4
 800c42e:	e0aa      	b.n	800c586 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c436:	2b00      	cmp	r3, #0
 800c438:	f040 8098 	bne.w	800c56c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	69db      	ldr	r3, [r3, #28]
 800c440:	1c5a      	adds	r2, r3, #1
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	699b      	ldr	r3, [r3, #24]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d10b      	bne.n	800c466 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	095b      	lsrs	r3, r3, #5
 800c452:	68fa      	ldr	r2, [r7, #12]
 800c454:	8912      	ldrh	r2, [r2, #8]
 800c456:	4293      	cmp	r3, r2
 800c458:	f0c0 8088 	bcc.w	800c56c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	61da      	str	r2, [r3, #28]
 800c462:	2304      	movs	r3, #4
 800c464:	e08f      	b.n	800c586 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	0a5b      	lsrs	r3, r3, #9
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	8952      	ldrh	r2, [r2, #10]
 800c46e:	3a01      	subs	r2, #1
 800c470:	4013      	ands	r3, r2
 800c472:	2b00      	cmp	r3, #0
 800c474:	d17a      	bne.n	800c56c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	699b      	ldr	r3, [r3, #24]
 800c47c:	4619      	mov	r1, r3
 800c47e:	4610      	mov	r0, r2
 800c480:	f7ff fc83 	bl	800bd8a <get_fat>
 800c484:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d801      	bhi.n	800c490 <dir_next+0x8c>
 800c48c:	2302      	movs	r3, #2
 800c48e:	e07a      	b.n	800c586 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c496:	d101      	bne.n	800c49c <dir_next+0x98>
 800c498:	2301      	movs	r3, #1
 800c49a:	e074      	b.n	800c586 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	695b      	ldr	r3, [r3, #20]
 800c4a0:	697a      	ldr	r2, [r7, #20]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d358      	bcc.n	800c558 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d104      	bne.n	800c4b6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	61da      	str	r2, [r3, #28]
 800c4b2:	2304      	movs	r3, #4
 800c4b4:	e067      	b.n	800c586 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	4619      	mov	r1, r3
 800c4be:	4610      	mov	r0, r2
 800c4c0:	f7ff fe59 	bl	800c176 <create_chain>
 800c4c4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d101      	bne.n	800c4d0 <dir_next+0xcc>
 800c4cc:	2307      	movs	r3, #7
 800c4ce:	e05a      	b.n	800c586 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d101      	bne.n	800c4da <dir_next+0xd6>
 800c4d6:	2302      	movs	r3, #2
 800c4d8:	e055      	b.n	800c586 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4e0:	d101      	bne.n	800c4e6 <dir_next+0xe2>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e04f      	b.n	800c586 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f7ff fb50 	bl	800bb8c <sync_window>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d001      	beq.n	800c4f6 <dir_next+0xf2>
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	e047      	b.n	800c586 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	3330      	adds	r3, #48	@ 0x30
 800c4fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4fe:	2100      	movs	r1, #0
 800c500:	4618      	mov	r0, r3
 800c502:	f7ff f97a 	bl	800b7fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c506:	2300      	movs	r3, #0
 800c508:	613b      	str	r3, [r7, #16]
 800c50a:	6979      	ldr	r1, [r7, #20]
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	f7ff fc1d 	bl	800bd4c <clust2sect>
 800c512:	4602      	mov	r2, r0
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c518:	e012      	b.n	800c540 <dir_next+0x13c>
						fs->wflag = 1;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2201      	movs	r2, #1
 800c51e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f7ff fb33 	bl	800bb8c <sync_window>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d001      	beq.n	800c530 <dir_next+0x12c>
 800c52c:	2301      	movs	r3, #1
 800c52e:	e02a      	b.n	800c586 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	3301      	adds	r3, #1
 800c534:	613b      	str	r3, [r7, #16]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c53a:	1c5a      	adds	r2, r3, #1
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	895b      	ldrh	r3, [r3, #10]
 800c544:	461a      	mov	r2, r3
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	4293      	cmp	r3, r2
 800c54a:	d3e6      	bcc.n	800c51a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	1ad2      	subs	r2, r2, r3
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	697a      	ldr	r2, [r7, #20]
 800c55c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c55e:	6979      	ldr	r1, [r7, #20]
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f7ff fbf3 	bl	800bd4c <clust2sect>
 800c566:	4602      	mov	r2, r0
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c57e:	441a      	add	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3718      	adds	r7, #24
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b086      	sub	sp, #24
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c59e:	2100      	movs	r1, #0
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7ff feb4 	bl	800c30e <dir_sdi>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c5aa:	7dfb      	ldrb	r3, [r7, #23]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d12b      	bne.n	800c608 <dir_alloc+0x7a>
		n = 0;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	69db      	ldr	r3, [r3, #28]
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f7ff fb2a 	bl	800bc14 <move_window>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c5c4:	7dfb      	ldrb	r3, [r7, #23]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d11d      	bne.n	800c606 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	2be5      	cmp	r3, #229	@ 0xe5
 800c5d2:	d004      	beq.n	800c5de <dir_alloc+0x50>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6a1b      	ldr	r3, [r3, #32]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d107      	bne.n	800c5ee <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	613b      	str	r3, [r7, #16]
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d102      	bne.n	800c5f2 <dir_alloc+0x64>
 800c5ec:	e00c      	b.n	800c608 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7ff ff05 	bl	800c404 <dir_next>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c5fe:	7dfb      	ldrb	r3, [r7, #23]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d0d7      	beq.n	800c5b4 <dir_alloc+0x26>
 800c604:	e000      	b.n	800c608 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c606:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c608:	7dfb      	ldrb	r3, [r7, #23]
 800c60a:	2b04      	cmp	r3, #4
 800c60c:	d101      	bne.n	800c612 <dir_alloc+0x84>
 800c60e:	2307      	movs	r3, #7
 800c610:	75fb      	strb	r3, [r7, #23]
	return res;
 800c612:	7dfb      	ldrb	r3, [r7, #23]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3718      	adds	r7, #24
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	331a      	adds	r3, #26
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7ff f842 	bl	800b6b4 <ld_word>
 800c630:	4603      	mov	r3, r0
 800c632:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	2b03      	cmp	r3, #3
 800c63a:	d109      	bne.n	800c650 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	3314      	adds	r3, #20
 800c640:	4618      	mov	r0, r3
 800c642:	f7ff f837 	bl	800b6b4 <ld_word>
 800c646:	4603      	mov	r3, r0
 800c648:	041b      	lsls	r3, r3, #16
 800c64a:	68fa      	ldr	r2, [r7, #12]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c650:	68fb      	ldr	r3, [r7, #12]
}
 800c652:	4618      	mov	r0, r3
 800c654:	3710      	adds	r7, #16
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}

0800c65a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c65a:	b580      	push	{r7, lr}
 800c65c:	b084      	sub	sp, #16
 800c65e:	af00      	add	r7, sp, #0
 800c660:	60f8      	str	r0, [r7, #12]
 800c662:	60b9      	str	r1, [r7, #8]
 800c664:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	331a      	adds	r3, #26
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	b292      	uxth	r2, r2
 800c66e:	4611      	mov	r1, r2
 800c670:	4618      	mov	r0, r3
 800c672:	f7ff f85a 	bl	800b72a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	2b03      	cmp	r3, #3
 800c67c:	d109      	bne.n	800c692 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	f103 0214 	add.w	r2, r3, #20
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	0c1b      	lsrs	r3, r3, #16
 800c688:	b29b      	uxth	r3, r3
 800c68a:	4619      	mov	r1, r3
 800c68c:	4610      	mov	r0, r2
 800c68e:	f7ff f84c 	bl	800b72a <st_word>
	}
}
 800c692:	bf00      	nop
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b086      	sub	sp, #24
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7ff fe2f 	bl	800c30e <dir_sdi>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c6b4:	7dfb      	ldrb	r3, [r7, #23]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d001      	beq.n	800c6be <dir_find+0x24>
 800c6ba:	7dfb      	ldrb	r3, [r7, #23]
 800c6bc:	e03e      	b.n	800c73c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	69db      	ldr	r3, [r3, #28]
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	6938      	ldr	r0, [r7, #16]
 800c6c6:	f7ff faa5 	bl	800bc14 <move_window>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c6ce:	7dfb      	ldrb	r3, [r7, #23]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d12f      	bne.n	800c734 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6a1b      	ldr	r3, [r3, #32]
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c6dc:	7bfb      	ldrb	r3, [r7, #15]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d102      	bne.n	800c6e8 <dir_find+0x4e>
 800c6e2:	2304      	movs	r3, #4
 800c6e4:	75fb      	strb	r3, [r7, #23]
 800c6e6:	e028      	b.n	800c73a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6a1b      	ldr	r3, [r3, #32]
 800c6ec:	330b      	adds	r3, #11
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6f4:	b2da      	uxtb	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a1b      	ldr	r3, [r3, #32]
 800c6fe:	330b      	adds	r3, #11
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	f003 0308 	and.w	r3, r3, #8
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10a      	bne.n	800c720 <dir_find+0x86>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a18      	ldr	r0, [r3, #32]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	3324      	adds	r3, #36	@ 0x24
 800c712:	220b      	movs	r2, #11
 800c714:	4619      	mov	r1, r3
 800c716:	f7ff f88b 	bl	800b830 <mem_cmp>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00b      	beq.n	800c738 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c720:	2100      	movs	r1, #0
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f7ff fe6e 	bl	800c404 <dir_next>
 800c728:	4603      	mov	r3, r0
 800c72a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c72c:	7dfb      	ldrb	r3, [r7, #23]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d0c5      	beq.n	800c6be <dir_find+0x24>
 800c732:	e002      	b.n	800c73a <dir_find+0xa0>
		if (res != FR_OK) break;
 800c734:	bf00      	nop
 800c736:	e000      	b.n	800c73a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c738:	bf00      	nop

	return res;
 800c73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3718      	adds	r7, #24
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c752:	2101      	movs	r1, #1
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f7ff ff1a 	bl	800c58e <dir_alloc>
 800c75a:	4603      	mov	r3, r0
 800c75c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c75e:	7bfb      	ldrb	r3, [r7, #15]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d11c      	bne.n	800c79e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	69db      	ldr	r3, [r3, #28]
 800c768:	4619      	mov	r1, r3
 800c76a:	68b8      	ldr	r0, [r7, #8]
 800c76c:	f7ff fa52 	bl	800bc14 <move_window>
 800c770:	4603      	mov	r3, r0
 800c772:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c774:	7bfb      	ldrb	r3, [r7, #15]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d111      	bne.n	800c79e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a1b      	ldr	r3, [r3, #32]
 800c77e:	2220      	movs	r2, #32
 800c780:	2100      	movs	r1, #0
 800c782:	4618      	mov	r0, r3
 800c784:	f7ff f839 	bl	800b7fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6a18      	ldr	r0, [r3, #32]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	3324      	adds	r3, #36	@ 0x24
 800c790:	220b      	movs	r2, #11
 800c792:	4619      	mov	r1, r3
 800c794:	f7ff f810 	bl	800b7b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	2201      	movs	r2, #1
 800c79c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b088      	sub	sp, #32
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	60fb      	str	r3, [r7, #12]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	3324      	adds	r3, #36	@ 0x24
 800c7bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c7be:	220b      	movs	r2, #11
 800c7c0:	2120      	movs	r1, #32
 800c7c2:	68b8      	ldr	r0, [r7, #8]
 800c7c4:	f7ff f819 	bl	800b7fa <mem_set>
	si = i = 0; ni = 8;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	613b      	str	r3, [r7, #16]
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	61fb      	str	r3, [r7, #28]
 800c7d0:	2308      	movs	r3, #8
 800c7d2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	1c5a      	adds	r2, r3, #1
 800c7d8:	61fa      	str	r2, [r7, #28]
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	4413      	add	r3, r2
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c7e2:	7efb      	ldrb	r3, [r7, #27]
 800c7e4:	2b20      	cmp	r3, #32
 800c7e6:	d94e      	bls.n	800c886 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c7e8:	7efb      	ldrb	r3, [r7, #27]
 800c7ea:	2b2f      	cmp	r3, #47	@ 0x2f
 800c7ec:	d006      	beq.n	800c7fc <create_name+0x54>
 800c7ee:	7efb      	ldrb	r3, [r7, #27]
 800c7f0:	2b5c      	cmp	r3, #92	@ 0x5c
 800c7f2:	d110      	bne.n	800c816 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c7f4:	e002      	b.n	800c7fc <create_name+0x54>
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	61fb      	str	r3, [r7, #28]
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	69fb      	ldr	r3, [r7, #28]
 800c800:	4413      	add	r3, r2
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b2f      	cmp	r3, #47	@ 0x2f
 800c806:	d0f6      	beq.n	800c7f6 <create_name+0x4e>
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	69fb      	ldr	r3, [r7, #28]
 800c80c:	4413      	add	r3, r2
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b5c      	cmp	r3, #92	@ 0x5c
 800c812:	d0f0      	beq.n	800c7f6 <create_name+0x4e>
			break;
 800c814:	e038      	b.n	800c888 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c816:	7efb      	ldrb	r3, [r7, #27]
 800c818:	2b2e      	cmp	r3, #46	@ 0x2e
 800c81a:	d003      	beq.n	800c824 <create_name+0x7c>
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	429a      	cmp	r2, r3
 800c822:	d30c      	bcc.n	800c83e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	2b0b      	cmp	r3, #11
 800c828:	d002      	beq.n	800c830 <create_name+0x88>
 800c82a:	7efb      	ldrb	r3, [r7, #27]
 800c82c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c82e:	d001      	beq.n	800c834 <create_name+0x8c>
 800c830:	2306      	movs	r3, #6
 800c832:	e044      	b.n	800c8be <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c834:	2308      	movs	r3, #8
 800c836:	613b      	str	r3, [r7, #16]
 800c838:	230b      	movs	r3, #11
 800c83a:	617b      	str	r3, [r7, #20]
			continue;
 800c83c:	e022      	b.n	800c884 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c83e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c842:	2b00      	cmp	r3, #0
 800c844:	da04      	bge.n	800c850 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c846:	7efb      	ldrb	r3, [r7, #27]
 800c848:	3b80      	subs	r3, #128	@ 0x80
 800c84a:	4a1f      	ldr	r2, [pc, #124]	@ (800c8c8 <create_name+0x120>)
 800c84c:	5cd3      	ldrb	r3, [r2, r3]
 800c84e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c850:	7efb      	ldrb	r3, [r7, #27]
 800c852:	4619      	mov	r1, r3
 800c854:	481d      	ldr	r0, [pc, #116]	@ (800c8cc <create_name+0x124>)
 800c856:	f7ff f812 	bl	800b87e <chk_chr>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d001      	beq.n	800c864 <create_name+0xbc>
 800c860:	2306      	movs	r3, #6
 800c862:	e02c      	b.n	800c8be <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c864:	7efb      	ldrb	r3, [r7, #27]
 800c866:	2b60      	cmp	r3, #96	@ 0x60
 800c868:	d905      	bls.n	800c876 <create_name+0xce>
 800c86a:	7efb      	ldrb	r3, [r7, #27]
 800c86c:	2b7a      	cmp	r3, #122	@ 0x7a
 800c86e:	d802      	bhi.n	800c876 <create_name+0xce>
 800c870:	7efb      	ldrb	r3, [r7, #27]
 800c872:	3b20      	subs	r3, #32
 800c874:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	1c5a      	adds	r2, r3, #1
 800c87a:	613a      	str	r2, [r7, #16]
 800c87c:	68ba      	ldr	r2, [r7, #8]
 800c87e:	4413      	add	r3, r2
 800c880:	7efa      	ldrb	r2, [r7, #27]
 800c882:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c884:	e7a6      	b.n	800c7d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c886:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	441a      	add	r2, r3
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d101      	bne.n	800c89c <create_name+0xf4>
 800c898:	2306      	movs	r3, #6
 800c89a:	e010      	b.n	800c8be <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	2be5      	cmp	r3, #229	@ 0xe5
 800c8a2:	d102      	bne.n	800c8aa <create_name+0x102>
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	2205      	movs	r2, #5
 800c8a8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c8aa:	7efb      	ldrb	r3, [r7, #27]
 800c8ac:	2b20      	cmp	r3, #32
 800c8ae:	d801      	bhi.n	800c8b4 <create_name+0x10c>
 800c8b0:	2204      	movs	r2, #4
 800c8b2:	e000      	b.n	800c8b6 <create_name+0x10e>
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	330b      	adds	r3, #11
 800c8ba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c8bc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3720      	adds	r7, #32
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	080158f0 	.word	0x080158f0
 800c8cc:	08015848 	.word	0x08015848

0800c8d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b086      	sub	sp, #24
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c8e4:	e002      	b.n	800c8ec <follow_path+0x1c>
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	603b      	str	r3, [r7, #0]
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	2b2f      	cmp	r3, #47	@ 0x2f
 800c8f2:	d0f8      	beq.n	800c8e6 <follow_path+0x16>
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	2b5c      	cmp	r3, #92	@ 0x5c
 800c8fa:	d0f4      	beq.n	800c8e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	2200      	movs	r2, #0
 800c900:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	2b1f      	cmp	r3, #31
 800c908:	d80a      	bhi.n	800c920 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2280      	movs	r2, #128	@ 0x80
 800c90e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c912:	2100      	movs	r1, #0
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7ff fcfa 	bl	800c30e <dir_sdi>
 800c91a:	4603      	mov	r3, r0
 800c91c:	75fb      	strb	r3, [r7, #23]
 800c91e:	e043      	b.n	800c9a8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c920:	463b      	mov	r3, r7
 800c922:	4619      	mov	r1, r3
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f7ff ff3f 	bl	800c7a8 <create_name>
 800c92a:	4603      	mov	r3, r0
 800c92c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c92e:	7dfb      	ldrb	r3, [r7, #23]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d134      	bne.n	800c99e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f7ff feb0 	bl	800c69a <dir_find>
 800c93a:	4603      	mov	r3, r0
 800c93c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c944:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c946:	7dfb      	ldrb	r3, [r7, #23]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d00a      	beq.n	800c962 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c94c:	7dfb      	ldrb	r3, [r7, #23]
 800c94e:	2b04      	cmp	r3, #4
 800c950:	d127      	bne.n	800c9a2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c952:	7afb      	ldrb	r3, [r7, #11]
 800c954:	f003 0304 	and.w	r3, r3, #4
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d122      	bne.n	800c9a2 <follow_path+0xd2>
 800c95c:	2305      	movs	r3, #5
 800c95e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c960:	e01f      	b.n	800c9a2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c962:	7afb      	ldrb	r3, [r7, #11]
 800c964:	f003 0304 	and.w	r3, r3, #4
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d11c      	bne.n	800c9a6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	799b      	ldrb	r3, [r3, #6]
 800c970:	f003 0310 	and.w	r3, r3, #16
 800c974:	2b00      	cmp	r3, #0
 800c976:	d102      	bne.n	800c97e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c978:	2305      	movs	r3, #5
 800c97a:	75fb      	strb	r3, [r7, #23]
 800c97c:	e014      	b.n	800c9a8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	695b      	ldr	r3, [r3, #20]
 800c988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c98c:	4413      	add	r3, r2
 800c98e:	4619      	mov	r1, r3
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f7ff fe43 	bl	800c61c <ld_clust>
 800c996:	4602      	mov	r2, r0
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c99c:	e7c0      	b.n	800c920 <follow_path+0x50>
			if (res != FR_OK) break;
 800c99e:	bf00      	nop
 800c9a0:	e002      	b.n	800c9a8 <follow_path+0xd8>
				break;
 800c9a2:	bf00      	nop
 800c9a4:	e000      	b.n	800c9a8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c9a6:	bf00      	nop
			}
		}
	}

	return res;
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3718      	adds	r7, #24
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c9b2:	b480      	push	{r7}
 800c9b4:	b087      	sub	sp, #28
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c9be:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d031      	beq.n	800ca2c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	617b      	str	r3, [r7, #20]
 800c9ce:	e002      	b.n	800c9d6 <get_ldnumber+0x24>
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	617b      	str	r3, [r7, #20]
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	2b20      	cmp	r3, #32
 800c9dc:	d903      	bls.n	800c9e6 <get_ldnumber+0x34>
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	2b3a      	cmp	r3, #58	@ 0x3a
 800c9e4:	d1f4      	bne.n	800c9d0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	2b3a      	cmp	r3, #58	@ 0x3a
 800c9ec:	d11c      	bne.n	800ca28 <get_ldnumber+0x76>
			tp = *path;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	1c5a      	adds	r2, r3, #1
 800c9f8:	60fa      	str	r2, [r7, #12]
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	3b30      	subs	r3, #48	@ 0x30
 800c9fe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	2b09      	cmp	r3, #9
 800ca04:	d80e      	bhi.n	800ca24 <get_ldnumber+0x72>
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d10a      	bne.n	800ca24 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d107      	bne.n	800ca24 <get_ldnumber+0x72>
					vol = (int)i;
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	617b      	str	r3, [r7, #20]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	697a      	ldr	r2, [r7, #20]
 800ca22:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	e002      	b.n	800ca2e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ca28:	2300      	movs	r3, #0
 800ca2a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ca2c:	693b      	ldr	r3, [r7, #16]
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	371c      	adds	r7, #28
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr
	...

0800ca3c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	70da      	strb	r2, [r3, #3]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca52:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ca54:	6839      	ldr	r1, [r7, #0]
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f7ff f8dc 	bl	800bc14 <move_window>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d001      	beq.n	800ca66 <check_fs+0x2a>
 800ca62:	2304      	movs	r3, #4
 800ca64:	e038      	b.n	800cad8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	3330      	adds	r3, #48	@ 0x30
 800ca6a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7fe fe20 	bl	800b6b4 <ld_word>
 800ca74:	4603      	mov	r3, r0
 800ca76:	461a      	mov	r2, r3
 800ca78:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d001      	beq.n	800ca84 <check_fs+0x48>
 800ca80:	2303      	movs	r3, #3
 800ca82:	e029      	b.n	800cad8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca8a:	2be9      	cmp	r3, #233	@ 0xe9
 800ca8c:	d009      	beq.n	800caa2 <check_fs+0x66>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca94:	2beb      	cmp	r3, #235	@ 0xeb
 800ca96:	d11e      	bne.n	800cad6 <check_fs+0x9a>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ca9e:	2b90      	cmp	r3, #144	@ 0x90
 800caa0:	d119      	bne.n	800cad6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	3330      	adds	r3, #48	@ 0x30
 800caa6:	3336      	adds	r3, #54	@ 0x36
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7fe fe1b 	bl	800b6e4 <ld_dword>
 800caae:	4603      	mov	r3, r0
 800cab0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cab4:	4a0a      	ldr	r2, [pc, #40]	@ (800cae0 <check_fs+0xa4>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d101      	bne.n	800cabe <check_fs+0x82>
 800caba:	2300      	movs	r3, #0
 800cabc:	e00c      	b.n	800cad8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	3330      	adds	r3, #48	@ 0x30
 800cac2:	3352      	adds	r3, #82	@ 0x52
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fe fe0d 	bl	800b6e4 <ld_dword>
 800caca:	4603      	mov	r3, r0
 800cacc:	4a05      	ldr	r2, [pc, #20]	@ (800cae4 <check_fs+0xa8>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d101      	bne.n	800cad6 <check_fs+0x9a>
 800cad2:	2300      	movs	r3, #0
 800cad4:	e000      	b.n	800cad8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cad6:	2302      	movs	r3, #2
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3708      	adds	r7, #8
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	00544146 	.word	0x00544146
 800cae4:	33544146 	.word	0x33544146

0800cae8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b096      	sub	sp, #88	@ 0x58
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	4613      	mov	r3, r2
 800caf4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	2200      	movs	r2, #0
 800cafa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cafc:	68f8      	ldr	r0, [r7, #12]
 800cafe:	f7ff ff58 	bl	800c9b2 <get_ldnumber>
 800cb02:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	da01      	bge.n	800cb0e <find_volume+0x26>
 800cb0a:	230b      	movs	r3, #11
 800cb0c:	e22d      	b.n	800cf6a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cb0e:	4aa1      	ldr	r2, [pc, #644]	@ (800cd94 <find_volume+0x2ac>)
 800cb10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb16:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cb18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d101      	bne.n	800cb22 <find_volume+0x3a>
 800cb1e:	230c      	movs	r3, #12
 800cb20:	e223      	b.n	800cf6a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb26:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cb28:	79fb      	ldrb	r3, [r7, #7]
 800cb2a:	f023 0301 	bic.w	r3, r3, #1
 800cb2e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cb30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d01a      	beq.n	800cb6e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb3a:	785b      	ldrb	r3, [r3, #1]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f7fe fd1b 	bl	800b578 <disk_status>
 800cb42:	4603      	mov	r3, r0
 800cb44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cb48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cb4c:	f003 0301 	and.w	r3, r3, #1
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d10c      	bne.n	800cb6e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cb54:	79fb      	ldrb	r3, [r7, #7]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d007      	beq.n	800cb6a <find_volume+0x82>
 800cb5a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cb5e:	f003 0304 	and.w	r3, r3, #4
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d001      	beq.n	800cb6a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cb66:	230a      	movs	r3, #10
 800cb68:	e1ff      	b.n	800cf6a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	e1fd      	b.n	800cf6a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cb6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb70:	2200      	movs	r2, #0
 800cb72:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cb74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb76:	b2da      	uxtb	r2, r3
 800cb78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb7a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb7e:	785b      	ldrb	r3, [r3, #1]
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7fe fd13 	bl	800b5ac <disk_initialize>
 800cb86:	4603      	mov	r3, r0
 800cb88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cb8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cb90:	f003 0301 	and.w	r3, r3, #1
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d001      	beq.n	800cb9c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cb98:	2303      	movs	r3, #3
 800cb9a:	e1e6      	b.n	800cf6a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cb9c:	79fb      	ldrb	r3, [r7, #7]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d007      	beq.n	800cbb2 <find_volume+0xca>
 800cba2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cba6:	f003 0304 	and.w	r3, r3, #4
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d001      	beq.n	800cbb2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cbae:	230a      	movs	r3, #10
 800cbb0:	e1db      	b.n	800cf6a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cbb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cbb8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cbba:	f7ff ff3f 	bl	800ca3c <check_fs>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cbc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cbc8:	2b02      	cmp	r3, #2
 800cbca:	d149      	bne.n	800cc60 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cbcc:	2300      	movs	r3, #0
 800cbce:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbd0:	e01e      	b.n	800cc10 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cbd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbd4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cbd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbda:	011b      	lsls	r3, r3, #4
 800cbdc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cbe0:	4413      	add	r3, r2
 800cbe2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe6:	3304      	adds	r3, #4
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d006      	beq.n	800cbfc <find_volume+0x114>
 800cbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf0:	3308      	adds	r3, #8
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7fe fd76 	bl	800b6e4 <ld_dword>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	e000      	b.n	800cbfe <find_volume+0x116>
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	3358      	adds	r3, #88	@ 0x58
 800cc04:	443b      	add	r3, r7
 800cc06:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cc0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc12:	2b03      	cmp	r3, #3
 800cc14:	d9dd      	bls.n	800cbd2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cc16:	2300      	movs	r3, #0
 800cc18:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800cc1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d002      	beq.n	800cc26 <find_volume+0x13e>
 800cc20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc22:	3b01      	subs	r3, #1
 800cc24:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cc26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	3358      	adds	r3, #88	@ 0x58
 800cc2c:	443b      	add	r3, r7
 800cc2e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cc32:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cc34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d005      	beq.n	800cc46 <find_volume+0x15e>
 800cc3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cc3c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cc3e:	f7ff fefd 	bl	800ca3c <check_fs>
 800cc42:	4603      	mov	r3, r0
 800cc44:	e000      	b.n	800cc48 <find_volume+0x160>
 800cc46:	2303      	movs	r3, #3
 800cc48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cc4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d905      	bls.n	800cc60 <find_volume+0x178>
 800cc54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc56:	3301      	adds	r3, #1
 800cc58:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc5c:	2b03      	cmp	r3, #3
 800cc5e:	d9e2      	bls.n	800cc26 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cc60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc64:	2b04      	cmp	r3, #4
 800cc66:	d101      	bne.n	800cc6c <find_volume+0x184>
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e17e      	b.n	800cf6a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cc6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d901      	bls.n	800cc78 <find_volume+0x190>
 800cc74:	230d      	movs	r3, #13
 800cc76:	e178      	b.n	800cf6a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc7a:	3330      	adds	r3, #48	@ 0x30
 800cc7c:	330b      	adds	r3, #11
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fe fd18 	bl	800b6b4 <ld_word>
 800cc84:	4603      	mov	r3, r0
 800cc86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc8a:	d001      	beq.n	800cc90 <find_volume+0x1a8>
 800cc8c:	230d      	movs	r3, #13
 800cc8e:	e16c      	b.n	800cf6a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cc90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc92:	3330      	adds	r3, #48	@ 0x30
 800cc94:	3316      	adds	r3, #22
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fe fd0c 	bl	800b6b4 <ld_word>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d106      	bne.n	800ccb4 <find_volume+0x1cc>
 800cca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca8:	3330      	adds	r3, #48	@ 0x30
 800ccaa:	3324      	adds	r3, #36	@ 0x24
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7fe fd19 	bl	800b6e4 <ld_dword>
 800ccb2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ccb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ccb8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ccba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccbc:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800ccc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc6:	789b      	ldrb	r3, [r3, #2]
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d005      	beq.n	800ccd8 <find_volume+0x1f0>
 800cccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccce:	789b      	ldrb	r3, [r3, #2]
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	d001      	beq.n	800ccd8 <find_volume+0x1f0>
 800ccd4:	230d      	movs	r3, #13
 800ccd6:	e148      	b.n	800cf6a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ccd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccda:	789b      	ldrb	r3, [r3, #2]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cce0:	fb02 f303 	mul.w	r3, r2, r3
 800cce4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ccec:	461a      	mov	r2, r3
 800ccee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ccf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf4:	895b      	ldrh	r3, [r3, #10]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d008      	beq.n	800cd0c <find_volume+0x224>
 800ccfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccfc:	895b      	ldrh	r3, [r3, #10]
 800ccfe:	461a      	mov	r2, r3
 800cd00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd02:	895b      	ldrh	r3, [r3, #10]
 800cd04:	3b01      	subs	r3, #1
 800cd06:	4013      	ands	r3, r2
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <find_volume+0x228>
 800cd0c:	230d      	movs	r3, #13
 800cd0e:	e12c      	b.n	800cf6a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd12:	3330      	adds	r3, #48	@ 0x30
 800cd14:	3311      	adds	r3, #17
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fe fccc 	bl	800b6b4 <ld_word>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	461a      	mov	r2, r3
 800cd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd26:	891b      	ldrh	r3, [r3, #8]
 800cd28:	f003 030f 	and.w	r3, r3, #15
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d001      	beq.n	800cd36 <find_volume+0x24e>
 800cd32:	230d      	movs	r3, #13
 800cd34:	e119      	b.n	800cf6a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd38:	3330      	adds	r3, #48	@ 0x30
 800cd3a:	3313      	adds	r3, #19
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7fe fcb9 	bl	800b6b4 <ld_word>
 800cd42:	4603      	mov	r3, r0
 800cd44:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cd46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d106      	bne.n	800cd5a <find_volume+0x272>
 800cd4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd4e:	3330      	adds	r3, #48	@ 0x30
 800cd50:	3320      	adds	r3, #32
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fe fcc6 	bl	800b6e4 <ld_dword>
 800cd58:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5c:	3330      	adds	r3, #48	@ 0x30
 800cd5e:	330e      	adds	r3, #14
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7fe fca7 	bl	800b6b4 <ld_word>
 800cd66:	4603      	mov	r3, r0
 800cd68:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cd6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d101      	bne.n	800cd74 <find_volume+0x28c>
 800cd70:	230d      	movs	r3, #13
 800cd72:	e0fa      	b.n	800cf6a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cd74:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cd76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd78:	4413      	add	r3, r2
 800cd7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd7c:	8912      	ldrh	r2, [r2, #8]
 800cd7e:	0912      	lsrs	r2, r2, #4
 800cd80:	b292      	uxth	r2, r2
 800cd82:	4413      	add	r3, r2
 800cd84:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cd86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d204      	bcs.n	800cd98 <find_volume+0x2b0>
 800cd8e:	230d      	movs	r3, #13
 800cd90:	e0eb      	b.n	800cf6a <find_volume+0x482>
 800cd92:	bf00      	nop
 800cd94:	2000def0 	.word	0x2000def0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cd98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cda0:	8952      	ldrh	r2, [r2, #10]
 800cda2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cda6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d101      	bne.n	800cdb2 <find_volume+0x2ca>
 800cdae:	230d      	movs	r3, #13
 800cdb0:	e0db      	b.n	800cf6a <find_volume+0x482>
		fmt = FS_FAT32;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cdb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdba:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d802      	bhi.n	800cdc8 <find_volume+0x2e0>
 800cdc2:	2302      	movs	r3, #2
 800cdc4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdca:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d802      	bhi.n	800cdd8 <find_volume+0x2f0>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdda:	1c9a      	adds	r2, r3, #2
 800cddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdde:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cde2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cde4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cde6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cde8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdea:	441a      	add	r2, r3
 800cdec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdee:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cdf0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf4:	441a      	add	r2, r3
 800cdf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800cdfa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cdfe:	2b03      	cmp	r3, #3
 800ce00:	d11e      	bne.n	800ce40 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ce02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce04:	3330      	adds	r3, #48	@ 0x30
 800ce06:	332a      	adds	r3, #42	@ 0x2a
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7fe fc53 	bl	800b6b4 <ld_word>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d001      	beq.n	800ce18 <find_volume+0x330>
 800ce14:	230d      	movs	r3, #13
 800ce16:	e0a8      	b.n	800cf6a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ce18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce1a:	891b      	ldrh	r3, [r3, #8]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d001      	beq.n	800ce24 <find_volume+0x33c>
 800ce20:	230d      	movs	r3, #13
 800ce22:	e0a2      	b.n	800cf6a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ce24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce26:	3330      	adds	r3, #48	@ 0x30
 800ce28:	332c      	adds	r3, #44	@ 0x2c
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7fe fc5a 	bl	800b6e4 <ld_dword>
 800ce30:	4602      	mov	r2, r0
 800ce32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce34:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ce36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce38:	695b      	ldr	r3, [r3, #20]
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce3e:	e01f      	b.n	800ce80 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ce40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce42:	891b      	ldrh	r3, [r3, #8]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d101      	bne.n	800ce4c <find_volume+0x364>
 800ce48:	230d      	movs	r3, #13
 800ce4a:	e08e      	b.n	800cf6a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce4e:	6a1a      	ldr	r2, [r3, #32]
 800ce50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce52:	441a      	add	r2, r3
 800ce54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce56:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ce58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce5c:	2b02      	cmp	r3, #2
 800ce5e:	d103      	bne.n	800ce68 <find_volume+0x380>
 800ce60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce62:	695b      	ldr	r3, [r3, #20]
 800ce64:	005b      	lsls	r3, r3, #1
 800ce66:	e00a      	b.n	800ce7e <find_volume+0x396>
 800ce68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce6a:	695a      	ldr	r2, [r3, #20]
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	005b      	lsls	r3, r3, #1
 800ce70:	4413      	add	r3, r2
 800ce72:	085a      	lsrs	r2, r3, #1
 800ce74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce76:	695b      	ldr	r3, [r3, #20]
 800ce78:	f003 0301 	and.w	r3, r3, #1
 800ce7c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ce7e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ce80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce82:	699a      	ldr	r2, [r3, #24]
 800ce84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce86:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800ce8a:	0a5b      	lsrs	r3, r3, #9
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d201      	bcs.n	800ce94 <find_volume+0x3ac>
 800ce90:	230d      	movs	r3, #13
 800ce92:	e06a      	b.n	800cf6a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ce94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce96:	f04f 32ff 	mov.w	r2, #4294967295
 800ce9a:	611a      	str	r2, [r3, #16]
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce9e:	691a      	ldr	r2, [r3, #16]
 800cea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea6:	2280      	movs	r2, #128	@ 0x80
 800cea8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ceaa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ceae:	2b03      	cmp	r3, #3
 800ceb0:	d149      	bne.n	800cf46 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ceb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb4:	3330      	adds	r3, #48	@ 0x30
 800ceb6:	3330      	adds	r3, #48	@ 0x30
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7fe fbfb 	bl	800b6b4 <ld_word>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d140      	bne.n	800cf46 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cec6:	3301      	adds	r3, #1
 800cec8:	4619      	mov	r1, r3
 800ceca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cecc:	f7fe fea2 	bl	800bc14 <move_window>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d137      	bne.n	800cf46 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ced6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced8:	2200      	movs	r2, #0
 800ceda:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cede:	3330      	adds	r3, #48	@ 0x30
 800cee0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7fe fbe5 	bl	800b6b4 <ld_word>
 800ceea:	4603      	mov	r3, r0
 800ceec:	461a      	mov	r2, r3
 800ceee:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d127      	bne.n	800cf46 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef8:	3330      	adds	r3, #48	@ 0x30
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fe fbf2 	bl	800b6e4 <ld_dword>
 800cf00:	4603      	mov	r3, r0
 800cf02:	4a1c      	ldr	r2, [pc, #112]	@ (800cf74 <find_volume+0x48c>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d11e      	bne.n	800cf46 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cf08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf0a:	3330      	adds	r3, #48	@ 0x30
 800cf0c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fe fbe7 	bl	800b6e4 <ld_dword>
 800cf16:	4603      	mov	r3, r0
 800cf18:	4a17      	ldr	r2, [pc, #92]	@ (800cf78 <find_volume+0x490>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d113      	bne.n	800cf46 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cf1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf20:	3330      	adds	r3, #48	@ 0x30
 800cf22:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fe fbdc 	bl	800b6e4 <ld_dword>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf30:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cf32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf34:	3330      	adds	r3, #48	@ 0x30
 800cf36:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fe fbd2 	bl	800b6e4 <ld_dword>
 800cf40:	4602      	mov	r2, r0
 800cf42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf44:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cf46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf48:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800cf4c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cf4e:	4b0b      	ldr	r3, [pc, #44]	@ (800cf7c <find_volume+0x494>)
 800cf50:	881b      	ldrh	r3, [r3, #0]
 800cf52:	3301      	adds	r3, #1
 800cf54:	b29a      	uxth	r2, r3
 800cf56:	4b09      	ldr	r3, [pc, #36]	@ (800cf7c <find_volume+0x494>)
 800cf58:	801a      	strh	r2, [r3, #0]
 800cf5a:	4b08      	ldr	r3, [pc, #32]	@ (800cf7c <find_volume+0x494>)
 800cf5c:	881a      	ldrh	r2, [r3, #0]
 800cf5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf60:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cf62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cf64:	f7fe fdee 	bl	800bb44 <clear_lock>
#endif
	return FR_OK;
 800cf68:	2300      	movs	r3, #0
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3758      	adds	r7, #88	@ 0x58
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	41615252 	.word	0x41615252
 800cf78:	61417272 	.word	0x61417272
 800cf7c:	2000def4 	.word	0x2000def4

0800cf80 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cf8a:	2309      	movs	r3, #9
 800cf8c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d01c      	beq.n	800cfce <validate+0x4e>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d018      	beq.n	800cfce <validate+0x4e>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d013      	beq.n	800cfce <validate+0x4e>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	889a      	ldrh	r2, [r3, #4]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	88db      	ldrh	r3, [r3, #6]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d10c      	bne.n	800cfce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	785b      	ldrb	r3, [r3, #1]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7fe fadc 	bl	800b578 <disk_status>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	f003 0301 	and.w	r3, r3, #1
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d101      	bne.n	800cfce <validate+0x4e>
			res = FR_OK;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cfce:	7bfb      	ldrb	r3, [r7, #15]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d102      	bne.n	800cfda <validate+0x5a>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	e000      	b.n	800cfdc <validate+0x5c>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	683a      	ldr	r2, [r7, #0]
 800cfde:	6013      	str	r3, [r2, #0]
	return res;
 800cfe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
	...

0800cfec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b088      	sub	sp, #32
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	4613      	mov	r3, r2
 800cff8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cffe:	f107 0310 	add.w	r3, r7, #16
 800d002:	4618      	mov	r0, r3
 800d004:	f7ff fcd5 	bl	800c9b2 <get_ldnumber>
 800d008:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	da01      	bge.n	800d014 <f_mount+0x28>
 800d010:	230b      	movs	r3, #11
 800d012:	e02b      	b.n	800d06c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d014:	4a17      	ldr	r2, [pc, #92]	@ (800d074 <f_mount+0x88>)
 800d016:	69fb      	ldr	r3, [r7, #28]
 800d018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d01c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d005      	beq.n	800d030 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d024:	69b8      	ldr	r0, [r7, #24]
 800d026:	f7fe fd8d 	bl	800bb44 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	2200      	movs	r2, #0
 800d02e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d002      	beq.n	800d03c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2200      	movs	r2, #0
 800d03a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	490d      	ldr	r1, [pc, #52]	@ (800d074 <f_mount+0x88>)
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d002      	beq.n	800d052 <f_mount+0x66>
 800d04c:	79fb      	ldrb	r3, [r7, #7]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d001      	beq.n	800d056 <f_mount+0x6a>
 800d052:	2300      	movs	r3, #0
 800d054:	e00a      	b.n	800d06c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d056:	f107 010c 	add.w	r1, r7, #12
 800d05a:	f107 0308 	add.w	r3, r7, #8
 800d05e:	2200      	movs	r2, #0
 800d060:	4618      	mov	r0, r3
 800d062:	f7ff fd41 	bl	800cae8 <find_volume>
 800d066:	4603      	mov	r3, r0
 800d068:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3720      	adds	r7, #32
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	2000def0 	.word	0x2000def0

0800d078 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b098      	sub	sp, #96	@ 0x60
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	4613      	mov	r3, r2
 800d084:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d101      	bne.n	800d090 <f_open+0x18>
 800d08c:	2309      	movs	r3, #9
 800d08e:	e1a9      	b.n	800d3e4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d090:	79fb      	ldrb	r3, [r7, #7]
 800d092:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d096:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d098:	79fa      	ldrb	r2, [r7, #7]
 800d09a:	f107 0110 	add.w	r1, r7, #16
 800d09e:	f107 0308 	add.w	r3, r7, #8
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7ff fd20 	bl	800cae8 <find_volume>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d0ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	f040 818d 	bne.w	800d3d2 <f_open+0x35a>
		dj.obj.fs = fs;
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d0bc:	68ba      	ldr	r2, [r7, #8]
 800d0be:	f107 0314 	add.w	r3, r7, #20
 800d0c2:	4611      	mov	r1, r2
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7ff fc03 	bl	800c8d0 <follow_path>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d0d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d118      	bne.n	800d10a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d0d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d0dc:	b25b      	sxtb	r3, r3
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	da03      	bge.n	800d0ea <f_open+0x72>
				res = FR_INVALID_NAME;
 800d0e2:	2306      	movs	r3, #6
 800d0e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d0e8:	e00f      	b.n	800d10a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d0ea:	79fb      	ldrb	r3, [r7, #7]
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	bf8c      	ite	hi
 800d0f0:	2301      	movhi	r3, #1
 800d0f2:	2300      	movls	r3, #0
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	f107 0314 	add.w	r3, r7, #20
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7fe fbd8 	bl	800b8b4 <chk_lock>
 800d104:	4603      	mov	r3, r0
 800d106:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d10a:	79fb      	ldrb	r3, [r7, #7]
 800d10c:	f003 031c 	and.w	r3, r3, #28
 800d110:	2b00      	cmp	r3, #0
 800d112:	d07f      	beq.n	800d214 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d114:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d017      	beq.n	800d14c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d11c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d120:	2b04      	cmp	r3, #4
 800d122:	d10e      	bne.n	800d142 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d124:	f7fe fc22 	bl	800b96c <enq_lock>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d006      	beq.n	800d13c <f_open+0xc4>
 800d12e:	f107 0314 	add.w	r3, r7, #20
 800d132:	4618      	mov	r0, r3
 800d134:	f7ff fb06 	bl	800c744 <dir_register>
 800d138:	4603      	mov	r3, r0
 800d13a:	e000      	b.n	800d13e <f_open+0xc6>
 800d13c:	2312      	movs	r3, #18
 800d13e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d142:	79fb      	ldrb	r3, [r7, #7]
 800d144:	f043 0308 	orr.w	r3, r3, #8
 800d148:	71fb      	strb	r3, [r7, #7]
 800d14a:	e010      	b.n	800d16e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d14c:	7ebb      	ldrb	r3, [r7, #26]
 800d14e:	f003 0311 	and.w	r3, r3, #17
 800d152:	2b00      	cmp	r3, #0
 800d154:	d003      	beq.n	800d15e <f_open+0xe6>
					res = FR_DENIED;
 800d156:	2307      	movs	r3, #7
 800d158:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d15c:	e007      	b.n	800d16e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d15e:	79fb      	ldrb	r3, [r7, #7]
 800d160:	f003 0304 	and.w	r3, r3, #4
 800d164:	2b00      	cmp	r3, #0
 800d166:	d002      	beq.n	800d16e <f_open+0xf6>
 800d168:	2308      	movs	r3, #8
 800d16a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d16e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d172:	2b00      	cmp	r3, #0
 800d174:	d168      	bne.n	800d248 <f_open+0x1d0>
 800d176:	79fb      	ldrb	r3, [r7, #7]
 800d178:	f003 0308 	and.w	r3, r3, #8
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d063      	beq.n	800d248 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d180:	f7fd ffb8 	bl	800b0f4 <get_fattime>
 800d184:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d188:	330e      	adds	r3, #14
 800d18a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7fe fae7 	bl	800b760 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d194:	3316      	adds	r3, #22
 800d196:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d198:	4618      	mov	r0, r3
 800d19a:	f7fe fae1 	bl	800b760 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d19e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1a0:	330b      	adds	r3, #11
 800d1a2:	2220      	movs	r2, #32
 800d1a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1aa:	4611      	mov	r1, r2
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7ff fa35 	bl	800c61c <ld_clust>
 800d1b2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7ff fa4d 	bl	800c65a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c2:	331c      	adds	r3, #28
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fe faca 	bl	800b760 <st_dword>
					fs->wflag = 1;
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d1d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d037      	beq.n	800d248 <f_open+0x1d0>
						dw = fs->winsect;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1dc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d1de:	f107 0314 	add.w	r3, r7, #20
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7fe ff60 	bl	800c0ac <remove_chain>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d1f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d126      	bne.n	800d248 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7fe fd08 	bl	800bc14 <move_window>
 800d204:	4603      	mov	r3, r0
 800d206:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d20e:	3a01      	subs	r2, #1
 800d210:	60da      	str	r2, [r3, #12]
 800d212:	e019      	b.n	800d248 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d214:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d115      	bne.n	800d248 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d21c:	7ebb      	ldrb	r3, [r7, #26]
 800d21e:	f003 0310 	and.w	r3, r3, #16
 800d222:	2b00      	cmp	r3, #0
 800d224:	d003      	beq.n	800d22e <f_open+0x1b6>
					res = FR_NO_FILE;
 800d226:	2304      	movs	r3, #4
 800d228:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d22c:	e00c      	b.n	800d248 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d22e:	79fb      	ldrb	r3, [r7, #7]
 800d230:	f003 0302 	and.w	r3, r3, #2
 800d234:	2b00      	cmp	r3, #0
 800d236:	d007      	beq.n	800d248 <f_open+0x1d0>
 800d238:	7ebb      	ldrb	r3, [r7, #26]
 800d23a:	f003 0301 	and.w	r3, r3, #1
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d002      	beq.n	800d248 <f_open+0x1d0>
						res = FR_DENIED;
 800d242:	2307      	movs	r3, #7
 800d244:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d248:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d126      	bne.n	800d29e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d250:	79fb      	ldrb	r3, [r7, #7]
 800d252:	f003 0308 	and.w	r3, r3, #8
 800d256:	2b00      	cmp	r3, #0
 800d258:	d003      	beq.n	800d262 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d25a:	79fb      	ldrb	r3, [r7, #7]
 800d25c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d260:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d26a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d270:	79fb      	ldrb	r3, [r7, #7]
 800d272:	2b01      	cmp	r3, #1
 800d274:	bf8c      	ite	hi
 800d276:	2301      	movhi	r3, #1
 800d278:	2300      	movls	r3, #0
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	461a      	mov	r2, r3
 800d27e:	f107 0314 	add.w	r3, r7, #20
 800d282:	4611      	mov	r1, r2
 800d284:	4618      	mov	r0, r3
 800d286:	f7fe fb93 	bl	800b9b0 <inc_lock>
 800d28a:	4602      	mov	r2, r0
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	691b      	ldr	r3, [r3, #16]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d102      	bne.n	800d29e <f_open+0x226>
 800d298:	2302      	movs	r3, #2
 800d29a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d29e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f040 8095 	bne.w	800d3d2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d2ac:	4611      	mov	r1, r2
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7ff f9b4 	bl	800c61c <ld_clust>
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d2ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2bc:	331c      	adds	r3, #28
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fe fa10 	bl	800b6e4 <ld_dword>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d2d0:	693a      	ldr	r2, [r7, #16]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	88da      	ldrh	r2, [r3, #6]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	79fa      	ldrb	r2, [r7, #7]
 800d2e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	3330      	adds	r3, #48	@ 0x30
 800d2fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2fe:	2100      	movs	r1, #0
 800d300:	4618      	mov	r0, r3
 800d302:	f7fe fa7a 	bl	800b7fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d306:	79fb      	ldrb	r3, [r7, #7]
 800d308:	f003 0320 	and.w	r3, r3, #32
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d060      	beq.n	800d3d2 <f_open+0x35a>
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d05c      	beq.n	800d3d2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	68da      	ldr	r2, [r3, #12]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	895b      	ldrh	r3, [r3, #10]
 800d324:	025b      	lsls	r3, r3, #9
 800d326:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	689b      	ldr	r3, [r3, #8]
 800d32c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	657b      	str	r3, [r7, #84]	@ 0x54
 800d334:	e016      	b.n	800d364 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7fe fd25 	bl	800bd8a <get_fat>
 800d340:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d342:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d344:	2b01      	cmp	r3, #1
 800d346:	d802      	bhi.n	800d34e <f_open+0x2d6>
 800d348:	2302      	movs	r3, #2
 800d34a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d34e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d354:	d102      	bne.n	800d35c <f_open+0x2e4>
 800d356:	2301      	movs	r3, #1
 800d358:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d35c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d35e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	657b      	str	r3, [r7, #84]	@ 0x54
 800d364:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d103      	bne.n	800d374 <f_open+0x2fc>
 800d36c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d36e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d370:	429a      	cmp	r2, r3
 800d372:	d8e0      	bhi.n	800d336 <f_open+0x2be>
				}
				fp->clust = clst;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d378:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d37a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d127      	bne.n	800d3d2 <f_open+0x35a>
 800d382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d022      	beq.n	800d3d2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d390:	4618      	mov	r0, r3
 800d392:	f7fe fcdb 	bl	800bd4c <clust2sect>
 800d396:	6478      	str	r0, [r7, #68]	@ 0x44
 800d398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d103      	bne.n	800d3a6 <f_open+0x32e>
						res = FR_INT_ERR;
 800d39e:	2302      	movs	r3, #2
 800d3a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d3a4:	e015      	b.n	800d3d2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d3a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3a8:	0a5a      	lsrs	r2, r3, #9
 800d3aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3ac:	441a      	add	r2, r3
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	7858      	ldrb	r0, [r3, #1]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6a1a      	ldr	r2, [r3, #32]
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	f7fe f919 	bl	800b5f8 <disk_read>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d002      	beq.n	800d3d2 <f_open+0x35a>
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d3d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d002      	beq.n	800d3e0 <f_open+0x368>
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d3e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3760      	adds	r7, #96	@ 0x60
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b08e      	sub	sp, #56	@ 0x38
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
 800d3f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	2200      	movs	r2, #0
 800d402:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f107 0214 	add.w	r2, r7, #20
 800d40a:	4611      	mov	r1, r2
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7ff fdb7 	bl	800cf80 <validate>
 800d412:	4603      	mov	r3, r0
 800d414:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d418:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d107      	bne.n	800d430 <f_read+0x44>
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	7d5b      	ldrb	r3, [r3, #21]
 800d424:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d428:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d002      	beq.n	800d436 <f_read+0x4a>
 800d430:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d434:	e115      	b.n	800d662 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	7d1b      	ldrb	r3, [r3, #20]
 800d43a:	f003 0301 	and.w	r3, r3, #1
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d101      	bne.n	800d446 <f_read+0x5a>
 800d442:	2307      	movs	r3, #7
 800d444:	e10d      	b.n	800d662 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	68da      	ldr	r2, [r3, #12]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	699b      	ldr	r3, [r3, #24]
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	6a3b      	ldr	r3, [r7, #32]
 800d456:	429a      	cmp	r2, r3
 800d458:	f240 80fe 	bls.w	800d658 <f_read+0x26c>
 800d45c:	6a3b      	ldr	r3, [r7, #32]
 800d45e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d460:	e0fa      	b.n	800d658 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	699b      	ldr	r3, [r3, #24]
 800d466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f040 80c6 	bne.w	800d5fc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	699b      	ldr	r3, [r3, #24]
 800d474:	0a5b      	lsrs	r3, r3, #9
 800d476:	697a      	ldr	r2, [r7, #20]
 800d478:	8952      	ldrh	r2, [r2, #10]
 800d47a:	3a01      	subs	r2, #1
 800d47c:	4013      	ands	r3, r2
 800d47e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d12f      	bne.n	800d4e6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	699b      	ldr	r3, [r3, #24]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d103      	bne.n	800d496 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	689b      	ldr	r3, [r3, #8]
 800d492:	633b      	str	r3, [r7, #48]	@ 0x30
 800d494:	e013      	b.n	800d4be <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d007      	beq.n	800d4ae <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	699b      	ldr	r3, [r3, #24]
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	68f8      	ldr	r0, [r7, #12]
 800d4a6:	f7fe fefe 	bl	800c2a6 <clmt_clust>
 800d4aa:	6338      	str	r0, [r7, #48]	@ 0x30
 800d4ac:	e007      	b.n	800d4be <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d4ae:	68fa      	ldr	r2, [r7, #12]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	69db      	ldr	r3, [r3, #28]
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	4610      	mov	r0, r2
 800d4b8:	f7fe fc67 	bl	800bd8a <get_fat>
 800d4bc:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d804      	bhi.n	800d4ce <f_read+0xe2>
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2202      	movs	r2, #2
 800d4c8:	755a      	strb	r2, [r3, #21]
 800d4ca:	2302      	movs	r3, #2
 800d4cc:	e0c9      	b.n	800d662 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d4:	d104      	bne.n	800d4e0 <f_read+0xf4>
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2201      	movs	r2, #1
 800d4da:	755a      	strb	r2, [r3, #21]
 800d4dc:	2301      	movs	r3, #1
 800d4de:	e0c0      	b.n	800d662 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4e4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d4e6:	697a      	ldr	r2, [r7, #20]
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	69db      	ldr	r3, [r3, #28]
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	4610      	mov	r0, r2
 800d4f0:	f7fe fc2c 	bl	800bd4c <clust2sect>
 800d4f4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d4f6:	69bb      	ldr	r3, [r7, #24]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d104      	bne.n	800d506 <f_read+0x11a>
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2202      	movs	r2, #2
 800d500:	755a      	strb	r2, [r3, #21]
 800d502:	2302      	movs	r3, #2
 800d504:	e0ad      	b.n	800d662 <f_read+0x276>
			sect += csect;
 800d506:	69ba      	ldr	r2, [r7, #24]
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	4413      	add	r3, r2
 800d50c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	0a5b      	lsrs	r3, r3, #9
 800d512:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d516:	2b00      	cmp	r3, #0
 800d518:	d039      	beq.n	800d58e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d51a:	69fa      	ldr	r2, [r7, #28]
 800d51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d51e:	4413      	add	r3, r2
 800d520:	697a      	ldr	r2, [r7, #20]
 800d522:	8952      	ldrh	r2, [r2, #10]
 800d524:	4293      	cmp	r3, r2
 800d526:	d905      	bls.n	800d534 <f_read+0x148>
					cc = fs->csize - csect;
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	895b      	ldrh	r3, [r3, #10]
 800d52c:	461a      	mov	r2, r3
 800d52e:	69fb      	ldr	r3, [r7, #28]
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	7858      	ldrb	r0, [r3, #1]
 800d538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d53a:	69ba      	ldr	r2, [r7, #24]
 800d53c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d53e:	f7fe f85b 	bl	800b5f8 <disk_read>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d004      	beq.n	800d552 <f_read+0x166>
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2201      	movs	r2, #1
 800d54c:	755a      	strb	r2, [r3, #21]
 800d54e:	2301      	movs	r3, #1
 800d550:	e087      	b.n	800d662 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	7d1b      	ldrb	r3, [r3, #20]
 800d556:	b25b      	sxtb	r3, r3
 800d558:	2b00      	cmp	r3, #0
 800d55a:	da14      	bge.n	800d586 <f_read+0x19a>
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6a1a      	ldr	r2, [r3, #32]
 800d560:	69bb      	ldr	r3, [r7, #24]
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d566:	429a      	cmp	r2, r3
 800d568:	d90d      	bls.n	800d586 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	6a1a      	ldr	r2, [r3, #32]
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	025b      	lsls	r3, r3, #9
 800d574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d576:	18d0      	adds	r0, r2, r3
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	3330      	adds	r3, #48	@ 0x30
 800d57c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d580:	4619      	mov	r1, r3
 800d582:	f7fe f919 	bl	800b7b8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d588:	025b      	lsls	r3, r3, #9
 800d58a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d58c:	e050      	b.n	800d630 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	6a1b      	ldr	r3, [r3, #32]
 800d592:	69ba      	ldr	r2, [r7, #24]
 800d594:	429a      	cmp	r2, r3
 800d596:	d02e      	beq.n	800d5f6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	7d1b      	ldrb	r3, [r3, #20]
 800d59c:	b25b      	sxtb	r3, r3
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	da18      	bge.n	800d5d4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	7858      	ldrb	r0, [r3, #1]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6a1a      	ldr	r2, [r3, #32]
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	f7fe f841 	bl	800b638 <disk_write>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d004      	beq.n	800d5c6 <f_read+0x1da>
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	755a      	strb	r2, [r3, #21]
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e04d      	b.n	800d662 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	7d1b      	ldrb	r3, [r3, #20]
 800d5ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5ce:	b2da      	uxtb	r2, r3
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	7858      	ldrb	r0, [r3, #1]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5de:	2301      	movs	r3, #1
 800d5e0:	69ba      	ldr	r2, [r7, #24]
 800d5e2:	f7fe f809 	bl	800b5f8 <disk_read>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d004      	beq.n	800d5f6 <f_read+0x20a>
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	755a      	strb	r2, [r3, #21]
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e035      	b.n	800d662 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	69ba      	ldr	r2, [r7, #24]
 800d5fa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	699b      	ldr	r3, [r3, #24]
 800d600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d604:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d608:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d60a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d901      	bls.n	800d616 <f_read+0x22a>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	699b      	ldr	r3, [r3, #24]
 800d620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d624:	4413      	add	r3, r2
 800d626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d628:	4619      	mov	r1, r3
 800d62a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d62c:	f7fe f8c4 	bl	800b7b8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d634:	4413      	add	r3, r2
 800d636:	627b      	str	r3, [r7, #36]	@ 0x24
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	699a      	ldr	r2, [r3, #24]
 800d63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d63e:	441a      	add	r2, r3
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	619a      	str	r2, [r3, #24]
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d64a:	441a      	add	r2, r3
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	601a      	str	r2, [r3, #0]
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d654:	1ad3      	subs	r3, r2, r3
 800d656:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	f47f af01 	bne.w	800d462 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d660:	2300      	movs	r3, #0
}
 800d662:	4618      	mov	r0, r3
 800d664:	3738      	adds	r7, #56	@ 0x38
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}

0800d66a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d66a:	b580      	push	{r7, lr}
 800d66c:	b08c      	sub	sp, #48	@ 0x30
 800d66e:	af00      	add	r7, sp, #0
 800d670:	60f8      	str	r0, [r7, #12]
 800d672:	60b9      	str	r1, [r7, #8]
 800d674:	607a      	str	r2, [r7, #4]
 800d676:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	2200      	movs	r2, #0
 800d680:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f107 0210 	add.w	r2, r7, #16
 800d688:	4611      	mov	r1, r2
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7ff fc78 	bl	800cf80 <validate>
 800d690:	4603      	mov	r3, r0
 800d692:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d696:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d107      	bne.n	800d6ae <f_write+0x44>
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	7d5b      	ldrb	r3, [r3, #21]
 800d6a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d6a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d002      	beq.n	800d6b4 <f_write+0x4a>
 800d6ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d6b2:	e14b      	b.n	800d94c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	7d1b      	ldrb	r3, [r3, #20]
 800d6b8:	f003 0302 	and.w	r3, r3, #2
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d101      	bne.n	800d6c4 <f_write+0x5a>
 800d6c0:	2307      	movs	r3, #7
 800d6c2:	e143      	b.n	800d94c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	699a      	ldr	r2, [r3, #24]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	441a      	add	r2, r3
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	699b      	ldr	r3, [r3, #24]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	f080 812d 	bcs.w	800d930 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	699b      	ldr	r3, [r3, #24]
 800d6da:	43db      	mvns	r3, r3
 800d6dc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d6de:	e127      	b.n	800d930 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	699b      	ldr	r3, [r3, #24]
 800d6e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f040 80e3 	bne.w	800d8b4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	699b      	ldr	r3, [r3, #24]
 800d6f2:	0a5b      	lsrs	r3, r3, #9
 800d6f4:	693a      	ldr	r2, [r7, #16]
 800d6f6:	8952      	ldrh	r2, [r2, #10]
 800d6f8:	3a01      	subs	r2, #1
 800d6fa:	4013      	ands	r3, r2
 800d6fc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d6fe:	69bb      	ldr	r3, [r7, #24]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d143      	bne.n	800d78c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	699b      	ldr	r3, [r3, #24]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10c      	bne.n	800d726 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d714:	2b00      	cmp	r3, #0
 800d716:	d11a      	bne.n	800d74e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2100      	movs	r1, #0
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7fe fd2a 	bl	800c176 <create_chain>
 800d722:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d724:	e013      	b.n	800d74e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d007      	beq.n	800d73e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	699b      	ldr	r3, [r3, #24]
 800d732:	4619      	mov	r1, r3
 800d734:	68f8      	ldr	r0, [r7, #12]
 800d736:	f7fe fdb6 	bl	800c2a6 <clmt_clust>
 800d73a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d73c:	e007      	b.n	800d74e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	69db      	ldr	r3, [r3, #28]
 800d744:	4619      	mov	r1, r3
 800d746:	4610      	mov	r0, r2
 800d748:	f7fe fd15 	bl	800c176 <create_chain>
 800d74c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d750:	2b00      	cmp	r3, #0
 800d752:	f000 80f2 	beq.w	800d93a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d104      	bne.n	800d766 <f_write+0xfc>
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2202      	movs	r2, #2
 800d760:	755a      	strb	r2, [r3, #21]
 800d762:	2302      	movs	r3, #2
 800d764:	e0f2      	b.n	800d94c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76c:	d104      	bne.n	800d778 <f_write+0x10e>
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2201      	movs	r2, #1
 800d772:	755a      	strb	r2, [r3, #21]
 800d774:	2301      	movs	r3, #1
 800d776:	e0e9      	b.n	800d94c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d77c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d102      	bne.n	800d78c <f_write+0x122>
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d78a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	7d1b      	ldrb	r3, [r3, #20]
 800d790:	b25b      	sxtb	r3, r3
 800d792:	2b00      	cmp	r3, #0
 800d794:	da18      	bge.n	800d7c8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	7858      	ldrb	r0, [r3, #1]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6a1a      	ldr	r2, [r3, #32]
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	f7fd ff47 	bl	800b638 <disk_write>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d004      	beq.n	800d7ba <f_write+0x150>
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	755a      	strb	r2, [r3, #21]
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	e0c8      	b.n	800d94c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	7d1b      	ldrb	r3, [r3, #20]
 800d7be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7c2:	b2da      	uxtb	r2, r3
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d7c8:	693a      	ldr	r2, [r7, #16]
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	69db      	ldr	r3, [r3, #28]
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	4610      	mov	r0, r2
 800d7d2:	f7fe fabb 	bl	800bd4c <clust2sect>
 800d7d6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d104      	bne.n	800d7e8 <f_write+0x17e>
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2202      	movs	r2, #2
 800d7e2:	755a      	strb	r2, [r3, #21]
 800d7e4:	2302      	movs	r3, #2
 800d7e6:	e0b1      	b.n	800d94c <f_write+0x2e2>
			sect += csect;
 800d7e8:	697a      	ldr	r2, [r7, #20]
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	0a5b      	lsrs	r3, r3, #9
 800d7f4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d03c      	beq.n	800d876 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d7fc:	69ba      	ldr	r2, [r7, #24]
 800d7fe:	6a3b      	ldr	r3, [r7, #32]
 800d800:	4413      	add	r3, r2
 800d802:	693a      	ldr	r2, [r7, #16]
 800d804:	8952      	ldrh	r2, [r2, #10]
 800d806:	4293      	cmp	r3, r2
 800d808:	d905      	bls.n	800d816 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	895b      	ldrh	r3, [r3, #10]
 800d80e:	461a      	mov	r2, r3
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	7858      	ldrb	r0, [r3, #1]
 800d81a:	6a3b      	ldr	r3, [r7, #32]
 800d81c:	697a      	ldr	r2, [r7, #20]
 800d81e:	69f9      	ldr	r1, [r7, #28]
 800d820:	f7fd ff0a 	bl	800b638 <disk_write>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d004      	beq.n	800d834 <f_write+0x1ca>
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2201      	movs	r2, #1
 800d82e:	755a      	strb	r2, [r3, #21]
 800d830:	2301      	movs	r3, #1
 800d832:	e08b      	b.n	800d94c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6a1a      	ldr	r2, [r3, #32]
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	1ad3      	subs	r3, r2, r3
 800d83c:	6a3a      	ldr	r2, [r7, #32]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d915      	bls.n	800d86e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	6a1a      	ldr	r2, [r3, #32]
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	1ad3      	subs	r3, r2, r3
 800d850:	025b      	lsls	r3, r3, #9
 800d852:	69fa      	ldr	r2, [r7, #28]
 800d854:	4413      	add	r3, r2
 800d856:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d85a:	4619      	mov	r1, r3
 800d85c:	f7fd ffac 	bl	800b7b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	7d1b      	ldrb	r3, [r3, #20]
 800d864:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d868:	b2da      	uxtb	r2, r3
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d86e:	6a3b      	ldr	r3, [r7, #32]
 800d870:	025b      	lsls	r3, r3, #9
 800d872:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d874:	e03f      	b.n	800d8f6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6a1b      	ldr	r3, [r3, #32]
 800d87a:	697a      	ldr	r2, [r7, #20]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d016      	beq.n	800d8ae <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	699a      	ldr	r2, [r3, #24]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d888:	429a      	cmp	r2, r3
 800d88a:	d210      	bcs.n	800d8ae <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	7858      	ldrb	r0, [r3, #1]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d896:	2301      	movs	r3, #1
 800d898:	697a      	ldr	r2, [r7, #20]
 800d89a:	f7fd fead 	bl	800b5f8 <disk_read>
 800d89e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d004      	beq.n	800d8ae <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	755a      	strb	r2, [r3, #21]
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	e04e      	b.n	800d94c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	697a      	ldr	r2, [r7, #20]
 800d8b2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	699b      	ldr	r3, [r3, #24]
 800d8b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8bc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d8c0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d8c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d901      	bls.n	800d8ce <f_write+0x264>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	699b      	ldr	r3, [r3, #24]
 800d8d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8dc:	4413      	add	r3, r2
 800d8de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8e0:	69f9      	ldr	r1, [r7, #28]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fd ff68 	bl	800b7b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	7d1b      	ldrb	r3, [r3, #20]
 800d8ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d8f6:	69fa      	ldr	r2, [r7, #28]
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8fa:	4413      	add	r3, r2
 800d8fc:	61fb      	str	r3, [r7, #28]
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	699a      	ldr	r2, [r3, #24]
 800d902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d904:	441a      	add	r2, r3
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	619a      	str	r2, [r3, #24]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	68da      	ldr	r2, [r3, #12]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	699b      	ldr	r3, [r3, #24]
 800d912:	429a      	cmp	r2, r3
 800d914:	bf38      	it	cc
 800d916:	461a      	movcc	r2, r3
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	60da      	str	r2, [r3, #12]
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d922:	441a      	add	r2, r3
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	601a      	str	r2, [r3, #0]
 800d928:	687a      	ldr	r2, [r7, #4]
 800d92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d92c:	1ad3      	subs	r3, r2, r3
 800d92e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2b00      	cmp	r3, #0
 800d934:	f47f aed4 	bne.w	800d6e0 <f_write+0x76>
 800d938:	e000      	b.n	800d93c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d93a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	7d1b      	ldrb	r3, [r3, #20]
 800d940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d944:	b2da      	uxtb	r2, r3
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d94a:	2300      	movs	r3, #0
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3730      	adds	r7, #48	@ 0x30
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b086      	sub	sp, #24
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f107 0208 	add.w	r2, r7, #8
 800d962:	4611      	mov	r1, r2
 800d964:	4618      	mov	r0, r3
 800d966:	f7ff fb0b 	bl	800cf80 <validate>
 800d96a:	4603      	mov	r3, r0
 800d96c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d96e:	7dfb      	ldrb	r3, [r7, #23]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d168      	bne.n	800da46 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	7d1b      	ldrb	r3, [r3, #20]
 800d978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d062      	beq.n	800da46 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	7d1b      	ldrb	r3, [r3, #20]
 800d984:	b25b      	sxtb	r3, r3
 800d986:	2b00      	cmp	r3, #0
 800d988:	da15      	bge.n	800d9b6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	7858      	ldrb	r0, [r3, #1]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6a1a      	ldr	r2, [r3, #32]
 800d998:	2301      	movs	r3, #1
 800d99a:	f7fd fe4d 	bl	800b638 <disk_write>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d001      	beq.n	800d9a8 <f_sync+0x54>
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e04f      	b.n	800da48 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	7d1b      	ldrb	r3, [r3, #20]
 800d9ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9b0:	b2da      	uxtb	r2, r3
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d9b6:	f7fd fb9d 	bl	800b0f4 <get_fattime>
 800d9ba:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d9bc:	68ba      	ldr	r2, [r7, #8]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	4610      	mov	r0, r2
 800d9c6:	f7fe f925 	bl	800bc14 <move_window>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d9ce:	7dfb      	ldrb	r3, [r7, #23]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d138      	bne.n	800da46 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9d8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	330b      	adds	r3, #11
 800d9de:	781a      	ldrb	r2, [r3, #0]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	330b      	adds	r3, #11
 800d9e4:	f042 0220 	orr.w	r2, r2, #32
 800d9e8:	b2d2      	uxtb	r2, r2
 800d9ea:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6818      	ldr	r0, [r3, #0]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	689b      	ldr	r3, [r3, #8]
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	68f9      	ldr	r1, [r7, #12]
 800d9f8:	f7fe fe2f 	bl	800c65a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f103 021c 	add.w	r2, r3, #28
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	68db      	ldr	r3, [r3, #12]
 800da06:	4619      	mov	r1, r3
 800da08:	4610      	mov	r0, r2
 800da0a:	f7fd fea9 	bl	800b760 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	3316      	adds	r3, #22
 800da12:	6939      	ldr	r1, [r7, #16]
 800da14:	4618      	mov	r0, r3
 800da16:	f7fd fea3 	bl	800b760 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	3312      	adds	r3, #18
 800da1e:	2100      	movs	r1, #0
 800da20:	4618      	mov	r0, r3
 800da22:	f7fd fe82 	bl	800b72a <st_word>
					fs->wflag = 1;
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	2201      	movs	r2, #1
 800da2a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fe f91e 	bl	800bc70 <sync_fs>
 800da34:	4603      	mov	r3, r0
 800da36:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	7d1b      	ldrb	r3, [r3, #20]
 800da3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da40:	b2da      	uxtb	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800da46:	7dfb      	ldrb	r3, [r7, #23]
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3718      	adds	r7, #24
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7ff ff7b 	bl	800d954 <f_sync>
 800da5e:	4603      	mov	r3, r0
 800da60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800da62:	7bfb      	ldrb	r3, [r7, #15]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d118      	bne.n	800da9a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f107 0208 	add.w	r2, r7, #8
 800da6e:	4611      	mov	r1, r2
 800da70:	4618      	mov	r0, r3
 800da72:	f7ff fa85 	bl	800cf80 <validate>
 800da76:	4603      	mov	r3, r0
 800da78:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800da7a:	7bfb      	ldrb	r3, [r7, #15]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d10c      	bne.n	800da9a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	691b      	ldr	r3, [r3, #16]
 800da84:	4618      	mov	r0, r3
 800da86:	f7fe f821 	bl	800bacc <dec_lock>
 800da8a:	4603      	mov	r3, r0
 800da8c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800da8e:	7bfb      	ldrb	r3, [r7, #15]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d102      	bne.n	800da9a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800da9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b090      	sub	sp, #64	@ 0x40
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f107 0208 	add.w	r2, r7, #8
 800dab4:	4611      	mov	r1, r2
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7ff fa62 	bl	800cf80 <validate>
 800dabc:	4603      	mov	r3, r0
 800dabe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800dac2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d103      	bne.n	800dad2 <f_lseek+0x2e>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	7d5b      	ldrb	r3, [r3, #21]
 800dace:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800dad2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d002      	beq.n	800dae0 <f_lseek+0x3c>
 800dada:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dade:	e1e6      	b.n	800deae <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f000 80d1 	beq.w	800dc8c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf0:	d15a      	bne.n	800dba8 <f_lseek+0x104>
			tbl = fp->cltbl;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daf6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800daf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dafa:	1d1a      	adds	r2, r3, #4
 800dafc:	627a      	str	r2, [r7, #36]	@ 0x24
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	617b      	str	r3, [r7, #20]
 800db02:	2302      	movs	r3, #2
 800db04:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800db0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d03a      	beq.n	800db88 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800db12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db14:	613b      	str	r3, [r7, #16]
 800db16:	2300      	movs	r3, #0
 800db18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db1c:	3302      	adds	r3, #2
 800db1e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800db20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db22:	60fb      	str	r3, [r7, #12]
 800db24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db26:	3301      	adds	r3, #1
 800db28:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fe f92b 	bl	800bd8a <get_fat>
 800db34:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800db36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d804      	bhi.n	800db46 <f_lseek+0xa2>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2202      	movs	r2, #2
 800db40:	755a      	strb	r2, [r3, #21]
 800db42:	2302      	movs	r3, #2
 800db44:	e1b3      	b.n	800deae <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800db46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db4c:	d104      	bne.n	800db58 <f_lseek+0xb4>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2201      	movs	r2, #1
 800db52:	755a      	strb	r2, [r3, #21]
 800db54:	2301      	movs	r3, #1
 800db56:	e1aa      	b.n	800deae <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	3301      	adds	r3, #1
 800db5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db5e:	429a      	cmp	r2, r3
 800db60:	d0de      	beq.n	800db20 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800db62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	429a      	cmp	r2, r3
 800db68:	d809      	bhi.n	800db7e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800db6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db6c:	1d1a      	adds	r2, r3, #4
 800db6e:	627a      	str	r2, [r7, #36]	@ 0x24
 800db70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db72:	601a      	str	r2, [r3, #0]
 800db74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db76:	1d1a      	adds	r2, r3, #4
 800db78:	627a      	str	r2, [r7, #36]	@ 0x24
 800db7a:	693a      	ldr	r2, [r7, #16]
 800db7c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	695b      	ldr	r3, [r3, #20]
 800db82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db84:	429a      	cmp	r2, r3
 800db86:	d3c4      	bcc.n	800db12 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db8e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800db90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	429a      	cmp	r2, r3
 800db96:	d803      	bhi.n	800dba0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800db98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db9a:	2200      	movs	r2, #0
 800db9c:	601a      	str	r2, [r3, #0]
 800db9e:	e184      	b.n	800deaa <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800dba0:	2311      	movs	r3, #17
 800dba2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800dba6:	e180      	b.n	800deaa <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	68db      	ldr	r3, [r3, #12]
 800dbac:	683a      	ldr	r2, [r7, #0]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d902      	bls.n	800dbb8 <f_lseek+0x114>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	683a      	ldr	r2, [r7, #0]
 800dbbc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	f000 8172 	beq.w	800deaa <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	3b01      	subs	r3, #1
 800dbca:	4619      	mov	r1, r3
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7fe fb6a 	bl	800c2a6 <clmt_clust>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	69db      	ldr	r3, [r3, #28]
 800dbde:	4619      	mov	r1, r3
 800dbe0:	4610      	mov	r0, r2
 800dbe2:	f7fe f8b3 	bl	800bd4c <clust2sect>
 800dbe6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800dbe8:	69bb      	ldr	r3, [r7, #24]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d104      	bne.n	800dbf8 <f_lseek+0x154>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2202      	movs	r2, #2
 800dbf2:	755a      	strb	r2, [r3, #21]
 800dbf4:	2302      	movs	r3, #2
 800dbf6:	e15a      	b.n	800deae <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	0a5b      	lsrs	r3, r3, #9
 800dbfe:	68ba      	ldr	r2, [r7, #8]
 800dc00:	8952      	ldrh	r2, [r2, #10]
 800dc02:	3a01      	subs	r2, #1
 800dc04:	4013      	ands	r3, r2
 800dc06:	69ba      	ldr	r2, [r7, #24]
 800dc08:	4413      	add	r3, r2
 800dc0a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	699b      	ldr	r3, [r3, #24]
 800dc10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	f000 8148 	beq.w	800deaa <f_lseek+0x406>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6a1b      	ldr	r3, [r3, #32]
 800dc1e:	69ba      	ldr	r2, [r7, #24]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	f000 8142 	beq.w	800deaa <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	7d1b      	ldrb	r3, [r3, #20]
 800dc2a:	b25b      	sxtb	r3, r3
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	da18      	bge.n	800dc62 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	7858      	ldrb	r0, [r3, #1]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6a1a      	ldr	r2, [r3, #32]
 800dc3e:	2301      	movs	r3, #1
 800dc40:	f7fd fcfa 	bl	800b638 <disk_write>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d004      	beq.n	800dc54 <f_lseek+0x1b0>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	755a      	strb	r2, [r3, #21]
 800dc50:	2301      	movs	r3, #1
 800dc52:	e12c      	b.n	800deae <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	7d1b      	ldrb	r3, [r3, #20]
 800dc58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc5c:	b2da      	uxtb	r2, r3
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	7858      	ldrb	r0, [r3, #1]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	69ba      	ldr	r2, [r7, #24]
 800dc70:	f7fd fcc2 	bl	800b5f8 <disk_read>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d004      	beq.n	800dc84 <f_lseek+0x1e0>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	755a      	strb	r2, [r3, #21]
 800dc80:	2301      	movs	r3, #1
 800dc82:	e114      	b.n	800deae <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	69ba      	ldr	r2, [r7, #24]
 800dc88:	621a      	str	r2, [r3, #32]
 800dc8a:	e10e      	b.n	800deaa <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	683a      	ldr	r2, [r7, #0]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d908      	bls.n	800dca8 <f_lseek+0x204>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	7d1b      	ldrb	r3, [r3, #20]
 800dc9a:	f003 0302 	and.w	r3, r3, #2
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d102      	bne.n	800dca8 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	699b      	ldr	r3, [r3, #24]
 800dcac:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcb6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f000 80a7 	beq.w	800de0e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	895b      	ldrh	r3, [r3, #10]
 800dcc4:	025b      	lsls	r3, r3, #9
 800dcc6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800dcc8:	6a3b      	ldr	r3, [r7, #32]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d01b      	beq.n	800dd06 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	1e5a      	subs	r2, r3, #1
 800dcd2:	69fb      	ldr	r3, [r7, #28]
 800dcd4:	fbb2 f2f3 	udiv	r2, r2, r3
 800dcd8:	6a3b      	ldr	r3, [r7, #32]
 800dcda:	1e59      	subs	r1, r3, #1
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d30f      	bcc.n	800dd06 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800dce6:	6a3b      	ldr	r3, [r7, #32]
 800dce8:	1e5a      	subs	r2, r3, #1
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	425b      	negs	r3, r3
 800dcee:	401a      	ands	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	699b      	ldr	r3, [r3, #24]
 800dcf8:	683a      	ldr	r2, [r7, #0]
 800dcfa:	1ad3      	subs	r3, r2, r3
 800dcfc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	69db      	ldr	r3, [r3, #28]
 800dd02:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd04:	e022      	b.n	800dd4c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800dd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d119      	bne.n	800dd46 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2100      	movs	r1, #0
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fe fa2d 	bl	800c176 <create_chain>
 800dd1c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d104      	bne.n	800dd2e <f_lseek+0x28a>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2202      	movs	r2, #2
 800dd28:	755a      	strb	r2, [r3, #21]
 800dd2a:	2302      	movs	r3, #2
 800dd2c:	e0bf      	b.n	800deae <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dd2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd34:	d104      	bne.n	800dd40 <f_lseek+0x29c>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2201      	movs	r2, #1
 800dd3a:	755a      	strb	r2, [r3, #21]
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	e0b6      	b.n	800deae <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd44:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd4a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800dd4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d05d      	beq.n	800de0e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800dd52:	e03a      	b.n	800ddca <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800dd54:	683a      	ldr	r2, [r7, #0]
 800dd56:	69fb      	ldr	r3, [r7, #28]
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	603b      	str	r3, [r7, #0]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	699a      	ldr	r2, [r3, #24]
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	441a      	add	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	7d1b      	ldrb	r3, [r3, #20]
 800dd6c:	f003 0302 	and.w	r3, r3, #2
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d00b      	beq.n	800dd8c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7fe f9fc 	bl	800c176 <create_chain>
 800dd7e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800dd80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d108      	bne.n	800dd98 <f_lseek+0x2f4>
							ofs = 0; break;
 800dd86:	2300      	movs	r3, #0
 800dd88:	603b      	str	r3, [r7, #0]
 800dd8a:	e022      	b.n	800ddd2 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7fd fffa 	bl	800bd8a <get_fat>
 800dd96:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dd98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd9e:	d104      	bne.n	800ddaa <f_lseek+0x306>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2201      	movs	r2, #1
 800dda4:	755a      	strb	r2, [r3, #21]
 800dda6:	2301      	movs	r3, #1
 800dda8:	e081      	b.n	800deae <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ddaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d904      	bls.n	800ddba <f_lseek+0x316>
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	695b      	ldr	r3, [r3, #20]
 800ddb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d304      	bcc.n	800ddc4 <f_lseek+0x320>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2202      	movs	r2, #2
 800ddbe:	755a      	strb	r2, [r3, #21]
 800ddc0:	2302      	movs	r3, #2
 800ddc2:	e074      	b.n	800deae <f_lseek+0x40a>
					fp->clust = clst;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ddc8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ddca:	683a      	ldr	r2, [r7, #0]
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d8c0      	bhi.n	800dd54 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	699a      	ldr	r2, [r3, #24]
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	441a      	add	r2, r3
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d012      	beq.n	800de0e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7fd ffad 	bl	800bd4c <clust2sect>
 800ddf2:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ddf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d104      	bne.n	800de04 <f_lseek+0x360>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2202      	movs	r2, #2
 800ddfe:	755a      	strb	r2, [r3, #21]
 800de00:	2302      	movs	r3, #2
 800de02:	e054      	b.n	800deae <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	0a5b      	lsrs	r3, r3, #9
 800de08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de0a:	4413      	add	r3, r2
 800de0c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	699a      	ldr	r2, [r3, #24]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	429a      	cmp	r2, r3
 800de18:	d90a      	bls.n	800de30 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	699a      	ldr	r2, [r3, #24]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	7d1b      	ldrb	r3, [r3, #20]
 800de26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	699b      	ldr	r3, [r3, #24]
 800de34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d036      	beq.n	800deaa <f_lseek+0x406>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6a1b      	ldr	r3, [r3, #32]
 800de40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de42:	429a      	cmp	r2, r3
 800de44:	d031      	beq.n	800deaa <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	7d1b      	ldrb	r3, [r3, #20]
 800de4a:	b25b      	sxtb	r3, r3
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	da18      	bge.n	800de82 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	7858      	ldrb	r0, [r3, #1]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a1a      	ldr	r2, [r3, #32]
 800de5e:	2301      	movs	r3, #1
 800de60:	f7fd fbea 	bl	800b638 <disk_write>
 800de64:	4603      	mov	r3, r0
 800de66:	2b00      	cmp	r3, #0
 800de68:	d004      	beq.n	800de74 <f_lseek+0x3d0>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2201      	movs	r2, #1
 800de6e:	755a      	strb	r2, [r3, #21]
 800de70:	2301      	movs	r3, #1
 800de72:	e01c      	b.n	800deae <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	7d1b      	ldrb	r3, [r3, #20]
 800de78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de7c:	b2da      	uxtb	r2, r3
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	7858      	ldrb	r0, [r3, #1]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800de8c:	2301      	movs	r3, #1
 800de8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de90:	f7fd fbb2 	bl	800b5f8 <disk_read>
 800de94:	4603      	mov	r3, r0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d004      	beq.n	800dea4 <f_lseek+0x400>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2201      	movs	r2, #1
 800de9e:	755a      	strb	r2, [r3, #21]
 800dea0:	2301      	movs	r3, #1
 800dea2:	e004      	b.n	800deae <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dea8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800deaa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3740      	adds	r7, #64	@ 0x40
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
	...

0800deb8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800deb8:	b590      	push	{r4, r7, lr}
 800deba:	b09d      	sub	sp, #116	@ 0x74
 800debc:	af00      	add	r7, sp, #0
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	607a      	str	r2, [r7, #4]
 800dec2:	603b      	str	r3, [r7, #0]
 800dec4:	460b      	mov	r3, r1
 800dec6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800dec8:	2301      	movs	r3, #1
 800deca:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800decc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ded0:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800ded2:	f107 030c 	add.w	r3, r7, #12
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fe fd6b 	bl	800c9b2 <get_ldnumber>
 800dedc:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	da02      	bge.n	800deea <f_mkfs+0x32>
 800dee4:	230b      	movs	r3, #11
 800dee6:	f000 bc0d 	b.w	800e704 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800deea:	4a94      	ldr	r2, [pc, #592]	@ (800e13c <f_mkfs+0x284>)
 800deec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d005      	beq.n	800df02 <f_mkfs+0x4a>
 800def6:	4a91      	ldr	r2, [pc, #580]	@ (800e13c <f_mkfs+0x284>)
 800def8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800defa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800defe:	2200      	movs	r2, #0
 800df00:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800df02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df04:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800df08:	2300      	movs	r3, #0
 800df0a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800df0e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800df12:	4618      	mov	r0, r3
 800df14:	f7fd fb4a 	bl	800b5ac <disk_initialize>
 800df18:	4603      	mov	r3, r0
 800df1a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800df1e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800df22:	f003 0301 	and.w	r3, r3, #1
 800df26:	2b00      	cmp	r3, #0
 800df28:	d001      	beq.n	800df2e <f_mkfs+0x76>
 800df2a:	2303      	movs	r3, #3
 800df2c:	e3ea      	b.n	800e704 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800df2e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800df32:	f003 0304 	and.w	r3, r3, #4
 800df36:	2b00      	cmp	r3, #0
 800df38:	d001      	beq.n	800df3e <f_mkfs+0x86>
 800df3a:	230a      	movs	r3, #10
 800df3c:	e3e2      	b.n	800e704 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800df3e:	f107 0214 	add.w	r2, r7, #20
 800df42:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800df46:	2103      	movs	r1, #3
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fd fb95 	bl	800b678 <disk_ioctl>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d10c      	bne.n	800df6e <f_mkfs+0xb6>
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d009      	beq.n	800df6e <f_mkfs+0xb6>
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800df60:	d805      	bhi.n	800df6e <f_mkfs+0xb6>
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	1e5a      	subs	r2, r3, #1
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	4013      	ands	r3, r2
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d001      	beq.n	800df72 <f_mkfs+0xba>
 800df6e:	2301      	movs	r3, #1
 800df70:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800df72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800df76:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d003      	beq.n	800df86 <f_mkfs+0xce>
 800df7e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800df80:	687a      	ldr	r2, [r7, #4]
 800df82:	429a      	cmp	r2, r3
 800df84:	d309      	bcc.n	800df9a <f_mkfs+0xe2>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800df8c:	d805      	bhi.n	800df9a <f_mkfs+0xe2>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	1e5a      	subs	r2, r3, #1
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	4013      	ands	r3, r2
 800df96:	2b00      	cmp	r3, #0
 800df98:	d001      	beq.n	800df9e <f_mkfs+0xe6>
 800df9a:	2313      	movs	r3, #19
 800df9c:	e3b2      	b.n	800e704 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800df9e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfa6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800dfac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dfae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dfb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800dfb8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dfba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfbc:	fb02 f303 	mul.w	r3, r2, r3
 800dfc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800dfc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d101      	bne.n	800dfcc <f_mkfs+0x114>
 800dfc8:	230e      	movs	r3, #14
 800dfca:	e39b      	b.n	800e704 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800dfcc:	f107 0210 	add.w	r2, r7, #16
 800dfd0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800dfd4:	2101      	movs	r1, #1
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7fd fb4e 	bl	800b678 <disk_ioctl>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <f_mkfs+0x12e>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e38e      	b.n	800e704 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800dfe6:	7afb      	ldrb	r3, [r7, #11]
 800dfe8:	f003 0308 	and.w	r3, r3, #8
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d001      	beq.n	800dff4 <f_mkfs+0x13c>
 800dff0:	2300      	movs	r3, #0
 800dff2:	e000      	b.n	800dff6 <f_mkfs+0x13e>
 800dff4:	233f      	movs	r3, #63	@ 0x3f
 800dff6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d901      	bls.n	800e004 <f_mkfs+0x14c>
 800e000:	230e      	movs	r3, #14
 800e002:	e37f      	b.n	800e704 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800e004:	693a      	ldr	r2, [r7, #16]
 800e006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e008:	1ad3      	subs	r3, r2, r3
 800e00a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e010:	d801      	bhi.n	800e016 <f_mkfs+0x15e>
 800e012:	230e      	movs	r3, #14
 800e014:	e376      	b.n	800e704 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2b80      	cmp	r3, #128	@ 0x80
 800e01a:	d901      	bls.n	800e020 <f_mkfs+0x168>
 800e01c:	2313      	movs	r3, #19
 800e01e:	e371      	b.n	800e704 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800e020:	7afb      	ldrb	r3, [r7, #11]
 800e022:	f003 0302 	and.w	r3, r3, #2
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00d      	beq.n	800e046 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800e02a:	7afb      	ldrb	r3, [r7, #11]
 800e02c:	f003 0307 	and.w	r3, r3, #7
 800e030:	2b02      	cmp	r3, #2
 800e032:	d004      	beq.n	800e03e <f_mkfs+0x186>
 800e034:	7afb      	ldrb	r3, [r7, #11]
 800e036:	f003 0301 	and.w	r3, r3, #1
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d103      	bne.n	800e046 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800e03e:	2303      	movs	r3, #3
 800e040:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e044:	e009      	b.n	800e05a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800e046:	7afb      	ldrb	r3, [r7, #11]
 800e048:	f003 0301 	and.w	r3, r3, #1
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d101      	bne.n	800e054 <f_mkfs+0x19c>
 800e050:	2313      	movs	r3, #19
 800e052:	e357      	b.n	800e704 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800e054:	2302      	movs	r3, #2
 800e056:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800e05e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e062:	2b03      	cmp	r3, #3
 800e064:	d13c      	bne.n	800e0e0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800e066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d11b      	bne.n	800e0a4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	0c5b      	lsrs	r3, r3, #17
 800e070:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e072:	2300      	movs	r3, #0
 800e074:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e076:	2301      	movs	r3, #1
 800e078:	653b      	str	r3, [r7, #80]	@ 0x50
 800e07a:	e005      	b.n	800e088 <f_mkfs+0x1d0>
 800e07c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e07e:	3301      	adds	r3, #1
 800e080:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e084:	005b      	lsls	r3, r3, #1
 800e086:	653b      	str	r3, [r7, #80]	@ 0x50
 800e088:	4a2d      	ldr	r2, [pc, #180]	@ (800e140 <f_mkfs+0x288>)
 800e08a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e08c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d007      	beq.n	800e0a4 <f_mkfs+0x1ec>
 800e094:	4a2a      	ldr	r2, [pc, #168]	@ (800e140 <f_mkfs+0x288>)
 800e096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e09c:	461a      	mov	r2, r3
 800e09e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d2eb      	bcs.n	800e07c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800e0a4:	693a      	ldr	r2, [r7, #16]
 800e0a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0ac:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800e0ae:	6a3b      	ldr	r3, [r7, #32]
 800e0b0:	3302      	adds	r3, #2
 800e0b2:	009a      	lsls	r2, r3, #2
 800e0b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e0b6:	4413      	add	r3, r2
 800e0b8:	1e5a      	subs	r2, r3, #1
 800e0ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e0bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0c0:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800e0c2:	2320      	movs	r3, #32
 800e0c4:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800e0ca:	6a3b      	ldr	r3, [r7, #32]
 800e0cc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d903      	bls.n	800e0dc <f_mkfs+0x224>
 800e0d4:	6a3b      	ldr	r3, [r7, #32]
 800e0d6:	4a1b      	ldr	r2, [pc, #108]	@ (800e144 <f_mkfs+0x28c>)
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d952      	bls.n	800e182 <f_mkfs+0x2ca>
 800e0dc:	230e      	movs	r3, #14
 800e0de:	e311      	b.n	800e704 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800e0e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d11b      	bne.n	800e11e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	0b1b      	lsrs	r3, r3, #12
 800e0ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800e0f4:	e005      	b.n	800e102 <f_mkfs+0x24a>
 800e0f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0fe:	005b      	lsls	r3, r3, #1
 800e100:	653b      	str	r3, [r7, #80]	@ 0x50
 800e102:	4a11      	ldr	r2, [pc, #68]	@ (800e148 <f_mkfs+0x290>)
 800e104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d007      	beq.n	800e11e <f_mkfs+0x266>
 800e10e:	4a0e      	ldr	r2, [pc, #56]	@ (800e148 <f_mkfs+0x290>)
 800e110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e116:	461a      	mov	r2, r3
 800e118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d2eb      	bcs.n	800e0f6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800e11e:	693a      	ldr	r2, [r7, #16]
 800e120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e122:	fbb2 f3f3 	udiv	r3, r2, r3
 800e126:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800e128:	6a3b      	ldr	r3, [r7, #32]
 800e12a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e12e:	4293      	cmp	r3, r2
 800e130:	d90c      	bls.n	800e14c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800e132:	6a3b      	ldr	r3, [r7, #32]
 800e134:	3302      	adds	r3, #2
 800e136:	005b      	lsls	r3, r3, #1
 800e138:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e13a:	e012      	b.n	800e162 <f_mkfs+0x2aa>
 800e13c:	2000def0 	.word	0x2000def0
 800e140:	08015970 	.word	0x08015970
 800e144:	0ffffff5 	.word	0x0ffffff5
 800e148:	08015980 	.word	0x08015980
				} else {
					fmt = FS_FAT12;
 800e14c:	2301      	movs	r3, #1
 800e14e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800e152:	6a3a      	ldr	r2, [r7, #32]
 800e154:	4613      	mov	r3, r2
 800e156:	005b      	lsls	r3, r3, #1
 800e158:	4413      	add	r3, r2
 800e15a:	3301      	adds	r3, #1
 800e15c:	085b      	lsrs	r3, r3, #1
 800e15e:	3303      	adds	r3, #3
 800e160:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800e162:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e166:	4413      	add	r3, r2
 800e168:	1e5a      	subs	r2, r3, #1
 800e16a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e16c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e170:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800e172:	2301      	movs	r3, #1
 800e174:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800e176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e178:	015a      	lsls	r2, r3, #5
 800e17a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e17c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e180:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800e182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e186:	4413      	add	r3, r2
 800e188:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800e18a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e18c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e18e:	fb03 f202 	mul.w	r2, r3, r2
 800e192:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e194:	4413      	add	r3, r2
 800e196:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e198:	4413      	add	r3, r2
 800e19a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800e19c:	697a      	ldr	r2, [r7, #20]
 800e19e:	69fb      	ldr	r3, [r7, #28]
 800e1a0:	4413      	add	r3, r2
 800e1a2:	1e5a      	subs	r2, r3, #1
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	425b      	negs	r3, r3
 800e1a8:	401a      	ands	r2, r3
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	1ad3      	subs	r3, r2, r3
 800e1ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800e1b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e1b4:	2b03      	cmp	r3, #3
 800e1b6:	d108      	bne.n	800e1ca <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800e1b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e1ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e1bc:	4413      	add	r3, r2
 800e1be:	657b      	str	r3, [r7, #84]	@ 0x54
 800e1c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e1c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e1c4:	4413      	add	r3, r2
 800e1c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e1c8:	e006      	b.n	800e1d8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800e1ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e1cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1d2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e1d4:	4413      	add	r3, r2
 800e1d6:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800e1d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1da:	011a      	lsls	r2, r3, #4
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	441a      	add	r2, r3
 800e1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e2:	1ad2      	subs	r2, r2, r3
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d901      	bls.n	800e1ee <f_mkfs+0x336>
 800e1ea:	230e      	movs	r3, #14
 800e1ec:	e28a      	b.n	800e704 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800e1ee:	693a      	ldr	r2, [r7, #16]
 800e1f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1f2:	1ad2      	subs	r2, r2, r3
 800e1f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e1f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e1f8:	fb01 f303 	mul.w	r3, r1, r3
 800e1fc:	1ad2      	subs	r2, r2, r3
 800e1fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e200:	1ad2      	subs	r2, r2, r3
 800e202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e204:	fbb2 f3f3 	udiv	r3, r2, r3
 800e208:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800e20a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e20e:	2b03      	cmp	r3, #3
 800e210:	d10f      	bne.n	800e232 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800e212:	6a3b      	ldr	r3, [r7, #32]
 800e214:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e218:	4293      	cmp	r3, r2
 800e21a:	d80a      	bhi.n	800e232 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d105      	bne.n	800e22e <f_mkfs+0x376>
 800e222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e224:	085b      	lsrs	r3, r3, #1
 800e226:	607b      	str	r3, [r7, #4]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d144      	bne.n	800e2b8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800e22e:	230e      	movs	r3, #14
 800e230:	e268      	b.n	800e704 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800e232:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e236:	2b02      	cmp	r3, #2
 800e238:	d133      	bne.n	800e2a2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e240:	4293      	cmp	r3, r2
 800e242:	d91e      	bls.n	800e282 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d107      	bne.n	800e25a <f_mkfs+0x3a2>
 800e24a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e24c:	005b      	lsls	r3, r3, #1
 800e24e:	2b40      	cmp	r3, #64	@ 0x40
 800e250:	d803      	bhi.n	800e25a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800e252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e254:	005b      	lsls	r3, r3, #1
 800e256:	607b      	str	r3, [r7, #4]
 800e258:	e033      	b.n	800e2c2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800e25a:	7afb      	ldrb	r3, [r7, #11]
 800e25c:	f003 0302 	and.w	r3, r3, #2
 800e260:	2b00      	cmp	r3, #0
 800e262:	d003      	beq.n	800e26c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800e264:	2303      	movs	r3, #3
 800e266:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e26a:	e02a      	b.n	800e2c2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d105      	bne.n	800e27e <f_mkfs+0x3c6>
 800e272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e274:	005b      	lsls	r3, r3, #1
 800e276:	607b      	str	r3, [r7, #4]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2b80      	cmp	r3, #128	@ 0x80
 800e27c:	d91e      	bls.n	800e2bc <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800e27e:	230e      	movs	r3, #14
 800e280:	e240      	b.n	800e704 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800e282:	6a3b      	ldr	r3, [r7, #32]
 800e284:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e288:	4293      	cmp	r3, r2
 800e28a:	d80a      	bhi.n	800e2a2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d105      	bne.n	800e29e <f_mkfs+0x3e6>
 800e292:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e294:	005b      	lsls	r3, r3, #1
 800e296:	607b      	str	r3, [r7, #4]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2b80      	cmp	r3, #128	@ 0x80
 800e29c:	d910      	bls.n	800e2c0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800e29e:	230e      	movs	r3, #14
 800e2a0:	e230      	b.n	800e704 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800e2a2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	d10c      	bne.n	800e2c4 <f_mkfs+0x40c>
 800e2aa:	6a3b      	ldr	r3, [r7, #32]
 800e2ac:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d907      	bls.n	800e2c4 <f_mkfs+0x40c>
 800e2b4:	230e      	movs	r3, #14
 800e2b6:	e225      	b.n	800e704 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e2b8:	bf00      	nop
 800e2ba:	e6ce      	b.n	800e05a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e2bc:	bf00      	nop
 800e2be:	e6cc      	b.n	800e05a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e2c0:	bf00      	nop
			pau = au;
 800e2c2:	e6ca      	b.n	800e05a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800e2c4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800e2c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e2ce:	f7fd fa94 	bl	800b7fa <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800e2d2:	220b      	movs	r2, #11
 800e2d4:	49b2      	ldr	r1, [pc, #712]	@ (800e5a0 <f_mkfs+0x6e8>)
 800e2d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e2d8:	f7fd fa6e 	bl	800b7b8 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2de:	330b      	adds	r3, #11
 800e2e0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e2e2:	4611      	mov	r1, r2
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7fd fa20 	bl	800b72a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ec:	330d      	adds	r3, #13
 800e2ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e2f0:	b2d2      	uxtb	r2, r2
 800e2f2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800e2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f6:	330e      	adds	r3, #14
 800e2f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e2fa:	b292      	uxth	r2, r2
 800e2fc:	4611      	mov	r1, r2
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7fd fa13 	bl	800b72a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800e304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e306:	3310      	adds	r3, #16
 800e308:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e30a:	b2d2      	uxtb	r2, r2
 800e30c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800e30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e310:	f103 0211 	add.w	r2, r3, #17
 800e314:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e318:	2b03      	cmp	r3, #3
 800e31a:	d002      	beq.n	800e322 <f_mkfs+0x46a>
 800e31c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e31e:	b29b      	uxth	r3, r3
 800e320:	e000      	b.n	800e324 <f_mkfs+0x46c>
 800e322:	2300      	movs	r3, #0
 800e324:	4619      	mov	r1, r3
 800e326:	4610      	mov	r0, r2
 800e328:	f7fd f9ff 	bl	800b72a <st_word>
		if (sz_vol < 0x10000) {
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e332:	d208      	bcs.n	800e346 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800e334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e336:	3313      	adds	r3, #19
 800e338:	693a      	ldr	r2, [r7, #16]
 800e33a:	b292      	uxth	r2, r2
 800e33c:	4611      	mov	r1, r2
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fd f9f3 	bl	800b72a <st_word>
 800e344:	e006      	b.n	800e354 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800e346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e348:	3320      	adds	r3, #32
 800e34a:	693a      	ldr	r2, [r7, #16]
 800e34c:	4611      	mov	r1, r2
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fd fa06 	bl	800b760 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800e354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e356:	3315      	adds	r3, #21
 800e358:	22f8      	movs	r2, #248	@ 0xf8
 800e35a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800e35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e35e:	3318      	adds	r3, #24
 800e360:	213f      	movs	r1, #63	@ 0x3f
 800e362:	4618      	mov	r0, r3
 800e364:	f7fd f9e1 	bl	800b72a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800e368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e36a:	331a      	adds	r3, #26
 800e36c:	21ff      	movs	r1, #255	@ 0xff
 800e36e:	4618      	mov	r0, r3
 800e370:	f7fd f9db 	bl	800b72a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800e374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e376:	331c      	adds	r3, #28
 800e378:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7fd f9f0 	bl	800b760 <st_dword>
		if (fmt == FS_FAT32) {
 800e380:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e384:	2b03      	cmp	r3, #3
 800e386:	d131      	bne.n	800e3ec <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800e388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e38a:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800e38e:	f7fc feb1 	bl	800b0f4 <get_fattime>
 800e392:	4603      	mov	r3, r0
 800e394:	4619      	mov	r1, r3
 800e396:	4620      	mov	r0, r4
 800e398:	f7fd f9e2 	bl	800b760 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800e39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e39e:	3324      	adds	r3, #36	@ 0x24
 800e3a0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fd f9dc 	bl	800b760 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800e3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3aa:	332c      	adds	r3, #44	@ 0x2c
 800e3ac:	2102      	movs	r1, #2
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fd f9d6 	bl	800b760 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800e3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b6:	3330      	adds	r3, #48	@ 0x30
 800e3b8:	2101      	movs	r1, #1
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7fd f9b5 	bl	800b72a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800e3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3c2:	3332      	adds	r3, #50	@ 0x32
 800e3c4:	2106      	movs	r1, #6
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7fd f9af 	bl	800b72a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800e3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ce:	3340      	adds	r3, #64	@ 0x40
 800e3d0:	2280      	movs	r2, #128	@ 0x80
 800e3d2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800e3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d6:	3342      	adds	r3, #66	@ 0x42
 800e3d8:	2229      	movs	r2, #41	@ 0x29
 800e3da:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800e3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3de:	3347      	adds	r3, #71	@ 0x47
 800e3e0:	2213      	movs	r2, #19
 800e3e2:	4970      	ldr	r1, [pc, #448]	@ (800e5a4 <f_mkfs+0x6ec>)
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fd f9e7 	bl	800b7b8 <mem_cpy>
 800e3ea:	e020      	b.n	800e42e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800e3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ee:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800e3f2:	f7fc fe7f 	bl	800b0f4 <get_fattime>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f7fd f9b0 	bl	800b760 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800e400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e402:	3316      	adds	r3, #22
 800e404:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e406:	b292      	uxth	r2, r2
 800e408:	4611      	mov	r1, r2
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fd f98d 	bl	800b72a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800e410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e412:	3324      	adds	r3, #36	@ 0x24
 800e414:	2280      	movs	r2, #128	@ 0x80
 800e416:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800e418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e41a:	3326      	adds	r3, #38	@ 0x26
 800e41c:	2229      	movs	r2, #41	@ 0x29
 800e41e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800e420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e422:	332b      	adds	r3, #43	@ 0x2b
 800e424:	2213      	movs	r2, #19
 800e426:	4960      	ldr	r1, [pc, #384]	@ (800e5a8 <f_mkfs+0x6f0>)
 800e428:	4618      	mov	r0, r3
 800e42a:	f7fd f9c5 	bl	800b7b8 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800e42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e430:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e434:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fd f976 	bl	800b72a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800e43e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e442:	2301      	movs	r3, #1
 800e444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e446:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e448:	f7fd f8f6 	bl	800b638 <disk_write>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d001      	beq.n	800e456 <f_mkfs+0x59e>
 800e452:	2301      	movs	r3, #1
 800e454:	e156      	b.n	800e704 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800e456:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e45a:	2b03      	cmp	r3, #3
 800e45c:	d140      	bne.n	800e4e0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800e45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e460:	1d9a      	adds	r2, r3, #6
 800e462:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e466:	2301      	movs	r3, #1
 800e468:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e46a:	f7fd f8e5 	bl	800b638 <disk_write>
			mem_set(buf, 0, ss);
 800e46e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e470:	461a      	mov	r2, r3
 800e472:	2100      	movs	r1, #0
 800e474:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e476:	f7fd f9c0 	bl	800b7fa <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800e47a:	494c      	ldr	r1, [pc, #304]	@ (800e5ac <f_mkfs+0x6f4>)
 800e47c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e47e:	f7fd f96f 	bl	800b760 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800e482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e484:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e488:	4949      	ldr	r1, [pc, #292]	@ (800e5b0 <f_mkfs+0x6f8>)
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fd f968 	bl	800b760 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800e490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e492:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e496:	6a3b      	ldr	r3, [r7, #32]
 800e498:	3b01      	subs	r3, #1
 800e49a:	4619      	mov	r1, r3
 800e49c:	4610      	mov	r0, r2
 800e49e:	f7fd f95f 	bl	800b760 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800e4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e4a8:	2102      	movs	r1, #2
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7fd f958 	bl	800b760 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800e4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4b2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e4b6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fd f935 	bl	800b72a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4c2:	1dda      	adds	r2, r3, #7
 800e4c4:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e4cc:	f7fd f8b4 	bl	800b638 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d2:	1c5a      	adds	r2, r3, #1
 800e4d4:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e4d8:	2301      	movs	r3, #1
 800e4da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e4dc:	f7fd f8ac 	bl	800b638 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800e4e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e4e2:	2100      	movs	r1, #0
 800e4e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e4e6:	f7fd f988 	bl	800b7fa <mem_set>
		sect = b_fat;		/* FAT start sector */
 800e4ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4ec:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e4f2:	e04b      	b.n	800e58c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800e4f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e4f8:	2b03      	cmp	r3, #3
 800e4fa:	d113      	bne.n	800e524 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800e4fc:	f06f 0107 	mvn.w	r1, #7
 800e500:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e502:	f7fd f92d 	bl	800b760 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800e506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e508:	3304      	adds	r3, #4
 800e50a:	f04f 31ff 	mov.w	r1, #4294967295
 800e50e:	4618      	mov	r0, r3
 800e510:	f7fd f926 	bl	800b760 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800e514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e516:	3308      	adds	r3, #8
 800e518:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7fd f91f 	bl	800b760 <st_dword>
 800e522:	e00b      	b.n	800e53c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800e524:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e528:	2b01      	cmp	r3, #1
 800e52a:	d101      	bne.n	800e530 <f_mkfs+0x678>
 800e52c:	4b21      	ldr	r3, [pc, #132]	@ (800e5b4 <f_mkfs+0x6fc>)
 800e52e:	e001      	b.n	800e534 <f_mkfs+0x67c>
 800e530:	f06f 0307 	mvn.w	r3, #7
 800e534:	4619      	mov	r1, r3
 800e536:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e538:	f7fd f912 	bl	800b760 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800e53c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e53e:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800e540:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e544:	4293      	cmp	r3, r2
 800e546:	bf28      	it	cs
 800e548:	4613      	movcs	r3, r2
 800e54a:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e54c:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e550:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e552:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e554:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e556:	f7fd f86f 	bl	800b638 <disk_write>
 800e55a:	4603      	mov	r3, r0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d001      	beq.n	800e564 <f_mkfs+0x6ac>
 800e560:	2301      	movs	r3, #1
 800e562:	e0cf      	b.n	800e704 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800e564:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e566:	461a      	mov	r2, r3
 800e568:	2100      	movs	r1, #0
 800e56a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e56c:	f7fd f945 	bl	800b7fa <mem_set>
				sect += n; nsect -= n;
 800e570:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e574:	4413      	add	r3, r2
 800e576:	667b      	str	r3, [r7, #100]	@ 0x64
 800e578:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e57a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e57c:	1ad3      	subs	r3, r2, r3
 800e57e:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 800e580:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1dc      	bne.n	800e540 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e588:	3301      	adds	r3, #1
 800e58a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e58c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e58e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e590:	429a      	cmp	r2, r3
 800e592:	d3af      	bcc.n	800e4f4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800e594:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e598:	2b03      	cmp	r3, #3
 800e59a:	d10d      	bne.n	800e5b8 <f_mkfs+0x700>
 800e59c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e59e:	e00c      	b.n	800e5ba <f_mkfs+0x702>
 800e5a0:	08015858 	.word	0x08015858
 800e5a4:	08015864 	.word	0x08015864
 800e5a8:	08015878 	.word	0x08015878
 800e5ac:	41615252 	.word	0x41615252
 800e5b0:	61417272 	.word	0x61417272
 800e5b4:	00fffff8 	.word	0x00fffff8
 800e5b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5ba:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800e5bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	bf28      	it	cs
 800e5c4:	4613      	movcs	r3, r2
 800e5c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e5c8:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e5cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5ce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e5d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e5d2:	f7fd f831 	bl	800b638 <disk_write>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d001      	beq.n	800e5e0 <f_mkfs+0x728>
 800e5dc:	2301      	movs	r3, #1
 800e5de:	e091      	b.n	800e704 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800e5e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e5e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5e4:	4413      	add	r3, r2
 800e5e6:	667b      	str	r3, [r7, #100]	@ 0x64
 800e5e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e5ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5ec:	1ad3      	subs	r3, r2, r3
 800e5ee:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 800e5f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d1e2      	bne.n	800e5bc <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800e5f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e5fa:	2b03      	cmp	r3, #3
 800e5fc:	d103      	bne.n	800e606 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800e5fe:	230c      	movs	r3, #12
 800e600:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800e604:	e010      	b.n	800e628 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e60c:	d303      	bcc.n	800e616 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800e60e:	2306      	movs	r3, #6
 800e610:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800e614:	e008      	b.n	800e628 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800e616:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e61a:	2b02      	cmp	r3, #2
 800e61c:	d101      	bne.n	800e622 <f_mkfs+0x76a>
 800e61e:	2304      	movs	r3, #4
 800e620:	e000      	b.n	800e624 <f_mkfs+0x76c>
 800e622:	2301      	movs	r3, #1
 800e624:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800e628:	7afb      	ldrb	r3, [r7, #11]
 800e62a:	f003 0308 	and.w	r3, r3, #8
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d15b      	bne.n	800e6ea <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800e632:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e634:	461a      	mov	r2, r3
 800e636:	2100      	movs	r1, #0
 800e638:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e63a:	f7fd f8de 	bl	800b7fa <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800e63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e640:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e644:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fd f86e 	bl	800b72a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800e64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e650:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e654:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	2200      	movs	r2, #0
 800e65a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800e65c:	69bb      	ldr	r3, [r7, #24]
 800e65e:	3301      	adds	r3, #1
 800e660:	2201      	movs	r2, #1
 800e662:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800e664:	69bb      	ldr	r3, [r7, #24]
 800e666:	3302      	adds	r3, #2
 800e668:	2201      	movs	r2, #1
 800e66a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	3303      	adds	r3, #3
 800e670:	2200      	movs	r2, #0
 800e672:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	3304      	adds	r3, #4
 800e678:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800e67c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800e67e:	693a      	ldr	r2, [r7, #16]
 800e680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e682:	441a      	add	r2, r3
 800e684:	4b21      	ldr	r3, [pc, #132]	@ (800e70c <f_mkfs+0x854>)
 800e686:	fba3 1302 	umull	r1, r3, r3, r2
 800e68a:	1ad2      	subs	r2, r2, r3
 800e68c:	0852      	lsrs	r2, r2, #1
 800e68e:	4413      	add	r3, r2
 800e690:	0b5b      	lsrs	r3, r3, #13
 800e692:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	3305      	adds	r3, #5
 800e698:	22fe      	movs	r2, #254	@ 0xfe
 800e69a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800e69c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e69e:	089b      	lsrs	r3, r3, #2
 800e6a0:	b2da      	uxtb	r2, r3
 800e6a2:	69bb      	ldr	r3, [r7, #24]
 800e6a4:	3306      	adds	r3, #6
 800e6a6:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800e6aa:	b2d2      	uxtb	r2, r2
 800e6ac:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	3307      	adds	r3, #7
 800e6b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e6b4:	b2d2      	uxtb	r2, r2
 800e6b6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	3308      	adds	r3, #8
 800e6bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7fd f84e 	bl	800b760 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800e6c4:	69bb      	ldr	r3, [r7, #24]
 800e6c6:	330c      	adds	r3, #12
 800e6c8:	693a      	ldr	r2, [r7, #16]
 800e6ca:	4611      	mov	r1, r2
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7fd f847 	bl	800b760 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800e6d2:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	2200      	movs	r2, #0
 800e6da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e6dc:	f7fc ffac 	bl	800b638 <disk_write>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d001      	beq.n	800e6ea <f_mkfs+0x832>
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	e00c      	b.n	800e704 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800e6ea:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	2100      	movs	r1, #0
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fc ffc0 	bl	800b678 <disk_ioctl>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d001      	beq.n	800e702 <f_mkfs+0x84a>
 800e6fe:	2301      	movs	r3, #1
 800e700:	e000      	b.n	800e704 <f_mkfs+0x84c>

	return FR_OK;
 800e702:	2300      	movs	r3, #0
}
 800e704:	4618      	mov	r0, r3
 800e706:	3774      	adds	r7, #116	@ 0x74
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd90      	pop	{r4, r7, pc}
 800e70c:	0515565b 	.word	0x0515565b

0800e710 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e710:	b480      	push	{r7}
 800e712:	b087      	sub	sp, #28
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	4613      	mov	r3, r2
 800e71c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e71e:	2301      	movs	r3, #1
 800e720:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e722:	2300      	movs	r3, #0
 800e724:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e726:	4b1f      	ldr	r3, [pc, #124]	@ (800e7a4 <FATFS_LinkDriverEx+0x94>)
 800e728:	7a5b      	ldrb	r3, [r3, #9]
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d131      	bne.n	800e794 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e730:	4b1c      	ldr	r3, [pc, #112]	@ (800e7a4 <FATFS_LinkDriverEx+0x94>)
 800e732:	7a5b      	ldrb	r3, [r3, #9]
 800e734:	b2db      	uxtb	r3, r3
 800e736:	461a      	mov	r2, r3
 800e738:	4b1a      	ldr	r3, [pc, #104]	@ (800e7a4 <FATFS_LinkDriverEx+0x94>)
 800e73a:	2100      	movs	r1, #0
 800e73c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e73e:	4b19      	ldr	r3, [pc, #100]	@ (800e7a4 <FATFS_LinkDriverEx+0x94>)
 800e740:	7a5b      	ldrb	r3, [r3, #9]
 800e742:	b2db      	uxtb	r3, r3
 800e744:	4a17      	ldr	r2, [pc, #92]	@ (800e7a4 <FATFS_LinkDriverEx+0x94>)
 800e746:	009b      	lsls	r3, r3, #2
 800e748:	4413      	add	r3, r2
 800e74a:	68fa      	ldr	r2, [r7, #12]
 800e74c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e74e:	4b15      	ldr	r3, [pc, #84]	@ (800e7a4 <FATFS_LinkDriverEx+0x94>)
 800e750:	7a5b      	ldrb	r3, [r3, #9]
 800e752:	b2db      	uxtb	r3, r3
 800e754:	461a      	mov	r2, r3
 800e756:	4b13      	ldr	r3, [pc, #76]	@ (800e7a4 <FATFS_LinkDriverEx+0x94>)
 800e758:	4413      	add	r3, r2
 800e75a:	79fa      	ldrb	r2, [r7, #7]
 800e75c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e75e:	4b11      	ldr	r3, [pc, #68]	@ (800e7a4 <FATFS_LinkDriverEx+0x94>)
 800e760:	7a5b      	ldrb	r3, [r3, #9]
 800e762:	b2db      	uxtb	r3, r3
 800e764:	1c5a      	adds	r2, r3, #1
 800e766:	b2d1      	uxtb	r1, r2
 800e768:	4a0e      	ldr	r2, [pc, #56]	@ (800e7a4 <FATFS_LinkDriverEx+0x94>)
 800e76a:	7251      	strb	r1, [r2, #9]
 800e76c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e76e:	7dbb      	ldrb	r3, [r7, #22]
 800e770:	3330      	adds	r3, #48	@ 0x30
 800e772:	b2da      	uxtb	r2, r3
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	3301      	adds	r3, #1
 800e77c:	223a      	movs	r2, #58	@ 0x3a
 800e77e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	3302      	adds	r3, #2
 800e784:	222f      	movs	r2, #47	@ 0x2f
 800e786:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	3303      	adds	r3, #3
 800e78c:	2200      	movs	r2, #0
 800e78e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e790:	2300      	movs	r3, #0
 800e792:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e794:	7dfb      	ldrb	r3, [r7, #23]
}
 800e796:	4618      	mov	r0, r3
 800e798:	371c      	adds	r7, #28
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	2000df18 	.word	0x2000df18

0800e7a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	6839      	ldr	r1, [r7, #0]
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7ff ffaa 	bl	800e710 <FATFS_LinkDriverEx>
 800e7bc:	4603      	mov	r3, r0
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3708      	adds	r7, #8
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
	...

0800e7c8 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800e7d2:	683a      	ldr	r2, [r7, #0]
 800e7d4:	2101      	movs	r1, #1
 800e7d6:	4831      	ldr	r0, [pc, #196]	@ (800e89c <network_configure_activations+0xd4>)
 800e7d8:	f000 fb5a 	bl	800ee90 <ai_platform_get_activations_map>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d051      	beq.n	800e886 <network_configure_activations+0xbe>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e7e2:	4b2e      	ldr	r3, [pc, #184]	@ (800e89c <network_configure_activations+0xd4>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4a2e      	ldr	r2, [pc, #184]	@ (800e8a0 <network_configure_activations+0xd8>)
 800e7e8:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e7ea:	4b2c      	ldr	r3, [pc, #176]	@ (800e89c <network_configure_activations+0xd4>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4a2c      	ldr	r2, [pc, #176]	@ (800e8a0 <network_configure_activations+0xd8>)
 800e7f0:	60d3      	str	r3, [r2, #12]
    resize_0_output_array.data = AI_PTR(g_network_activations_map[0] + 63984);
 800e7f2:	4b2a      	ldr	r3, [pc, #168]	@ (800e89c <network_configure_activations+0xd4>)
 800e7f4:	681a      	ldr	r2, [r3, #0]
 800e7f6:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800e7fa:	4413      	add	r3, r2
 800e7fc:	4a29      	ldr	r2, [pc, #164]	@ (800e8a4 <network_configure_activations+0xdc>)
 800e7fe:	6093      	str	r3, [r2, #8]
    resize_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 63984);
 800e800:	4b26      	ldr	r3, [pc, #152]	@ (800e89c <network_configure_activations+0xd4>)
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800e808:	4413      	add	r3, r2
 800e80a:	4a26      	ldr	r2, [pc, #152]	@ (800e8a4 <network_configure_activations+0xdc>)
 800e80c:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e80e:	4b23      	ldr	r3, [pc, #140]	@ (800e89c <network_configure_activations+0xd4>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	4a25      	ldr	r2, [pc, #148]	@ (800e8a8 <network_configure_activations+0xe0>)
 800e814:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e816:	4b21      	ldr	r3, [pc, #132]	@ (800e89c <network_configure_activations+0xd4>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	4a23      	ldr	r2, [pc, #140]	@ (800e8a8 <network_configure_activations+0xe0>)
 800e81c:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 36);
 800e81e:	4b1f      	ldr	r3, [pc, #124]	@ (800e89c <network_configure_activations+0xd4>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	3324      	adds	r3, #36	@ 0x24
 800e824:	4a21      	ldr	r2, [pc, #132]	@ (800e8ac <network_configure_activations+0xe4>)
 800e826:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 36);
 800e828:	4b1c      	ldr	r3, [pc, #112]	@ (800e89c <network_configure_activations+0xd4>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	3324      	adds	r3, #36	@ 0x24
 800e82e:	4a1f      	ldr	r2, [pc, #124]	@ (800e8ac <network_configure_activations+0xe4>)
 800e830:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 3364);
 800e832:	4b1a      	ldr	r3, [pc, #104]	@ (800e89c <network_configure_activations+0xd4>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800e83a:	4a1d      	ldr	r2, [pc, #116]	@ (800e8b0 <network_configure_activations+0xe8>)
 800e83c:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3364);
 800e83e:	4b17      	ldr	r3, [pc, #92]	@ (800e89c <network_configure_activations+0xd4>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800e846:	4a1a      	ldr	r2, [pc, #104]	@ (800e8b0 <network_configure_activations+0xe8>)
 800e848:	60d3      	str	r3, [r2, #12]
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e84a:	4b14      	ldr	r3, [pc, #80]	@ (800e89c <network_configure_activations+0xd4>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4a19      	ldr	r2, [pc, #100]	@ (800e8b4 <network_configure_activations+0xec>)
 800e850:	6093      	str	r3, [r2, #8]
    gemm_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e852:	4b12      	ldr	r3, [pc, #72]	@ (800e89c <network_configure_activations+0xd4>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a17      	ldr	r2, [pc, #92]	@ (800e8b4 <network_configure_activations+0xec>)
 800e858:	60d3      	str	r3, [r2, #12]
    nl_4_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800e85a:	4b10      	ldr	r3, [pc, #64]	@ (800e89c <network_configure_activations+0xd4>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e862:	4a15      	ldr	r2, [pc, #84]	@ (800e8b8 <network_configure_activations+0xf0>)
 800e864:	6093      	str	r3, [r2, #8]
    nl_4_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800e866:	4b0d      	ldr	r3, [pc, #52]	@ (800e89c <network_configure_activations+0xd4>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e86e:	4a12      	ldr	r2, [pc, #72]	@ (800e8b8 <network_configure_activations+0xf0>)
 800e870:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e872:	4b0a      	ldr	r3, [pc, #40]	@ (800e89c <network_configure_activations+0xd4>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4a11      	ldr	r2, [pc, #68]	@ (800e8bc <network_configure_activations+0xf4>)
 800e878:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e87a:	4b08      	ldr	r3, [pc, #32]	@ (800e89c <network_configure_activations+0xd4>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4a0f      	ldr	r2, [pc, #60]	@ (800e8bc <network_configure_activations+0xf4>)
 800e880:	60d3      	str	r3, [r2, #12]
    return true;
 800e882:	2301      	movs	r3, #1
 800e884:	e005      	b.n	800e892 <network_configure_activations+0xca>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800e886:	2213      	movs	r2, #19
 800e888:	2130      	movs	r1, #48	@ 0x30
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f000 fb64 	bl	800ef58 <ai_platform_network_set_error>
  return false;
 800e890:	2300      	movs	r3, #0
}
 800e892:	4618      	mov	r0, r3
 800e894:	3708      	adds	r7, #8
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop
 800e89c:	2000df24 	.word	0x2000df24
 800e8a0:	2000004c 	.word	0x2000004c
 800e8a4:	2000005c 	.word	0x2000005c
 800e8a8:	2000010c 	.word	0x2000010c
 800e8ac:	2000011c 	.word	0x2000011c
 800e8b0:	2000006c 	.word	0x2000006c
 800e8b4:	2000007c 	.word	0x2000007c
 800e8b8:	2000008c 	.word	0x2000008c
 800e8bc:	2000009c 	.word	0x2000009c

0800e8c0 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800e8ca:	683a      	ldr	r2, [r7, #0]
 800e8cc:	2101      	movs	r1, #1
 800e8ce:	483d      	ldr	r0, [pc, #244]	@ (800e9c4 <network_configure_weights+0x104>)
 800e8d0:	f000 fa86 	bl	800ede0 <ai_platform_get_weights_map>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d069      	beq.n	800e9ae <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800e8da:	4b3b      	ldr	r3, [pc, #236]	@ (800e9c8 <network_configure_weights+0x108>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e8e2:	4a39      	ldr	r2, [pc, #228]	@ (800e9c8 <network_configure_weights+0x108>)
 800e8e4:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800e8e6:	4b37      	ldr	r3, [pc, #220]	@ (800e9c4 <network_configure_weights+0x104>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4a37      	ldr	r2, [pc, #220]	@ (800e9c8 <network_configure_weights+0x108>)
 800e8ec:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800e8ee:	4b35      	ldr	r3, [pc, #212]	@ (800e9c4 <network_configure_weights+0x104>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4a35      	ldr	r2, [pc, #212]	@ (800e9c8 <network_configure_weights+0x108>)
 800e8f4:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800e8f6:	4b35      	ldr	r3, [pc, #212]	@ (800e9cc <network_configure_weights+0x10c>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e8fe:	4a33      	ldr	r2, [pc, #204]	@ (800e9cc <network_configure_weights+0x10c>)
 800e900:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 800e902:	4b30      	ldr	r3, [pc, #192]	@ (800e9c4 <network_configure_weights+0x104>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800e90a:	4a30      	ldr	r2, [pc, #192]	@ (800e9cc <network_configure_weights+0x10c>)
 800e90c:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 800e90e:	4b2d      	ldr	r3, [pc, #180]	@ (800e9c4 <network_configure_weights+0x104>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800e916:	4a2d      	ldr	r2, [pc, #180]	@ (800e9cc <network_configure_weights+0x10c>)
 800e918:	60d3      	str	r3, [r2, #12]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800e91a:	4b2d      	ldr	r3, [pc, #180]	@ (800e9d0 <network_configure_weights+0x110>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e922:	4a2b      	ldr	r2, [pc, #172]	@ (800e9d0 <network_configure_weights+0x110>)
 800e924:	6013      	str	r3, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 640);
 800e926:	4b27      	ldr	r3, [pc, #156]	@ (800e9c4 <network_configure_weights+0x104>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800e92e:	4a28      	ldr	r2, [pc, #160]	@ (800e9d0 <network_configure_weights+0x110>)
 800e930:	6093      	str	r3, [r2, #8]
    gemm_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 800e932:	4b24      	ldr	r3, [pc, #144]	@ (800e9c4 <network_configure_weights+0x104>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800e93a:	4a25      	ldr	r2, [pc, #148]	@ (800e9d0 <network_configure_weights+0x110>)
 800e93c:	60d3      	str	r3, [r2, #12]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800e93e:	4b25      	ldr	r3, [pc, #148]	@ (800e9d4 <network_configure_weights+0x114>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e946:	4a23      	ldr	r2, [pc, #140]	@ (800e9d4 <network_configure_weights+0x114>)
 800e948:	6013      	str	r3, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 692864);
 800e94a:	4b1e      	ldr	r3, [pc, #120]	@ (800e9c4 <network_configure_weights+0x104>)
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	4b22      	ldr	r3, [pc, #136]	@ (800e9d8 <network_configure_weights+0x118>)
 800e950:	4413      	add	r3, r2
 800e952:	4a20      	ldr	r2, [pc, #128]	@ (800e9d4 <network_configure_weights+0x114>)
 800e954:	6093      	str	r3, [r2, #8]
    gemm_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 692864);
 800e956:	4b1b      	ldr	r3, [pc, #108]	@ (800e9c4 <network_configure_weights+0x104>)
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	4b1f      	ldr	r3, [pc, #124]	@ (800e9d8 <network_configure_weights+0x118>)
 800e95c:	4413      	add	r3, r2
 800e95e:	4a1d      	ldr	r2, [pc, #116]	@ (800e9d4 <network_configure_weights+0x114>)
 800e960:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800e962:	4b1e      	ldr	r3, [pc, #120]	@ (800e9dc <network_configure_weights+0x11c>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e96a:	4a1c      	ldr	r2, [pc, #112]	@ (800e9dc <network_configure_weights+0x11c>)
 800e96c:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 693120);
 800e96e:	4b15      	ldr	r3, [pc, #84]	@ (800e9c4 <network_configure_weights+0x104>)
 800e970:	681a      	ldr	r2, [r3, #0]
 800e972:	4b1b      	ldr	r3, [pc, #108]	@ (800e9e0 <network_configure_weights+0x120>)
 800e974:	4413      	add	r3, r2
 800e976:	4a19      	ldr	r2, [pc, #100]	@ (800e9dc <network_configure_weights+0x11c>)
 800e978:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 693120);
 800e97a:	4b12      	ldr	r3, [pc, #72]	@ (800e9c4 <network_configure_weights+0x104>)
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	4b18      	ldr	r3, [pc, #96]	@ (800e9e0 <network_configure_weights+0x120>)
 800e980:	4413      	add	r3, r2
 800e982:	4a16      	ldr	r2, [pc, #88]	@ (800e9dc <network_configure_weights+0x11c>)
 800e984:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800e986:	4b17      	ldr	r3, [pc, #92]	@ (800e9e4 <network_configure_weights+0x124>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e98e:	4a15      	ldr	r2, [pc, #84]	@ (800e9e4 <network_configure_weights+0x124>)
 800e990:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 694656);
 800e992:	4b0c      	ldr	r3, [pc, #48]	@ (800e9c4 <network_configure_weights+0x104>)
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	4b14      	ldr	r3, [pc, #80]	@ (800e9e8 <network_configure_weights+0x128>)
 800e998:	4413      	add	r3, r2
 800e99a:	4a12      	ldr	r2, [pc, #72]	@ (800e9e4 <network_configure_weights+0x124>)
 800e99c:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 694656);
 800e99e:	4b09      	ldr	r3, [pc, #36]	@ (800e9c4 <network_configure_weights+0x104>)
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	4b11      	ldr	r3, [pc, #68]	@ (800e9e8 <network_configure_weights+0x128>)
 800e9a4:	4413      	add	r3, r2
 800e9a6:	4a0f      	ldr	r2, [pc, #60]	@ (800e9e4 <network_configure_weights+0x124>)
 800e9a8:	60d3      	str	r3, [r2, #12]
    return true;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	e005      	b.n	800e9ba <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800e9ae:	2212      	movs	r2, #18
 800e9b0:	2130      	movs	r1, #48	@ 0x30
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f000 fad0 	bl	800ef58 <ai_platform_network_set_error>
  return false;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3708      	adds	r7, #8
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	2000df28 	.word	0x2000df28
 800e9c8:	200000ac 	.word	0x200000ac
 800e9cc:	200000bc 	.word	0x200000bc
 800e9d0:	200000cc 	.word	0x200000cc
 800e9d4:	200000dc 	.word	0x200000dc
 800e9d8:	000a9280 	.word	0x000a9280
 800e9dc:	200000ec 	.word	0x200000ec
 800e9e0:	000a9380 	.word	0x000a9380
 800e9e4:	200000fc 	.word	0x200000fc
 800e9e8:	000a9980 	.word	0x000a9980

0800e9ec <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f000 faa3 	bl	800ef40 <ai_platform_network_get_error>
 800e9fa:	4603      	mov	r3, r0
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3708      	adds	r7, #8
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b084      	sub	sp, #16
 800ea08:	af02      	add	r7, sp, #8
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800ea0e:	2300      	movs	r3, #0
 800ea10:	9301      	str	r3, [sp, #4]
 800ea12:	2305      	movs	r3, #5
 800ea14:	9300      	str	r3, [sp, #0]
 800ea16:	2301      	movs	r3, #1
 800ea18:	4a04      	ldr	r2, [pc, #16]	@ (800ea2c <ai_network_create+0x28>)
 800ea1a:	6839      	ldr	r1, [r7, #0]
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f000 fb8f 	bl	800f140 <ai_platform_network_create>
 800ea22:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3708      	adds	r7, #8
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	2000075c 	.word	0x2000075c

0800ea30 <ai_network_inputs_get>:
}


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d104      	bne.n	800ea4a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800ea40:	4b06      	ldr	r3, [pc, #24]	@ (800ea5c <ai_network_inputs_get+0x2c>)
 800ea42:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4a06      	ldr	r2, [pc, #24]	@ (800ea60 <ai_network_inputs_get+0x30>)
 800ea48:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800ea4a:	6839      	ldr	r1, [r7, #0]
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f000 fa89 	bl	800ef64 <ai_platform_inputs_get>
 800ea52:	4603      	mov	r3, r0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3708      	adds	r7, #8
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	2000075c 	.word	0x2000075c
 800ea60:	a1c00100 	.word	0xa1c00100

0800ea64 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d104      	bne.n	800ea7e <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800ea74:	4b06      	ldr	r3, [pc, #24]	@ (800ea90 <ai_network_outputs_get+0x2c>)
 800ea76:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	4a06      	ldr	r2, [pc, #24]	@ (800ea94 <ai_network_outputs_get+0x30>)
 800ea7c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800ea7e:	6839      	ldr	r1, [r7, #0]
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f000 fae7 	bl	800f054 <ai_platform_outputs_get>
 800ea86:	4603      	mov	r3, r0
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	2000075c 	.word	0x2000075c
 800ea94:	a1c00100 	.word	0xa1c00100

0800ea98 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800eaa2:	6839      	ldr	r1, [r7, #0]
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f000 fb8d 	bl	800f1c4 <ai_platform_network_init>
 800eaaa:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800eaac:	2301      	movs	r3, #1
 800eaae:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d101      	bne.n	800eaba <ai_network_init+0x22>
 800eab6:	2300      	movs	r3, #0
 800eab8:	e026      	b.n	800eb08 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 800eaba:	6839      	ldr	r1, [r7, #0]
 800eabc:	68f8      	ldr	r0, [r7, #12]
 800eabe:	f7ff feff 	bl	800e8c0 <network_configure_weights>
 800eac2:	4603      	mov	r3, r0
 800eac4:	461a      	mov	r2, r3
 800eac6:	7afb      	ldrb	r3, [r7, #11]
 800eac8:	4013      	ands	r3, r2
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	bf14      	ite	ne
 800eace:	2301      	movne	r3, #1
 800ead0:	2300      	moveq	r3, #0
 800ead2:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800ead4:	6839      	ldr	r1, [r7, #0]
 800ead6:	68f8      	ldr	r0, [r7, #12]
 800ead8:	f7ff fe76 	bl	800e7c8 <network_configure_activations>
 800eadc:	4603      	mov	r3, r0
 800eade:	461a      	mov	r2, r3
 800eae0:	7afb      	ldrb	r3, [r7, #11]
 800eae2:	4013      	ands	r3, r2
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	bf14      	ite	ne
 800eae8:	2301      	movne	r3, #1
 800eaea:	2300      	moveq	r3, #0
 800eaec:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 fc28 	bl	800f344 <ai_platform_network_post_init>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	7afb      	ldrb	r3, [r7, #11]
 800eafa:	4013      	ands	r3, r2
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	bf14      	ite	ne
 800eb00:	2301      	movne	r3, #1
 800eb02:	2300      	moveq	r3, #0
 800eb04:	72fb      	strb	r3, [r7, #11]

  return ok;
 800eb06:	7afb      	ldrb	r3, [r7, #11]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3710      	adds	r7, #16
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 800eb10:	b4b0      	push	{r4, r5, r7}
 800eb12:	b08f      	sub	sp, #60	@ 0x3c
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800eb1a:	4b15      	ldr	r3, [pc, #84]	@ (800eb70 <ai_network_data_activations_buffer_get+0x60>)
 800eb1c:	61fb      	str	r3, [r7, #28]
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	623b      	str	r3, [r7, #32]
 800eb22:	2300      	movs	r3, #0
 800eb24:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb26:	2300      	movs	r3, #0
 800eb28:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eb2a:	4b12      	ldr	r3, [pc, #72]	@ (800eb74 <ai_network_data_activations_buffer_get+0x64>)
 800eb2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb2e:	2301      	movs	r3, #1
 800eb30:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800eb34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb36:	2204      	movs	r2, #4
 800eb38:	f362 231f 	bfi	r3, r2, #8, #24
 800eb3c:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb3e:	4b0e      	ldr	r3, [pc, #56]	@ (800eb78 <ai_network_data_activations_buffer_get+0x68>)
 800eb40:	f107 040c 	add.w	r4, r7, #12
 800eb44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eb46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800eb4a:	f107 030c 	add.w	r3, r7, #12
 800eb4e:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	461d      	mov	r5, r3
 800eb54:	f107 041c 	add.w	r4, r7, #28
 800eb58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb5c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800eb60:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	373c      	adds	r7, #60	@ 0x3c
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bcb0      	pop	{r4, r5, r7}
 800eb6c:	4770      	bx	lr
 800eb6e:	bf00      	nop
 800eb70:	00040440 	.word	0x00040440
 800eb74:	00010630 	.word	0x00010630
 800eb78:	0801588c 	.word	0x0801588c

0800eb7c <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 800eb7c:	b4b0      	push	{r4, r5, r7}
 800eb7e:	b08f      	sub	sp, #60	@ 0x3c
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800eb86:	4b15      	ldr	r3, [pc, #84]	@ (800ebdc <ai_network_data_weights_buffer_get+0x60>)
 800eb88:	61fb      	str	r3, [r7, #28]
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	623b      	str	r3, [r7, #32]
 800eb8e:	2300      	movs	r3, #0
 800eb90:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb92:	2300      	movs	r3, #0
 800eb94:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eb96:	4b12      	ldr	r3, [pc, #72]	@ (800ebe0 <ai_network_data_weights_buffer_get+0x64>)
 800eb98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800eba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eba2:	2204      	movs	r2, #4
 800eba4:	f362 231f 	bfi	r3, r2, #8, #24
 800eba8:	633b      	str	r3, [r7, #48]	@ 0x30
 800ebaa:	4b0e      	ldr	r3, [pc, #56]	@ (800ebe4 <ai_network_data_weights_buffer_get+0x68>)
 800ebac:	f107 040c 	add.w	r4, r7, #12
 800ebb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ebb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ebb6:	f107 030c 	add.w	r3, r7, #12
 800ebba:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	461d      	mov	r5, r3
 800ebc0:	f107 041c 	add.w	r4, r7, #28
 800ebc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ebc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ebc8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ebcc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	373c      	adds	r7, #60	@ 0x3c
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bcb0      	pop	{r4, r5, r7}
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	40040440 	.word	0x40040440
 800ebe0:	000a9998 	.word	0x000a9998
 800ebe4:	0801589c 	.word	0x0801589c

0800ebe8 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_network_weights_table);
 800ebec:	4b02      	ldr	r3, [pc, #8]	@ (800ebf8 <ai_network_data_weights_get+0x10>)

}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr
 800ebf8:	20000800 	.word	0x20000800

0800ebfc <arm_rfft_fast_init_f32>:
 800ebfc:	084b      	lsrs	r3, r1, #1
 800ebfe:	2b80      	cmp	r3, #128	@ 0x80
 800ec00:	b430      	push	{r4, r5}
 800ec02:	8201      	strh	r1, [r0, #16]
 800ec04:	8003      	strh	r3, [r0, #0]
 800ec06:	d070      	beq.n	800ecea <arm_rfft_fast_init_f32+0xee>
 800ec08:	d916      	bls.n	800ec38 <arm_rfft_fast_init_f32+0x3c>
 800ec0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec0e:	d05f      	beq.n	800ecd0 <arm_rfft_fast_init_f32+0xd4>
 800ec10:	d936      	bls.n	800ec80 <arm_rfft_fast_init_f32+0x84>
 800ec12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec16:	d026      	beq.n	800ec66 <arm_rfft_fast_init_f32+0x6a>
 800ec18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ec1c:	d112      	bne.n	800ec44 <arm_rfft_fast_init_f32+0x48>
 800ec1e:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 800ec22:	4c38      	ldr	r4, [pc, #224]	@ (800ed04 <arm_rfft_fast_init_f32+0x108>)
 800ec24:	4938      	ldr	r1, [pc, #224]	@ (800ed08 <arm_rfft_fast_init_f32+0x10c>)
 800ec26:	2300      	movs	r3, #0
 800ec28:	4a38      	ldr	r2, [pc, #224]	@ (800ed0c <arm_rfft_fast_init_f32+0x110>)
 800ec2a:	8185      	strh	r5, [r0, #12]
 800ec2c:	6084      	str	r4, [r0, #8]
 800ec2e:	6041      	str	r1, [r0, #4]
 800ec30:	6142      	str	r2, [r0, #20]
 800ec32:	4618      	mov	r0, r3
 800ec34:	bc30      	pop	{r4, r5}
 800ec36:	4770      	bx	lr
 800ec38:	2b20      	cmp	r3, #32
 800ec3a:	d031      	beq.n	800eca0 <arm_rfft_fast_init_f32+0xa4>
 800ec3c:	2b40      	cmp	r3, #64	@ 0x40
 800ec3e:	d006      	beq.n	800ec4e <arm_rfft_fast_init_f32+0x52>
 800ec40:	2b10      	cmp	r3, #16
 800ec42:	d039      	beq.n	800ecb8 <arm_rfft_fast_init_f32+0xbc>
 800ec44:	f04f 33ff 	mov.w	r3, #4294967295
 800ec48:	bc30      	pop	{r4, r5}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	4770      	bx	lr
 800ec4e:	2538      	movs	r5, #56	@ 0x38
 800ec50:	4c2f      	ldr	r4, [pc, #188]	@ (800ed10 <arm_rfft_fast_init_f32+0x114>)
 800ec52:	4930      	ldr	r1, [pc, #192]	@ (800ed14 <arm_rfft_fast_init_f32+0x118>)
 800ec54:	2300      	movs	r3, #0
 800ec56:	4a30      	ldr	r2, [pc, #192]	@ (800ed18 <arm_rfft_fast_init_f32+0x11c>)
 800ec58:	8185      	strh	r5, [r0, #12]
 800ec5a:	6084      	str	r4, [r0, #8]
 800ec5c:	6041      	str	r1, [r0, #4]
 800ec5e:	6142      	str	r2, [r0, #20]
 800ec60:	4618      	mov	r0, r3
 800ec62:	bc30      	pop	{r4, r5}
 800ec64:	4770      	bx	lr
 800ec66:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 800ec6a:	4c2c      	ldr	r4, [pc, #176]	@ (800ed1c <arm_rfft_fast_init_f32+0x120>)
 800ec6c:	492c      	ldr	r1, [pc, #176]	@ (800ed20 <arm_rfft_fast_init_f32+0x124>)
 800ec6e:	2300      	movs	r3, #0
 800ec70:	4a2c      	ldr	r2, [pc, #176]	@ (800ed24 <arm_rfft_fast_init_f32+0x128>)
 800ec72:	8185      	strh	r5, [r0, #12]
 800ec74:	6084      	str	r4, [r0, #8]
 800ec76:	6041      	str	r1, [r0, #4]
 800ec78:	6142      	str	r2, [r0, #20]
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	bc30      	pop	{r4, r5}
 800ec7e:	4770      	bx	lr
 800ec80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec84:	d1de      	bne.n	800ec44 <arm_rfft_fast_init_f32+0x48>
 800ec86:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 800ec8a:	4c27      	ldr	r4, [pc, #156]	@ (800ed28 <arm_rfft_fast_init_f32+0x12c>)
 800ec8c:	4927      	ldr	r1, [pc, #156]	@ (800ed2c <arm_rfft_fast_init_f32+0x130>)
 800ec8e:	2300      	movs	r3, #0
 800ec90:	4a27      	ldr	r2, [pc, #156]	@ (800ed30 <arm_rfft_fast_init_f32+0x134>)
 800ec92:	8185      	strh	r5, [r0, #12]
 800ec94:	6084      	str	r4, [r0, #8]
 800ec96:	6041      	str	r1, [r0, #4]
 800ec98:	6142      	str	r2, [r0, #20]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	bc30      	pop	{r4, r5}
 800ec9e:	4770      	bx	lr
 800eca0:	2530      	movs	r5, #48	@ 0x30
 800eca2:	4c24      	ldr	r4, [pc, #144]	@ (800ed34 <arm_rfft_fast_init_f32+0x138>)
 800eca4:	4924      	ldr	r1, [pc, #144]	@ (800ed38 <arm_rfft_fast_init_f32+0x13c>)
 800eca6:	2300      	movs	r3, #0
 800eca8:	4a24      	ldr	r2, [pc, #144]	@ (800ed3c <arm_rfft_fast_init_f32+0x140>)
 800ecaa:	8185      	strh	r5, [r0, #12]
 800ecac:	6084      	str	r4, [r0, #8]
 800ecae:	6041      	str	r1, [r0, #4]
 800ecb0:	6142      	str	r2, [r0, #20]
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	bc30      	pop	{r4, r5}
 800ecb6:	4770      	bx	lr
 800ecb8:	2514      	movs	r5, #20
 800ecba:	4c21      	ldr	r4, [pc, #132]	@ (800ed40 <arm_rfft_fast_init_f32+0x144>)
 800ecbc:	4921      	ldr	r1, [pc, #132]	@ (800ed44 <arm_rfft_fast_init_f32+0x148>)
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	4a21      	ldr	r2, [pc, #132]	@ (800ed48 <arm_rfft_fast_init_f32+0x14c>)
 800ecc2:	8185      	strh	r5, [r0, #12]
 800ecc4:	6084      	str	r4, [r0, #8]
 800ecc6:	6041      	str	r1, [r0, #4]
 800ecc8:	6142      	str	r2, [r0, #20]
 800ecca:	4618      	mov	r0, r3
 800eccc:	bc30      	pop	{r4, r5}
 800ecce:	4770      	bx	lr
 800ecd0:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 800ecd4:	4c1d      	ldr	r4, [pc, #116]	@ (800ed4c <arm_rfft_fast_init_f32+0x150>)
 800ecd6:	491e      	ldr	r1, [pc, #120]	@ (800ed50 <arm_rfft_fast_init_f32+0x154>)
 800ecd8:	2300      	movs	r3, #0
 800ecda:	4a1e      	ldr	r2, [pc, #120]	@ (800ed54 <arm_rfft_fast_init_f32+0x158>)
 800ecdc:	8185      	strh	r5, [r0, #12]
 800ecde:	6084      	str	r4, [r0, #8]
 800ece0:	6041      	str	r1, [r0, #4]
 800ece2:	6142      	str	r2, [r0, #20]
 800ece4:	4618      	mov	r0, r3
 800ece6:	bc30      	pop	{r4, r5}
 800ece8:	4770      	bx	lr
 800ecea:	25d0      	movs	r5, #208	@ 0xd0
 800ecec:	4c1a      	ldr	r4, [pc, #104]	@ (800ed58 <arm_rfft_fast_init_f32+0x15c>)
 800ecee:	491b      	ldr	r1, [pc, #108]	@ (800ed5c <arm_rfft_fast_init_f32+0x160>)
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	4a1b      	ldr	r2, [pc, #108]	@ (800ed60 <arm_rfft_fast_init_f32+0x164>)
 800ecf4:	8185      	strh	r5, [r0, #12]
 800ecf6:	6084      	str	r4, [r0, #8]
 800ecf8:	6041      	str	r1, [r0, #4]
 800ecfa:	6142      	str	r2, [r0, #20]
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	bc30      	pop	{r4, r5}
 800ed00:	4770      	bx	lr
 800ed02:	bf00      	nop
 800ed04:	080ce180 	.word	0x080ce180
 800ed08:	080bf378 	.word	0x080bf378
 800ed0c:	080c54e8 	.word	0x080c54e8
 800ed10:	080c3478 	.word	0x080c3478
 800ed14:	080cff40 	.word	0x080cff40
 800ed18:	080d2430 	.word	0x080d2430
 800ed1c:	080cbe68 	.word	0x080cbe68
 800ed20:	080c9d68 	.word	0x080c9d68
 800ed24:	080c34e8 	.word	0x080c34e8
 800ed28:	080d20c0 	.word	0x080d20c0
 800ed2c:	080c94e8 	.word	0x080c94e8
 800ed30:	080d0140 	.word	0x080d0140
 800ed34:	080ccd20 	.word	0x080ccd20
 800ed38:	080cbd68 	.word	0x080cbd68
 800ed3c:	080c3378 	.word	0x080c3378
 800ed40:	080ccc78 	.word	0x080ccc78
 800ed44:	080c9ce8 	.word	0x080c9ce8
 800ed48:	080ccca0 	.word	0x080ccca0
 800ed4c:	080d0940 	.word	0x080d0940
 800ed50:	080cd180 	.word	0x080cd180
 800ed54:	080d0cc0 	.word	0x080d0cc0
 800ed58:	080d2630 	.word	0x080d2630
 800ed5c:	080ccd80 	.word	0x080ccd80
 800ed60:	080d1cc0 	.word	0x080d1cc0

0800ed64 <ai_buffer_get_size>:
 800ed64:	b368      	cbz	r0, 800edc2 <ai_buffer_get_size+0x5e>
 800ed66:	4b17      	ldr	r3, [pc, #92]	@ (800edc4 <ai_buffer_get_size+0x60>)
 800ed68:	4a17      	ldr	r2, [pc, #92]	@ (800edc8 <ai_buffer_get_size+0x64>)
 800ed6a:	b410      	push	{r4}
 800ed6c:	6804      	ldr	r4, [r0, #0]
 800ed6e:	4023      	ands	r3, r4
 800ed70:	4293      	cmp	r3, r2
 800ed72:	d123      	bne.n	800edbc <ai_buffer_get_size+0x58>
 800ed74:	b311      	cbz	r1, 800edbc <ai_buffer_get_size+0x58>
 800ed76:	6984      	ldr	r4, [r0, #24]
 800ed78:	6862      	ldr	r2, [r4, #4]
 800ed7a:	321f      	adds	r2, #31
 800ed7c:	f022 021f 	bic.w	r2, r2, #31
 800ed80:	7d03      	ldrb	r3, [r0, #20]
 800ed82:	6941      	ldr	r1, [r0, #20]
 800ed84:	f1a3 0301 	sub.w	r3, r3, #1
 800ed88:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800ed8c:	fab3 f383 	clz	r3, r3
 800ed90:	095b      	lsrs	r3, r3, #5
 800ed92:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800ed96:	da0c      	bge.n	800edb2 <ai_buffer_get_size+0x4e>
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d103      	bne.n	800eda4 <ai_buffer_get_size+0x40>
 800ed9c:	2802      	cmp	r0, #2
 800ed9e:	f04f 0302 	mov.w	r3, #2
 800eda2:	d006      	beq.n	800edb2 <ai_buffer_get_size+0x4e>
 800eda4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800eda8:	3301      	adds	r3, #1
 800edaa:	4298      	cmp	r0, r3
 800edac:	fb01 f202 	mul.w	r2, r1, r2
 800edb0:	d1f2      	bne.n	800ed98 <ai_buffer_get_size+0x34>
 800edb2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800edb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edba:	4770      	bx	lr
 800edbc:	6984      	ldr	r4, [r0, #24]
 800edbe:	6862      	ldr	r2, [r4, #4]
 800edc0:	e7de      	b.n	800ed80 <ai_buffer_get_size+0x1c>
 800edc2:	4770      	bx	lr
 800edc4:	017fffff 	.word	0x017fffff
 800edc8:	000400c0 	.word	0x000400c0

0800edcc <ai_buffer_array_sane>:
 800edcc:	b138      	cbz	r0, 800edde <ai_buffer_array_sane+0x12>
 800edce:	6843      	ldr	r3, [r0, #4]
 800edd0:	b123      	cbz	r3, 800eddc <ai_buffer_array_sane+0x10>
 800edd2:	8840      	ldrh	r0, [r0, #2]
 800edd4:	3800      	subs	r0, #0
 800edd6:	bf18      	it	ne
 800edd8:	2001      	movne	r0, #1
 800edda:	4770      	bx	lr
 800eddc:	4618      	mov	r0, r3
 800edde:	4770      	bx	lr

0800ede0 <ai_platform_get_weights_map>:
 800ede0:	2900      	cmp	r1, #0
 800ede2:	bf18      	it	ne
 800ede4:	2800      	cmpne	r0, #0
 800ede6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ede8:	bf0c      	ite	eq
 800edea:	2401      	moveq	r4, #1
 800edec:	2400      	movne	r4, #0
 800edee:	2a00      	cmp	r2, #0
 800edf0:	bf08      	it	eq
 800edf2:	f044 0401 	orreq.w	r4, r4, #1
 800edf6:	b114      	cbz	r4, 800edfe <ai_platform_get_weights_map+0x1e>
 800edf8:	2400      	movs	r4, #0
 800edfa:	4620      	mov	r0, r4
 800edfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edfe:	4616      	mov	r6, r2
 800ee00:	4b22      	ldr	r3, [pc, #136]	@ (800ee8c <ai_platform_get_weights_map+0xac>)
 800ee02:	6812      	ldr	r2, [r2, #0]
 800ee04:	4605      	mov	r5, r0
 800ee06:	460f      	mov	r7, r1
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d022      	beq.n	800ee52 <ai_platform_get_weights_map+0x72>
 800ee0c:	6870      	ldr	r0, [r6, #4]
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	d0f2      	beq.n	800edf8 <ai_platform_get_weights_map+0x18>
 800ee12:	6806      	ldr	r6, [r0, #0]
 800ee14:	429e      	cmp	r6, r3
 800ee16:	d006      	beq.n	800ee26 <ai_platform_get_weights_map+0x46>
 800ee18:	f1a1 0401 	sub.w	r4, r1, #1
 800ee1c:	6028      	str	r0, [r5, #0]
 800ee1e:	fab4 f484 	clz	r4, r4
 800ee22:	0964      	lsrs	r4, r4, #5
 800ee24:	e7e9      	b.n	800edfa <ai_platform_get_weights_map+0x1a>
 800ee26:	3d04      	subs	r5, #4
 800ee28:	4602      	mov	r2, r0
 800ee2a:	4621      	mov	r1, r4
 800ee2c:	e000      	b.n	800ee30 <ai_platform_get_weights_map+0x50>
 800ee2e:	4619      	mov	r1, r3
 800ee30:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800ee34:	42b3      	cmp	r3, r6
 800ee36:	d025      	beq.n	800ee84 <ai_platform_get_weights_map+0xa4>
 800ee38:	f845 3f04 	str.w	r3, [r5, #4]!
 800ee3c:	1c4b      	adds	r3, r1, #1
 800ee3e:	429f      	cmp	r7, r3
 800ee40:	d8f5      	bhi.n	800ee2e <ai_platform_get_weights_map+0x4e>
 800ee42:	d1da      	bne.n	800edfa <ai_platform_get_weights_map+0x1a>
 800ee44:	3102      	adds	r1, #2
 800ee46:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800ee4a:	42b3      	cmp	r3, r6
 800ee4c:	d1d5      	bne.n	800edfa <ai_platform_get_weights_map+0x1a>
 800ee4e:	2401      	movs	r4, #1
 800ee50:	e7d3      	b.n	800edfa <ai_platform_get_weights_map+0x1a>
 800ee52:	1d30      	adds	r0, r6, #4
 800ee54:	f7ff ffba 	bl	800edcc <ai_buffer_array_sane>
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	d0cd      	beq.n	800edf8 <ai_platform_get_weights_map+0x18>
 800ee5c:	88f3      	ldrh	r3, [r6, #6]
 800ee5e:	429f      	cmp	r7, r3
 800ee60:	d1ca      	bne.n	800edf8 <ai_platform_get_weights_map+0x18>
 800ee62:	3d04      	subs	r5, #4
 800ee64:	4622      	mov	r2, r4
 800ee66:	68b3      	ldr	r3, [r6, #8]
 800ee68:	4423      	add	r3, r4
 800ee6a:	341c      	adds	r4, #28
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	b123      	cbz	r3, 800ee7a <ai_platform_get_weights_map+0x9a>
 800ee70:	3201      	adds	r2, #1
 800ee72:	f845 3f04 	str.w	r3, [r5, #4]!
 800ee76:	4297      	cmp	r7, r2
 800ee78:	d8f5      	bhi.n	800ee66 <ai_platform_get_weights_map+0x86>
 800ee7a:	1abc      	subs	r4, r7, r2
 800ee7c:	fab4 f484 	clz	r4, r4
 800ee80:	0964      	lsrs	r4, r4, #5
 800ee82:	e7ba      	b.n	800edfa <ai_platform_get_weights_map+0x1a>
 800ee84:	428f      	cmp	r7, r1
 800ee86:	d1b8      	bne.n	800edfa <ai_platform_get_weights_map+0x1a>
 800ee88:	e7e1      	b.n	800ee4e <ai_platform_get_weights_map+0x6e>
 800ee8a:	bf00      	nop
 800ee8c:	a1facade 	.word	0xa1facade

0800ee90 <ai_platform_get_activations_map>:
 800ee90:	2900      	cmp	r1, #0
 800ee92:	bf18      	it	ne
 800ee94:	2800      	cmpne	r0, #0
 800ee96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee98:	bf0c      	ite	eq
 800ee9a:	2401      	moveq	r4, #1
 800ee9c:	2400      	movne	r4, #0
 800ee9e:	2a00      	cmp	r2, #0
 800eea0:	bf08      	it	eq
 800eea2:	f044 0401 	orreq.w	r4, r4, #1
 800eea6:	b114      	cbz	r4, 800eeae <ai_platform_get_activations_map+0x1e>
 800eea8:	2400      	movs	r4, #0
 800eeaa:	4620      	mov	r0, r4
 800eeac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeae:	4616      	mov	r6, r2
 800eeb0:	4b22      	ldr	r3, [pc, #136]	@ (800ef3c <ai_platform_get_activations_map+0xac>)
 800eeb2:	6812      	ldr	r2, [r2, #0]
 800eeb4:	4605      	mov	r5, r0
 800eeb6:	460f      	mov	r7, r1
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d022      	beq.n	800ef02 <ai_platform_get_activations_map+0x72>
 800eebc:	6a30      	ldr	r0, [r6, #32]
 800eebe:	2800      	cmp	r0, #0
 800eec0:	d0f2      	beq.n	800eea8 <ai_platform_get_activations_map+0x18>
 800eec2:	6806      	ldr	r6, [r0, #0]
 800eec4:	429e      	cmp	r6, r3
 800eec6:	d006      	beq.n	800eed6 <ai_platform_get_activations_map+0x46>
 800eec8:	f1a1 0401 	sub.w	r4, r1, #1
 800eecc:	6028      	str	r0, [r5, #0]
 800eece:	fab4 f484 	clz	r4, r4
 800eed2:	0964      	lsrs	r4, r4, #5
 800eed4:	e7e9      	b.n	800eeaa <ai_platform_get_activations_map+0x1a>
 800eed6:	3d04      	subs	r5, #4
 800eed8:	4602      	mov	r2, r0
 800eeda:	4621      	mov	r1, r4
 800eedc:	e000      	b.n	800eee0 <ai_platform_get_activations_map+0x50>
 800eede:	4619      	mov	r1, r3
 800eee0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800eee4:	42b3      	cmp	r3, r6
 800eee6:	d026      	beq.n	800ef36 <ai_platform_get_activations_map+0xa6>
 800eee8:	f845 3f04 	str.w	r3, [r5, #4]!
 800eeec:	1c4b      	adds	r3, r1, #1
 800eeee:	429f      	cmp	r7, r3
 800eef0:	d8f5      	bhi.n	800eede <ai_platform_get_activations_map+0x4e>
 800eef2:	d1da      	bne.n	800eeaa <ai_platform_get_activations_map+0x1a>
 800eef4:	3102      	adds	r1, #2
 800eef6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800eefa:	42b3      	cmp	r3, r6
 800eefc:	d1d5      	bne.n	800eeaa <ai_platform_get_activations_map+0x1a>
 800eefe:	2401      	movs	r4, #1
 800ef00:	e7d3      	b.n	800eeaa <ai_platform_get_activations_map+0x1a>
 800ef02:	f106 000c 	add.w	r0, r6, #12
 800ef06:	f7ff ff61 	bl	800edcc <ai_buffer_array_sane>
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	d0cc      	beq.n	800eea8 <ai_platform_get_activations_map+0x18>
 800ef0e:	89f3      	ldrh	r3, [r6, #14]
 800ef10:	429f      	cmp	r7, r3
 800ef12:	d1c9      	bne.n	800eea8 <ai_platform_get_activations_map+0x18>
 800ef14:	3d04      	subs	r5, #4
 800ef16:	4622      	mov	r2, r4
 800ef18:	6933      	ldr	r3, [r6, #16]
 800ef1a:	4423      	add	r3, r4
 800ef1c:	341c      	adds	r4, #28
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	b123      	cbz	r3, 800ef2c <ai_platform_get_activations_map+0x9c>
 800ef22:	3201      	adds	r2, #1
 800ef24:	f845 3f04 	str.w	r3, [r5, #4]!
 800ef28:	4297      	cmp	r7, r2
 800ef2a:	d8f5      	bhi.n	800ef18 <ai_platform_get_activations_map+0x88>
 800ef2c:	1abc      	subs	r4, r7, r2
 800ef2e:	fab4 f484 	clz	r4, r4
 800ef32:	0964      	lsrs	r4, r4, #5
 800ef34:	e7b9      	b.n	800eeaa <ai_platform_get_activations_map+0x1a>
 800ef36:	428f      	cmp	r7, r1
 800ef38:	d1b7      	bne.n	800eeaa <ai_platform_get_activations_map+0x1a>
 800ef3a:	e7e0      	b.n	800eefe <ai_platform_get_activations_map+0x6e>
 800ef3c:	a1facade 	.word	0xa1facade

0800ef40 <ai_platform_network_get_error>:
 800ef40:	4b04      	ldr	r3, [pc, #16]	@ (800ef54 <ai_platform_network_get_error+0x14>)
 800ef42:	6802      	ldr	r2, [r0, #0]
 800ef44:	4393      	bics	r3, r2
 800ef46:	d102      	bne.n	800ef4e <ai_platform_network_get_error+0xe>
 800ef48:	300c      	adds	r0, #12
 800ef4a:	f000 ba2d 	b.w	800f3a8 <core_get_error>
 800ef4e:	f241 0010 	movw	r0, #4112	@ 0x1010
 800ef52:	4770      	bx	lr
 800ef54:	a1c00100 	.word	0xa1c00100

0800ef58 <ai_platform_network_set_error>:
 800ef58:	b110      	cbz	r0, 800ef60 <ai_platform_network_set_error+0x8>
 800ef5a:	300c      	adds	r0, #12
 800ef5c:	f000 ba2a 	b.w	800f3b4 <core_set_error>
 800ef60:	4770      	bx	lr
 800ef62:	bf00      	nop

0800ef64 <ai_platform_inputs_get>:
 800ef64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef68:	4b39      	ldr	r3, [pc, #228]	@ (800f050 <ai_platform_inputs_get+0xec>)
 800ef6a:	b085      	sub	sp, #20
 800ef6c:	6802      	ldr	r2, [r0, #0]
 800ef6e:	4393      	bics	r3, r2
 800ef70:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800ef74:	d162      	bne.n	800f03c <ai_platform_inputs_get+0xd8>
 800ef76:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d051      	beq.n	800f020 <ai_platform_inputs_get+0xbc>
 800ef7c:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800ef80:	f1ba 0f00 	cmp.w	sl, #0
 800ef84:	d04c      	beq.n	800f020 <ai_platform_inputs_get+0xbc>
 800ef86:	f04f 0900 	mov.w	r9, #0
 800ef8a:	464d      	mov	r5, r9
 800ef8c:	e016      	b.n	800efbc <ai_platform_inputs_get+0x58>
 800ef8e:	9901      	ldr	r1, [sp, #4]
 800ef90:	2301      	movs	r3, #1
 800ef92:	f848 3001 	str.w	r3, [r8, r1]
 800ef96:	69b1      	ldr	r1, [r6, #24]
 800ef98:	f04f 0301 	mov.w	r3, #1
 800ef9c:	684e      	ldr	r6, [r1, #4]
 800ef9e:	3501      	adds	r5, #1
 800efa0:	f109 091c 	add.w	r9, r9, #28
 800efa4:	7523      	strb	r3, [r4, #20]
 800efa6:	2300      	movs	r3, #0
 800efa8:	6961      	ldr	r1, [r4, #20]
 800efaa:	6020      	str	r0, [r4, #0]
 800efac:	f36b 211f 	bfi	r1, fp, #8, #24
 800efb0:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800efb4:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800efb8:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800efbc:	f8ba 3000 	ldrh.w	r3, [sl]
 800efc0:	b2ac      	uxth	r4, r5
 800efc2:	42ab      	cmp	r3, r5
 800efc4:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800efc8:	9301      	str	r3, [sp, #4]
 800efca:	d93b      	bls.n	800f044 <ai_platform_inputs_get+0xe0>
 800efcc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d037      	beq.n	800f044 <ai_platform_inputs_get+0xe0>
 800efd4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800efd8:	2e00      	cmp	r6, #0
 800efda:	d033      	beq.n	800f044 <ai_platform_inputs_get+0xe0>
 800efdc:	f8da 3008 	ldr.w	r3, [sl, #8]
 800efe0:	69b2      	ldr	r2, [r6, #24]
 800efe2:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800efe6:	6810      	ldr	r0, [r2, #0]
 800efe8:	68b3      	ldr	r3, [r6, #8]
 800efea:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800efee:	68f2      	ldr	r2, [r6, #12]
 800eff0:	444c      	add	r4, r9
 800eff2:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800eff6:	9200      	str	r2, [sp, #0]
 800eff8:	f002 fd86 	bl	8011b08 <ai_array_to_buffer_fmt>
 800effc:	69b1      	ldr	r1, [r6, #24]
 800effe:	9a00      	ldr	r2, [sp, #0]
 800f000:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800f004:	2f00      	cmp	r7, #0
 800f006:	d0c7      	beq.n	800ef98 <ai_platform_inputs_get+0x34>
 800f008:	2100      	movs	r1, #0
 800f00a:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800f00e:	6831      	ldr	r1, [r6, #0]
 800f010:	6079      	str	r1, [r7, #4]
 800f012:	b111      	cbz	r1, 800f01a <ai_platform_inputs_get+0xb6>
 800f014:	8849      	ldrh	r1, [r1, #2]
 800f016:	2900      	cmp	r1, #0
 800f018:	d1b9      	bne.n	800ef8e <ai_platform_inputs_get+0x2a>
 800f01a:	69b1      	ldr	r1, [r6, #24]
 800f01c:	2700      	movs	r7, #0
 800f01e:	e7bb      	b.n	800ef98 <ai_platform_inputs_get+0x34>
 800f020:	9803      	ldr	r0, [sp, #12]
 800f022:	2400      	movs	r4, #0
 800f024:	2218      	movs	r2, #24
 800f026:	2111      	movs	r1, #17
 800f028:	300c      	adds	r0, #12
 800f02a:	f000 f9c3 	bl	800f3b4 <core_set_error>
 800f02e:	4620      	mov	r0, r4
 800f030:	9b02      	ldr	r3, [sp, #8]
 800f032:	b103      	cbz	r3, 800f036 <ai_platform_inputs_get+0xd2>
 800f034:	801c      	strh	r4, [r3, #0]
 800f036:	b005      	add	sp, #20
 800f038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f03c:	2000      	movs	r0, #0
 800f03e:	b005      	add	sp, #20
 800f040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f044:	2c00      	cmp	r4, #0
 800f046:	d0eb      	beq.n	800f020 <ai_platform_inputs_get+0xbc>
 800f048:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f04c:	6858      	ldr	r0, [r3, #4]
 800f04e:	e7ef      	b.n	800f030 <ai_platform_inputs_get+0xcc>
 800f050:	a1c00100 	.word	0xa1c00100

0800f054 <ai_platform_outputs_get>:
 800f054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f058:	4b38      	ldr	r3, [pc, #224]	@ (800f13c <ai_platform_outputs_get+0xe8>)
 800f05a:	b085      	sub	sp, #20
 800f05c:	6802      	ldr	r2, [r0, #0]
 800f05e:	4393      	bics	r3, r2
 800f060:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800f064:	d15f      	bne.n	800f126 <ai_platform_outputs_get+0xd2>
 800f066:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d94e      	bls.n	800f10a <ai_platform_outputs_get+0xb6>
 800f06c:	f04f 0900 	mov.w	r9, #0
 800f070:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800f074:	464d      	mov	r5, r9
 800f076:	e016      	b.n	800f0a6 <ai_platform_outputs_get+0x52>
 800f078:	9901      	ldr	r1, [sp, #4]
 800f07a:	2301      	movs	r3, #1
 800f07c:	f848 3001 	str.w	r3, [r8, r1]
 800f080:	69b1      	ldr	r1, [r6, #24]
 800f082:	f04f 0301 	mov.w	r3, #1
 800f086:	684e      	ldr	r6, [r1, #4]
 800f088:	3501      	adds	r5, #1
 800f08a:	f109 091c 	add.w	r9, r9, #28
 800f08e:	7523      	strb	r3, [r4, #20]
 800f090:	2300      	movs	r3, #0
 800f092:	6961      	ldr	r1, [r4, #20]
 800f094:	6020      	str	r0, [r4, #0]
 800f096:	f36b 211f 	bfi	r1, fp, #8, #24
 800f09a:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800f09e:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800f0a2:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800f0a6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800f0aa:	b2ac      	uxth	r4, r5
 800f0ac:	42ab      	cmp	r3, r5
 800f0ae:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800f0b2:	9301      	str	r3, [sp, #4]
 800f0b4:	d93b      	bls.n	800f12e <ai_platform_outputs_get+0xda>
 800f0b6:	f8da 3010 	ldr.w	r3, [sl, #16]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d037      	beq.n	800f12e <ai_platform_outputs_get+0xda>
 800f0be:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800f0c2:	2e00      	cmp	r6, #0
 800f0c4:	d033      	beq.n	800f12e <ai_platform_outputs_get+0xda>
 800f0c6:	f8da 3014 	ldr.w	r3, [sl, #20]
 800f0ca:	69b2      	ldr	r2, [r6, #24]
 800f0cc:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800f0d0:	6810      	ldr	r0, [r2, #0]
 800f0d2:	68b3      	ldr	r3, [r6, #8]
 800f0d4:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800f0d8:	68f2      	ldr	r2, [r6, #12]
 800f0da:	444c      	add	r4, r9
 800f0dc:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800f0e0:	9200      	str	r2, [sp, #0]
 800f0e2:	f002 fd11 	bl	8011b08 <ai_array_to_buffer_fmt>
 800f0e6:	69b1      	ldr	r1, [r6, #24]
 800f0e8:	9a00      	ldr	r2, [sp, #0]
 800f0ea:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800f0ee:	2f00      	cmp	r7, #0
 800f0f0:	d0c7      	beq.n	800f082 <ai_platform_outputs_get+0x2e>
 800f0f2:	2100      	movs	r1, #0
 800f0f4:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800f0f8:	6831      	ldr	r1, [r6, #0]
 800f0fa:	6079      	str	r1, [r7, #4]
 800f0fc:	b111      	cbz	r1, 800f104 <ai_platform_outputs_get+0xb0>
 800f0fe:	8849      	ldrh	r1, [r1, #2]
 800f100:	2900      	cmp	r1, #0
 800f102:	d1b9      	bne.n	800f078 <ai_platform_outputs_get+0x24>
 800f104:	69b1      	ldr	r1, [r6, #24]
 800f106:	2700      	movs	r7, #0
 800f108:	e7bb      	b.n	800f082 <ai_platform_outputs_get+0x2e>
 800f10a:	9803      	ldr	r0, [sp, #12]
 800f10c:	2400      	movs	r4, #0
 800f10e:	2218      	movs	r2, #24
 800f110:	2111      	movs	r1, #17
 800f112:	300c      	adds	r0, #12
 800f114:	f000 f94e 	bl	800f3b4 <core_set_error>
 800f118:	4620      	mov	r0, r4
 800f11a:	9b02      	ldr	r3, [sp, #8]
 800f11c:	b103      	cbz	r3, 800f120 <ai_platform_outputs_get+0xcc>
 800f11e:	801c      	strh	r4, [r3, #0]
 800f120:	b005      	add	sp, #20
 800f122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f126:	2000      	movs	r0, #0
 800f128:	b005      	add	sp, #20
 800f12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f12e:	2c00      	cmp	r4, #0
 800f130:	d0eb      	beq.n	800f10a <ai_platform_outputs_get+0xb6>
 800f132:	f8da 3014 	ldr.w	r3, [sl, #20]
 800f136:	6858      	ldr	r0, [r3, #4]
 800f138:	e7ef      	b.n	800f11a <ai_platform_outputs_get+0xc6>
 800f13a:	bf00      	nop
 800f13c:	a1c00100 	.word	0xa1c00100

0800f140 <ai_platform_network_create>:
 800f140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f144:	b083      	sub	sp, #12
 800f146:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800f14a:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800f14e:	b320      	cbz	r0, 800f19a <ai_platform_network_create+0x5a>
 800f150:	6002      	str	r2, [r0, #0]
 800f152:	4616      	mov	r6, r2
 800f154:	461f      	mov	r7, r3
 800f156:	4604      	mov	r4, r0
 800f158:	f000 f924 	bl	800f3a4 <core_init>
 800f15c:	b970      	cbnz	r0, 800f17c <ai_platform_network_create+0x3c>
 800f15e:	2530      	movs	r5, #48	@ 0x30
 800f160:	2300      	movs	r3, #0
 800f162:	6023      	str	r3, [r4, #0]
 800f164:	2410      	movs	r4, #16
 800f166:	464a      	mov	r2, r9
 800f168:	4641      	mov	r1, r8
 800f16a:	4638      	mov	r0, r7
 800f16c:	f002 fd64 	bl	8011c38 <ai_version_get>
 800f170:	60b0      	str	r0, [r6, #8]
 800f172:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800f176:	b003      	add	sp, #12
 800f178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f17c:	2200      	movs	r2, #0
 800f17e:	4641      	mov	r1, r8
 800f180:	4638      	mov	r0, r7
 800f182:	f002 fd59 	bl	8011c38 <ai_version_get>
 800f186:	4605      	mov	r5, r0
 800f188:	2200      	movs	r2, #0
 800f18a:	2105      	movs	r1, #5
 800f18c:	2001      	movs	r0, #1
 800f18e:	f002 fd53 	bl	8011c38 <ai_version_get>
 800f192:	4285      	cmp	r5, r0
 800f194:	d008      	beq.n	800f1a8 <ai_platform_network_create+0x68>
 800f196:	2501      	movs	r5, #1
 800f198:	e7e2      	b.n	800f160 <ai_platform_network_create+0x20>
 800f19a:	2510      	movs	r5, #16
 800f19c:	462c      	mov	r4, r5
 800f19e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800f1a2:	b003      	add	sp, #12
 800f1a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1a8:	4b05      	ldr	r3, [pc, #20]	@ (800f1c0 <ai_platform_network_create+0x80>)
 800f1aa:	a801      	add	r0, sp, #4
 800f1ac:	9301      	str	r3, [sp, #4]
 800f1ae:	f000 f90d 	bl	800f3cc <ai_check_custom_types>
 800f1b2:	b110      	cbz	r0, 800f1ba <ai_platform_network_create+0x7a>
 800f1b4:	2400      	movs	r4, #0
 800f1b6:	4625      	mov	r5, r4
 800f1b8:	e7d5      	b.n	800f166 <ai_platform_network_create+0x26>
 800f1ba:	2502      	movs	r5, #2
 800f1bc:	e7d0      	b.n	800f160 <ai_platform_network_create+0x20>
 800f1be:	bf00      	nop
 800f1c0:	84048403 	.word	0x84048403

0800f1c4 <ai_platform_network_init>:
 800f1c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1c8:	4a5c      	ldr	r2, [pc, #368]	@ (800f33c <ai_platform_network_init+0x178>)
 800f1ca:	460c      	mov	r4, r1
 800f1cc:	6801      	ldr	r1, [r0, #0]
 800f1ce:	438a      	bics	r2, r1
 800f1d0:	d133      	bne.n	800f23a <ai_platform_network_init+0x76>
 800f1d2:	4605      	mov	r5, r0
 800f1d4:	2c00      	cmp	r4, #0
 800f1d6:	f000 8093 	beq.w	800f300 <ai_platform_network_init+0x13c>
 800f1da:	f8d4 b000 	ldr.w	fp, [r4]
 800f1de:	4a58      	ldr	r2, [pc, #352]	@ (800f340 <ai_platform_network_init+0x17c>)
 800f1e0:	4593      	cmp	fp, r2
 800f1e2:	d10f      	bne.n	800f204 <ai_platform_network_init+0x40>
 800f1e4:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 800f1e8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f1ec:	4b53      	ldr	r3, [pc, #332]	@ (800f33c <ai_platform_network_init+0x178>)
 800f1ee:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 800f1f2:	0c32      	lsrs	r2, r6, #16
 800f1f4:	4299      	cmp	r1, r3
 800f1f6:	d02c      	beq.n	800f252 <ai_platform_network_init+0x8e>
 800f1f8:	2303      	movs	r3, #3
 800f1fa:	462c      	mov	r4, r5
 800f1fc:	612b      	str	r3, [r5, #16]
 800f1fe:	4620      	mov	r0, r4
 800f200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f204:	4627      	mov	r7, r4
 800f206:	2101      	movs	r1, #1
 800f208:	6864      	ldr	r4, [r4, #4]
 800f20a:	4638      	mov	r0, r7
 800f20c:	f107 081c 	add.w	r8, r7, #28
 800f210:	f7ff fda8 	bl	800ed64 <ai_buffer_get_size>
 800f214:	4606      	mov	r6, r0
 800f216:	2101      	movs	r1, #1
 800f218:	4640      	mov	r0, r8
 800f21a:	f8d7 9020 	ldr.w	r9, [r7, #32]
 800f21e:	f7ff fda1 	bl	800ed64 <ai_buffer_get_size>
 800f222:	b976      	cbnz	r6, 800f242 <ai_platform_network_init+0x7e>
 800f224:	2800      	cmp	r0, #0
 800f226:	d150      	bne.n	800f2ca <ai_platform_network_init+0x106>
 800f228:	4680      	mov	r8, r0
 800f22a:	4686      	mov	lr, r0
 800f22c:	4606      	mov	r6, r0
 800f22e:	4607      	mov	r7, r0
 800f230:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800f234:	6829      	ldr	r1, [r5, #0]
 800f236:	0436      	lsls	r6, r6, #16
 800f238:	e7d8      	b.n	800f1ec <ai_platform_network_init+0x28>
 800f23a:	2400      	movs	r4, #0
 800f23c:	4620      	mov	r0, r4
 800f23e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f242:	2800      	cmp	r0, #0
 800f244:	d13b      	bne.n	800f2be <ai_platform_network_init+0xfa>
 800f246:	4680      	mov	r8, r0
 800f248:	4686      	mov	lr, r0
 800f24a:	2c00      	cmp	r4, #0
 800f24c:	d05e      	beq.n	800f30c <ai_platform_network_init+0x148>
 800f24e:	2601      	movs	r6, #1
 800f250:	e7ee      	b.n	800f230 <ai_platform_network_init+0x6c>
 800f252:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 800f254:	4293      	cmp	r3, r2
 800f256:	4b3a      	ldr	r3, [pc, #232]	@ (800f340 <ai_platform_network_init+0x17c>)
 800f258:	d33e      	bcc.n	800f2d8 <ai_platform_network_init+0x114>
 800f25a:	459b      	cmp	fp, r3
 800f25c:	d03e      	beq.n	800f2dc <ai_platform_network_init+0x118>
 800f25e:	b1a2      	cbz	r2, 800f28a <ai_platform_network_init+0xc6>
 800f260:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800f264:	f04f 0c00 	mov.w	ip, #0
 800f268:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800f26c:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 800f26e:	eb07 0b0c 	add.w	fp, r7, ip
 800f272:	4464      	add	r4, ip
 800f274:	f10c 0c1c 	add.w	ip, ip, #28
 800f278:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800f27c:	45cc      	cmp	ip, r9
 800f27e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f280:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 800f284:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f288:	d1f0      	bne.n	800f26c <ai_platform_network_init+0xa8>
 800f28a:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800f28c:	622e      	str	r6, [r5, #32]
 800f28e:	4553      	cmp	r3, sl
 800f290:	d34b      	bcc.n	800f32a <ai_platform_network_init+0x166>
 800f292:	f1ba 0f00 	cmp.w	sl, #0
 800f296:	d025      	beq.n	800f2e4 <ai_platform_network_init+0x120>
 800f298:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800f29c:	2700      	movs	r7, #0
 800f29e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800f2a2:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 800f2a4:	eb08 0607 	add.w	r6, r8, r7
 800f2a8:	443c      	add	r4, r7
 800f2aa:	371c      	adds	r7, #28
 800f2ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f2ae:	4557      	cmp	r7, sl
 800f2b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2b2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f2b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f2ba:	d1f2      	bne.n	800f2a2 <ai_platform_network_init+0xde>
 800f2bc:	e012      	b.n	800f2e4 <ai_platform_network_init+0x120>
 800f2be:	f1b9 0f00 	cmp.w	r9, #0
 800f2c2:	d015      	beq.n	800f2f0 <ai_platform_network_init+0x12c>
 800f2c4:	f04f 0e01 	mov.w	lr, #1
 800f2c8:	e7bf      	b.n	800f24a <ai_platform_network_init+0x86>
 800f2ca:	f1b9 0f00 	cmp.w	r9, #0
 800f2ce:	d00f      	beq.n	800f2f0 <ai_platform_network_init+0x12c>
 800f2d0:	f04f 0e01 	mov.w	lr, #1
 800f2d4:	4637      	mov	r7, r6
 800f2d6:	e7ab      	b.n	800f230 <ai_platform_network_init+0x6c>
 800f2d8:	459b      	cmp	fp, r3
 800f2da:	d11e      	bne.n	800f31a <ai_platform_network_init+0x156>
 800f2dc:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 800f2e0:	e9c5 6708 	strd	r6, r7, [r5, #32]
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 800f2ea:	f000 f897 	bl	800f41c <ai_layers_init_all>
 800f2ee:	e783      	b.n	800f1f8 <ai_platform_network_init+0x34>
 800f2f0:	2213      	movs	r2, #19
 800f2f2:	2110      	movs	r1, #16
 800f2f4:	f105 000c 	add.w	r0, r5, #12
 800f2f8:	2400      	movs	r4, #0
 800f2fa:	f000 f85b 	bl	800f3b4 <core_set_error>
 800f2fe:	e77e      	b.n	800f1fe <ai_platform_network_init+0x3a>
 800f300:	2211      	movs	r2, #17
 800f302:	2110      	movs	r1, #16
 800f304:	300c      	adds	r0, #12
 800f306:	f000 f855 	bl	800f3b4 <core_set_error>
 800f30a:	e778      	b.n	800f1fe <ai_platform_network_init+0x3a>
 800f30c:	2212      	movs	r2, #18
 800f30e:	2110      	movs	r1, #16
 800f310:	f105 000c 	add.w	r0, r5, #12
 800f314:	f000 f84e 	bl	800f3b4 <core_set_error>
 800f318:	e771      	b.n	800f1fe <ai_platform_network_init+0x3a>
 800f31a:	2212      	movs	r2, #18
 800f31c:	2116      	movs	r1, #22
 800f31e:	f105 000c 	add.w	r0, r5, #12
 800f322:	2400      	movs	r4, #0
 800f324:	f000 f846 	bl	800f3b4 <core_set_error>
 800f328:	e769      	b.n	800f1fe <ai_platform_network_init+0x3a>
 800f32a:	2213      	movs	r2, #19
 800f32c:	2116      	movs	r1, #22
 800f32e:	f105 000c 	add.w	r0, r5, #12
 800f332:	2400      	movs	r4, #0
 800f334:	f000 f83e 	bl	800f3b4 <core_set_error>
 800f338:	e761      	b.n	800f1fe <ai_platform_network_init+0x3a>
 800f33a:	bf00      	nop
 800f33c:	a1c00100 	.word	0xa1c00100
 800f340:	a1facade 	.word	0xa1facade

0800f344 <ai_platform_network_post_init>:
 800f344:	b538      	push	{r3, r4, r5, lr}
 800f346:	4b16      	ldr	r3, [pc, #88]	@ (800f3a0 <ai_platform_network_post_init+0x5c>)
 800f348:	6802      	ldr	r2, [r0, #0]
 800f34a:	ea02 0103 	and.w	r1, r2, r3
 800f34e:	4393      	bics	r3, r2
 800f350:	d108      	bne.n	800f364 <ai_platform_network_post_init+0x20>
 800f352:	6903      	ldr	r3, [r0, #16]
 800f354:	4604      	mov	r4, r0
 800f356:	f013 0502 	ands.w	r5, r3, #2
 800f35a:	d005      	beq.n	800f368 <ai_platform_network_post_init+0x24>
 800f35c:	428a      	cmp	r2, r1
 800f35e:	d00a      	beq.n	800f376 <ai_platform_network_post_init+0x32>
 800f360:	2001      	movs	r0, #1
 800f362:	bd38      	pop	{r3, r4, r5, pc}
 800f364:	2000      	movs	r0, #0
 800f366:	bd38      	pop	{r3, r4, r5, pc}
 800f368:	2210      	movs	r2, #16
 800f36a:	2111      	movs	r1, #17
 800f36c:	300c      	adds	r0, #12
 800f36e:	f000 f821 	bl	800f3b4 <core_set_error>
 800f372:	4628      	mov	r0, r5
 800f374:	bd38      	pop	{r3, r4, r5, pc}
 800f376:	f000 f85f 	bl	800f438 <ai_layers_post_init_all>
 800f37a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d0ef      	beq.n	800f360 <ai_platform_network_post_init+0x1c>
 800f380:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800f382:	e008      	b.n	800f396 <ai_platform_network_post_init+0x52>
 800f384:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800f388:	4798      	blx	r3
 800f38a:	692b      	ldr	r3, [r5, #16]
 800f38c:	42ab      	cmp	r3, r5
 800f38e:	461d      	mov	r5, r3
 800f390:	d0e6      	beq.n	800f360 <ai_platform_network_post_init+0x1c>
 800f392:	2b00      	cmp	r3, #0
 800f394:	d0e4      	beq.n	800f360 <ai_platform_network_post_init+0x1c>
 800f396:	4629      	mov	r1, r5
 800f398:	2000      	movs	r0, #0
 800f39a:	2d00      	cmp	r5, #0
 800f39c:	d1f2      	bne.n	800f384 <ai_platform_network_post_init+0x40>
 800f39e:	e7df      	b.n	800f360 <ai_platform_network_post_init+0x1c>
 800f3a0:	a1c00100 	.word	0xa1c00100

0800f3a4 <core_init>:
 800f3a4:	2001      	movs	r0, #1
 800f3a6:	4770      	bx	lr

0800f3a8 <core_get_error>:
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	6800      	ldr	r0, [r0, #0]
 800f3ae:	601a      	str	r2, [r3, #0]
 800f3b0:	4770      	bx	lr
 800f3b2:	bf00      	nop

0800f3b4 <core_set_error>:
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	7800      	ldrb	r0, [r0, #0]
 800f3b8:	b108      	cbz	r0, 800f3be <core_set_error+0xa>
 800f3ba:	2000      	movs	r0, #0
 800f3bc:	4770      	bx	lr
 800f3be:	7019      	strb	r1, [r3, #0]
 800f3c0:	2001      	movs	r0, #1
 800f3c2:	6819      	ldr	r1, [r3, #0]
 800f3c4:	f362 211f 	bfi	r1, r2, #8, #24
 800f3c8:	6019      	str	r1, [r3, #0]
 800f3ca:	4770      	bx	lr

0800f3cc <ai_check_custom_types>:
 800f3cc:	b082      	sub	sp, #8
 800f3ce:	4b12      	ldr	r3, [pc, #72]	@ (800f418 <ai_check_custom_types+0x4c>)
 800f3d0:	9301      	str	r3, [sp, #4]
 800f3d2:	b118      	cbz	r0, 800f3dc <ai_check_custom_types+0x10>
 800f3d4:	7803      	ldrb	r3, [r0, #0]
 800f3d6:	2b03      	cmp	r3, #3
 800f3d8:	d002      	beq.n	800f3e0 <ai_check_custom_types+0x14>
 800f3da:	2000      	movs	r0, #0
 800f3dc:	b002      	add	sp, #8
 800f3de:	4770      	bx	lr
 800f3e0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d004      	beq.n	800f3f2 <ai_check_custom_types+0x26>
 800f3e8:	2001      	movs	r0, #1
 800f3ea:	f080 0001 	eor.w	r0, r0, #1
 800f3ee:	b002      	add	sp, #8
 800f3f0:	4770      	bx	lr
 800f3f2:	7842      	ldrb	r2, [r0, #1]
 800f3f4:	3001      	adds	r0, #1
 800f3f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d1f4      	bne.n	800f3e8 <ai_check_custom_types+0x1c>
 800f3fe:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800f402:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f406:	429a      	cmp	r2, r3
 800f408:	d1ee      	bne.n	800f3e8 <ai_check_custom_types+0x1c>
 800f40a:	7842      	ldrb	r2, [r0, #1]
 800f40c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f410:	429a      	cmp	r2, r3
 800f412:	d1e9      	bne.n	800f3e8 <ai_check_custom_types+0x1c>
 800f414:	2000      	movs	r0, #0
 800f416:	e7e8      	b.n	800f3ea <ai_check_custom_types+0x1e>
 800f418:	84048403 	.word	0x84048403

0800f41c <ai_layers_init_all>:
 800f41c:	2100      	movs	r1, #0
 800f41e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f420:	b13b      	cbz	r3, 800f432 <ai_layers_init_all+0x16>
 800f422:	691a      	ldr	r2, [r3, #16]
 800f424:	3101      	adds	r1, #1
 800f426:	60d8      	str	r0, [r3, #12]
 800f428:	429a      	cmp	r2, r3
 800f42a:	4613      	mov	r3, r2
 800f42c:	d001      	beq.n	800f432 <ai_layers_init_all+0x16>
 800f42e:	2a00      	cmp	r2, #0
 800f430:	d1f6      	bne.n	800f420 <ai_layers_init_all+0x4>
 800f432:	4608      	mov	r0, r1
 800f434:	4770      	bx	lr
 800f436:	bf00      	nop

0800f438 <ai_layers_post_init_all>:
 800f438:	b538      	push	{r3, r4, r5, lr}
 800f43a:	2500      	movs	r5, #0
 800f43c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800f43e:	b16c      	cbz	r4, 800f45c <ai_layers_post_init_all+0x24>
 800f440:	6863      	ldr	r3, [r4, #4]
 800f442:	07db      	lsls	r3, r3, #31
 800f444:	d504      	bpl.n	800f450 <ai_layers_post_init_all+0x18>
 800f446:	6a23      	ldr	r3, [r4, #32]
 800f448:	4620      	mov	r0, r4
 800f44a:	b10b      	cbz	r3, 800f450 <ai_layers_post_init_all+0x18>
 800f44c:	3501      	adds	r5, #1
 800f44e:	4798      	blx	r3
 800f450:	6923      	ldr	r3, [r4, #16]
 800f452:	42a3      	cmp	r3, r4
 800f454:	461c      	mov	r4, r3
 800f456:	d001      	beq.n	800f45c <ai_layers_post_init_all+0x24>
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d1f0      	bne.n	800f43e <ai_layers_post_init_all+0x6>
 800f45c:	4628      	mov	r0, r5
 800f45e:	bd38      	pop	{r3, r4, r5, pc}

0800f460 <forward_conv2d_if32of32wf32_nl_pool>:
 800f460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f464:	f8d0 c018 	ldr.w	ip, [r0, #24]
 800f468:	b0c3      	sub	sp, #268	@ 0x10c
 800f46a:	f8bc 3000 	ldrh.w	r3, [ip]
 800f46e:	9321      	str	r3, [sp, #132]	@ 0x84
 800f470:	2b00      	cmp	r3, #0
 800f472:	f000 813c 	beq.w	800f6ee <forward_conv2d_if32of32wf32_nl_pool+0x28e>
 800f476:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800f47a:	4604      	mov	r4, r0
 800f47c:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800f480:	f1bb 0f00 	cmp.w	fp, #0
 800f484:	d001      	beq.n	800f48a <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 800f486:	f8db b000 	ldr.w	fp, [fp]
 800f48a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f48c:	2a01      	cmp	r2, #1
 800f48e:	f000 812d 	beq.w	800f6ec <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 800f492:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800f496:	f1ba 0f00 	cmp.w	sl, #0
 800f49a:	d001      	beq.n	800f4a0 <forward_conv2d_if32of32wf32_nl_pool+0x40>
 800f49c:	f8da a000 	ldr.w	sl, [sl]
 800f4a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f4a2:	2a02      	cmp	r2, #2
 800f4a4:	f000 8122 	beq.w	800f6ec <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 800f4a8:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800f4ac:	8b1b      	ldrh	r3, [r3, #24]
 800f4ae:	f1b8 0f00 	cmp.w	r8, #0
 800f4b2:	f000 812f 	beq.w	800f714 <forward_conv2d_if32of32wf32_nl_pool+0x2b4>
 800f4b6:	2b01      	cmp	r3, #1
 800f4b8:	f8d8 2000 	ldr.w	r2, [r8]
 800f4bc:	f240 8130 	bls.w	800f720 <forward_conv2d_if32of32wf32_nl_pool+0x2c0>
 800f4c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f4c4:	9340      	str	r3, [sp, #256]	@ 0x100
 800f4c6:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800f4ca:	f8db 100c 	ldr.w	r1, [fp, #12]
 800f4ce:	f8da 000c 	ldr.w	r0, [sl, #12]
 800f4d2:	9122      	str	r1, [sp, #136]	@ 0x88
 800f4d4:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800f4d8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 800f4dc:	9130      	str	r1, [sp, #192]	@ 0xc0
 800f4de:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800f4e2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f4e4:	9131      	str	r1, [sp, #196]	@ 0xc4
 800f4e6:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800f4ea:	f8de 7004 	ldr.w	r7, [lr, #4]
 800f4ee:	9132      	str	r1, [sp, #200]	@ 0xc8
 800f4f0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800f4f4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800f4f6:	9133      	str	r1, [sp, #204]	@ 0xcc
 800f4f8:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800f4fc:	681e      	ldr	r6, [r3, #0]
 800f4fe:	9123      	str	r1, [sp, #140]	@ 0x8c
 800f500:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800f504:	972a      	str	r7, [sp, #168]	@ 0xa8
 800f506:	9124      	str	r1, [sp, #144]	@ 0x90
 800f508:	f8de 7008 	ldr.w	r7, [lr, #8]
 800f50c:	9628      	str	r6, [sp, #160]	@ 0xa0
 800f50e:	972f      	str	r7, [sp, #188]	@ 0xbc
 800f510:	e9d4 950a 	ldrd	r9, r5, [r4, #40]	@ 0x28
 800f514:	fa1f f189 	uxth.w	r1, r9
 800f518:	9527      	str	r5, [sp, #156]	@ 0x9c
 800f51a:	685d      	ldr	r5, [r3, #4]
 800f51c:	9134      	str	r1, [sp, #208]	@ 0xd0
 800f51e:	9529      	str	r5, [sp, #164]	@ 0xa4
 800f520:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 800f524:	f8bd 109c 	ldrh.w	r1, [sp, #156]	@ 0x9c
 800f528:	9135      	str	r1, [sp, #212]	@ 0xd4
 800f52a:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	@ 0xa0
 800f52e:	9136      	str	r1, [sp, #216]	@ 0xd8
 800f530:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 800f534:	9137      	str	r1, [sp, #220]	@ 0xdc
 800f536:	6899      	ldr	r1, [r3, #8]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	912d      	str	r1, [sp, #180]	@ 0xb4
 800f53c:	932e      	str	r3, [sp, #184]	@ 0xb8
 800f53e:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 800f542:	9338      	str	r3, [sp, #224]	@ 0xe0
 800f544:	b2ab      	uxth	r3, r5
 800f546:	9339      	str	r3, [sp, #228]	@ 0xe4
 800f548:	b2b3      	uxth	r3, r6
 800f54a:	933a      	str	r3, [sp, #232]	@ 0xe8
 800f54c:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	@ 0xa8
 800f550:	9325      	str	r3, [sp, #148]	@ 0x94
 800f552:	b23b      	sxth	r3, r7
 800f554:	9326      	str	r3, [sp, #152]	@ 0x98
 800f556:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 800f55a:	933b      	str	r3, [sp, #236]	@ 0xec
 800f55c:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 800f560:	933c      	str	r3, [sp, #240]	@ 0xf0
 800f562:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 800f566:	933d      	str	r3, [sp, #244]	@ 0xf4
 800f568:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f56a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f56e:	933e      	str	r3, [sp, #248]	@ 0xf8
 800f570:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f572:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f576:	933f      	str	r3, [sp, #252]	@ 0xfc
 800f578:	6a23      	ldr	r3, [r4, #32]
 800f57a:	9322      	str	r3, [sp, #136]	@ 0x88
 800f57c:	f1b8 0f00 	cmp.w	r8, #0
 800f580:	f000 80b7 	beq.w	800f6f2 <forward_conv2d_if32of32wf32_nl_pool+0x292>
 800f584:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f000 80ba 	beq.w	800f702 <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 800f58e:	9221      	str	r2, [sp, #132]	@ 0x84
 800f590:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f594:	689b      	ldr	r3, [r3, #8]
 800f596:	9322      	str	r3, [sp, #136]	@ 0x88
 800f598:	f002 fb26 	bl	8011be8 <ai_array_get_byte_size>
 800f59c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800f5a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f5a2:	902c      	str	r0, [sp, #176]	@ 0xb0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	f000 80be 	beq.w	800f726 <forward_conv2d_if32of32wf32_nl_pool+0x2c6>
 800f5aa:	9241      	str	r2, [sp, #260]	@ 0x104
 800f5ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5b0:	f002 fb1a 	bl	8011be8 <ai_array_get_byte_size>
 800f5b4:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800f5b8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f5ba:	f8bc 3000 	ldrh.w	r3, [ip]
 800f5be:	902b      	str	r0, [sp, #172]	@ 0xac
 800f5c0:	9321      	str	r3, [sp, #132]	@ 0x84
 800f5c2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800f5c4:	b2ad      	uxth	r5, r5
 800f5c6:	b2b6      	uxth	r6, r6
 800f5c8:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 800f5ca:	f107 38ff 	add.w	r8, r7, #4294967295
 800f5ce:	3d01      	subs	r5, #1
 800f5d0:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 800f5d2:	3e01      	subs	r6, #1
 800f5d4:	fa1f f989 	uxth.w	r9, r9
 800f5d8:	f8bd e09c 	ldrh.w	lr, [sp, #156]	@ 0x9c
 800f5dc:	fb15 7508 	smlabb	r5, r5, r8, r7
 800f5e0:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 800f5e2:	699b      	ldr	r3, [r3, #24]
 800f5e4:	fa0f f885 	sxth.w	r8, r5
 800f5e8:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 800f5ea:	f8db 0018 	ldr.w	r0, [fp, #24]
 800f5ee:	3d01      	subs	r5, #1
 800f5f0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800f5f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f5f6:	fb16 7605 	smlabb	r6, r6, r5, r7
 800f5fa:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 800f5fc:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 800f5fe:	2b03      	cmp	r3, #3
 800f600:	eba5 0508 	sub.w	r5, r5, r8
 800f604:	b236      	sxth	r6, r6
 800f606:	f8da 1018 	ldr.w	r1, [sl, #24]
 800f60a:	fa15 f587 	uxtah	r5, r5, r7
 800f60e:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800f610:	6992      	ldr	r2, [r2, #24]
 800f612:	fa15 f587 	uxtah	r5, r5, r7
 800f616:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 800f618:	f8d4 a05c 	ldr.w	sl, [r4, #92]	@ 0x5c
 800f61c:	6880      	ldr	r0, [r0, #8]
 800f61e:	6889      	ldr	r1, [r1, #8]
 800f620:	6892      	ldr	r2, [r2, #8]
 800f622:	fb95 f5f9 	sdiv	r5, r5, r9
 800f626:	eba7 0906 	sub.w	r9, r7, r6
 800f62a:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 800f62c:	f105 0501 	add.w	r5, r5, #1
 800f630:	fa19 f987 	uxtah	r9, r9, r7
 800f634:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
 800f636:	b22d      	sxth	r5, r5
 800f638:	fa19 f987 	uxtah	r9, r9, r7
 800f63c:	fb99 f9fe 	sdiv	r9, r9, lr
 800f640:	f109 0e01 	add.w	lr, r9, #1
 800f644:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 800f648:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 800f64c:	d94e      	bls.n	800f6ec <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 800f64e:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800f652:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 800f656:	f1bc 0f00 	cmp.w	ip, #0
 800f65a:	d06f      	beq.n	800f73c <forward_conv2d_if32of32wf32_nl_pool+0x2dc>
 800f65c:	f8dc 7000 	ldr.w	r7, [ip]
 800f660:	b10f      	cbz	r7, 800f666 <forward_conv2d_if32of32wf32_nl_pool+0x206>
 800f662:	69bf      	ldr	r7, [r7, #24]
 800f664:	68bf      	ldr	r7, [r7, #8]
 800f666:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 800f668:	9513      	str	r5, [sp, #76]	@ 0x4c
 800f66a:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f66c:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 800f66e:	960e      	str	r6, [sp, #56]	@ 0x38
 800f670:	931e      	str	r3, [sp, #120]	@ 0x78
 800f672:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800f674:	931d      	str	r3, [sp, #116]	@ 0x74
 800f676:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 800f678:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 800f67c:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 800f67e:	fa0f f48e 	sxth.w	r4, lr
 800f682:	e9cd a319 	strd	sl, r3, [sp, #100]	@ 0x64
 800f686:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800f688:	9318      	str	r3, [sp, #96]	@ 0x60
 800f68a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800f68c:	9317      	str	r3, [sp, #92]	@ 0x5c
 800f68e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f690:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
 800f694:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800f696:	9312      	str	r3, [sp, #72]	@ 0x48
 800f698:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 800f69a:	9311      	str	r3, [sp, #68]	@ 0x44
 800f69c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800f69e:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 800f6a2:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800f6a4:	930d      	str	r3, [sp, #52]	@ 0x34
 800f6a6:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800f6a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6aa:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 800f6ac:	9414      	str	r4, [sp, #80]	@ 0x50
 800f6ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6b0:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800f6b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6b4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800f6b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6b8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800f6ba:	9308      	str	r3, [sp, #32]
 800f6bc:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800f6be:	9307      	str	r3, [sp, #28]
 800f6c0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800f6c2:	9306      	str	r3, [sp, #24]
 800f6c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f6c6:	9305      	str	r3, [sp, #20]
 800f6c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f6ca:	9304      	str	r3, [sp, #16]
 800f6cc:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800f6ce:	9303      	str	r3, [sp, #12]
 800f6d0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800f6d2:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800f6d6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800f6da:	465b      	mov	r3, fp
 800f6dc:	69a4      	ldr	r4, [r4, #24]
 800f6de:	68a4      	ldr	r4, [r4, #8]
 800f6e0:	9400      	str	r4, [sp, #0]
 800f6e2:	f000 f9cf 	bl	800fa84 <forward_lite_conv2d_if32of32wf32_pool>
 800f6e6:	b043      	add	sp, #268	@ 0x10c
 800f6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	deff      	udf	#255	@ 0xff
 800f6f2:	b10b      	cbz	r3, 800f6f8 <forward_conv2d_if32of32wf32_nl_pool+0x298>
 800f6f4:	689b      	ldr	r3, [r3, #8]
 800f6f6:	9322      	str	r3, [sp, #136]	@ 0x88
 800f6f8:	2301      	movs	r3, #1
 800f6fa:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 800f6fe:	932b      	str	r3, [sp, #172]	@ 0xac
 800f700:	e75f      	b.n	800f5c2 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 800f702:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f704:	b10b      	cbz	r3, 800f70a <forward_conv2d_if32of32wf32_nl_pool+0x2aa>
 800f706:	689b      	ldr	r3, [r3, #8]
 800f708:	9322      	str	r3, [sp, #136]	@ 0x88
 800f70a:	2301      	movs	r3, #1
 800f70c:	2100      	movs	r1, #0
 800f70e:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
 800f712:	e756      	b.n	800f5c2 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 800f714:	2b01      	cmp	r3, #1
 800f716:	d90e      	bls.n	800f736 <forward_conv2d_if32of32wf32_nl_pool+0x2d6>
 800f718:	4642      	mov	r2, r8
 800f71a:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
 800f71e:	e6d4      	b.n	800f4ca <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 800f720:	2300      	movs	r3, #0
 800f722:	9340      	str	r3, [sp, #256]	@ 0x100
 800f724:	e6cf      	b.n	800f4c6 <forward_conv2d_if32of32wf32_nl_pool+0x66>
 800f726:	2301      	movs	r3, #1
 800f728:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800f72c:	932b      	str	r3, [sp, #172]	@ 0xac
 800f72e:	f8bc 3000 	ldrh.w	r3, [ip]
 800f732:	9321      	str	r3, [sp, #132]	@ 0x84
 800f734:	e745      	b.n	800f5c2 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 800f736:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f73a:	deff      	udf	#255	@ 0xff
 800f73c:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800f740:	deff      	udf	#255	@ 0xff
 800f742:	bf00      	nop

0800f744 <forward_dense>:
 800f744:	6982      	ldr	r2, [r0, #24]
 800f746:	8813      	ldrh	r3, [r2, #0]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d043      	beq.n	800f7d4 <forward_dense+0x90>
 800f74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f750:	6855      	ldr	r5, [r2, #4]
 800f752:	b08e      	sub	sp, #56	@ 0x38
 800f754:	6869      	ldr	r1, [r5, #4]
 800f756:	b101      	cbz	r1, 800f75a <forward_dense+0x16>
 800f758:	6809      	ldr	r1, [r1, #0]
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d069      	beq.n	800f832 <forward_dense+0xee>
 800f75e:	692a      	ldr	r2, [r5, #16]
 800f760:	b102      	cbz	r2, 800f764 <forward_dense+0x20>
 800f762:	6812      	ldr	r2, [r2, #0]
 800f764:	2b02      	cmp	r3, #2
 800f766:	d061      	beq.n	800f82c <forward_dense+0xe8>
 800f768:	69ec      	ldr	r4, [r5, #28]
 800f76a:	2c00      	cmp	r4, #0
 800f76c:	d057      	beq.n	800f81e <forward_dense+0xda>
 800f76e:	8b2e      	ldrh	r6, [r5, #24]
 800f770:	6820      	ldr	r0, [r4, #0]
 800f772:	2e01      	cmp	r6, #1
 800f774:	d955      	bls.n	800f822 <forward_dense+0xde>
 800f776:	6864      	ldr	r4, [r4, #4]
 800f778:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800f77c:	2b03      	cmp	r3, #3
 800f77e:	68d0      	ldr	r0, [r2, #12]
 800f780:	68cf      	ldr	r7, [r1, #12]
 800f782:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800f786:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800f78a:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 800f78e:	f8d9 0000 	ldr.w	r0, [r9]
 800f792:	fb06 f807 	mul.w	r8, r6, r7
 800f796:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 800f79a:	d044      	beq.n	800f826 <forward_dense+0xe2>
 800f79c:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 800f79e:	b11d      	cbz	r5, 800f7a8 <forward_dense+0x64>
 800f7a0:	682d      	ldr	r5, [r5, #0]
 800f7a2:	b10d      	cbz	r5, 800f7a8 <forward_dense+0x64>
 800f7a4:	69ab      	ldr	r3, [r5, #24]
 800f7a6:	689d      	ldr	r5, [r3, #8]
 800f7a8:	6992      	ldr	r2, [r2, #24]
 800f7aa:	698b      	ldr	r3, [r1, #24]
 800f7ac:	6890      	ldr	r0, [r2, #8]
 800f7ae:	6899      	ldr	r1, [r3, #8]
 800f7b0:	b10c      	cbz	r4, 800f7b6 <forward_dense+0x72>
 800f7b2:	69a3      	ldr	r3, [r4, #24]
 800f7b4:	689c      	ldr	r4, [r3, #8]
 800f7b6:	4b20      	ldr	r3, [pc, #128]	@ (800f838 <forward_dense+0xf4>)
 800f7b8:	459c      	cmp	ip, r3
 800f7ba:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800f7be:	d023      	beq.n	800f808 <forward_dense+0xc4>
 800f7c0:	4e1e      	ldr	r6, [pc, #120]	@ (800f83c <forward_dense+0xf8>)
 800f7c2:	45b4      	cmp	ip, r6
 800f7c4:	d015      	beq.n	800f7f2 <forward_dense+0xae>
 800f7c6:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 800f7ca:	459c      	cmp	ip, r3
 800f7cc:	d004      	beq.n	800f7d8 <forward_dense+0x94>
 800f7ce:	b00e      	add	sp, #56	@ 0x38
 800f7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	deff      	udf	#255	@ 0xff
 800f7d8:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800f7dc:	a807      	add	r0, sp, #28
 800f7de:	9209      	str	r2, [sp, #36]	@ 0x24
 800f7e0:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 800f7e4:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 800f7e8:	f001 fb98 	bl	8010f1c <forward_lite_dense_if32of32wf32>
 800f7ec:	b00e      	add	sp, #56	@ 0x38
 800f7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7f2:	464b      	mov	r3, r9
 800f7f4:	9500      	str	r5, [sp, #0]
 800f7f6:	e9cd e803 	strd	lr, r8, [sp, #12]
 800f7fa:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800f7fe:	f001 fceb 	bl	80111d8 <forward_lite_dense_if32of32wf32_lut4>
 800f802:	b00e      	add	sp, #56	@ 0x38
 800f804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f808:	464b      	mov	r3, r9
 800f80a:	9500      	str	r5, [sp, #0]
 800f80c:	e9cd e803 	strd	lr, r8, [sp, #12]
 800f810:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800f814:	f001 fe0a 	bl	801142c <forward_lite_dense_if32of32wf32_lut8>
 800f818:	b00e      	add	sp, #56	@ 0x38
 800f81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f81e:	4620      	mov	r0, r4
 800f820:	e7aa      	b.n	800f778 <forward_dense+0x34>
 800f822:	2400      	movs	r4, #0
 800f824:	e7a8      	b.n	800f778 <forward_dense+0x34>
 800f826:	2300      	movs	r3, #0
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	deff      	udf	#255	@ 0xff
 800f82c:	2300      	movs	r3, #0
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	deff      	udf	#255	@ 0xff
 800f832:	2300      	movs	r3, #0
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	deff      	udf	#255	@ 0xff
 800f838:	00d01040 	.word	0x00d01040
 800f83c:	00f01040 	.word	0x00f01040

0800f840 <forward_relu>:
 800f840:	6982      	ldr	r2, [r0, #24]
 800f842:	8813      	ldrh	r3, [r2, #0]
 800f844:	b323      	cbz	r3, 800f890 <forward_relu+0x50>
 800f846:	6851      	ldr	r1, [r2, #4]
 800f848:	684a      	ldr	r2, [r1, #4]
 800f84a:	b102      	cbz	r2, 800f84e <forward_relu+0xe>
 800f84c:	6812      	ldr	r2, [r2, #0]
 800f84e:	2b01      	cmp	r3, #1
 800f850:	f000 8086 	beq.w	800f960 <forward_relu+0x120>
 800f854:	b470      	push	{r4, r5, r6}
 800f856:	690b      	ldr	r3, [r1, #16]
 800f858:	b103      	cbz	r3, 800f85c <forward_relu+0x1c>
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	69c6      	ldr	r6, [r0, #28]
 800f85e:	b1ce      	cbz	r6, 800f894 <forward_relu+0x54>
 800f860:	6871      	ldr	r1, [r6, #4]
 800f862:	6998      	ldr	r0, [r3, #24]
 800f864:	2901      	cmp	r1, #1
 800f866:	d03f      	beq.n	800f8e8 <forward_relu+0xa8>
 800f868:	6893      	ldr	r3, [r2, #8]
 800f86a:	6991      	ldr	r1, [r2, #24]
 800f86c:	0a1b      	lsrs	r3, r3, #8
 800f86e:	6880      	ldr	r0, [r0, #8]
 800f870:	6889      	ldr	r1, [r1, #8]
 800f872:	d06c      	beq.n	800f94e <forward_relu+0x10e>
 800f874:	68d5      	ldr	r5, [r2, #12]
 800f876:	2201      	movs	r2, #1
 800f878:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f87c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800f880:	429d      	cmp	r5, r3
 800f882:	fb04 f202 	mul.w	r2, r4, r2
 800f886:	d1f9      	bne.n	800f87c <forward_relu+0x3c>
 800f888:	68b3      	ldr	r3, [r6, #8]
 800f88a:	bc70      	pop	{r4, r5, r6}
 800f88c:	f000 bd04 	b.w	8010298 <forward_lite_nl_relu_generic_if32of32_kernel>
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	deff      	udf	#255	@ 0xff
 800f894:	6999      	ldr	r1, [r3, #24]
 800f896:	6893      	ldr	r3, [r2, #8]
 800f898:	6990      	ldr	r0, [r2, #24]
 800f89a:	0a1b      	lsrs	r3, r3, #8
 800f89c:	6889      	ldr	r1, [r1, #8]
 800f89e:	6884      	ldr	r4, [r0, #8]
 800f8a0:	d057      	beq.n	800f952 <forward_relu+0x112>
 800f8a2:	68d5      	ldr	r5, [r2, #12]
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f8aa:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800f8ae:	429d      	cmp	r5, r3
 800f8b0:	fb00 f202 	mul.w	r2, r0, r2
 800f8b4:	d1f9      	bne.n	800f8aa <forward_relu+0x6a>
 800f8b6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f8ba:	4413      	add	r3, r2
 800f8bc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800f8c0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800f8c4:	4294      	cmp	r4, r2
 800f8c6:	d80d      	bhi.n	800f8e4 <forward_relu+0xa4>
 800f8c8:	3204      	adds	r2, #4
 800f8ca:	3104      	adds	r1, #4
 800f8cc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800f968 <forward_relu+0x128>
 800f8d0:	4613      	mov	r3, r2
 800f8d2:	ed72 7a01 	vldmdb	r2!, {s15}
 800f8d6:	3b08      	subs	r3, #8
 800f8d8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800f8dc:	ed61 7a01 	vstmdb	r1!, {s15}
 800f8e0:	429c      	cmp	r4, r3
 800f8e2:	d9f5      	bls.n	800f8d0 <forward_relu+0x90>
 800f8e4:	bc70      	pop	{r4, r5, r6}
 800f8e6:	4770      	bx	lr
 800f8e8:	6993      	ldr	r3, [r2, #24]
 800f8ea:	6880      	ldr	r0, [r0, #8]
 800f8ec:	689c      	ldr	r4, [r3, #8]
 800f8ee:	6893      	ldr	r3, [r2, #8]
 800f8f0:	0a1b      	lsrs	r3, r3, #8
 800f8f2:	d030      	beq.n	800f956 <forward_relu+0x116>
 800f8f4:	68d5      	ldr	r5, [r2, #12]
 800f8f6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f8fa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f8fe:	429d      	cmp	r5, r3
 800f900:	fb02 f101 	mul.w	r1, r2, r1
 800f904:	d1f9      	bne.n	800f8fa <forward_relu+0xba>
 800f906:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 800f90a:	68b3      	ldr	r3, [r6, #8]
 800f90c:	440a      	add	r2, r1
 800f90e:	ed93 7a00 	vldr	s14, [r3]
 800f912:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f916:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800f91a:	429c      	cmp	r4, r3
 800f91c:	d8e2      	bhi.n	800f8e4 <forward_relu+0xa4>
 800f91e:	1d02      	adds	r2, r0, #4
 800f920:	3304      	adds	r3, #4
 800f922:	2000      	movs	r0, #0
 800f924:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f928:	1f19      	subs	r1, r3, #4
 800f92a:	3b08      	subs	r3, #8
 800f92c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f934:	d405      	bmi.n	800f942 <forward_relu+0x102>
 800f936:	429c      	cmp	r4, r3
 800f938:	f842 0d04 	str.w	r0, [r2, #-4]!
 800f93c:	d8d2      	bhi.n	800f8e4 <forward_relu+0xa4>
 800f93e:	460b      	mov	r3, r1
 800f940:	e7f0      	b.n	800f924 <forward_relu+0xe4>
 800f942:	429c      	cmp	r4, r3
 800f944:	ed62 7a01 	vstmdb	r2!, {s15}
 800f948:	d8cc      	bhi.n	800f8e4 <forward_relu+0xa4>
 800f94a:	460b      	mov	r3, r1
 800f94c:	e7ea      	b.n	800f924 <forward_relu+0xe4>
 800f94e:	2201      	movs	r2, #1
 800f950:	e79a      	b.n	800f888 <forward_relu+0x48>
 800f952:	4622      	mov	r2, r4
 800f954:	e7b8      	b.n	800f8c8 <forward_relu+0x88>
 800f956:	68b2      	ldr	r2, [r6, #8]
 800f958:	4623      	mov	r3, r4
 800f95a:	ed92 7a00 	vldr	s14, [r2]
 800f95e:	e7de      	b.n	800f91e <forward_relu+0xde>
 800f960:	2300      	movs	r3, #0
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	deff      	udf	#255	@ 0xff
 800f966:	bf00      	nop
 800f968:	00000000 	.word	0x00000000

0800f96c <forward_upsample_bilinear>:
 800f96c:	6983      	ldr	r3, [r0, #24]
 800f96e:	881a      	ldrh	r2, [r3, #0]
 800f970:	2a00      	cmp	r2, #0
 800f972:	d04f      	beq.n	800fa14 <forward_upsample_bilinear+0xa8>
 800f974:	6859      	ldr	r1, [r3, #4]
 800f976:	4684      	mov	ip, r0
 800f978:	684b      	ldr	r3, [r1, #4]
 800f97a:	b103      	cbz	r3, 800f97e <forward_upsample_bilinear+0x12>
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2a01      	cmp	r2, #1
 800f980:	d074      	beq.n	800fa6c <forward_upsample_bilinear+0x100>
 800f982:	690a      	ldr	r2, [r1, #16]
 800f984:	2a00      	cmp	r2, #0
 800f986:	d074      	beq.n	800fa72 <forward_upsample_bilinear+0x106>
 800f988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f98c:	699c      	ldr	r4, [r3, #24]
 800f98e:	b084      	sub	sp, #16
 800f990:	68d8      	ldr	r0, [r3, #12]
 800f992:	6821      	ldr	r1, [r4, #0]
 800f994:	6815      	ldr	r5, [r2, #0]
 800f996:	f8dc 3020 	ldr.w	r3, [ip, #32]
 800f99a:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 800f99e:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 800fa80 <forward_upsample_bilinear+0x114>
 800f9a2:	689b      	ldr	r3, [r3, #8]
 800f9a4:	68ee      	ldr	r6, [r5, #12]
 800f9a6:	4541      	cmp	r1, r8
 800f9a8:	edd3 0a00 	vldr	s1, [r3]
 800f9ac:	ed93 0a01 	vldr	s0, [r3, #4]
 800f9b0:	6882      	ldr	r2, [r0, #8]
 800f9b2:	68c3      	ldr	r3, [r0, #12]
 800f9b4:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800f9b8:	e9d6 6702 	ldrd	r6, r7, [r6, #8]
 800f9bc:	d048      	beq.n	800fa50 <forward_upsample_bilinear+0xe4>
 800f9be:	dd14      	ble.n	800f9ea <forward_upsample_bilinear+0x7e>
 800f9c0:	482d      	ldr	r0, [pc, #180]	@ (800fa78 <forward_upsample_bilinear+0x10c>)
 800f9c2:	4281      	cmp	r1, r0
 800f9c4:	d036      	beq.n	800fa34 <forward_upsample_bilinear+0xc8>
 800f9c6:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800f9ca:	4281      	cmp	r1, r0
 800f9cc:	d10a      	bne.n	800f9e4 <forward_upsample_bilinear+0x78>
 800f9ce:	69a9      	ldr	r1, [r5, #24]
 800f9d0:	68a0      	ldr	r0, [r4, #8]
 800f9d2:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800f9d6:	6889      	ldr	r1, [r1, #8]
 800f9d8:	e9cd e402 	strd	lr, r4, [sp, #8]
 800f9dc:	e9cd 6700 	strd	r6, r7, [sp]
 800f9e0:	f001 f91c 	bl	8010c1c <forward_lite_upsample_bilinear_is16os16>
 800f9e4:	b004      	add	sp, #16
 800f9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ea:	4824      	ldr	r0, [pc, #144]	@ (800fa7c <forward_upsample_bilinear+0x110>)
 800f9ec:	4281      	cmp	r1, r0
 800f9ee:	d013      	beq.n	800fa18 <forward_upsample_bilinear+0xac>
 800f9f0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800f9f4:	4281      	cmp	r1, r0
 800f9f6:	d1f5      	bne.n	800f9e4 <forward_upsample_bilinear+0x78>
 800f9f8:	69a9      	ldr	r1, [r5, #24]
 800f9fa:	68a0      	ldr	r0, [r4, #8]
 800f9fc:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800fa00:	6889      	ldr	r1, [r1, #8]
 800fa02:	e9cd e402 	strd	lr, r4, [sp, #8]
 800fa06:	e9cd 6700 	strd	r6, r7, [sp]
 800fa0a:	f001 f9c7 	bl	8010d9c <forward_lite_upsample_bilinear_iu16ou16>
 800fa0e:	b004      	add	sp, #16
 800fa10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa14:	6853      	ldr	r3, [r2, #4]
 800fa16:	deff      	udf	#255	@ 0xff
 800fa18:	69a9      	ldr	r1, [r5, #24]
 800fa1a:	68a0      	ldr	r0, [r4, #8]
 800fa1c:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800fa20:	6889      	ldr	r1, [r1, #8]
 800fa22:	e9cd e402 	strd	lr, r4, [sp, #8]
 800fa26:	e9cd 6700 	strd	r6, r7, [sp]
 800fa2a:	f001 f835 	bl	8010a98 <forward_lite_upsample_bilinear_iu8ou8>
 800fa2e:	b004      	add	sp, #16
 800fa30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa34:	69a9      	ldr	r1, [r5, #24]
 800fa36:	68a0      	ldr	r0, [r4, #8]
 800fa38:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800fa3c:	6889      	ldr	r1, [r1, #8]
 800fa3e:	e9cd e402 	strd	lr, r4, [sp, #8]
 800fa42:	e9cd 6700 	strd	r6, r7, [sp]
 800fa46:	f000 ff65 	bl	8010914 <forward_lite_upsample_bilinear_is8os8>
 800fa4a:	b004      	add	sp, #16
 800fa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa50:	69a9      	ldr	r1, [r5, #24]
 800fa52:	68a0      	ldr	r0, [r4, #8]
 800fa54:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800fa58:	6889      	ldr	r1, [r1, #8]
 800fa5a:	e9cd e402 	strd	lr, r4, [sp, #8]
 800fa5e:	e9cd 6700 	strd	r6, r7, [sp]
 800fa62:	f000 fe97 	bl	8010794 <forward_lite_upsample_bilinear_if32of32>
 800fa66:	b004      	add	sp, #16
 800fa68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	685b      	ldr	r3, [r3, #4]
 800fa70:	deff      	udf	#255	@ 0xff
 800fa72:	68d3      	ldr	r3, [r2, #12]
 800fa74:	deff      	udf	#255	@ 0xff
 800fa76:	bf00      	nop
 800fa78:	00840440 	.word	0x00840440
 800fa7c:	00040440 	.word	0x00040440
 800fa80:	00821040 	.word	0x00821040

0800fa84 <forward_lite_conv2d_if32of32wf32_pool>:
 800fa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa88:	ed2d 8b0e 	vpush	{d8-d14}
 800fa8c:	b0c9      	sub	sp, #292	@ 0x124
 800fa8e:	4696      	mov	lr, r2
 800fa90:	4680      	mov	r8, r0
 800fa92:	f9bd 51cc 	ldrsh.w	r5, [sp, #460]	@ 0x1cc
 800fa96:	9323      	str	r3, [sp, #140]	@ 0x8c
 800fa98:	f9bd 31ec 	ldrsh.w	r3, [sp, #492]	@ 0x1ec
 800fa9c:	9138      	str	r1, [sp, #224]	@ 0xe0
 800fa9e:	9239      	str	r2, [sp, #228]	@ 0xe4
 800faa0:	f9bd 118c 	ldrsh.w	r1, [sp, #396]	@ 0x18c
 800faa4:	fb05 f203 	mul.w	r2, r5, r3
 800faa8:	f9bd 419c 	ldrsh.w	r4, [sp, #412]	@ 0x19c
 800faac:	9129      	str	r1, [sp, #164]	@ 0xa4
 800faae:	460e      	mov	r6, r1
 800fab0:	fb01 f202 	mul.w	r2, r1, r2
 800fab4:	f9bd 1194 	ldrsh.w	r1, [sp, #404]	@ 0x194
 800fab8:	f8bd c1b0 	ldrh.w	ip, [sp, #432]	@ 0x1b0
 800fabc:	9142      	str	r1, [sp, #264]	@ 0x108
 800fabe:	f9bd 11a0 	ldrsh.w	r1, [sp, #416]	@ 0x1a0
 800fac2:	f9bd 7190 	ldrsh.w	r7, [sp, #400]	@ 0x190
 800fac6:	932d      	str	r3, [sp, #180]	@ 0xb4
 800fac8:	942a      	str	r4, [sp, #168]	@ 0xa8
 800faca:	f9bd 3198 	ldrsh.w	r3, [sp, #408]	@ 0x198
 800face:	f9bd 4188 	ldrsh.w	r4, [sp, #392]	@ 0x188
 800fad2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fad4:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 800fad8:	f8bd 11a8 	ldrh.w	r1, [sp, #424]	@ 0x1a8
 800fadc:	f8bd c1b4 	ldrh.w	ip, [sp, #436]	@ 0x1b4
 800fae0:	9041      	str	r0, [sp, #260]	@ 0x104
 800fae2:	933a      	str	r3, [sp, #232]	@ 0xe8
 800fae4:	f8bd 01ac 	ldrh.w	r0, [sp, #428]	@ 0x1ac
 800fae8:	912b      	str	r1, [sp, #172]	@ 0xac
 800faea:	f9bd 91a4 	ldrsh.w	r9, [sp, #420]	@ 0x1a4
 800faee:	4243      	negs	r3, r0
 800faf0:	950f      	str	r5, [sp, #60]	@ 0x3c
 800faf2:	9418      	str	r4, [sp, #96]	@ 0x60
 800faf4:	9714      	str	r7, [sp, #80]	@ 0x50
 800faf6:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
 800fafa:	f9bd c1b8 	ldrsh.w	ip, [sp, #440]	@ 0x1b8
 800fafe:	931e      	str	r3, [sp, #120]	@ 0x78
 800fb00:	f8cd c10c 	str.w	ip, [sp, #268]	@ 0x10c
 800fb04:	f9bd c1e8 	ldrsh.w	ip, [sp, #488]	@ 0x1e8
 800fb08:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800fb0a:	f8cd c110 	str.w	ip, [sp, #272]	@ 0x110
 800fb0e:	f9bd c1f0 	ldrsh.w	ip, [sp, #496]	@ 0x1f0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	f9bd 11d0 	ldrsh.w	r1, [sp, #464]	@ 0x1d0
 800fb18:	f8cd c114 	str.w	ip, [sp, #276]	@ 0x114
 800fb1c:	f9bd c1f4 	ldrsh.w	ip, [sp, #500]	@ 0x1f4
 800fb20:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
 800fb24:	f9bd c1f8 	ldrsh.w	ip, [sp, #504]	@ 0x1f8
 800fb28:	f8cd c118 	str.w	ip, [sp, #280]	@ 0x118
 800fb2c:	f9bd c1fc 	ldrsh.w	ip, [sp, #508]	@ 0x1fc
 800fb30:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 800fb34:	f340 80a9 	ble.w	800fc8a <forward_lite_conv2d_if32of32wf32_pool+0x206>
 800fb38:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fb3a:	3901      	subs	r1, #1
 800fb3c:	9020      	str	r0, [sp, #128]	@ 0x80
 800fb3e:	fb03 f309 	mul.w	r3, r3, r9
 800fb42:	fa1f fc81 	uxth.w	ip, r1
 800fb46:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 800fb48:	fb04 f303 	mul.w	r3, r4, r3
 800fb4c:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 800fc94 <forward_lite_conv2d_if32of32wf32_pool+0x210>
 800fb50:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 800fb54:	0099      	lsls	r1, r3, #2
 800fb56:	9124      	str	r1, [sp, #144]	@ 0x90
 800fb58:	4631      	mov	r1, r6
 800fb5a:	b2b6      	uxth	r6, r6
 800fb5c:	fb00 f301 	mul.w	r3, r0, r1
 800fb60:	9636      	str	r6, [sp, #216]	@ 0xd8
 800fb62:	00a6      	lsls	r6, r4, #2
 800fb64:	fb05 f303 	mul.w	r3, r5, r3
 800fb68:	fb05 f501 	mul.w	r5, r5, r1
 800fb6c:	0098      	lsls	r0, r3, #2
 800fb6e:	9616      	str	r6, [sp, #88]	@ 0x58
 800fb70:	953d      	str	r5, [sp, #244]	@ 0xf4
 800fb72:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 800fb76:	903e      	str	r0, [sp, #248]	@ 0xf8
 800fb78:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 800fb7a:	953b      	str	r5, [sp, #236]	@ 0xec
 800fb7c:	1e43      	subs	r3, r0, #1
 800fb7e:	b29b      	uxth	r3, r3
 800fb80:	3301      	adds	r3, #1
 800fb82:	0098      	lsls	r0, r3, #2
 800fb84:	9035      	str	r0, [sp, #212]	@ 0xd4
 800fb86:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800fb88:	fb00 f307 	mul.w	r3, r0, r7
 800fb8c:	fb04 f303 	mul.w	r3, r4, r3
 800fb90:	0098      	lsls	r0, r3, #2
 800fb92:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 800fb94:	9034      	str	r0, [sp, #208]	@ 0xd0
 800fb96:	0090      	lsls	r0, r2, #2
 800fb98:	fb01 f303 	mul.w	r3, r1, r3
 800fb9c:	0089      	lsls	r1, r1, #2
 800fb9e:	9032      	str	r0, [sp, #200]	@ 0xc8
 800fba0:	9860      	ldr	r0, [sp, #384]	@ 0x180
 800fba2:	9112      	str	r1, [sp, #72]	@ 0x48
 800fba4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800fba8:	0098      	lsls	r0, r3, #2
 800fbaa:	fb07 f306 	mul.w	r3, r7, r6
 800fbae:	921f      	str	r2, [sp, #124]	@ 0x7c
 800fbb0:	903c      	str	r0, [sp, #240]	@ 0xf0
 800fbb2:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800fbb4:	fb00 8703 	mla	r7, r0, r3, r8
 800fbb8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800fbba:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800fbbc:	9722      	str	r7, [sp, #136]	@ 0x88
 800fbbe:	425f      	negs	r7, r3
 800fbc0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fbc2:	4241      	negs	r1, r0
 800fbc4:	9731      	str	r7, [sp, #196]	@ 0xc4
 800fbc6:	fb03 f304 	mul.w	r3, r3, r4
 800fbca:	9125      	str	r1, [sp, #148]	@ 0x94
 800fbcc:	009c      	lsls	r4, r3, #2
 800fbce:	fb06 f107 	mul.w	r1, r6, r7
 800fbd2:	9417      	str	r4, [sp, #92]	@ 0x5c
 800fbd4:	2400      	movs	r4, #0
 800fbd6:	9137      	str	r1, [sp, #220]	@ 0xdc
 800fbd8:	9960      	ldr	r1, [sp, #384]	@ 0x180
 800fbda:	9427      	str	r4, [sp, #156]	@ 0x9c
 800fbdc:	911b      	str	r1, [sp, #108]	@ 0x6c
 800fbde:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fbe0:	9428      	str	r4, [sp, #160]	@ 0xa0
 800fbe2:	9333      	str	r3, [sp, #204]	@ 0xcc
 800fbe4:	9b76      	ldr	r3, [sp, #472]	@ 0x1d8
 800fbe6:	932f      	str	r3, [sp, #188]	@ 0xbc
 800fbe8:	1e53      	subs	r3, r2, #1
 800fbea:	9347      	str	r3, [sp, #284]	@ 0x11c
 800fbec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fbee:	3301      	adds	r3, #1
 800fbf0:	b21b      	sxth	r3, r3
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	dc68      	bgt.n	800fcc8 <forward_lite_conv2d_if32of32wf32_pool+0x244>
 800fbf6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fbf8:	041b      	lsls	r3, r3, #16
 800fbfa:	f100 81d5 	bmi.w	800ffa8 <forward_lite_conv2d_if32of32wf32_pool+0x524>
 800fbfe:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800fc00:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 800fc02:	42b2      	cmp	r2, r6
 800fc04:	dc48      	bgt.n	800fc98 <forward_lite_conv2d_if32of32wf32_pool+0x214>
 800fc06:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800fc08:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800fc0a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 800fc10:	4420      	add	r0, r4
 800fc12:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800fc14:	b21d      	sxth	r5, r3
 800fc16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800fc18:	901e      	str	r0, [sp, #120]	@ 0x78
 800fc1a:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 800fc1c:	1b1b      	subs	r3, r3, r4
 800fc1e:	9108      	str	r1, [sp, #32]
 800fc20:	4401      	add	r1, r0
 800fc22:	9320      	str	r3, [sp, #128]	@ 0x80
 800fc24:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800fc26:	9138      	str	r1, [sp, #224]	@ 0xe0
 800fc28:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800fc2a:	9528      	str	r5, [sp, #160]	@ 0xa0
 800fc2c:	440b      	add	r3, r1
 800fc2e:	9322      	str	r3, [sp, #136]	@ 0x88
 800fc30:	b293      	uxth	r3, r2
 800fc32:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800fc34:	9301      	str	r3, [sp, #4]
 800fc36:	1a9b      	subs	r3, r3, r2
 800fc38:	b29a      	uxth	r2, r3
 800fc3a:	b2bb      	uxth	r3, r7
 800fc3c:	1af1      	subs	r1, r6, r3
 800fc3e:	9305      	str	r3, [sp, #20]
 800fc40:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
 800fc42:	b20b      	sxth	r3, r1
 800fc44:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 800fc48:	931d      	str	r3, [sp, #116]	@ 0x74
 800fc4a:	b2b3      	uxth	r3, r6
 800fc4c:	9303      	str	r3, [sp, #12]
 800fc4e:	2301      	movs	r3, #1
 800fc50:	9307      	str	r3, [sp, #28]
 800fc52:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	@ 0xe8
 800fc56:	9306      	str	r3, [sp, #24]
 800fc58:	f8bd 3114 	ldrh.w	r3, [sp, #276]	@ 0x114
 800fc5c:	9304      	str	r3, [sp, #16]
 800fc5e:	f8bd 3118 	ldrh.w	r3, [sp, #280]	@ 0x118
 800fc62:	9302      	str	r3, [sp, #8]
 800fc64:	f8bd 3110 	ldrh.w	r3, [sp, #272]	@ 0x110
 800fc68:	9300      	str	r3, [sp, #0]
 800fc6a:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 800fc6c:	9860      	ldr	r0, [sp, #384]	@ 0x180
 800fc6e:	9c79      	ldr	r4, [sp, #484]	@ 0x1e4
 800fc70:	47a0      	blx	r4
 800fc72:	1bf3      	subs	r3, r6, r7
 800fc74:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fc76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fc7a:	3a01      	subs	r2, #1
 800fc7c:	b21b      	sxth	r3, r3
 800fc7e:	b292      	uxth	r2, r2
 800fc80:	9333      	str	r3, [sp, #204]	@ 0xcc
 800fc82:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800fc84:	9221      	str	r2, [sp, #132]	@ 0x84
 800fc86:	42ab      	cmp	r3, r5
 800fc88:	dcb0      	bgt.n	800fbec <forward_lite_conv2d_if32of32wf32_pool+0x168>
 800fc8a:	b049      	add	sp, #292	@ 0x124
 800fc8c:	ecbd 8b0e 	vpop	{d8-d14}
 800fc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc94:	00000000 	.word	0x00000000
 800fc98:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800fc9a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800fc9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fc9e:	440a      	add	r2, r1
 800fca0:	3b01      	subs	r3, #1
 800fca2:	921e      	str	r2, [sp, #120]	@ 0x78
 800fca4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	1a52      	subs	r2, r2, r1
 800fcaa:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800fcac:	9321      	str	r3, [sp, #132]	@ 0x84
 800fcae:	9220      	str	r2, [sp, #128]	@ 0x80
 800fcb0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800fcb2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800fcb4:	440a      	add	r2, r1
 800fcb6:	9222      	str	r2, [sp, #136]	@ 0x88
 800fcb8:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	dde5      	ble.n	800fc8a <forward_lite_conv2d_if32of32wf32_pool+0x206>
 800fcbe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	b21b      	sxth	r3, r3
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	dd96      	ble.n	800fbf6 <forward_lite_conv2d_if32of32wf32_pool+0x172>
 800fcc8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	f2c0 82d1 	blt.w	8010272 <forward_lite_conv2d_if32of32wf32_pool+0x7ee>
 800fcd0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800fcd2:	931c      	str	r3, [sp, #112]	@ 0x70
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800fcd8:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 800fcda:	440a      	add	r2, r1
 800fcdc:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 800fcde:	428a      	cmp	r2, r1
 800fce0:	bfd4      	ite	le
 800fce2:	ebc3 0b02 	rsble	fp, r3, r2
 800fce6:	ebc3 0b01 	rsbgt	fp, r3, r1
 800fcea:	9a61      	ldr	r2, [sp, #388]	@ 0x184
 800fcec:	2a00      	cmp	r2, #0
 800fcee:	f000 819d 	beq.w	801002c <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 800fcf2:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 800fcf4:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800fcf8:	f0c0 8198 	bcc.w	801002c <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 800fcfc:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800fcfe:	2a00      	cmp	r2, #0
 800fd00:	f340 8115 	ble.w	800ff2e <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 800fd04:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fd06:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 800fd08:	fb02 f303 	mul.w	r3, r2, r3
 800fd0c:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800fd0e:	9319      	str	r3, [sp, #100]	@ 0x64
 800fd10:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800fd12:	189a      	adds	r2, r3, r2
 800fd14:	9326      	str	r3, [sp, #152]	@ 0x98
 800fd16:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd18:	923f      	str	r2, [sp, #252]	@ 0xfc
 800fd1a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fd1c:	9330      	str	r3, [sp, #192]	@ 0xc0
 800fd1e:	440a      	add	r2, r1
 800fd20:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800fd22:	9240      	str	r2, [sp, #256]	@ 0x100
 800fd24:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd26:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800fd28:	9961      	ldr	r1, [sp, #388]	@ 0x184
 800fd2a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800fd2c:	f001 fe4a 	bl	80119c4 <st_int8_copy>
 800fd30:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	f000 8135 	beq.w	800ffa2 <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 800fd38:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800fd3a:	ecf3 1a01 	vldmia	r3!, {s3}
 800fd3e:	9330      	str	r3, [sp, #192]	@ 0xc0
 800fd40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	f000 80e8 	beq.w	800ff18 <forward_lite_conv2d_if32of32wf32_pool+0x494>
 800fd48:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800fd4a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fd4c:	189a      	adds	r2, r3, r2
 800fd4e:	920c      	str	r2, [sp, #48]	@ 0x30
 800fd50:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 800fd52:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 800fd56:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800fd58:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd5a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800fd5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd5e:	2300      	movs	r3, #0
 800fd60:	9311      	str	r3, [sp, #68]	@ 0x44
 800fd62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	f2c0 8113 	blt.w	800ff90 <forward_lite_conv2d_if32of32wf32_pool+0x50c>
 800fd6a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fd6c:	2600      	movs	r6, #0
 800fd6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fd70:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800fd72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd74:	9c61      	ldr	r4, [sp, #388]	@ 0x184
 800fd76:	4298      	cmp	r0, r3
 800fd78:	bf94      	ite	ls
 800fd7a:	ebc6 0600 	rsbls	r6, r6, r0
 800fd7e:	ebc6 0603 	rsbhi	r6, r6, r3
 800fd82:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fd84:	f1bb 0f00 	cmp.w	fp, #0
 800fd88:	eba0 0906 	sub.w	r9, r0, r6
 800fd8c:	fb02 4203 	mla	r2, r2, r3, r4
 800fd90:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800fd92:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800fd94:	eba4 0a06 	sub.w	sl, r4, r6
 800fd98:	fb00 f606 	mul.w	r6, r0, r6
 800fd9c:	f340 80fe 	ble.w	800ff9c <forward_lite_conv2d_if32of32wf32_pool+0x518>
 800fda0:	f026 070f 	bic.w	r7, r6, #15
 800fda4:	eeb0 7a61 	vmov.f32	s14, s3
 800fda8:	fb0a fa03 	mul.w	sl, sl, r3
 800fdac:	f04f 0c00 	mov.w	ip, #0
 800fdb0:	f107 38ff 	add.w	r8, r7, #4294967295
 800fdb4:	fb09 f903 	mul.w	r9, r9, r3
 800fdb8:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800fdbc:	f108 0801 	add.w	r8, r8, #1
 800fdc0:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800fdc4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800fdc8:	2f00      	cmp	r7, #0
 800fdca:	f340 80df 	ble.w	800ff8c <forward_lite_conv2d_if32of32wf32_pool+0x508>
 800fdce:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 800fdd2:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 800fdd6:	2400      	movs	r4, #0
 800fdd8:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 800fddc:	3410      	adds	r4, #16
 800fdde:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 800fde2:	3340      	adds	r3, #64	@ 0x40
 800fde4:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 800fde8:	42bc      	cmp	r4, r7
 800fdea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fdee:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 800fdf2:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 800fdf6:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800fdfa:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 800fdfe:	eee4 7a85 	vfma.f32	s15, s9, s10
 800fe02:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 800fe06:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 800fe0a:	ed50 da1c 	vldr	s27, [r0, #-112]	@ 0xffffff90
 800fe0e:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 800fe12:	ed50 ca1b 	vldr	s25, [r0, #-108]	@ 0xffffff94
 800fe16:	ed13 ca1b 	vldr	s24, [r3, #-108]	@ 0xffffff94
 800fe1a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800fe1e:	ed50 ba1a 	vldr	s23, [r0, #-104]	@ 0xffffff98
 800fe22:	ed13 ba1a 	vldr	s22, [r3, #-104]	@ 0xffffff98
 800fe26:	ed50 aa19 	vldr	s21, [r0, #-100]	@ 0xffffff9c
 800fe2a:	ed13 aa19 	vldr	s20, [r3, #-100]	@ 0xffffff9c
 800fe2e:	ed50 9a18 	vldr	s19, [r0, #-96]	@ 0xffffffa0
 800fe32:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 800fe36:	eeee 7a26 	vfma.f32	s15, s28, s13
 800fe3a:	ed50 8a17 	vldr	s17, [r0, #-92]	@ 0xffffffa4
 800fe3e:	ed13 0a17 	vldr	s0, [r3, #-92]	@ 0xffffffa4
 800fe42:	ed50 0a16 	vldr	s1, [r0, #-88]	@ 0xffffffa8
 800fe46:	ed13 1a16 	vldr	s2, [r3, #-88]	@ 0xffffffa8
 800fe4a:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 800fe4e:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 800fe52:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800fe56:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 800fe5a:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800fe5e:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 800fe62:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800fe66:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 800fe6a:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800fe6e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800fe72:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 800fe76:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800fe7a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800fe7e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800fe82:	eee9 7a89 	vfma.f32	s15, s19, s18
 800fe86:	eee8 7a80 	vfma.f32	s15, s17, s0
 800fe8a:	eee0 7a81 	vfma.f32	s15, s1, s2
 800fe8e:	eee2 7a22 	vfma.f32	s15, s4, s5
 800fe92:	eee3 7a23 	vfma.f32	s15, s6, s7
 800fe96:	eee4 7a24 	vfma.f32	s15, s8, s9
 800fe9a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800fe9e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800fea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fea6:	db97      	blt.n	800fdd8 <forward_lite_conv2d_if32of32wf32_pool+0x354>
 800fea8:	4471      	add	r1, lr
 800feaa:	4472      	add	r2, lr
 800feac:	4645      	mov	r5, r8
 800feae:	42ae      	cmp	r6, r5
 800feb0:	dd10      	ble.n	800fed4 <forward_lite_conv2d_if32of32wf32_pool+0x450>
 800feb2:	462b      	mov	r3, r5
 800feb4:	460c      	mov	r4, r1
 800feb6:	4610      	mov	r0, r2
 800feb8:	3301      	adds	r3, #1
 800feba:	ecf0 6a01 	vldmia	r0!, {s13}
 800febe:	ecf4 7a01 	vldmia	r4!, {s15}
 800fec2:	429e      	cmp	r6, r3
 800fec4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fec8:	d1f6      	bne.n	800feb8 <forward_lite_conv2d_if32of32wf32_pool+0x434>
 800feca:	1b75      	subs	r5, r6, r5
 800fecc:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800fed0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800fed4:	f10c 0c01 	add.w	ip, ip, #1
 800fed8:	4451      	add	r1, sl
 800feda:	444a      	add	r2, r9
 800fedc:	45e3      	cmp	fp, ip
 800fede:	f47f af73 	bne.w	800fdc8 <forward_lite_conv2d_if32of32wf32_pool+0x344>
 800fee2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800fee4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800fee6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800fee8:	4410      	add	r0, r2
 800feea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800feec:	ed81 7a00 	vstr	s14, [r1]
 800fef0:	900b      	str	r0, [sp, #44]	@ 0x2c
 800fef2:	3301      	adds	r3, #1
 800fef4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fef6:	9311      	str	r3, [sp, #68]	@ 0x44
 800fef8:	4401      	add	r1, r0
 800fefa:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800fefc:	9110      	str	r1, [sp, #64]	@ 0x40
 800fefe:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ff00:	1a89      	subs	r1, r1, r2
 800ff02:	910e      	str	r1, [sp, #56]	@ 0x38
 800ff04:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ff06:	4401      	add	r1, r0
 800ff08:	910d      	str	r1, [sp, #52]	@ 0x34
 800ff0a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ff0c:	1a8a      	subs	r2, r1, r2
 800ff0e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ff10:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ff12:	429a      	cmp	r2, r3
 800ff14:	f47f af25 	bne.w	800fd62 <forward_lite_conv2d_if32of32wf32_pool+0x2de>
 800ff18:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ff1a:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800ff1c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800ff1e:	440a      	add	r2, r1
 800ff20:	3304      	adds	r3, #4
 800ff22:	921a      	str	r2, [sp, #104]	@ 0x68
 800ff24:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800ff26:	9326      	str	r3, [sp, #152]	@ 0x98
 800ff28:	4293      	cmp	r3, r2
 800ff2a:	f47f aefc 	bne.w	800fd26 <forward_lite_conv2d_if32of32wf32_pool+0x2a2>
 800ff2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	dd26      	ble.n	800ff82 <forward_lite_conv2d_if32of32wf32_pool+0x4fe>
 800ff34:	9b75      	ldr	r3, [sp, #468]	@ 0x1d4
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	f000 819f 	beq.w	801027a <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 800ff3c:	4699      	mov	r9, r3
 800ff3e:	2400      	movs	r4, #0
 800ff40:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 800ff42:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 800ff46:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 800ff48:	f8dd b1e0 	ldr.w	fp, [sp, #480]	@ 0x1e0
 800ff4c:	e9dd 6a76 	ldrd	r6, sl, [sp, #472]	@ 0x1d8
 800ff50:	462b      	mov	r3, r5
 800ff52:	4455      	add	r5, sl
 800ff54:	463a      	mov	r2, r7
 800ff56:	4641      	mov	r1, r8
 800ff58:	4640      	mov	r0, r8
 800ff5a:	3401      	adds	r4, #1
 800ff5c:	47c8      	blx	r9
 800ff5e:	1bab      	subs	r3, r5, r6
 800ff60:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ff62:	b224      	sxth	r4, r4
 800ff64:	455b      	cmp	r3, fp
 800ff66:	bfa8      	it	ge
 800ff68:	4635      	movge	r5, r6
 800ff6a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800ff6c:	4490      	add	r8, r2
 800ff6e:	4543      	cmp	r3, r8
 800ff70:	d801      	bhi.n	800ff76 <forward_lite_conv2d_if32of32wf32_pool+0x4f2>
 800ff72:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800ff74:	4498      	add	r8, r3
 800ff76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff78:	42a3      	cmp	r3, r4
 800ff7a:	d1e9      	bne.n	800ff50 <forward_lite_conv2d_if32of32wf32_pool+0x4cc>
 800ff7c:	952f      	str	r5, [sp, #188]	@ 0xbc
 800ff7e:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
 800ff82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ff84:	3301      	adds	r3, #1
 800ff86:	b21b      	sxth	r3, r3
 800ff88:	931d      	str	r3, [sp, #116]	@ 0x74
 800ff8a:	e638      	b.n	800fbfe <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 800ff8c:	2500      	movs	r5, #0
 800ff8e:	e78e      	b.n	800feae <forward_lite_conv2d_if32of32wf32_pool+0x42a>
 800ff90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ff94:	4616      	mov	r6, r2
 800ff96:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800ff98:	189a      	adds	r2, r3, r2
 800ff9a:	e6e9      	b.n	800fd70 <forward_lite_conv2d_if32of32wf32_pool+0x2ec>
 800ff9c:	eeb0 7a61 	vmov.f32	s14, s3
 800ffa0:	e79f      	b.n	800fee2 <forward_lite_conv2d_if32of32wf32_pool+0x45e>
 800ffa2:	eef0 1a48 	vmov.f32	s3, s16
 800ffa6:	e6cb      	b.n	800fd40 <forward_lite_conv2d_if32of32wf32_pool+0x2bc>
 800ffa8:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 800ffaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ffac:	fb02 f303 	mul.w	r3, r2, r3
 800ffb0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ffb2:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 800ffb6:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d901      	bls.n	800ffc0 <forward_lite_conv2d_if32of32wf32_pool+0x53c>
 800ffbc:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800ffbe:	4413      	add	r3, r2
 800ffc0:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d217      	bcs.n	800fff6 <forward_lite_conv2d_if32of32wf32_pool+0x572>
 800ffc6:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800ffc8:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800ffca:	428a      	cmp	r2, r1
 800ffcc:	d013      	beq.n	800fff6 <forward_lite_conv2d_if32of32wf32_pool+0x572>
 800ffce:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d910      	bls.n	800fff6 <forward_lite_conv2d_if32of32wf32_pool+0x572>
 800ffd4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	f852 0b04 	ldr.w	r0, [r2], #4
 800ffdc:	f841 0b04 	str.w	r0, [r1], #4
 800ffe0:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800ffe2:	4290      	cmp	r0, r2
 800ffe4:	d8f8      	bhi.n	800ffd8 <forward_lite_conv2d_if32of32wf32_pool+0x554>
 800ffe6:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ffec:	f023 0303 	bic.w	r3, r3, #3
 800fff0:	3304      	adds	r3, #4
 800fff2:	441a      	add	r2, r3
 800fff4:	921b      	str	r2, [sp, #108]	@ 0x6c
 800fff6:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800fff8:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800fffa:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 800fffe:	440a      	add	r2, r1
 8010000:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 8010002:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8010004:	1ad2      	subs	r2, r2, r3
 8010006:	4401      	add	r1, r0
 8010008:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 801000a:	b212      	sxth	r2, r2
 801000c:	4403      	add	r3, r0
 801000e:	911b      	str	r1, [sp, #108]	@ 0x6c
 8010010:	9227      	str	r2, [sp, #156]	@ 0x9c
 8010012:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8010014:	b21b      	sxth	r3, r3
 8010016:	428a      	cmp	r2, r1
 8010018:	931d      	str	r3, [sp, #116]	@ 0x74
 801001a:	460b      	mov	r3, r1
 801001c:	f63f adef 	bhi.w	800fbfe <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8010020:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8010022:	440b      	add	r3, r1
 8010024:	429a      	cmp	r2, r3
 8010026:	d9fc      	bls.n	8010022 <forward_lite_conv2d_if32of32wf32_pool+0x59e>
 8010028:	931b      	str	r3, [sp, #108]	@ 0x6c
 801002a:	e5e8      	b.n	800fbfe <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 801002c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801002e:	2a00      	cmp	r2, #0
 8010030:	f77f af7d 	ble.w	800ff2e <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8010034:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010036:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8010038:	fb02 f303 	mul.w	r3, r2, r3
 801003c:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 801003e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010040:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010042:	189a      	adds	r2, r3, r2
 8010044:	9326      	str	r3, [sp, #152]	@ 0x98
 8010046:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010048:	923f      	str	r2, [sp, #252]	@ 0xfc
 801004a:	9330      	str	r3, [sp, #192]	@ 0xc0
 801004c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801004e:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8010050:	440a      	add	r2, r1
 8010052:	9319      	str	r3, [sp, #100]	@ 0x64
 8010054:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010056:	9240      	str	r2, [sp, #256]	@ 0x100
 8010058:	2b00      	cmp	r3, #0
 801005a:	f000 80fc 	beq.w	8010256 <forward_lite_conv2d_if32of32wf32_pool+0x7d2>
 801005e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8010060:	ecf3 1a01 	vldmia	r3!, {s3}
 8010064:	9330      	str	r3, [sp, #192]	@ 0xc0
 8010066:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010068:	2b00      	cmp	r3, #0
 801006a:	f000 80e5 	beq.w	8010238 <forward_lite_conv2d_if32of32wf32_pool+0x7b4>
 801006e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8010070:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010072:	189a      	adds	r2, r3, r2
 8010074:	920c      	str	r2, [sp, #48]	@ 0x30
 8010076:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8010078:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 801007c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801007e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010080:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8010082:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010084:	2300      	movs	r3, #0
 8010086:	9311      	str	r3, [sp, #68]	@ 0x44
 8010088:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801008a:	2b00      	cmp	r3, #0
 801008c:	f2c0 80e8 	blt.w	8010260 <forward_lite_conv2d_if32of32wf32_pool+0x7dc>
 8010090:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010092:	2000      	movs	r0, #0
 8010094:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010096:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8010098:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801009a:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801009c:	428c      	cmp	r4, r1
 801009e:	bf94      	ite	ls
 80100a0:	ebc0 0004 	rsbls	r0, r0, r4
 80100a4:	ebc0 0001 	rsbhi	r0, r0, r1
 80100a8:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80100aa:	f1bb 0f00 	cmp.w	fp, #0
 80100ae:	eba4 0900 	sub.w	r9, r4, r0
 80100b2:	fb03 5301 	mla	r3, r3, r1, r5
 80100b6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80100b8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80100ba:	eba5 0a00 	sub.w	sl, r5, r0
 80100be:	fb04 f000 	mul.w	r0, r4, r0
 80100c2:	f340 80d3 	ble.w	801026c <forward_lite_conv2d_if32of32wf32_pool+0x7e8>
 80100c6:	f020 080f 	bic.w	r8, r0, #15
 80100ca:	eeb0 7a61 	vmov.f32	s14, s3
 80100ce:	fb0a fa01 	mul.w	sl, sl, r1
 80100d2:	2400      	movs	r4, #0
 80100d4:	f108 37ff 	add.w	r7, r8, #4294967295
 80100d8:	fb09 f901 	mul.w	r9, r9, r1
 80100dc:	093f      	lsrs	r7, r7, #4
 80100de:	3701      	adds	r7, #1
 80100e0:	01be      	lsls	r6, r7, #6
 80100e2:	013f      	lsls	r7, r7, #4
 80100e4:	f1b8 0f00 	cmp.w	r8, #0
 80100e8:	f340 80b8 	ble.w	801025c <forward_lite_conv2d_if32of32wf32_pool+0x7d8>
 80100ec:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 80100f0:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80100f4:	f04f 0c00 	mov.w	ip, #0
 80100f8:	ed51 6a0f 	vldr	s13, [r1, #-60]	@ 0xffffffc4
 80100fc:	f10c 0c10 	add.w	ip, ip, #16
 8010100:	ed55 7a0f 	vldr	s15, [r5, #-60]	@ 0xffffffc4
 8010104:	3140      	adds	r1, #64	@ 0x40
 8010106:	ed55 4a10 	vldr	s9, [r5, #-64]	@ 0xffffffc0
 801010a:	45c4      	cmp	ip, r8
 801010c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010110:	ed11 5a20 	vldr	s10, [r1, #-128]	@ 0xffffff80
 8010114:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 8010118:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 801011c:	ed11 6a1e 	vldr	s12, [r1, #-120]	@ 0xffffff88
 8010120:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010124:	ed51 6a1d 	vldr	s13, [r1, #-116]	@ 0xffffff8c
 8010128:	ed15 ea1d 	vldr	s28, [r5, #-116]	@ 0xffffff8c
 801012c:	ed55 da1c 	vldr	s27, [r5, #-112]	@ 0xffffff90
 8010130:	ed11 da1c 	vldr	s26, [r1, #-112]	@ 0xffffff90
 8010134:	ed55 ca1b 	vldr	s25, [r5, #-108]	@ 0xffffff94
 8010138:	ed11 ca1b 	vldr	s24, [r1, #-108]	@ 0xffffff94
 801013c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010140:	ed55 ba1a 	vldr	s23, [r5, #-104]	@ 0xffffff98
 8010144:	ed11 ba1a 	vldr	s22, [r1, #-104]	@ 0xffffff98
 8010148:	ed55 aa19 	vldr	s21, [r5, #-100]	@ 0xffffff9c
 801014c:	ed11 aa19 	vldr	s20, [r1, #-100]	@ 0xffffff9c
 8010150:	ed55 9a18 	vldr	s19, [r5, #-96]	@ 0xffffffa0
 8010154:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 8010158:	eeee 7a26 	vfma.f32	s15, s28, s13
 801015c:	ed55 8a17 	vldr	s17, [r5, #-92]	@ 0xffffffa4
 8010160:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 8010164:	ed55 0a16 	vldr	s1, [r5, #-88]	@ 0xffffffa8
 8010168:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 801016c:	ed15 2a15 	vldr	s4, [r5, #-84]	@ 0xffffffac
 8010170:	ed51 2a15 	vldr	s5, [r1, #-84]	@ 0xffffffac
 8010174:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8010178:	ed15 3a14 	vldr	s6, [r5, #-80]	@ 0xffffffb0
 801017c:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 8010180:	ed15 4a13 	vldr	s8, [r5, #-76]	@ 0xffffffb4
 8010184:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 8010188:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 801018c:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 8010190:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8010194:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 8010198:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 801019c:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80101a0:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80101a4:	eee9 7a89 	vfma.f32	s15, s19, s18
 80101a8:	eee8 7a80 	vfma.f32	s15, s17, s0
 80101ac:	eee0 7a81 	vfma.f32	s15, s1, s2
 80101b0:	eee2 7a22 	vfma.f32	s15, s4, s5
 80101b4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80101b8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80101bc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80101c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80101c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80101c8:	db96      	blt.n	80100f8 <forward_lite_conv2d_if32of32wf32_pool+0x674>
 80101ca:	4432      	add	r2, r6
 80101cc:	4433      	add	r3, r6
 80101ce:	4639      	mov	r1, r7
 80101d0:	4288      	cmp	r0, r1
 80101d2:	dd10      	ble.n	80101f6 <forward_lite_conv2d_if32of32wf32_pool+0x772>
 80101d4:	460d      	mov	r5, r1
 80101d6:	4696      	mov	lr, r2
 80101d8:	469c      	mov	ip, r3
 80101da:	3501      	adds	r5, #1
 80101dc:	ecfc 6a01 	vldmia	ip!, {s13}
 80101e0:	ecfe 7a01 	vldmia	lr!, {s15}
 80101e4:	42a8      	cmp	r0, r5
 80101e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80101ea:	d1f6      	bne.n	80101da <forward_lite_conv2d_if32of32wf32_pool+0x756>
 80101ec:	1a41      	subs	r1, r0, r1
 80101ee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80101f2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80101f6:	3401      	adds	r4, #1
 80101f8:	4452      	add	r2, sl
 80101fa:	444b      	add	r3, r9
 80101fc:	45a3      	cmp	fp, r4
 80101fe:	f47f af71 	bne.w	80100e4 <forward_lite_conv2d_if32of32wf32_pool+0x660>
 8010202:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010204:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010206:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010208:	4410      	add	r0, r2
 801020a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801020c:	ed81 7a00 	vstr	s14, [r1]
 8010210:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010212:	3301      	adds	r3, #1
 8010214:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010216:	9311      	str	r3, [sp, #68]	@ 0x44
 8010218:	4401      	add	r1, r0
 801021a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801021c:	9110      	str	r1, [sp, #64]	@ 0x40
 801021e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010220:	1a89      	subs	r1, r1, r2
 8010222:	910e      	str	r1, [sp, #56]	@ 0x38
 8010224:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010226:	4401      	add	r1, r0
 8010228:	910d      	str	r1, [sp, #52]	@ 0x34
 801022a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801022c:	1a8a      	subs	r2, r1, r2
 801022e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010230:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010232:	429a      	cmp	r2, r3
 8010234:	f47f af28 	bne.w	8010088 <forward_lite_conv2d_if32of32wf32_pool+0x604>
 8010238:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801023a:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801023c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801023e:	440a      	add	r2, r1
 8010240:	3304      	adds	r3, #4
 8010242:	9219      	str	r2, [sp, #100]	@ 0x64
 8010244:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8010246:	9326      	str	r3, [sp, #152]	@ 0x98
 8010248:	4293      	cmp	r3, r2
 801024a:	f43f ae70 	beq.w	800ff2e <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 801024e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010250:	2b00      	cmp	r3, #0
 8010252:	f47f af04 	bne.w	801005e <forward_lite_conv2d_if32of32wf32_pool+0x5da>
 8010256:	eef0 1a48 	vmov.f32	s3, s16
 801025a:	e704      	b.n	8010066 <forward_lite_conv2d_if32of32wf32_pool+0x5e2>
 801025c:	2100      	movs	r1, #0
 801025e:	e7b7      	b.n	80101d0 <forward_lite_conv2d_if32of32wf32_pool+0x74c>
 8010260:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010262:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010264:	4610      	mov	r0, r2
 8010266:	4413      	add	r3, r2
 8010268:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801026a:	e714      	b.n	8010096 <forward_lite_conv2d_if32of32wf32_pool+0x612>
 801026c:	eeb0 7a61 	vmov.f32	s14, s3
 8010270:	e7c7      	b.n	8010202 <forward_lite_conv2d_if32of32wf32_pool+0x77e>
 8010272:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010274:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010276:	921c      	str	r2, [sp, #112]	@ 0x70
 8010278:	e52d      	b.n	800fcd6 <forward_lite_conv2d_if32of32wf32_pool+0x252>
 801027a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801027c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801027e:	3301      	adds	r3, #1
 8010280:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8010282:	440a      	add	r2, r1
 8010284:	b219      	sxth	r1, r3
 8010286:	4290      	cmp	r0, r2
 8010288:	d801      	bhi.n	801028e <forward_lite_conv2d_if32of32wf32_pool+0x80a>
 801028a:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801028c:	4402      	add	r2, r0
 801028e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8010290:	4281      	cmp	r1, r0
 8010292:	dbf3      	blt.n	801027c <forward_lite_conv2d_if32of32wf32_pool+0x7f8>
 8010294:	921b      	str	r2, [sp, #108]	@ 0x6c
 8010296:	e674      	b.n	800ff82 <forward_lite_conv2d_if32of32wf32_pool+0x4fe>

08010298 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8010298:	edd3 6a02 	vldr	s13, [r3, #8]
 801029c:	ed93 7a00 	vldr	s14, [r3]
 80102a0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80102a4:	ed93 6a01 	vldr	s12, [r3, #4]
 80102a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ac:	d42b      	bmi.n	8010306 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 80102ae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80102b2:	4413      	add	r3, r2
 80102b4:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80102b8:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80102bc:	4291      	cmp	r1, r2
 80102be:	d821      	bhi.n	8010304 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80102c0:	f10c 0104 	add.w	r1, ip, #4
 80102c4:	1d13      	adds	r3, r2, #4
 80102c6:	eba2 020c 	sub.w	r2, r2, ip
 80102ca:	4408      	add	r0, r1
 80102cc:	e00c      	b.n	80102e8 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80102ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80102d2:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80102d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102da:	db01      	blt.n	80102e0 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 80102dc:	ee65 7a86 	vmul.f32	s15, s11, s12
 80102e0:	4293      	cmp	r3, r2
 80102e2:	ed60 7a01 	vstmdb	r0!, {s15}
 80102e6:	d00c      	beq.n	8010302 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 80102e8:	ed73 7a01 	vldmdb	r3!, {s15}
 80102ec:	eef4 6ae7 	vcmpe.f32	s13, s15
 80102f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f4:	daeb      	bge.n	80102ce <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 80102f6:	eef0 7a66 	vmov.f32	s15, s13
 80102fa:	4293      	cmp	r3, r2
 80102fc:	ed60 7a01 	vstmdb	r0!, {s15}
 8010300:	d1f2      	bne.n	80102e8 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8010302:	4770      	bx	lr
 8010304:	4770      	bx	lr
 8010306:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801030a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801030e:	4413      	add	r3, r2
 8010310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010314:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8010318:	b500      	push	{lr}
 801031a:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 801031e:	d019      	beq.n	8010354 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8010320:	4561      	cmp	r1, ip
 8010322:	d815      	bhi.n	8010350 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8010324:	f10e 0204 	add.w	r2, lr, #4
 8010328:	f10c 0304 	add.w	r3, ip, #4
 801032c:	ebac 010e 	sub.w	r1, ip, lr
 8010330:	4402      	add	r2, r0
 8010332:	ed73 7a01 	vldmdb	r3!, {s15}
 8010336:	eef4 7ac7 	vcmpe.f32	s15, s14
 801033a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801033e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010342:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010346:	d827      	bhi.n	8010398 <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 8010348:	428b      	cmp	r3, r1
 801034a:	ed62 6a01 	vstmdb	r2!, {s13}
 801034e:	d1f0      	bne.n	8010332 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8010350:	f85d fb04 	ldr.w	pc, [sp], #4
 8010354:	4561      	cmp	r1, ip
 8010356:	d8fb      	bhi.n	8010350 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8010358:	f10e 0204 	add.w	r2, lr, #4
 801035c:	f10c 0304 	add.w	r3, ip, #4
 8010360:	ebac 010e 	sub.w	r1, ip, lr
 8010364:	f04f 0c00 	mov.w	ip, #0
 8010368:	4402      	add	r2, r0
 801036a:	ed73 7a01 	vldmdb	r3!, {s15}
 801036e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010376:	d40a      	bmi.n	801038e <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 8010378:	428b      	cmp	r3, r1
 801037a:	f842 cd04 	str.w	ip, [r2, #-4]!
 801037e:	d0e7      	beq.n	8010350 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8010380:	ed73 7a01 	vldmdb	r3!, {s15}
 8010384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801038c:	d5f4      	bpl.n	8010378 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 801038e:	428b      	cmp	r3, r1
 8010390:	ed62 7a01 	vstmdb	r2!, {s15}
 8010394:	d1e9      	bne.n	801036a <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 8010396:	e7db      	b.n	8010350 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8010398:	428b      	cmp	r3, r1
 801039a:	ed62 7a01 	vstmdb	r2!, {s15}
 801039e:	d1c8      	bne.n	8010332 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 80103a0:	e7d6      	b.n	8010350 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80103a2:	bf00      	nop

080103a4 <pool_func_mp_array_f32>:
 80103a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a8:	b091      	sub	sp, #68	@ 0x44
 80103aa:	468b      	mov	fp, r1
 80103ac:	469c      	mov	ip, r3
 80103ae:	4690      	mov	r8, r2
 80103b0:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 80103b4:	4681      	mov	r9, r0
 80103b6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80103ba:	9101      	str	r1, [sp, #4]
 80103bc:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 80103c0:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 80103c4:	9105      	str	r1, [sp, #20]
 80103c6:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80103ca:	9304      	str	r3, [sp, #16]
 80103cc:	9106      	str	r1, [sp, #24]
 80103ce:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80103d2:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 80103d6:	ea52 0403 	orrs.w	r4, r2, r3
 80103da:	9102      	str	r1, [sp, #8]
 80103dc:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 80103e0:	9103      	str	r1, [sp, #12]
 80103e2:	d173      	bne.n	80104cc <pool_func_mp_array_f32+0x128>
 80103e4:	9904      	ldr	r1, [sp, #16]
 80103e6:	9d02      	ldr	r5, [sp, #8]
 80103e8:	eba1 000b 	sub.w	r0, r1, fp
 80103ec:	9e05      	ldr	r6, [sp, #20]
 80103ee:	1e69      	subs	r1, r5, #1
 80103f0:	3801      	subs	r0, #1
 80103f2:	fb11 0106 	smlabb	r1, r1, r6, r0
 80103f6:	0409      	lsls	r1, r1, #16
 80103f8:	d568      	bpl.n	80104cc <pool_func_mp_array_f32+0x128>
 80103fa:	9901      	ldr	r1, [sp, #4]
 80103fc:	9e03      	ldr	r6, [sp, #12]
 80103fe:	eba1 0008 	sub.w	r0, r1, r8
 8010402:	9f06      	ldr	r7, [sp, #24]
 8010404:	1e71      	subs	r1, r6, #1
 8010406:	3801      	subs	r0, #1
 8010408:	fb11 0107 	smlabb	r1, r1, r7, r0
 801040c:	040f      	lsls	r7, r1, #16
 801040e:	d55d      	bpl.n	80104cc <pool_func_mp_array_f32+0x128>
 8010410:	2e00      	cmp	r6, #0
 8010412:	d058      	beq.n	80104c6 <pool_func_mp_array_f32+0x122>
 8010414:	2d00      	cmp	r5, #0
 8010416:	d056      	beq.n	80104c6 <pool_func_mp_array_f32+0x122>
 8010418:	4663      	mov	r3, ip
 801041a:	2b00      	cmp	r3, #0
 801041c:	d053      	beq.n	80104c6 <pool_func_mp_array_f32+0x122>
 801041e:	2b01      	cmp	r3, #1
 8010420:	f040 814a 	bne.w	80106b8 <pool_func_mp_array_f32+0x314>
 8010424:	46a2      	mov	sl, r4
 8010426:	4623      	mov	r3, r4
 8010428:	9407      	str	r4, [sp, #28]
 801042a:	9a02      	ldr	r2, [sp, #8]
 801042c:	2700      	movs	r7, #0
 801042e:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8010432:	fb02 f303 	mul.w	r3, r2, r3
 8010436:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801043a:	46be      	mov	lr, r7
 801043c:	46bc      	mov	ip, r7
 801043e:	9308      	str	r3, [sp, #32]
 8010440:	fa0f f38a 	sxth.w	r3, sl
 8010444:	9309      	str	r3, [sp, #36]	@ 0x24
 8010446:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010448:	b23d      	sxth	r5, r7
 801044a:	9b08      	ldr	r3, [sp, #32]
 801044c:	fa0f f088 	sxth.w	r0, r8
 8010450:	42b4      	cmp	r4, r6
 8010452:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80106b4 <pool_func_mp_array_f32+0x310>
 8010456:	449c      	add	ip, r3
 8010458:	da12      	bge.n	8010480 <pool_func_mp_array_f32+0xdc>
 801045a:	4285      	cmp	r5, r0
 801045c:	da0c      	bge.n	8010478 <pool_func_mp_array_f32+0xd4>
 801045e:	fb04 520b 	mla	r2, r4, fp, r5
 8010462:	462b      	mov	r3, r5
 8010464:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8010468:	3301      	adds	r3, #1
 801046a:	ecb2 7a01 	vldmia	r2!, {s14}
 801046e:	b219      	sxth	r1, r3
 8010470:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8010474:	4281      	cmp	r1, r0
 8010476:	dbf7      	blt.n	8010468 <pool_func_mp_array_f32+0xc4>
 8010478:	3401      	adds	r4, #1
 801047a:	b224      	sxth	r4, r4
 801047c:	42b4      	cmp	r4, r6
 801047e:	dbec      	blt.n	801045a <pool_func_mp_array_f32+0xb6>
 8010480:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010482:	f10e 0e01 	add.w	lr, lr, #1
 8010486:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801048a:	9b05      	ldr	r3, [sp, #20]
 801048c:	fa0f fe8e 	sxth.w	lr, lr
 8010490:	4498      	add	r8, r3
 8010492:	441f      	add	r7, r3
 8010494:	9b02      	ldr	r3, [sp, #8]
 8010496:	edcc 7a00 	vstr	s15, [ip]
 801049a:	fa1f f888 	uxth.w	r8, r8
 801049e:	4573      	cmp	r3, lr
 80104a0:	b2bf      	uxth	r7, r7
 80104a2:	46f4      	mov	ip, lr
 80104a4:	dccf      	bgt.n	8010446 <pool_func_mp_array_f32+0xa2>
 80104a6:	9a07      	ldr	r2, [sp, #28]
 80104a8:	9906      	ldr	r1, [sp, #24]
 80104aa:	9b01      	ldr	r3, [sp, #4]
 80104ac:	3201      	adds	r2, #1
 80104ae:	448a      	add	sl, r1
 80104b0:	b212      	sxth	r2, r2
 80104b2:	440b      	add	r3, r1
 80104b4:	9903      	ldr	r1, [sp, #12]
 80104b6:	fa1f fa8a 	uxth.w	sl, sl
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	9207      	str	r2, [sp, #28]
 80104be:	4291      	cmp	r1, r2
 80104c0:	9301      	str	r3, [sp, #4]
 80104c2:	4613      	mov	r3, r2
 80104c4:	dcb1      	bgt.n	801042a <pool_func_mp_array_f32+0x86>
 80104c6:	b011      	add	sp, #68	@ 0x44
 80104c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104cc:	9903      	ldr	r1, [sp, #12]
 80104ce:	2900      	cmp	r1, #0
 80104d0:	d0f9      	beq.n	80104c6 <pool_func_mp_array_f32+0x122>
 80104d2:	9902      	ldr	r1, [sp, #8]
 80104d4:	2900      	cmp	r1, #0
 80104d6:	d0f6      	beq.n	80104c6 <pool_func_mp_array_f32+0x122>
 80104d8:	4661      	mov	r1, ip
 80104da:	2900      	cmp	r1, #0
 80104dc:	d0f3      	beq.n	80104c6 <pool_func_mp_array_f32+0x122>
 80104de:	2901      	cmp	r1, #1
 80104e0:	9901      	ldr	r1, [sp, #4]
 80104e2:	d163      	bne.n	80105ac <pool_func_mp_array_f32+0x208>
 80104e4:	1a8a      	subs	r2, r1, r2
 80104e6:	9904      	ldr	r1, [sp, #16]
 80104e8:	1ac9      	subs	r1, r1, r3
 80104ea:	425b      	negs	r3, r3
 80104ec:	b292      	uxth	r2, r2
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	9204      	str	r2, [sp, #16]
 80104f2:	b28a      	uxth	r2, r1
 80104f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104f6:	2300      	movs	r3, #0
 80104f8:	920a      	str	r2, [sp, #40]	@ 0x28
 80104fa:	9307      	str	r3, [sp, #28]
 80104fc:	9a02      	ldr	r2, [sp, #8]
 80104fe:	2700      	movs	r7, #0
 8010500:	fb02 f303 	mul.w	r3, r2, r3
 8010504:	9a04      	ldr	r2, [sp, #16]
 8010506:	46bc      	mov	ip, r7
 8010508:	9308      	str	r3, [sp, #32]
 801050a:	b216      	sxth	r6, r2
 801050c:	9b01      	ldr	r3, [sp, #4]
 801050e:	1ad3      	subs	r3, r2, r3
 8010510:	e9dd ae0a 	ldrd	sl, lr, [sp, #40]	@ 0x28
 8010514:	b21b      	sxth	r3, r3
 8010516:	9309      	str	r3, [sp, #36]	@ 0x24
 8010518:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801051a:	fa0f f58e 	sxth.w	r5, lr
 801051e:	9b08      	ldr	r3, [sp, #32]
 8010520:	fa0f f48a 	sxth.w	r4, sl
 8010524:	428e      	cmp	r6, r1
 8010526:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80106b4 <pool_func_mp_array_f32+0x310>
 801052a:	449c      	add	ip, r3
 801052c:	dd1c      	ble.n	8010568 <pool_func_mp_array_f32+0x1c4>
 801052e:	42a5      	cmp	r5, r4
 8010530:	da16      	bge.n	8010560 <pool_func_mp_array_f32+0x1bc>
 8010532:	4588      	cmp	r8, r1
 8010534:	fb01 f20b 	mul.w	r2, r1, fp
 8010538:	dd12      	ble.n	8010560 <pool_func_mp_array_f32+0x1bc>
 801053a:	442a      	add	r2, r5
 801053c:	462b      	mov	r3, r5
 801053e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8010542:	ea41 0003 	orr.w	r0, r1, r3
 8010546:	0400      	lsls	r0, r0, #16
 8010548:	d405      	bmi.n	8010556 <pool_func_mp_array_f32+0x1b2>
 801054a:	459b      	cmp	fp, r3
 801054c:	dd03      	ble.n	8010556 <pool_func_mp_array_f32+0x1b2>
 801054e:	ed92 7a00 	vldr	s14, [r2]
 8010552:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8010556:	3301      	adds	r3, #1
 8010558:	3204      	adds	r2, #4
 801055a:	b218      	sxth	r0, r3
 801055c:	42a0      	cmp	r0, r4
 801055e:	dbf0      	blt.n	8010542 <pool_func_mp_array_f32+0x19e>
 8010560:	3101      	adds	r1, #1
 8010562:	b209      	sxth	r1, r1
 8010564:	42b1      	cmp	r1, r6
 8010566:	dbe2      	blt.n	801052e <pool_func_mp_array_f32+0x18a>
 8010568:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801056a:	3701      	adds	r7, #1
 801056c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8010570:	9b05      	ldr	r3, [sp, #20]
 8010572:	b23f      	sxth	r7, r7
 8010574:	449a      	add	sl, r3
 8010576:	449e      	add	lr, r3
 8010578:	9b02      	ldr	r3, [sp, #8]
 801057a:	edcc 7a00 	vstr	s15, [ip]
 801057e:	fa1f fa8a 	uxth.w	sl, sl
 8010582:	42bb      	cmp	r3, r7
 8010584:	fa1f fe8e 	uxth.w	lr, lr
 8010588:	46bc      	mov	ip, r7
 801058a:	dcc5      	bgt.n	8010518 <pool_func_mp_array_f32+0x174>
 801058c:	9a07      	ldr	r2, [sp, #28]
 801058e:	9b04      	ldr	r3, [sp, #16]
 8010590:	9906      	ldr	r1, [sp, #24]
 8010592:	3201      	adds	r2, #1
 8010594:	440b      	add	r3, r1
 8010596:	b212      	sxth	r2, r2
 8010598:	9903      	ldr	r1, [sp, #12]
 801059a:	b29b      	uxth	r3, r3
 801059c:	9207      	str	r2, [sp, #28]
 801059e:	4291      	cmp	r1, r2
 80105a0:	9304      	str	r3, [sp, #16]
 80105a2:	4613      	mov	r3, r2
 80105a4:	dcaa      	bgt.n	80104fc <pool_func_mp_array_f32+0x158>
 80105a6:	b011      	add	sp, #68	@ 0x44
 80105a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ac:	1a88      	subs	r0, r1, r2
 80105ae:	9904      	ldr	r1, [sp, #16]
 80105b0:	4252      	negs	r2, r2
 80105b2:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80105b6:	1ac9      	subs	r1, r1, r3
 80105b8:	425b      	negs	r3, r3
 80105ba:	b292      	uxth	r2, r2
 80105bc:	46e6      	mov	lr, ip
 80105be:	b29b      	uxth	r3, r3
 80105c0:	b280      	uxth	r0, r0
 80105c2:	9208      	str	r2, [sp, #32]
 80105c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80105c6:	b28a      	uxth	r2, r1
 80105c8:	2300      	movs	r3, #0
 80105ca:	9007      	str	r0, [sp, #28]
 80105cc:	920e      	str	r2, [sp, #56]	@ 0x38
 80105ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80105d0:	9a02      	ldr	r2, [sp, #8]
 80105d2:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 80105d6:	fb02 f303 	mul.w	r3, r2, r3
 80105da:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80105de:	920a      	str	r2, [sp, #40]	@ 0x28
 80105e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80105e2:	930d      	str	r3, [sp, #52]	@ 0x34
 80105e4:	2300      	movs	r3, #0
 80105e6:	9201      	str	r2, [sp, #4]
 80105e8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80105ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80105ec:	9204      	str	r2, [sp, #16]
 80105ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80105f0:	f04f 0c00 	mov.w	ip, #0
 80105f4:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 80105f8:	4413      	add	r3, r2
 80105fa:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80105fe:	4667      	mov	r7, ip
 8010600:	fb0e f303 	mul.w	r3, lr, r3
 8010604:	9309      	str	r3, [sp, #36]	@ 0x24
 8010606:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010608:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 80106b4 <pool_func_mp_array_f32+0x310>
 801060c:	42b1      	cmp	r1, r6
 801060e:	da1e      	bge.n	801064e <pool_func_mp_array_f32+0x2aa>
 8010610:	42a5      	cmp	r5, r4
 8010612:	da18      	bge.n	8010646 <pool_func_mp_array_f32+0x2a2>
 8010614:	4541      	cmp	r1, r8
 8010616:	fb01 f30b 	mul.w	r3, r1, fp
 801061a:	da14      	bge.n	8010646 <pool_func_mp_array_f32+0x2a2>
 801061c:	195a      	adds	r2, r3, r5
 801061e:	462b      	mov	r3, r5
 8010620:	fb0e 7202 	mla	r2, lr, r2, r7
 8010624:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8010628:	ea41 0003 	orr.w	r0, r1, r3
 801062c:	0400      	lsls	r0, r0, #16
 801062e:	d405      	bmi.n	801063c <pool_func_mp_array_f32+0x298>
 8010630:	459b      	cmp	fp, r3
 8010632:	dd03      	ble.n	801063c <pool_func_mp_array_f32+0x298>
 8010634:	ed92 7a00 	vldr	s14, [r2]
 8010638:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801063c:	3301      	adds	r3, #1
 801063e:	4452      	add	r2, sl
 8010640:	b218      	sxth	r0, r3
 8010642:	42a0      	cmp	r0, r4
 8010644:	dbf0      	blt.n	8010628 <pool_func_mp_array_f32+0x284>
 8010646:	3101      	adds	r1, #1
 8010648:	b209      	sxth	r1, r1
 801064a:	42b1      	cmp	r1, r6
 801064c:	dbe0      	blt.n	8010610 <pool_func_mp_array_f32+0x26c>
 801064e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010650:	f10c 0c01 	add.w	ip, ip, #1
 8010654:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010656:	443b      	add	r3, r7
 8010658:	fa0f fc8c 	sxth.w	ip, ip
 801065c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010660:	45f4      	cmp	ip, lr
 8010662:	4667      	mov	r7, ip
 8010664:	edc3 7a00 	vstr	s15, [r3]
 8010668:	dbcd      	blt.n	8010606 <pool_func_mp_array_f32+0x262>
 801066a:	9a01      	ldr	r2, [sp, #4]
 801066c:	9805      	ldr	r0, [sp, #20]
 801066e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010670:	4402      	add	r2, r0
 8010672:	9b04      	ldr	r3, [sp, #16]
 8010674:	3101      	adds	r1, #1
 8010676:	b292      	uxth	r2, r2
 8010678:	4403      	add	r3, r0
 801067a:	b209      	sxth	r1, r1
 801067c:	9201      	str	r2, [sp, #4]
 801067e:	b29b      	uxth	r3, r3
 8010680:	9a02      	ldr	r2, [sp, #8]
 8010682:	9304      	str	r3, [sp, #16]
 8010684:	460b      	mov	r3, r1
 8010686:	428a      	cmp	r2, r1
 8010688:	910c      	str	r1, [sp, #48]	@ 0x30
 801068a:	dcb0      	bgt.n	80105ee <pool_func_mp_array_f32+0x24a>
 801068c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801068e:	9b08      	ldr	r3, [sp, #32]
 8010690:	3101      	adds	r1, #1
 8010692:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 8010696:	b209      	sxth	r1, r1
 8010698:	4402      	add	r2, r0
 801069a:	4403      	add	r3, r0
 801069c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801069e:	b292      	uxth	r2, r2
 80106a0:	b29b      	uxth	r3, r3
 80106a2:	9207      	str	r2, [sp, #28]
 80106a4:	9a03      	ldr	r2, [sp, #12]
 80106a6:	9308      	str	r3, [sp, #32]
 80106a8:	460b      	mov	r3, r1
 80106aa:	428a      	cmp	r2, r1
 80106ac:	dc90      	bgt.n	80105d0 <pool_func_mp_array_f32+0x22c>
 80106ae:	b011      	add	sp, #68	@ 0x44
 80106b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106b4:	cf000000 	.word	0xcf000000
 80106b8:	4623      	mov	r3, r4
 80106ba:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80106be:	46e0      	mov	r8, ip
 80106c0:	9408      	str	r4, [sp, #32]
 80106c2:	9409      	str	r4, [sp, #36]	@ 0x24
 80106c4:	9a02      	ldr	r2, [sp, #8]
 80106c6:	f04f 0c00 	mov.w	ip, #0
 80106ca:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 80106ce:	fb02 f303 	mul.w	r3, r2, r3
 80106d2:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 80106d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80106d8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80106dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80106de:	9b04      	ldr	r3, [sp, #16]
 80106e0:	9307      	str	r3, [sp, #28]
 80106e2:	4663      	mov	r3, ip
 80106e4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80106e6:	f04f 0e00 	mov.w	lr, #0
 80106ea:	fa0f f58c 	sxth.w	r5, ip
 80106ee:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80106f2:	4413      	add	r3, r2
 80106f4:	4676      	mov	r6, lr
 80106f6:	fb08 f303 	mul.w	r3, r8, r3
 80106fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80106fc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80106fe:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 80106b4 <pool_func_mp_array_f32+0x310>
 8010702:	42bc      	cmp	r4, r7
 8010704:	da15      	bge.n	8010732 <pool_func_mp_array_f32+0x38e>
 8010706:	4285      	cmp	r5, r0
 8010708:	da0f      	bge.n	801072a <pool_func_mp_array_f32+0x386>
 801070a:	fb0b 5304 	mla	r3, fp, r4, r5
 801070e:	462a      	mov	r2, r5
 8010710:	fb08 6303 	mla	r3, r8, r3, r6
 8010714:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8010718:	3201      	adds	r2, #1
 801071a:	ed93 7a00 	vldr	s14, [r3]
 801071e:	4453      	add	r3, sl
 8010720:	b211      	sxth	r1, r2
 8010722:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8010726:	4281      	cmp	r1, r0
 8010728:	dbf6      	blt.n	8010718 <pool_func_mp_array_f32+0x374>
 801072a:	3401      	adds	r4, #1
 801072c:	b224      	sxth	r4, r4
 801072e:	42bc      	cmp	r4, r7
 8010730:	dbe9      	blt.n	8010706 <pool_func_mp_array_f32+0x362>
 8010732:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010734:	f10e 0e01 	add.w	lr, lr, #1
 8010738:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801073a:	4433      	add	r3, r6
 801073c:	fa0f fe8e 	sxth.w	lr, lr
 8010740:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010744:	45c6      	cmp	lr, r8
 8010746:	4676      	mov	r6, lr
 8010748:	edc3 7a00 	vstr	s15, [r3]
 801074c:	dbd6      	blt.n	80106fc <pool_func_mp_array_f32+0x358>
 801074e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010750:	9905      	ldr	r1, [sp, #20]
 8010752:	9b07      	ldr	r3, [sp, #28]
 8010754:	3201      	adds	r2, #1
 8010756:	448c      	add	ip, r1
 8010758:	b212      	sxth	r2, r2
 801075a:	440b      	add	r3, r1
 801075c:	9902      	ldr	r1, [sp, #8]
 801075e:	fa1f fc8c 	uxth.w	ip, ip
 8010762:	b29b      	uxth	r3, r3
 8010764:	920a      	str	r2, [sp, #40]	@ 0x28
 8010766:	4291      	cmp	r1, r2
 8010768:	9307      	str	r3, [sp, #28]
 801076a:	4613      	mov	r3, r2
 801076c:	dcba      	bgt.n	80106e4 <pool_func_mp_array_f32+0x340>
 801076e:	9a01      	ldr	r2, [sp, #4]
 8010770:	9806      	ldr	r0, [sp, #24]
 8010772:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010774:	4402      	add	r2, r0
 8010776:	9b08      	ldr	r3, [sp, #32]
 8010778:	3101      	adds	r1, #1
 801077a:	b292      	uxth	r2, r2
 801077c:	4403      	add	r3, r0
 801077e:	b209      	sxth	r1, r1
 8010780:	9201      	str	r2, [sp, #4]
 8010782:	b29b      	uxth	r3, r3
 8010784:	9a03      	ldr	r2, [sp, #12]
 8010786:	9308      	str	r3, [sp, #32]
 8010788:	460b      	mov	r3, r1
 801078a:	428a      	cmp	r2, r1
 801078c:	9109      	str	r1, [sp, #36]	@ 0x24
 801078e:	dc99      	bgt.n	80106c4 <pool_func_mp_array_f32+0x320>
 8010790:	e699      	b.n	80104c6 <pool_func_mp_array_f32+0x122>
 8010792:	bf00      	nop

08010794 <forward_lite_upsample_bilinear_if32of32>:
 8010794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010798:	ed2d 8b0a 	vpush	{d8-d12}
 801079c:	b08f      	sub	sp, #60	@ 0x3c
 801079e:	4683      	mov	fp, r0
 80107a0:	9104      	str	r1, [sp, #16]
 80107a2:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 80107a6:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 80107aa:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 80107ae:	9206      	str	r2, [sp, #24]
 80107b0:	2900      	cmp	r1, #0
 80107b2:	f000 80a7 	beq.w	8010904 <forward_lite_upsample_bilinear_if32of32+0x170>
 80107b6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80107ba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80107be:	ee70 aae7 	vsub.f32	s21, s1, s15
 80107c2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80107c6:	ee6a aa87 	vmul.f32	s21, s21, s14
 80107ca:	ee27 9a87 	vmul.f32	s18, s15, s14
 80107ce:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80107d2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80107d4:	ee87 baa0 	vdiv.f32	s22, s15, s1
 80107d8:	eec7 9a80 	vdiv.f32	s19, s15, s0
 80107dc:	2a00      	cmp	r2, #0
 80107de:	f000 808c 	beq.w	80108fa <forward_lite_upsample_bilinear_if32of32+0x166>
 80107e2:	3b01      	subs	r3, #1
 80107e4:	ea4f 068a 	mov.w	r6, sl, lsl #2
 80107e8:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8010910 <forward_lite_upsample_bilinear_if32of32+0x17c>
 80107ec:	ee07 3a90 	vmov	s15, r3
 80107f0:	9b06      	ldr	r3, [sp, #24]
 80107f2:	1e5a      	subs	r2, r3, #1
 80107f4:	fb0a f303 	mul.w	r3, sl, r3
 80107f8:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 80107fc:	ee0c 2a90 	vmov	s25, r2
 8010800:	9305      	str	r3, [sp, #20]
 8010802:	2300      	movs	r3, #0
 8010804:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8010808:	9303      	str	r3, [sp, #12]
 801080a:	fb06 f308 	mul.w	r3, r6, r8
 801080e:	9307      	str	r3, [sp, #28]
 8010810:	eddd 7a03 	vldr	s15, [sp, #12]
 8010814:	9b05      	ldr	r3, [sp, #20]
 8010816:	eef8 ba67 	vcvt.f32.u32	s23, s15
 801081a:	ee7b baea 	vsub.f32	s23, s23, s21
 801081e:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8010822:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8010826:	fecb baca 	vminnm.f32	s23, s23, s20
 801082a:	eef4 ba4a 	vcmp.f32	s23, s20
 801082e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010832:	bf14      	ite	ne
 8010834:	4699      	movne	r9, r3
 8010836:	f04f 0900 	moveq.w	r9, #0
 801083a:	f1b8 0f00 	cmp.w	r8, #0
 801083e:	d056      	beq.n	80108ee <forward_lite_upsample_bilinear_if32of32+0x15a>
 8010840:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8010844:	9b06      	ldr	r3, [sp, #24]
 8010846:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801084a:	9d04      	ldr	r5, [sp, #16]
 801084c:	2400      	movs	r4, #0
 801084e:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8010852:	ee17 7a10 	vmov	r7, s14
 8010856:	ee38 ca6b 	vsub.f32	s24, s16, s23
 801085a:	fb03 f707 	mul.w	r7, r3, r7
 801085e:	ee7b bae7 	vsub.f32	s23, s23, s15
 8010862:	ee3c ca27 	vadd.f32	s24, s24, s15
 8010866:	ee07 4a90 	vmov	s15, r4
 801086a:	ab0a      	add	r3, sp, #40	@ 0x28
 801086c:	3401      	adds	r4, #1
 801086e:	4629      	mov	r1, r5
 8010870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010874:	9300      	str	r3, [sp, #0]
 8010876:	4652      	mov	r2, sl
 8010878:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 801087c:	4435      	add	r5, r6
 801087e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010882:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8010886:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 801088a:	fec7 7aec 	vminnm.f32	s15, s15, s25
 801088e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8010892:	eef4 7a6c 	vcmp.f32	s15, s25
 8010896:	ee38 7a67 	vsub.f32	s14, s16, s15
 801089a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 801089e:	ee16 0a90 	vmov	r0, s13
 80108a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a6:	4438      	add	r0, r7
 80108a8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80108ac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80108b0:	bf14      	ite	ne
 80108b2:	4653      	movne	r3, sl
 80108b4:	2300      	moveq	r3, #0
 80108b6:	fb06 b000 	mla	r0, r6, r0, fp
 80108ba:	ee67 5a0c 	vmul.f32	s11, s14, s24
 80108be:	ee27 6a8c 	vmul.f32	s12, s15, s24
 80108c2:	9308      	str	r3, [sp, #32]
 80108c4:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80108c8:	ab08      	add	r3, sp, #32
 80108ca:	ee67 7aab 	vmul.f32	s15, s15, s23
 80108ce:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 80108d2:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 80108d6:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 80108da:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 80108de:	f001 f9b1 	bl	8011c44 <lite_bilinear_if32of32_kernel>
 80108e2:	45a0      	cmp	r8, r4
 80108e4:	d1bf      	bne.n	8010866 <forward_lite_upsample_bilinear_if32of32+0xd2>
 80108e6:	9b04      	ldr	r3, [sp, #16]
 80108e8:	9a07      	ldr	r2, [sp, #28]
 80108ea:	4413      	add	r3, r2
 80108ec:	9304      	str	r3, [sp, #16]
 80108ee:	9b03      	ldr	r3, [sp, #12]
 80108f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80108f2:	3301      	adds	r3, #1
 80108f4:	429a      	cmp	r2, r3
 80108f6:	9303      	str	r3, [sp, #12]
 80108f8:	d18a      	bne.n	8010810 <forward_lite_upsample_bilinear_if32of32+0x7c>
 80108fa:	b00f      	add	sp, #60	@ 0x3c
 80108fc:	ecbd 8b0a 	vpop	{d8-d12}
 8010900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010904:	eddf aa02 	vldr	s21, [pc, #8]	@ 8010910 <forward_lite_upsample_bilinear_if32of32+0x17c>
 8010908:	eeb0 9a6a 	vmov.f32	s18, s21
 801090c:	e75f      	b.n	80107ce <forward_lite_upsample_bilinear_if32of32+0x3a>
 801090e:	bf00      	nop
 8010910:	00000000 	.word	0x00000000

08010914 <forward_lite_upsample_bilinear_is8os8>:
 8010914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010918:	ed2d 8b0a 	vpush	{d8-d12}
 801091c:	b08f      	sub	sp, #60	@ 0x3c
 801091e:	4682      	mov	sl, r0
 8010920:	9104      	str	r1, [sp, #16]
 8010922:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8010926:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8010928:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 801092c:	9206      	str	r2, [sp, #24]
 801092e:	2900      	cmp	r1, #0
 8010930:	f000 80aa 	beq.w	8010a88 <forward_lite_upsample_bilinear_is8os8+0x174>
 8010934:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010938:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801093c:	ee70 aae7 	vsub.f32	s21, s1, s15
 8010940:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010944:	ee6a aa87 	vmul.f32	s21, s21, s14
 8010948:	ee27 9a87 	vmul.f32	s18, s15, s14
 801094c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010950:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010952:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8010956:	eec7 9a80 	vdiv.f32	s19, s15, s0
 801095a:	2a00      	cmp	r2, #0
 801095c:	f000 808f 	beq.w	8010a7e <forward_lite_upsample_bilinear_is8os8+0x16a>
 8010960:	3b01      	subs	r3, #1
 8010962:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 8010a94 <forward_lite_upsample_bilinear_is8os8+0x180>
 8010966:	ee07 3a90 	vmov	s15, r3
 801096a:	9b06      	ldr	r3, [sp, #24]
 801096c:	1e5a      	subs	r2, r3, #1
 801096e:	fb0b f303 	mul.w	r3, fp, r3
 8010972:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8010976:	ee0c 2a90 	vmov	s25, r2
 801097a:	9305      	str	r3, [sp, #20]
 801097c:	fb07 f30b 	mul.w	r3, r7, fp
 8010980:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8010984:	9307      	str	r3, [sp, #28]
 8010986:	2300      	movs	r3, #0
 8010988:	9303      	str	r3, [sp, #12]
 801098a:	eddd 7a03 	vldr	s15, [sp, #12]
 801098e:	9b05      	ldr	r3, [sp, #20]
 8010990:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8010994:	ee7b baea 	vsub.f32	s23, s23, s21
 8010998:	ee6b ba8b 	vmul.f32	s23, s23, s22
 801099c:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 80109a0:	fecb baca 	vminnm.f32	s23, s23, s20
 80109a4:	eef4 ba4a 	vcmp.f32	s23, s20
 80109a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ac:	bf14      	ite	ne
 80109ae:	4698      	movne	r8, r3
 80109b0:	f04f 0800 	moveq.w	r8, #0
 80109b4:	2f00      	cmp	r7, #0
 80109b6:	d05c      	beq.n	8010a72 <forward_lite_upsample_bilinear_is8os8+0x15e>
 80109b8:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 80109bc:	9b06      	ldr	r3, [sp, #24]
 80109be:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80109c2:	9722      	str	r7, [sp, #136]	@ 0x88
 80109c4:	9d04      	ldr	r5, [sp, #16]
 80109c6:	4647      	mov	r7, r8
 80109c8:	eef8 7a47 	vcvt.f32.u32	s15, s14
 80109cc:	ee17 6a10 	vmov	r6, s14
 80109d0:	ee38 ca6b 	vsub.f32	s24, s16, s23
 80109d4:	2400      	movs	r4, #0
 80109d6:	fb03 f606 	mul.w	r6, r3, r6
 80109da:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 80109de:	ee7b bae7 	vsub.f32	s23, s23, s15
 80109e2:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 80109e6:	ee3c ca27 	vadd.f32	s24, s24, s15
 80109ea:	ee07 4a90 	vmov	s15, r4
 80109ee:	3401      	adds	r4, #1
 80109f0:	4629      	mov	r1, r5
 80109f2:	465a      	mov	r2, fp
 80109f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109f8:	f8cd 9000 	str.w	r9, [sp]
 80109fc:	9709      	str	r7, [sp, #36]	@ 0x24
 80109fe:	445d      	add	r5, fp
 8010a00:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010a04:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8010a08:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8010a0c:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8010a10:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8010a14:	eef4 7a6c 	vcmp.f32	s15, s25
 8010a18:	ee38 7a67 	vsub.f32	s14, s16, s15
 8010a1c:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8010a20:	ee16 0a90 	vmov	r0, s13
 8010a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a28:	4430      	add	r0, r6
 8010a2a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010a2e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010a32:	bf14      	ite	ne
 8010a34:	465b      	movne	r3, fp
 8010a36:	2300      	moveq	r3, #0
 8010a38:	fb0b a000 	mla	r0, fp, r0, sl
 8010a3c:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8010a40:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8010a44:	9308      	str	r3, [sp, #32]
 8010a46:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8010a4a:	ab08      	add	r3, sp, #32
 8010a4c:	ee67 7aab 	vmul.f32	s15, s15, s23
 8010a50:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8010a54:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8010a58:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8010a5c:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8010a60:	f001 f920 	bl	8011ca4 <lite_bilinear_is8os8_kernel>
 8010a64:	45a0      	cmp	r8, r4
 8010a66:	d1c0      	bne.n	80109ea <forward_lite_upsample_bilinear_is8os8+0xd6>
 8010a68:	9b04      	ldr	r3, [sp, #16]
 8010a6a:	4647      	mov	r7, r8
 8010a6c:	9a07      	ldr	r2, [sp, #28]
 8010a6e:	4413      	add	r3, r2
 8010a70:	9304      	str	r3, [sp, #16]
 8010a72:	9b03      	ldr	r3, [sp, #12]
 8010a74:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010a76:	3301      	adds	r3, #1
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	9303      	str	r3, [sp, #12]
 8010a7c:	d185      	bne.n	801098a <forward_lite_upsample_bilinear_is8os8+0x76>
 8010a7e:	b00f      	add	sp, #60	@ 0x3c
 8010a80:	ecbd 8b0a 	vpop	{d8-d12}
 8010a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a88:	eddf aa02 	vldr	s21, [pc, #8]	@ 8010a94 <forward_lite_upsample_bilinear_is8os8+0x180>
 8010a8c:	eeb0 9a6a 	vmov.f32	s18, s21
 8010a90:	e75c      	b.n	801094c <forward_lite_upsample_bilinear_is8os8+0x38>
 8010a92:	bf00      	nop
 8010a94:	00000000 	.word	0x00000000

08010a98 <forward_lite_upsample_bilinear_iu8ou8>:
 8010a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a9c:	ed2d 8b0a 	vpush	{d8-d12}
 8010aa0:	b08f      	sub	sp, #60	@ 0x3c
 8010aa2:	4682      	mov	sl, r0
 8010aa4:	9104      	str	r1, [sp, #16]
 8010aa6:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8010aaa:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8010aac:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8010ab0:	9206      	str	r2, [sp, #24]
 8010ab2:	2900      	cmp	r1, #0
 8010ab4:	f000 80aa 	beq.w	8010c0c <forward_lite_upsample_bilinear_iu8ou8+0x174>
 8010ab8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010abc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010ac0:	ee70 aae7 	vsub.f32	s21, s1, s15
 8010ac4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010ac8:	ee6a aa87 	vmul.f32	s21, s21, s14
 8010acc:	ee27 9a87 	vmul.f32	s18, s15, s14
 8010ad0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010ad4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010ad6:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8010ada:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8010ade:	2a00      	cmp	r2, #0
 8010ae0:	f000 808f 	beq.w	8010c02 <forward_lite_upsample_bilinear_iu8ou8+0x16a>
 8010ae4:	3b01      	subs	r3, #1
 8010ae6:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 8010c18 <forward_lite_upsample_bilinear_iu8ou8+0x180>
 8010aea:	ee07 3a90 	vmov	s15, r3
 8010aee:	9b06      	ldr	r3, [sp, #24]
 8010af0:	1e5a      	subs	r2, r3, #1
 8010af2:	fb0b f303 	mul.w	r3, fp, r3
 8010af6:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8010afa:	ee0c 2a90 	vmov	s25, r2
 8010afe:	9305      	str	r3, [sp, #20]
 8010b00:	fb07 f30b 	mul.w	r3, r7, fp
 8010b04:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8010b08:	9307      	str	r3, [sp, #28]
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	9303      	str	r3, [sp, #12]
 8010b0e:	eddd 7a03 	vldr	s15, [sp, #12]
 8010b12:	9b05      	ldr	r3, [sp, #20]
 8010b14:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8010b18:	ee7b baea 	vsub.f32	s23, s23, s21
 8010b1c:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8010b20:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8010b24:	fecb baca 	vminnm.f32	s23, s23, s20
 8010b28:	eef4 ba4a 	vcmp.f32	s23, s20
 8010b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b30:	bf14      	ite	ne
 8010b32:	4698      	movne	r8, r3
 8010b34:	f04f 0800 	moveq.w	r8, #0
 8010b38:	2f00      	cmp	r7, #0
 8010b3a:	d05c      	beq.n	8010bf6 <forward_lite_upsample_bilinear_iu8ou8+0x15e>
 8010b3c:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8010b40:	9b06      	ldr	r3, [sp, #24]
 8010b42:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8010b46:	9722      	str	r7, [sp, #136]	@ 0x88
 8010b48:	9d04      	ldr	r5, [sp, #16]
 8010b4a:	4647      	mov	r7, r8
 8010b4c:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8010b50:	ee17 6a10 	vmov	r6, s14
 8010b54:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8010b58:	2400      	movs	r4, #0
 8010b5a:	fb03 f606 	mul.w	r6, r3, r6
 8010b5e:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8010b62:	ee7b bae7 	vsub.f32	s23, s23, s15
 8010b66:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8010b6a:	ee3c ca27 	vadd.f32	s24, s24, s15
 8010b6e:	ee07 4a90 	vmov	s15, r4
 8010b72:	3401      	adds	r4, #1
 8010b74:	4629      	mov	r1, r5
 8010b76:	465a      	mov	r2, fp
 8010b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b7c:	f8cd 9000 	str.w	r9, [sp]
 8010b80:	9709      	str	r7, [sp, #36]	@ 0x24
 8010b82:	445d      	add	r5, fp
 8010b84:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010b88:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8010b8c:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8010b90:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8010b94:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8010b98:	eef4 7a6c 	vcmp.f32	s15, s25
 8010b9c:	ee38 7a67 	vsub.f32	s14, s16, s15
 8010ba0:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8010ba4:	ee16 0a90 	vmov	r0, s13
 8010ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bac:	4430      	add	r0, r6
 8010bae:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010bb2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010bb6:	bf14      	ite	ne
 8010bb8:	465b      	movne	r3, fp
 8010bba:	2300      	moveq	r3, #0
 8010bbc:	fb0b a000 	mla	r0, fp, r0, sl
 8010bc0:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8010bc4:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8010bc8:	9308      	str	r3, [sp, #32]
 8010bca:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8010bce:	ab08      	add	r3, sp, #32
 8010bd0:	ee67 7aab 	vmul.f32	s15, s15, s23
 8010bd4:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8010bd8:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8010bdc:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8010be0:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8010be4:	f001 f8bc 	bl	8011d60 <lite_bilinear_iu8ou8_kernel>
 8010be8:	45a0      	cmp	r8, r4
 8010bea:	d1c0      	bne.n	8010b6e <forward_lite_upsample_bilinear_iu8ou8+0xd6>
 8010bec:	9b04      	ldr	r3, [sp, #16]
 8010bee:	4647      	mov	r7, r8
 8010bf0:	9a07      	ldr	r2, [sp, #28]
 8010bf2:	4413      	add	r3, r2
 8010bf4:	9304      	str	r3, [sp, #16]
 8010bf6:	9b03      	ldr	r3, [sp, #12]
 8010bf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	429a      	cmp	r2, r3
 8010bfe:	9303      	str	r3, [sp, #12]
 8010c00:	d185      	bne.n	8010b0e <forward_lite_upsample_bilinear_iu8ou8+0x76>
 8010c02:	b00f      	add	sp, #60	@ 0x3c
 8010c04:	ecbd 8b0a 	vpop	{d8-d12}
 8010c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c0c:	eddf aa02 	vldr	s21, [pc, #8]	@ 8010c18 <forward_lite_upsample_bilinear_iu8ou8+0x180>
 8010c10:	eeb0 9a6a 	vmov.f32	s18, s21
 8010c14:	e75c      	b.n	8010ad0 <forward_lite_upsample_bilinear_iu8ou8+0x38>
 8010c16:	bf00      	nop
 8010c18:	00000000 	.word	0x00000000

08010c1c <forward_lite_upsample_bilinear_is16os16>:
 8010c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c20:	ed2d 8b0a 	vpush	{d8-d12}
 8010c24:	b08f      	sub	sp, #60	@ 0x3c
 8010c26:	4683      	mov	fp, r0
 8010c28:	9104      	str	r1, [sp, #16]
 8010c2a:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8010c2e:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8010c32:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 8010c36:	9206      	str	r2, [sp, #24]
 8010c38:	2900      	cmp	r1, #0
 8010c3a:	f000 80a7 	beq.w	8010d8c <forward_lite_upsample_bilinear_is16os16+0x170>
 8010c3e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010c42:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010c46:	ee70 aae7 	vsub.f32	s21, s1, s15
 8010c4a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010c4e:	ee6a aa87 	vmul.f32	s21, s21, s14
 8010c52:	ee27 9a87 	vmul.f32	s18, s15, s14
 8010c56:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010c5a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010c5c:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8010c60:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8010c64:	2a00      	cmp	r2, #0
 8010c66:	f000 808c 	beq.w	8010d82 <forward_lite_upsample_bilinear_is16os16+0x166>
 8010c6a:	3b01      	subs	r3, #1
 8010c6c:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8010c70:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8010d98 <forward_lite_upsample_bilinear_is16os16+0x17c>
 8010c74:	ee07 3a90 	vmov	s15, r3
 8010c78:	9b06      	ldr	r3, [sp, #24]
 8010c7a:	1e5a      	subs	r2, r3, #1
 8010c7c:	fb0a f303 	mul.w	r3, sl, r3
 8010c80:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8010c84:	ee0c 2a90 	vmov	s25, r2
 8010c88:	9305      	str	r3, [sp, #20]
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8010c90:	9303      	str	r3, [sp, #12]
 8010c92:	fb06 f308 	mul.w	r3, r6, r8
 8010c96:	9307      	str	r3, [sp, #28]
 8010c98:	eddd 7a03 	vldr	s15, [sp, #12]
 8010c9c:	9b05      	ldr	r3, [sp, #20]
 8010c9e:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8010ca2:	ee7b baea 	vsub.f32	s23, s23, s21
 8010ca6:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8010caa:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8010cae:	fecb baca 	vminnm.f32	s23, s23, s20
 8010cb2:	eef4 ba4a 	vcmp.f32	s23, s20
 8010cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cba:	bf14      	ite	ne
 8010cbc:	4699      	movne	r9, r3
 8010cbe:	f04f 0900 	moveq.w	r9, #0
 8010cc2:	f1b8 0f00 	cmp.w	r8, #0
 8010cc6:	d056      	beq.n	8010d76 <forward_lite_upsample_bilinear_is16os16+0x15a>
 8010cc8:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8010ccc:	9b06      	ldr	r3, [sp, #24]
 8010cce:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8010cd2:	9d04      	ldr	r5, [sp, #16]
 8010cd4:	2400      	movs	r4, #0
 8010cd6:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8010cda:	ee17 7a10 	vmov	r7, s14
 8010cde:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8010ce2:	fb03 f707 	mul.w	r7, r3, r7
 8010ce6:	ee7b bae7 	vsub.f32	s23, s23, s15
 8010cea:	ee3c ca27 	vadd.f32	s24, s24, s15
 8010cee:	ee07 4a90 	vmov	s15, r4
 8010cf2:	ab0a      	add	r3, sp, #40	@ 0x28
 8010cf4:	3401      	adds	r4, #1
 8010cf6:	4629      	mov	r1, r5
 8010cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cfc:	9300      	str	r3, [sp, #0]
 8010cfe:	4652      	mov	r2, sl
 8010d00:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8010d04:	4435      	add	r5, r6
 8010d06:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010d0a:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8010d0e:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8010d12:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8010d16:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8010d1a:	eef4 7a6c 	vcmp.f32	s15, s25
 8010d1e:	ee38 7a67 	vsub.f32	s14, s16, s15
 8010d22:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8010d26:	ee16 0a90 	vmov	r0, s13
 8010d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d2e:	4438      	add	r0, r7
 8010d30:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010d34:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010d38:	bf14      	ite	ne
 8010d3a:	4653      	movne	r3, sl
 8010d3c:	2300      	moveq	r3, #0
 8010d3e:	fb06 b000 	mla	r0, r6, r0, fp
 8010d42:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8010d46:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8010d4a:	9308      	str	r3, [sp, #32]
 8010d4c:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8010d50:	ab08      	add	r3, sp, #32
 8010d52:	ee67 7aab 	vmul.f32	s15, s15, s23
 8010d56:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8010d5a:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8010d5e:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8010d62:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8010d66:	f001 f845 	bl	8011df4 <lite_bilinear_is16os16_kernel>
 8010d6a:	45a0      	cmp	r8, r4
 8010d6c:	d1bf      	bne.n	8010cee <forward_lite_upsample_bilinear_is16os16+0xd2>
 8010d6e:	9b04      	ldr	r3, [sp, #16]
 8010d70:	9a07      	ldr	r2, [sp, #28]
 8010d72:	4413      	add	r3, r2
 8010d74:	9304      	str	r3, [sp, #16]
 8010d76:	9b03      	ldr	r3, [sp, #12]
 8010d78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010d7a:	3301      	adds	r3, #1
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	9303      	str	r3, [sp, #12]
 8010d80:	d18a      	bne.n	8010c98 <forward_lite_upsample_bilinear_is16os16+0x7c>
 8010d82:	b00f      	add	sp, #60	@ 0x3c
 8010d84:	ecbd 8b0a 	vpop	{d8-d12}
 8010d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d8c:	eddf aa02 	vldr	s21, [pc, #8]	@ 8010d98 <forward_lite_upsample_bilinear_is16os16+0x17c>
 8010d90:	eeb0 9a6a 	vmov.f32	s18, s21
 8010d94:	e75f      	b.n	8010c56 <forward_lite_upsample_bilinear_is16os16+0x3a>
 8010d96:	bf00      	nop
 8010d98:	00000000 	.word	0x00000000

08010d9c <forward_lite_upsample_bilinear_iu16ou16>:
 8010d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da0:	ed2d 8b0a 	vpush	{d8-d12}
 8010da4:	b08f      	sub	sp, #60	@ 0x3c
 8010da6:	4683      	mov	fp, r0
 8010da8:	9104      	str	r1, [sp, #16]
 8010daa:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8010dae:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8010db2:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 8010db6:	9206      	str	r2, [sp, #24]
 8010db8:	2900      	cmp	r1, #0
 8010dba:	f000 80a7 	beq.w	8010f0c <forward_lite_upsample_bilinear_iu16ou16+0x170>
 8010dbe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010dc2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010dc6:	ee70 aae7 	vsub.f32	s21, s1, s15
 8010dca:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010dce:	ee6a aa87 	vmul.f32	s21, s21, s14
 8010dd2:	ee27 9a87 	vmul.f32	s18, s15, s14
 8010dd6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010dda:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010ddc:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8010de0:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8010de4:	2a00      	cmp	r2, #0
 8010de6:	f000 808c 	beq.w	8010f02 <forward_lite_upsample_bilinear_iu16ou16+0x166>
 8010dea:	3b01      	subs	r3, #1
 8010dec:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8010df0:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8010f18 <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 8010df4:	ee07 3a90 	vmov	s15, r3
 8010df8:	9b06      	ldr	r3, [sp, #24]
 8010dfa:	1e5a      	subs	r2, r3, #1
 8010dfc:	fb0a f303 	mul.w	r3, sl, r3
 8010e00:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8010e04:	ee0c 2a90 	vmov	s25, r2
 8010e08:	9305      	str	r3, [sp, #20]
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8010e10:	9303      	str	r3, [sp, #12]
 8010e12:	fb06 f308 	mul.w	r3, r6, r8
 8010e16:	9307      	str	r3, [sp, #28]
 8010e18:	eddd 7a03 	vldr	s15, [sp, #12]
 8010e1c:	9b05      	ldr	r3, [sp, #20]
 8010e1e:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8010e22:	ee7b baea 	vsub.f32	s23, s23, s21
 8010e26:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8010e2a:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8010e2e:	fecb baca 	vminnm.f32	s23, s23, s20
 8010e32:	eef4 ba4a 	vcmp.f32	s23, s20
 8010e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e3a:	bf14      	ite	ne
 8010e3c:	4699      	movne	r9, r3
 8010e3e:	f04f 0900 	moveq.w	r9, #0
 8010e42:	f1b8 0f00 	cmp.w	r8, #0
 8010e46:	d056      	beq.n	8010ef6 <forward_lite_upsample_bilinear_iu16ou16+0x15a>
 8010e48:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8010e4c:	9b06      	ldr	r3, [sp, #24]
 8010e4e:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8010e52:	9d04      	ldr	r5, [sp, #16]
 8010e54:	2400      	movs	r4, #0
 8010e56:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8010e5a:	ee17 7a10 	vmov	r7, s14
 8010e5e:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8010e62:	fb03 f707 	mul.w	r7, r3, r7
 8010e66:	ee7b bae7 	vsub.f32	s23, s23, s15
 8010e6a:	ee3c ca27 	vadd.f32	s24, s24, s15
 8010e6e:	ee07 4a90 	vmov	s15, r4
 8010e72:	ab0a      	add	r3, sp, #40	@ 0x28
 8010e74:	3401      	adds	r4, #1
 8010e76:	4629      	mov	r1, r5
 8010e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e7c:	9300      	str	r3, [sp, #0]
 8010e7e:	4652      	mov	r2, sl
 8010e80:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8010e84:	4435      	add	r5, r6
 8010e86:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010e8a:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8010e8e:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8010e92:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8010e96:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8010e9a:	eef4 7a6c 	vcmp.f32	s15, s25
 8010e9e:	ee38 7a67 	vsub.f32	s14, s16, s15
 8010ea2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8010ea6:	ee16 0a90 	vmov	r0, s13
 8010eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eae:	4438      	add	r0, r7
 8010eb0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010eb4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010eb8:	bf14      	ite	ne
 8010eba:	4653      	movne	r3, sl
 8010ebc:	2300      	moveq	r3, #0
 8010ebe:	fb06 b000 	mla	r0, r6, r0, fp
 8010ec2:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8010ec6:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8010eca:	9308      	str	r3, [sp, #32]
 8010ecc:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8010ed0:	ab08      	add	r3, sp, #32
 8010ed2:	ee67 7aab 	vmul.f32	s15, s15, s23
 8010ed6:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8010eda:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8010ede:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8010ee2:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8010ee6:	f000 ffdb 	bl	8011ea0 <lite_bilinear_iu16ou16_kernel>
 8010eea:	45a0      	cmp	r8, r4
 8010eec:	d1bf      	bne.n	8010e6e <forward_lite_upsample_bilinear_iu16ou16+0xd2>
 8010eee:	9b04      	ldr	r3, [sp, #16]
 8010ef0:	9a07      	ldr	r2, [sp, #28]
 8010ef2:	4413      	add	r3, r2
 8010ef4:	9304      	str	r3, [sp, #16]
 8010ef6:	9b03      	ldr	r3, [sp, #12]
 8010ef8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010efa:	3301      	adds	r3, #1
 8010efc:	429a      	cmp	r2, r3
 8010efe:	9303      	str	r3, [sp, #12]
 8010f00:	d18a      	bne.n	8010e18 <forward_lite_upsample_bilinear_iu16ou16+0x7c>
 8010f02:	b00f      	add	sp, #60	@ 0x3c
 8010f04:	ecbd 8b0a 	vpop	{d8-d12}
 8010f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f0c:	eddf aa02 	vldr	s21, [pc, #8]	@ 8010f18 <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 8010f10:	eeb0 9a6a 	vmov.f32	s18, s21
 8010f14:	e75f      	b.n	8010dd6 <forward_lite_upsample_bilinear_iu16ou16+0x3a>
 8010f16:	bf00      	nop
 8010f18:	00000000 	.word	0x00000000

08010f1c <forward_lite_dense_if32of32wf32>:
 8010f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f20:	ed2d 8b0c 	vpush	{d8-d13}
 8010f24:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8010f28:	6801      	ldr	r1, [r0, #0]
 8010f2a:	b083      	sub	sp, #12
 8010f2c:	fb02 f303 	mul.w	r3, r2, r3
 8010f30:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8010f34:	9100      	str	r1, [sp, #0]
 8010f36:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010f3a:	4299      	cmp	r1, r3
 8010f3c:	9301      	str	r3, [sp, #4]
 8010f3e:	f080 811c 	bcs.w	801117a <forward_lite_dense_if32of32wf32+0x25e>
 8010f42:	4607      	mov	r7, r0
 8010f44:	6904      	ldr	r4, [r0, #16]
 8010f46:	0096      	lsls	r6, r2, #2
 8010f48:	9b00      	ldr	r3, [sp, #0]
 8010f4a:	68bd      	ldr	r5, [r7, #8]
 8010f4c:	eb03 0e06 	add.w	lr, r3, r6
 8010f50:	461e      	mov	r6, r3
 8010f52:	459e      	cmp	lr, r3
 8010f54:	f240 8103 	bls.w	801115e <forward_lite_dense_if32of32wf32+0x242>
 8010f58:	f1a4 0c10 	sub.w	ip, r4, #16
 8010f5c:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8010f60:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8010f64:	f10c 0c01 	add.w	ip, ip, #1
 8010f68:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8010f6c:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8010f70:	2c0f      	cmp	r4, #15
 8010f72:	f240 8107 	bls.w	8011184 <forward_lite_dense_if32of32wf32+0x268>
 8010f76:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 8010f7a:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8010f7e:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80111d4 <forward_lite_dense_if32of32wf32+0x2b8>
 8010f82:	4621      	mov	r1, r4
 8010f84:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8010f88:	3910      	subs	r1, #16
 8010f8a:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8010f8e:	3340      	adds	r3, #64	@ 0x40
 8010f90:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8010f94:	290f      	cmp	r1, #15
 8010f96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010f9a:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8010f9e:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8010fa2:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8010fa6:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8010faa:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010fae:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8010fb2:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 8010fb6:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 8010fba:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 8010fbe:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 8010fc2:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 8010fc6:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010fca:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 8010fce:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 8010fd2:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 8010fd6:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 8010fda:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 8010fde:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 8010fe2:	eeed 7a26 	vfma.f32	s15, s26, s13
 8010fe6:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 8010fea:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8010fee:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 8010ff2:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8010ff6:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 8010ffa:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8010ffe:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8011002:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8011006:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 801100a:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 801100e:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8011012:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8011016:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 801101a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801101e:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8011022:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8011026:	eeea 7a8a 	vfma.f32	s15, s21, s20
 801102a:	eee9 7a89 	vfma.f32	s15, s19, s18
 801102e:	eee8 7a88 	vfma.f32	s15, s17, s16
 8011032:	eee0 7a20 	vfma.f32	s15, s0, s1
 8011036:	eee1 7a21 	vfma.f32	s15, s2, s3
 801103a:	eee2 7a22 	vfma.f32	s15, s4, s5
 801103e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011042:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011046:	eee5 7a25 	vfma.f32	s15, s10, s11
 801104a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801104e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011052:	d897      	bhi.n	8010f84 <forward_lite_dense_if32of32wf32+0x68>
 8011054:	eb05 020b 	add.w	r2, r5, fp
 8011058:	f004 010f 	and.w	r1, r4, #15
 801105c:	4663      	mov	r3, ip
 801105e:	2903      	cmp	r1, #3
 8011060:	d95f      	bls.n	8011122 <forward_lite_dense_if32of32wf32+0x206>
 8011062:	edd2 6a01 	vldr	s13, [r2, #4]
 8011066:	1f08      	subs	r0, r1, #4
 8011068:	edd3 7a01 	vldr	s15, [r3, #4]
 801106c:	ed93 4a00 	vldr	s8, [r3]
 8011070:	2803      	cmp	r0, #3
 8011072:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011076:	edd2 4a00 	vldr	s9, [r2]
 801107a:	ed93 5a02 	vldr	s10, [r3, #8]
 801107e:	edd2 5a02 	vldr	s11, [r2, #8]
 8011082:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011086:	ed93 6a03 	vldr	s12, [r3, #12]
 801108a:	edd2 6a03 	vldr	s13, [r2, #12]
 801108e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011092:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011096:	eee6 7a26 	vfma.f32	s15, s12, s13
 801109a:	eeb0 7a67 	vmov.f32	s14, s15
 801109e:	d938      	bls.n	8011112 <forward_lite_dense_if32of32wf32+0x1f6>
 80110a0:	edd2 6a05 	vldr	s13, [r2, #20]
 80110a4:	f1a1 0a08 	sub.w	sl, r1, #8
 80110a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80110ac:	ed93 4a04 	vldr	s8, [r3, #16]
 80110b0:	f1ba 0f03 	cmp.w	sl, #3
 80110b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80110b8:	edd2 4a04 	vldr	s9, [r2, #16]
 80110bc:	ed93 5a06 	vldr	s10, [r3, #24]
 80110c0:	edd2 5a06 	vldr	s11, [r2, #24]
 80110c4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80110c8:	ed93 6a07 	vldr	s12, [r3, #28]
 80110cc:	edd2 6a07 	vldr	s13, [r2, #28]
 80110d0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80110d4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80110d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80110dc:	d919      	bls.n	8011112 <forward_lite_dense_if32of32wf32+0x1f6>
 80110de:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80110e2:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80110e6:	ed92 4a08 	vldr	s8, [r2, #32]
 80110ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80110ee:	edd3 4a08 	vldr	s9, [r3, #32]
 80110f2:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 80110f6:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 80110fa:	eee4 7a24 	vfma.f32	s15, s8, s9
 80110fe:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8011102:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8011106:	eee5 7a25 	vfma.f32	s15, s10, s11
 801110a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801110e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011112:	0880      	lsrs	r0, r0, #2
 8011114:	f001 0103 	and.w	r1, r1, #3
 8011118:	3001      	adds	r0, #1
 801111a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 801111e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8011122:	b1a9      	cbz	r1, 8011150 <forward_lite_dense_if32of32wf32+0x234>
 8011124:	edd3 6a00 	vldr	s13, [r3]
 8011128:	3901      	subs	r1, #1
 801112a:	edd2 7a00 	vldr	s15, [r2]
 801112e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011132:	d00d      	beq.n	8011150 <forward_lite_dense_if32of32wf32+0x234>
 8011134:	edd3 6a01 	vldr	s13, [r3, #4]
 8011138:	2901      	cmp	r1, #1
 801113a:	edd2 7a01 	vldr	s15, [r2, #4]
 801113e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011142:	d005      	beq.n	8011150 <forward_lite_dense_if32of32wf32+0x234>
 8011144:	edd2 6a02 	vldr	s13, [r2, #8]
 8011148:	edd3 7a02 	vldr	s15, [r3, #8]
 801114c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011150:	eca6 7a01 	vstmia	r6!, {s14}
 8011154:	45b6      	cmp	lr, r6
 8011156:	444d      	add	r5, r9
 8011158:	f63f af0a 	bhi.w	8010f70 <forward_lite_dense_if32of32wf32+0x54>
 801115c:	697a      	ldr	r2, [r7, #20]
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	b9b3      	cbnz	r3, 8011190 <forward_lite_dense_if32of32wf32+0x274>
 8011162:	9b00      	ldr	r3, [sp, #0]
 8011164:	0096      	lsls	r6, r2, #2
 8011166:	9901      	ldr	r1, [sp, #4]
 8011168:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801116c:	693c      	ldr	r4, [r7, #16]
 801116e:	4299      	cmp	r1, r3
 8011170:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8011174:	9300      	str	r3, [sp, #0]
 8011176:	f63f aee7 	bhi.w	8010f48 <forward_lite_dense_if32of32wf32+0x2c>
 801117a:	b003      	add	sp, #12
 801117c:	ecbd 8b0c 	vpop	{d8-d13}
 8011180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011184:	4621      	mov	r1, r4
 8011186:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80111d4 <forward_lite_dense_if32of32wf32+0x2b8>
 801118a:	462a      	mov	r2, r5
 801118c:	4643      	mov	r3, r8
 801118e:	e766      	b.n	801105e <forward_lite_dense_if32of32wf32+0x142>
 8011190:	2a00      	cmp	r2, #0
 8011192:	d0e6      	beq.n	8011162 <forward_lite_dense_if32of32wf32+0x246>
 8011194:	9a00      	ldr	r2, [sp, #0]
 8011196:	ed93 7a00 	vldr	s14, [r3]
 801119a:	edd2 7a00 	vldr	s15, [r2]
 801119e:	4613      	mov	r3, r2
 80111a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80111a4:	edc2 7a00 	vstr	s15, [r2]
 80111a8:	697a      	ldr	r2, [r7, #20]
 80111aa:	2a01      	cmp	r2, #1
 80111ac:	d9d9      	bls.n	8011162 <forward_lite_dense_if32of32wf32+0x246>
 80111ae:	1d19      	adds	r1, r3, #4
 80111b0:	2301      	movs	r3, #1
 80111b2:	68fa      	ldr	r2, [r7, #12]
 80111b4:	ed91 7a00 	vldr	s14, [r1]
 80111b8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80111bc:	3301      	adds	r3, #1
 80111be:	edd2 7a00 	vldr	s15, [r2]
 80111c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80111c6:	ece1 7a01 	vstmia	r1!, {s15}
 80111ca:	697a      	ldr	r2, [r7, #20]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d8f0      	bhi.n	80111b2 <forward_lite_dense_if32of32wf32+0x296>
 80111d0:	e7c7      	b.n	8011162 <forward_lite_dense_if32of32wf32+0x246>
 80111d2:	bf00      	nop
 80111d4:	00000000 	.word	0x00000000

080111d8 <forward_lite_dense_if32of32wf32_lut4>:
 80111d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111dc:	b08d      	sub	sp, #52	@ 0x34
 80111de:	4605      	mov	r5, r0
 80111e0:	460c      	mov	r4, r1
 80111e2:	9005      	str	r0, [sp, #20]
 80111e4:	4618      	mov	r0, r3
 80111e6:	920a      	str	r2, [sp, #40]	@ 0x28
 80111e8:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80111ea:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 80111ee:	fb02 f303 	mul.w	r3, r2, r3
 80111f2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80111f6:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80111f8:	9308      	str	r3, [sp, #32]
 80111fa:	b126      	cbz	r6, 8011206 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 80111fc:	2240      	movs	r2, #64	@ 0x40
 80111fe:	4631      	mov	r1, r6
 8011200:	f000 fbe0 	bl	80119c4 <st_int8_copy>
 8011204:	4630      	mov	r0, r6
 8011206:	9b05      	ldr	r3, [sp, #20]
 8011208:	9a08      	ldr	r2, [sp, #32]
 801120a:	4293      	cmp	r3, r2
 801120c:	f080 80f7 	bcs.w	80113fe <forward_lite_dense_if32of32wf32_lut4+0x226>
 8011210:	08eb      	lsrs	r3, r5, #3
 8011212:	f005 0101 	and.w	r1, r5, #1
 8011216:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011218:	f025 0801 	bic.w	r8, r5, #1
 801121c:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8011220:	9301      	str	r3, [sp, #4]
 8011222:	009b      	lsls	r3, r3, #2
 8011224:	9102      	str	r1, [sp, #8]
 8011226:	0092      	lsls	r2, r2, #2
 8011228:	f104 0b20 	add.w	fp, r4, #32
 801122c:	00a9      	lsls	r1, r5, #2
 801122e:	9304      	str	r3, [sp, #16]
 8011230:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8011234:	9b05      	ldr	r3, [sp, #20]
 8011236:	9207      	str	r2, [sp, #28]
 8011238:	9109      	str	r1, [sp, #36]	@ 0x24
 801123a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801123c:	9a07      	ldr	r2, [sp, #28]
 801123e:	eb03 0902 	add.w	r9, r3, r2
 8011242:	f1ab 0220 	sub.w	r2, fp, #32
 8011246:	4599      	cmp	r9, r3
 8011248:	9206      	str	r2, [sp, #24]
 801124a:	f240 80db 	bls.w	8011404 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 801124e:	469e      	mov	lr, r3
 8011250:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011252:	f108 33ff 	add.w	r3, r8, #4294967295
 8011256:	9303      	str	r3, [sp, #12]
 8011258:	9b01      	ldr	r3, [sp, #4]
 801125a:	2b00      	cmp	r3, #0
 801125c:	f000 80b4 	beq.w	80113c8 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8011260:	9b04      	ldr	r3, [sp, #16]
 8011262:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8011428 <forward_lite_dense_if32of32wf32_lut4+0x250>
 8011266:	18d4      	adds	r4, r2, r3
 8011268:	465b      	mov	r3, fp
 801126a:	7816      	ldrb	r6, [r2, #0]
 801126c:	3204      	adds	r2, #4
 801126e:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8011272:	3320      	adds	r3, #32
 8011274:	f006 070f 	and.w	r7, r6, #15
 8011278:	0936      	lsrs	r6, r6, #4
 801127a:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 801127e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8011282:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 8011286:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801128a:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 801128e:	edd7 7a00 	vldr	s15, [r7]
 8011292:	ed96 3a00 	vldr	s6, [r6]
 8011296:	092e      	lsrs	r6, r5, #4
 8011298:	ee67 7aa2 	vmul.f32	s15, s15, s5
 801129c:	f005 050f 	and.w	r5, r5, #15
 80112a0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80112a4:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80112a8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80112ac:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 80112b0:	eee3 7a04 	vfma.f32	s15, s6, s8
 80112b4:	ed96 3a00 	vldr	s6, [r6]
 80112b8:	ed95 4a00 	vldr	s8, [r5]
 80112bc:	090d      	lsrs	r5, r1, #4
 80112be:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 80112c2:	f001 010f 	and.w	r1, r1, #15
 80112c6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80112ca:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 80112ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80112d2:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 80112d6:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 80112da:	eee3 7a23 	vfma.f32	s15, s6, s7
 80112de:	eee4 7a05 	vfma.f32	s15, s8, s10
 80112e2:	ed95 4a00 	vldr	s8, [r5]
 80112e6:	ed91 5a00 	vldr	s10, [r1]
 80112ea:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80112ee:	42a2      	cmp	r2, r4
 80112f0:	ea4f 1511 	mov.w	r5, r1, lsr #4
 80112f4:	f001 010f 	and.w	r1, r1, #15
 80112f8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80112fc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8011300:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011304:	eee5 7a06 	vfma.f32	s15, s10, s12
 8011308:	ed95 5a00 	vldr	s10, [r5]
 801130c:	ed91 6a00 	vldr	s12, [r1]
 8011310:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011314:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011318:	ee37 7a27 	vadd.f32	s14, s14, s15
 801131c:	d1a5      	bne.n	801126a <forward_lite_dense_if32of32wf32_lut4+0x92>
 801131e:	4656      	mov	r6, sl
 8011320:	4546      	cmp	r6, r8
 8011322:	d257      	bcs.n	80113d4 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8011324:	9b03      	ldr	r3, [sp, #12]
 8011326:	f106 0208 	add.w	r2, r6, #8
 801132a:	1e61      	subs	r1, r4, #1
 801132c:	1b9d      	subs	r5, r3, r6
 801132e:	08ef      	lsrs	r7, r5, #3
 8011330:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 8011334:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011338:	3208      	adds	r2, #8
 801133a:	ed52 5a03 	vldr	s11, [r2, #-12]
 801133e:	f003 0c0f 	and.w	ip, r3, #15
 8011342:	091b      	lsrs	r3, r3, #4
 8011344:	ed52 6a04 	vldr	s13, [r2, #-16]
 8011348:	42a9      	cmp	r1, r5
 801134a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 801134e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011352:	eddc 7a00 	vldr	s15, [ip]
 8011356:	ed93 6a00 	vldr	s12, [r3]
 801135a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801135e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011362:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011366:	d1e5      	bne.n	8011334 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 8011368:	3701      	adds	r7, #1
 801136a:	19e2      	adds	r2, r4, r7
 801136c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8011370:	9b02      	ldr	r3, [sp, #8]
 8011372:	b30b      	cbz	r3, 80113b8 <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 8011374:	f812 3b01 	ldrb.w	r3, [r2], #1
 8011378:	edd6 7a00 	vldr	s15, [r6]
 801137c:	091b      	lsrs	r3, r3, #4
 801137e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011382:	edd3 6a00 	vldr	s13, [r3]
 8011386:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801138a:	ecae 7a01 	vstmia	lr!, {s14}
 801138e:	45f1      	cmp	r9, lr
 8011390:	f63f af62 	bhi.w	8011258 <forward_lite_dense_if32of32wf32_lut4+0x80>
 8011394:	9b05      	ldr	r3, [sp, #20]
 8011396:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011398:	1899      	adds	r1, r3, r2
 801139a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801139c:	b9e3      	cbnz	r3, 80113d8 <forward_lite_dense_if32of32wf32_lut4+0x200>
 801139e:	9b08      	ldr	r3, [sp, #32]
 80113a0:	428b      	cmp	r3, r1
 80113a2:	d92c      	bls.n	80113fe <forward_lite_dense_if32of32wf32_lut4+0x226>
 80113a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113a6:	4498      	add	r8, r3
 80113a8:	449a      	add	sl, r3
 80113aa:	449b      	add	fp, r3
 80113ac:	9b05      	ldr	r3, [sp, #20]
 80113ae:	4599      	cmp	r9, r3
 80113b0:	d92a      	bls.n	8011408 <forward_lite_dense_if32of32wf32_lut4+0x230>
 80113b2:	460b      	mov	r3, r1
 80113b4:	9105      	str	r1, [sp, #20]
 80113b6:	e741      	b.n	801123c <forward_lite_dense_if32of32wf32_lut4+0x64>
 80113b8:	ecae 7a01 	vstmia	lr!, {s14}
 80113bc:	45f1      	cmp	r9, lr
 80113be:	d9e9      	bls.n	8011394 <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 80113c0:	9b01      	ldr	r3, [sp, #4]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	f47f af4c 	bne.w	8011260 <forward_lite_dense_if32of32wf32_lut4+0x88>
 80113c8:	9e06      	ldr	r6, [sp, #24]
 80113ca:	4614      	mov	r4, r2
 80113cc:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8011428 <forward_lite_dense_if32of32wf32_lut4+0x250>
 80113d0:	4546      	cmp	r6, r8
 80113d2:	d3a7      	bcc.n	8011324 <forward_lite_dense_if32of32wf32_lut4+0x14c>
 80113d4:	4622      	mov	r2, r4
 80113d6:	e7cb      	b.n	8011370 <forward_lite_dense_if32of32wf32_lut4+0x198>
 80113d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d0df      	beq.n	801139e <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 80113de:	9b07      	ldr	r3, [sp, #28]
 80113e0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80113e2:	1acb      	subs	r3, r1, r3
 80113e4:	edd3 7a00 	vldr	s15, [r3]
 80113e8:	ecb2 7a01 	vldmia	r2!, {s14}
 80113ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80113f0:	ece3 7a01 	vstmia	r3!, {s15}
 80113f4:	428b      	cmp	r3, r1
 80113f6:	d1f5      	bne.n	80113e4 <forward_lite_dense_if32of32wf32_lut4+0x20c>
 80113f8:	9b08      	ldr	r3, [sp, #32]
 80113fa:	428b      	cmp	r3, r1
 80113fc:	d8d2      	bhi.n	80113a4 <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 80113fe:	b00d      	add	sp, #52	@ 0x34
 8011400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011404:	4619      	mov	r1, r3
 8011406:	e7c8      	b.n	801139a <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8011408:	9b07      	ldr	r3, [sp, #28]
 801140a:	1acb      	subs	r3, r1, r3
 801140c:	461a      	mov	r2, r3
 801140e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8011410:	ed92 7a00 	vldr	s14, [r2]
 8011414:	ecf0 7a01 	vldmia	r0!, {s15}
 8011418:	ee77 7a87 	vadd.f32	s15, s15, s14
 801141c:	ece2 7a01 	vstmia	r2!, {s15}
 8011420:	428a      	cmp	r2, r1
 8011422:	d1f5      	bne.n	8011410 <forward_lite_dense_if32of32wf32_lut4+0x238>
 8011424:	e7f2      	b.n	801140c <forward_lite_dense_if32of32wf32_lut4+0x234>
 8011426:	bf00      	nop
 8011428:	00000000 	.word	0x00000000

0801142c <forward_lite_dense_if32of32wf32_lut8>:
 801142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011430:	b091      	sub	sp, #68	@ 0x44
 8011432:	4699      	mov	r9, r3
 8011434:	468b      	mov	fp, r1
 8011436:	920e      	str	r2, [sp, #56]	@ 0x38
 8011438:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801143a:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 801143e:	9003      	str	r0, [sp, #12]
 8011440:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 8011444:	fb02 f303 	mul.w	r3, r2, r3
 8011448:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801144c:	930c      	str	r3, [sp, #48]	@ 0x30
 801144e:	b134      	cbz	r4, 801145e <forward_lite_dense_if32of32wf32_lut8+0x32>
 8011450:	4648      	mov	r0, r9
 8011452:	46a1      	mov	r9, r4
 8011454:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8011458:	4621      	mov	r1, r4
 801145a:	f000 fab3 	bl	80119c4 <st_int8_copy>
 801145e:	9b03      	ldr	r3, [sp, #12]
 8011460:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011462:	4293      	cmp	r3, r2
 8011464:	f080 8084 	bcs.w	8011570 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8011468:	4bb7      	ldr	r3, [pc, #732]	@ (8011748 <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 801146a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801146c:	4443      	add	r3, r8
 801146e:	9d03      	ldr	r5, [sp, #12]
 8011470:	0092      	lsls	r2, r2, #2
 8011472:	eddf 3ab6 	vldr	s7, [pc, #728]	@ 801174c <forward_lite_dense_if32of32wf32_lut8+0x320>
 8011476:	009b      	lsls	r3, r3, #2
 8011478:	920b      	str	r2, [sp, #44]	@ 0x2c
 801147a:	f103 0120 	add.w	r1, r3, #32
 801147e:	930d      	str	r3, [sp, #52]	@ 0x34
 8011480:	445b      	add	r3, fp
 8011482:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011484:	9105      	str	r1, [sp, #20]
 8011486:	9300      	str	r3, [sp, #0]
 8011488:	eb0b 0301 	add.w	r3, fp, r1
 801148c:	469a      	mov	sl, r3
 801148e:	469e      	mov	lr, r3
 8011490:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011492:	eb05 0c03 	add.w	ip, r5, r3
 8011496:	45ac      	cmp	ip, r5
 8011498:	d952      	bls.n	8011540 <forward_lite_dense_if32of32wf32_lut8+0x114>
 801149a:	9800      	ldr	r0, [sp, #0]
 801149c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801149e:	f100 011f 	add.w	r1, r0, #31
 80114a2:	eba0 020b 	sub.w	r2, r0, fp
 80114a6:	445b      	add	r3, fp
 80114a8:	9101      	str	r1, [sp, #4]
 80114aa:	eba1 010b 	sub.w	r1, r1, fp
 80114ae:	0952      	lsrs	r2, r2, #5
 80114b0:	9306      	str	r3, [sp, #24]
 80114b2:	0889      	lsrs	r1, r1, #2
 80114b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114b6:	3101      	adds	r1, #1
 80114b8:	9102      	str	r1, [sp, #8]
 80114ba:	1c51      	adds	r1, r2, #1
 80114bc:	00d2      	lsls	r2, r2, #3
 80114be:	3210      	adds	r2, #16
 80114c0:	920a      	str	r2, [sp, #40]	@ 0x28
 80114c2:	00ca      	lsls	r2, r1, #3
 80114c4:	9208      	str	r2, [sp, #32]
 80114c6:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 80114ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80114cc:	1f02      	subs	r2, r0, #4
 80114ce:	9204      	str	r2, [sp, #16]
 80114d0:	f10b 0204 	add.w	r2, fp, #4
 80114d4:	9207      	str	r2, [sp, #28]
 80114d6:	f1b8 0f07 	cmp.w	r8, #7
 80114da:	d84c      	bhi.n	8011576 <forward_lite_dense_if32of32wf32_lut8+0x14a>
 80114dc:	45d3      	cmp	fp, sl
 80114de:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 801174c <forward_lite_dense_if32of32wf32_lut8+0x320>
 80114e2:	d20f      	bcs.n	8011504 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80114e4:	4659      	mov	r1, fp
 80114e6:	4618      	mov	r0, r3
 80114e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114ec:	ecf1 7a01 	vldmia	r1!, {s15}
 80114f0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80114f4:	4551      	cmp	r1, sl
 80114f6:	edd2 6a00 	vldr	s13, [r2]
 80114fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80114fe:	d3f3      	bcc.n	80114e8 <forward_lite_dense_if32of32wf32_lut8+0xbc>
 8011500:	9a02      	ldr	r2, [sp, #8]
 8011502:	4413      	add	r3, r2
 8011504:	eca5 7a01 	vstmia	r5!, {s14}
 8011508:	45ac      	cmp	ip, r5
 801150a:	d8e4      	bhi.n	80114d6 <forward_lite_dense_if32of32wf32_lut8+0xaa>
 801150c:	9b03      	ldr	r3, [sp, #12]
 801150e:	46f3      	mov	fp, lr
 8011510:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011512:	1899      	adds	r1, r3, r2
 8011514:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011516:	b9c3      	cbnz	r3, 801154a <forward_lite_dense_if32of32wf32_lut8+0x11e>
 8011518:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801151a:	428b      	cmp	r3, r1
 801151c:	d928      	bls.n	8011570 <forward_lite_dense_if32of32wf32_lut8+0x144>
 801151e:	9b00      	ldr	r3, [sp, #0]
 8011520:	9a05      	ldr	r2, [sp, #20]
 8011522:	4413      	add	r3, r2
 8011524:	4492      	add	sl, r2
 8011526:	9300      	str	r3, [sp, #0]
 8011528:	9b03      	ldr	r3, [sp, #12]
 801152a:	459c      	cmp	ip, r3
 801152c:	f240 821e 	bls.w	801196c <forward_lite_dense_if32of32wf32_lut8+0x540>
 8011530:	460d      	mov	r5, r1
 8011532:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011534:	4496      	add	lr, r2
 8011536:	9103      	str	r1, [sp, #12]
 8011538:	eb05 0c03 	add.w	ip, r5, r3
 801153c:	45ac      	cmp	ip, r5
 801153e:	d8ac      	bhi.n	801149a <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8011540:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011542:	4629      	mov	r1, r5
 8011544:	46f3      	mov	fp, lr
 8011546:	2b00      	cmp	r3, #0
 8011548:	d0e6      	beq.n	8011518 <forward_lite_dense_if32of32wf32_lut8+0xec>
 801154a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801154c:	2b00      	cmp	r3, #0
 801154e:	d0e3      	beq.n	8011518 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8011550:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011552:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011554:	1acb      	subs	r3, r1, r3
 8011556:	edd3 7a00 	vldr	s15, [r3]
 801155a:	ecb2 7a01 	vldmia	r2!, {s14}
 801155e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011562:	ece3 7a01 	vstmia	r3!, {s15}
 8011566:	428b      	cmp	r3, r1
 8011568:	d1f5      	bne.n	8011556 <forward_lite_dense_if32of32wf32_lut8+0x12a>
 801156a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801156c:	428b      	cmp	r3, r1
 801156e:	d8d6      	bhi.n	801151e <forward_lite_dense_if32of32wf32_lut8+0xf2>
 8011570:	b011      	add	sp, #68	@ 0x44
 8011572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011576:	f003 0203 	and.w	r2, r3, #3
 801157a:	2a02      	cmp	r2, #2
 801157c:	f000 81ee 	beq.w	801195c <forward_lite_dense_if32of32wf32_lut8+0x530>
 8011580:	2a03      	cmp	r2, #3
 8011582:	f000 80e5 	beq.w	8011750 <forward_lite_dense_if32of32wf32_lut8+0x324>
 8011586:	2a01      	cmp	r2, #1
 8011588:	f000 81d2 	beq.w	8011930 <forward_lite_dense_if32of32wf32_lut8+0x504>
 801158c:	9a06      	ldr	r2, [sp, #24]
 801158e:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 801174c <forward_lite_dense_if32of32wf32_lut8+0x320>
 8011592:	4593      	cmp	fp, r2
 8011594:	f200 81e8 	bhi.w	8011968 <forward_lite_dense_if32of32wf32_lut8+0x53c>
 8011598:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801159a:	f103 0208 	add.w	r2, r3, #8
 801159e:	f10b 0120 	add.w	r1, fp, #32
 80115a2:	18c4      	adds	r4, r0, r3
 80115a4:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 80115a8:	3208      	adds	r2, #8
 80115aa:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 80115ae:	3120      	adds	r1, #32
 80115b0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80115b4:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 80115b8:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 80115bc:	edd0 7a00 	vldr	s15, [r0]
 80115c0:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 80115c4:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80115c8:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 80115cc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80115d0:	ed11 5a0c 	vldr	s10, [r1, #-48]	@ 0xffffffd0
 80115d4:	ed51 5a0b 	vldr	s11, [r1, #-44]	@ 0xffffffd4
 80115d8:	edd0 2a00 	vldr	s5, [r0]
 80115dc:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 80115e0:	eee2 7a83 	vfma.f32	s15, s5, s6
 80115e4:	ed11 6a0a 	vldr	s12, [r1, #-40]	@ 0xffffffd8
 80115e8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80115ec:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 80115f0:	ed90 3a00 	vldr	s6, [r0]
 80115f4:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 80115f8:	eee3 7a04 	vfma.f32	s15, s6, s8
 80115fc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8011600:	ed90 4a00 	vldr	s8, [r0]
 8011604:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8011608:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 801160c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011610:	edd0 4a00 	vldr	s9, [r0]
 8011614:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8011618:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 801161c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011620:	ed90 5a00 	vldr	s10, [r0]
 8011624:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8011628:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 801162c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011630:	edd0 5a00 	vldr	s11, [r0]
 8011634:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8011638:	42a2      	cmp	r2, r4
 801163a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 801163e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011642:	ed90 6a00 	vldr	s12, [r0]
 8011646:	eee6 7a26 	vfma.f32	s15, s12, s13
 801164a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801164e:	d1a9      	bne.n	80115a4 <forward_lite_dense_if32of32wf32_lut8+0x178>
 8011650:	9a08      	ldr	r2, [sp, #32]
 8011652:	4413      	add	r3, r2
 8011654:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011656:	4572      	cmp	r2, lr
 8011658:	f4bf af54 	bcs.w	8011504 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 801165c:	7819      	ldrb	r1, [r3, #0]
 801165e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011662:	edd1 7a00 	vldr	s15, [r1]
 8011666:	4611      	mov	r1, r2
 8011668:	ecf1 6a01 	vldmia	r1!, {s13}
 801166c:	458a      	cmp	sl, r1
 801166e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011672:	d963      	bls.n	801173c <forward_lite_dense_if32of32wf32_lut8+0x310>
 8011674:	7859      	ldrb	r1, [r3, #1]
 8011676:	edd2 6a01 	vldr	s13, [r2, #4]
 801167a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801167e:	edd1 7a00 	vldr	s15, [r1]
 8011682:	f102 0108 	add.w	r1, r2, #8
 8011686:	458a      	cmp	sl, r1
 8011688:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801168c:	d956      	bls.n	801173c <forward_lite_dense_if32of32wf32_lut8+0x310>
 801168e:	7899      	ldrb	r1, [r3, #2]
 8011690:	edd2 6a02 	vldr	s13, [r2, #8]
 8011694:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011698:	edd1 7a00 	vldr	s15, [r1]
 801169c:	f102 010c 	add.w	r1, r2, #12
 80116a0:	458a      	cmp	sl, r1
 80116a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116a6:	d949      	bls.n	801173c <forward_lite_dense_if32of32wf32_lut8+0x310>
 80116a8:	78d9      	ldrb	r1, [r3, #3]
 80116aa:	edd2 6a03 	vldr	s13, [r2, #12]
 80116ae:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80116b2:	edd1 7a00 	vldr	s15, [r1]
 80116b6:	f102 0110 	add.w	r1, r2, #16
 80116ba:	458a      	cmp	sl, r1
 80116bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116c0:	d93c      	bls.n	801173c <forward_lite_dense_if32of32wf32_lut8+0x310>
 80116c2:	7919      	ldrb	r1, [r3, #4]
 80116c4:	edd2 6a04 	vldr	s13, [r2, #16]
 80116c8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80116cc:	edd1 7a00 	vldr	s15, [r1]
 80116d0:	f102 0114 	add.w	r1, r2, #20
 80116d4:	458a      	cmp	sl, r1
 80116d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116da:	d92f      	bls.n	801173c <forward_lite_dense_if32of32wf32_lut8+0x310>
 80116dc:	7959      	ldrb	r1, [r3, #5]
 80116de:	edd2 6a05 	vldr	s13, [r2, #20]
 80116e2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80116e6:	edd1 7a00 	vldr	s15, [r1]
 80116ea:	f102 0118 	add.w	r1, r2, #24
 80116ee:	458a      	cmp	sl, r1
 80116f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116f4:	d922      	bls.n	801173c <forward_lite_dense_if32of32wf32_lut8+0x310>
 80116f6:	7999      	ldrb	r1, [r3, #6]
 80116f8:	edd2 6a06 	vldr	s13, [r2, #24]
 80116fc:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011700:	edd1 7a00 	vldr	s15, [r1]
 8011704:	f102 011c 	add.w	r1, r2, #28
 8011708:	458a      	cmp	sl, r1
 801170a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801170e:	d915      	bls.n	801173c <forward_lite_dense_if32of32wf32_lut8+0x310>
 8011710:	79d9      	ldrb	r1, [r3, #7]
 8011712:	edd2 6a07 	vldr	s13, [r2, #28]
 8011716:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801171a:	edd1 7a00 	vldr	s15, [r1]
 801171e:	f102 0120 	add.w	r1, r2, #32
 8011722:	458a      	cmp	sl, r1
 8011724:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011728:	d908      	bls.n	801173c <forward_lite_dense_if32of32wf32_lut8+0x310>
 801172a:	7a19      	ldrb	r1, [r3, #8]
 801172c:	edd2 7a08 	vldr	s15, [r2, #32]
 8011730:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011734:	edd1 6a00 	vldr	s13, [r1]
 8011738:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801173c:	9901      	ldr	r1, [sp, #4]
 801173e:	1a8a      	subs	r2, r1, r2
 8011740:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 8011744:	1c53      	adds	r3, r2, #1
 8011746:	e6dd      	b.n	8011504 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8011748:	3ffffff8 	.word	0x3ffffff8
 801174c:	00000000 	.word	0x00000000
 8011750:	eeb0 7a63 	vmov.f32	s14, s7
 8011754:	465a      	mov	r2, fp
 8011756:	461f      	mov	r7, r3
 8011758:	4610      	mov	r0, r2
 801175a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801175e:	ecf0 7a01 	vldmia	r0!, {s15}
 8011762:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011766:	edd1 6a00 	vldr	s13, [r1]
 801176a:	9900      	ldr	r1, [sp, #0]
 801176c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011770:	4288      	cmp	r0, r1
 8011772:	f200 80f7 	bhi.w	8011964 <forward_lite_dense_if32of32wf32_lut8+0x538>
 8011776:	9904      	ldr	r1, [sp, #16]
 8011778:	f103 0411 	add.w	r4, r3, #17
 801177c:	3309      	adds	r3, #9
 801177e:	1a8e      	subs	r6, r1, r2
 8011780:	3224      	adds	r2, #36	@ 0x24
 8011782:	0976      	lsrs	r6, r6, #5
 8011784:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8011788:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 801178c:	3308      	adds	r3, #8
 801178e:	ed52 2a07 	vldr	s5, [r2, #-28]	@ 0xffffffe4
 8011792:	3220      	adds	r2, #32
 8011794:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011798:	ed12 3a10 	vldr	s6, [r2, #-64]	@ 0xffffffc0
 801179c:	ed12 4a0e 	vldr	s8, [r2, #-56]	@ 0xffffffc8
 80117a0:	edd1 7a00 	vldr	s15, [r1]
 80117a4:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80117a8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80117ac:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 80117b0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80117b4:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 80117b8:	ed52 5a0b 	vldr	s11, [r2, #-44]	@ 0xffffffd4
 80117bc:	edd1 2a00 	vldr	s5, [r1]
 80117c0:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 80117c4:	eee2 7a83 	vfma.f32	s15, s5, s6
 80117c8:	ed12 6a0a 	vldr	s12, [r2, #-40]	@ 0xffffffd8
 80117cc:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80117d0:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 80117d4:	ed91 3a00 	vldr	s6, [r1]
 80117d8:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 80117dc:	eee3 7a04 	vfma.f32	s15, s6, s8
 80117e0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80117e4:	ed91 4a00 	vldr	s8, [r1]
 80117e8:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 80117ec:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80117f0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80117f4:	edd1 4a00 	vldr	s9, [r1]
 80117f8:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 80117fc:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011800:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011804:	ed91 5a00 	vldr	s10, [r1]
 8011808:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 801180c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011810:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011814:	edd1 5a00 	vldr	s11, [r1]
 8011818:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 801181c:	42a3      	cmp	r3, r4
 801181e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011822:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011826:	ed91 6a00 	vldr	s12, [r1]
 801182a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801182e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011832:	d1a9      	bne.n	8011788 <forward_lite_dense_if32of32wf32_lut8+0x35c>
 8011834:	3601      	adds	r6, #1
 8011836:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 801183a:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 801183e:	4550      	cmp	r0, sl
 8011840:	f4bf ae60 	bcs.w	8011504 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8011844:	781a      	ldrb	r2, [r3, #0]
 8011846:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801184a:	edd2 7a00 	vldr	s15, [r2]
 801184e:	4602      	mov	r2, r0
 8011850:	ecf2 6a01 	vldmia	r2!, {s13}
 8011854:	4592      	cmp	sl, r2
 8011856:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801185a:	d963      	bls.n	8011924 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801185c:	785a      	ldrb	r2, [r3, #1]
 801185e:	edd0 6a01 	vldr	s13, [r0, #4]
 8011862:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8011866:	edd2 7a00 	vldr	s15, [r2]
 801186a:	f100 0208 	add.w	r2, r0, #8
 801186e:	4592      	cmp	sl, r2
 8011870:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011874:	d956      	bls.n	8011924 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8011876:	789a      	ldrb	r2, [r3, #2]
 8011878:	edd0 6a02 	vldr	s13, [r0, #8]
 801187c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8011880:	edd2 7a00 	vldr	s15, [r2]
 8011884:	f100 020c 	add.w	r2, r0, #12
 8011888:	4592      	cmp	sl, r2
 801188a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801188e:	d949      	bls.n	8011924 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8011890:	78da      	ldrb	r2, [r3, #3]
 8011892:	edd0 6a03 	vldr	s13, [r0, #12]
 8011896:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801189a:	edd2 7a00 	vldr	s15, [r2]
 801189e:	f100 0210 	add.w	r2, r0, #16
 80118a2:	4592      	cmp	sl, r2
 80118a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118a8:	d93c      	bls.n	8011924 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80118aa:	791a      	ldrb	r2, [r3, #4]
 80118ac:	edd0 6a04 	vldr	s13, [r0, #16]
 80118b0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80118b4:	edd2 7a00 	vldr	s15, [r2]
 80118b8:	f100 0214 	add.w	r2, r0, #20
 80118bc:	4592      	cmp	sl, r2
 80118be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118c2:	d92f      	bls.n	8011924 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80118c4:	795a      	ldrb	r2, [r3, #5]
 80118c6:	edd0 6a05 	vldr	s13, [r0, #20]
 80118ca:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80118ce:	edd2 7a00 	vldr	s15, [r2]
 80118d2:	f100 0218 	add.w	r2, r0, #24
 80118d6:	4596      	cmp	lr, r2
 80118d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118dc:	d922      	bls.n	8011924 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80118de:	799a      	ldrb	r2, [r3, #6]
 80118e0:	edd0 6a06 	vldr	s13, [r0, #24]
 80118e4:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80118e8:	edd2 7a00 	vldr	s15, [r2]
 80118ec:	f100 021c 	add.w	r2, r0, #28
 80118f0:	4596      	cmp	lr, r2
 80118f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118f6:	d915      	bls.n	8011924 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80118f8:	79da      	ldrb	r2, [r3, #7]
 80118fa:	edd0 6a07 	vldr	s13, [r0, #28]
 80118fe:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8011902:	edd2 7a00 	vldr	s15, [r2]
 8011906:	f100 0220 	add.w	r2, r0, #32
 801190a:	4596      	cmp	lr, r2
 801190c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011910:	d908      	bls.n	8011924 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8011912:	7a1a      	ldrb	r2, [r3, #8]
 8011914:	edd0 7a08 	vldr	s15, [r0, #32]
 8011918:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801191c:	edd2 6a00 	vldr	s13, [r2]
 8011920:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011924:	9a01      	ldr	r2, [sp, #4]
 8011926:	1a10      	subs	r0, r2, r0
 8011928:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 801192c:	1c43      	adds	r3, r0, #1
 801192e:	e5e9      	b.n	8011504 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8011930:	f813 1b01 	ldrb.w	r1, [r3], #1
 8011934:	eddb 7a00 	vldr	s15, [fp]
 8011938:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801193c:	9a07      	ldr	r2, [sp, #28]
 801193e:	ed91 7a00 	vldr	s14, [r1]
 8011942:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011946:	f813 1b01 	ldrb.w	r1, [r3], #1
 801194a:	ecf2 7a01 	vldmia	r2!, {s15}
 801194e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8011952:	edd1 6a00 	vldr	s13, [r1]
 8011956:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801195a:	e6fc      	b.n	8011756 <forward_lite_dense_if32of32wf32_lut8+0x32a>
 801195c:	eeb0 7a63 	vmov.f32	s14, s7
 8011960:	465a      	mov	r2, fp
 8011962:	e7f0      	b.n	8011946 <forward_lite_dense_if32of32wf32_lut8+0x51a>
 8011964:	463b      	mov	r3, r7
 8011966:	e76a      	b.n	801183e <forward_lite_dense_if32of32wf32_lut8+0x412>
 8011968:	465a      	mov	r2, fp
 801196a:	e674      	b.n	8011656 <forward_lite_dense_if32of32wf32_lut8+0x22a>
 801196c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801196e:	1acb      	subs	r3, r1, r3
 8011970:	461a      	mov	r2, r3
 8011972:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8011974:	ed92 7a00 	vldr	s14, [r2]
 8011978:	ecf0 7a01 	vldmia	r0!, {s15}
 801197c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011980:	ece2 7a01 	vstmia	r2!, {s15}
 8011984:	4291      	cmp	r1, r2
 8011986:	d1f5      	bne.n	8011974 <forward_lite_dense_if32of32wf32_lut8+0x548>
 8011988:	e7f2      	b.n	8011970 <forward_lite_dense_if32of32wf32_lut8+0x544>
 801198a:	bf00      	nop

0801198c <forward_lite_nl_relu_if32of32>:
 801198c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011990:	4413      	add	r3, r2
 8011992:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8011996:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801199a:	4291      	cmp	r1, r2
 801199c:	d80f      	bhi.n	80119be <forward_lite_nl_relu_if32of32+0x32>
 801199e:	f10c 0104 	add.w	r1, ip, #4
 80119a2:	1d13      	adds	r3, r2, #4
 80119a4:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80119c0 <forward_lite_nl_relu_if32of32+0x34>
 80119a8:	eba2 020c 	sub.w	r2, r2, ip
 80119ac:	4408      	add	r0, r1
 80119ae:	ed73 7a01 	vldmdb	r3!, {s15}
 80119b2:	4293      	cmp	r3, r2
 80119b4:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80119b8:	ed60 7a01 	vstmdb	r0!, {s15}
 80119bc:	d1f7      	bne.n	80119ae <forward_lite_nl_relu_if32of32+0x22>
 80119be:	4770      	bx	lr
 80119c0:	00000000 	.word	0x00000000

080119c4 <st_int8_copy>:
 80119c4:	4288      	cmp	r0, r1
 80119c6:	d023      	beq.n	8011a10 <st_int8_copy+0x4c>
 80119c8:	b312      	cbz	r2, 8011a10 <st_int8_copy+0x4c>
 80119ca:	4288      	cmp	r0, r1
 80119cc:	eb00 0302 	add.w	r3, r0, r2
 80119d0:	d20b      	bcs.n	80119ea <st_int8_copy+0x26>
 80119d2:	4299      	cmp	r1, r3
 80119d4:	d209      	bcs.n	80119ea <st_int8_copy+0x26>
 80119d6:	4298      	cmp	r0, r3
 80119d8:	440a      	add	r2, r1
 80119da:	d219      	bcs.n	8011a10 <st_int8_copy+0x4c>
 80119dc:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80119e0:	4298      	cmp	r0, r3
 80119e2:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80119e6:	d1f9      	bne.n	80119dc <st_int8_copy+0x18>
 80119e8:	4770      	bx	lr
 80119ea:	2a03      	cmp	r2, #3
 80119ec:	d811      	bhi.n	8011a12 <st_int8_copy+0x4e>
 80119ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80119f2:	f801 3b01 	strb.w	r3, [r1], #1
 80119f6:	2a01      	cmp	r2, #1
 80119f8:	d00a      	beq.n	8011a10 <st_int8_copy+0x4c>
 80119fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80119fe:	f801 3b01 	strb.w	r3, [r1], #1
 8011a02:	2a02      	cmp	r2, #2
 8011a04:	d004      	beq.n	8011a10 <st_int8_copy+0x4c>
 8011a06:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011a0a:	f801 3b01 	strb.w	r3, [r1], #1
 8011a0e:	4770      	bx	lr
 8011a10:	4770      	bx	lr
 8011a12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a16:	f001 0403 	and.w	r4, r1, #3
 8011a1a:	f000 0e03 	and.w	lr, r0, #3
 8011a1e:	f1c4 0304 	rsb	r3, r4, #4
 8011a22:	eba2 0c03 	sub.w	ip, r2, r3
 8011a26:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011a2a:	f801 3b01 	strb.w	r3, [r1], #1
 8011a2e:	2c03      	cmp	r4, #3
 8011a30:	f1c4 0202 	rsb	r2, r4, #2
 8011a34:	d00e      	beq.n	8011a54 <st_int8_copy+0x90>
 8011a36:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011a3a:	f801 3b01 	strb.w	r3, [r1], #1
 8011a3e:	2a00      	cmp	r2, #0
 8011a40:	dd08      	ble.n	8011a54 <st_int8_copy+0x90>
 8011a42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011a46:	f801 3b01 	strb.w	r3, [r1], #1
 8011a4a:	b91c      	cbnz	r4, 8011a54 <st_int8_copy+0x90>
 8011a4c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011a50:	f801 3b01 	strb.w	r3, [r1], #1
 8011a54:	4574      	cmp	r4, lr
 8011a56:	d02b      	beq.n	8011ab0 <st_int8_copy+0xec>
 8011a58:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8011a5c:	1e5a      	subs	r2, r3, #1
 8011a5e:	b153      	cbz	r3, 8011a76 <st_int8_copy+0xb2>
 8011a60:	f850 3b04 	ldr.w	r3, [r0], #4
 8011a64:	f850 4b04 	ldr.w	r4, [r0], #4
 8011a68:	f850 5b04 	ldr.w	r5, [r0], #4
 8011a6c:	f850 6b04 	ldr.w	r6, [r0], #4
 8011a70:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8011a72:	3a01      	subs	r2, #1
 8011a74:	d2f4      	bcs.n	8011a60 <st_int8_copy+0x9c>
 8011a76:	f01c 0f08 	tst.w	ip, #8
 8011a7a:	d004      	beq.n	8011a86 <st_int8_copy+0xc2>
 8011a7c:	f850 3b04 	ldr.w	r3, [r0], #4
 8011a80:	f850 4b04 	ldr.w	r4, [r0], #4
 8011a84:	c118      	stmia	r1!, {r3, r4}
 8011a86:	f01c 0f04 	tst.w	ip, #4
 8011a8a:	d003      	beq.n	8011a94 <st_int8_copy+0xd0>
 8011a8c:	f850 3b04 	ldr.w	r3, [r0], #4
 8011a90:	f841 3b04 	str.w	r3, [r1], #4
 8011a94:	f01c 0f02 	tst.w	ip, #2
 8011a98:	d003      	beq.n	8011aa2 <st_int8_copy+0xde>
 8011a9a:	f830 3b02 	ldrh.w	r3, [r0], #2
 8011a9e:	f821 3b02 	strh.w	r3, [r1], #2
 8011aa2:	f01c 0f01 	tst.w	ip, #1
 8011aa6:	d001      	beq.n	8011aac <st_int8_copy+0xe8>
 8011aa8:	7803      	ldrb	r3, [r0, #0]
 8011aaa:	700b      	strb	r3, [r1, #0]
 8011aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ab0:	ea4f 139c 	mov.w	r3, ip, lsr #6
 8011ab4:	f103 39ff 	add.w	r9, r3, #4294967295
 8011ab8:	b183      	cbz	r3, 8011adc <st_int8_copy+0x118>
 8011aba:	4688      	mov	r8, r1
 8011abc:	4686      	mov	lr, r0
 8011abe:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8011ac2:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8011ac6:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8011aca:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8011ace:	f109 39ff 	add.w	r9, r9, #4294967295
 8011ad2:	4641      	mov	r1, r8
 8011ad4:	4670      	mov	r0, lr
 8011ad6:	f1b9 3fff 	cmp.w	r9, #4294967295
 8011ada:	d1ee      	bne.n	8011aba <st_int8_copy+0xf6>
 8011adc:	f01c 0f20 	tst.w	ip, #32
 8011ae0:	d007      	beq.n	8011af2 <st_int8_copy+0x12e>
 8011ae2:	4688      	mov	r8, r1
 8011ae4:	4686      	mov	lr, r0
 8011ae6:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8011aea:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8011aee:	4641      	mov	r1, r8
 8011af0:	4670      	mov	r0, lr
 8011af2:	f01c 0f10 	tst.w	ip, #16
 8011af6:	d001      	beq.n	8011afc <st_int8_copy+0x138>
 8011af8:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8011afa:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8011afc:	f01c 0f08 	tst.w	ip, #8
 8011b00:	d0c1      	beq.n	8011a86 <st_int8_copy+0xc2>
 8011b02:	c818      	ldmia	r0!, {r3, r4}
 8011b04:	c118      	stmia	r1!, {r3, r4}
 8011b06:	e7be      	b.n	8011a86 <st_int8_copy+0xc2>

08011b08 <ai_array_to_buffer_fmt>:
 8011b08:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8011b0c:	2b02      	cmp	r3, #2
 8011b0e:	d055      	beq.n	8011bbc <ai_array_to_buffer_fmt+0xb4>
 8011b10:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8011b14:	4a2c      	ldr	r2, [pc, #176]	@ (8011bc8 <ai_array_to_buffer_fmt+0xc0>)
 8011b16:	4293      	cmp	r3, r2
 8011b18:	d010      	beq.n	8011b3c <ai_array_to_buffer_fmt+0x34>
 8011b1a:	dc21      	bgt.n	8011b60 <ai_array_to_buffer_fmt+0x58>
 8011b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8011bcc <ai_array_to_buffer_fmt+0xc4>)
 8011b1e:	4293      	cmp	r3, r2
 8011b20:	d00c      	beq.n	8011b3c <ai_array_to_buffer_fmt+0x34>
 8011b22:	dd0f      	ble.n	8011b44 <ai_array_to_buffer_fmt+0x3c>
 8011b24:	4a2a      	ldr	r2, [pc, #168]	@ (8011bd0 <ai_array_to_buffer_fmt+0xc8>)
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d008      	beq.n	8011b3c <ai_array_to_buffer_fmt+0x34>
 8011b2a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8011b2e:	4293      	cmp	r3, r2
 8011b30:	d004      	beq.n	8011b3c <ai_array_to_buffer_fmt+0x34>
 8011b32:	4a28      	ldr	r2, [pc, #160]	@ (8011bd4 <ai_array_to_buffer_fmt+0xcc>)
 8011b34:	4293      	cmp	r3, r2
 8011b36:	bf0c      	ite	eq
 8011b38:	4613      	moveq	r3, r2
 8011b3a:	2340      	movne	r3, #64	@ 0x40
 8011b3c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8011b40:	4318      	orrs	r0, r3
 8011b42:	4770      	bx	lr
 8011b44:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8011b48:	4293      	cmp	r3, r2
 8011b4a:	d0f7      	beq.n	8011b3c <ai_array_to_buffer_fmt+0x34>
 8011b4c:	dd2c      	ble.n	8011ba8 <ai_array_to_buffer_fmt+0xa0>
 8011b4e:	4a22      	ldr	r2, [pc, #136]	@ (8011bd8 <ai_array_to_buffer_fmt+0xd0>)
 8011b50:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8011b54:	4293      	cmp	r3, r2
 8011b56:	bf0c      	ite	eq
 8011b58:	4613      	moveq	r3, r2
 8011b5a:	2340      	movne	r3, #64	@ 0x40
 8011b5c:	4318      	orrs	r0, r3
 8011b5e:	4770      	bx	lr
 8011b60:	4a1e      	ldr	r2, [pc, #120]	@ (8011bdc <ai_array_to_buffer_fmt+0xd4>)
 8011b62:	4293      	cmp	r3, r2
 8011b64:	d0ea      	beq.n	8011b3c <ai_array_to_buffer_fmt+0x34>
 8011b66:	dd10      	ble.n	8011b8a <ai_array_to_buffer_fmt+0x82>
 8011b68:	4a1d      	ldr	r2, [pc, #116]	@ (8011be0 <ai_array_to_buffer_fmt+0xd8>)
 8011b6a:	4293      	cmp	r3, r2
 8011b6c:	d0e6      	beq.n	8011b3c <ai_array_to_buffer_fmt+0x34>
 8011b6e:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8011b72:	4293      	cmp	r3, r2
 8011b74:	d0e2      	beq.n	8011b3c <ai_array_to_buffer_fmt+0x34>
 8011b76:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8011b7a:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	bf0c      	ite	eq
 8011b82:	4613      	moveq	r3, r2
 8011b84:	2340      	movne	r3, #64	@ 0x40
 8011b86:	4318      	orrs	r0, r3
 8011b88:	4770      	bx	lr
 8011b8a:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8011b8e:	4293      	cmp	r3, r2
 8011b90:	d0d4      	beq.n	8011b3c <ai_array_to_buffer_fmt+0x34>
 8011b92:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8011b96:	4293      	cmp	r3, r2
 8011b98:	d0d0      	beq.n	8011b3c <ai_array_to_buffer_fmt+0x34>
 8011b9a:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8011b9e:	4293      	cmp	r3, r2
 8011ba0:	bf0c      	ite	eq
 8011ba2:	4613      	moveq	r3, r2
 8011ba4:	2340      	movne	r3, #64	@ 0x40
 8011ba6:	e7c9      	b.n	8011b3c <ai_array_to_buffer_fmt+0x34>
 8011ba8:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8011bac:	4293      	cmp	r3, r2
 8011bae:	d0c5      	beq.n	8011b3c <ai_array_to_buffer_fmt+0x34>
 8011bb0:	3280      	adds	r2, #128	@ 0x80
 8011bb2:	4293      	cmp	r3, r2
 8011bb4:	bf0c      	ite	eq
 8011bb6:	4613      	moveq	r3, r2
 8011bb8:	2340      	movne	r3, #64	@ 0x40
 8011bba:	e7bf      	b.n	8011b3c <ai_array_to_buffer_fmt+0x34>
 8011bbc:	4b09      	ldr	r3, [pc, #36]	@ (8011be4 <ai_array_to_buffer_fmt+0xdc>)
 8011bbe:	4003      	ands	r3, r0
 8011bc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011bc4:	e7ba      	b.n	8011b3c <ai_array_to_buffer_fmt+0x34>
 8011bc6:	bf00      	nop
 8011bc8:	00821040 	.word	0x00821040
 8011bcc:	00040840 	.word	0x00040840
 8011bd0:	00041040 	.word	0x00041040
 8011bd4:	0004084f 	.word	0x0004084f
 8011bd8:	00040447 	.word	0x00040447
 8011bdc:	00840447 	.word	0x00840447
 8011be0:	0084084f 	.word	0x0084084f
 8011be4:	00803fff 	.word	0x00803fff

08011be8 <ai_array_get_byte_size>:
 8011be8:	b321      	cbz	r1, 8011c34 <ai_array_get_byte_size+0x4c>
 8011bea:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8011bee:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 8011bf2:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8011bf6:	fb03 f101 	mul.w	r1, r3, r1
 8011bfa:	b500      	push	{lr}
 8011bfc:	f3c0 4e43 	ubfx	lr, r0, #17, #4
 8011c00:	3107      	adds	r1, #7
 8011c02:	11c0      	asrs	r0, r0, #7
 8011c04:	fa42 f20e 	asr.w	r2, r2, lr
 8011c08:	f021 0107 	bic.w	r1, r1, #7
 8011c0c:	07d2      	lsls	r2, r2, #31
 8011c0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8011c12:	d505      	bpl.n	8011c20 <ai_array_get_byte_size+0x38>
 8011c14:	2300      	movs	r3, #0
 8011c16:	3107      	adds	r1, #7
 8011c18:	4419      	add	r1, r3
 8011c1a:	08c8      	lsrs	r0, r1, #3
 8011c1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c20:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8011c24:	3107      	adds	r1, #7
 8011c26:	fa40 f00c 	asr.w	r0, r0, ip
 8011c2a:	4083      	lsls	r3, r0
 8011c2c:	4419      	add	r1, r3
 8011c2e:	08c8      	lsrs	r0, r1, #3
 8011c30:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c34:	4608      	mov	r0, r1
 8011c36:	4770      	bx	lr

08011c38 <ai_version_get>:
 8011c38:	0212      	lsls	r2, r2, #8
 8011c3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011c3e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8011c42:	4770      	bx	lr

08011c44 <lite_bilinear_if32of32_kernel>:
 8011c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c46:	9d05      	ldr	r5, [sp, #20]
 8011c48:	b352      	cbz	r2, 8011ca0 <lite_bilinear_if32of32_kernel+0x5c>
 8011c4a:	f04f 0c00 	mov.w	ip, #0
 8011c4e:	edd5 4a02 	vldr	s9, [r5, #8]
 8011c52:	f10c 0c01 	add.w	ip, ip, #1
 8011c56:	ed95 5a01 	vldr	s10, [r5, #4]
 8011c5a:	ed90 6a00 	vldr	s12, [r0]
 8011c5e:	4562      	cmp	r2, ip
 8011c60:	edd5 5a00 	vldr	s11, [r5]
 8011c64:	edd5 6a03 	vldr	s13, [r5, #12]
 8011c68:	e9d3 4600 	ldrd	r4, r6, [r3]
 8011c6c:	eb00 0786 	add.w	r7, r0, r6, lsl #2
 8011c70:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 8011c74:	4434      	add	r4, r6
 8011c76:	edd7 7a00 	vldr	s15, [r7]
 8011c7a:	ed9e 7a00 	vldr	s14, [lr]
 8011c7e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8011c82:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8011c86:	f100 0004 	add.w	r0, r0, #4
 8011c8a:	eee5 7a07 	vfma.f32	s15, s10, s14
 8011c8e:	ed94 7a00 	vldr	s14, [r4]
 8011c92:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011c96:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011c9a:	ece1 7a01 	vstmia	r1!, {s15}
 8011c9e:	d1d6      	bne.n	8011c4e <lite_bilinear_if32of32_kernel+0xa>
 8011ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ca2:	bf00      	nop

08011ca4 <lite_bilinear_is8os8_kernel>:
 8011ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ca8:	9c07      	ldr	r4, [sp, #28]
 8011caa:	2a00      	cmp	r2, #0
 8011cac:	d04b      	beq.n	8011d46 <lite_bilinear_is8os8_kernel+0xa2>
 8011cae:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8011cb2:	eb01 0e02 	add.w	lr, r1, r2
 8011cb6:	f100 3cff 	add.w	ip, r0, #4294967295
 8011cba:	f1c0 0501 	rsb	r5, r0, #1
 8011cbe:	685f      	ldr	r7, [r3, #4]
 8011cc0:	eb05 060c 	add.w	r6, r5, ip
 8011cc4:	681a      	ldr	r2, [r3, #0]
 8011cc6:	eb00 0807 	add.w	r8, r0, r7
 8011cca:	edd4 3a02 	vldr	s7, [r4, #8]
 8011cce:	4402      	add	r2, r0
 8011cd0:	ed94 4a01 	vldr	s8, [r4, #4]
 8011cd4:	f918 8006 	ldrsb.w	r8, [r8, r6]
 8011cd8:	f91c 9f01 	ldrsb.w	r9, [ip, #1]!
 8011cdc:	ee07 8a90 	vmov	s15, r8
 8011ce0:	f912 8006 	ldrsb.w	r8, [r2, r6]
 8011ce4:	ee06 9a90 	vmov	s13, r9
 8011ce8:	443a      	add	r2, r7
 8011cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011cee:	ee06 8a10 	vmov	s12, r8
 8011cf2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011cf6:	edd4 4a00 	vldr	s9, [r4]
 8011cfa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011cfe:	5792      	ldrsb	r2, [r2, r6]
 8011d00:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011d04:	ed94 5a03 	vldr	s10, [r4, #12]
 8011d08:	ee07 2a10 	vmov	s14, r2
 8011d0c:	eee4 7a06 	vfma.f32	s15, s8, s12
 8011d10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011d14:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8011d18:	eee5 7a07 	vfma.f32	s15, s10, s14
 8011d1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011d20:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8011d24:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8011d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d2c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d34:	dd09      	ble.n	8011d4a <lite_bilinear_is8os8_kernel+0xa6>
 8011d36:	ee17 2a10 	vmov	r2, s14
 8011d3a:	f302 0207 	ssat	r2, #8, r2
 8011d3e:	f801 2b01 	strb.w	r2, [r1], #1
 8011d42:	4571      	cmp	r1, lr
 8011d44:	d1bb      	bne.n	8011cbe <lite_bilinear_is8os8_kernel+0x1a>
 8011d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d4a:	ee17 2a90 	vmov	r2, s15
 8011d4e:	f302 0207 	ssat	r2, #8, r2
 8011d52:	f801 2b01 	strb.w	r2, [r1], #1
 8011d56:	4571      	cmp	r1, lr
 8011d58:	d1b1      	bne.n	8011cbe <lite_bilinear_is8os8_kernel+0x1a>
 8011d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d5e:	bf00      	nop

08011d60 <lite_bilinear_iu8ou8_kernel>:
 8011d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d64:	9c07      	ldr	r4, [sp, #28]
 8011d66:	2a00      	cmp	r2, #0
 8011d68:	d042      	beq.n	8011df0 <lite_bilinear_iu8ou8_kernel+0x90>
 8011d6a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8011d6e:	eb01 0e02 	add.w	lr, r1, r2
 8011d72:	f100 3cff 	add.w	ip, r0, #4294967295
 8011d76:	f1c0 0501 	rsb	r5, r0, #1
 8011d7a:	eb05 060c 	add.w	r6, r5, ip
 8011d7e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8011d82:	eef0 7a44 	vmov.f32	s15, s8
 8011d86:	edd4 6a00 	vldr	s13, [r4]
 8011d8a:	ee07 2a10 	vmov	s14, r2
 8011d8e:	681a      	ldr	r2, [r3, #0]
 8011d90:	685f      	ldr	r7, [r3, #4]
 8011d92:	4402      	add	r2, r0
 8011d94:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011d98:	eb00 0807 	add.w	r8, r0, r7
 8011d9c:	edd4 4a01 	vldr	s9, [r4, #4]
 8011da0:	f812 9006 	ldrb.w	r9, [r2, r6]
 8011da4:	443a      	add	r2, r7
 8011da6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011daa:	f818 8006 	ldrb.w	r8, [r8, r6]
 8011dae:	ee06 9a10 	vmov	s12, r9
 8011db2:	ed94 5a02 	vldr	s10, [r4, #8]
 8011db6:	ee06 8a90 	vmov	s13, r8
 8011dba:	5d92      	ldrb	r2, [r2, r6]
 8011dbc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011dc0:	edd4 5a03 	vldr	s11, [r4, #12]
 8011dc4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011dc8:	ee07 2a10 	vmov	s14, r2
 8011dcc:	eee4 7a86 	vfma.f32	s15, s9, s12
 8011dd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011dd4:	eee5 7a26 	vfma.f32	s15, s10, s13
 8011dd8:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011de0:	ee17 2a90 	vmov	r2, s15
 8011de4:	f382 0208 	usat	r2, #8, r2
 8011de8:	f801 2b01 	strb.w	r2, [r1], #1
 8011dec:	4571      	cmp	r1, lr
 8011dee:	d1c4      	bne.n	8011d7a <lite_bilinear_iu8ou8_kernel+0x1a>
 8011df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011df4 <lite_bilinear_is16os16_kernel>:
 8011df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011df8:	9d07      	ldr	r5, [sp, #28]
 8011dfa:	2a00      	cmp	r2, #0
 8011dfc:	d04e      	beq.n	8011e9c <lite_bilinear_is16os16_kernel+0xa8>
 8011dfe:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8011e02:	f1a0 0e02 	sub.w	lr, r0, #2
 8011e06:	f04f 0c00 	mov.w	ip, #0
 8011e0a:	ed95 7a02 	vldr	s14, [r5, #8]
 8011e0e:	ed95 4a01 	vldr	s8, [r5, #4]
 8011e12:	f93e 9f02 	ldrsh.w	r9, [lr, #2]!
 8011e16:	edd5 4a00 	vldr	s9, [r5]
 8011e1a:	ee06 9a90 	vmov	s13, r9
 8011e1e:	ed95 5a03 	vldr	s10, [r5, #12]
 8011e22:	e9d3 4600 	ldrd	r4, r6, [r3]
 8011e26:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011e2a:	eb06 080c 	add.w	r8, r6, ip
 8011e2e:	eb04 070c 	add.w	r7, r4, ip
 8011e32:	4434      	add	r4, r6
 8011e34:	f930 6018 	ldrsh.w	r6, [r0, r8, lsl #1]
 8011e38:	4464      	add	r4, ip
 8011e3a:	ee07 6a90 	vmov	s15, r6
 8011e3e:	f930 6017 	ldrsh.w	r6, [r0, r7, lsl #1]
 8011e42:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 8011e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e4a:	ee06 6a10 	vmov	s12, r6
 8011e4e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011e56:	ee07 4a10 	vmov	s14, r4
 8011e5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011e5e:	eee4 7a06 	vfma.f32	s15, s8, s12
 8011e62:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8011e66:	eee5 7a07 	vfma.f32	s15, s10, s14
 8011e6a:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8011e6e:	ee77 6ae5 	vsub.f32	s13, s15, s11
 8011e72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e76:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011e7a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8011e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e82:	bfcc      	ite	gt
 8011e84:	ee17 4a10 	vmovgt	r4, s14
 8011e88:	ee16 4a90 	vmovle	r4, s13
 8011e8c:	f304 040f 	ssat	r4, #16, r4
 8011e90:	f10c 0c01 	add.w	ip, ip, #1
 8011e94:	f821 4b02 	strh.w	r4, [r1], #2
 8011e98:	4562      	cmp	r2, ip
 8011e9a:	d1b6      	bne.n	8011e0a <lite_bilinear_is16os16_kernel+0x16>
 8011e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011ea0 <lite_bilinear_iu16ou16_kernel>:
 8011ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ea4:	9d06      	ldr	r5, [sp, #24]
 8011ea6:	2a00      	cmp	r2, #0
 8011ea8:	d042      	beq.n	8011f30 <lite_bilinear_iu16ou16_kernel+0x90>
 8011eaa:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8011eae:	1e86      	subs	r6, r0, #2
 8011eb0:	f04f 0e00 	mov.w	lr, #0
 8011eb4:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 8011eb8:	eef0 7a44 	vmov.f32	s15, s8
 8011ebc:	edd5 6a00 	vldr	s13, [r5]
 8011ec0:	ee07 4a10 	vmov	s14, r4
 8011ec4:	681c      	ldr	r4, [r3, #0]
 8011ec6:	685f      	ldr	r7, [r3, #4]
 8011ec8:	eb04 080e 	add.w	r8, r4, lr
 8011ecc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011ed0:	eb07 0c0e 	add.w	ip, r7, lr
 8011ed4:	edd5 4a01 	vldr	s9, [r5, #4]
 8011ed8:	f830 8018 	ldrh.w	r8, [r0, r8, lsl #1]
 8011edc:	443c      	add	r4, r7
 8011ede:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011ee2:	f830 701c 	ldrh.w	r7, [r0, ip, lsl #1]
 8011ee6:	ee06 8a10 	vmov	s12, r8
 8011eea:	4474      	add	r4, lr
 8011eec:	ee06 7a90 	vmov	s13, r7
 8011ef0:	ed95 5a02 	vldr	s10, [r5, #8]
 8011ef4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011ef8:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 8011efc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011f00:	edd5 5a03 	vldr	s11, [r5, #12]
 8011f04:	ee07 4a10 	vmov	s14, r4
 8011f08:	eee4 7a86 	vfma.f32	s15, s9, s12
 8011f0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011f10:	eee5 7a26 	vfma.f32	s15, s10, s13
 8011f14:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f1c:	ee17 ca90 	vmov	ip, s15
 8011f20:	f38c 0c10 	usat	ip, #16, ip
 8011f24:	f10e 0e01 	add.w	lr, lr, #1
 8011f28:	f821 cb02 	strh.w	ip, [r1], #2
 8011f2c:	4572      	cmp	r2, lr
 8011f2e:	d1c1      	bne.n	8011eb4 <lite_bilinear_iu16ou16_kernel+0x14>
 8011f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011f34 <malloc>:
 8011f34:	4b02      	ldr	r3, [pc, #8]	@ (8011f40 <malloc+0xc>)
 8011f36:	4601      	mov	r1, r0
 8011f38:	6818      	ldr	r0, [r3, #0]
 8011f3a:	f000 b825 	b.w	8011f88 <_malloc_r>
 8011f3e:	bf00      	nop
 8011f40:	20000818 	.word	0x20000818

08011f44 <sbrk_aligned>:
 8011f44:	b570      	push	{r4, r5, r6, lr}
 8011f46:	4e0f      	ldr	r6, [pc, #60]	@ (8011f84 <sbrk_aligned+0x40>)
 8011f48:	460c      	mov	r4, r1
 8011f4a:	6831      	ldr	r1, [r6, #0]
 8011f4c:	4605      	mov	r5, r0
 8011f4e:	b911      	cbnz	r1, 8011f56 <sbrk_aligned+0x12>
 8011f50:	f000 ff48 	bl	8012de4 <_sbrk_r>
 8011f54:	6030      	str	r0, [r6, #0]
 8011f56:	4621      	mov	r1, r4
 8011f58:	4628      	mov	r0, r5
 8011f5a:	f000 ff43 	bl	8012de4 <_sbrk_r>
 8011f5e:	1c43      	adds	r3, r0, #1
 8011f60:	d103      	bne.n	8011f6a <sbrk_aligned+0x26>
 8011f62:	f04f 34ff 	mov.w	r4, #4294967295
 8011f66:	4620      	mov	r0, r4
 8011f68:	bd70      	pop	{r4, r5, r6, pc}
 8011f6a:	1cc4      	adds	r4, r0, #3
 8011f6c:	f024 0403 	bic.w	r4, r4, #3
 8011f70:	42a0      	cmp	r0, r4
 8011f72:	d0f8      	beq.n	8011f66 <sbrk_aligned+0x22>
 8011f74:	1a21      	subs	r1, r4, r0
 8011f76:	4628      	mov	r0, r5
 8011f78:	f000 ff34 	bl	8012de4 <_sbrk_r>
 8011f7c:	3001      	adds	r0, #1
 8011f7e:	d1f2      	bne.n	8011f66 <sbrk_aligned+0x22>
 8011f80:	e7ef      	b.n	8011f62 <sbrk_aligned+0x1e>
 8011f82:	bf00      	nop
 8011f84:	2000dfcc 	.word	0x2000dfcc

08011f88 <_malloc_r>:
 8011f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f8c:	1ccd      	adds	r5, r1, #3
 8011f8e:	f025 0503 	bic.w	r5, r5, #3
 8011f92:	3508      	adds	r5, #8
 8011f94:	2d0c      	cmp	r5, #12
 8011f96:	bf38      	it	cc
 8011f98:	250c      	movcc	r5, #12
 8011f9a:	2d00      	cmp	r5, #0
 8011f9c:	4606      	mov	r6, r0
 8011f9e:	db01      	blt.n	8011fa4 <_malloc_r+0x1c>
 8011fa0:	42a9      	cmp	r1, r5
 8011fa2:	d904      	bls.n	8011fae <_malloc_r+0x26>
 8011fa4:	230c      	movs	r3, #12
 8011fa6:	6033      	str	r3, [r6, #0]
 8011fa8:	2000      	movs	r0, #0
 8011faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012084 <_malloc_r+0xfc>
 8011fb2:	f000 f869 	bl	8012088 <__malloc_lock>
 8011fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8011fba:	461c      	mov	r4, r3
 8011fbc:	bb44      	cbnz	r4, 8012010 <_malloc_r+0x88>
 8011fbe:	4629      	mov	r1, r5
 8011fc0:	4630      	mov	r0, r6
 8011fc2:	f7ff ffbf 	bl	8011f44 <sbrk_aligned>
 8011fc6:	1c43      	adds	r3, r0, #1
 8011fc8:	4604      	mov	r4, r0
 8011fca:	d158      	bne.n	801207e <_malloc_r+0xf6>
 8011fcc:	f8d8 4000 	ldr.w	r4, [r8]
 8011fd0:	4627      	mov	r7, r4
 8011fd2:	2f00      	cmp	r7, #0
 8011fd4:	d143      	bne.n	801205e <_malloc_r+0xd6>
 8011fd6:	2c00      	cmp	r4, #0
 8011fd8:	d04b      	beq.n	8012072 <_malloc_r+0xea>
 8011fda:	6823      	ldr	r3, [r4, #0]
 8011fdc:	4639      	mov	r1, r7
 8011fde:	4630      	mov	r0, r6
 8011fe0:	eb04 0903 	add.w	r9, r4, r3
 8011fe4:	f000 fefe 	bl	8012de4 <_sbrk_r>
 8011fe8:	4581      	cmp	r9, r0
 8011fea:	d142      	bne.n	8012072 <_malloc_r+0xea>
 8011fec:	6821      	ldr	r1, [r4, #0]
 8011fee:	1a6d      	subs	r5, r5, r1
 8011ff0:	4629      	mov	r1, r5
 8011ff2:	4630      	mov	r0, r6
 8011ff4:	f7ff ffa6 	bl	8011f44 <sbrk_aligned>
 8011ff8:	3001      	adds	r0, #1
 8011ffa:	d03a      	beq.n	8012072 <_malloc_r+0xea>
 8011ffc:	6823      	ldr	r3, [r4, #0]
 8011ffe:	442b      	add	r3, r5
 8012000:	6023      	str	r3, [r4, #0]
 8012002:	f8d8 3000 	ldr.w	r3, [r8]
 8012006:	685a      	ldr	r2, [r3, #4]
 8012008:	bb62      	cbnz	r2, 8012064 <_malloc_r+0xdc>
 801200a:	f8c8 7000 	str.w	r7, [r8]
 801200e:	e00f      	b.n	8012030 <_malloc_r+0xa8>
 8012010:	6822      	ldr	r2, [r4, #0]
 8012012:	1b52      	subs	r2, r2, r5
 8012014:	d420      	bmi.n	8012058 <_malloc_r+0xd0>
 8012016:	2a0b      	cmp	r2, #11
 8012018:	d917      	bls.n	801204a <_malloc_r+0xc2>
 801201a:	1961      	adds	r1, r4, r5
 801201c:	42a3      	cmp	r3, r4
 801201e:	6025      	str	r5, [r4, #0]
 8012020:	bf18      	it	ne
 8012022:	6059      	strne	r1, [r3, #4]
 8012024:	6863      	ldr	r3, [r4, #4]
 8012026:	bf08      	it	eq
 8012028:	f8c8 1000 	streq.w	r1, [r8]
 801202c:	5162      	str	r2, [r4, r5]
 801202e:	604b      	str	r3, [r1, #4]
 8012030:	4630      	mov	r0, r6
 8012032:	f000 f82f 	bl	8012094 <__malloc_unlock>
 8012036:	f104 000b 	add.w	r0, r4, #11
 801203a:	1d23      	adds	r3, r4, #4
 801203c:	f020 0007 	bic.w	r0, r0, #7
 8012040:	1ac2      	subs	r2, r0, r3
 8012042:	bf1c      	itt	ne
 8012044:	1a1b      	subne	r3, r3, r0
 8012046:	50a3      	strne	r3, [r4, r2]
 8012048:	e7af      	b.n	8011faa <_malloc_r+0x22>
 801204a:	6862      	ldr	r2, [r4, #4]
 801204c:	42a3      	cmp	r3, r4
 801204e:	bf0c      	ite	eq
 8012050:	f8c8 2000 	streq.w	r2, [r8]
 8012054:	605a      	strne	r2, [r3, #4]
 8012056:	e7eb      	b.n	8012030 <_malloc_r+0xa8>
 8012058:	4623      	mov	r3, r4
 801205a:	6864      	ldr	r4, [r4, #4]
 801205c:	e7ae      	b.n	8011fbc <_malloc_r+0x34>
 801205e:	463c      	mov	r4, r7
 8012060:	687f      	ldr	r7, [r7, #4]
 8012062:	e7b6      	b.n	8011fd2 <_malloc_r+0x4a>
 8012064:	461a      	mov	r2, r3
 8012066:	685b      	ldr	r3, [r3, #4]
 8012068:	42a3      	cmp	r3, r4
 801206a:	d1fb      	bne.n	8012064 <_malloc_r+0xdc>
 801206c:	2300      	movs	r3, #0
 801206e:	6053      	str	r3, [r2, #4]
 8012070:	e7de      	b.n	8012030 <_malloc_r+0xa8>
 8012072:	230c      	movs	r3, #12
 8012074:	6033      	str	r3, [r6, #0]
 8012076:	4630      	mov	r0, r6
 8012078:	f000 f80c 	bl	8012094 <__malloc_unlock>
 801207c:	e794      	b.n	8011fa8 <_malloc_r+0x20>
 801207e:	6005      	str	r5, [r0, #0]
 8012080:	e7d6      	b.n	8012030 <_malloc_r+0xa8>
 8012082:	bf00      	nop
 8012084:	2000dfd0 	.word	0x2000dfd0

08012088 <__malloc_lock>:
 8012088:	4801      	ldr	r0, [pc, #4]	@ (8012090 <__malloc_lock+0x8>)
 801208a:	f000 bef8 	b.w	8012e7e <__retarget_lock_acquire_recursive>
 801208e:	bf00      	nop
 8012090:	2000e114 	.word	0x2000e114

08012094 <__malloc_unlock>:
 8012094:	4801      	ldr	r0, [pc, #4]	@ (801209c <__malloc_unlock+0x8>)
 8012096:	f000 bef3 	b.w	8012e80 <__retarget_lock_release_recursive>
 801209a:	bf00      	nop
 801209c:	2000e114 	.word	0x2000e114

080120a0 <__cvt>:
 80120a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80120a4:	ec57 6b10 	vmov	r6, r7, d0
 80120a8:	2f00      	cmp	r7, #0
 80120aa:	460c      	mov	r4, r1
 80120ac:	4619      	mov	r1, r3
 80120ae:	463b      	mov	r3, r7
 80120b0:	bfbb      	ittet	lt
 80120b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80120b6:	461f      	movlt	r7, r3
 80120b8:	2300      	movge	r3, #0
 80120ba:	232d      	movlt	r3, #45	@ 0x2d
 80120bc:	700b      	strb	r3, [r1, #0]
 80120be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80120c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80120c4:	4691      	mov	r9, r2
 80120c6:	f023 0820 	bic.w	r8, r3, #32
 80120ca:	bfbc      	itt	lt
 80120cc:	4632      	movlt	r2, r6
 80120ce:	4616      	movlt	r6, r2
 80120d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80120d4:	d005      	beq.n	80120e2 <__cvt+0x42>
 80120d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80120da:	d100      	bne.n	80120de <__cvt+0x3e>
 80120dc:	3401      	adds	r4, #1
 80120de:	2102      	movs	r1, #2
 80120e0:	e000      	b.n	80120e4 <__cvt+0x44>
 80120e2:	2103      	movs	r1, #3
 80120e4:	ab03      	add	r3, sp, #12
 80120e6:	9301      	str	r3, [sp, #4]
 80120e8:	ab02      	add	r3, sp, #8
 80120ea:	9300      	str	r3, [sp, #0]
 80120ec:	ec47 6b10 	vmov	d0, r6, r7
 80120f0:	4653      	mov	r3, sl
 80120f2:	4622      	mov	r2, r4
 80120f4:	f000 ff5c 	bl	8012fb0 <_dtoa_r>
 80120f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80120fc:	4605      	mov	r5, r0
 80120fe:	d119      	bne.n	8012134 <__cvt+0x94>
 8012100:	f019 0f01 	tst.w	r9, #1
 8012104:	d00e      	beq.n	8012124 <__cvt+0x84>
 8012106:	eb00 0904 	add.w	r9, r0, r4
 801210a:	2200      	movs	r2, #0
 801210c:	2300      	movs	r3, #0
 801210e:	4630      	mov	r0, r6
 8012110:	4639      	mov	r1, r7
 8012112:	f7ee fcf9 	bl	8000b08 <__aeabi_dcmpeq>
 8012116:	b108      	cbz	r0, 801211c <__cvt+0x7c>
 8012118:	f8cd 900c 	str.w	r9, [sp, #12]
 801211c:	2230      	movs	r2, #48	@ 0x30
 801211e:	9b03      	ldr	r3, [sp, #12]
 8012120:	454b      	cmp	r3, r9
 8012122:	d31e      	bcc.n	8012162 <__cvt+0xc2>
 8012124:	9b03      	ldr	r3, [sp, #12]
 8012126:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012128:	1b5b      	subs	r3, r3, r5
 801212a:	4628      	mov	r0, r5
 801212c:	6013      	str	r3, [r2, #0]
 801212e:	b004      	add	sp, #16
 8012130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012134:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012138:	eb00 0904 	add.w	r9, r0, r4
 801213c:	d1e5      	bne.n	801210a <__cvt+0x6a>
 801213e:	7803      	ldrb	r3, [r0, #0]
 8012140:	2b30      	cmp	r3, #48	@ 0x30
 8012142:	d10a      	bne.n	801215a <__cvt+0xba>
 8012144:	2200      	movs	r2, #0
 8012146:	2300      	movs	r3, #0
 8012148:	4630      	mov	r0, r6
 801214a:	4639      	mov	r1, r7
 801214c:	f7ee fcdc 	bl	8000b08 <__aeabi_dcmpeq>
 8012150:	b918      	cbnz	r0, 801215a <__cvt+0xba>
 8012152:	f1c4 0401 	rsb	r4, r4, #1
 8012156:	f8ca 4000 	str.w	r4, [sl]
 801215a:	f8da 3000 	ldr.w	r3, [sl]
 801215e:	4499      	add	r9, r3
 8012160:	e7d3      	b.n	801210a <__cvt+0x6a>
 8012162:	1c59      	adds	r1, r3, #1
 8012164:	9103      	str	r1, [sp, #12]
 8012166:	701a      	strb	r2, [r3, #0]
 8012168:	e7d9      	b.n	801211e <__cvt+0x7e>

0801216a <__exponent>:
 801216a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801216c:	2900      	cmp	r1, #0
 801216e:	bfba      	itte	lt
 8012170:	4249      	neglt	r1, r1
 8012172:	232d      	movlt	r3, #45	@ 0x2d
 8012174:	232b      	movge	r3, #43	@ 0x2b
 8012176:	2909      	cmp	r1, #9
 8012178:	7002      	strb	r2, [r0, #0]
 801217a:	7043      	strb	r3, [r0, #1]
 801217c:	dd29      	ble.n	80121d2 <__exponent+0x68>
 801217e:	f10d 0307 	add.w	r3, sp, #7
 8012182:	461d      	mov	r5, r3
 8012184:	270a      	movs	r7, #10
 8012186:	461a      	mov	r2, r3
 8012188:	fbb1 f6f7 	udiv	r6, r1, r7
 801218c:	fb07 1416 	mls	r4, r7, r6, r1
 8012190:	3430      	adds	r4, #48	@ 0x30
 8012192:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012196:	460c      	mov	r4, r1
 8012198:	2c63      	cmp	r4, #99	@ 0x63
 801219a:	f103 33ff 	add.w	r3, r3, #4294967295
 801219e:	4631      	mov	r1, r6
 80121a0:	dcf1      	bgt.n	8012186 <__exponent+0x1c>
 80121a2:	3130      	adds	r1, #48	@ 0x30
 80121a4:	1e94      	subs	r4, r2, #2
 80121a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80121aa:	1c41      	adds	r1, r0, #1
 80121ac:	4623      	mov	r3, r4
 80121ae:	42ab      	cmp	r3, r5
 80121b0:	d30a      	bcc.n	80121c8 <__exponent+0x5e>
 80121b2:	f10d 0309 	add.w	r3, sp, #9
 80121b6:	1a9b      	subs	r3, r3, r2
 80121b8:	42ac      	cmp	r4, r5
 80121ba:	bf88      	it	hi
 80121bc:	2300      	movhi	r3, #0
 80121be:	3302      	adds	r3, #2
 80121c0:	4403      	add	r3, r0
 80121c2:	1a18      	subs	r0, r3, r0
 80121c4:	b003      	add	sp, #12
 80121c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80121cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80121d0:	e7ed      	b.n	80121ae <__exponent+0x44>
 80121d2:	2330      	movs	r3, #48	@ 0x30
 80121d4:	3130      	adds	r1, #48	@ 0x30
 80121d6:	7083      	strb	r3, [r0, #2]
 80121d8:	70c1      	strb	r1, [r0, #3]
 80121da:	1d03      	adds	r3, r0, #4
 80121dc:	e7f1      	b.n	80121c2 <__exponent+0x58>
	...

080121e0 <_printf_float>:
 80121e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e4:	b08d      	sub	sp, #52	@ 0x34
 80121e6:	460c      	mov	r4, r1
 80121e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80121ec:	4616      	mov	r6, r2
 80121ee:	461f      	mov	r7, r3
 80121f0:	4605      	mov	r5, r0
 80121f2:	f000 fdbf 	bl	8012d74 <_localeconv_r>
 80121f6:	6803      	ldr	r3, [r0, #0]
 80121f8:	9304      	str	r3, [sp, #16]
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7ee f858 	bl	80002b0 <strlen>
 8012200:	2300      	movs	r3, #0
 8012202:	930a      	str	r3, [sp, #40]	@ 0x28
 8012204:	f8d8 3000 	ldr.w	r3, [r8]
 8012208:	9005      	str	r0, [sp, #20]
 801220a:	3307      	adds	r3, #7
 801220c:	f023 0307 	bic.w	r3, r3, #7
 8012210:	f103 0208 	add.w	r2, r3, #8
 8012214:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012218:	f8d4 b000 	ldr.w	fp, [r4]
 801221c:	f8c8 2000 	str.w	r2, [r8]
 8012220:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012224:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012228:	9307      	str	r3, [sp, #28]
 801222a:	f8cd 8018 	str.w	r8, [sp, #24]
 801222e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012236:	4b9c      	ldr	r3, [pc, #624]	@ (80124a8 <_printf_float+0x2c8>)
 8012238:	f04f 32ff 	mov.w	r2, #4294967295
 801223c:	f7ee fc96 	bl	8000b6c <__aeabi_dcmpun>
 8012240:	bb70      	cbnz	r0, 80122a0 <_printf_float+0xc0>
 8012242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012246:	4b98      	ldr	r3, [pc, #608]	@ (80124a8 <_printf_float+0x2c8>)
 8012248:	f04f 32ff 	mov.w	r2, #4294967295
 801224c:	f7ee fc70 	bl	8000b30 <__aeabi_dcmple>
 8012250:	bb30      	cbnz	r0, 80122a0 <_printf_float+0xc0>
 8012252:	2200      	movs	r2, #0
 8012254:	2300      	movs	r3, #0
 8012256:	4640      	mov	r0, r8
 8012258:	4649      	mov	r1, r9
 801225a:	f7ee fc5f 	bl	8000b1c <__aeabi_dcmplt>
 801225e:	b110      	cbz	r0, 8012266 <_printf_float+0x86>
 8012260:	232d      	movs	r3, #45	@ 0x2d
 8012262:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012266:	4a91      	ldr	r2, [pc, #580]	@ (80124ac <_printf_float+0x2cc>)
 8012268:	4b91      	ldr	r3, [pc, #580]	@ (80124b0 <_printf_float+0x2d0>)
 801226a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801226e:	bf94      	ite	ls
 8012270:	4690      	movls	r8, r2
 8012272:	4698      	movhi	r8, r3
 8012274:	2303      	movs	r3, #3
 8012276:	6123      	str	r3, [r4, #16]
 8012278:	f02b 0304 	bic.w	r3, fp, #4
 801227c:	6023      	str	r3, [r4, #0]
 801227e:	f04f 0900 	mov.w	r9, #0
 8012282:	9700      	str	r7, [sp, #0]
 8012284:	4633      	mov	r3, r6
 8012286:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012288:	4621      	mov	r1, r4
 801228a:	4628      	mov	r0, r5
 801228c:	f000 f9d2 	bl	8012634 <_printf_common>
 8012290:	3001      	adds	r0, #1
 8012292:	f040 808d 	bne.w	80123b0 <_printf_float+0x1d0>
 8012296:	f04f 30ff 	mov.w	r0, #4294967295
 801229a:	b00d      	add	sp, #52	@ 0x34
 801229c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122a0:	4642      	mov	r2, r8
 80122a2:	464b      	mov	r3, r9
 80122a4:	4640      	mov	r0, r8
 80122a6:	4649      	mov	r1, r9
 80122a8:	f7ee fc60 	bl	8000b6c <__aeabi_dcmpun>
 80122ac:	b140      	cbz	r0, 80122c0 <_printf_float+0xe0>
 80122ae:	464b      	mov	r3, r9
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	bfbc      	itt	lt
 80122b4:	232d      	movlt	r3, #45	@ 0x2d
 80122b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80122ba:	4a7e      	ldr	r2, [pc, #504]	@ (80124b4 <_printf_float+0x2d4>)
 80122bc:	4b7e      	ldr	r3, [pc, #504]	@ (80124b8 <_printf_float+0x2d8>)
 80122be:	e7d4      	b.n	801226a <_printf_float+0x8a>
 80122c0:	6863      	ldr	r3, [r4, #4]
 80122c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80122c6:	9206      	str	r2, [sp, #24]
 80122c8:	1c5a      	adds	r2, r3, #1
 80122ca:	d13b      	bne.n	8012344 <_printf_float+0x164>
 80122cc:	2306      	movs	r3, #6
 80122ce:	6063      	str	r3, [r4, #4]
 80122d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80122d4:	2300      	movs	r3, #0
 80122d6:	6022      	str	r2, [r4, #0]
 80122d8:	9303      	str	r3, [sp, #12]
 80122da:	ab0a      	add	r3, sp, #40	@ 0x28
 80122dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80122e0:	ab09      	add	r3, sp, #36	@ 0x24
 80122e2:	9300      	str	r3, [sp, #0]
 80122e4:	6861      	ldr	r1, [r4, #4]
 80122e6:	ec49 8b10 	vmov	d0, r8, r9
 80122ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80122ee:	4628      	mov	r0, r5
 80122f0:	f7ff fed6 	bl	80120a0 <__cvt>
 80122f4:	9b06      	ldr	r3, [sp, #24]
 80122f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80122f8:	2b47      	cmp	r3, #71	@ 0x47
 80122fa:	4680      	mov	r8, r0
 80122fc:	d129      	bne.n	8012352 <_printf_float+0x172>
 80122fe:	1cc8      	adds	r0, r1, #3
 8012300:	db02      	blt.n	8012308 <_printf_float+0x128>
 8012302:	6863      	ldr	r3, [r4, #4]
 8012304:	4299      	cmp	r1, r3
 8012306:	dd41      	ble.n	801238c <_printf_float+0x1ac>
 8012308:	f1aa 0a02 	sub.w	sl, sl, #2
 801230c:	fa5f fa8a 	uxtb.w	sl, sl
 8012310:	3901      	subs	r1, #1
 8012312:	4652      	mov	r2, sl
 8012314:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012318:	9109      	str	r1, [sp, #36]	@ 0x24
 801231a:	f7ff ff26 	bl	801216a <__exponent>
 801231e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012320:	1813      	adds	r3, r2, r0
 8012322:	2a01      	cmp	r2, #1
 8012324:	4681      	mov	r9, r0
 8012326:	6123      	str	r3, [r4, #16]
 8012328:	dc02      	bgt.n	8012330 <_printf_float+0x150>
 801232a:	6822      	ldr	r2, [r4, #0]
 801232c:	07d2      	lsls	r2, r2, #31
 801232e:	d501      	bpl.n	8012334 <_printf_float+0x154>
 8012330:	3301      	adds	r3, #1
 8012332:	6123      	str	r3, [r4, #16]
 8012334:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012338:	2b00      	cmp	r3, #0
 801233a:	d0a2      	beq.n	8012282 <_printf_float+0xa2>
 801233c:	232d      	movs	r3, #45	@ 0x2d
 801233e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012342:	e79e      	b.n	8012282 <_printf_float+0xa2>
 8012344:	9a06      	ldr	r2, [sp, #24]
 8012346:	2a47      	cmp	r2, #71	@ 0x47
 8012348:	d1c2      	bne.n	80122d0 <_printf_float+0xf0>
 801234a:	2b00      	cmp	r3, #0
 801234c:	d1c0      	bne.n	80122d0 <_printf_float+0xf0>
 801234e:	2301      	movs	r3, #1
 8012350:	e7bd      	b.n	80122ce <_printf_float+0xee>
 8012352:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012356:	d9db      	bls.n	8012310 <_printf_float+0x130>
 8012358:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801235c:	d118      	bne.n	8012390 <_printf_float+0x1b0>
 801235e:	2900      	cmp	r1, #0
 8012360:	6863      	ldr	r3, [r4, #4]
 8012362:	dd0b      	ble.n	801237c <_printf_float+0x19c>
 8012364:	6121      	str	r1, [r4, #16]
 8012366:	b913      	cbnz	r3, 801236e <_printf_float+0x18e>
 8012368:	6822      	ldr	r2, [r4, #0]
 801236a:	07d0      	lsls	r0, r2, #31
 801236c:	d502      	bpl.n	8012374 <_printf_float+0x194>
 801236e:	3301      	adds	r3, #1
 8012370:	440b      	add	r3, r1
 8012372:	6123      	str	r3, [r4, #16]
 8012374:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012376:	f04f 0900 	mov.w	r9, #0
 801237a:	e7db      	b.n	8012334 <_printf_float+0x154>
 801237c:	b913      	cbnz	r3, 8012384 <_printf_float+0x1a4>
 801237e:	6822      	ldr	r2, [r4, #0]
 8012380:	07d2      	lsls	r2, r2, #31
 8012382:	d501      	bpl.n	8012388 <_printf_float+0x1a8>
 8012384:	3302      	adds	r3, #2
 8012386:	e7f4      	b.n	8012372 <_printf_float+0x192>
 8012388:	2301      	movs	r3, #1
 801238a:	e7f2      	b.n	8012372 <_printf_float+0x192>
 801238c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012390:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012392:	4299      	cmp	r1, r3
 8012394:	db05      	blt.n	80123a2 <_printf_float+0x1c2>
 8012396:	6823      	ldr	r3, [r4, #0]
 8012398:	6121      	str	r1, [r4, #16]
 801239a:	07d8      	lsls	r0, r3, #31
 801239c:	d5ea      	bpl.n	8012374 <_printf_float+0x194>
 801239e:	1c4b      	adds	r3, r1, #1
 80123a0:	e7e7      	b.n	8012372 <_printf_float+0x192>
 80123a2:	2900      	cmp	r1, #0
 80123a4:	bfd4      	ite	le
 80123a6:	f1c1 0202 	rsble	r2, r1, #2
 80123aa:	2201      	movgt	r2, #1
 80123ac:	4413      	add	r3, r2
 80123ae:	e7e0      	b.n	8012372 <_printf_float+0x192>
 80123b0:	6823      	ldr	r3, [r4, #0]
 80123b2:	055a      	lsls	r2, r3, #21
 80123b4:	d407      	bmi.n	80123c6 <_printf_float+0x1e6>
 80123b6:	6923      	ldr	r3, [r4, #16]
 80123b8:	4642      	mov	r2, r8
 80123ba:	4631      	mov	r1, r6
 80123bc:	4628      	mov	r0, r5
 80123be:	47b8      	blx	r7
 80123c0:	3001      	adds	r0, #1
 80123c2:	d12b      	bne.n	801241c <_printf_float+0x23c>
 80123c4:	e767      	b.n	8012296 <_printf_float+0xb6>
 80123c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80123ca:	f240 80dd 	bls.w	8012588 <_printf_float+0x3a8>
 80123ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80123d2:	2200      	movs	r2, #0
 80123d4:	2300      	movs	r3, #0
 80123d6:	f7ee fb97 	bl	8000b08 <__aeabi_dcmpeq>
 80123da:	2800      	cmp	r0, #0
 80123dc:	d033      	beq.n	8012446 <_printf_float+0x266>
 80123de:	4a37      	ldr	r2, [pc, #220]	@ (80124bc <_printf_float+0x2dc>)
 80123e0:	2301      	movs	r3, #1
 80123e2:	4631      	mov	r1, r6
 80123e4:	4628      	mov	r0, r5
 80123e6:	47b8      	blx	r7
 80123e8:	3001      	adds	r0, #1
 80123ea:	f43f af54 	beq.w	8012296 <_printf_float+0xb6>
 80123ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80123f2:	4543      	cmp	r3, r8
 80123f4:	db02      	blt.n	80123fc <_printf_float+0x21c>
 80123f6:	6823      	ldr	r3, [r4, #0]
 80123f8:	07d8      	lsls	r0, r3, #31
 80123fa:	d50f      	bpl.n	801241c <_printf_float+0x23c>
 80123fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012400:	4631      	mov	r1, r6
 8012402:	4628      	mov	r0, r5
 8012404:	47b8      	blx	r7
 8012406:	3001      	adds	r0, #1
 8012408:	f43f af45 	beq.w	8012296 <_printf_float+0xb6>
 801240c:	f04f 0900 	mov.w	r9, #0
 8012410:	f108 38ff 	add.w	r8, r8, #4294967295
 8012414:	f104 0a1a 	add.w	sl, r4, #26
 8012418:	45c8      	cmp	r8, r9
 801241a:	dc09      	bgt.n	8012430 <_printf_float+0x250>
 801241c:	6823      	ldr	r3, [r4, #0]
 801241e:	079b      	lsls	r3, r3, #30
 8012420:	f100 8103 	bmi.w	801262a <_printf_float+0x44a>
 8012424:	68e0      	ldr	r0, [r4, #12]
 8012426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012428:	4298      	cmp	r0, r3
 801242a:	bfb8      	it	lt
 801242c:	4618      	movlt	r0, r3
 801242e:	e734      	b.n	801229a <_printf_float+0xba>
 8012430:	2301      	movs	r3, #1
 8012432:	4652      	mov	r2, sl
 8012434:	4631      	mov	r1, r6
 8012436:	4628      	mov	r0, r5
 8012438:	47b8      	blx	r7
 801243a:	3001      	adds	r0, #1
 801243c:	f43f af2b 	beq.w	8012296 <_printf_float+0xb6>
 8012440:	f109 0901 	add.w	r9, r9, #1
 8012444:	e7e8      	b.n	8012418 <_printf_float+0x238>
 8012446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012448:	2b00      	cmp	r3, #0
 801244a:	dc39      	bgt.n	80124c0 <_printf_float+0x2e0>
 801244c:	4a1b      	ldr	r2, [pc, #108]	@ (80124bc <_printf_float+0x2dc>)
 801244e:	2301      	movs	r3, #1
 8012450:	4631      	mov	r1, r6
 8012452:	4628      	mov	r0, r5
 8012454:	47b8      	blx	r7
 8012456:	3001      	adds	r0, #1
 8012458:	f43f af1d 	beq.w	8012296 <_printf_float+0xb6>
 801245c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012460:	ea59 0303 	orrs.w	r3, r9, r3
 8012464:	d102      	bne.n	801246c <_printf_float+0x28c>
 8012466:	6823      	ldr	r3, [r4, #0]
 8012468:	07d9      	lsls	r1, r3, #31
 801246a:	d5d7      	bpl.n	801241c <_printf_float+0x23c>
 801246c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012470:	4631      	mov	r1, r6
 8012472:	4628      	mov	r0, r5
 8012474:	47b8      	blx	r7
 8012476:	3001      	adds	r0, #1
 8012478:	f43f af0d 	beq.w	8012296 <_printf_float+0xb6>
 801247c:	f04f 0a00 	mov.w	sl, #0
 8012480:	f104 0b1a 	add.w	fp, r4, #26
 8012484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012486:	425b      	negs	r3, r3
 8012488:	4553      	cmp	r3, sl
 801248a:	dc01      	bgt.n	8012490 <_printf_float+0x2b0>
 801248c:	464b      	mov	r3, r9
 801248e:	e793      	b.n	80123b8 <_printf_float+0x1d8>
 8012490:	2301      	movs	r3, #1
 8012492:	465a      	mov	r2, fp
 8012494:	4631      	mov	r1, r6
 8012496:	4628      	mov	r0, r5
 8012498:	47b8      	blx	r7
 801249a:	3001      	adds	r0, #1
 801249c:	f43f aefb 	beq.w	8012296 <_printf_float+0xb6>
 80124a0:	f10a 0a01 	add.w	sl, sl, #1
 80124a4:	e7ee      	b.n	8012484 <_printf_float+0x2a4>
 80124a6:	bf00      	nop
 80124a8:	7fefffff 	.word	0x7fefffff
 80124ac:	080d27d0 	.word	0x080d27d0
 80124b0:	080d27d4 	.word	0x080d27d4
 80124b4:	080d27d8 	.word	0x080d27d8
 80124b8:	080d27dc 	.word	0x080d27dc
 80124bc:	080d27e0 	.word	0x080d27e0
 80124c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80124c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80124c6:	4553      	cmp	r3, sl
 80124c8:	bfa8      	it	ge
 80124ca:	4653      	movge	r3, sl
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	4699      	mov	r9, r3
 80124d0:	dc36      	bgt.n	8012540 <_printf_float+0x360>
 80124d2:	f04f 0b00 	mov.w	fp, #0
 80124d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80124da:	f104 021a 	add.w	r2, r4, #26
 80124de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80124e0:	9306      	str	r3, [sp, #24]
 80124e2:	eba3 0309 	sub.w	r3, r3, r9
 80124e6:	455b      	cmp	r3, fp
 80124e8:	dc31      	bgt.n	801254e <_printf_float+0x36e>
 80124ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124ec:	459a      	cmp	sl, r3
 80124ee:	dc3a      	bgt.n	8012566 <_printf_float+0x386>
 80124f0:	6823      	ldr	r3, [r4, #0]
 80124f2:	07da      	lsls	r2, r3, #31
 80124f4:	d437      	bmi.n	8012566 <_printf_float+0x386>
 80124f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124f8:	ebaa 0903 	sub.w	r9, sl, r3
 80124fc:	9b06      	ldr	r3, [sp, #24]
 80124fe:	ebaa 0303 	sub.w	r3, sl, r3
 8012502:	4599      	cmp	r9, r3
 8012504:	bfa8      	it	ge
 8012506:	4699      	movge	r9, r3
 8012508:	f1b9 0f00 	cmp.w	r9, #0
 801250c:	dc33      	bgt.n	8012576 <_printf_float+0x396>
 801250e:	f04f 0800 	mov.w	r8, #0
 8012512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012516:	f104 0b1a 	add.w	fp, r4, #26
 801251a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801251c:	ebaa 0303 	sub.w	r3, sl, r3
 8012520:	eba3 0309 	sub.w	r3, r3, r9
 8012524:	4543      	cmp	r3, r8
 8012526:	f77f af79 	ble.w	801241c <_printf_float+0x23c>
 801252a:	2301      	movs	r3, #1
 801252c:	465a      	mov	r2, fp
 801252e:	4631      	mov	r1, r6
 8012530:	4628      	mov	r0, r5
 8012532:	47b8      	blx	r7
 8012534:	3001      	adds	r0, #1
 8012536:	f43f aeae 	beq.w	8012296 <_printf_float+0xb6>
 801253a:	f108 0801 	add.w	r8, r8, #1
 801253e:	e7ec      	b.n	801251a <_printf_float+0x33a>
 8012540:	4642      	mov	r2, r8
 8012542:	4631      	mov	r1, r6
 8012544:	4628      	mov	r0, r5
 8012546:	47b8      	blx	r7
 8012548:	3001      	adds	r0, #1
 801254a:	d1c2      	bne.n	80124d2 <_printf_float+0x2f2>
 801254c:	e6a3      	b.n	8012296 <_printf_float+0xb6>
 801254e:	2301      	movs	r3, #1
 8012550:	4631      	mov	r1, r6
 8012552:	4628      	mov	r0, r5
 8012554:	9206      	str	r2, [sp, #24]
 8012556:	47b8      	blx	r7
 8012558:	3001      	adds	r0, #1
 801255a:	f43f ae9c 	beq.w	8012296 <_printf_float+0xb6>
 801255e:	9a06      	ldr	r2, [sp, #24]
 8012560:	f10b 0b01 	add.w	fp, fp, #1
 8012564:	e7bb      	b.n	80124de <_printf_float+0x2fe>
 8012566:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801256a:	4631      	mov	r1, r6
 801256c:	4628      	mov	r0, r5
 801256e:	47b8      	blx	r7
 8012570:	3001      	adds	r0, #1
 8012572:	d1c0      	bne.n	80124f6 <_printf_float+0x316>
 8012574:	e68f      	b.n	8012296 <_printf_float+0xb6>
 8012576:	9a06      	ldr	r2, [sp, #24]
 8012578:	464b      	mov	r3, r9
 801257a:	4442      	add	r2, r8
 801257c:	4631      	mov	r1, r6
 801257e:	4628      	mov	r0, r5
 8012580:	47b8      	blx	r7
 8012582:	3001      	adds	r0, #1
 8012584:	d1c3      	bne.n	801250e <_printf_float+0x32e>
 8012586:	e686      	b.n	8012296 <_printf_float+0xb6>
 8012588:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801258c:	f1ba 0f01 	cmp.w	sl, #1
 8012590:	dc01      	bgt.n	8012596 <_printf_float+0x3b6>
 8012592:	07db      	lsls	r3, r3, #31
 8012594:	d536      	bpl.n	8012604 <_printf_float+0x424>
 8012596:	2301      	movs	r3, #1
 8012598:	4642      	mov	r2, r8
 801259a:	4631      	mov	r1, r6
 801259c:	4628      	mov	r0, r5
 801259e:	47b8      	blx	r7
 80125a0:	3001      	adds	r0, #1
 80125a2:	f43f ae78 	beq.w	8012296 <_printf_float+0xb6>
 80125a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80125aa:	4631      	mov	r1, r6
 80125ac:	4628      	mov	r0, r5
 80125ae:	47b8      	blx	r7
 80125b0:	3001      	adds	r0, #1
 80125b2:	f43f ae70 	beq.w	8012296 <_printf_float+0xb6>
 80125b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80125ba:	2200      	movs	r2, #0
 80125bc:	2300      	movs	r3, #0
 80125be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80125c2:	f7ee faa1 	bl	8000b08 <__aeabi_dcmpeq>
 80125c6:	b9c0      	cbnz	r0, 80125fa <_printf_float+0x41a>
 80125c8:	4653      	mov	r3, sl
 80125ca:	f108 0201 	add.w	r2, r8, #1
 80125ce:	4631      	mov	r1, r6
 80125d0:	4628      	mov	r0, r5
 80125d2:	47b8      	blx	r7
 80125d4:	3001      	adds	r0, #1
 80125d6:	d10c      	bne.n	80125f2 <_printf_float+0x412>
 80125d8:	e65d      	b.n	8012296 <_printf_float+0xb6>
 80125da:	2301      	movs	r3, #1
 80125dc:	465a      	mov	r2, fp
 80125de:	4631      	mov	r1, r6
 80125e0:	4628      	mov	r0, r5
 80125e2:	47b8      	blx	r7
 80125e4:	3001      	adds	r0, #1
 80125e6:	f43f ae56 	beq.w	8012296 <_printf_float+0xb6>
 80125ea:	f108 0801 	add.w	r8, r8, #1
 80125ee:	45d0      	cmp	r8, sl
 80125f0:	dbf3      	blt.n	80125da <_printf_float+0x3fa>
 80125f2:	464b      	mov	r3, r9
 80125f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80125f8:	e6df      	b.n	80123ba <_printf_float+0x1da>
 80125fa:	f04f 0800 	mov.w	r8, #0
 80125fe:	f104 0b1a 	add.w	fp, r4, #26
 8012602:	e7f4      	b.n	80125ee <_printf_float+0x40e>
 8012604:	2301      	movs	r3, #1
 8012606:	4642      	mov	r2, r8
 8012608:	e7e1      	b.n	80125ce <_printf_float+0x3ee>
 801260a:	2301      	movs	r3, #1
 801260c:	464a      	mov	r2, r9
 801260e:	4631      	mov	r1, r6
 8012610:	4628      	mov	r0, r5
 8012612:	47b8      	blx	r7
 8012614:	3001      	adds	r0, #1
 8012616:	f43f ae3e 	beq.w	8012296 <_printf_float+0xb6>
 801261a:	f108 0801 	add.w	r8, r8, #1
 801261e:	68e3      	ldr	r3, [r4, #12]
 8012620:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012622:	1a5b      	subs	r3, r3, r1
 8012624:	4543      	cmp	r3, r8
 8012626:	dcf0      	bgt.n	801260a <_printf_float+0x42a>
 8012628:	e6fc      	b.n	8012424 <_printf_float+0x244>
 801262a:	f04f 0800 	mov.w	r8, #0
 801262e:	f104 0919 	add.w	r9, r4, #25
 8012632:	e7f4      	b.n	801261e <_printf_float+0x43e>

08012634 <_printf_common>:
 8012634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012638:	4616      	mov	r6, r2
 801263a:	4698      	mov	r8, r3
 801263c:	688a      	ldr	r2, [r1, #8]
 801263e:	690b      	ldr	r3, [r1, #16]
 8012640:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012644:	4293      	cmp	r3, r2
 8012646:	bfb8      	it	lt
 8012648:	4613      	movlt	r3, r2
 801264a:	6033      	str	r3, [r6, #0]
 801264c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012650:	4607      	mov	r7, r0
 8012652:	460c      	mov	r4, r1
 8012654:	b10a      	cbz	r2, 801265a <_printf_common+0x26>
 8012656:	3301      	adds	r3, #1
 8012658:	6033      	str	r3, [r6, #0]
 801265a:	6823      	ldr	r3, [r4, #0]
 801265c:	0699      	lsls	r1, r3, #26
 801265e:	bf42      	ittt	mi
 8012660:	6833      	ldrmi	r3, [r6, #0]
 8012662:	3302      	addmi	r3, #2
 8012664:	6033      	strmi	r3, [r6, #0]
 8012666:	6825      	ldr	r5, [r4, #0]
 8012668:	f015 0506 	ands.w	r5, r5, #6
 801266c:	d106      	bne.n	801267c <_printf_common+0x48>
 801266e:	f104 0a19 	add.w	sl, r4, #25
 8012672:	68e3      	ldr	r3, [r4, #12]
 8012674:	6832      	ldr	r2, [r6, #0]
 8012676:	1a9b      	subs	r3, r3, r2
 8012678:	42ab      	cmp	r3, r5
 801267a:	dc26      	bgt.n	80126ca <_printf_common+0x96>
 801267c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012680:	6822      	ldr	r2, [r4, #0]
 8012682:	3b00      	subs	r3, #0
 8012684:	bf18      	it	ne
 8012686:	2301      	movne	r3, #1
 8012688:	0692      	lsls	r2, r2, #26
 801268a:	d42b      	bmi.n	80126e4 <_printf_common+0xb0>
 801268c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012690:	4641      	mov	r1, r8
 8012692:	4638      	mov	r0, r7
 8012694:	47c8      	blx	r9
 8012696:	3001      	adds	r0, #1
 8012698:	d01e      	beq.n	80126d8 <_printf_common+0xa4>
 801269a:	6823      	ldr	r3, [r4, #0]
 801269c:	6922      	ldr	r2, [r4, #16]
 801269e:	f003 0306 	and.w	r3, r3, #6
 80126a2:	2b04      	cmp	r3, #4
 80126a4:	bf02      	ittt	eq
 80126a6:	68e5      	ldreq	r5, [r4, #12]
 80126a8:	6833      	ldreq	r3, [r6, #0]
 80126aa:	1aed      	subeq	r5, r5, r3
 80126ac:	68a3      	ldr	r3, [r4, #8]
 80126ae:	bf0c      	ite	eq
 80126b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80126b4:	2500      	movne	r5, #0
 80126b6:	4293      	cmp	r3, r2
 80126b8:	bfc4      	itt	gt
 80126ba:	1a9b      	subgt	r3, r3, r2
 80126bc:	18ed      	addgt	r5, r5, r3
 80126be:	2600      	movs	r6, #0
 80126c0:	341a      	adds	r4, #26
 80126c2:	42b5      	cmp	r5, r6
 80126c4:	d11a      	bne.n	80126fc <_printf_common+0xc8>
 80126c6:	2000      	movs	r0, #0
 80126c8:	e008      	b.n	80126dc <_printf_common+0xa8>
 80126ca:	2301      	movs	r3, #1
 80126cc:	4652      	mov	r2, sl
 80126ce:	4641      	mov	r1, r8
 80126d0:	4638      	mov	r0, r7
 80126d2:	47c8      	blx	r9
 80126d4:	3001      	adds	r0, #1
 80126d6:	d103      	bne.n	80126e0 <_printf_common+0xac>
 80126d8:	f04f 30ff 	mov.w	r0, #4294967295
 80126dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126e0:	3501      	adds	r5, #1
 80126e2:	e7c6      	b.n	8012672 <_printf_common+0x3e>
 80126e4:	18e1      	adds	r1, r4, r3
 80126e6:	1c5a      	adds	r2, r3, #1
 80126e8:	2030      	movs	r0, #48	@ 0x30
 80126ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80126ee:	4422      	add	r2, r4
 80126f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80126f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80126f8:	3302      	adds	r3, #2
 80126fa:	e7c7      	b.n	801268c <_printf_common+0x58>
 80126fc:	2301      	movs	r3, #1
 80126fe:	4622      	mov	r2, r4
 8012700:	4641      	mov	r1, r8
 8012702:	4638      	mov	r0, r7
 8012704:	47c8      	blx	r9
 8012706:	3001      	adds	r0, #1
 8012708:	d0e6      	beq.n	80126d8 <_printf_common+0xa4>
 801270a:	3601      	adds	r6, #1
 801270c:	e7d9      	b.n	80126c2 <_printf_common+0x8e>
	...

08012710 <_printf_i>:
 8012710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012714:	7e0f      	ldrb	r7, [r1, #24]
 8012716:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012718:	2f78      	cmp	r7, #120	@ 0x78
 801271a:	4691      	mov	r9, r2
 801271c:	4680      	mov	r8, r0
 801271e:	460c      	mov	r4, r1
 8012720:	469a      	mov	sl, r3
 8012722:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012726:	d807      	bhi.n	8012738 <_printf_i+0x28>
 8012728:	2f62      	cmp	r7, #98	@ 0x62
 801272a:	d80a      	bhi.n	8012742 <_printf_i+0x32>
 801272c:	2f00      	cmp	r7, #0
 801272e:	f000 80d2 	beq.w	80128d6 <_printf_i+0x1c6>
 8012732:	2f58      	cmp	r7, #88	@ 0x58
 8012734:	f000 80b9 	beq.w	80128aa <_printf_i+0x19a>
 8012738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801273c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012740:	e03a      	b.n	80127b8 <_printf_i+0xa8>
 8012742:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012746:	2b15      	cmp	r3, #21
 8012748:	d8f6      	bhi.n	8012738 <_printf_i+0x28>
 801274a:	a101      	add	r1, pc, #4	@ (adr r1, 8012750 <_printf_i+0x40>)
 801274c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012750:	080127a9 	.word	0x080127a9
 8012754:	080127bd 	.word	0x080127bd
 8012758:	08012739 	.word	0x08012739
 801275c:	08012739 	.word	0x08012739
 8012760:	08012739 	.word	0x08012739
 8012764:	08012739 	.word	0x08012739
 8012768:	080127bd 	.word	0x080127bd
 801276c:	08012739 	.word	0x08012739
 8012770:	08012739 	.word	0x08012739
 8012774:	08012739 	.word	0x08012739
 8012778:	08012739 	.word	0x08012739
 801277c:	080128bd 	.word	0x080128bd
 8012780:	080127e7 	.word	0x080127e7
 8012784:	08012877 	.word	0x08012877
 8012788:	08012739 	.word	0x08012739
 801278c:	08012739 	.word	0x08012739
 8012790:	080128df 	.word	0x080128df
 8012794:	08012739 	.word	0x08012739
 8012798:	080127e7 	.word	0x080127e7
 801279c:	08012739 	.word	0x08012739
 80127a0:	08012739 	.word	0x08012739
 80127a4:	0801287f 	.word	0x0801287f
 80127a8:	6833      	ldr	r3, [r6, #0]
 80127aa:	1d1a      	adds	r2, r3, #4
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	6032      	str	r2, [r6, #0]
 80127b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80127b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80127b8:	2301      	movs	r3, #1
 80127ba:	e09d      	b.n	80128f8 <_printf_i+0x1e8>
 80127bc:	6833      	ldr	r3, [r6, #0]
 80127be:	6820      	ldr	r0, [r4, #0]
 80127c0:	1d19      	adds	r1, r3, #4
 80127c2:	6031      	str	r1, [r6, #0]
 80127c4:	0606      	lsls	r6, r0, #24
 80127c6:	d501      	bpl.n	80127cc <_printf_i+0xbc>
 80127c8:	681d      	ldr	r5, [r3, #0]
 80127ca:	e003      	b.n	80127d4 <_printf_i+0xc4>
 80127cc:	0645      	lsls	r5, r0, #25
 80127ce:	d5fb      	bpl.n	80127c8 <_printf_i+0xb8>
 80127d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80127d4:	2d00      	cmp	r5, #0
 80127d6:	da03      	bge.n	80127e0 <_printf_i+0xd0>
 80127d8:	232d      	movs	r3, #45	@ 0x2d
 80127da:	426d      	negs	r5, r5
 80127dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80127e0:	4859      	ldr	r0, [pc, #356]	@ (8012948 <_printf_i+0x238>)
 80127e2:	230a      	movs	r3, #10
 80127e4:	e011      	b.n	801280a <_printf_i+0xfa>
 80127e6:	6821      	ldr	r1, [r4, #0]
 80127e8:	6833      	ldr	r3, [r6, #0]
 80127ea:	0608      	lsls	r0, r1, #24
 80127ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80127f0:	d402      	bmi.n	80127f8 <_printf_i+0xe8>
 80127f2:	0649      	lsls	r1, r1, #25
 80127f4:	bf48      	it	mi
 80127f6:	b2ad      	uxthmi	r5, r5
 80127f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80127fa:	4853      	ldr	r0, [pc, #332]	@ (8012948 <_printf_i+0x238>)
 80127fc:	6033      	str	r3, [r6, #0]
 80127fe:	bf14      	ite	ne
 8012800:	230a      	movne	r3, #10
 8012802:	2308      	moveq	r3, #8
 8012804:	2100      	movs	r1, #0
 8012806:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801280a:	6866      	ldr	r6, [r4, #4]
 801280c:	60a6      	str	r6, [r4, #8]
 801280e:	2e00      	cmp	r6, #0
 8012810:	bfa2      	ittt	ge
 8012812:	6821      	ldrge	r1, [r4, #0]
 8012814:	f021 0104 	bicge.w	r1, r1, #4
 8012818:	6021      	strge	r1, [r4, #0]
 801281a:	b90d      	cbnz	r5, 8012820 <_printf_i+0x110>
 801281c:	2e00      	cmp	r6, #0
 801281e:	d04b      	beq.n	80128b8 <_printf_i+0x1a8>
 8012820:	4616      	mov	r6, r2
 8012822:	fbb5 f1f3 	udiv	r1, r5, r3
 8012826:	fb03 5711 	mls	r7, r3, r1, r5
 801282a:	5dc7      	ldrb	r7, [r0, r7]
 801282c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012830:	462f      	mov	r7, r5
 8012832:	42bb      	cmp	r3, r7
 8012834:	460d      	mov	r5, r1
 8012836:	d9f4      	bls.n	8012822 <_printf_i+0x112>
 8012838:	2b08      	cmp	r3, #8
 801283a:	d10b      	bne.n	8012854 <_printf_i+0x144>
 801283c:	6823      	ldr	r3, [r4, #0]
 801283e:	07df      	lsls	r7, r3, #31
 8012840:	d508      	bpl.n	8012854 <_printf_i+0x144>
 8012842:	6923      	ldr	r3, [r4, #16]
 8012844:	6861      	ldr	r1, [r4, #4]
 8012846:	4299      	cmp	r1, r3
 8012848:	bfde      	ittt	le
 801284a:	2330      	movle	r3, #48	@ 0x30
 801284c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012850:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012854:	1b92      	subs	r2, r2, r6
 8012856:	6122      	str	r2, [r4, #16]
 8012858:	f8cd a000 	str.w	sl, [sp]
 801285c:	464b      	mov	r3, r9
 801285e:	aa03      	add	r2, sp, #12
 8012860:	4621      	mov	r1, r4
 8012862:	4640      	mov	r0, r8
 8012864:	f7ff fee6 	bl	8012634 <_printf_common>
 8012868:	3001      	adds	r0, #1
 801286a:	d14a      	bne.n	8012902 <_printf_i+0x1f2>
 801286c:	f04f 30ff 	mov.w	r0, #4294967295
 8012870:	b004      	add	sp, #16
 8012872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012876:	6823      	ldr	r3, [r4, #0]
 8012878:	f043 0320 	orr.w	r3, r3, #32
 801287c:	6023      	str	r3, [r4, #0]
 801287e:	4833      	ldr	r0, [pc, #204]	@ (801294c <_printf_i+0x23c>)
 8012880:	2778      	movs	r7, #120	@ 0x78
 8012882:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012886:	6823      	ldr	r3, [r4, #0]
 8012888:	6831      	ldr	r1, [r6, #0]
 801288a:	061f      	lsls	r7, r3, #24
 801288c:	f851 5b04 	ldr.w	r5, [r1], #4
 8012890:	d402      	bmi.n	8012898 <_printf_i+0x188>
 8012892:	065f      	lsls	r7, r3, #25
 8012894:	bf48      	it	mi
 8012896:	b2ad      	uxthmi	r5, r5
 8012898:	6031      	str	r1, [r6, #0]
 801289a:	07d9      	lsls	r1, r3, #31
 801289c:	bf44      	itt	mi
 801289e:	f043 0320 	orrmi.w	r3, r3, #32
 80128a2:	6023      	strmi	r3, [r4, #0]
 80128a4:	b11d      	cbz	r5, 80128ae <_printf_i+0x19e>
 80128a6:	2310      	movs	r3, #16
 80128a8:	e7ac      	b.n	8012804 <_printf_i+0xf4>
 80128aa:	4827      	ldr	r0, [pc, #156]	@ (8012948 <_printf_i+0x238>)
 80128ac:	e7e9      	b.n	8012882 <_printf_i+0x172>
 80128ae:	6823      	ldr	r3, [r4, #0]
 80128b0:	f023 0320 	bic.w	r3, r3, #32
 80128b4:	6023      	str	r3, [r4, #0]
 80128b6:	e7f6      	b.n	80128a6 <_printf_i+0x196>
 80128b8:	4616      	mov	r6, r2
 80128ba:	e7bd      	b.n	8012838 <_printf_i+0x128>
 80128bc:	6833      	ldr	r3, [r6, #0]
 80128be:	6825      	ldr	r5, [r4, #0]
 80128c0:	6961      	ldr	r1, [r4, #20]
 80128c2:	1d18      	adds	r0, r3, #4
 80128c4:	6030      	str	r0, [r6, #0]
 80128c6:	062e      	lsls	r6, r5, #24
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	d501      	bpl.n	80128d0 <_printf_i+0x1c0>
 80128cc:	6019      	str	r1, [r3, #0]
 80128ce:	e002      	b.n	80128d6 <_printf_i+0x1c6>
 80128d0:	0668      	lsls	r0, r5, #25
 80128d2:	d5fb      	bpl.n	80128cc <_printf_i+0x1bc>
 80128d4:	8019      	strh	r1, [r3, #0]
 80128d6:	2300      	movs	r3, #0
 80128d8:	6123      	str	r3, [r4, #16]
 80128da:	4616      	mov	r6, r2
 80128dc:	e7bc      	b.n	8012858 <_printf_i+0x148>
 80128de:	6833      	ldr	r3, [r6, #0]
 80128e0:	1d1a      	adds	r2, r3, #4
 80128e2:	6032      	str	r2, [r6, #0]
 80128e4:	681e      	ldr	r6, [r3, #0]
 80128e6:	6862      	ldr	r2, [r4, #4]
 80128e8:	2100      	movs	r1, #0
 80128ea:	4630      	mov	r0, r6
 80128ec:	f7ed fc90 	bl	8000210 <memchr>
 80128f0:	b108      	cbz	r0, 80128f6 <_printf_i+0x1e6>
 80128f2:	1b80      	subs	r0, r0, r6
 80128f4:	6060      	str	r0, [r4, #4]
 80128f6:	6863      	ldr	r3, [r4, #4]
 80128f8:	6123      	str	r3, [r4, #16]
 80128fa:	2300      	movs	r3, #0
 80128fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012900:	e7aa      	b.n	8012858 <_printf_i+0x148>
 8012902:	6923      	ldr	r3, [r4, #16]
 8012904:	4632      	mov	r2, r6
 8012906:	4649      	mov	r1, r9
 8012908:	4640      	mov	r0, r8
 801290a:	47d0      	blx	sl
 801290c:	3001      	adds	r0, #1
 801290e:	d0ad      	beq.n	801286c <_printf_i+0x15c>
 8012910:	6823      	ldr	r3, [r4, #0]
 8012912:	079b      	lsls	r3, r3, #30
 8012914:	d413      	bmi.n	801293e <_printf_i+0x22e>
 8012916:	68e0      	ldr	r0, [r4, #12]
 8012918:	9b03      	ldr	r3, [sp, #12]
 801291a:	4298      	cmp	r0, r3
 801291c:	bfb8      	it	lt
 801291e:	4618      	movlt	r0, r3
 8012920:	e7a6      	b.n	8012870 <_printf_i+0x160>
 8012922:	2301      	movs	r3, #1
 8012924:	4632      	mov	r2, r6
 8012926:	4649      	mov	r1, r9
 8012928:	4640      	mov	r0, r8
 801292a:	47d0      	blx	sl
 801292c:	3001      	adds	r0, #1
 801292e:	d09d      	beq.n	801286c <_printf_i+0x15c>
 8012930:	3501      	adds	r5, #1
 8012932:	68e3      	ldr	r3, [r4, #12]
 8012934:	9903      	ldr	r1, [sp, #12]
 8012936:	1a5b      	subs	r3, r3, r1
 8012938:	42ab      	cmp	r3, r5
 801293a:	dcf2      	bgt.n	8012922 <_printf_i+0x212>
 801293c:	e7eb      	b.n	8012916 <_printf_i+0x206>
 801293e:	2500      	movs	r5, #0
 8012940:	f104 0619 	add.w	r6, r4, #25
 8012944:	e7f5      	b.n	8012932 <_printf_i+0x222>
 8012946:	bf00      	nop
 8012948:	080d27e2 	.word	0x080d27e2
 801294c:	080d27f3 	.word	0x080d27f3

08012950 <std>:
 8012950:	2300      	movs	r3, #0
 8012952:	b510      	push	{r4, lr}
 8012954:	4604      	mov	r4, r0
 8012956:	e9c0 3300 	strd	r3, r3, [r0]
 801295a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801295e:	6083      	str	r3, [r0, #8]
 8012960:	8181      	strh	r1, [r0, #12]
 8012962:	6643      	str	r3, [r0, #100]	@ 0x64
 8012964:	81c2      	strh	r2, [r0, #14]
 8012966:	6183      	str	r3, [r0, #24]
 8012968:	4619      	mov	r1, r3
 801296a:	2208      	movs	r2, #8
 801296c:	305c      	adds	r0, #92	@ 0x5c
 801296e:	f000 f9f9 	bl	8012d64 <memset>
 8012972:	4b0d      	ldr	r3, [pc, #52]	@ (80129a8 <std+0x58>)
 8012974:	6263      	str	r3, [r4, #36]	@ 0x24
 8012976:	4b0d      	ldr	r3, [pc, #52]	@ (80129ac <std+0x5c>)
 8012978:	62a3      	str	r3, [r4, #40]	@ 0x28
 801297a:	4b0d      	ldr	r3, [pc, #52]	@ (80129b0 <std+0x60>)
 801297c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801297e:	4b0d      	ldr	r3, [pc, #52]	@ (80129b4 <std+0x64>)
 8012980:	6323      	str	r3, [r4, #48]	@ 0x30
 8012982:	4b0d      	ldr	r3, [pc, #52]	@ (80129b8 <std+0x68>)
 8012984:	6224      	str	r4, [r4, #32]
 8012986:	429c      	cmp	r4, r3
 8012988:	d006      	beq.n	8012998 <std+0x48>
 801298a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801298e:	4294      	cmp	r4, r2
 8012990:	d002      	beq.n	8012998 <std+0x48>
 8012992:	33d0      	adds	r3, #208	@ 0xd0
 8012994:	429c      	cmp	r4, r3
 8012996:	d105      	bne.n	80129a4 <std+0x54>
 8012998:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801299c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129a0:	f000 ba6c 	b.w	8012e7c <__retarget_lock_init_recursive>
 80129a4:	bd10      	pop	{r4, pc}
 80129a6:	bf00      	nop
 80129a8:	08012bb5 	.word	0x08012bb5
 80129ac:	08012bd7 	.word	0x08012bd7
 80129b0:	08012c0f 	.word	0x08012c0f
 80129b4:	08012c33 	.word	0x08012c33
 80129b8:	2000dfd4 	.word	0x2000dfd4

080129bc <stdio_exit_handler>:
 80129bc:	4a02      	ldr	r2, [pc, #8]	@ (80129c8 <stdio_exit_handler+0xc>)
 80129be:	4903      	ldr	r1, [pc, #12]	@ (80129cc <stdio_exit_handler+0x10>)
 80129c0:	4803      	ldr	r0, [pc, #12]	@ (80129d0 <stdio_exit_handler+0x14>)
 80129c2:	f000 b869 	b.w	8012a98 <_fwalk_sglue>
 80129c6:	bf00      	nop
 80129c8:	2000080c 	.word	0x2000080c
 80129cc:	0801465d 	.word	0x0801465d
 80129d0:	2000081c 	.word	0x2000081c

080129d4 <cleanup_stdio>:
 80129d4:	6841      	ldr	r1, [r0, #4]
 80129d6:	4b0c      	ldr	r3, [pc, #48]	@ (8012a08 <cleanup_stdio+0x34>)
 80129d8:	4299      	cmp	r1, r3
 80129da:	b510      	push	{r4, lr}
 80129dc:	4604      	mov	r4, r0
 80129de:	d001      	beq.n	80129e4 <cleanup_stdio+0x10>
 80129e0:	f001 fe3c 	bl	801465c <_fflush_r>
 80129e4:	68a1      	ldr	r1, [r4, #8]
 80129e6:	4b09      	ldr	r3, [pc, #36]	@ (8012a0c <cleanup_stdio+0x38>)
 80129e8:	4299      	cmp	r1, r3
 80129ea:	d002      	beq.n	80129f2 <cleanup_stdio+0x1e>
 80129ec:	4620      	mov	r0, r4
 80129ee:	f001 fe35 	bl	801465c <_fflush_r>
 80129f2:	68e1      	ldr	r1, [r4, #12]
 80129f4:	4b06      	ldr	r3, [pc, #24]	@ (8012a10 <cleanup_stdio+0x3c>)
 80129f6:	4299      	cmp	r1, r3
 80129f8:	d004      	beq.n	8012a04 <cleanup_stdio+0x30>
 80129fa:	4620      	mov	r0, r4
 80129fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a00:	f001 be2c 	b.w	801465c <_fflush_r>
 8012a04:	bd10      	pop	{r4, pc}
 8012a06:	bf00      	nop
 8012a08:	2000dfd4 	.word	0x2000dfd4
 8012a0c:	2000e03c 	.word	0x2000e03c
 8012a10:	2000e0a4 	.word	0x2000e0a4

08012a14 <global_stdio_init.part.0>:
 8012a14:	b510      	push	{r4, lr}
 8012a16:	4b0b      	ldr	r3, [pc, #44]	@ (8012a44 <global_stdio_init.part.0+0x30>)
 8012a18:	4c0b      	ldr	r4, [pc, #44]	@ (8012a48 <global_stdio_init.part.0+0x34>)
 8012a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8012a4c <global_stdio_init.part.0+0x38>)
 8012a1c:	601a      	str	r2, [r3, #0]
 8012a1e:	4620      	mov	r0, r4
 8012a20:	2200      	movs	r2, #0
 8012a22:	2104      	movs	r1, #4
 8012a24:	f7ff ff94 	bl	8012950 <std>
 8012a28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	2109      	movs	r1, #9
 8012a30:	f7ff ff8e 	bl	8012950 <std>
 8012a34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012a38:	2202      	movs	r2, #2
 8012a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a3e:	2112      	movs	r1, #18
 8012a40:	f7ff bf86 	b.w	8012950 <std>
 8012a44:	2000e10c 	.word	0x2000e10c
 8012a48:	2000dfd4 	.word	0x2000dfd4
 8012a4c:	080129bd 	.word	0x080129bd

08012a50 <__sfp_lock_acquire>:
 8012a50:	4801      	ldr	r0, [pc, #4]	@ (8012a58 <__sfp_lock_acquire+0x8>)
 8012a52:	f000 ba14 	b.w	8012e7e <__retarget_lock_acquire_recursive>
 8012a56:	bf00      	nop
 8012a58:	2000e115 	.word	0x2000e115

08012a5c <__sfp_lock_release>:
 8012a5c:	4801      	ldr	r0, [pc, #4]	@ (8012a64 <__sfp_lock_release+0x8>)
 8012a5e:	f000 ba0f 	b.w	8012e80 <__retarget_lock_release_recursive>
 8012a62:	bf00      	nop
 8012a64:	2000e115 	.word	0x2000e115

08012a68 <__sinit>:
 8012a68:	b510      	push	{r4, lr}
 8012a6a:	4604      	mov	r4, r0
 8012a6c:	f7ff fff0 	bl	8012a50 <__sfp_lock_acquire>
 8012a70:	6a23      	ldr	r3, [r4, #32]
 8012a72:	b11b      	cbz	r3, 8012a7c <__sinit+0x14>
 8012a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a78:	f7ff bff0 	b.w	8012a5c <__sfp_lock_release>
 8012a7c:	4b04      	ldr	r3, [pc, #16]	@ (8012a90 <__sinit+0x28>)
 8012a7e:	6223      	str	r3, [r4, #32]
 8012a80:	4b04      	ldr	r3, [pc, #16]	@ (8012a94 <__sinit+0x2c>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d1f5      	bne.n	8012a74 <__sinit+0xc>
 8012a88:	f7ff ffc4 	bl	8012a14 <global_stdio_init.part.0>
 8012a8c:	e7f2      	b.n	8012a74 <__sinit+0xc>
 8012a8e:	bf00      	nop
 8012a90:	080129d5 	.word	0x080129d5
 8012a94:	2000e10c 	.word	0x2000e10c

08012a98 <_fwalk_sglue>:
 8012a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a9c:	4607      	mov	r7, r0
 8012a9e:	4688      	mov	r8, r1
 8012aa0:	4614      	mov	r4, r2
 8012aa2:	2600      	movs	r6, #0
 8012aa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012aa8:	f1b9 0901 	subs.w	r9, r9, #1
 8012aac:	d505      	bpl.n	8012aba <_fwalk_sglue+0x22>
 8012aae:	6824      	ldr	r4, [r4, #0]
 8012ab0:	2c00      	cmp	r4, #0
 8012ab2:	d1f7      	bne.n	8012aa4 <_fwalk_sglue+0xc>
 8012ab4:	4630      	mov	r0, r6
 8012ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aba:	89ab      	ldrh	r3, [r5, #12]
 8012abc:	2b01      	cmp	r3, #1
 8012abe:	d907      	bls.n	8012ad0 <_fwalk_sglue+0x38>
 8012ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012ac4:	3301      	adds	r3, #1
 8012ac6:	d003      	beq.n	8012ad0 <_fwalk_sglue+0x38>
 8012ac8:	4629      	mov	r1, r5
 8012aca:	4638      	mov	r0, r7
 8012acc:	47c0      	blx	r8
 8012ace:	4306      	orrs	r6, r0
 8012ad0:	3568      	adds	r5, #104	@ 0x68
 8012ad2:	e7e9      	b.n	8012aa8 <_fwalk_sglue+0x10>

08012ad4 <iprintf>:
 8012ad4:	b40f      	push	{r0, r1, r2, r3}
 8012ad6:	b507      	push	{r0, r1, r2, lr}
 8012ad8:	4906      	ldr	r1, [pc, #24]	@ (8012af4 <iprintf+0x20>)
 8012ada:	ab04      	add	r3, sp, #16
 8012adc:	6808      	ldr	r0, [r1, #0]
 8012ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ae2:	6881      	ldr	r1, [r0, #8]
 8012ae4:	9301      	str	r3, [sp, #4]
 8012ae6:	f001 fc1d 	bl	8014324 <_vfiprintf_r>
 8012aea:	b003      	add	sp, #12
 8012aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8012af0:	b004      	add	sp, #16
 8012af2:	4770      	bx	lr
 8012af4:	20000818 	.word	0x20000818

08012af8 <_puts_r>:
 8012af8:	6a03      	ldr	r3, [r0, #32]
 8012afa:	b570      	push	{r4, r5, r6, lr}
 8012afc:	6884      	ldr	r4, [r0, #8]
 8012afe:	4605      	mov	r5, r0
 8012b00:	460e      	mov	r6, r1
 8012b02:	b90b      	cbnz	r3, 8012b08 <_puts_r+0x10>
 8012b04:	f7ff ffb0 	bl	8012a68 <__sinit>
 8012b08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012b0a:	07db      	lsls	r3, r3, #31
 8012b0c:	d405      	bmi.n	8012b1a <_puts_r+0x22>
 8012b0e:	89a3      	ldrh	r3, [r4, #12]
 8012b10:	0598      	lsls	r0, r3, #22
 8012b12:	d402      	bmi.n	8012b1a <_puts_r+0x22>
 8012b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b16:	f000 f9b2 	bl	8012e7e <__retarget_lock_acquire_recursive>
 8012b1a:	89a3      	ldrh	r3, [r4, #12]
 8012b1c:	0719      	lsls	r1, r3, #28
 8012b1e:	d502      	bpl.n	8012b26 <_puts_r+0x2e>
 8012b20:	6923      	ldr	r3, [r4, #16]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d135      	bne.n	8012b92 <_puts_r+0x9a>
 8012b26:	4621      	mov	r1, r4
 8012b28:	4628      	mov	r0, r5
 8012b2a:	f000 f8c5 	bl	8012cb8 <__swsetup_r>
 8012b2e:	b380      	cbz	r0, 8012b92 <_puts_r+0x9a>
 8012b30:	f04f 35ff 	mov.w	r5, #4294967295
 8012b34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012b36:	07da      	lsls	r2, r3, #31
 8012b38:	d405      	bmi.n	8012b46 <_puts_r+0x4e>
 8012b3a:	89a3      	ldrh	r3, [r4, #12]
 8012b3c:	059b      	lsls	r3, r3, #22
 8012b3e:	d402      	bmi.n	8012b46 <_puts_r+0x4e>
 8012b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b42:	f000 f99d 	bl	8012e80 <__retarget_lock_release_recursive>
 8012b46:	4628      	mov	r0, r5
 8012b48:	bd70      	pop	{r4, r5, r6, pc}
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	da04      	bge.n	8012b58 <_puts_r+0x60>
 8012b4e:	69a2      	ldr	r2, [r4, #24]
 8012b50:	429a      	cmp	r2, r3
 8012b52:	dc17      	bgt.n	8012b84 <_puts_r+0x8c>
 8012b54:	290a      	cmp	r1, #10
 8012b56:	d015      	beq.n	8012b84 <_puts_r+0x8c>
 8012b58:	6823      	ldr	r3, [r4, #0]
 8012b5a:	1c5a      	adds	r2, r3, #1
 8012b5c:	6022      	str	r2, [r4, #0]
 8012b5e:	7019      	strb	r1, [r3, #0]
 8012b60:	68a3      	ldr	r3, [r4, #8]
 8012b62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012b66:	3b01      	subs	r3, #1
 8012b68:	60a3      	str	r3, [r4, #8]
 8012b6a:	2900      	cmp	r1, #0
 8012b6c:	d1ed      	bne.n	8012b4a <_puts_r+0x52>
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	da11      	bge.n	8012b96 <_puts_r+0x9e>
 8012b72:	4622      	mov	r2, r4
 8012b74:	210a      	movs	r1, #10
 8012b76:	4628      	mov	r0, r5
 8012b78:	f000 f85f 	bl	8012c3a <__swbuf_r>
 8012b7c:	3001      	adds	r0, #1
 8012b7e:	d0d7      	beq.n	8012b30 <_puts_r+0x38>
 8012b80:	250a      	movs	r5, #10
 8012b82:	e7d7      	b.n	8012b34 <_puts_r+0x3c>
 8012b84:	4622      	mov	r2, r4
 8012b86:	4628      	mov	r0, r5
 8012b88:	f000 f857 	bl	8012c3a <__swbuf_r>
 8012b8c:	3001      	adds	r0, #1
 8012b8e:	d1e7      	bne.n	8012b60 <_puts_r+0x68>
 8012b90:	e7ce      	b.n	8012b30 <_puts_r+0x38>
 8012b92:	3e01      	subs	r6, #1
 8012b94:	e7e4      	b.n	8012b60 <_puts_r+0x68>
 8012b96:	6823      	ldr	r3, [r4, #0]
 8012b98:	1c5a      	adds	r2, r3, #1
 8012b9a:	6022      	str	r2, [r4, #0]
 8012b9c:	220a      	movs	r2, #10
 8012b9e:	701a      	strb	r2, [r3, #0]
 8012ba0:	e7ee      	b.n	8012b80 <_puts_r+0x88>
	...

08012ba4 <puts>:
 8012ba4:	4b02      	ldr	r3, [pc, #8]	@ (8012bb0 <puts+0xc>)
 8012ba6:	4601      	mov	r1, r0
 8012ba8:	6818      	ldr	r0, [r3, #0]
 8012baa:	f7ff bfa5 	b.w	8012af8 <_puts_r>
 8012bae:	bf00      	nop
 8012bb0:	20000818 	.word	0x20000818

08012bb4 <__sread>:
 8012bb4:	b510      	push	{r4, lr}
 8012bb6:	460c      	mov	r4, r1
 8012bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bbc:	f000 f900 	bl	8012dc0 <_read_r>
 8012bc0:	2800      	cmp	r0, #0
 8012bc2:	bfab      	itete	ge
 8012bc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8012bc8:	181b      	addge	r3, r3, r0
 8012bca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012bce:	bfac      	ite	ge
 8012bd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012bd2:	81a3      	strhlt	r3, [r4, #12]
 8012bd4:	bd10      	pop	{r4, pc}

08012bd6 <__swrite>:
 8012bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bda:	461f      	mov	r7, r3
 8012bdc:	898b      	ldrh	r3, [r1, #12]
 8012bde:	05db      	lsls	r3, r3, #23
 8012be0:	4605      	mov	r5, r0
 8012be2:	460c      	mov	r4, r1
 8012be4:	4616      	mov	r6, r2
 8012be6:	d505      	bpl.n	8012bf4 <__swrite+0x1e>
 8012be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bec:	2302      	movs	r3, #2
 8012bee:	2200      	movs	r2, #0
 8012bf0:	f000 f8d4 	bl	8012d9c <_lseek_r>
 8012bf4:	89a3      	ldrh	r3, [r4, #12]
 8012bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012bfe:	81a3      	strh	r3, [r4, #12]
 8012c00:	4632      	mov	r2, r6
 8012c02:	463b      	mov	r3, r7
 8012c04:	4628      	mov	r0, r5
 8012c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c0a:	f000 b8fb 	b.w	8012e04 <_write_r>

08012c0e <__sseek>:
 8012c0e:	b510      	push	{r4, lr}
 8012c10:	460c      	mov	r4, r1
 8012c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c16:	f000 f8c1 	bl	8012d9c <_lseek_r>
 8012c1a:	1c43      	adds	r3, r0, #1
 8012c1c:	89a3      	ldrh	r3, [r4, #12]
 8012c1e:	bf15      	itete	ne
 8012c20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012c22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012c26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012c2a:	81a3      	strheq	r3, [r4, #12]
 8012c2c:	bf18      	it	ne
 8012c2e:	81a3      	strhne	r3, [r4, #12]
 8012c30:	bd10      	pop	{r4, pc}

08012c32 <__sclose>:
 8012c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c36:	f000 b8a1 	b.w	8012d7c <_close_r>

08012c3a <__swbuf_r>:
 8012c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c3c:	460e      	mov	r6, r1
 8012c3e:	4614      	mov	r4, r2
 8012c40:	4605      	mov	r5, r0
 8012c42:	b118      	cbz	r0, 8012c4c <__swbuf_r+0x12>
 8012c44:	6a03      	ldr	r3, [r0, #32]
 8012c46:	b90b      	cbnz	r3, 8012c4c <__swbuf_r+0x12>
 8012c48:	f7ff ff0e 	bl	8012a68 <__sinit>
 8012c4c:	69a3      	ldr	r3, [r4, #24]
 8012c4e:	60a3      	str	r3, [r4, #8]
 8012c50:	89a3      	ldrh	r3, [r4, #12]
 8012c52:	071a      	lsls	r2, r3, #28
 8012c54:	d501      	bpl.n	8012c5a <__swbuf_r+0x20>
 8012c56:	6923      	ldr	r3, [r4, #16]
 8012c58:	b943      	cbnz	r3, 8012c6c <__swbuf_r+0x32>
 8012c5a:	4621      	mov	r1, r4
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	f000 f82b 	bl	8012cb8 <__swsetup_r>
 8012c62:	b118      	cbz	r0, 8012c6c <__swbuf_r+0x32>
 8012c64:	f04f 37ff 	mov.w	r7, #4294967295
 8012c68:	4638      	mov	r0, r7
 8012c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c6c:	6823      	ldr	r3, [r4, #0]
 8012c6e:	6922      	ldr	r2, [r4, #16]
 8012c70:	1a98      	subs	r0, r3, r2
 8012c72:	6963      	ldr	r3, [r4, #20]
 8012c74:	b2f6      	uxtb	r6, r6
 8012c76:	4283      	cmp	r3, r0
 8012c78:	4637      	mov	r7, r6
 8012c7a:	dc05      	bgt.n	8012c88 <__swbuf_r+0x4e>
 8012c7c:	4621      	mov	r1, r4
 8012c7e:	4628      	mov	r0, r5
 8012c80:	f001 fcec 	bl	801465c <_fflush_r>
 8012c84:	2800      	cmp	r0, #0
 8012c86:	d1ed      	bne.n	8012c64 <__swbuf_r+0x2a>
 8012c88:	68a3      	ldr	r3, [r4, #8]
 8012c8a:	3b01      	subs	r3, #1
 8012c8c:	60a3      	str	r3, [r4, #8]
 8012c8e:	6823      	ldr	r3, [r4, #0]
 8012c90:	1c5a      	adds	r2, r3, #1
 8012c92:	6022      	str	r2, [r4, #0]
 8012c94:	701e      	strb	r6, [r3, #0]
 8012c96:	6962      	ldr	r2, [r4, #20]
 8012c98:	1c43      	adds	r3, r0, #1
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	d004      	beq.n	8012ca8 <__swbuf_r+0x6e>
 8012c9e:	89a3      	ldrh	r3, [r4, #12]
 8012ca0:	07db      	lsls	r3, r3, #31
 8012ca2:	d5e1      	bpl.n	8012c68 <__swbuf_r+0x2e>
 8012ca4:	2e0a      	cmp	r6, #10
 8012ca6:	d1df      	bne.n	8012c68 <__swbuf_r+0x2e>
 8012ca8:	4621      	mov	r1, r4
 8012caa:	4628      	mov	r0, r5
 8012cac:	f001 fcd6 	bl	801465c <_fflush_r>
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	d0d9      	beq.n	8012c68 <__swbuf_r+0x2e>
 8012cb4:	e7d6      	b.n	8012c64 <__swbuf_r+0x2a>
	...

08012cb8 <__swsetup_r>:
 8012cb8:	b538      	push	{r3, r4, r5, lr}
 8012cba:	4b29      	ldr	r3, [pc, #164]	@ (8012d60 <__swsetup_r+0xa8>)
 8012cbc:	4605      	mov	r5, r0
 8012cbe:	6818      	ldr	r0, [r3, #0]
 8012cc0:	460c      	mov	r4, r1
 8012cc2:	b118      	cbz	r0, 8012ccc <__swsetup_r+0x14>
 8012cc4:	6a03      	ldr	r3, [r0, #32]
 8012cc6:	b90b      	cbnz	r3, 8012ccc <__swsetup_r+0x14>
 8012cc8:	f7ff fece 	bl	8012a68 <__sinit>
 8012ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cd0:	0719      	lsls	r1, r3, #28
 8012cd2:	d422      	bmi.n	8012d1a <__swsetup_r+0x62>
 8012cd4:	06da      	lsls	r2, r3, #27
 8012cd6:	d407      	bmi.n	8012ce8 <__swsetup_r+0x30>
 8012cd8:	2209      	movs	r2, #9
 8012cda:	602a      	str	r2, [r5, #0]
 8012cdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ce0:	81a3      	strh	r3, [r4, #12]
 8012ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8012ce6:	e033      	b.n	8012d50 <__swsetup_r+0x98>
 8012ce8:	0758      	lsls	r0, r3, #29
 8012cea:	d512      	bpl.n	8012d12 <__swsetup_r+0x5a>
 8012cec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012cee:	b141      	cbz	r1, 8012d02 <__swsetup_r+0x4a>
 8012cf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012cf4:	4299      	cmp	r1, r3
 8012cf6:	d002      	beq.n	8012cfe <__swsetup_r+0x46>
 8012cf8:	4628      	mov	r0, r5
 8012cfa:	f000 ff1d 	bl	8013b38 <_free_r>
 8012cfe:	2300      	movs	r3, #0
 8012d00:	6363      	str	r3, [r4, #52]	@ 0x34
 8012d02:	89a3      	ldrh	r3, [r4, #12]
 8012d04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012d08:	81a3      	strh	r3, [r4, #12]
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	6063      	str	r3, [r4, #4]
 8012d0e:	6923      	ldr	r3, [r4, #16]
 8012d10:	6023      	str	r3, [r4, #0]
 8012d12:	89a3      	ldrh	r3, [r4, #12]
 8012d14:	f043 0308 	orr.w	r3, r3, #8
 8012d18:	81a3      	strh	r3, [r4, #12]
 8012d1a:	6923      	ldr	r3, [r4, #16]
 8012d1c:	b94b      	cbnz	r3, 8012d32 <__swsetup_r+0x7a>
 8012d1e:	89a3      	ldrh	r3, [r4, #12]
 8012d20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d28:	d003      	beq.n	8012d32 <__swsetup_r+0x7a>
 8012d2a:	4621      	mov	r1, r4
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	f001 fce3 	bl	80146f8 <__smakebuf_r>
 8012d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d36:	f013 0201 	ands.w	r2, r3, #1
 8012d3a:	d00a      	beq.n	8012d52 <__swsetup_r+0x9a>
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	60a2      	str	r2, [r4, #8]
 8012d40:	6962      	ldr	r2, [r4, #20]
 8012d42:	4252      	negs	r2, r2
 8012d44:	61a2      	str	r2, [r4, #24]
 8012d46:	6922      	ldr	r2, [r4, #16]
 8012d48:	b942      	cbnz	r2, 8012d5c <__swsetup_r+0xa4>
 8012d4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012d4e:	d1c5      	bne.n	8012cdc <__swsetup_r+0x24>
 8012d50:	bd38      	pop	{r3, r4, r5, pc}
 8012d52:	0799      	lsls	r1, r3, #30
 8012d54:	bf58      	it	pl
 8012d56:	6962      	ldrpl	r2, [r4, #20]
 8012d58:	60a2      	str	r2, [r4, #8]
 8012d5a:	e7f4      	b.n	8012d46 <__swsetup_r+0x8e>
 8012d5c:	2000      	movs	r0, #0
 8012d5e:	e7f7      	b.n	8012d50 <__swsetup_r+0x98>
 8012d60:	20000818 	.word	0x20000818

08012d64 <memset>:
 8012d64:	4402      	add	r2, r0
 8012d66:	4603      	mov	r3, r0
 8012d68:	4293      	cmp	r3, r2
 8012d6a:	d100      	bne.n	8012d6e <memset+0xa>
 8012d6c:	4770      	bx	lr
 8012d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8012d72:	e7f9      	b.n	8012d68 <memset+0x4>

08012d74 <_localeconv_r>:
 8012d74:	4800      	ldr	r0, [pc, #0]	@ (8012d78 <_localeconv_r+0x4>)
 8012d76:	4770      	bx	lr
 8012d78:	20000958 	.word	0x20000958

08012d7c <_close_r>:
 8012d7c:	b538      	push	{r3, r4, r5, lr}
 8012d7e:	4d06      	ldr	r5, [pc, #24]	@ (8012d98 <_close_r+0x1c>)
 8012d80:	2300      	movs	r3, #0
 8012d82:	4604      	mov	r4, r0
 8012d84:	4608      	mov	r0, r1
 8012d86:	602b      	str	r3, [r5, #0]
 8012d88:	f7ef fa3c 	bl	8002204 <_close>
 8012d8c:	1c43      	adds	r3, r0, #1
 8012d8e:	d102      	bne.n	8012d96 <_close_r+0x1a>
 8012d90:	682b      	ldr	r3, [r5, #0]
 8012d92:	b103      	cbz	r3, 8012d96 <_close_r+0x1a>
 8012d94:	6023      	str	r3, [r4, #0]
 8012d96:	bd38      	pop	{r3, r4, r5, pc}
 8012d98:	2000e110 	.word	0x2000e110

08012d9c <_lseek_r>:
 8012d9c:	b538      	push	{r3, r4, r5, lr}
 8012d9e:	4d07      	ldr	r5, [pc, #28]	@ (8012dbc <_lseek_r+0x20>)
 8012da0:	4604      	mov	r4, r0
 8012da2:	4608      	mov	r0, r1
 8012da4:	4611      	mov	r1, r2
 8012da6:	2200      	movs	r2, #0
 8012da8:	602a      	str	r2, [r5, #0]
 8012daa:	461a      	mov	r2, r3
 8012dac:	f7ef fa51 	bl	8002252 <_lseek>
 8012db0:	1c43      	adds	r3, r0, #1
 8012db2:	d102      	bne.n	8012dba <_lseek_r+0x1e>
 8012db4:	682b      	ldr	r3, [r5, #0]
 8012db6:	b103      	cbz	r3, 8012dba <_lseek_r+0x1e>
 8012db8:	6023      	str	r3, [r4, #0]
 8012dba:	bd38      	pop	{r3, r4, r5, pc}
 8012dbc:	2000e110 	.word	0x2000e110

08012dc0 <_read_r>:
 8012dc0:	b538      	push	{r3, r4, r5, lr}
 8012dc2:	4d07      	ldr	r5, [pc, #28]	@ (8012de0 <_read_r+0x20>)
 8012dc4:	4604      	mov	r4, r0
 8012dc6:	4608      	mov	r0, r1
 8012dc8:	4611      	mov	r1, r2
 8012dca:	2200      	movs	r2, #0
 8012dcc:	602a      	str	r2, [r5, #0]
 8012dce:	461a      	mov	r2, r3
 8012dd0:	f7ef f9df 	bl	8002192 <_read>
 8012dd4:	1c43      	adds	r3, r0, #1
 8012dd6:	d102      	bne.n	8012dde <_read_r+0x1e>
 8012dd8:	682b      	ldr	r3, [r5, #0]
 8012dda:	b103      	cbz	r3, 8012dde <_read_r+0x1e>
 8012ddc:	6023      	str	r3, [r4, #0]
 8012dde:	bd38      	pop	{r3, r4, r5, pc}
 8012de0:	2000e110 	.word	0x2000e110

08012de4 <_sbrk_r>:
 8012de4:	b538      	push	{r3, r4, r5, lr}
 8012de6:	4d06      	ldr	r5, [pc, #24]	@ (8012e00 <_sbrk_r+0x1c>)
 8012de8:	2300      	movs	r3, #0
 8012dea:	4604      	mov	r4, r0
 8012dec:	4608      	mov	r0, r1
 8012dee:	602b      	str	r3, [r5, #0]
 8012df0:	f7ef fa3c 	bl	800226c <_sbrk>
 8012df4:	1c43      	adds	r3, r0, #1
 8012df6:	d102      	bne.n	8012dfe <_sbrk_r+0x1a>
 8012df8:	682b      	ldr	r3, [r5, #0]
 8012dfa:	b103      	cbz	r3, 8012dfe <_sbrk_r+0x1a>
 8012dfc:	6023      	str	r3, [r4, #0]
 8012dfe:	bd38      	pop	{r3, r4, r5, pc}
 8012e00:	2000e110 	.word	0x2000e110

08012e04 <_write_r>:
 8012e04:	b538      	push	{r3, r4, r5, lr}
 8012e06:	4d07      	ldr	r5, [pc, #28]	@ (8012e24 <_write_r+0x20>)
 8012e08:	4604      	mov	r4, r0
 8012e0a:	4608      	mov	r0, r1
 8012e0c:	4611      	mov	r1, r2
 8012e0e:	2200      	movs	r2, #0
 8012e10:	602a      	str	r2, [r5, #0]
 8012e12:	461a      	mov	r2, r3
 8012e14:	f7ef f9da 	bl	80021cc <_write>
 8012e18:	1c43      	adds	r3, r0, #1
 8012e1a:	d102      	bne.n	8012e22 <_write_r+0x1e>
 8012e1c:	682b      	ldr	r3, [r5, #0]
 8012e1e:	b103      	cbz	r3, 8012e22 <_write_r+0x1e>
 8012e20:	6023      	str	r3, [r4, #0]
 8012e22:	bd38      	pop	{r3, r4, r5, pc}
 8012e24:	2000e110 	.word	0x2000e110

08012e28 <__errno>:
 8012e28:	4b01      	ldr	r3, [pc, #4]	@ (8012e30 <__errno+0x8>)
 8012e2a:	6818      	ldr	r0, [r3, #0]
 8012e2c:	4770      	bx	lr
 8012e2e:	bf00      	nop
 8012e30:	20000818 	.word	0x20000818

08012e34 <__libc_init_array>:
 8012e34:	b570      	push	{r4, r5, r6, lr}
 8012e36:	4d0d      	ldr	r5, [pc, #52]	@ (8012e6c <__libc_init_array+0x38>)
 8012e38:	4c0d      	ldr	r4, [pc, #52]	@ (8012e70 <__libc_init_array+0x3c>)
 8012e3a:	1b64      	subs	r4, r4, r5
 8012e3c:	10a4      	asrs	r4, r4, #2
 8012e3e:	2600      	movs	r6, #0
 8012e40:	42a6      	cmp	r6, r4
 8012e42:	d109      	bne.n	8012e58 <__libc_init_array+0x24>
 8012e44:	4d0b      	ldr	r5, [pc, #44]	@ (8012e74 <__libc_init_array+0x40>)
 8012e46:	4c0c      	ldr	r4, [pc, #48]	@ (8012e78 <__libc_init_array+0x44>)
 8012e48:	f002 fa9c 	bl	8015384 <_init>
 8012e4c:	1b64      	subs	r4, r4, r5
 8012e4e:	10a4      	asrs	r4, r4, #2
 8012e50:	2600      	movs	r6, #0
 8012e52:	42a6      	cmp	r6, r4
 8012e54:	d105      	bne.n	8012e62 <__libc_init_array+0x2e>
 8012e56:	bd70      	pop	{r4, r5, r6, pc}
 8012e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e5c:	4798      	blx	r3
 8012e5e:	3601      	adds	r6, #1
 8012e60:	e7ee      	b.n	8012e40 <__libc_init_array+0xc>
 8012e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e66:	4798      	blx	r3
 8012e68:	3601      	adds	r6, #1
 8012e6a:	e7f2      	b.n	8012e52 <__libc_init_array+0x1e>
 8012e6c:	080d2f18 	.word	0x080d2f18
 8012e70:	080d2f18 	.word	0x080d2f18
 8012e74:	080d2f18 	.word	0x080d2f18
 8012e78:	080d2f1c 	.word	0x080d2f1c

08012e7c <__retarget_lock_init_recursive>:
 8012e7c:	4770      	bx	lr

08012e7e <__retarget_lock_acquire_recursive>:
 8012e7e:	4770      	bx	lr

08012e80 <__retarget_lock_release_recursive>:
 8012e80:	4770      	bx	lr

08012e82 <memcpy>:
 8012e82:	440a      	add	r2, r1
 8012e84:	4291      	cmp	r1, r2
 8012e86:	f100 33ff 	add.w	r3, r0, #4294967295
 8012e8a:	d100      	bne.n	8012e8e <memcpy+0xc>
 8012e8c:	4770      	bx	lr
 8012e8e:	b510      	push	{r4, lr}
 8012e90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e98:	4291      	cmp	r1, r2
 8012e9a:	d1f9      	bne.n	8012e90 <memcpy+0xe>
 8012e9c:	bd10      	pop	{r4, pc}

08012e9e <quorem>:
 8012e9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea2:	6903      	ldr	r3, [r0, #16]
 8012ea4:	690c      	ldr	r4, [r1, #16]
 8012ea6:	42a3      	cmp	r3, r4
 8012ea8:	4607      	mov	r7, r0
 8012eaa:	db7e      	blt.n	8012faa <quorem+0x10c>
 8012eac:	3c01      	subs	r4, #1
 8012eae:	f101 0814 	add.w	r8, r1, #20
 8012eb2:	00a3      	lsls	r3, r4, #2
 8012eb4:	f100 0514 	add.w	r5, r0, #20
 8012eb8:	9300      	str	r3, [sp, #0]
 8012eba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012ebe:	9301      	str	r3, [sp, #4]
 8012ec0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012ec4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ec8:	3301      	adds	r3, #1
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012ed0:	fbb2 f6f3 	udiv	r6, r2, r3
 8012ed4:	d32e      	bcc.n	8012f34 <quorem+0x96>
 8012ed6:	f04f 0a00 	mov.w	sl, #0
 8012eda:	46c4      	mov	ip, r8
 8012edc:	46ae      	mov	lr, r5
 8012ede:	46d3      	mov	fp, sl
 8012ee0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012ee4:	b298      	uxth	r0, r3
 8012ee6:	fb06 a000 	mla	r0, r6, r0, sl
 8012eea:	0c02      	lsrs	r2, r0, #16
 8012eec:	0c1b      	lsrs	r3, r3, #16
 8012eee:	fb06 2303 	mla	r3, r6, r3, r2
 8012ef2:	f8de 2000 	ldr.w	r2, [lr]
 8012ef6:	b280      	uxth	r0, r0
 8012ef8:	b292      	uxth	r2, r2
 8012efa:	1a12      	subs	r2, r2, r0
 8012efc:	445a      	add	r2, fp
 8012efe:	f8de 0000 	ldr.w	r0, [lr]
 8012f02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012f06:	b29b      	uxth	r3, r3
 8012f08:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012f0c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012f10:	b292      	uxth	r2, r2
 8012f12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012f16:	45e1      	cmp	r9, ip
 8012f18:	f84e 2b04 	str.w	r2, [lr], #4
 8012f1c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012f20:	d2de      	bcs.n	8012ee0 <quorem+0x42>
 8012f22:	9b00      	ldr	r3, [sp, #0]
 8012f24:	58eb      	ldr	r3, [r5, r3]
 8012f26:	b92b      	cbnz	r3, 8012f34 <quorem+0x96>
 8012f28:	9b01      	ldr	r3, [sp, #4]
 8012f2a:	3b04      	subs	r3, #4
 8012f2c:	429d      	cmp	r5, r3
 8012f2e:	461a      	mov	r2, r3
 8012f30:	d32f      	bcc.n	8012f92 <quorem+0xf4>
 8012f32:	613c      	str	r4, [r7, #16]
 8012f34:	4638      	mov	r0, r7
 8012f36:	f001 f8c3 	bl	80140c0 <__mcmp>
 8012f3a:	2800      	cmp	r0, #0
 8012f3c:	db25      	blt.n	8012f8a <quorem+0xec>
 8012f3e:	4629      	mov	r1, r5
 8012f40:	2000      	movs	r0, #0
 8012f42:	f858 2b04 	ldr.w	r2, [r8], #4
 8012f46:	f8d1 c000 	ldr.w	ip, [r1]
 8012f4a:	fa1f fe82 	uxth.w	lr, r2
 8012f4e:	fa1f f38c 	uxth.w	r3, ip
 8012f52:	eba3 030e 	sub.w	r3, r3, lr
 8012f56:	4403      	add	r3, r0
 8012f58:	0c12      	lsrs	r2, r2, #16
 8012f5a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012f5e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012f62:	b29b      	uxth	r3, r3
 8012f64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012f68:	45c1      	cmp	r9, r8
 8012f6a:	f841 3b04 	str.w	r3, [r1], #4
 8012f6e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012f72:	d2e6      	bcs.n	8012f42 <quorem+0xa4>
 8012f74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012f78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012f7c:	b922      	cbnz	r2, 8012f88 <quorem+0xea>
 8012f7e:	3b04      	subs	r3, #4
 8012f80:	429d      	cmp	r5, r3
 8012f82:	461a      	mov	r2, r3
 8012f84:	d30b      	bcc.n	8012f9e <quorem+0x100>
 8012f86:	613c      	str	r4, [r7, #16]
 8012f88:	3601      	adds	r6, #1
 8012f8a:	4630      	mov	r0, r6
 8012f8c:	b003      	add	sp, #12
 8012f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f92:	6812      	ldr	r2, [r2, #0]
 8012f94:	3b04      	subs	r3, #4
 8012f96:	2a00      	cmp	r2, #0
 8012f98:	d1cb      	bne.n	8012f32 <quorem+0x94>
 8012f9a:	3c01      	subs	r4, #1
 8012f9c:	e7c6      	b.n	8012f2c <quorem+0x8e>
 8012f9e:	6812      	ldr	r2, [r2, #0]
 8012fa0:	3b04      	subs	r3, #4
 8012fa2:	2a00      	cmp	r2, #0
 8012fa4:	d1ef      	bne.n	8012f86 <quorem+0xe8>
 8012fa6:	3c01      	subs	r4, #1
 8012fa8:	e7ea      	b.n	8012f80 <quorem+0xe2>
 8012faa:	2000      	movs	r0, #0
 8012fac:	e7ee      	b.n	8012f8c <quorem+0xee>
	...

08012fb0 <_dtoa_r>:
 8012fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fb4:	69c7      	ldr	r7, [r0, #28]
 8012fb6:	b099      	sub	sp, #100	@ 0x64
 8012fb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012fbc:	ec55 4b10 	vmov	r4, r5, d0
 8012fc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012fc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8012fc4:	4683      	mov	fp, r0
 8012fc6:	920e      	str	r2, [sp, #56]	@ 0x38
 8012fc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012fca:	b97f      	cbnz	r7, 8012fec <_dtoa_r+0x3c>
 8012fcc:	2010      	movs	r0, #16
 8012fce:	f7fe ffb1 	bl	8011f34 <malloc>
 8012fd2:	4602      	mov	r2, r0
 8012fd4:	f8cb 001c 	str.w	r0, [fp, #28]
 8012fd8:	b920      	cbnz	r0, 8012fe4 <_dtoa_r+0x34>
 8012fda:	4ba7      	ldr	r3, [pc, #668]	@ (8013278 <_dtoa_r+0x2c8>)
 8012fdc:	21ef      	movs	r1, #239	@ 0xef
 8012fde:	48a7      	ldr	r0, [pc, #668]	@ (801327c <_dtoa_r+0x2cc>)
 8012fe0:	f001 fbe8 	bl	80147b4 <__assert_func>
 8012fe4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012fe8:	6007      	str	r7, [r0, #0]
 8012fea:	60c7      	str	r7, [r0, #12]
 8012fec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012ff0:	6819      	ldr	r1, [r3, #0]
 8012ff2:	b159      	cbz	r1, 801300c <_dtoa_r+0x5c>
 8012ff4:	685a      	ldr	r2, [r3, #4]
 8012ff6:	604a      	str	r2, [r1, #4]
 8012ff8:	2301      	movs	r3, #1
 8012ffa:	4093      	lsls	r3, r2
 8012ffc:	608b      	str	r3, [r1, #8]
 8012ffe:	4658      	mov	r0, fp
 8013000:	f000 fe24 	bl	8013c4c <_Bfree>
 8013004:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013008:	2200      	movs	r2, #0
 801300a:	601a      	str	r2, [r3, #0]
 801300c:	1e2b      	subs	r3, r5, #0
 801300e:	bfb9      	ittee	lt
 8013010:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013014:	9303      	strlt	r3, [sp, #12]
 8013016:	2300      	movge	r3, #0
 8013018:	6033      	strge	r3, [r6, #0]
 801301a:	9f03      	ldr	r7, [sp, #12]
 801301c:	4b98      	ldr	r3, [pc, #608]	@ (8013280 <_dtoa_r+0x2d0>)
 801301e:	bfbc      	itt	lt
 8013020:	2201      	movlt	r2, #1
 8013022:	6032      	strlt	r2, [r6, #0]
 8013024:	43bb      	bics	r3, r7
 8013026:	d112      	bne.n	801304e <_dtoa_r+0x9e>
 8013028:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801302a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801302e:	6013      	str	r3, [r2, #0]
 8013030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013034:	4323      	orrs	r3, r4
 8013036:	f000 854d 	beq.w	8013ad4 <_dtoa_r+0xb24>
 801303a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801303c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013294 <_dtoa_r+0x2e4>
 8013040:	2b00      	cmp	r3, #0
 8013042:	f000 854f 	beq.w	8013ae4 <_dtoa_r+0xb34>
 8013046:	f10a 0303 	add.w	r3, sl, #3
 801304a:	f000 bd49 	b.w	8013ae0 <_dtoa_r+0xb30>
 801304e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013052:	2200      	movs	r2, #0
 8013054:	ec51 0b17 	vmov	r0, r1, d7
 8013058:	2300      	movs	r3, #0
 801305a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801305e:	f7ed fd53 	bl	8000b08 <__aeabi_dcmpeq>
 8013062:	4680      	mov	r8, r0
 8013064:	b158      	cbz	r0, 801307e <_dtoa_r+0xce>
 8013066:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013068:	2301      	movs	r3, #1
 801306a:	6013      	str	r3, [r2, #0]
 801306c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801306e:	b113      	cbz	r3, 8013076 <_dtoa_r+0xc6>
 8013070:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013072:	4b84      	ldr	r3, [pc, #528]	@ (8013284 <_dtoa_r+0x2d4>)
 8013074:	6013      	str	r3, [r2, #0]
 8013076:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013298 <_dtoa_r+0x2e8>
 801307a:	f000 bd33 	b.w	8013ae4 <_dtoa_r+0xb34>
 801307e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013082:	aa16      	add	r2, sp, #88	@ 0x58
 8013084:	a917      	add	r1, sp, #92	@ 0x5c
 8013086:	4658      	mov	r0, fp
 8013088:	f001 f8ca 	bl	8014220 <__d2b>
 801308c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013090:	4681      	mov	r9, r0
 8013092:	2e00      	cmp	r6, #0
 8013094:	d077      	beq.n	8013186 <_dtoa_r+0x1d6>
 8013096:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013098:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801309c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80130a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80130a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80130a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80130ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80130b0:	4619      	mov	r1, r3
 80130b2:	2200      	movs	r2, #0
 80130b4:	4b74      	ldr	r3, [pc, #464]	@ (8013288 <_dtoa_r+0x2d8>)
 80130b6:	f7ed f907 	bl	80002c8 <__aeabi_dsub>
 80130ba:	a369      	add	r3, pc, #420	@ (adr r3, 8013260 <_dtoa_r+0x2b0>)
 80130bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c0:	f7ed faba 	bl	8000638 <__aeabi_dmul>
 80130c4:	a368      	add	r3, pc, #416	@ (adr r3, 8013268 <_dtoa_r+0x2b8>)
 80130c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ca:	f7ed f8ff 	bl	80002cc <__adddf3>
 80130ce:	4604      	mov	r4, r0
 80130d0:	4630      	mov	r0, r6
 80130d2:	460d      	mov	r5, r1
 80130d4:	f7ed fa46 	bl	8000564 <__aeabi_i2d>
 80130d8:	a365      	add	r3, pc, #404	@ (adr r3, 8013270 <_dtoa_r+0x2c0>)
 80130da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130de:	f7ed faab 	bl	8000638 <__aeabi_dmul>
 80130e2:	4602      	mov	r2, r0
 80130e4:	460b      	mov	r3, r1
 80130e6:	4620      	mov	r0, r4
 80130e8:	4629      	mov	r1, r5
 80130ea:	f7ed f8ef 	bl	80002cc <__adddf3>
 80130ee:	4604      	mov	r4, r0
 80130f0:	460d      	mov	r5, r1
 80130f2:	f7ed fd51 	bl	8000b98 <__aeabi_d2iz>
 80130f6:	2200      	movs	r2, #0
 80130f8:	4607      	mov	r7, r0
 80130fa:	2300      	movs	r3, #0
 80130fc:	4620      	mov	r0, r4
 80130fe:	4629      	mov	r1, r5
 8013100:	f7ed fd0c 	bl	8000b1c <__aeabi_dcmplt>
 8013104:	b140      	cbz	r0, 8013118 <_dtoa_r+0x168>
 8013106:	4638      	mov	r0, r7
 8013108:	f7ed fa2c 	bl	8000564 <__aeabi_i2d>
 801310c:	4622      	mov	r2, r4
 801310e:	462b      	mov	r3, r5
 8013110:	f7ed fcfa 	bl	8000b08 <__aeabi_dcmpeq>
 8013114:	b900      	cbnz	r0, 8013118 <_dtoa_r+0x168>
 8013116:	3f01      	subs	r7, #1
 8013118:	2f16      	cmp	r7, #22
 801311a:	d851      	bhi.n	80131c0 <_dtoa_r+0x210>
 801311c:	4b5b      	ldr	r3, [pc, #364]	@ (801328c <_dtoa_r+0x2dc>)
 801311e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013126:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801312a:	f7ed fcf7 	bl	8000b1c <__aeabi_dcmplt>
 801312e:	2800      	cmp	r0, #0
 8013130:	d048      	beq.n	80131c4 <_dtoa_r+0x214>
 8013132:	3f01      	subs	r7, #1
 8013134:	2300      	movs	r3, #0
 8013136:	9312      	str	r3, [sp, #72]	@ 0x48
 8013138:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801313a:	1b9b      	subs	r3, r3, r6
 801313c:	1e5a      	subs	r2, r3, #1
 801313e:	bf44      	itt	mi
 8013140:	f1c3 0801 	rsbmi	r8, r3, #1
 8013144:	2300      	movmi	r3, #0
 8013146:	9208      	str	r2, [sp, #32]
 8013148:	bf54      	ite	pl
 801314a:	f04f 0800 	movpl.w	r8, #0
 801314e:	9308      	strmi	r3, [sp, #32]
 8013150:	2f00      	cmp	r7, #0
 8013152:	db39      	blt.n	80131c8 <_dtoa_r+0x218>
 8013154:	9b08      	ldr	r3, [sp, #32]
 8013156:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013158:	443b      	add	r3, r7
 801315a:	9308      	str	r3, [sp, #32]
 801315c:	2300      	movs	r3, #0
 801315e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013162:	2b09      	cmp	r3, #9
 8013164:	d864      	bhi.n	8013230 <_dtoa_r+0x280>
 8013166:	2b05      	cmp	r3, #5
 8013168:	bfc4      	itt	gt
 801316a:	3b04      	subgt	r3, #4
 801316c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801316e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013170:	f1a3 0302 	sub.w	r3, r3, #2
 8013174:	bfcc      	ite	gt
 8013176:	2400      	movgt	r4, #0
 8013178:	2401      	movle	r4, #1
 801317a:	2b03      	cmp	r3, #3
 801317c:	d863      	bhi.n	8013246 <_dtoa_r+0x296>
 801317e:	e8df f003 	tbb	[pc, r3]
 8013182:	372a      	.short	0x372a
 8013184:	5535      	.short	0x5535
 8013186:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801318a:	441e      	add	r6, r3
 801318c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013190:	2b20      	cmp	r3, #32
 8013192:	bfc1      	itttt	gt
 8013194:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013198:	409f      	lslgt	r7, r3
 801319a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801319e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80131a2:	bfd6      	itet	le
 80131a4:	f1c3 0320 	rsble	r3, r3, #32
 80131a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80131ac:	fa04 f003 	lslle.w	r0, r4, r3
 80131b0:	f7ed f9c8 	bl	8000544 <__aeabi_ui2d>
 80131b4:	2201      	movs	r2, #1
 80131b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80131ba:	3e01      	subs	r6, #1
 80131bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80131be:	e777      	b.n	80130b0 <_dtoa_r+0x100>
 80131c0:	2301      	movs	r3, #1
 80131c2:	e7b8      	b.n	8013136 <_dtoa_r+0x186>
 80131c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80131c6:	e7b7      	b.n	8013138 <_dtoa_r+0x188>
 80131c8:	427b      	negs	r3, r7
 80131ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80131cc:	2300      	movs	r3, #0
 80131ce:	eba8 0807 	sub.w	r8, r8, r7
 80131d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80131d4:	e7c4      	b.n	8013160 <_dtoa_r+0x1b0>
 80131d6:	2300      	movs	r3, #0
 80131d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80131da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80131dc:	2b00      	cmp	r3, #0
 80131de:	dc35      	bgt.n	801324c <_dtoa_r+0x29c>
 80131e0:	2301      	movs	r3, #1
 80131e2:	9300      	str	r3, [sp, #0]
 80131e4:	9307      	str	r3, [sp, #28]
 80131e6:	461a      	mov	r2, r3
 80131e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80131ea:	e00b      	b.n	8013204 <_dtoa_r+0x254>
 80131ec:	2301      	movs	r3, #1
 80131ee:	e7f3      	b.n	80131d8 <_dtoa_r+0x228>
 80131f0:	2300      	movs	r3, #0
 80131f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80131f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80131f6:	18fb      	adds	r3, r7, r3
 80131f8:	9300      	str	r3, [sp, #0]
 80131fa:	3301      	adds	r3, #1
 80131fc:	2b01      	cmp	r3, #1
 80131fe:	9307      	str	r3, [sp, #28]
 8013200:	bfb8      	it	lt
 8013202:	2301      	movlt	r3, #1
 8013204:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013208:	2100      	movs	r1, #0
 801320a:	2204      	movs	r2, #4
 801320c:	f102 0514 	add.w	r5, r2, #20
 8013210:	429d      	cmp	r5, r3
 8013212:	d91f      	bls.n	8013254 <_dtoa_r+0x2a4>
 8013214:	6041      	str	r1, [r0, #4]
 8013216:	4658      	mov	r0, fp
 8013218:	f000 fcd8 	bl	8013bcc <_Balloc>
 801321c:	4682      	mov	sl, r0
 801321e:	2800      	cmp	r0, #0
 8013220:	d13c      	bne.n	801329c <_dtoa_r+0x2ec>
 8013222:	4b1b      	ldr	r3, [pc, #108]	@ (8013290 <_dtoa_r+0x2e0>)
 8013224:	4602      	mov	r2, r0
 8013226:	f240 11af 	movw	r1, #431	@ 0x1af
 801322a:	e6d8      	b.n	8012fde <_dtoa_r+0x2e>
 801322c:	2301      	movs	r3, #1
 801322e:	e7e0      	b.n	80131f2 <_dtoa_r+0x242>
 8013230:	2401      	movs	r4, #1
 8013232:	2300      	movs	r3, #0
 8013234:	9309      	str	r3, [sp, #36]	@ 0x24
 8013236:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013238:	f04f 33ff 	mov.w	r3, #4294967295
 801323c:	9300      	str	r3, [sp, #0]
 801323e:	9307      	str	r3, [sp, #28]
 8013240:	2200      	movs	r2, #0
 8013242:	2312      	movs	r3, #18
 8013244:	e7d0      	b.n	80131e8 <_dtoa_r+0x238>
 8013246:	2301      	movs	r3, #1
 8013248:	930b      	str	r3, [sp, #44]	@ 0x2c
 801324a:	e7f5      	b.n	8013238 <_dtoa_r+0x288>
 801324c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801324e:	9300      	str	r3, [sp, #0]
 8013250:	9307      	str	r3, [sp, #28]
 8013252:	e7d7      	b.n	8013204 <_dtoa_r+0x254>
 8013254:	3101      	adds	r1, #1
 8013256:	0052      	lsls	r2, r2, #1
 8013258:	e7d8      	b.n	801320c <_dtoa_r+0x25c>
 801325a:	bf00      	nop
 801325c:	f3af 8000 	nop.w
 8013260:	636f4361 	.word	0x636f4361
 8013264:	3fd287a7 	.word	0x3fd287a7
 8013268:	8b60c8b3 	.word	0x8b60c8b3
 801326c:	3fc68a28 	.word	0x3fc68a28
 8013270:	509f79fb 	.word	0x509f79fb
 8013274:	3fd34413 	.word	0x3fd34413
 8013278:	080d2811 	.word	0x080d2811
 801327c:	080d2828 	.word	0x080d2828
 8013280:	7ff00000 	.word	0x7ff00000
 8013284:	080d27e1 	.word	0x080d27e1
 8013288:	3ff80000 	.word	0x3ff80000
 801328c:	080d2920 	.word	0x080d2920
 8013290:	080d2880 	.word	0x080d2880
 8013294:	080d280d 	.word	0x080d280d
 8013298:	080d27e0 	.word	0x080d27e0
 801329c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80132a0:	6018      	str	r0, [r3, #0]
 80132a2:	9b07      	ldr	r3, [sp, #28]
 80132a4:	2b0e      	cmp	r3, #14
 80132a6:	f200 80a4 	bhi.w	80133f2 <_dtoa_r+0x442>
 80132aa:	2c00      	cmp	r4, #0
 80132ac:	f000 80a1 	beq.w	80133f2 <_dtoa_r+0x442>
 80132b0:	2f00      	cmp	r7, #0
 80132b2:	dd33      	ble.n	801331c <_dtoa_r+0x36c>
 80132b4:	4bad      	ldr	r3, [pc, #692]	@ (801356c <_dtoa_r+0x5bc>)
 80132b6:	f007 020f 	and.w	r2, r7, #15
 80132ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80132be:	ed93 7b00 	vldr	d7, [r3]
 80132c2:	05f8      	lsls	r0, r7, #23
 80132c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80132c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80132cc:	d516      	bpl.n	80132fc <_dtoa_r+0x34c>
 80132ce:	4ba8      	ldr	r3, [pc, #672]	@ (8013570 <_dtoa_r+0x5c0>)
 80132d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80132d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80132d8:	f7ed fad8 	bl	800088c <__aeabi_ddiv>
 80132dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132e0:	f004 040f 	and.w	r4, r4, #15
 80132e4:	2603      	movs	r6, #3
 80132e6:	4da2      	ldr	r5, [pc, #648]	@ (8013570 <_dtoa_r+0x5c0>)
 80132e8:	b954      	cbnz	r4, 8013300 <_dtoa_r+0x350>
 80132ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80132ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132f2:	f7ed facb 	bl	800088c <__aeabi_ddiv>
 80132f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132fa:	e028      	b.n	801334e <_dtoa_r+0x39e>
 80132fc:	2602      	movs	r6, #2
 80132fe:	e7f2      	b.n	80132e6 <_dtoa_r+0x336>
 8013300:	07e1      	lsls	r1, r4, #31
 8013302:	d508      	bpl.n	8013316 <_dtoa_r+0x366>
 8013304:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013308:	e9d5 2300 	ldrd	r2, r3, [r5]
 801330c:	f7ed f994 	bl	8000638 <__aeabi_dmul>
 8013310:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013314:	3601      	adds	r6, #1
 8013316:	1064      	asrs	r4, r4, #1
 8013318:	3508      	adds	r5, #8
 801331a:	e7e5      	b.n	80132e8 <_dtoa_r+0x338>
 801331c:	f000 80d2 	beq.w	80134c4 <_dtoa_r+0x514>
 8013320:	427c      	negs	r4, r7
 8013322:	4b92      	ldr	r3, [pc, #584]	@ (801356c <_dtoa_r+0x5bc>)
 8013324:	4d92      	ldr	r5, [pc, #584]	@ (8013570 <_dtoa_r+0x5c0>)
 8013326:	f004 020f 	and.w	r2, r4, #15
 801332a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013332:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013336:	f7ed f97f 	bl	8000638 <__aeabi_dmul>
 801333a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801333e:	1124      	asrs	r4, r4, #4
 8013340:	2300      	movs	r3, #0
 8013342:	2602      	movs	r6, #2
 8013344:	2c00      	cmp	r4, #0
 8013346:	f040 80b2 	bne.w	80134ae <_dtoa_r+0x4fe>
 801334a:	2b00      	cmp	r3, #0
 801334c:	d1d3      	bne.n	80132f6 <_dtoa_r+0x346>
 801334e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013350:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013354:	2b00      	cmp	r3, #0
 8013356:	f000 80b7 	beq.w	80134c8 <_dtoa_r+0x518>
 801335a:	4b86      	ldr	r3, [pc, #536]	@ (8013574 <_dtoa_r+0x5c4>)
 801335c:	2200      	movs	r2, #0
 801335e:	4620      	mov	r0, r4
 8013360:	4629      	mov	r1, r5
 8013362:	f7ed fbdb 	bl	8000b1c <__aeabi_dcmplt>
 8013366:	2800      	cmp	r0, #0
 8013368:	f000 80ae 	beq.w	80134c8 <_dtoa_r+0x518>
 801336c:	9b07      	ldr	r3, [sp, #28]
 801336e:	2b00      	cmp	r3, #0
 8013370:	f000 80aa 	beq.w	80134c8 <_dtoa_r+0x518>
 8013374:	9b00      	ldr	r3, [sp, #0]
 8013376:	2b00      	cmp	r3, #0
 8013378:	dd37      	ble.n	80133ea <_dtoa_r+0x43a>
 801337a:	1e7b      	subs	r3, r7, #1
 801337c:	9304      	str	r3, [sp, #16]
 801337e:	4620      	mov	r0, r4
 8013380:	4b7d      	ldr	r3, [pc, #500]	@ (8013578 <_dtoa_r+0x5c8>)
 8013382:	2200      	movs	r2, #0
 8013384:	4629      	mov	r1, r5
 8013386:	f7ed f957 	bl	8000638 <__aeabi_dmul>
 801338a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801338e:	9c00      	ldr	r4, [sp, #0]
 8013390:	3601      	adds	r6, #1
 8013392:	4630      	mov	r0, r6
 8013394:	f7ed f8e6 	bl	8000564 <__aeabi_i2d>
 8013398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801339c:	f7ed f94c 	bl	8000638 <__aeabi_dmul>
 80133a0:	4b76      	ldr	r3, [pc, #472]	@ (801357c <_dtoa_r+0x5cc>)
 80133a2:	2200      	movs	r2, #0
 80133a4:	f7ec ff92 	bl	80002cc <__adddf3>
 80133a8:	4605      	mov	r5, r0
 80133aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80133ae:	2c00      	cmp	r4, #0
 80133b0:	f040 808d 	bne.w	80134ce <_dtoa_r+0x51e>
 80133b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133b8:	4b71      	ldr	r3, [pc, #452]	@ (8013580 <_dtoa_r+0x5d0>)
 80133ba:	2200      	movs	r2, #0
 80133bc:	f7ec ff84 	bl	80002c8 <__aeabi_dsub>
 80133c0:	4602      	mov	r2, r0
 80133c2:	460b      	mov	r3, r1
 80133c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80133c8:	462a      	mov	r2, r5
 80133ca:	4633      	mov	r3, r6
 80133cc:	f7ed fbc4 	bl	8000b58 <__aeabi_dcmpgt>
 80133d0:	2800      	cmp	r0, #0
 80133d2:	f040 828b 	bne.w	80138ec <_dtoa_r+0x93c>
 80133d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133da:	462a      	mov	r2, r5
 80133dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80133e0:	f7ed fb9c 	bl	8000b1c <__aeabi_dcmplt>
 80133e4:	2800      	cmp	r0, #0
 80133e6:	f040 8128 	bne.w	801363a <_dtoa_r+0x68a>
 80133ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80133ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80133f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	f2c0 815a 	blt.w	80136ae <_dtoa_r+0x6fe>
 80133fa:	2f0e      	cmp	r7, #14
 80133fc:	f300 8157 	bgt.w	80136ae <_dtoa_r+0x6fe>
 8013400:	4b5a      	ldr	r3, [pc, #360]	@ (801356c <_dtoa_r+0x5bc>)
 8013402:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013406:	ed93 7b00 	vldr	d7, [r3]
 801340a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801340c:	2b00      	cmp	r3, #0
 801340e:	ed8d 7b00 	vstr	d7, [sp]
 8013412:	da03      	bge.n	801341c <_dtoa_r+0x46c>
 8013414:	9b07      	ldr	r3, [sp, #28]
 8013416:	2b00      	cmp	r3, #0
 8013418:	f340 8101 	ble.w	801361e <_dtoa_r+0x66e>
 801341c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013420:	4656      	mov	r6, sl
 8013422:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013426:	4620      	mov	r0, r4
 8013428:	4629      	mov	r1, r5
 801342a:	f7ed fa2f 	bl	800088c <__aeabi_ddiv>
 801342e:	f7ed fbb3 	bl	8000b98 <__aeabi_d2iz>
 8013432:	4680      	mov	r8, r0
 8013434:	f7ed f896 	bl	8000564 <__aeabi_i2d>
 8013438:	e9dd 2300 	ldrd	r2, r3, [sp]
 801343c:	f7ed f8fc 	bl	8000638 <__aeabi_dmul>
 8013440:	4602      	mov	r2, r0
 8013442:	460b      	mov	r3, r1
 8013444:	4620      	mov	r0, r4
 8013446:	4629      	mov	r1, r5
 8013448:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801344c:	f7ec ff3c 	bl	80002c8 <__aeabi_dsub>
 8013450:	f806 4b01 	strb.w	r4, [r6], #1
 8013454:	9d07      	ldr	r5, [sp, #28]
 8013456:	eba6 040a 	sub.w	r4, r6, sl
 801345a:	42a5      	cmp	r5, r4
 801345c:	4602      	mov	r2, r0
 801345e:	460b      	mov	r3, r1
 8013460:	f040 8117 	bne.w	8013692 <_dtoa_r+0x6e2>
 8013464:	f7ec ff32 	bl	80002cc <__adddf3>
 8013468:	e9dd 2300 	ldrd	r2, r3, [sp]
 801346c:	4604      	mov	r4, r0
 801346e:	460d      	mov	r5, r1
 8013470:	f7ed fb72 	bl	8000b58 <__aeabi_dcmpgt>
 8013474:	2800      	cmp	r0, #0
 8013476:	f040 80f9 	bne.w	801366c <_dtoa_r+0x6bc>
 801347a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801347e:	4620      	mov	r0, r4
 8013480:	4629      	mov	r1, r5
 8013482:	f7ed fb41 	bl	8000b08 <__aeabi_dcmpeq>
 8013486:	b118      	cbz	r0, 8013490 <_dtoa_r+0x4e0>
 8013488:	f018 0f01 	tst.w	r8, #1
 801348c:	f040 80ee 	bne.w	801366c <_dtoa_r+0x6bc>
 8013490:	4649      	mov	r1, r9
 8013492:	4658      	mov	r0, fp
 8013494:	f000 fbda 	bl	8013c4c <_Bfree>
 8013498:	2300      	movs	r3, #0
 801349a:	7033      	strb	r3, [r6, #0]
 801349c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801349e:	3701      	adds	r7, #1
 80134a0:	601f      	str	r7, [r3, #0]
 80134a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	f000 831d 	beq.w	8013ae4 <_dtoa_r+0xb34>
 80134aa:	601e      	str	r6, [r3, #0]
 80134ac:	e31a      	b.n	8013ae4 <_dtoa_r+0xb34>
 80134ae:	07e2      	lsls	r2, r4, #31
 80134b0:	d505      	bpl.n	80134be <_dtoa_r+0x50e>
 80134b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80134b6:	f7ed f8bf 	bl	8000638 <__aeabi_dmul>
 80134ba:	3601      	adds	r6, #1
 80134bc:	2301      	movs	r3, #1
 80134be:	1064      	asrs	r4, r4, #1
 80134c0:	3508      	adds	r5, #8
 80134c2:	e73f      	b.n	8013344 <_dtoa_r+0x394>
 80134c4:	2602      	movs	r6, #2
 80134c6:	e742      	b.n	801334e <_dtoa_r+0x39e>
 80134c8:	9c07      	ldr	r4, [sp, #28]
 80134ca:	9704      	str	r7, [sp, #16]
 80134cc:	e761      	b.n	8013392 <_dtoa_r+0x3e2>
 80134ce:	4b27      	ldr	r3, [pc, #156]	@ (801356c <_dtoa_r+0x5bc>)
 80134d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80134d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80134d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80134da:	4454      	add	r4, sl
 80134dc:	2900      	cmp	r1, #0
 80134de:	d053      	beq.n	8013588 <_dtoa_r+0x5d8>
 80134e0:	4928      	ldr	r1, [pc, #160]	@ (8013584 <_dtoa_r+0x5d4>)
 80134e2:	2000      	movs	r0, #0
 80134e4:	f7ed f9d2 	bl	800088c <__aeabi_ddiv>
 80134e8:	4633      	mov	r3, r6
 80134ea:	462a      	mov	r2, r5
 80134ec:	f7ec feec 	bl	80002c8 <__aeabi_dsub>
 80134f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80134f4:	4656      	mov	r6, sl
 80134f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134fa:	f7ed fb4d 	bl	8000b98 <__aeabi_d2iz>
 80134fe:	4605      	mov	r5, r0
 8013500:	f7ed f830 	bl	8000564 <__aeabi_i2d>
 8013504:	4602      	mov	r2, r0
 8013506:	460b      	mov	r3, r1
 8013508:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801350c:	f7ec fedc 	bl	80002c8 <__aeabi_dsub>
 8013510:	3530      	adds	r5, #48	@ 0x30
 8013512:	4602      	mov	r2, r0
 8013514:	460b      	mov	r3, r1
 8013516:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801351a:	f806 5b01 	strb.w	r5, [r6], #1
 801351e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013522:	f7ed fafb 	bl	8000b1c <__aeabi_dcmplt>
 8013526:	2800      	cmp	r0, #0
 8013528:	d171      	bne.n	801360e <_dtoa_r+0x65e>
 801352a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801352e:	4911      	ldr	r1, [pc, #68]	@ (8013574 <_dtoa_r+0x5c4>)
 8013530:	2000      	movs	r0, #0
 8013532:	f7ec fec9 	bl	80002c8 <__aeabi_dsub>
 8013536:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801353a:	f7ed faef 	bl	8000b1c <__aeabi_dcmplt>
 801353e:	2800      	cmp	r0, #0
 8013540:	f040 8095 	bne.w	801366e <_dtoa_r+0x6be>
 8013544:	42a6      	cmp	r6, r4
 8013546:	f43f af50 	beq.w	80133ea <_dtoa_r+0x43a>
 801354a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801354e:	4b0a      	ldr	r3, [pc, #40]	@ (8013578 <_dtoa_r+0x5c8>)
 8013550:	2200      	movs	r2, #0
 8013552:	f7ed f871 	bl	8000638 <__aeabi_dmul>
 8013556:	4b08      	ldr	r3, [pc, #32]	@ (8013578 <_dtoa_r+0x5c8>)
 8013558:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801355c:	2200      	movs	r2, #0
 801355e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013562:	f7ed f869 	bl	8000638 <__aeabi_dmul>
 8013566:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801356a:	e7c4      	b.n	80134f6 <_dtoa_r+0x546>
 801356c:	080d2920 	.word	0x080d2920
 8013570:	080d28f8 	.word	0x080d28f8
 8013574:	3ff00000 	.word	0x3ff00000
 8013578:	40240000 	.word	0x40240000
 801357c:	401c0000 	.word	0x401c0000
 8013580:	40140000 	.word	0x40140000
 8013584:	3fe00000 	.word	0x3fe00000
 8013588:	4631      	mov	r1, r6
 801358a:	4628      	mov	r0, r5
 801358c:	f7ed f854 	bl	8000638 <__aeabi_dmul>
 8013590:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013594:	9415      	str	r4, [sp, #84]	@ 0x54
 8013596:	4656      	mov	r6, sl
 8013598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801359c:	f7ed fafc 	bl	8000b98 <__aeabi_d2iz>
 80135a0:	4605      	mov	r5, r0
 80135a2:	f7ec ffdf 	bl	8000564 <__aeabi_i2d>
 80135a6:	4602      	mov	r2, r0
 80135a8:	460b      	mov	r3, r1
 80135aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80135ae:	f7ec fe8b 	bl	80002c8 <__aeabi_dsub>
 80135b2:	3530      	adds	r5, #48	@ 0x30
 80135b4:	f806 5b01 	strb.w	r5, [r6], #1
 80135b8:	4602      	mov	r2, r0
 80135ba:	460b      	mov	r3, r1
 80135bc:	42a6      	cmp	r6, r4
 80135be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80135c2:	f04f 0200 	mov.w	r2, #0
 80135c6:	d124      	bne.n	8013612 <_dtoa_r+0x662>
 80135c8:	4bac      	ldr	r3, [pc, #688]	@ (801387c <_dtoa_r+0x8cc>)
 80135ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80135ce:	f7ec fe7d 	bl	80002cc <__adddf3>
 80135d2:	4602      	mov	r2, r0
 80135d4:	460b      	mov	r3, r1
 80135d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80135da:	f7ed fabd 	bl	8000b58 <__aeabi_dcmpgt>
 80135de:	2800      	cmp	r0, #0
 80135e0:	d145      	bne.n	801366e <_dtoa_r+0x6be>
 80135e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80135e6:	49a5      	ldr	r1, [pc, #660]	@ (801387c <_dtoa_r+0x8cc>)
 80135e8:	2000      	movs	r0, #0
 80135ea:	f7ec fe6d 	bl	80002c8 <__aeabi_dsub>
 80135ee:	4602      	mov	r2, r0
 80135f0:	460b      	mov	r3, r1
 80135f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80135f6:	f7ed fa91 	bl	8000b1c <__aeabi_dcmplt>
 80135fa:	2800      	cmp	r0, #0
 80135fc:	f43f aef5 	beq.w	80133ea <_dtoa_r+0x43a>
 8013600:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013602:	1e73      	subs	r3, r6, #1
 8013604:	9315      	str	r3, [sp, #84]	@ 0x54
 8013606:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801360a:	2b30      	cmp	r3, #48	@ 0x30
 801360c:	d0f8      	beq.n	8013600 <_dtoa_r+0x650>
 801360e:	9f04      	ldr	r7, [sp, #16]
 8013610:	e73e      	b.n	8013490 <_dtoa_r+0x4e0>
 8013612:	4b9b      	ldr	r3, [pc, #620]	@ (8013880 <_dtoa_r+0x8d0>)
 8013614:	f7ed f810 	bl	8000638 <__aeabi_dmul>
 8013618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801361c:	e7bc      	b.n	8013598 <_dtoa_r+0x5e8>
 801361e:	d10c      	bne.n	801363a <_dtoa_r+0x68a>
 8013620:	4b98      	ldr	r3, [pc, #608]	@ (8013884 <_dtoa_r+0x8d4>)
 8013622:	2200      	movs	r2, #0
 8013624:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013628:	f7ed f806 	bl	8000638 <__aeabi_dmul>
 801362c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013630:	f7ed fa88 	bl	8000b44 <__aeabi_dcmpge>
 8013634:	2800      	cmp	r0, #0
 8013636:	f000 8157 	beq.w	80138e8 <_dtoa_r+0x938>
 801363a:	2400      	movs	r4, #0
 801363c:	4625      	mov	r5, r4
 801363e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013640:	43db      	mvns	r3, r3
 8013642:	9304      	str	r3, [sp, #16]
 8013644:	4656      	mov	r6, sl
 8013646:	2700      	movs	r7, #0
 8013648:	4621      	mov	r1, r4
 801364a:	4658      	mov	r0, fp
 801364c:	f000 fafe 	bl	8013c4c <_Bfree>
 8013650:	2d00      	cmp	r5, #0
 8013652:	d0dc      	beq.n	801360e <_dtoa_r+0x65e>
 8013654:	b12f      	cbz	r7, 8013662 <_dtoa_r+0x6b2>
 8013656:	42af      	cmp	r7, r5
 8013658:	d003      	beq.n	8013662 <_dtoa_r+0x6b2>
 801365a:	4639      	mov	r1, r7
 801365c:	4658      	mov	r0, fp
 801365e:	f000 faf5 	bl	8013c4c <_Bfree>
 8013662:	4629      	mov	r1, r5
 8013664:	4658      	mov	r0, fp
 8013666:	f000 faf1 	bl	8013c4c <_Bfree>
 801366a:	e7d0      	b.n	801360e <_dtoa_r+0x65e>
 801366c:	9704      	str	r7, [sp, #16]
 801366e:	4633      	mov	r3, r6
 8013670:	461e      	mov	r6, r3
 8013672:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013676:	2a39      	cmp	r2, #57	@ 0x39
 8013678:	d107      	bne.n	801368a <_dtoa_r+0x6da>
 801367a:	459a      	cmp	sl, r3
 801367c:	d1f8      	bne.n	8013670 <_dtoa_r+0x6c0>
 801367e:	9a04      	ldr	r2, [sp, #16]
 8013680:	3201      	adds	r2, #1
 8013682:	9204      	str	r2, [sp, #16]
 8013684:	2230      	movs	r2, #48	@ 0x30
 8013686:	f88a 2000 	strb.w	r2, [sl]
 801368a:	781a      	ldrb	r2, [r3, #0]
 801368c:	3201      	adds	r2, #1
 801368e:	701a      	strb	r2, [r3, #0]
 8013690:	e7bd      	b.n	801360e <_dtoa_r+0x65e>
 8013692:	4b7b      	ldr	r3, [pc, #492]	@ (8013880 <_dtoa_r+0x8d0>)
 8013694:	2200      	movs	r2, #0
 8013696:	f7ec ffcf 	bl	8000638 <__aeabi_dmul>
 801369a:	2200      	movs	r2, #0
 801369c:	2300      	movs	r3, #0
 801369e:	4604      	mov	r4, r0
 80136a0:	460d      	mov	r5, r1
 80136a2:	f7ed fa31 	bl	8000b08 <__aeabi_dcmpeq>
 80136a6:	2800      	cmp	r0, #0
 80136a8:	f43f aebb 	beq.w	8013422 <_dtoa_r+0x472>
 80136ac:	e6f0      	b.n	8013490 <_dtoa_r+0x4e0>
 80136ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80136b0:	2a00      	cmp	r2, #0
 80136b2:	f000 80db 	beq.w	801386c <_dtoa_r+0x8bc>
 80136b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80136b8:	2a01      	cmp	r2, #1
 80136ba:	f300 80bf 	bgt.w	801383c <_dtoa_r+0x88c>
 80136be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80136c0:	2a00      	cmp	r2, #0
 80136c2:	f000 80b7 	beq.w	8013834 <_dtoa_r+0x884>
 80136c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80136ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80136cc:	4646      	mov	r6, r8
 80136ce:	9a08      	ldr	r2, [sp, #32]
 80136d0:	2101      	movs	r1, #1
 80136d2:	441a      	add	r2, r3
 80136d4:	4658      	mov	r0, fp
 80136d6:	4498      	add	r8, r3
 80136d8:	9208      	str	r2, [sp, #32]
 80136da:	f000 fb6b 	bl	8013db4 <__i2b>
 80136de:	4605      	mov	r5, r0
 80136e0:	b15e      	cbz	r6, 80136fa <_dtoa_r+0x74a>
 80136e2:	9b08      	ldr	r3, [sp, #32]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	dd08      	ble.n	80136fa <_dtoa_r+0x74a>
 80136e8:	42b3      	cmp	r3, r6
 80136ea:	9a08      	ldr	r2, [sp, #32]
 80136ec:	bfa8      	it	ge
 80136ee:	4633      	movge	r3, r6
 80136f0:	eba8 0803 	sub.w	r8, r8, r3
 80136f4:	1af6      	subs	r6, r6, r3
 80136f6:	1ad3      	subs	r3, r2, r3
 80136f8:	9308      	str	r3, [sp, #32]
 80136fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80136fc:	b1f3      	cbz	r3, 801373c <_dtoa_r+0x78c>
 80136fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013700:	2b00      	cmp	r3, #0
 8013702:	f000 80b7 	beq.w	8013874 <_dtoa_r+0x8c4>
 8013706:	b18c      	cbz	r4, 801372c <_dtoa_r+0x77c>
 8013708:	4629      	mov	r1, r5
 801370a:	4622      	mov	r2, r4
 801370c:	4658      	mov	r0, fp
 801370e:	f000 fc11 	bl	8013f34 <__pow5mult>
 8013712:	464a      	mov	r2, r9
 8013714:	4601      	mov	r1, r0
 8013716:	4605      	mov	r5, r0
 8013718:	4658      	mov	r0, fp
 801371a:	f000 fb61 	bl	8013de0 <__multiply>
 801371e:	4649      	mov	r1, r9
 8013720:	9004      	str	r0, [sp, #16]
 8013722:	4658      	mov	r0, fp
 8013724:	f000 fa92 	bl	8013c4c <_Bfree>
 8013728:	9b04      	ldr	r3, [sp, #16]
 801372a:	4699      	mov	r9, r3
 801372c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801372e:	1b1a      	subs	r2, r3, r4
 8013730:	d004      	beq.n	801373c <_dtoa_r+0x78c>
 8013732:	4649      	mov	r1, r9
 8013734:	4658      	mov	r0, fp
 8013736:	f000 fbfd 	bl	8013f34 <__pow5mult>
 801373a:	4681      	mov	r9, r0
 801373c:	2101      	movs	r1, #1
 801373e:	4658      	mov	r0, fp
 8013740:	f000 fb38 	bl	8013db4 <__i2b>
 8013744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013746:	4604      	mov	r4, r0
 8013748:	2b00      	cmp	r3, #0
 801374a:	f000 81cf 	beq.w	8013aec <_dtoa_r+0xb3c>
 801374e:	461a      	mov	r2, r3
 8013750:	4601      	mov	r1, r0
 8013752:	4658      	mov	r0, fp
 8013754:	f000 fbee 	bl	8013f34 <__pow5mult>
 8013758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801375a:	2b01      	cmp	r3, #1
 801375c:	4604      	mov	r4, r0
 801375e:	f300 8095 	bgt.w	801388c <_dtoa_r+0x8dc>
 8013762:	9b02      	ldr	r3, [sp, #8]
 8013764:	2b00      	cmp	r3, #0
 8013766:	f040 8087 	bne.w	8013878 <_dtoa_r+0x8c8>
 801376a:	9b03      	ldr	r3, [sp, #12]
 801376c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013770:	2b00      	cmp	r3, #0
 8013772:	f040 8089 	bne.w	8013888 <_dtoa_r+0x8d8>
 8013776:	9b03      	ldr	r3, [sp, #12]
 8013778:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801377c:	0d1b      	lsrs	r3, r3, #20
 801377e:	051b      	lsls	r3, r3, #20
 8013780:	b12b      	cbz	r3, 801378e <_dtoa_r+0x7de>
 8013782:	9b08      	ldr	r3, [sp, #32]
 8013784:	3301      	adds	r3, #1
 8013786:	9308      	str	r3, [sp, #32]
 8013788:	f108 0801 	add.w	r8, r8, #1
 801378c:	2301      	movs	r3, #1
 801378e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013792:	2b00      	cmp	r3, #0
 8013794:	f000 81b0 	beq.w	8013af8 <_dtoa_r+0xb48>
 8013798:	6923      	ldr	r3, [r4, #16]
 801379a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801379e:	6918      	ldr	r0, [r3, #16]
 80137a0:	f000 fabc 	bl	8013d1c <__hi0bits>
 80137a4:	f1c0 0020 	rsb	r0, r0, #32
 80137a8:	9b08      	ldr	r3, [sp, #32]
 80137aa:	4418      	add	r0, r3
 80137ac:	f010 001f 	ands.w	r0, r0, #31
 80137b0:	d077      	beq.n	80138a2 <_dtoa_r+0x8f2>
 80137b2:	f1c0 0320 	rsb	r3, r0, #32
 80137b6:	2b04      	cmp	r3, #4
 80137b8:	dd6b      	ble.n	8013892 <_dtoa_r+0x8e2>
 80137ba:	9b08      	ldr	r3, [sp, #32]
 80137bc:	f1c0 001c 	rsb	r0, r0, #28
 80137c0:	4403      	add	r3, r0
 80137c2:	4480      	add	r8, r0
 80137c4:	4406      	add	r6, r0
 80137c6:	9308      	str	r3, [sp, #32]
 80137c8:	f1b8 0f00 	cmp.w	r8, #0
 80137cc:	dd05      	ble.n	80137da <_dtoa_r+0x82a>
 80137ce:	4649      	mov	r1, r9
 80137d0:	4642      	mov	r2, r8
 80137d2:	4658      	mov	r0, fp
 80137d4:	f000 fc08 	bl	8013fe8 <__lshift>
 80137d8:	4681      	mov	r9, r0
 80137da:	9b08      	ldr	r3, [sp, #32]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	dd05      	ble.n	80137ec <_dtoa_r+0x83c>
 80137e0:	4621      	mov	r1, r4
 80137e2:	461a      	mov	r2, r3
 80137e4:	4658      	mov	r0, fp
 80137e6:	f000 fbff 	bl	8013fe8 <__lshift>
 80137ea:	4604      	mov	r4, r0
 80137ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d059      	beq.n	80138a6 <_dtoa_r+0x8f6>
 80137f2:	4621      	mov	r1, r4
 80137f4:	4648      	mov	r0, r9
 80137f6:	f000 fc63 	bl	80140c0 <__mcmp>
 80137fa:	2800      	cmp	r0, #0
 80137fc:	da53      	bge.n	80138a6 <_dtoa_r+0x8f6>
 80137fe:	1e7b      	subs	r3, r7, #1
 8013800:	9304      	str	r3, [sp, #16]
 8013802:	4649      	mov	r1, r9
 8013804:	2300      	movs	r3, #0
 8013806:	220a      	movs	r2, #10
 8013808:	4658      	mov	r0, fp
 801380a:	f000 fa41 	bl	8013c90 <__multadd>
 801380e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013810:	4681      	mov	r9, r0
 8013812:	2b00      	cmp	r3, #0
 8013814:	f000 8172 	beq.w	8013afc <_dtoa_r+0xb4c>
 8013818:	2300      	movs	r3, #0
 801381a:	4629      	mov	r1, r5
 801381c:	220a      	movs	r2, #10
 801381e:	4658      	mov	r0, fp
 8013820:	f000 fa36 	bl	8013c90 <__multadd>
 8013824:	9b00      	ldr	r3, [sp, #0]
 8013826:	2b00      	cmp	r3, #0
 8013828:	4605      	mov	r5, r0
 801382a:	dc67      	bgt.n	80138fc <_dtoa_r+0x94c>
 801382c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801382e:	2b02      	cmp	r3, #2
 8013830:	dc41      	bgt.n	80138b6 <_dtoa_r+0x906>
 8013832:	e063      	b.n	80138fc <_dtoa_r+0x94c>
 8013834:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013836:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801383a:	e746      	b.n	80136ca <_dtoa_r+0x71a>
 801383c:	9b07      	ldr	r3, [sp, #28]
 801383e:	1e5c      	subs	r4, r3, #1
 8013840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013842:	42a3      	cmp	r3, r4
 8013844:	bfbf      	itttt	lt
 8013846:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013848:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801384a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801384c:	1ae3      	sublt	r3, r4, r3
 801384e:	bfb4      	ite	lt
 8013850:	18d2      	addlt	r2, r2, r3
 8013852:	1b1c      	subge	r4, r3, r4
 8013854:	9b07      	ldr	r3, [sp, #28]
 8013856:	bfbc      	itt	lt
 8013858:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801385a:	2400      	movlt	r4, #0
 801385c:	2b00      	cmp	r3, #0
 801385e:	bfb5      	itete	lt
 8013860:	eba8 0603 	sublt.w	r6, r8, r3
 8013864:	9b07      	ldrge	r3, [sp, #28]
 8013866:	2300      	movlt	r3, #0
 8013868:	4646      	movge	r6, r8
 801386a:	e730      	b.n	80136ce <_dtoa_r+0x71e>
 801386c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801386e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013870:	4646      	mov	r6, r8
 8013872:	e735      	b.n	80136e0 <_dtoa_r+0x730>
 8013874:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013876:	e75c      	b.n	8013732 <_dtoa_r+0x782>
 8013878:	2300      	movs	r3, #0
 801387a:	e788      	b.n	801378e <_dtoa_r+0x7de>
 801387c:	3fe00000 	.word	0x3fe00000
 8013880:	40240000 	.word	0x40240000
 8013884:	40140000 	.word	0x40140000
 8013888:	9b02      	ldr	r3, [sp, #8]
 801388a:	e780      	b.n	801378e <_dtoa_r+0x7de>
 801388c:	2300      	movs	r3, #0
 801388e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013890:	e782      	b.n	8013798 <_dtoa_r+0x7e8>
 8013892:	d099      	beq.n	80137c8 <_dtoa_r+0x818>
 8013894:	9a08      	ldr	r2, [sp, #32]
 8013896:	331c      	adds	r3, #28
 8013898:	441a      	add	r2, r3
 801389a:	4498      	add	r8, r3
 801389c:	441e      	add	r6, r3
 801389e:	9208      	str	r2, [sp, #32]
 80138a0:	e792      	b.n	80137c8 <_dtoa_r+0x818>
 80138a2:	4603      	mov	r3, r0
 80138a4:	e7f6      	b.n	8013894 <_dtoa_r+0x8e4>
 80138a6:	9b07      	ldr	r3, [sp, #28]
 80138a8:	9704      	str	r7, [sp, #16]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	dc20      	bgt.n	80138f0 <_dtoa_r+0x940>
 80138ae:	9300      	str	r3, [sp, #0]
 80138b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138b2:	2b02      	cmp	r3, #2
 80138b4:	dd1e      	ble.n	80138f4 <_dtoa_r+0x944>
 80138b6:	9b00      	ldr	r3, [sp, #0]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	f47f aec0 	bne.w	801363e <_dtoa_r+0x68e>
 80138be:	4621      	mov	r1, r4
 80138c0:	2205      	movs	r2, #5
 80138c2:	4658      	mov	r0, fp
 80138c4:	f000 f9e4 	bl	8013c90 <__multadd>
 80138c8:	4601      	mov	r1, r0
 80138ca:	4604      	mov	r4, r0
 80138cc:	4648      	mov	r0, r9
 80138ce:	f000 fbf7 	bl	80140c0 <__mcmp>
 80138d2:	2800      	cmp	r0, #0
 80138d4:	f77f aeb3 	ble.w	801363e <_dtoa_r+0x68e>
 80138d8:	4656      	mov	r6, sl
 80138da:	2331      	movs	r3, #49	@ 0x31
 80138dc:	f806 3b01 	strb.w	r3, [r6], #1
 80138e0:	9b04      	ldr	r3, [sp, #16]
 80138e2:	3301      	adds	r3, #1
 80138e4:	9304      	str	r3, [sp, #16]
 80138e6:	e6ae      	b.n	8013646 <_dtoa_r+0x696>
 80138e8:	9c07      	ldr	r4, [sp, #28]
 80138ea:	9704      	str	r7, [sp, #16]
 80138ec:	4625      	mov	r5, r4
 80138ee:	e7f3      	b.n	80138d8 <_dtoa_r+0x928>
 80138f0:	9b07      	ldr	r3, [sp, #28]
 80138f2:	9300      	str	r3, [sp, #0]
 80138f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	f000 8104 	beq.w	8013b04 <_dtoa_r+0xb54>
 80138fc:	2e00      	cmp	r6, #0
 80138fe:	dd05      	ble.n	801390c <_dtoa_r+0x95c>
 8013900:	4629      	mov	r1, r5
 8013902:	4632      	mov	r2, r6
 8013904:	4658      	mov	r0, fp
 8013906:	f000 fb6f 	bl	8013fe8 <__lshift>
 801390a:	4605      	mov	r5, r0
 801390c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801390e:	2b00      	cmp	r3, #0
 8013910:	d05a      	beq.n	80139c8 <_dtoa_r+0xa18>
 8013912:	6869      	ldr	r1, [r5, #4]
 8013914:	4658      	mov	r0, fp
 8013916:	f000 f959 	bl	8013bcc <_Balloc>
 801391a:	4606      	mov	r6, r0
 801391c:	b928      	cbnz	r0, 801392a <_dtoa_r+0x97a>
 801391e:	4b84      	ldr	r3, [pc, #528]	@ (8013b30 <_dtoa_r+0xb80>)
 8013920:	4602      	mov	r2, r0
 8013922:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013926:	f7ff bb5a 	b.w	8012fde <_dtoa_r+0x2e>
 801392a:	692a      	ldr	r2, [r5, #16]
 801392c:	3202      	adds	r2, #2
 801392e:	0092      	lsls	r2, r2, #2
 8013930:	f105 010c 	add.w	r1, r5, #12
 8013934:	300c      	adds	r0, #12
 8013936:	f7ff faa4 	bl	8012e82 <memcpy>
 801393a:	2201      	movs	r2, #1
 801393c:	4631      	mov	r1, r6
 801393e:	4658      	mov	r0, fp
 8013940:	f000 fb52 	bl	8013fe8 <__lshift>
 8013944:	f10a 0301 	add.w	r3, sl, #1
 8013948:	9307      	str	r3, [sp, #28]
 801394a:	9b00      	ldr	r3, [sp, #0]
 801394c:	4453      	add	r3, sl
 801394e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013950:	9b02      	ldr	r3, [sp, #8]
 8013952:	f003 0301 	and.w	r3, r3, #1
 8013956:	462f      	mov	r7, r5
 8013958:	930a      	str	r3, [sp, #40]	@ 0x28
 801395a:	4605      	mov	r5, r0
 801395c:	9b07      	ldr	r3, [sp, #28]
 801395e:	4621      	mov	r1, r4
 8013960:	3b01      	subs	r3, #1
 8013962:	4648      	mov	r0, r9
 8013964:	9300      	str	r3, [sp, #0]
 8013966:	f7ff fa9a 	bl	8012e9e <quorem>
 801396a:	4639      	mov	r1, r7
 801396c:	9002      	str	r0, [sp, #8]
 801396e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013972:	4648      	mov	r0, r9
 8013974:	f000 fba4 	bl	80140c0 <__mcmp>
 8013978:	462a      	mov	r2, r5
 801397a:	9008      	str	r0, [sp, #32]
 801397c:	4621      	mov	r1, r4
 801397e:	4658      	mov	r0, fp
 8013980:	f000 fbba 	bl	80140f8 <__mdiff>
 8013984:	68c2      	ldr	r2, [r0, #12]
 8013986:	4606      	mov	r6, r0
 8013988:	bb02      	cbnz	r2, 80139cc <_dtoa_r+0xa1c>
 801398a:	4601      	mov	r1, r0
 801398c:	4648      	mov	r0, r9
 801398e:	f000 fb97 	bl	80140c0 <__mcmp>
 8013992:	4602      	mov	r2, r0
 8013994:	4631      	mov	r1, r6
 8013996:	4658      	mov	r0, fp
 8013998:	920e      	str	r2, [sp, #56]	@ 0x38
 801399a:	f000 f957 	bl	8013c4c <_Bfree>
 801399e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80139a2:	9e07      	ldr	r6, [sp, #28]
 80139a4:	ea43 0102 	orr.w	r1, r3, r2
 80139a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80139aa:	4319      	orrs	r1, r3
 80139ac:	d110      	bne.n	80139d0 <_dtoa_r+0xa20>
 80139ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80139b2:	d029      	beq.n	8013a08 <_dtoa_r+0xa58>
 80139b4:	9b08      	ldr	r3, [sp, #32]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	dd02      	ble.n	80139c0 <_dtoa_r+0xa10>
 80139ba:	9b02      	ldr	r3, [sp, #8]
 80139bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80139c0:	9b00      	ldr	r3, [sp, #0]
 80139c2:	f883 8000 	strb.w	r8, [r3]
 80139c6:	e63f      	b.n	8013648 <_dtoa_r+0x698>
 80139c8:	4628      	mov	r0, r5
 80139ca:	e7bb      	b.n	8013944 <_dtoa_r+0x994>
 80139cc:	2201      	movs	r2, #1
 80139ce:	e7e1      	b.n	8013994 <_dtoa_r+0x9e4>
 80139d0:	9b08      	ldr	r3, [sp, #32]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	db04      	blt.n	80139e0 <_dtoa_r+0xa30>
 80139d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80139d8:	430b      	orrs	r3, r1
 80139da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80139dc:	430b      	orrs	r3, r1
 80139de:	d120      	bne.n	8013a22 <_dtoa_r+0xa72>
 80139e0:	2a00      	cmp	r2, #0
 80139e2:	dded      	ble.n	80139c0 <_dtoa_r+0xa10>
 80139e4:	4649      	mov	r1, r9
 80139e6:	2201      	movs	r2, #1
 80139e8:	4658      	mov	r0, fp
 80139ea:	f000 fafd 	bl	8013fe8 <__lshift>
 80139ee:	4621      	mov	r1, r4
 80139f0:	4681      	mov	r9, r0
 80139f2:	f000 fb65 	bl	80140c0 <__mcmp>
 80139f6:	2800      	cmp	r0, #0
 80139f8:	dc03      	bgt.n	8013a02 <_dtoa_r+0xa52>
 80139fa:	d1e1      	bne.n	80139c0 <_dtoa_r+0xa10>
 80139fc:	f018 0f01 	tst.w	r8, #1
 8013a00:	d0de      	beq.n	80139c0 <_dtoa_r+0xa10>
 8013a02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013a06:	d1d8      	bne.n	80139ba <_dtoa_r+0xa0a>
 8013a08:	9a00      	ldr	r2, [sp, #0]
 8013a0a:	2339      	movs	r3, #57	@ 0x39
 8013a0c:	7013      	strb	r3, [r2, #0]
 8013a0e:	4633      	mov	r3, r6
 8013a10:	461e      	mov	r6, r3
 8013a12:	3b01      	subs	r3, #1
 8013a14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013a18:	2a39      	cmp	r2, #57	@ 0x39
 8013a1a:	d052      	beq.n	8013ac2 <_dtoa_r+0xb12>
 8013a1c:	3201      	adds	r2, #1
 8013a1e:	701a      	strb	r2, [r3, #0]
 8013a20:	e612      	b.n	8013648 <_dtoa_r+0x698>
 8013a22:	2a00      	cmp	r2, #0
 8013a24:	dd07      	ble.n	8013a36 <_dtoa_r+0xa86>
 8013a26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013a2a:	d0ed      	beq.n	8013a08 <_dtoa_r+0xa58>
 8013a2c:	9a00      	ldr	r2, [sp, #0]
 8013a2e:	f108 0301 	add.w	r3, r8, #1
 8013a32:	7013      	strb	r3, [r2, #0]
 8013a34:	e608      	b.n	8013648 <_dtoa_r+0x698>
 8013a36:	9b07      	ldr	r3, [sp, #28]
 8013a38:	9a07      	ldr	r2, [sp, #28]
 8013a3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8013a3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013a40:	4293      	cmp	r3, r2
 8013a42:	d028      	beq.n	8013a96 <_dtoa_r+0xae6>
 8013a44:	4649      	mov	r1, r9
 8013a46:	2300      	movs	r3, #0
 8013a48:	220a      	movs	r2, #10
 8013a4a:	4658      	mov	r0, fp
 8013a4c:	f000 f920 	bl	8013c90 <__multadd>
 8013a50:	42af      	cmp	r7, r5
 8013a52:	4681      	mov	r9, r0
 8013a54:	f04f 0300 	mov.w	r3, #0
 8013a58:	f04f 020a 	mov.w	r2, #10
 8013a5c:	4639      	mov	r1, r7
 8013a5e:	4658      	mov	r0, fp
 8013a60:	d107      	bne.n	8013a72 <_dtoa_r+0xac2>
 8013a62:	f000 f915 	bl	8013c90 <__multadd>
 8013a66:	4607      	mov	r7, r0
 8013a68:	4605      	mov	r5, r0
 8013a6a:	9b07      	ldr	r3, [sp, #28]
 8013a6c:	3301      	adds	r3, #1
 8013a6e:	9307      	str	r3, [sp, #28]
 8013a70:	e774      	b.n	801395c <_dtoa_r+0x9ac>
 8013a72:	f000 f90d 	bl	8013c90 <__multadd>
 8013a76:	4629      	mov	r1, r5
 8013a78:	4607      	mov	r7, r0
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	220a      	movs	r2, #10
 8013a7e:	4658      	mov	r0, fp
 8013a80:	f000 f906 	bl	8013c90 <__multadd>
 8013a84:	4605      	mov	r5, r0
 8013a86:	e7f0      	b.n	8013a6a <_dtoa_r+0xaba>
 8013a88:	9b00      	ldr	r3, [sp, #0]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	bfcc      	ite	gt
 8013a8e:	461e      	movgt	r6, r3
 8013a90:	2601      	movle	r6, #1
 8013a92:	4456      	add	r6, sl
 8013a94:	2700      	movs	r7, #0
 8013a96:	4649      	mov	r1, r9
 8013a98:	2201      	movs	r2, #1
 8013a9a:	4658      	mov	r0, fp
 8013a9c:	f000 faa4 	bl	8013fe8 <__lshift>
 8013aa0:	4621      	mov	r1, r4
 8013aa2:	4681      	mov	r9, r0
 8013aa4:	f000 fb0c 	bl	80140c0 <__mcmp>
 8013aa8:	2800      	cmp	r0, #0
 8013aaa:	dcb0      	bgt.n	8013a0e <_dtoa_r+0xa5e>
 8013aac:	d102      	bne.n	8013ab4 <_dtoa_r+0xb04>
 8013aae:	f018 0f01 	tst.w	r8, #1
 8013ab2:	d1ac      	bne.n	8013a0e <_dtoa_r+0xa5e>
 8013ab4:	4633      	mov	r3, r6
 8013ab6:	461e      	mov	r6, r3
 8013ab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013abc:	2a30      	cmp	r2, #48	@ 0x30
 8013abe:	d0fa      	beq.n	8013ab6 <_dtoa_r+0xb06>
 8013ac0:	e5c2      	b.n	8013648 <_dtoa_r+0x698>
 8013ac2:	459a      	cmp	sl, r3
 8013ac4:	d1a4      	bne.n	8013a10 <_dtoa_r+0xa60>
 8013ac6:	9b04      	ldr	r3, [sp, #16]
 8013ac8:	3301      	adds	r3, #1
 8013aca:	9304      	str	r3, [sp, #16]
 8013acc:	2331      	movs	r3, #49	@ 0x31
 8013ace:	f88a 3000 	strb.w	r3, [sl]
 8013ad2:	e5b9      	b.n	8013648 <_dtoa_r+0x698>
 8013ad4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013ad6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8013b34 <_dtoa_r+0xb84>
 8013ada:	b11b      	cbz	r3, 8013ae4 <_dtoa_r+0xb34>
 8013adc:	f10a 0308 	add.w	r3, sl, #8
 8013ae0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013ae2:	6013      	str	r3, [r2, #0]
 8013ae4:	4650      	mov	r0, sl
 8013ae6:	b019      	add	sp, #100	@ 0x64
 8013ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013aee:	2b01      	cmp	r3, #1
 8013af0:	f77f ae37 	ble.w	8013762 <_dtoa_r+0x7b2>
 8013af4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013af6:	930a      	str	r3, [sp, #40]	@ 0x28
 8013af8:	2001      	movs	r0, #1
 8013afa:	e655      	b.n	80137a8 <_dtoa_r+0x7f8>
 8013afc:	9b00      	ldr	r3, [sp, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	f77f aed6 	ble.w	80138b0 <_dtoa_r+0x900>
 8013b04:	4656      	mov	r6, sl
 8013b06:	4621      	mov	r1, r4
 8013b08:	4648      	mov	r0, r9
 8013b0a:	f7ff f9c8 	bl	8012e9e <quorem>
 8013b0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013b12:	f806 8b01 	strb.w	r8, [r6], #1
 8013b16:	9b00      	ldr	r3, [sp, #0]
 8013b18:	eba6 020a 	sub.w	r2, r6, sl
 8013b1c:	4293      	cmp	r3, r2
 8013b1e:	ddb3      	ble.n	8013a88 <_dtoa_r+0xad8>
 8013b20:	4649      	mov	r1, r9
 8013b22:	2300      	movs	r3, #0
 8013b24:	220a      	movs	r2, #10
 8013b26:	4658      	mov	r0, fp
 8013b28:	f000 f8b2 	bl	8013c90 <__multadd>
 8013b2c:	4681      	mov	r9, r0
 8013b2e:	e7ea      	b.n	8013b06 <_dtoa_r+0xb56>
 8013b30:	080d2880 	.word	0x080d2880
 8013b34:	080d2804 	.word	0x080d2804

08013b38 <_free_r>:
 8013b38:	b538      	push	{r3, r4, r5, lr}
 8013b3a:	4605      	mov	r5, r0
 8013b3c:	2900      	cmp	r1, #0
 8013b3e:	d041      	beq.n	8013bc4 <_free_r+0x8c>
 8013b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b44:	1f0c      	subs	r4, r1, #4
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	bfb8      	it	lt
 8013b4a:	18e4      	addlt	r4, r4, r3
 8013b4c:	f7fe fa9c 	bl	8012088 <__malloc_lock>
 8013b50:	4a1d      	ldr	r2, [pc, #116]	@ (8013bc8 <_free_r+0x90>)
 8013b52:	6813      	ldr	r3, [r2, #0]
 8013b54:	b933      	cbnz	r3, 8013b64 <_free_r+0x2c>
 8013b56:	6063      	str	r3, [r4, #4]
 8013b58:	6014      	str	r4, [r2, #0]
 8013b5a:	4628      	mov	r0, r5
 8013b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b60:	f7fe ba98 	b.w	8012094 <__malloc_unlock>
 8013b64:	42a3      	cmp	r3, r4
 8013b66:	d908      	bls.n	8013b7a <_free_r+0x42>
 8013b68:	6820      	ldr	r0, [r4, #0]
 8013b6a:	1821      	adds	r1, r4, r0
 8013b6c:	428b      	cmp	r3, r1
 8013b6e:	bf01      	itttt	eq
 8013b70:	6819      	ldreq	r1, [r3, #0]
 8013b72:	685b      	ldreq	r3, [r3, #4]
 8013b74:	1809      	addeq	r1, r1, r0
 8013b76:	6021      	streq	r1, [r4, #0]
 8013b78:	e7ed      	b.n	8013b56 <_free_r+0x1e>
 8013b7a:	461a      	mov	r2, r3
 8013b7c:	685b      	ldr	r3, [r3, #4]
 8013b7e:	b10b      	cbz	r3, 8013b84 <_free_r+0x4c>
 8013b80:	42a3      	cmp	r3, r4
 8013b82:	d9fa      	bls.n	8013b7a <_free_r+0x42>
 8013b84:	6811      	ldr	r1, [r2, #0]
 8013b86:	1850      	adds	r0, r2, r1
 8013b88:	42a0      	cmp	r0, r4
 8013b8a:	d10b      	bne.n	8013ba4 <_free_r+0x6c>
 8013b8c:	6820      	ldr	r0, [r4, #0]
 8013b8e:	4401      	add	r1, r0
 8013b90:	1850      	adds	r0, r2, r1
 8013b92:	4283      	cmp	r3, r0
 8013b94:	6011      	str	r1, [r2, #0]
 8013b96:	d1e0      	bne.n	8013b5a <_free_r+0x22>
 8013b98:	6818      	ldr	r0, [r3, #0]
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	6053      	str	r3, [r2, #4]
 8013b9e:	4408      	add	r0, r1
 8013ba0:	6010      	str	r0, [r2, #0]
 8013ba2:	e7da      	b.n	8013b5a <_free_r+0x22>
 8013ba4:	d902      	bls.n	8013bac <_free_r+0x74>
 8013ba6:	230c      	movs	r3, #12
 8013ba8:	602b      	str	r3, [r5, #0]
 8013baa:	e7d6      	b.n	8013b5a <_free_r+0x22>
 8013bac:	6820      	ldr	r0, [r4, #0]
 8013bae:	1821      	adds	r1, r4, r0
 8013bb0:	428b      	cmp	r3, r1
 8013bb2:	bf04      	itt	eq
 8013bb4:	6819      	ldreq	r1, [r3, #0]
 8013bb6:	685b      	ldreq	r3, [r3, #4]
 8013bb8:	6063      	str	r3, [r4, #4]
 8013bba:	bf04      	itt	eq
 8013bbc:	1809      	addeq	r1, r1, r0
 8013bbe:	6021      	streq	r1, [r4, #0]
 8013bc0:	6054      	str	r4, [r2, #4]
 8013bc2:	e7ca      	b.n	8013b5a <_free_r+0x22>
 8013bc4:	bd38      	pop	{r3, r4, r5, pc}
 8013bc6:	bf00      	nop
 8013bc8:	2000dfd0 	.word	0x2000dfd0

08013bcc <_Balloc>:
 8013bcc:	b570      	push	{r4, r5, r6, lr}
 8013bce:	69c6      	ldr	r6, [r0, #28]
 8013bd0:	4604      	mov	r4, r0
 8013bd2:	460d      	mov	r5, r1
 8013bd4:	b976      	cbnz	r6, 8013bf4 <_Balloc+0x28>
 8013bd6:	2010      	movs	r0, #16
 8013bd8:	f7fe f9ac 	bl	8011f34 <malloc>
 8013bdc:	4602      	mov	r2, r0
 8013bde:	61e0      	str	r0, [r4, #28]
 8013be0:	b920      	cbnz	r0, 8013bec <_Balloc+0x20>
 8013be2:	4b18      	ldr	r3, [pc, #96]	@ (8013c44 <_Balloc+0x78>)
 8013be4:	4818      	ldr	r0, [pc, #96]	@ (8013c48 <_Balloc+0x7c>)
 8013be6:	216b      	movs	r1, #107	@ 0x6b
 8013be8:	f000 fde4 	bl	80147b4 <__assert_func>
 8013bec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013bf0:	6006      	str	r6, [r0, #0]
 8013bf2:	60c6      	str	r6, [r0, #12]
 8013bf4:	69e6      	ldr	r6, [r4, #28]
 8013bf6:	68f3      	ldr	r3, [r6, #12]
 8013bf8:	b183      	cbz	r3, 8013c1c <_Balloc+0x50>
 8013bfa:	69e3      	ldr	r3, [r4, #28]
 8013bfc:	68db      	ldr	r3, [r3, #12]
 8013bfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013c02:	b9b8      	cbnz	r0, 8013c34 <_Balloc+0x68>
 8013c04:	2101      	movs	r1, #1
 8013c06:	fa01 f605 	lsl.w	r6, r1, r5
 8013c0a:	1d72      	adds	r2, r6, #5
 8013c0c:	0092      	lsls	r2, r2, #2
 8013c0e:	4620      	mov	r0, r4
 8013c10:	f000 fdee 	bl	80147f0 <_calloc_r>
 8013c14:	b160      	cbz	r0, 8013c30 <_Balloc+0x64>
 8013c16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013c1a:	e00e      	b.n	8013c3a <_Balloc+0x6e>
 8013c1c:	2221      	movs	r2, #33	@ 0x21
 8013c1e:	2104      	movs	r1, #4
 8013c20:	4620      	mov	r0, r4
 8013c22:	f000 fde5 	bl	80147f0 <_calloc_r>
 8013c26:	69e3      	ldr	r3, [r4, #28]
 8013c28:	60f0      	str	r0, [r6, #12]
 8013c2a:	68db      	ldr	r3, [r3, #12]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d1e4      	bne.n	8013bfa <_Balloc+0x2e>
 8013c30:	2000      	movs	r0, #0
 8013c32:	bd70      	pop	{r4, r5, r6, pc}
 8013c34:	6802      	ldr	r2, [r0, #0]
 8013c36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013c40:	e7f7      	b.n	8013c32 <_Balloc+0x66>
 8013c42:	bf00      	nop
 8013c44:	080d2811 	.word	0x080d2811
 8013c48:	080d2891 	.word	0x080d2891

08013c4c <_Bfree>:
 8013c4c:	b570      	push	{r4, r5, r6, lr}
 8013c4e:	69c6      	ldr	r6, [r0, #28]
 8013c50:	4605      	mov	r5, r0
 8013c52:	460c      	mov	r4, r1
 8013c54:	b976      	cbnz	r6, 8013c74 <_Bfree+0x28>
 8013c56:	2010      	movs	r0, #16
 8013c58:	f7fe f96c 	bl	8011f34 <malloc>
 8013c5c:	4602      	mov	r2, r0
 8013c5e:	61e8      	str	r0, [r5, #28]
 8013c60:	b920      	cbnz	r0, 8013c6c <_Bfree+0x20>
 8013c62:	4b09      	ldr	r3, [pc, #36]	@ (8013c88 <_Bfree+0x3c>)
 8013c64:	4809      	ldr	r0, [pc, #36]	@ (8013c8c <_Bfree+0x40>)
 8013c66:	218f      	movs	r1, #143	@ 0x8f
 8013c68:	f000 fda4 	bl	80147b4 <__assert_func>
 8013c6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013c70:	6006      	str	r6, [r0, #0]
 8013c72:	60c6      	str	r6, [r0, #12]
 8013c74:	b13c      	cbz	r4, 8013c86 <_Bfree+0x3a>
 8013c76:	69eb      	ldr	r3, [r5, #28]
 8013c78:	6862      	ldr	r2, [r4, #4]
 8013c7a:	68db      	ldr	r3, [r3, #12]
 8013c7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013c80:	6021      	str	r1, [r4, #0]
 8013c82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013c86:	bd70      	pop	{r4, r5, r6, pc}
 8013c88:	080d2811 	.word	0x080d2811
 8013c8c:	080d2891 	.word	0x080d2891

08013c90 <__multadd>:
 8013c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c94:	690d      	ldr	r5, [r1, #16]
 8013c96:	4607      	mov	r7, r0
 8013c98:	460c      	mov	r4, r1
 8013c9a:	461e      	mov	r6, r3
 8013c9c:	f101 0c14 	add.w	ip, r1, #20
 8013ca0:	2000      	movs	r0, #0
 8013ca2:	f8dc 3000 	ldr.w	r3, [ip]
 8013ca6:	b299      	uxth	r1, r3
 8013ca8:	fb02 6101 	mla	r1, r2, r1, r6
 8013cac:	0c1e      	lsrs	r6, r3, #16
 8013cae:	0c0b      	lsrs	r3, r1, #16
 8013cb0:	fb02 3306 	mla	r3, r2, r6, r3
 8013cb4:	b289      	uxth	r1, r1
 8013cb6:	3001      	adds	r0, #1
 8013cb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013cbc:	4285      	cmp	r5, r0
 8013cbe:	f84c 1b04 	str.w	r1, [ip], #4
 8013cc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013cc6:	dcec      	bgt.n	8013ca2 <__multadd+0x12>
 8013cc8:	b30e      	cbz	r6, 8013d0e <__multadd+0x7e>
 8013cca:	68a3      	ldr	r3, [r4, #8]
 8013ccc:	42ab      	cmp	r3, r5
 8013cce:	dc19      	bgt.n	8013d04 <__multadd+0x74>
 8013cd0:	6861      	ldr	r1, [r4, #4]
 8013cd2:	4638      	mov	r0, r7
 8013cd4:	3101      	adds	r1, #1
 8013cd6:	f7ff ff79 	bl	8013bcc <_Balloc>
 8013cda:	4680      	mov	r8, r0
 8013cdc:	b928      	cbnz	r0, 8013cea <__multadd+0x5a>
 8013cde:	4602      	mov	r2, r0
 8013ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8013d14 <__multadd+0x84>)
 8013ce2:	480d      	ldr	r0, [pc, #52]	@ (8013d18 <__multadd+0x88>)
 8013ce4:	21ba      	movs	r1, #186	@ 0xba
 8013ce6:	f000 fd65 	bl	80147b4 <__assert_func>
 8013cea:	6922      	ldr	r2, [r4, #16]
 8013cec:	3202      	adds	r2, #2
 8013cee:	f104 010c 	add.w	r1, r4, #12
 8013cf2:	0092      	lsls	r2, r2, #2
 8013cf4:	300c      	adds	r0, #12
 8013cf6:	f7ff f8c4 	bl	8012e82 <memcpy>
 8013cfa:	4621      	mov	r1, r4
 8013cfc:	4638      	mov	r0, r7
 8013cfe:	f7ff ffa5 	bl	8013c4c <_Bfree>
 8013d02:	4644      	mov	r4, r8
 8013d04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013d08:	3501      	adds	r5, #1
 8013d0a:	615e      	str	r6, [r3, #20]
 8013d0c:	6125      	str	r5, [r4, #16]
 8013d0e:	4620      	mov	r0, r4
 8013d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d14:	080d2880 	.word	0x080d2880
 8013d18:	080d2891 	.word	0x080d2891

08013d1c <__hi0bits>:
 8013d1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013d20:	4603      	mov	r3, r0
 8013d22:	bf36      	itet	cc
 8013d24:	0403      	lslcc	r3, r0, #16
 8013d26:	2000      	movcs	r0, #0
 8013d28:	2010      	movcc	r0, #16
 8013d2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013d2e:	bf3c      	itt	cc
 8013d30:	021b      	lslcc	r3, r3, #8
 8013d32:	3008      	addcc	r0, #8
 8013d34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013d38:	bf3c      	itt	cc
 8013d3a:	011b      	lslcc	r3, r3, #4
 8013d3c:	3004      	addcc	r0, #4
 8013d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013d42:	bf3c      	itt	cc
 8013d44:	009b      	lslcc	r3, r3, #2
 8013d46:	3002      	addcc	r0, #2
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	db05      	blt.n	8013d58 <__hi0bits+0x3c>
 8013d4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013d50:	f100 0001 	add.w	r0, r0, #1
 8013d54:	bf08      	it	eq
 8013d56:	2020      	moveq	r0, #32
 8013d58:	4770      	bx	lr

08013d5a <__lo0bits>:
 8013d5a:	6803      	ldr	r3, [r0, #0]
 8013d5c:	4602      	mov	r2, r0
 8013d5e:	f013 0007 	ands.w	r0, r3, #7
 8013d62:	d00b      	beq.n	8013d7c <__lo0bits+0x22>
 8013d64:	07d9      	lsls	r1, r3, #31
 8013d66:	d421      	bmi.n	8013dac <__lo0bits+0x52>
 8013d68:	0798      	lsls	r0, r3, #30
 8013d6a:	bf49      	itett	mi
 8013d6c:	085b      	lsrmi	r3, r3, #1
 8013d6e:	089b      	lsrpl	r3, r3, #2
 8013d70:	2001      	movmi	r0, #1
 8013d72:	6013      	strmi	r3, [r2, #0]
 8013d74:	bf5c      	itt	pl
 8013d76:	6013      	strpl	r3, [r2, #0]
 8013d78:	2002      	movpl	r0, #2
 8013d7a:	4770      	bx	lr
 8013d7c:	b299      	uxth	r1, r3
 8013d7e:	b909      	cbnz	r1, 8013d84 <__lo0bits+0x2a>
 8013d80:	0c1b      	lsrs	r3, r3, #16
 8013d82:	2010      	movs	r0, #16
 8013d84:	b2d9      	uxtb	r1, r3
 8013d86:	b909      	cbnz	r1, 8013d8c <__lo0bits+0x32>
 8013d88:	3008      	adds	r0, #8
 8013d8a:	0a1b      	lsrs	r3, r3, #8
 8013d8c:	0719      	lsls	r1, r3, #28
 8013d8e:	bf04      	itt	eq
 8013d90:	091b      	lsreq	r3, r3, #4
 8013d92:	3004      	addeq	r0, #4
 8013d94:	0799      	lsls	r1, r3, #30
 8013d96:	bf04      	itt	eq
 8013d98:	089b      	lsreq	r3, r3, #2
 8013d9a:	3002      	addeq	r0, #2
 8013d9c:	07d9      	lsls	r1, r3, #31
 8013d9e:	d403      	bmi.n	8013da8 <__lo0bits+0x4e>
 8013da0:	085b      	lsrs	r3, r3, #1
 8013da2:	f100 0001 	add.w	r0, r0, #1
 8013da6:	d003      	beq.n	8013db0 <__lo0bits+0x56>
 8013da8:	6013      	str	r3, [r2, #0]
 8013daa:	4770      	bx	lr
 8013dac:	2000      	movs	r0, #0
 8013dae:	4770      	bx	lr
 8013db0:	2020      	movs	r0, #32
 8013db2:	4770      	bx	lr

08013db4 <__i2b>:
 8013db4:	b510      	push	{r4, lr}
 8013db6:	460c      	mov	r4, r1
 8013db8:	2101      	movs	r1, #1
 8013dba:	f7ff ff07 	bl	8013bcc <_Balloc>
 8013dbe:	4602      	mov	r2, r0
 8013dc0:	b928      	cbnz	r0, 8013dce <__i2b+0x1a>
 8013dc2:	4b05      	ldr	r3, [pc, #20]	@ (8013dd8 <__i2b+0x24>)
 8013dc4:	4805      	ldr	r0, [pc, #20]	@ (8013ddc <__i2b+0x28>)
 8013dc6:	f240 1145 	movw	r1, #325	@ 0x145
 8013dca:	f000 fcf3 	bl	80147b4 <__assert_func>
 8013dce:	2301      	movs	r3, #1
 8013dd0:	6144      	str	r4, [r0, #20]
 8013dd2:	6103      	str	r3, [r0, #16]
 8013dd4:	bd10      	pop	{r4, pc}
 8013dd6:	bf00      	nop
 8013dd8:	080d2880 	.word	0x080d2880
 8013ddc:	080d2891 	.word	0x080d2891

08013de0 <__multiply>:
 8013de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013de4:	4614      	mov	r4, r2
 8013de6:	690a      	ldr	r2, [r1, #16]
 8013de8:	6923      	ldr	r3, [r4, #16]
 8013dea:	429a      	cmp	r2, r3
 8013dec:	bfa8      	it	ge
 8013dee:	4623      	movge	r3, r4
 8013df0:	460f      	mov	r7, r1
 8013df2:	bfa4      	itt	ge
 8013df4:	460c      	movge	r4, r1
 8013df6:	461f      	movge	r7, r3
 8013df8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013dfc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013e00:	68a3      	ldr	r3, [r4, #8]
 8013e02:	6861      	ldr	r1, [r4, #4]
 8013e04:	eb0a 0609 	add.w	r6, sl, r9
 8013e08:	42b3      	cmp	r3, r6
 8013e0a:	b085      	sub	sp, #20
 8013e0c:	bfb8      	it	lt
 8013e0e:	3101      	addlt	r1, #1
 8013e10:	f7ff fedc 	bl	8013bcc <_Balloc>
 8013e14:	b930      	cbnz	r0, 8013e24 <__multiply+0x44>
 8013e16:	4602      	mov	r2, r0
 8013e18:	4b44      	ldr	r3, [pc, #272]	@ (8013f2c <__multiply+0x14c>)
 8013e1a:	4845      	ldr	r0, [pc, #276]	@ (8013f30 <__multiply+0x150>)
 8013e1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013e20:	f000 fcc8 	bl	80147b4 <__assert_func>
 8013e24:	f100 0514 	add.w	r5, r0, #20
 8013e28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013e2c:	462b      	mov	r3, r5
 8013e2e:	2200      	movs	r2, #0
 8013e30:	4543      	cmp	r3, r8
 8013e32:	d321      	bcc.n	8013e78 <__multiply+0x98>
 8013e34:	f107 0114 	add.w	r1, r7, #20
 8013e38:	f104 0214 	add.w	r2, r4, #20
 8013e3c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013e40:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013e44:	9302      	str	r3, [sp, #8]
 8013e46:	1b13      	subs	r3, r2, r4
 8013e48:	3b15      	subs	r3, #21
 8013e4a:	f023 0303 	bic.w	r3, r3, #3
 8013e4e:	3304      	adds	r3, #4
 8013e50:	f104 0715 	add.w	r7, r4, #21
 8013e54:	42ba      	cmp	r2, r7
 8013e56:	bf38      	it	cc
 8013e58:	2304      	movcc	r3, #4
 8013e5a:	9301      	str	r3, [sp, #4]
 8013e5c:	9b02      	ldr	r3, [sp, #8]
 8013e5e:	9103      	str	r1, [sp, #12]
 8013e60:	428b      	cmp	r3, r1
 8013e62:	d80c      	bhi.n	8013e7e <__multiply+0x9e>
 8013e64:	2e00      	cmp	r6, #0
 8013e66:	dd03      	ble.n	8013e70 <__multiply+0x90>
 8013e68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d05b      	beq.n	8013f28 <__multiply+0x148>
 8013e70:	6106      	str	r6, [r0, #16]
 8013e72:	b005      	add	sp, #20
 8013e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e78:	f843 2b04 	str.w	r2, [r3], #4
 8013e7c:	e7d8      	b.n	8013e30 <__multiply+0x50>
 8013e7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8013e82:	f1ba 0f00 	cmp.w	sl, #0
 8013e86:	d024      	beq.n	8013ed2 <__multiply+0xf2>
 8013e88:	f104 0e14 	add.w	lr, r4, #20
 8013e8c:	46a9      	mov	r9, r5
 8013e8e:	f04f 0c00 	mov.w	ip, #0
 8013e92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013e96:	f8d9 3000 	ldr.w	r3, [r9]
 8013e9a:	fa1f fb87 	uxth.w	fp, r7
 8013e9e:	b29b      	uxth	r3, r3
 8013ea0:	fb0a 330b 	mla	r3, sl, fp, r3
 8013ea4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013ea8:	f8d9 7000 	ldr.w	r7, [r9]
 8013eac:	4463      	add	r3, ip
 8013eae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013eb2:	fb0a c70b 	mla	r7, sl, fp, ip
 8013eb6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013eba:	b29b      	uxth	r3, r3
 8013ebc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013ec0:	4572      	cmp	r2, lr
 8013ec2:	f849 3b04 	str.w	r3, [r9], #4
 8013ec6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013eca:	d8e2      	bhi.n	8013e92 <__multiply+0xb2>
 8013ecc:	9b01      	ldr	r3, [sp, #4]
 8013ece:	f845 c003 	str.w	ip, [r5, r3]
 8013ed2:	9b03      	ldr	r3, [sp, #12]
 8013ed4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013ed8:	3104      	adds	r1, #4
 8013eda:	f1b9 0f00 	cmp.w	r9, #0
 8013ede:	d021      	beq.n	8013f24 <__multiply+0x144>
 8013ee0:	682b      	ldr	r3, [r5, #0]
 8013ee2:	f104 0c14 	add.w	ip, r4, #20
 8013ee6:	46ae      	mov	lr, r5
 8013ee8:	f04f 0a00 	mov.w	sl, #0
 8013eec:	f8bc b000 	ldrh.w	fp, [ip]
 8013ef0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013ef4:	fb09 770b 	mla	r7, r9, fp, r7
 8013ef8:	4457      	add	r7, sl
 8013efa:	b29b      	uxth	r3, r3
 8013efc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013f00:	f84e 3b04 	str.w	r3, [lr], #4
 8013f04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013f08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013f0c:	f8be 3000 	ldrh.w	r3, [lr]
 8013f10:	fb09 330a 	mla	r3, r9, sl, r3
 8013f14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013f18:	4562      	cmp	r2, ip
 8013f1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013f1e:	d8e5      	bhi.n	8013eec <__multiply+0x10c>
 8013f20:	9f01      	ldr	r7, [sp, #4]
 8013f22:	51eb      	str	r3, [r5, r7]
 8013f24:	3504      	adds	r5, #4
 8013f26:	e799      	b.n	8013e5c <__multiply+0x7c>
 8013f28:	3e01      	subs	r6, #1
 8013f2a:	e79b      	b.n	8013e64 <__multiply+0x84>
 8013f2c:	080d2880 	.word	0x080d2880
 8013f30:	080d2891 	.word	0x080d2891

08013f34 <__pow5mult>:
 8013f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f38:	4615      	mov	r5, r2
 8013f3a:	f012 0203 	ands.w	r2, r2, #3
 8013f3e:	4607      	mov	r7, r0
 8013f40:	460e      	mov	r6, r1
 8013f42:	d007      	beq.n	8013f54 <__pow5mult+0x20>
 8013f44:	4c25      	ldr	r4, [pc, #148]	@ (8013fdc <__pow5mult+0xa8>)
 8013f46:	3a01      	subs	r2, #1
 8013f48:	2300      	movs	r3, #0
 8013f4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013f4e:	f7ff fe9f 	bl	8013c90 <__multadd>
 8013f52:	4606      	mov	r6, r0
 8013f54:	10ad      	asrs	r5, r5, #2
 8013f56:	d03d      	beq.n	8013fd4 <__pow5mult+0xa0>
 8013f58:	69fc      	ldr	r4, [r7, #28]
 8013f5a:	b97c      	cbnz	r4, 8013f7c <__pow5mult+0x48>
 8013f5c:	2010      	movs	r0, #16
 8013f5e:	f7fd ffe9 	bl	8011f34 <malloc>
 8013f62:	4602      	mov	r2, r0
 8013f64:	61f8      	str	r0, [r7, #28]
 8013f66:	b928      	cbnz	r0, 8013f74 <__pow5mult+0x40>
 8013f68:	4b1d      	ldr	r3, [pc, #116]	@ (8013fe0 <__pow5mult+0xac>)
 8013f6a:	481e      	ldr	r0, [pc, #120]	@ (8013fe4 <__pow5mult+0xb0>)
 8013f6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013f70:	f000 fc20 	bl	80147b4 <__assert_func>
 8013f74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013f78:	6004      	str	r4, [r0, #0]
 8013f7a:	60c4      	str	r4, [r0, #12]
 8013f7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013f80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013f84:	b94c      	cbnz	r4, 8013f9a <__pow5mult+0x66>
 8013f86:	f240 2171 	movw	r1, #625	@ 0x271
 8013f8a:	4638      	mov	r0, r7
 8013f8c:	f7ff ff12 	bl	8013db4 <__i2b>
 8013f90:	2300      	movs	r3, #0
 8013f92:	f8c8 0008 	str.w	r0, [r8, #8]
 8013f96:	4604      	mov	r4, r0
 8013f98:	6003      	str	r3, [r0, #0]
 8013f9a:	f04f 0900 	mov.w	r9, #0
 8013f9e:	07eb      	lsls	r3, r5, #31
 8013fa0:	d50a      	bpl.n	8013fb8 <__pow5mult+0x84>
 8013fa2:	4631      	mov	r1, r6
 8013fa4:	4622      	mov	r2, r4
 8013fa6:	4638      	mov	r0, r7
 8013fa8:	f7ff ff1a 	bl	8013de0 <__multiply>
 8013fac:	4631      	mov	r1, r6
 8013fae:	4680      	mov	r8, r0
 8013fb0:	4638      	mov	r0, r7
 8013fb2:	f7ff fe4b 	bl	8013c4c <_Bfree>
 8013fb6:	4646      	mov	r6, r8
 8013fb8:	106d      	asrs	r5, r5, #1
 8013fba:	d00b      	beq.n	8013fd4 <__pow5mult+0xa0>
 8013fbc:	6820      	ldr	r0, [r4, #0]
 8013fbe:	b938      	cbnz	r0, 8013fd0 <__pow5mult+0x9c>
 8013fc0:	4622      	mov	r2, r4
 8013fc2:	4621      	mov	r1, r4
 8013fc4:	4638      	mov	r0, r7
 8013fc6:	f7ff ff0b 	bl	8013de0 <__multiply>
 8013fca:	6020      	str	r0, [r4, #0]
 8013fcc:	f8c0 9000 	str.w	r9, [r0]
 8013fd0:	4604      	mov	r4, r0
 8013fd2:	e7e4      	b.n	8013f9e <__pow5mult+0x6a>
 8013fd4:	4630      	mov	r0, r6
 8013fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fda:	bf00      	nop
 8013fdc:	080d28ec 	.word	0x080d28ec
 8013fe0:	080d2811 	.word	0x080d2811
 8013fe4:	080d2891 	.word	0x080d2891

08013fe8 <__lshift>:
 8013fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fec:	460c      	mov	r4, r1
 8013fee:	6849      	ldr	r1, [r1, #4]
 8013ff0:	6923      	ldr	r3, [r4, #16]
 8013ff2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013ff6:	68a3      	ldr	r3, [r4, #8]
 8013ff8:	4607      	mov	r7, r0
 8013ffa:	4691      	mov	r9, r2
 8013ffc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014000:	f108 0601 	add.w	r6, r8, #1
 8014004:	42b3      	cmp	r3, r6
 8014006:	db0b      	blt.n	8014020 <__lshift+0x38>
 8014008:	4638      	mov	r0, r7
 801400a:	f7ff fddf 	bl	8013bcc <_Balloc>
 801400e:	4605      	mov	r5, r0
 8014010:	b948      	cbnz	r0, 8014026 <__lshift+0x3e>
 8014012:	4602      	mov	r2, r0
 8014014:	4b28      	ldr	r3, [pc, #160]	@ (80140b8 <__lshift+0xd0>)
 8014016:	4829      	ldr	r0, [pc, #164]	@ (80140bc <__lshift+0xd4>)
 8014018:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801401c:	f000 fbca 	bl	80147b4 <__assert_func>
 8014020:	3101      	adds	r1, #1
 8014022:	005b      	lsls	r3, r3, #1
 8014024:	e7ee      	b.n	8014004 <__lshift+0x1c>
 8014026:	2300      	movs	r3, #0
 8014028:	f100 0114 	add.w	r1, r0, #20
 801402c:	f100 0210 	add.w	r2, r0, #16
 8014030:	4618      	mov	r0, r3
 8014032:	4553      	cmp	r3, sl
 8014034:	db33      	blt.n	801409e <__lshift+0xb6>
 8014036:	6920      	ldr	r0, [r4, #16]
 8014038:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801403c:	f104 0314 	add.w	r3, r4, #20
 8014040:	f019 091f 	ands.w	r9, r9, #31
 8014044:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014048:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801404c:	d02b      	beq.n	80140a6 <__lshift+0xbe>
 801404e:	f1c9 0e20 	rsb	lr, r9, #32
 8014052:	468a      	mov	sl, r1
 8014054:	2200      	movs	r2, #0
 8014056:	6818      	ldr	r0, [r3, #0]
 8014058:	fa00 f009 	lsl.w	r0, r0, r9
 801405c:	4310      	orrs	r0, r2
 801405e:	f84a 0b04 	str.w	r0, [sl], #4
 8014062:	f853 2b04 	ldr.w	r2, [r3], #4
 8014066:	459c      	cmp	ip, r3
 8014068:	fa22 f20e 	lsr.w	r2, r2, lr
 801406c:	d8f3      	bhi.n	8014056 <__lshift+0x6e>
 801406e:	ebac 0304 	sub.w	r3, ip, r4
 8014072:	3b15      	subs	r3, #21
 8014074:	f023 0303 	bic.w	r3, r3, #3
 8014078:	3304      	adds	r3, #4
 801407a:	f104 0015 	add.w	r0, r4, #21
 801407e:	4584      	cmp	ip, r0
 8014080:	bf38      	it	cc
 8014082:	2304      	movcc	r3, #4
 8014084:	50ca      	str	r2, [r1, r3]
 8014086:	b10a      	cbz	r2, 801408c <__lshift+0xa4>
 8014088:	f108 0602 	add.w	r6, r8, #2
 801408c:	3e01      	subs	r6, #1
 801408e:	4638      	mov	r0, r7
 8014090:	612e      	str	r6, [r5, #16]
 8014092:	4621      	mov	r1, r4
 8014094:	f7ff fdda 	bl	8013c4c <_Bfree>
 8014098:	4628      	mov	r0, r5
 801409a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801409e:	f842 0f04 	str.w	r0, [r2, #4]!
 80140a2:	3301      	adds	r3, #1
 80140a4:	e7c5      	b.n	8014032 <__lshift+0x4a>
 80140a6:	3904      	subs	r1, #4
 80140a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80140ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80140b0:	459c      	cmp	ip, r3
 80140b2:	d8f9      	bhi.n	80140a8 <__lshift+0xc0>
 80140b4:	e7ea      	b.n	801408c <__lshift+0xa4>
 80140b6:	bf00      	nop
 80140b8:	080d2880 	.word	0x080d2880
 80140bc:	080d2891 	.word	0x080d2891

080140c0 <__mcmp>:
 80140c0:	690a      	ldr	r2, [r1, #16]
 80140c2:	4603      	mov	r3, r0
 80140c4:	6900      	ldr	r0, [r0, #16]
 80140c6:	1a80      	subs	r0, r0, r2
 80140c8:	b530      	push	{r4, r5, lr}
 80140ca:	d10e      	bne.n	80140ea <__mcmp+0x2a>
 80140cc:	3314      	adds	r3, #20
 80140ce:	3114      	adds	r1, #20
 80140d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80140d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80140d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80140dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80140e0:	4295      	cmp	r5, r2
 80140e2:	d003      	beq.n	80140ec <__mcmp+0x2c>
 80140e4:	d205      	bcs.n	80140f2 <__mcmp+0x32>
 80140e6:	f04f 30ff 	mov.w	r0, #4294967295
 80140ea:	bd30      	pop	{r4, r5, pc}
 80140ec:	42a3      	cmp	r3, r4
 80140ee:	d3f3      	bcc.n	80140d8 <__mcmp+0x18>
 80140f0:	e7fb      	b.n	80140ea <__mcmp+0x2a>
 80140f2:	2001      	movs	r0, #1
 80140f4:	e7f9      	b.n	80140ea <__mcmp+0x2a>
	...

080140f8 <__mdiff>:
 80140f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140fc:	4689      	mov	r9, r1
 80140fe:	4606      	mov	r6, r0
 8014100:	4611      	mov	r1, r2
 8014102:	4648      	mov	r0, r9
 8014104:	4614      	mov	r4, r2
 8014106:	f7ff ffdb 	bl	80140c0 <__mcmp>
 801410a:	1e05      	subs	r5, r0, #0
 801410c:	d112      	bne.n	8014134 <__mdiff+0x3c>
 801410e:	4629      	mov	r1, r5
 8014110:	4630      	mov	r0, r6
 8014112:	f7ff fd5b 	bl	8013bcc <_Balloc>
 8014116:	4602      	mov	r2, r0
 8014118:	b928      	cbnz	r0, 8014126 <__mdiff+0x2e>
 801411a:	4b3f      	ldr	r3, [pc, #252]	@ (8014218 <__mdiff+0x120>)
 801411c:	f240 2137 	movw	r1, #567	@ 0x237
 8014120:	483e      	ldr	r0, [pc, #248]	@ (801421c <__mdiff+0x124>)
 8014122:	f000 fb47 	bl	80147b4 <__assert_func>
 8014126:	2301      	movs	r3, #1
 8014128:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801412c:	4610      	mov	r0, r2
 801412e:	b003      	add	sp, #12
 8014130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014134:	bfbc      	itt	lt
 8014136:	464b      	movlt	r3, r9
 8014138:	46a1      	movlt	r9, r4
 801413a:	4630      	mov	r0, r6
 801413c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014140:	bfba      	itte	lt
 8014142:	461c      	movlt	r4, r3
 8014144:	2501      	movlt	r5, #1
 8014146:	2500      	movge	r5, #0
 8014148:	f7ff fd40 	bl	8013bcc <_Balloc>
 801414c:	4602      	mov	r2, r0
 801414e:	b918      	cbnz	r0, 8014158 <__mdiff+0x60>
 8014150:	4b31      	ldr	r3, [pc, #196]	@ (8014218 <__mdiff+0x120>)
 8014152:	f240 2145 	movw	r1, #581	@ 0x245
 8014156:	e7e3      	b.n	8014120 <__mdiff+0x28>
 8014158:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801415c:	6926      	ldr	r6, [r4, #16]
 801415e:	60c5      	str	r5, [r0, #12]
 8014160:	f109 0310 	add.w	r3, r9, #16
 8014164:	f109 0514 	add.w	r5, r9, #20
 8014168:	f104 0e14 	add.w	lr, r4, #20
 801416c:	f100 0b14 	add.w	fp, r0, #20
 8014170:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014174:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014178:	9301      	str	r3, [sp, #4]
 801417a:	46d9      	mov	r9, fp
 801417c:	f04f 0c00 	mov.w	ip, #0
 8014180:	9b01      	ldr	r3, [sp, #4]
 8014182:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014186:	f853 af04 	ldr.w	sl, [r3, #4]!
 801418a:	9301      	str	r3, [sp, #4]
 801418c:	fa1f f38a 	uxth.w	r3, sl
 8014190:	4619      	mov	r1, r3
 8014192:	b283      	uxth	r3, r0
 8014194:	1acb      	subs	r3, r1, r3
 8014196:	0c00      	lsrs	r0, r0, #16
 8014198:	4463      	add	r3, ip
 801419a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801419e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80141a2:	b29b      	uxth	r3, r3
 80141a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80141a8:	4576      	cmp	r6, lr
 80141aa:	f849 3b04 	str.w	r3, [r9], #4
 80141ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80141b2:	d8e5      	bhi.n	8014180 <__mdiff+0x88>
 80141b4:	1b33      	subs	r3, r6, r4
 80141b6:	3b15      	subs	r3, #21
 80141b8:	f023 0303 	bic.w	r3, r3, #3
 80141bc:	3415      	adds	r4, #21
 80141be:	3304      	adds	r3, #4
 80141c0:	42a6      	cmp	r6, r4
 80141c2:	bf38      	it	cc
 80141c4:	2304      	movcc	r3, #4
 80141c6:	441d      	add	r5, r3
 80141c8:	445b      	add	r3, fp
 80141ca:	461e      	mov	r6, r3
 80141cc:	462c      	mov	r4, r5
 80141ce:	4544      	cmp	r4, r8
 80141d0:	d30e      	bcc.n	80141f0 <__mdiff+0xf8>
 80141d2:	f108 0103 	add.w	r1, r8, #3
 80141d6:	1b49      	subs	r1, r1, r5
 80141d8:	f021 0103 	bic.w	r1, r1, #3
 80141dc:	3d03      	subs	r5, #3
 80141de:	45a8      	cmp	r8, r5
 80141e0:	bf38      	it	cc
 80141e2:	2100      	movcc	r1, #0
 80141e4:	440b      	add	r3, r1
 80141e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80141ea:	b191      	cbz	r1, 8014212 <__mdiff+0x11a>
 80141ec:	6117      	str	r7, [r2, #16]
 80141ee:	e79d      	b.n	801412c <__mdiff+0x34>
 80141f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80141f4:	46e6      	mov	lr, ip
 80141f6:	0c08      	lsrs	r0, r1, #16
 80141f8:	fa1c fc81 	uxtah	ip, ip, r1
 80141fc:	4471      	add	r1, lr
 80141fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014202:	b289      	uxth	r1, r1
 8014204:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014208:	f846 1b04 	str.w	r1, [r6], #4
 801420c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014210:	e7dd      	b.n	80141ce <__mdiff+0xd6>
 8014212:	3f01      	subs	r7, #1
 8014214:	e7e7      	b.n	80141e6 <__mdiff+0xee>
 8014216:	bf00      	nop
 8014218:	080d2880 	.word	0x080d2880
 801421c:	080d2891 	.word	0x080d2891

08014220 <__d2b>:
 8014220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014224:	460f      	mov	r7, r1
 8014226:	2101      	movs	r1, #1
 8014228:	ec59 8b10 	vmov	r8, r9, d0
 801422c:	4616      	mov	r6, r2
 801422e:	f7ff fccd 	bl	8013bcc <_Balloc>
 8014232:	4604      	mov	r4, r0
 8014234:	b930      	cbnz	r0, 8014244 <__d2b+0x24>
 8014236:	4602      	mov	r2, r0
 8014238:	4b23      	ldr	r3, [pc, #140]	@ (80142c8 <__d2b+0xa8>)
 801423a:	4824      	ldr	r0, [pc, #144]	@ (80142cc <__d2b+0xac>)
 801423c:	f240 310f 	movw	r1, #783	@ 0x30f
 8014240:	f000 fab8 	bl	80147b4 <__assert_func>
 8014244:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014248:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801424c:	b10d      	cbz	r5, 8014252 <__d2b+0x32>
 801424e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014252:	9301      	str	r3, [sp, #4]
 8014254:	f1b8 0300 	subs.w	r3, r8, #0
 8014258:	d023      	beq.n	80142a2 <__d2b+0x82>
 801425a:	4668      	mov	r0, sp
 801425c:	9300      	str	r3, [sp, #0]
 801425e:	f7ff fd7c 	bl	8013d5a <__lo0bits>
 8014262:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014266:	b1d0      	cbz	r0, 801429e <__d2b+0x7e>
 8014268:	f1c0 0320 	rsb	r3, r0, #32
 801426c:	fa02 f303 	lsl.w	r3, r2, r3
 8014270:	430b      	orrs	r3, r1
 8014272:	40c2      	lsrs	r2, r0
 8014274:	6163      	str	r3, [r4, #20]
 8014276:	9201      	str	r2, [sp, #4]
 8014278:	9b01      	ldr	r3, [sp, #4]
 801427a:	61a3      	str	r3, [r4, #24]
 801427c:	2b00      	cmp	r3, #0
 801427e:	bf0c      	ite	eq
 8014280:	2201      	moveq	r2, #1
 8014282:	2202      	movne	r2, #2
 8014284:	6122      	str	r2, [r4, #16]
 8014286:	b1a5      	cbz	r5, 80142b2 <__d2b+0x92>
 8014288:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801428c:	4405      	add	r5, r0
 801428e:	603d      	str	r5, [r7, #0]
 8014290:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014294:	6030      	str	r0, [r6, #0]
 8014296:	4620      	mov	r0, r4
 8014298:	b003      	add	sp, #12
 801429a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801429e:	6161      	str	r1, [r4, #20]
 80142a0:	e7ea      	b.n	8014278 <__d2b+0x58>
 80142a2:	a801      	add	r0, sp, #4
 80142a4:	f7ff fd59 	bl	8013d5a <__lo0bits>
 80142a8:	9b01      	ldr	r3, [sp, #4]
 80142aa:	6163      	str	r3, [r4, #20]
 80142ac:	3020      	adds	r0, #32
 80142ae:	2201      	movs	r2, #1
 80142b0:	e7e8      	b.n	8014284 <__d2b+0x64>
 80142b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80142b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80142ba:	6038      	str	r0, [r7, #0]
 80142bc:	6918      	ldr	r0, [r3, #16]
 80142be:	f7ff fd2d 	bl	8013d1c <__hi0bits>
 80142c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80142c6:	e7e5      	b.n	8014294 <__d2b+0x74>
 80142c8:	080d2880 	.word	0x080d2880
 80142cc:	080d2891 	.word	0x080d2891

080142d0 <__sfputc_r>:
 80142d0:	6893      	ldr	r3, [r2, #8]
 80142d2:	3b01      	subs	r3, #1
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	b410      	push	{r4}
 80142d8:	6093      	str	r3, [r2, #8]
 80142da:	da08      	bge.n	80142ee <__sfputc_r+0x1e>
 80142dc:	6994      	ldr	r4, [r2, #24]
 80142de:	42a3      	cmp	r3, r4
 80142e0:	db01      	blt.n	80142e6 <__sfputc_r+0x16>
 80142e2:	290a      	cmp	r1, #10
 80142e4:	d103      	bne.n	80142ee <__sfputc_r+0x1e>
 80142e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142ea:	f7fe bca6 	b.w	8012c3a <__swbuf_r>
 80142ee:	6813      	ldr	r3, [r2, #0]
 80142f0:	1c58      	adds	r0, r3, #1
 80142f2:	6010      	str	r0, [r2, #0]
 80142f4:	7019      	strb	r1, [r3, #0]
 80142f6:	4608      	mov	r0, r1
 80142f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142fc:	4770      	bx	lr

080142fe <__sfputs_r>:
 80142fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014300:	4606      	mov	r6, r0
 8014302:	460f      	mov	r7, r1
 8014304:	4614      	mov	r4, r2
 8014306:	18d5      	adds	r5, r2, r3
 8014308:	42ac      	cmp	r4, r5
 801430a:	d101      	bne.n	8014310 <__sfputs_r+0x12>
 801430c:	2000      	movs	r0, #0
 801430e:	e007      	b.n	8014320 <__sfputs_r+0x22>
 8014310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014314:	463a      	mov	r2, r7
 8014316:	4630      	mov	r0, r6
 8014318:	f7ff ffda 	bl	80142d0 <__sfputc_r>
 801431c:	1c43      	adds	r3, r0, #1
 801431e:	d1f3      	bne.n	8014308 <__sfputs_r+0xa>
 8014320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014324 <_vfiprintf_r>:
 8014324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014328:	460d      	mov	r5, r1
 801432a:	b09d      	sub	sp, #116	@ 0x74
 801432c:	4614      	mov	r4, r2
 801432e:	4698      	mov	r8, r3
 8014330:	4606      	mov	r6, r0
 8014332:	b118      	cbz	r0, 801433c <_vfiprintf_r+0x18>
 8014334:	6a03      	ldr	r3, [r0, #32]
 8014336:	b90b      	cbnz	r3, 801433c <_vfiprintf_r+0x18>
 8014338:	f7fe fb96 	bl	8012a68 <__sinit>
 801433c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801433e:	07d9      	lsls	r1, r3, #31
 8014340:	d405      	bmi.n	801434e <_vfiprintf_r+0x2a>
 8014342:	89ab      	ldrh	r3, [r5, #12]
 8014344:	059a      	lsls	r2, r3, #22
 8014346:	d402      	bmi.n	801434e <_vfiprintf_r+0x2a>
 8014348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801434a:	f7fe fd98 	bl	8012e7e <__retarget_lock_acquire_recursive>
 801434e:	89ab      	ldrh	r3, [r5, #12]
 8014350:	071b      	lsls	r3, r3, #28
 8014352:	d501      	bpl.n	8014358 <_vfiprintf_r+0x34>
 8014354:	692b      	ldr	r3, [r5, #16]
 8014356:	b99b      	cbnz	r3, 8014380 <_vfiprintf_r+0x5c>
 8014358:	4629      	mov	r1, r5
 801435a:	4630      	mov	r0, r6
 801435c:	f7fe fcac 	bl	8012cb8 <__swsetup_r>
 8014360:	b170      	cbz	r0, 8014380 <_vfiprintf_r+0x5c>
 8014362:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014364:	07dc      	lsls	r4, r3, #31
 8014366:	d504      	bpl.n	8014372 <_vfiprintf_r+0x4e>
 8014368:	f04f 30ff 	mov.w	r0, #4294967295
 801436c:	b01d      	add	sp, #116	@ 0x74
 801436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014372:	89ab      	ldrh	r3, [r5, #12]
 8014374:	0598      	lsls	r0, r3, #22
 8014376:	d4f7      	bmi.n	8014368 <_vfiprintf_r+0x44>
 8014378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801437a:	f7fe fd81 	bl	8012e80 <__retarget_lock_release_recursive>
 801437e:	e7f3      	b.n	8014368 <_vfiprintf_r+0x44>
 8014380:	2300      	movs	r3, #0
 8014382:	9309      	str	r3, [sp, #36]	@ 0x24
 8014384:	2320      	movs	r3, #32
 8014386:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801438a:	f8cd 800c 	str.w	r8, [sp, #12]
 801438e:	2330      	movs	r3, #48	@ 0x30
 8014390:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014540 <_vfiprintf_r+0x21c>
 8014394:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014398:	f04f 0901 	mov.w	r9, #1
 801439c:	4623      	mov	r3, r4
 801439e:	469a      	mov	sl, r3
 80143a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143a4:	b10a      	cbz	r2, 80143aa <_vfiprintf_r+0x86>
 80143a6:	2a25      	cmp	r2, #37	@ 0x25
 80143a8:	d1f9      	bne.n	801439e <_vfiprintf_r+0x7a>
 80143aa:	ebba 0b04 	subs.w	fp, sl, r4
 80143ae:	d00b      	beq.n	80143c8 <_vfiprintf_r+0xa4>
 80143b0:	465b      	mov	r3, fp
 80143b2:	4622      	mov	r2, r4
 80143b4:	4629      	mov	r1, r5
 80143b6:	4630      	mov	r0, r6
 80143b8:	f7ff ffa1 	bl	80142fe <__sfputs_r>
 80143bc:	3001      	adds	r0, #1
 80143be:	f000 80a7 	beq.w	8014510 <_vfiprintf_r+0x1ec>
 80143c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80143c4:	445a      	add	r2, fp
 80143c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80143c8:	f89a 3000 	ldrb.w	r3, [sl]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	f000 809f 	beq.w	8014510 <_vfiprintf_r+0x1ec>
 80143d2:	2300      	movs	r3, #0
 80143d4:	f04f 32ff 	mov.w	r2, #4294967295
 80143d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143dc:	f10a 0a01 	add.w	sl, sl, #1
 80143e0:	9304      	str	r3, [sp, #16]
 80143e2:	9307      	str	r3, [sp, #28]
 80143e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80143e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80143ea:	4654      	mov	r4, sl
 80143ec:	2205      	movs	r2, #5
 80143ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143f2:	4853      	ldr	r0, [pc, #332]	@ (8014540 <_vfiprintf_r+0x21c>)
 80143f4:	f7eb ff0c 	bl	8000210 <memchr>
 80143f8:	9a04      	ldr	r2, [sp, #16]
 80143fa:	b9d8      	cbnz	r0, 8014434 <_vfiprintf_r+0x110>
 80143fc:	06d1      	lsls	r1, r2, #27
 80143fe:	bf44      	itt	mi
 8014400:	2320      	movmi	r3, #32
 8014402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014406:	0713      	lsls	r3, r2, #28
 8014408:	bf44      	itt	mi
 801440a:	232b      	movmi	r3, #43	@ 0x2b
 801440c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014410:	f89a 3000 	ldrb.w	r3, [sl]
 8014414:	2b2a      	cmp	r3, #42	@ 0x2a
 8014416:	d015      	beq.n	8014444 <_vfiprintf_r+0x120>
 8014418:	9a07      	ldr	r2, [sp, #28]
 801441a:	4654      	mov	r4, sl
 801441c:	2000      	movs	r0, #0
 801441e:	f04f 0c0a 	mov.w	ip, #10
 8014422:	4621      	mov	r1, r4
 8014424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014428:	3b30      	subs	r3, #48	@ 0x30
 801442a:	2b09      	cmp	r3, #9
 801442c:	d94b      	bls.n	80144c6 <_vfiprintf_r+0x1a2>
 801442e:	b1b0      	cbz	r0, 801445e <_vfiprintf_r+0x13a>
 8014430:	9207      	str	r2, [sp, #28]
 8014432:	e014      	b.n	801445e <_vfiprintf_r+0x13a>
 8014434:	eba0 0308 	sub.w	r3, r0, r8
 8014438:	fa09 f303 	lsl.w	r3, r9, r3
 801443c:	4313      	orrs	r3, r2
 801443e:	9304      	str	r3, [sp, #16]
 8014440:	46a2      	mov	sl, r4
 8014442:	e7d2      	b.n	80143ea <_vfiprintf_r+0xc6>
 8014444:	9b03      	ldr	r3, [sp, #12]
 8014446:	1d19      	adds	r1, r3, #4
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	9103      	str	r1, [sp, #12]
 801444c:	2b00      	cmp	r3, #0
 801444e:	bfbb      	ittet	lt
 8014450:	425b      	neglt	r3, r3
 8014452:	f042 0202 	orrlt.w	r2, r2, #2
 8014456:	9307      	strge	r3, [sp, #28]
 8014458:	9307      	strlt	r3, [sp, #28]
 801445a:	bfb8      	it	lt
 801445c:	9204      	strlt	r2, [sp, #16]
 801445e:	7823      	ldrb	r3, [r4, #0]
 8014460:	2b2e      	cmp	r3, #46	@ 0x2e
 8014462:	d10a      	bne.n	801447a <_vfiprintf_r+0x156>
 8014464:	7863      	ldrb	r3, [r4, #1]
 8014466:	2b2a      	cmp	r3, #42	@ 0x2a
 8014468:	d132      	bne.n	80144d0 <_vfiprintf_r+0x1ac>
 801446a:	9b03      	ldr	r3, [sp, #12]
 801446c:	1d1a      	adds	r2, r3, #4
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	9203      	str	r2, [sp, #12]
 8014472:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014476:	3402      	adds	r4, #2
 8014478:	9305      	str	r3, [sp, #20]
 801447a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014550 <_vfiprintf_r+0x22c>
 801447e:	7821      	ldrb	r1, [r4, #0]
 8014480:	2203      	movs	r2, #3
 8014482:	4650      	mov	r0, sl
 8014484:	f7eb fec4 	bl	8000210 <memchr>
 8014488:	b138      	cbz	r0, 801449a <_vfiprintf_r+0x176>
 801448a:	9b04      	ldr	r3, [sp, #16]
 801448c:	eba0 000a 	sub.w	r0, r0, sl
 8014490:	2240      	movs	r2, #64	@ 0x40
 8014492:	4082      	lsls	r2, r0
 8014494:	4313      	orrs	r3, r2
 8014496:	3401      	adds	r4, #1
 8014498:	9304      	str	r3, [sp, #16]
 801449a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801449e:	4829      	ldr	r0, [pc, #164]	@ (8014544 <_vfiprintf_r+0x220>)
 80144a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80144a4:	2206      	movs	r2, #6
 80144a6:	f7eb feb3 	bl	8000210 <memchr>
 80144aa:	2800      	cmp	r0, #0
 80144ac:	d03f      	beq.n	801452e <_vfiprintf_r+0x20a>
 80144ae:	4b26      	ldr	r3, [pc, #152]	@ (8014548 <_vfiprintf_r+0x224>)
 80144b0:	bb1b      	cbnz	r3, 80144fa <_vfiprintf_r+0x1d6>
 80144b2:	9b03      	ldr	r3, [sp, #12]
 80144b4:	3307      	adds	r3, #7
 80144b6:	f023 0307 	bic.w	r3, r3, #7
 80144ba:	3308      	adds	r3, #8
 80144bc:	9303      	str	r3, [sp, #12]
 80144be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144c0:	443b      	add	r3, r7
 80144c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80144c4:	e76a      	b.n	801439c <_vfiprintf_r+0x78>
 80144c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80144ca:	460c      	mov	r4, r1
 80144cc:	2001      	movs	r0, #1
 80144ce:	e7a8      	b.n	8014422 <_vfiprintf_r+0xfe>
 80144d0:	2300      	movs	r3, #0
 80144d2:	3401      	adds	r4, #1
 80144d4:	9305      	str	r3, [sp, #20]
 80144d6:	4619      	mov	r1, r3
 80144d8:	f04f 0c0a 	mov.w	ip, #10
 80144dc:	4620      	mov	r0, r4
 80144de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144e2:	3a30      	subs	r2, #48	@ 0x30
 80144e4:	2a09      	cmp	r2, #9
 80144e6:	d903      	bls.n	80144f0 <_vfiprintf_r+0x1cc>
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d0c6      	beq.n	801447a <_vfiprintf_r+0x156>
 80144ec:	9105      	str	r1, [sp, #20]
 80144ee:	e7c4      	b.n	801447a <_vfiprintf_r+0x156>
 80144f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80144f4:	4604      	mov	r4, r0
 80144f6:	2301      	movs	r3, #1
 80144f8:	e7f0      	b.n	80144dc <_vfiprintf_r+0x1b8>
 80144fa:	ab03      	add	r3, sp, #12
 80144fc:	9300      	str	r3, [sp, #0]
 80144fe:	462a      	mov	r2, r5
 8014500:	4b12      	ldr	r3, [pc, #72]	@ (801454c <_vfiprintf_r+0x228>)
 8014502:	a904      	add	r1, sp, #16
 8014504:	4630      	mov	r0, r6
 8014506:	f7fd fe6b 	bl	80121e0 <_printf_float>
 801450a:	4607      	mov	r7, r0
 801450c:	1c78      	adds	r0, r7, #1
 801450e:	d1d6      	bne.n	80144be <_vfiprintf_r+0x19a>
 8014510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014512:	07d9      	lsls	r1, r3, #31
 8014514:	d405      	bmi.n	8014522 <_vfiprintf_r+0x1fe>
 8014516:	89ab      	ldrh	r3, [r5, #12]
 8014518:	059a      	lsls	r2, r3, #22
 801451a:	d402      	bmi.n	8014522 <_vfiprintf_r+0x1fe>
 801451c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801451e:	f7fe fcaf 	bl	8012e80 <__retarget_lock_release_recursive>
 8014522:	89ab      	ldrh	r3, [r5, #12]
 8014524:	065b      	lsls	r3, r3, #25
 8014526:	f53f af1f 	bmi.w	8014368 <_vfiprintf_r+0x44>
 801452a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801452c:	e71e      	b.n	801436c <_vfiprintf_r+0x48>
 801452e:	ab03      	add	r3, sp, #12
 8014530:	9300      	str	r3, [sp, #0]
 8014532:	462a      	mov	r2, r5
 8014534:	4b05      	ldr	r3, [pc, #20]	@ (801454c <_vfiprintf_r+0x228>)
 8014536:	a904      	add	r1, sp, #16
 8014538:	4630      	mov	r0, r6
 801453a:	f7fe f8e9 	bl	8012710 <_printf_i>
 801453e:	e7e4      	b.n	801450a <_vfiprintf_r+0x1e6>
 8014540:	080d29e8 	.word	0x080d29e8
 8014544:	080d29f2 	.word	0x080d29f2
 8014548:	080121e1 	.word	0x080121e1
 801454c:	080142ff 	.word	0x080142ff
 8014550:	080d29ee 	.word	0x080d29ee

08014554 <__sflush_r>:
 8014554:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801455c:	0716      	lsls	r6, r2, #28
 801455e:	4605      	mov	r5, r0
 8014560:	460c      	mov	r4, r1
 8014562:	d454      	bmi.n	801460e <__sflush_r+0xba>
 8014564:	684b      	ldr	r3, [r1, #4]
 8014566:	2b00      	cmp	r3, #0
 8014568:	dc02      	bgt.n	8014570 <__sflush_r+0x1c>
 801456a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801456c:	2b00      	cmp	r3, #0
 801456e:	dd48      	ble.n	8014602 <__sflush_r+0xae>
 8014570:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014572:	2e00      	cmp	r6, #0
 8014574:	d045      	beq.n	8014602 <__sflush_r+0xae>
 8014576:	2300      	movs	r3, #0
 8014578:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801457c:	682f      	ldr	r7, [r5, #0]
 801457e:	6a21      	ldr	r1, [r4, #32]
 8014580:	602b      	str	r3, [r5, #0]
 8014582:	d030      	beq.n	80145e6 <__sflush_r+0x92>
 8014584:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014586:	89a3      	ldrh	r3, [r4, #12]
 8014588:	0759      	lsls	r1, r3, #29
 801458a:	d505      	bpl.n	8014598 <__sflush_r+0x44>
 801458c:	6863      	ldr	r3, [r4, #4]
 801458e:	1ad2      	subs	r2, r2, r3
 8014590:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014592:	b10b      	cbz	r3, 8014598 <__sflush_r+0x44>
 8014594:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014596:	1ad2      	subs	r2, r2, r3
 8014598:	2300      	movs	r3, #0
 801459a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801459c:	6a21      	ldr	r1, [r4, #32]
 801459e:	4628      	mov	r0, r5
 80145a0:	47b0      	blx	r6
 80145a2:	1c43      	adds	r3, r0, #1
 80145a4:	89a3      	ldrh	r3, [r4, #12]
 80145a6:	d106      	bne.n	80145b6 <__sflush_r+0x62>
 80145a8:	6829      	ldr	r1, [r5, #0]
 80145aa:	291d      	cmp	r1, #29
 80145ac:	d82b      	bhi.n	8014606 <__sflush_r+0xb2>
 80145ae:	4a2a      	ldr	r2, [pc, #168]	@ (8014658 <__sflush_r+0x104>)
 80145b0:	410a      	asrs	r2, r1
 80145b2:	07d6      	lsls	r6, r2, #31
 80145b4:	d427      	bmi.n	8014606 <__sflush_r+0xb2>
 80145b6:	2200      	movs	r2, #0
 80145b8:	6062      	str	r2, [r4, #4]
 80145ba:	04d9      	lsls	r1, r3, #19
 80145bc:	6922      	ldr	r2, [r4, #16]
 80145be:	6022      	str	r2, [r4, #0]
 80145c0:	d504      	bpl.n	80145cc <__sflush_r+0x78>
 80145c2:	1c42      	adds	r2, r0, #1
 80145c4:	d101      	bne.n	80145ca <__sflush_r+0x76>
 80145c6:	682b      	ldr	r3, [r5, #0]
 80145c8:	b903      	cbnz	r3, 80145cc <__sflush_r+0x78>
 80145ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80145cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80145ce:	602f      	str	r7, [r5, #0]
 80145d0:	b1b9      	cbz	r1, 8014602 <__sflush_r+0xae>
 80145d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80145d6:	4299      	cmp	r1, r3
 80145d8:	d002      	beq.n	80145e0 <__sflush_r+0x8c>
 80145da:	4628      	mov	r0, r5
 80145dc:	f7ff faac 	bl	8013b38 <_free_r>
 80145e0:	2300      	movs	r3, #0
 80145e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80145e4:	e00d      	b.n	8014602 <__sflush_r+0xae>
 80145e6:	2301      	movs	r3, #1
 80145e8:	4628      	mov	r0, r5
 80145ea:	47b0      	blx	r6
 80145ec:	4602      	mov	r2, r0
 80145ee:	1c50      	adds	r0, r2, #1
 80145f0:	d1c9      	bne.n	8014586 <__sflush_r+0x32>
 80145f2:	682b      	ldr	r3, [r5, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d0c6      	beq.n	8014586 <__sflush_r+0x32>
 80145f8:	2b1d      	cmp	r3, #29
 80145fa:	d001      	beq.n	8014600 <__sflush_r+0xac>
 80145fc:	2b16      	cmp	r3, #22
 80145fe:	d11e      	bne.n	801463e <__sflush_r+0xea>
 8014600:	602f      	str	r7, [r5, #0]
 8014602:	2000      	movs	r0, #0
 8014604:	e022      	b.n	801464c <__sflush_r+0xf8>
 8014606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801460a:	b21b      	sxth	r3, r3
 801460c:	e01b      	b.n	8014646 <__sflush_r+0xf2>
 801460e:	690f      	ldr	r7, [r1, #16]
 8014610:	2f00      	cmp	r7, #0
 8014612:	d0f6      	beq.n	8014602 <__sflush_r+0xae>
 8014614:	0793      	lsls	r3, r2, #30
 8014616:	680e      	ldr	r6, [r1, #0]
 8014618:	bf08      	it	eq
 801461a:	694b      	ldreq	r3, [r1, #20]
 801461c:	600f      	str	r7, [r1, #0]
 801461e:	bf18      	it	ne
 8014620:	2300      	movne	r3, #0
 8014622:	eba6 0807 	sub.w	r8, r6, r7
 8014626:	608b      	str	r3, [r1, #8]
 8014628:	f1b8 0f00 	cmp.w	r8, #0
 801462c:	dde9      	ble.n	8014602 <__sflush_r+0xae>
 801462e:	6a21      	ldr	r1, [r4, #32]
 8014630:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014632:	4643      	mov	r3, r8
 8014634:	463a      	mov	r2, r7
 8014636:	4628      	mov	r0, r5
 8014638:	47b0      	blx	r6
 801463a:	2800      	cmp	r0, #0
 801463c:	dc08      	bgt.n	8014650 <__sflush_r+0xfc>
 801463e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014646:	81a3      	strh	r3, [r4, #12]
 8014648:	f04f 30ff 	mov.w	r0, #4294967295
 801464c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014650:	4407      	add	r7, r0
 8014652:	eba8 0800 	sub.w	r8, r8, r0
 8014656:	e7e7      	b.n	8014628 <__sflush_r+0xd4>
 8014658:	dfbffffe 	.word	0xdfbffffe

0801465c <_fflush_r>:
 801465c:	b538      	push	{r3, r4, r5, lr}
 801465e:	690b      	ldr	r3, [r1, #16]
 8014660:	4605      	mov	r5, r0
 8014662:	460c      	mov	r4, r1
 8014664:	b913      	cbnz	r3, 801466c <_fflush_r+0x10>
 8014666:	2500      	movs	r5, #0
 8014668:	4628      	mov	r0, r5
 801466a:	bd38      	pop	{r3, r4, r5, pc}
 801466c:	b118      	cbz	r0, 8014676 <_fflush_r+0x1a>
 801466e:	6a03      	ldr	r3, [r0, #32]
 8014670:	b90b      	cbnz	r3, 8014676 <_fflush_r+0x1a>
 8014672:	f7fe f9f9 	bl	8012a68 <__sinit>
 8014676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d0f3      	beq.n	8014666 <_fflush_r+0xa>
 801467e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014680:	07d0      	lsls	r0, r2, #31
 8014682:	d404      	bmi.n	801468e <_fflush_r+0x32>
 8014684:	0599      	lsls	r1, r3, #22
 8014686:	d402      	bmi.n	801468e <_fflush_r+0x32>
 8014688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801468a:	f7fe fbf8 	bl	8012e7e <__retarget_lock_acquire_recursive>
 801468e:	4628      	mov	r0, r5
 8014690:	4621      	mov	r1, r4
 8014692:	f7ff ff5f 	bl	8014554 <__sflush_r>
 8014696:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014698:	07da      	lsls	r2, r3, #31
 801469a:	4605      	mov	r5, r0
 801469c:	d4e4      	bmi.n	8014668 <_fflush_r+0xc>
 801469e:	89a3      	ldrh	r3, [r4, #12]
 80146a0:	059b      	lsls	r3, r3, #22
 80146a2:	d4e1      	bmi.n	8014668 <_fflush_r+0xc>
 80146a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80146a6:	f7fe fbeb 	bl	8012e80 <__retarget_lock_release_recursive>
 80146aa:	e7dd      	b.n	8014668 <_fflush_r+0xc>

080146ac <__swhatbuf_r>:
 80146ac:	b570      	push	{r4, r5, r6, lr}
 80146ae:	460c      	mov	r4, r1
 80146b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146b4:	2900      	cmp	r1, #0
 80146b6:	b096      	sub	sp, #88	@ 0x58
 80146b8:	4615      	mov	r5, r2
 80146ba:	461e      	mov	r6, r3
 80146bc:	da0d      	bge.n	80146da <__swhatbuf_r+0x2e>
 80146be:	89a3      	ldrh	r3, [r4, #12]
 80146c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80146c4:	f04f 0100 	mov.w	r1, #0
 80146c8:	bf14      	ite	ne
 80146ca:	2340      	movne	r3, #64	@ 0x40
 80146cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80146d0:	2000      	movs	r0, #0
 80146d2:	6031      	str	r1, [r6, #0]
 80146d4:	602b      	str	r3, [r5, #0]
 80146d6:	b016      	add	sp, #88	@ 0x58
 80146d8:	bd70      	pop	{r4, r5, r6, pc}
 80146da:	466a      	mov	r2, sp
 80146dc:	f000 f848 	bl	8014770 <_fstat_r>
 80146e0:	2800      	cmp	r0, #0
 80146e2:	dbec      	blt.n	80146be <__swhatbuf_r+0x12>
 80146e4:	9901      	ldr	r1, [sp, #4]
 80146e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80146ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80146ee:	4259      	negs	r1, r3
 80146f0:	4159      	adcs	r1, r3
 80146f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80146f6:	e7eb      	b.n	80146d0 <__swhatbuf_r+0x24>

080146f8 <__smakebuf_r>:
 80146f8:	898b      	ldrh	r3, [r1, #12]
 80146fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80146fc:	079d      	lsls	r5, r3, #30
 80146fe:	4606      	mov	r6, r0
 8014700:	460c      	mov	r4, r1
 8014702:	d507      	bpl.n	8014714 <__smakebuf_r+0x1c>
 8014704:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014708:	6023      	str	r3, [r4, #0]
 801470a:	6123      	str	r3, [r4, #16]
 801470c:	2301      	movs	r3, #1
 801470e:	6163      	str	r3, [r4, #20]
 8014710:	b003      	add	sp, #12
 8014712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014714:	ab01      	add	r3, sp, #4
 8014716:	466a      	mov	r2, sp
 8014718:	f7ff ffc8 	bl	80146ac <__swhatbuf_r>
 801471c:	9f00      	ldr	r7, [sp, #0]
 801471e:	4605      	mov	r5, r0
 8014720:	4639      	mov	r1, r7
 8014722:	4630      	mov	r0, r6
 8014724:	f7fd fc30 	bl	8011f88 <_malloc_r>
 8014728:	b948      	cbnz	r0, 801473e <__smakebuf_r+0x46>
 801472a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801472e:	059a      	lsls	r2, r3, #22
 8014730:	d4ee      	bmi.n	8014710 <__smakebuf_r+0x18>
 8014732:	f023 0303 	bic.w	r3, r3, #3
 8014736:	f043 0302 	orr.w	r3, r3, #2
 801473a:	81a3      	strh	r3, [r4, #12]
 801473c:	e7e2      	b.n	8014704 <__smakebuf_r+0xc>
 801473e:	89a3      	ldrh	r3, [r4, #12]
 8014740:	6020      	str	r0, [r4, #0]
 8014742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014746:	81a3      	strh	r3, [r4, #12]
 8014748:	9b01      	ldr	r3, [sp, #4]
 801474a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801474e:	b15b      	cbz	r3, 8014768 <__smakebuf_r+0x70>
 8014750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014754:	4630      	mov	r0, r6
 8014756:	f000 f81d 	bl	8014794 <_isatty_r>
 801475a:	b128      	cbz	r0, 8014768 <__smakebuf_r+0x70>
 801475c:	89a3      	ldrh	r3, [r4, #12]
 801475e:	f023 0303 	bic.w	r3, r3, #3
 8014762:	f043 0301 	orr.w	r3, r3, #1
 8014766:	81a3      	strh	r3, [r4, #12]
 8014768:	89a3      	ldrh	r3, [r4, #12]
 801476a:	431d      	orrs	r5, r3
 801476c:	81a5      	strh	r5, [r4, #12]
 801476e:	e7cf      	b.n	8014710 <__smakebuf_r+0x18>

08014770 <_fstat_r>:
 8014770:	b538      	push	{r3, r4, r5, lr}
 8014772:	4d07      	ldr	r5, [pc, #28]	@ (8014790 <_fstat_r+0x20>)
 8014774:	2300      	movs	r3, #0
 8014776:	4604      	mov	r4, r0
 8014778:	4608      	mov	r0, r1
 801477a:	4611      	mov	r1, r2
 801477c:	602b      	str	r3, [r5, #0]
 801477e:	f7ed fd4d 	bl	800221c <_fstat>
 8014782:	1c43      	adds	r3, r0, #1
 8014784:	d102      	bne.n	801478c <_fstat_r+0x1c>
 8014786:	682b      	ldr	r3, [r5, #0]
 8014788:	b103      	cbz	r3, 801478c <_fstat_r+0x1c>
 801478a:	6023      	str	r3, [r4, #0]
 801478c:	bd38      	pop	{r3, r4, r5, pc}
 801478e:	bf00      	nop
 8014790:	2000e110 	.word	0x2000e110

08014794 <_isatty_r>:
 8014794:	b538      	push	{r3, r4, r5, lr}
 8014796:	4d06      	ldr	r5, [pc, #24]	@ (80147b0 <_isatty_r+0x1c>)
 8014798:	2300      	movs	r3, #0
 801479a:	4604      	mov	r4, r0
 801479c:	4608      	mov	r0, r1
 801479e:	602b      	str	r3, [r5, #0]
 80147a0:	f7ed fd4c 	bl	800223c <_isatty>
 80147a4:	1c43      	adds	r3, r0, #1
 80147a6:	d102      	bne.n	80147ae <_isatty_r+0x1a>
 80147a8:	682b      	ldr	r3, [r5, #0]
 80147aa:	b103      	cbz	r3, 80147ae <_isatty_r+0x1a>
 80147ac:	6023      	str	r3, [r4, #0]
 80147ae:	bd38      	pop	{r3, r4, r5, pc}
 80147b0:	2000e110 	.word	0x2000e110

080147b4 <__assert_func>:
 80147b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80147b6:	4614      	mov	r4, r2
 80147b8:	461a      	mov	r2, r3
 80147ba:	4b09      	ldr	r3, [pc, #36]	@ (80147e0 <__assert_func+0x2c>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	4605      	mov	r5, r0
 80147c0:	68d8      	ldr	r0, [r3, #12]
 80147c2:	b954      	cbnz	r4, 80147da <__assert_func+0x26>
 80147c4:	4b07      	ldr	r3, [pc, #28]	@ (80147e4 <__assert_func+0x30>)
 80147c6:	461c      	mov	r4, r3
 80147c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80147cc:	9100      	str	r1, [sp, #0]
 80147ce:	462b      	mov	r3, r5
 80147d0:	4905      	ldr	r1, [pc, #20]	@ (80147e8 <__assert_func+0x34>)
 80147d2:	f000 f841 	bl	8014858 <fiprintf>
 80147d6:	f000 f851 	bl	801487c <abort>
 80147da:	4b04      	ldr	r3, [pc, #16]	@ (80147ec <__assert_func+0x38>)
 80147dc:	e7f4      	b.n	80147c8 <__assert_func+0x14>
 80147de:	bf00      	nop
 80147e0:	20000818 	.word	0x20000818
 80147e4:	080d2a3e 	.word	0x080d2a3e
 80147e8:	080d2a10 	.word	0x080d2a10
 80147ec:	080d2a03 	.word	0x080d2a03

080147f0 <_calloc_r>:
 80147f0:	b570      	push	{r4, r5, r6, lr}
 80147f2:	fba1 5402 	umull	r5, r4, r1, r2
 80147f6:	b93c      	cbnz	r4, 8014808 <_calloc_r+0x18>
 80147f8:	4629      	mov	r1, r5
 80147fa:	f7fd fbc5 	bl	8011f88 <_malloc_r>
 80147fe:	4606      	mov	r6, r0
 8014800:	b928      	cbnz	r0, 801480e <_calloc_r+0x1e>
 8014802:	2600      	movs	r6, #0
 8014804:	4630      	mov	r0, r6
 8014806:	bd70      	pop	{r4, r5, r6, pc}
 8014808:	220c      	movs	r2, #12
 801480a:	6002      	str	r2, [r0, #0]
 801480c:	e7f9      	b.n	8014802 <_calloc_r+0x12>
 801480e:	462a      	mov	r2, r5
 8014810:	4621      	mov	r1, r4
 8014812:	f7fe faa7 	bl	8012d64 <memset>
 8014816:	e7f5      	b.n	8014804 <_calloc_r+0x14>

08014818 <__ascii_mbtowc>:
 8014818:	b082      	sub	sp, #8
 801481a:	b901      	cbnz	r1, 801481e <__ascii_mbtowc+0x6>
 801481c:	a901      	add	r1, sp, #4
 801481e:	b142      	cbz	r2, 8014832 <__ascii_mbtowc+0x1a>
 8014820:	b14b      	cbz	r3, 8014836 <__ascii_mbtowc+0x1e>
 8014822:	7813      	ldrb	r3, [r2, #0]
 8014824:	600b      	str	r3, [r1, #0]
 8014826:	7812      	ldrb	r2, [r2, #0]
 8014828:	1e10      	subs	r0, r2, #0
 801482a:	bf18      	it	ne
 801482c:	2001      	movne	r0, #1
 801482e:	b002      	add	sp, #8
 8014830:	4770      	bx	lr
 8014832:	4610      	mov	r0, r2
 8014834:	e7fb      	b.n	801482e <__ascii_mbtowc+0x16>
 8014836:	f06f 0001 	mvn.w	r0, #1
 801483a:	e7f8      	b.n	801482e <__ascii_mbtowc+0x16>

0801483c <__ascii_wctomb>:
 801483c:	4603      	mov	r3, r0
 801483e:	4608      	mov	r0, r1
 8014840:	b141      	cbz	r1, 8014854 <__ascii_wctomb+0x18>
 8014842:	2aff      	cmp	r2, #255	@ 0xff
 8014844:	d904      	bls.n	8014850 <__ascii_wctomb+0x14>
 8014846:	228a      	movs	r2, #138	@ 0x8a
 8014848:	601a      	str	r2, [r3, #0]
 801484a:	f04f 30ff 	mov.w	r0, #4294967295
 801484e:	4770      	bx	lr
 8014850:	700a      	strb	r2, [r1, #0]
 8014852:	2001      	movs	r0, #1
 8014854:	4770      	bx	lr
	...

08014858 <fiprintf>:
 8014858:	b40e      	push	{r1, r2, r3}
 801485a:	b503      	push	{r0, r1, lr}
 801485c:	4601      	mov	r1, r0
 801485e:	ab03      	add	r3, sp, #12
 8014860:	4805      	ldr	r0, [pc, #20]	@ (8014878 <fiprintf+0x20>)
 8014862:	f853 2b04 	ldr.w	r2, [r3], #4
 8014866:	6800      	ldr	r0, [r0, #0]
 8014868:	9301      	str	r3, [sp, #4]
 801486a:	f7ff fd5b 	bl	8014324 <_vfiprintf_r>
 801486e:	b002      	add	sp, #8
 8014870:	f85d eb04 	ldr.w	lr, [sp], #4
 8014874:	b003      	add	sp, #12
 8014876:	4770      	bx	lr
 8014878:	20000818 	.word	0x20000818

0801487c <abort>:
 801487c:	b508      	push	{r3, lr}
 801487e:	2006      	movs	r0, #6
 8014880:	f000 f82c 	bl	80148dc <raise>
 8014884:	2001      	movs	r0, #1
 8014886:	f7ed fc79 	bl	800217c <_exit>

0801488a <_raise_r>:
 801488a:	291f      	cmp	r1, #31
 801488c:	b538      	push	{r3, r4, r5, lr}
 801488e:	4605      	mov	r5, r0
 8014890:	460c      	mov	r4, r1
 8014892:	d904      	bls.n	801489e <_raise_r+0x14>
 8014894:	2316      	movs	r3, #22
 8014896:	6003      	str	r3, [r0, #0]
 8014898:	f04f 30ff 	mov.w	r0, #4294967295
 801489c:	bd38      	pop	{r3, r4, r5, pc}
 801489e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80148a0:	b112      	cbz	r2, 80148a8 <_raise_r+0x1e>
 80148a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80148a6:	b94b      	cbnz	r3, 80148bc <_raise_r+0x32>
 80148a8:	4628      	mov	r0, r5
 80148aa:	f000 f831 	bl	8014910 <_getpid_r>
 80148ae:	4622      	mov	r2, r4
 80148b0:	4601      	mov	r1, r0
 80148b2:	4628      	mov	r0, r5
 80148b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80148b8:	f000 b818 	b.w	80148ec <_kill_r>
 80148bc:	2b01      	cmp	r3, #1
 80148be:	d00a      	beq.n	80148d6 <_raise_r+0x4c>
 80148c0:	1c59      	adds	r1, r3, #1
 80148c2:	d103      	bne.n	80148cc <_raise_r+0x42>
 80148c4:	2316      	movs	r3, #22
 80148c6:	6003      	str	r3, [r0, #0]
 80148c8:	2001      	movs	r0, #1
 80148ca:	e7e7      	b.n	801489c <_raise_r+0x12>
 80148cc:	2100      	movs	r1, #0
 80148ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80148d2:	4620      	mov	r0, r4
 80148d4:	4798      	blx	r3
 80148d6:	2000      	movs	r0, #0
 80148d8:	e7e0      	b.n	801489c <_raise_r+0x12>
	...

080148dc <raise>:
 80148dc:	4b02      	ldr	r3, [pc, #8]	@ (80148e8 <raise+0xc>)
 80148de:	4601      	mov	r1, r0
 80148e0:	6818      	ldr	r0, [r3, #0]
 80148e2:	f7ff bfd2 	b.w	801488a <_raise_r>
 80148e6:	bf00      	nop
 80148e8:	20000818 	.word	0x20000818

080148ec <_kill_r>:
 80148ec:	b538      	push	{r3, r4, r5, lr}
 80148ee:	4d07      	ldr	r5, [pc, #28]	@ (801490c <_kill_r+0x20>)
 80148f0:	2300      	movs	r3, #0
 80148f2:	4604      	mov	r4, r0
 80148f4:	4608      	mov	r0, r1
 80148f6:	4611      	mov	r1, r2
 80148f8:	602b      	str	r3, [r5, #0]
 80148fa:	f7ed fc2f 	bl	800215c <_kill>
 80148fe:	1c43      	adds	r3, r0, #1
 8014900:	d102      	bne.n	8014908 <_kill_r+0x1c>
 8014902:	682b      	ldr	r3, [r5, #0]
 8014904:	b103      	cbz	r3, 8014908 <_kill_r+0x1c>
 8014906:	6023      	str	r3, [r4, #0]
 8014908:	bd38      	pop	{r3, r4, r5, pc}
 801490a:	bf00      	nop
 801490c:	2000e110 	.word	0x2000e110

08014910 <_getpid_r>:
 8014910:	f7ed bc1c 	b.w	800214c <_getpid>

08014914 <cosf>:
 8014914:	ee10 3a10 	vmov	r3, s0
 8014918:	b507      	push	{r0, r1, r2, lr}
 801491a:	4a1e      	ldr	r2, [pc, #120]	@ (8014994 <cosf+0x80>)
 801491c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014920:	4293      	cmp	r3, r2
 8014922:	d806      	bhi.n	8014932 <cosf+0x1e>
 8014924:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8014998 <cosf+0x84>
 8014928:	b003      	add	sp, #12
 801492a:	f85d eb04 	ldr.w	lr, [sp], #4
 801492e:	f000 b83d 	b.w	80149ac <__kernel_cosf>
 8014932:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8014936:	d304      	bcc.n	8014942 <cosf+0x2e>
 8014938:	ee30 0a40 	vsub.f32	s0, s0, s0
 801493c:	b003      	add	sp, #12
 801493e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014942:	4668      	mov	r0, sp
 8014944:	f000 f8d2 	bl	8014aec <__ieee754_rem_pio2f>
 8014948:	f000 0003 	and.w	r0, r0, #3
 801494c:	2801      	cmp	r0, #1
 801494e:	d009      	beq.n	8014964 <cosf+0x50>
 8014950:	2802      	cmp	r0, #2
 8014952:	d010      	beq.n	8014976 <cosf+0x62>
 8014954:	b9b0      	cbnz	r0, 8014984 <cosf+0x70>
 8014956:	eddd 0a01 	vldr	s1, [sp, #4]
 801495a:	ed9d 0a00 	vldr	s0, [sp]
 801495e:	f000 f825 	bl	80149ac <__kernel_cosf>
 8014962:	e7eb      	b.n	801493c <cosf+0x28>
 8014964:	eddd 0a01 	vldr	s1, [sp, #4]
 8014968:	ed9d 0a00 	vldr	s0, [sp]
 801496c:	f000 f876 	bl	8014a5c <__kernel_sinf>
 8014970:	eeb1 0a40 	vneg.f32	s0, s0
 8014974:	e7e2      	b.n	801493c <cosf+0x28>
 8014976:	eddd 0a01 	vldr	s1, [sp, #4]
 801497a:	ed9d 0a00 	vldr	s0, [sp]
 801497e:	f000 f815 	bl	80149ac <__kernel_cosf>
 8014982:	e7f5      	b.n	8014970 <cosf+0x5c>
 8014984:	eddd 0a01 	vldr	s1, [sp, #4]
 8014988:	ed9d 0a00 	vldr	s0, [sp]
 801498c:	2001      	movs	r0, #1
 801498e:	f000 f865 	bl	8014a5c <__kernel_sinf>
 8014992:	e7d3      	b.n	801493c <cosf+0x28>
 8014994:	3f490fd8 	.word	0x3f490fd8
 8014998:	00000000 	.word	0x00000000

0801499c <fabsf>:
 801499c:	ee10 3a10 	vmov	r3, s0
 80149a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80149a4:	ee00 3a10 	vmov	s0, r3
 80149a8:	4770      	bx	lr
	...

080149ac <__kernel_cosf>:
 80149ac:	ee10 3a10 	vmov	r3, s0
 80149b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80149b4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80149b8:	eef0 6a40 	vmov.f32	s13, s0
 80149bc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80149c0:	d204      	bcs.n	80149cc <__kernel_cosf+0x20>
 80149c2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80149c6:	ee17 2a90 	vmov	r2, s15
 80149ca:	b342      	cbz	r2, 8014a1e <__kernel_cosf+0x72>
 80149cc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80149d0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8014a3c <__kernel_cosf+0x90>
 80149d4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8014a40 <__kernel_cosf+0x94>
 80149d8:	4a1a      	ldr	r2, [pc, #104]	@ (8014a44 <__kernel_cosf+0x98>)
 80149da:	eea7 6a27 	vfma.f32	s12, s14, s15
 80149de:	4293      	cmp	r3, r2
 80149e0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014a48 <__kernel_cosf+0x9c>
 80149e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80149e8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8014a4c <__kernel_cosf+0xa0>
 80149ec:	eea7 6a87 	vfma.f32	s12, s15, s14
 80149f0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8014a50 <__kernel_cosf+0xa4>
 80149f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80149f8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8014a54 <__kernel_cosf+0xa8>
 80149fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8014a00:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8014a04:	ee26 6a07 	vmul.f32	s12, s12, s14
 8014a08:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014a0c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8014a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a14:	d804      	bhi.n	8014a20 <__kernel_cosf+0x74>
 8014a16:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8014a1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014a1e:	4770      	bx	lr
 8014a20:	4a0d      	ldr	r2, [pc, #52]	@ (8014a58 <__kernel_cosf+0xac>)
 8014a22:	4293      	cmp	r3, r2
 8014a24:	bf9a      	itte	ls
 8014a26:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8014a2a:	ee07 3a10 	vmovls	s14, r3
 8014a2e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8014a32:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014a36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a3a:	e7ec      	b.n	8014a16 <__kernel_cosf+0x6a>
 8014a3c:	ad47d74e 	.word	0xad47d74e
 8014a40:	310f74f6 	.word	0x310f74f6
 8014a44:	3e999999 	.word	0x3e999999
 8014a48:	b493f27c 	.word	0xb493f27c
 8014a4c:	37d00d01 	.word	0x37d00d01
 8014a50:	bab60b61 	.word	0xbab60b61
 8014a54:	3d2aaaab 	.word	0x3d2aaaab
 8014a58:	3f480000 	.word	0x3f480000

08014a5c <__kernel_sinf>:
 8014a5c:	ee10 3a10 	vmov	r3, s0
 8014a60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014a64:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8014a68:	d204      	bcs.n	8014a74 <__kernel_sinf+0x18>
 8014a6a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014a6e:	ee17 3a90 	vmov	r3, s15
 8014a72:	b35b      	cbz	r3, 8014acc <__kernel_sinf+0x70>
 8014a74:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014a78:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8014ad0 <__kernel_sinf+0x74>
 8014a7c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8014ad4 <__kernel_sinf+0x78>
 8014a80:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014a84:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8014ad8 <__kernel_sinf+0x7c>
 8014a88:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014a8c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8014adc <__kernel_sinf+0x80>
 8014a90:	eea7 6a87 	vfma.f32	s12, s15, s14
 8014a94:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8014ae0 <__kernel_sinf+0x84>
 8014a98:	ee60 6a07 	vmul.f32	s13, s0, s14
 8014a9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014aa0:	b930      	cbnz	r0, 8014ab0 <__kernel_sinf+0x54>
 8014aa2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8014ae4 <__kernel_sinf+0x88>
 8014aa6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014aaa:	eea6 0a26 	vfma.f32	s0, s12, s13
 8014aae:	4770      	bx	lr
 8014ab0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8014ab4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8014ab8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8014abc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8014ac0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8014ae8 <__kernel_sinf+0x8c>
 8014ac4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8014ac8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8014acc:	4770      	bx	lr
 8014ace:	bf00      	nop
 8014ad0:	2f2ec9d3 	.word	0x2f2ec9d3
 8014ad4:	b2d72f34 	.word	0xb2d72f34
 8014ad8:	3638ef1b 	.word	0x3638ef1b
 8014adc:	b9500d01 	.word	0xb9500d01
 8014ae0:	3c088889 	.word	0x3c088889
 8014ae4:	be2aaaab 	.word	0xbe2aaaab
 8014ae8:	3e2aaaab 	.word	0x3e2aaaab

08014aec <__ieee754_rem_pio2f>:
 8014aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014aee:	ee10 6a10 	vmov	r6, s0
 8014af2:	4b88      	ldr	r3, [pc, #544]	@ (8014d14 <__ieee754_rem_pio2f+0x228>)
 8014af4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8014af8:	429d      	cmp	r5, r3
 8014afa:	b087      	sub	sp, #28
 8014afc:	4604      	mov	r4, r0
 8014afe:	d805      	bhi.n	8014b0c <__ieee754_rem_pio2f+0x20>
 8014b00:	2300      	movs	r3, #0
 8014b02:	ed80 0a00 	vstr	s0, [r0]
 8014b06:	6043      	str	r3, [r0, #4]
 8014b08:	2000      	movs	r0, #0
 8014b0a:	e022      	b.n	8014b52 <__ieee754_rem_pio2f+0x66>
 8014b0c:	4b82      	ldr	r3, [pc, #520]	@ (8014d18 <__ieee754_rem_pio2f+0x22c>)
 8014b0e:	429d      	cmp	r5, r3
 8014b10:	d83a      	bhi.n	8014b88 <__ieee754_rem_pio2f+0x9c>
 8014b12:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8014b16:	2e00      	cmp	r6, #0
 8014b18:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8014d1c <__ieee754_rem_pio2f+0x230>
 8014b1c:	4a80      	ldr	r2, [pc, #512]	@ (8014d20 <__ieee754_rem_pio2f+0x234>)
 8014b1e:	f023 030f 	bic.w	r3, r3, #15
 8014b22:	dd18      	ble.n	8014b56 <__ieee754_rem_pio2f+0x6a>
 8014b24:	4293      	cmp	r3, r2
 8014b26:	ee70 7a47 	vsub.f32	s15, s0, s14
 8014b2a:	bf09      	itett	eq
 8014b2c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8014d24 <__ieee754_rem_pio2f+0x238>
 8014b30:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8014d28 <__ieee754_rem_pio2f+0x23c>
 8014b34:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8014d2c <__ieee754_rem_pio2f+0x240>
 8014b38:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8014b3c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8014b40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b44:	ed80 7a00 	vstr	s14, [r0]
 8014b48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014b4c:	edc0 7a01 	vstr	s15, [r0, #4]
 8014b50:	2001      	movs	r0, #1
 8014b52:	b007      	add	sp, #28
 8014b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b56:	4293      	cmp	r3, r2
 8014b58:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014b5c:	bf09      	itett	eq
 8014b5e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8014d24 <__ieee754_rem_pio2f+0x238>
 8014b62:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8014d28 <__ieee754_rem_pio2f+0x23c>
 8014b66:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8014d2c <__ieee754_rem_pio2f+0x240>
 8014b6a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8014b6e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014b72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b76:	ed80 7a00 	vstr	s14, [r0]
 8014b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014b7e:	edc0 7a01 	vstr	s15, [r0, #4]
 8014b82:	f04f 30ff 	mov.w	r0, #4294967295
 8014b86:	e7e4      	b.n	8014b52 <__ieee754_rem_pio2f+0x66>
 8014b88:	4b69      	ldr	r3, [pc, #420]	@ (8014d30 <__ieee754_rem_pio2f+0x244>)
 8014b8a:	429d      	cmp	r5, r3
 8014b8c:	d873      	bhi.n	8014c76 <__ieee754_rem_pio2f+0x18a>
 8014b8e:	f7ff ff05 	bl	801499c <fabsf>
 8014b92:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8014d34 <__ieee754_rem_pio2f+0x248>
 8014b96:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014b9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014b9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ba2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014ba6:	ee17 0a90 	vmov	r0, s15
 8014baa:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8014d1c <__ieee754_rem_pio2f+0x230>
 8014bae:	eea7 0a67 	vfms.f32	s0, s14, s15
 8014bb2:	281f      	cmp	r0, #31
 8014bb4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8014d28 <__ieee754_rem_pio2f+0x23c>
 8014bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014bbc:	eeb1 6a47 	vneg.f32	s12, s14
 8014bc0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014bc4:	ee16 1a90 	vmov	r1, s13
 8014bc8:	dc09      	bgt.n	8014bde <__ieee754_rem_pio2f+0xf2>
 8014bca:	4a5b      	ldr	r2, [pc, #364]	@ (8014d38 <__ieee754_rem_pio2f+0x24c>)
 8014bcc:	1e47      	subs	r7, r0, #1
 8014bce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8014bd2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8014bd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8014bda:	4293      	cmp	r3, r2
 8014bdc:	d107      	bne.n	8014bee <__ieee754_rem_pio2f+0x102>
 8014bde:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8014be2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8014be6:	2a08      	cmp	r2, #8
 8014be8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8014bec:	dc14      	bgt.n	8014c18 <__ieee754_rem_pio2f+0x12c>
 8014bee:	6021      	str	r1, [r4, #0]
 8014bf0:	ed94 7a00 	vldr	s14, [r4]
 8014bf4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014bf8:	2e00      	cmp	r6, #0
 8014bfa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014bfe:	ed84 0a01 	vstr	s0, [r4, #4]
 8014c02:	daa6      	bge.n	8014b52 <__ieee754_rem_pio2f+0x66>
 8014c04:	eeb1 7a47 	vneg.f32	s14, s14
 8014c08:	eeb1 0a40 	vneg.f32	s0, s0
 8014c0c:	ed84 7a00 	vstr	s14, [r4]
 8014c10:	ed84 0a01 	vstr	s0, [r4, #4]
 8014c14:	4240      	negs	r0, r0
 8014c16:	e79c      	b.n	8014b52 <__ieee754_rem_pio2f+0x66>
 8014c18:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8014d24 <__ieee754_rem_pio2f+0x238>
 8014c1c:	eef0 6a40 	vmov.f32	s13, s0
 8014c20:	eee6 6a25 	vfma.f32	s13, s12, s11
 8014c24:	ee70 7a66 	vsub.f32	s15, s0, s13
 8014c28:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014c2c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8014d2c <__ieee754_rem_pio2f+0x240>
 8014c30:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8014c34:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8014c38:	ee15 2a90 	vmov	r2, s11
 8014c3c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8014c40:	1a5b      	subs	r3, r3, r1
 8014c42:	2b19      	cmp	r3, #25
 8014c44:	dc04      	bgt.n	8014c50 <__ieee754_rem_pio2f+0x164>
 8014c46:	edc4 5a00 	vstr	s11, [r4]
 8014c4a:	eeb0 0a66 	vmov.f32	s0, s13
 8014c4e:	e7cf      	b.n	8014bf0 <__ieee754_rem_pio2f+0x104>
 8014c50:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8014d3c <__ieee754_rem_pio2f+0x250>
 8014c54:	eeb0 0a66 	vmov.f32	s0, s13
 8014c58:	eea6 0a25 	vfma.f32	s0, s12, s11
 8014c5c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8014c60:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8014d40 <__ieee754_rem_pio2f+0x254>
 8014c64:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014c68:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8014c6c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014c70:	ed84 7a00 	vstr	s14, [r4]
 8014c74:	e7bc      	b.n	8014bf0 <__ieee754_rem_pio2f+0x104>
 8014c76:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8014c7a:	d306      	bcc.n	8014c8a <__ieee754_rem_pio2f+0x19e>
 8014c7c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014c80:	edc0 7a01 	vstr	s15, [r0, #4]
 8014c84:	edc0 7a00 	vstr	s15, [r0]
 8014c88:	e73e      	b.n	8014b08 <__ieee754_rem_pio2f+0x1c>
 8014c8a:	15ea      	asrs	r2, r5, #23
 8014c8c:	3a86      	subs	r2, #134	@ 0x86
 8014c8e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8014c92:	ee07 3a90 	vmov	s15, r3
 8014c96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014c9a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8014d44 <__ieee754_rem_pio2f+0x258>
 8014c9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014ca2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014ca6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014caa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014cae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014cb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014cb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014cba:	ed8d 7a04 	vstr	s14, [sp, #16]
 8014cbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014cc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cca:	edcd 7a05 	vstr	s15, [sp, #20]
 8014cce:	d11e      	bne.n	8014d0e <__ieee754_rem_pio2f+0x222>
 8014cd0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cd8:	bf0c      	ite	eq
 8014cda:	2301      	moveq	r3, #1
 8014cdc:	2302      	movne	r3, #2
 8014cde:	491a      	ldr	r1, [pc, #104]	@ (8014d48 <__ieee754_rem_pio2f+0x25c>)
 8014ce0:	9101      	str	r1, [sp, #4]
 8014ce2:	2102      	movs	r1, #2
 8014ce4:	9100      	str	r1, [sp, #0]
 8014ce6:	a803      	add	r0, sp, #12
 8014ce8:	4621      	mov	r1, r4
 8014cea:	f000 f895 	bl	8014e18 <__kernel_rem_pio2f>
 8014cee:	2e00      	cmp	r6, #0
 8014cf0:	f6bf af2f 	bge.w	8014b52 <__ieee754_rem_pio2f+0x66>
 8014cf4:	edd4 7a00 	vldr	s15, [r4]
 8014cf8:	eef1 7a67 	vneg.f32	s15, s15
 8014cfc:	edc4 7a00 	vstr	s15, [r4]
 8014d00:	edd4 7a01 	vldr	s15, [r4, #4]
 8014d04:	eef1 7a67 	vneg.f32	s15, s15
 8014d08:	edc4 7a01 	vstr	s15, [r4, #4]
 8014d0c:	e782      	b.n	8014c14 <__ieee754_rem_pio2f+0x128>
 8014d0e:	2303      	movs	r3, #3
 8014d10:	e7e5      	b.n	8014cde <__ieee754_rem_pio2f+0x1f2>
 8014d12:	bf00      	nop
 8014d14:	3f490fd8 	.word	0x3f490fd8
 8014d18:	4016cbe3 	.word	0x4016cbe3
 8014d1c:	3fc90f80 	.word	0x3fc90f80
 8014d20:	3fc90fd0 	.word	0x3fc90fd0
 8014d24:	37354400 	.word	0x37354400
 8014d28:	37354443 	.word	0x37354443
 8014d2c:	2e85a308 	.word	0x2e85a308
 8014d30:	43490f80 	.word	0x43490f80
 8014d34:	3f22f984 	.word	0x3f22f984
 8014d38:	080d2b40 	.word	0x080d2b40
 8014d3c:	2e85a300 	.word	0x2e85a300
 8014d40:	248d3132 	.word	0x248d3132
 8014d44:	43800000 	.word	0x43800000
 8014d48:	080d2bc0 	.word	0x080d2bc0

08014d4c <scalbnf>:
 8014d4c:	ee10 3a10 	vmov	r3, s0
 8014d50:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8014d54:	d02b      	beq.n	8014dae <scalbnf+0x62>
 8014d56:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8014d5a:	d302      	bcc.n	8014d62 <scalbnf+0x16>
 8014d5c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014d60:	4770      	bx	lr
 8014d62:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8014d66:	d123      	bne.n	8014db0 <scalbnf+0x64>
 8014d68:	4b24      	ldr	r3, [pc, #144]	@ (8014dfc <scalbnf+0xb0>)
 8014d6a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8014e00 <scalbnf+0xb4>
 8014d6e:	4298      	cmp	r0, r3
 8014d70:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014d74:	db17      	blt.n	8014da6 <scalbnf+0x5a>
 8014d76:	ee10 3a10 	vmov	r3, s0
 8014d7a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014d7e:	3a19      	subs	r2, #25
 8014d80:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8014d84:	4288      	cmp	r0, r1
 8014d86:	dd15      	ble.n	8014db4 <scalbnf+0x68>
 8014d88:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8014e04 <scalbnf+0xb8>
 8014d8c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8014e08 <scalbnf+0xbc>
 8014d90:	ee10 3a10 	vmov	r3, s0
 8014d94:	eeb0 7a67 	vmov.f32	s14, s15
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	bfb8      	it	lt
 8014d9c:	eef0 7a66 	vmovlt.f32	s15, s13
 8014da0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8014da4:	4770      	bx	lr
 8014da6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014e0c <scalbnf+0xc0>
 8014daa:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014dae:	4770      	bx	lr
 8014db0:	0dd2      	lsrs	r2, r2, #23
 8014db2:	e7e5      	b.n	8014d80 <scalbnf+0x34>
 8014db4:	4410      	add	r0, r2
 8014db6:	28fe      	cmp	r0, #254	@ 0xfe
 8014db8:	dce6      	bgt.n	8014d88 <scalbnf+0x3c>
 8014dba:	2800      	cmp	r0, #0
 8014dbc:	dd06      	ble.n	8014dcc <scalbnf+0x80>
 8014dbe:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014dc2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014dc6:	ee00 3a10 	vmov	s0, r3
 8014dca:	4770      	bx	lr
 8014dcc:	f110 0f16 	cmn.w	r0, #22
 8014dd0:	da09      	bge.n	8014de6 <scalbnf+0x9a>
 8014dd2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8014e0c <scalbnf+0xc0>
 8014dd6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8014e10 <scalbnf+0xc4>
 8014dda:	ee10 3a10 	vmov	r3, s0
 8014dde:	eeb0 7a67 	vmov.f32	s14, s15
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	e7d9      	b.n	8014d9a <scalbnf+0x4e>
 8014de6:	3019      	adds	r0, #25
 8014de8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014dec:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014df0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8014e14 <scalbnf+0xc8>
 8014df4:	ee07 3a90 	vmov	s15, r3
 8014df8:	e7d7      	b.n	8014daa <scalbnf+0x5e>
 8014dfa:	bf00      	nop
 8014dfc:	ffff3cb0 	.word	0xffff3cb0
 8014e00:	4c000000 	.word	0x4c000000
 8014e04:	7149f2ca 	.word	0x7149f2ca
 8014e08:	f149f2ca 	.word	0xf149f2ca
 8014e0c:	0da24260 	.word	0x0da24260
 8014e10:	8da24260 	.word	0x8da24260
 8014e14:	33000000 	.word	0x33000000

08014e18 <__kernel_rem_pio2f>:
 8014e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e1c:	ed2d 8b04 	vpush	{d8-d9}
 8014e20:	b0d9      	sub	sp, #356	@ 0x164
 8014e22:	4690      	mov	r8, r2
 8014e24:	9001      	str	r0, [sp, #4]
 8014e26:	4ab9      	ldr	r2, [pc, #740]	@ (801510c <__kernel_rem_pio2f+0x2f4>)
 8014e28:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8014e2a:	f118 0f04 	cmn.w	r8, #4
 8014e2e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8014e32:	460f      	mov	r7, r1
 8014e34:	f103 3bff 	add.w	fp, r3, #4294967295
 8014e38:	db27      	blt.n	8014e8a <__kernel_rem_pio2f+0x72>
 8014e3a:	f1b8 0203 	subs.w	r2, r8, #3
 8014e3e:	bf48      	it	mi
 8014e40:	f108 0204 	addmi.w	r2, r8, #4
 8014e44:	10d2      	asrs	r2, r2, #3
 8014e46:	1c55      	adds	r5, r2, #1
 8014e48:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8014e4a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801511c <__kernel_rem_pio2f+0x304>
 8014e4e:	00e8      	lsls	r0, r5, #3
 8014e50:	eba2 060b 	sub.w	r6, r2, fp
 8014e54:	9002      	str	r0, [sp, #8]
 8014e56:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8014e5a:	eb0a 0c0b 	add.w	ip, sl, fp
 8014e5e:	ac1c      	add	r4, sp, #112	@ 0x70
 8014e60:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8014e64:	2000      	movs	r0, #0
 8014e66:	4560      	cmp	r0, ip
 8014e68:	dd11      	ble.n	8014e8e <__kernel_rem_pio2f+0x76>
 8014e6a:	a91c      	add	r1, sp, #112	@ 0x70
 8014e6c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8014e70:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8014e74:	f04f 0c00 	mov.w	ip, #0
 8014e78:	45d4      	cmp	ip, sl
 8014e7a:	dc27      	bgt.n	8014ecc <__kernel_rem_pio2f+0xb4>
 8014e7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014e80:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801511c <__kernel_rem_pio2f+0x304>
 8014e84:	4606      	mov	r6, r0
 8014e86:	2400      	movs	r4, #0
 8014e88:	e016      	b.n	8014eb8 <__kernel_rem_pio2f+0xa0>
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	e7db      	b.n	8014e46 <__kernel_rem_pio2f+0x2e>
 8014e8e:	42c6      	cmn	r6, r0
 8014e90:	bf5d      	ittte	pl
 8014e92:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8014e96:	ee07 1a90 	vmovpl	s15, r1
 8014e9a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8014e9e:	eef0 7a47 	vmovmi.f32	s15, s14
 8014ea2:	ece4 7a01 	vstmia	r4!, {s15}
 8014ea6:	3001      	adds	r0, #1
 8014ea8:	e7dd      	b.n	8014e66 <__kernel_rem_pio2f+0x4e>
 8014eaa:	ecfe 6a01 	vldmia	lr!, {s13}
 8014eae:	ed96 7a00 	vldr	s14, [r6]
 8014eb2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014eb6:	3401      	adds	r4, #1
 8014eb8:	455c      	cmp	r4, fp
 8014eba:	f1a6 0604 	sub.w	r6, r6, #4
 8014ebe:	ddf4      	ble.n	8014eaa <__kernel_rem_pio2f+0x92>
 8014ec0:	ece9 7a01 	vstmia	r9!, {s15}
 8014ec4:	f10c 0c01 	add.w	ip, ip, #1
 8014ec8:	3004      	adds	r0, #4
 8014eca:	e7d5      	b.n	8014e78 <__kernel_rem_pio2f+0x60>
 8014ecc:	a908      	add	r1, sp, #32
 8014ece:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014ed2:	9104      	str	r1, [sp, #16]
 8014ed4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8014ed6:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8015118 <__kernel_rem_pio2f+0x300>
 8014eda:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8015114 <__kernel_rem_pio2f+0x2fc>
 8014ede:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8014ee2:	9203      	str	r2, [sp, #12]
 8014ee4:	4654      	mov	r4, sl
 8014ee6:	00a2      	lsls	r2, r4, #2
 8014ee8:	9205      	str	r2, [sp, #20]
 8014eea:	aa58      	add	r2, sp, #352	@ 0x160
 8014eec:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8014ef0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8014ef4:	a944      	add	r1, sp, #272	@ 0x110
 8014ef6:	aa08      	add	r2, sp, #32
 8014ef8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8014efc:	4694      	mov	ip, r2
 8014efe:	4626      	mov	r6, r4
 8014f00:	2e00      	cmp	r6, #0
 8014f02:	f1a0 0004 	sub.w	r0, r0, #4
 8014f06:	dc4c      	bgt.n	8014fa2 <__kernel_rem_pio2f+0x18a>
 8014f08:	4628      	mov	r0, r5
 8014f0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014f0e:	f7ff ff1d 	bl	8014d4c <scalbnf>
 8014f12:	eeb0 8a40 	vmov.f32	s16, s0
 8014f16:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8014f1a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014f1e:	f000 f9ed 	bl	80152fc <floorf>
 8014f22:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8014f26:	eea0 8a67 	vfms.f32	s16, s0, s15
 8014f2a:	2d00      	cmp	r5, #0
 8014f2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014f30:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8014f34:	ee17 9a90 	vmov	r9, s15
 8014f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f3c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014f40:	dd41      	ble.n	8014fc6 <__kernel_rem_pio2f+0x1ae>
 8014f42:	f104 3cff 	add.w	ip, r4, #4294967295
 8014f46:	a908      	add	r1, sp, #32
 8014f48:	f1c5 0e08 	rsb	lr, r5, #8
 8014f4c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8014f50:	fa46 f00e 	asr.w	r0, r6, lr
 8014f54:	4481      	add	r9, r0
 8014f56:	fa00 f00e 	lsl.w	r0, r0, lr
 8014f5a:	1a36      	subs	r6, r6, r0
 8014f5c:	f1c5 0007 	rsb	r0, r5, #7
 8014f60:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8014f64:	4106      	asrs	r6, r0
 8014f66:	2e00      	cmp	r6, #0
 8014f68:	dd3c      	ble.n	8014fe4 <__kernel_rem_pio2f+0x1cc>
 8014f6a:	f04f 0e00 	mov.w	lr, #0
 8014f6e:	f109 0901 	add.w	r9, r9, #1
 8014f72:	4670      	mov	r0, lr
 8014f74:	4574      	cmp	r4, lr
 8014f76:	dc68      	bgt.n	801504a <__kernel_rem_pio2f+0x232>
 8014f78:	2d00      	cmp	r5, #0
 8014f7a:	dd03      	ble.n	8014f84 <__kernel_rem_pio2f+0x16c>
 8014f7c:	2d01      	cmp	r5, #1
 8014f7e:	d074      	beq.n	801506a <__kernel_rem_pio2f+0x252>
 8014f80:	2d02      	cmp	r5, #2
 8014f82:	d07d      	beq.n	8015080 <__kernel_rem_pio2f+0x268>
 8014f84:	2e02      	cmp	r6, #2
 8014f86:	d12d      	bne.n	8014fe4 <__kernel_rem_pio2f+0x1cc>
 8014f88:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014f8c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014f90:	b340      	cbz	r0, 8014fe4 <__kernel_rem_pio2f+0x1cc>
 8014f92:	4628      	mov	r0, r5
 8014f94:	9306      	str	r3, [sp, #24]
 8014f96:	f7ff fed9 	bl	8014d4c <scalbnf>
 8014f9a:	9b06      	ldr	r3, [sp, #24]
 8014f9c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014fa0:	e020      	b.n	8014fe4 <__kernel_rem_pio2f+0x1cc>
 8014fa2:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014fa6:	3e01      	subs	r6, #1
 8014fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014fb0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014fb4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014fb8:	ecac 0a01 	vstmia	ip!, {s0}
 8014fbc:	ed90 0a00 	vldr	s0, [r0]
 8014fc0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014fc4:	e79c      	b.n	8014f00 <__kernel_rem_pio2f+0xe8>
 8014fc6:	d105      	bne.n	8014fd4 <__kernel_rem_pio2f+0x1bc>
 8014fc8:	1e60      	subs	r0, r4, #1
 8014fca:	a908      	add	r1, sp, #32
 8014fcc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8014fd0:	11f6      	asrs	r6, r6, #7
 8014fd2:	e7c8      	b.n	8014f66 <__kernel_rem_pio2f+0x14e>
 8014fd4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014fd8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fe0:	da31      	bge.n	8015046 <__kernel_rem_pio2f+0x22e>
 8014fe2:	2600      	movs	r6, #0
 8014fe4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fec:	f040 8098 	bne.w	8015120 <__kernel_rem_pio2f+0x308>
 8014ff0:	1e60      	subs	r0, r4, #1
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	4550      	cmp	r0, sl
 8014ff6:	da4b      	bge.n	8015090 <__kernel_rem_pio2f+0x278>
 8014ff8:	2a00      	cmp	r2, #0
 8014ffa:	d065      	beq.n	80150c8 <__kernel_rem_pio2f+0x2b0>
 8014ffc:	3c01      	subs	r4, #1
 8014ffe:	ab08      	add	r3, sp, #32
 8015000:	3d08      	subs	r5, #8
 8015002:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d0f8      	beq.n	8014ffc <__kernel_rem_pio2f+0x1e4>
 801500a:	4628      	mov	r0, r5
 801500c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015010:	f7ff fe9c 	bl	8014d4c <scalbnf>
 8015014:	1c63      	adds	r3, r4, #1
 8015016:	aa44      	add	r2, sp, #272	@ 0x110
 8015018:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8015118 <__kernel_rem_pio2f+0x300>
 801501c:	0099      	lsls	r1, r3, #2
 801501e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015022:	4623      	mov	r3, r4
 8015024:	2b00      	cmp	r3, #0
 8015026:	f280 80a9 	bge.w	801517c <__kernel_rem_pio2f+0x364>
 801502a:	4623      	mov	r3, r4
 801502c:	2b00      	cmp	r3, #0
 801502e:	f2c0 80c7 	blt.w	80151c0 <__kernel_rem_pio2f+0x3a8>
 8015032:	aa44      	add	r2, sp, #272	@ 0x110
 8015034:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8015038:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8015110 <__kernel_rem_pio2f+0x2f8>
 801503c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801511c <__kernel_rem_pio2f+0x304>
 8015040:	2000      	movs	r0, #0
 8015042:	1ae2      	subs	r2, r4, r3
 8015044:	e0b1      	b.n	80151aa <__kernel_rem_pio2f+0x392>
 8015046:	2602      	movs	r6, #2
 8015048:	e78f      	b.n	8014f6a <__kernel_rem_pio2f+0x152>
 801504a:	f852 1b04 	ldr.w	r1, [r2], #4
 801504e:	b948      	cbnz	r0, 8015064 <__kernel_rem_pio2f+0x24c>
 8015050:	b121      	cbz	r1, 801505c <__kernel_rem_pio2f+0x244>
 8015052:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8015056:	f842 1c04 	str.w	r1, [r2, #-4]
 801505a:	2101      	movs	r1, #1
 801505c:	f10e 0e01 	add.w	lr, lr, #1
 8015060:	4608      	mov	r0, r1
 8015062:	e787      	b.n	8014f74 <__kernel_rem_pio2f+0x15c>
 8015064:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8015068:	e7f5      	b.n	8015056 <__kernel_rem_pio2f+0x23e>
 801506a:	f104 3cff 	add.w	ip, r4, #4294967295
 801506e:	aa08      	add	r2, sp, #32
 8015070:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8015074:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8015078:	a908      	add	r1, sp, #32
 801507a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801507e:	e781      	b.n	8014f84 <__kernel_rem_pio2f+0x16c>
 8015080:	f104 3cff 	add.w	ip, r4, #4294967295
 8015084:	aa08      	add	r2, sp, #32
 8015086:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801508a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801508e:	e7f3      	b.n	8015078 <__kernel_rem_pio2f+0x260>
 8015090:	a908      	add	r1, sp, #32
 8015092:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8015096:	3801      	subs	r0, #1
 8015098:	430a      	orrs	r2, r1
 801509a:	e7ab      	b.n	8014ff4 <__kernel_rem_pio2f+0x1dc>
 801509c:	3201      	adds	r2, #1
 801509e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80150a2:	2e00      	cmp	r6, #0
 80150a4:	d0fa      	beq.n	801509c <__kernel_rem_pio2f+0x284>
 80150a6:	9905      	ldr	r1, [sp, #20]
 80150a8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80150ac:	eb0d 0001 	add.w	r0, sp, r1
 80150b0:	18e6      	adds	r6, r4, r3
 80150b2:	a91c      	add	r1, sp, #112	@ 0x70
 80150b4:	f104 0c01 	add.w	ip, r4, #1
 80150b8:	384c      	subs	r0, #76	@ 0x4c
 80150ba:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80150be:	4422      	add	r2, r4
 80150c0:	4562      	cmp	r2, ip
 80150c2:	da04      	bge.n	80150ce <__kernel_rem_pio2f+0x2b6>
 80150c4:	4614      	mov	r4, r2
 80150c6:	e70e      	b.n	8014ee6 <__kernel_rem_pio2f+0xce>
 80150c8:	9804      	ldr	r0, [sp, #16]
 80150ca:	2201      	movs	r2, #1
 80150cc:	e7e7      	b.n	801509e <__kernel_rem_pio2f+0x286>
 80150ce:	9903      	ldr	r1, [sp, #12]
 80150d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80150d4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80150d8:	9105      	str	r1, [sp, #20]
 80150da:	ee07 1a90 	vmov	s15, r1
 80150de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80150e2:	2400      	movs	r4, #0
 80150e4:	ece6 7a01 	vstmia	r6!, {s15}
 80150e8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801511c <__kernel_rem_pio2f+0x304>
 80150ec:	46b1      	mov	r9, r6
 80150ee:	455c      	cmp	r4, fp
 80150f0:	dd04      	ble.n	80150fc <__kernel_rem_pio2f+0x2e4>
 80150f2:	ece0 7a01 	vstmia	r0!, {s15}
 80150f6:	f10c 0c01 	add.w	ip, ip, #1
 80150fa:	e7e1      	b.n	80150c0 <__kernel_rem_pio2f+0x2a8>
 80150fc:	ecfe 6a01 	vldmia	lr!, {s13}
 8015100:	ed39 7a01 	vldmdb	r9!, {s14}
 8015104:	3401      	adds	r4, #1
 8015106:	eee6 7a87 	vfma.f32	s15, s13, s14
 801510a:	e7f0      	b.n	80150ee <__kernel_rem_pio2f+0x2d6>
 801510c:	080d2f04 	.word	0x080d2f04
 8015110:	080d2ed8 	.word	0x080d2ed8
 8015114:	43800000 	.word	0x43800000
 8015118:	3b800000 	.word	0x3b800000
 801511c:	00000000 	.word	0x00000000
 8015120:	9b02      	ldr	r3, [sp, #8]
 8015122:	eeb0 0a48 	vmov.f32	s0, s16
 8015126:	eba3 0008 	sub.w	r0, r3, r8
 801512a:	f7ff fe0f 	bl	8014d4c <scalbnf>
 801512e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8015114 <__kernel_rem_pio2f+0x2fc>
 8015132:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8015136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801513a:	db19      	blt.n	8015170 <__kernel_rem_pio2f+0x358>
 801513c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8015118 <__kernel_rem_pio2f+0x300>
 8015140:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015144:	aa08      	add	r2, sp, #32
 8015146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801514a:	3508      	adds	r5, #8
 801514c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015150:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8015154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015158:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801515c:	ee10 3a10 	vmov	r3, s0
 8015160:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8015164:	ee17 3a90 	vmov	r3, s15
 8015168:	3401      	adds	r4, #1
 801516a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801516e:	e74c      	b.n	801500a <__kernel_rem_pio2f+0x1f2>
 8015170:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015174:	aa08      	add	r2, sp, #32
 8015176:	ee10 3a10 	vmov	r3, s0
 801517a:	e7f6      	b.n	801516a <__kernel_rem_pio2f+0x352>
 801517c:	a808      	add	r0, sp, #32
 801517e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8015182:	9001      	str	r0, [sp, #4]
 8015184:	ee07 0a90 	vmov	s15, r0
 8015188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801518c:	3b01      	subs	r3, #1
 801518e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015192:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015196:	ed62 7a01 	vstmdb	r2!, {s15}
 801519a:	e743      	b.n	8015024 <__kernel_rem_pio2f+0x20c>
 801519c:	ecfc 6a01 	vldmia	ip!, {s13}
 80151a0:	ecb5 7a01 	vldmia	r5!, {s14}
 80151a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80151a8:	3001      	adds	r0, #1
 80151aa:	4550      	cmp	r0, sl
 80151ac:	dc01      	bgt.n	80151b2 <__kernel_rem_pio2f+0x39a>
 80151ae:	4282      	cmp	r2, r0
 80151b0:	daf4      	bge.n	801519c <__kernel_rem_pio2f+0x384>
 80151b2:	a858      	add	r0, sp, #352	@ 0x160
 80151b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80151b8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80151bc:	3b01      	subs	r3, #1
 80151be:	e735      	b.n	801502c <__kernel_rem_pio2f+0x214>
 80151c0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80151c2:	2b02      	cmp	r3, #2
 80151c4:	dc09      	bgt.n	80151da <__kernel_rem_pio2f+0x3c2>
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	dc2b      	bgt.n	8015222 <__kernel_rem_pio2f+0x40a>
 80151ca:	d044      	beq.n	8015256 <__kernel_rem_pio2f+0x43e>
 80151cc:	f009 0007 	and.w	r0, r9, #7
 80151d0:	b059      	add	sp, #356	@ 0x164
 80151d2:	ecbd 8b04 	vpop	{d8-d9}
 80151d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151da:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80151dc:	2b03      	cmp	r3, #3
 80151de:	d1f5      	bne.n	80151cc <__kernel_rem_pio2f+0x3b4>
 80151e0:	aa30      	add	r2, sp, #192	@ 0xc0
 80151e2:	1f0b      	subs	r3, r1, #4
 80151e4:	4413      	add	r3, r2
 80151e6:	461a      	mov	r2, r3
 80151e8:	4620      	mov	r0, r4
 80151ea:	2800      	cmp	r0, #0
 80151ec:	f1a2 0204 	sub.w	r2, r2, #4
 80151f0:	dc52      	bgt.n	8015298 <__kernel_rem_pio2f+0x480>
 80151f2:	4622      	mov	r2, r4
 80151f4:	2a01      	cmp	r2, #1
 80151f6:	f1a3 0304 	sub.w	r3, r3, #4
 80151fa:	dc5d      	bgt.n	80152b8 <__kernel_rem_pio2f+0x4a0>
 80151fc:	ab30      	add	r3, sp, #192	@ 0xc0
 80151fe:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801511c <__kernel_rem_pio2f+0x304>
 8015202:	440b      	add	r3, r1
 8015204:	2c01      	cmp	r4, #1
 8015206:	dc67      	bgt.n	80152d8 <__kernel_rem_pio2f+0x4c0>
 8015208:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801520c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8015210:	2e00      	cmp	r6, #0
 8015212:	d167      	bne.n	80152e4 <__kernel_rem_pio2f+0x4cc>
 8015214:	edc7 6a00 	vstr	s13, [r7]
 8015218:	ed87 7a01 	vstr	s14, [r7, #4]
 801521c:	edc7 7a02 	vstr	s15, [r7, #8]
 8015220:	e7d4      	b.n	80151cc <__kernel_rem_pio2f+0x3b4>
 8015222:	ab30      	add	r3, sp, #192	@ 0xc0
 8015224:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801511c <__kernel_rem_pio2f+0x304>
 8015228:	440b      	add	r3, r1
 801522a:	4622      	mov	r2, r4
 801522c:	2a00      	cmp	r2, #0
 801522e:	da24      	bge.n	801527a <__kernel_rem_pio2f+0x462>
 8015230:	b34e      	cbz	r6, 8015286 <__kernel_rem_pio2f+0x46e>
 8015232:	eef1 7a47 	vneg.f32	s15, s14
 8015236:	edc7 7a00 	vstr	s15, [r7]
 801523a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801523e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015242:	aa31      	add	r2, sp, #196	@ 0xc4
 8015244:	2301      	movs	r3, #1
 8015246:	429c      	cmp	r4, r3
 8015248:	da20      	bge.n	801528c <__kernel_rem_pio2f+0x474>
 801524a:	b10e      	cbz	r6, 8015250 <__kernel_rem_pio2f+0x438>
 801524c:	eef1 7a67 	vneg.f32	s15, s15
 8015250:	edc7 7a01 	vstr	s15, [r7, #4]
 8015254:	e7ba      	b.n	80151cc <__kernel_rem_pio2f+0x3b4>
 8015256:	ab30      	add	r3, sp, #192	@ 0xc0
 8015258:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801511c <__kernel_rem_pio2f+0x304>
 801525c:	440b      	add	r3, r1
 801525e:	2c00      	cmp	r4, #0
 8015260:	da05      	bge.n	801526e <__kernel_rem_pio2f+0x456>
 8015262:	b10e      	cbz	r6, 8015268 <__kernel_rem_pio2f+0x450>
 8015264:	eef1 7a67 	vneg.f32	s15, s15
 8015268:	edc7 7a00 	vstr	s15, [r7]
 801526c:	e7ae      	b.n	80151cc <__kernel_rem_pio2f+0x3b4>
 801526e:	ed33 7a01 	vldmdb	r3!, {s14}
 8015272:	3c01      	subs	r4, #1
 8015274:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015278:	e7f1      	b.n	801525e <__kernel_rem_pio2f+0x446>
 801527a:	ed73 7a01 	vldmdb	r3!, {s15}
 801527e:	3a01      	subs	r2, #1
 8015280:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015284:	e7d2      	b.n	801522c <__kernel_rem_pio2f+0x414>
 8015286:	eef0 7a47 	vmov.f32	s15, s14
 801528a:	e7d4      	b.n	8015236 <__kernel_rem_pio2f+0x41e>
 801528c:	ecb2 7a01 	vldmia	r2!, {s14}
 8015290:	3301      	adds	r3, #1
 8015292:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015296:	e7d6      	b.n	8015246 <__kernel_rem_pio2f+0x42e>
 8015298:	edd2 7a00 	vldr	s15, [r2]
 801529c:	edd2 6a01 	vldr	s13, [r2, #4]
 80152a0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80152a4:	3801      	subs	r0, #1
 80152a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80152aa:	ed82 7a00 	vstr	s14, [r2]
 80152ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80152b2:	edc2 7a01 	vstr	s15, [r2, #4]
 80152b6:	e798      	b.n	80151ea <__kernel_rem_pio2f+0x3d2>
 80152b8:	edd3 7a00 	vldr	s15, [r3]
 80152bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80152c0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80152c4:	3a01      	subs	r2, #1
 80152c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80152ca:	ed83 7a00 	vstr	s14, [r3]
 80152ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80152d2:	edc3 7a01 	vstr	s15, [r3, #4]
 80152d6:	e78d      	b.n	80151f4 <__kernel_rem_pio2f+0x3dc>
 80152d8:	ed33 7a01 	vldmdb	r3!, {s14}
 80152dc:	3c01      	subs	r4, #1
 80152de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80152e2:	e78f      	b.n	8015204 <__kernel_rem_pio2f+0x3ec>
 80152e4:	eef1 6a66 	vneg.f32	s13, s13
 80152e8:	eeb1 7a47 	vneg.f32	s14, s14
 80152ec:	edc7 6a00 	vstr	s13, [r7]
 80152f0:	ed87 7a01 	vstr	s14, [r7, #4]
 80152f4:	eef1 7a67 	vneg.f32	s15, s15
 80152f8:	e790      	b.n	801521c <__kernel_rem_pio2f+0x404>
 80152fa:	bf00      	nop

080152fc <floorf>:
 80152fc:	ee10 3a10 	vmov	r3, s0
 8015300:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015304:	3a7f      	subs	r2, #127	@ 0x7f
 8015306:	2a16      	cmp	r2, #22
 8015308:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801530c:	dc2b      	bgt.n	8015366 <floorf+0x6a>
 801530e:	2a00      	cmp	r2, #0
 8015310:	da12      	bge.n	8015338 <floorf+0x3c>
 8015312:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8015378 <floorf+0x7c>
 8015316:	ee30 0a27 	vadd.f32	s0, s0, s15
 801531a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015322:	dd06      	ble.n	8015332 <floorf+0x36>
 8015324:	2b00      	cmp	r3, #0
 8015326:	da24      	bge.n	8015372 <floorf+0x76>
 8015328:	2900      	cmp	r1, #0
 801532a:	4b14      	ldr	r3, [pc, #80]	@ (801537c <floorf+0x80>)
 801532c:	bf08      	it	eq
 801532e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8015332:	ee00 3a10 	vmov	s0, r3
 8015336:	4770      	bx	lr
 8015338:	4911      	ldr	r1, [pc, #68]	@ (8015380 <floorf+0x84>)
 801533a:	4111      	asrs	r1, r2
 801533c:	420b      	tst	r3, r1
 801533e:	d0fa      	beq.n	8015336 <floorf+0x3a>
 8015340:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8015378 <floorf+0x7c>
 8015344:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015348:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801534c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015350:	ddef      	ble.n	8015332 <floorf+0x36>
 8015352:	2b00      	cmp	r3, #0
 8015354:	bfbe      	ittt	lt
 8015356:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801535a:	fa40 f202 	asrlt.w	r2, r0, r2
 801535e:	189b      	addlt	r3, r3, r2
 8015360:	ea23 0301 	bic.w	r3, r3, r1
 8015364:	e7e5      	b.n	8015332 <floorf+0x36>
 8015366:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801536a:	d3e4      	bcc.n	8015336 <floorf+0x3a>
 801536c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015370:	4770      	bx	lr
 8015372:	2300      	movs	r3, #0
 8015374:	e7dd      	b.n	8015332 <floorf+0x36>
 8015376:	bf00      	nop
 8015378:	7149f2ca 	.word	0x7149f2ca
 801537c:	bf800000 	.word	0xbf800000
 8015380:	007fffff 	.word	0x007fffff

08015384 <_init>:
 8015384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015386:	bf00      	nop
 8015388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801538a:	bc08      	pop	{r3}
 801538c:	469e      	mov	lr, r3
 801538e:	4770      	bx	lr

08015390 <_fini>:
 8015390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015392:	bf00      	nop
 8015394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015396:	bc08      	pop	{r3}
 8015398:	469e      	mov	lr, r3
 801539a:	4770      	bx	lr
