
Microphone_wav_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000155a0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000bd880  08015780  08015780  00016780  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080d3000  080d3000  000d59d4  2**0
                  CONTENTS
  4 .ARM          00000008  080d3000  080d3000  000d4000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080d3008  080d3008  000d59d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080d3008  080d3008  000d4008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080d300c  080d300c  000d400c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000009d4  20000000  080d3010  000d5000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005428  200009d4  080d39e4  000d59d4  2**2
                  ALLOC
 10 ._user_heap_stack 00010004  20005dfc  080d39e4  000d5dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000d59d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000229b7  00000000  00000000  000d5a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005718  00000000  00000000  000f83bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  000fdad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001385  00000000  00000000  000ff558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dc28  00000000  00000000  001008dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026e9a  00000000  00000000  0012e505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105325  00000000  00000000  0015539f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000f4  00000000  00000000  0025a6c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a18  00000000  00000000  0025a7b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  002621d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003325  00000000  00000000  00262238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  0026555d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009d4 	.word	0x200009d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015758 	.word	0x08015758

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009d8 	.word	0x200009d8
 800020c:	08015758 	.word	0x08015758

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd8 <MX_CRC_Init+0x40>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000fc2:	f003 fdcb 	bl	8004b5c <HAL_CRC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000fcc:	f000 ff00 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200009f0 	.word	0x200009f0
 8000fd8:	40023000 	.word	0x40023000

08000fdc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <HAL_CRC_MspInit+0x38>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10b      	bne.n	8001006 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <HAL_CRC_MspInit+0x3c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a09      	ldr	r2, [pc, #36]	@ (8001018 <HAL_CRC_MspInit+0x3c>)
 8000ff4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <HAL_CRC_MspInit+0x3c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023000 	.word	0x40023000
 8001018:	40023800 	.word	0x40023800

0800101c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001022:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <MX_DMA_Init+0x58>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a13      	ldr	r2, [pc, #76]	@ (8001074 <MX_DMA_Init+0x58>)
 8001028:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <MX_DMA_Init+0x58>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2039      	movs	r0, #57	@ 0x39
 8001040:	f003 fd55 	bl	8004aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001044:	2039      	movs	r0, #57	@ 0x39
 8001046:	f003 fd6e 	bl	8004b26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2102      	movs	r1, #2
 800104e:	203b      	movs	r0, #59	@ 0x3b
 8001050:	f003 fd4d 	bl	8004aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001054:	203b      	movs	r0, #59	@ 0x3b
 8001056:	f003 fd66 	bl	8004b26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 2, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2102      	movs	r1, #2
 800105e:	2045      	movs	r0, #69	@ 0x45
 8001060:	f003 fd45 	bl	8004aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001064:	2045      	movs	r0, #69	@ 0x45
 8001066:	f003 fd5e 	bl	8004b26 <HAL_NVIC_EnableIRQ>

}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800

08001078 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b090      	sub	sp, #64	@ 0x40
 800107c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800108e:	4ba6      	ldr	r3, [pc, #664]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4aa5      	ldr	r2, [pc, #660]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 8001094:	f043 0310 	orr.w	r3, r3, #16
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4ba3      	ldr	r3, [pc, #652]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f003 0310 	and.w	r3, r3, #16
 80010a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a6:	4ba0      	ldr	r3, [pc, #640]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a9f      	ldr	r2, [pc, #636]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 80010ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b9d      	ldr	r3, [pc, #628]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80010bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b9a      	ldr	r3, [pc, #616]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a99      	ldr	r2, [pc, #612]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b97      	ldr	r3, [pc, #604]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	623b      	str	r3, [r7, #32]
 80010d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d6:	4b94      	ldr	r3, [pc, #592]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a93      	ldr	r2, [pc, #588]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b91      	ldr	r3, [pc, #580]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	4b8e      	ldr	r3, [pc, #568]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	4a8d      	ldr	r2, [pc, #564]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fa:	4b8b      	ldr	r3, [pc, #556]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b88      	ldr	r3, [pc, #544]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a87      	ldr	r2, [pc, #540]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b85      	ldr	r3, [pc, #532]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800111e:	4b82      	ldr	r3, [pc, #520]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a81      	ldr	r2, [pc, #516]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 8001124:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b7f      	ldr	r3, [pc, #508]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001136:	4b7c      	ldr	r3, [pc, #496]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a7b      	ldr	r2, [pc, #492]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 800113c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b79      	ldr	r3, [pc, #484]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800114e:	4b76      	ldr	r3, [pc, #472]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a75      	ldr	r2, [pc, #468]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 8001154:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b73      	ldr	r3, [pc, #460]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001166:	4b70      	ldr	r3, [pc, #448]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a6f      	ldr	r2, [pc, #444]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b6d      	ldr	r3, [pc, #436]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117e:	4b6a      	ldr	r3, [pc, #424]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a69      	ldr	r2, [pc, #420]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 8001184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b67      	ldr	r3, [pc, #412]	@ (8001328 <MX_GPIO_Init+0x2b0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2102      	movs	r1, #2
 800119a:	4864      	ldr	r0, [pc, #400]	@ (800132c <MX_GPIO_Init+0x2b4>)
 800119c:	f004 fd14 	bl	8005bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE8 PE9 PE11 PE14
                           PE7 PE10 PE12 PE15
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 80011a0:	f64f 738f 	movw	r3, #65423	@ 0xff8f
 80011a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a6:	2303      	movs	r3, #3
 80011a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011b2:	4619      	mov	r1, r3
 80011b4:	485e      	ldr	r0, [pc, #376]	@ (8001330 <MX_GPIO_Init+0x2b8>)
 80011b6:	f004 fa37 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 80011ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c0:	2303      	movs	r3, #3
 80011c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011cc:	4619      	mov	r1, r3
 80011ce:	4859      	ldr	r0, [pc, #356]	@ (8001334 <MX_GPIO_Init+0x2bc>)
 80011d0:	f004 fa2a 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 80011d4:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80011d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011da:	2303      	movs	r3, #3
 80011dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011e6:	4619      	mov	r1, r3
 80011e8:	4853      	ldr	r0, [pc, #332]	@ (8001338 <MX_GPIO_Init+0x2c0>)
 80011ea:	f004 fa1d 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD15
                           PD10 PD14 PD9 PD8
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 80011ee:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 80011f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f4:	2303      	movs	r3, #3
 80011f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001200:	4619      	mov	r1, r3
 8001202:	484e      	ldr	r0, [pc, #312]	@ (800133c <MX_GPIO_Init+0x2c4>)
 8001204:	f004 fa10 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 8001208:	f649 53ff 	movw	r3, #40447	@ 0x9dff
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120e:	2303      	movs	r3, #3
 8001210:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800121a:	4619      	mov	r1, r3
 800121c:	4848      	ldr	r0, [pc, #288]	@ (8001340 <MX_GPIO_Init+0x2c8>)
 800121e:	f004 fa03 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8001222:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001226:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001228:	2303      	movs	r3, #3
 800122a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001230:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001234:	4619      	mov	r1, r3
 8001236:	4843      	ldr	r0, [pc, #268]	@ (8001344 <MX_GPIO_Init+0x2cc>)
 8001238:	f004 f9f6 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC9 PC7 PC6 PC3
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 800123c:	f64c 63ff 	movw	r3, #52991	@ 0xceff
 8001240:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001242:	2303      	movs	r3, #3
 8001244:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800124e:	4619      	mov	r1, r3
 8001250:	483d      	ldr	r0, [pc, #244]	@ (8001348 <MX_GPIO_Init+0x2d0>)
 8001252:	f004 f9e9 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI12 PI9 PI0 PI13
                           PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001256:	f24f 73fd 	movw	r3, #63485	@ 0xf7fd
 800125a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_13
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125c:	2303      	movs	r3, #3
 800125e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001264:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001268:	4619      	mov	r1, r3
 800126a:	4830      	ldr	r0, [pc, #192]	@ (800132c <MX_GPIO_Init+0x2b4>)
 800126c:	f004 f9dc 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001270:	23ff      	movs	r3, #255	@ 0xff
 8001272:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001274:	2303      	movs	r3, #3
 8001276:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800127c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001280:	4619      	mov	r1, r3
 8001282:	4832      	ldr	r0, [pc, #200]	@ (800134c <MX_GPIO_Init+0x2d4>)
 8001284:	f004 f9d0 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001288:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800128c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800129a:	4619      	mov	r1, r3
 800129c:	482a      	ldr	r0, [pc, #168]	@ (8001348 <MX_GPIO_Init+0x2d0>)
 800129e:	f004 f9c3 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a8:	2303      	movs	r3, #3
 80012aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012b4:	4619      	mov	r1, r3
 80012b6:	4826      	ldr	r0, [pc, #152]	@ (8001350 <MX_GPIO_Init+0x2d8>)
 80012b8:	f004 f9b6 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 80012bc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c2:	2303      	movs	r3, #3
 80012c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ce:	4619      	mov	r1, r3
 80012d0:	4820      	ldr	r0, [pc, #128]	@ (8001354 <MX_GPIO_Init+0x2dc>)
 80012d2:	f004 f9a9 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 80012d6:	2302      	movs	r3, #2
 80012d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ea:	4619      	mov	r1, r3
 80012ec:	480f      	ldr	r0, [pc, #60]	@ (800132c <MX_GPIO_Init+0x2b4>)
 80012ee:	f004 f99b 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80012f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001306:	4619      	mov	r1, r3
 8001308:	4808      	ldr	r0, [pc, #32]	@ (800132c <MX_GPIO_Init+0x2b4>)
 800130a:	f004 f98d 	bl	8005628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	2028      	movs	r0, #40	@ 0x28
 8001314:	f003 fbeb 	bl	8004aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001318:	2028      	movs	r0, #40	@ 0x28
 800131a:	f003 fc04 	bl	8004b26 <HAL_NVIC_EnableIRQ>

}
 800131e:	bf00      	nop
 8001320:	3740      	adds	r7, #64	@ 0x40
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800
 800132c:	40022000 	.word	0x40022000
 8001330:	40021000 	.word	0x40021000
 8001334:	40021800 	.word	0x40021800
 8001338:	40020400 	.word	0x40020400
 800133c:	40020c00 	.word	0x40020c00
 8001340:	40020000 	.word	0x40020000
 8001344:	40022400 	.word	0x40022400
 8001348:	40020800 	.word	0x40020800
 800134c:	40022800 	.word	0x40022800
 8001350:	40021400 	.word	0x40021400
 8001354:	40021c00 	.word	0x40021c00

08001358 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800135c:	f3bf 8f4f 	dsb	sy
}
 8001360:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001362:	f3bf 8f6f 	isb	sy
}
 8001366:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001368:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <SCB_EnableICache+0x48>)
 800136a:	2200      	movs	r2, #0
 800136c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001370:	f3bf 8f4f 	dsb	sy
}
 8001374:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001376:	f3bf 8f6f 	isb	sy
}
 800137a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <SCB_EnableICache+0x48>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	4a07      	ldr	r2, [pc, #28]	@ (80013a0 <SCB_EnableICache+0x48>)
 8001382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001386:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001388:	f3bf 8f4f 	dsb	sy
}
 800138c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800138e:	f3bf 8f6f 	isb	sy
}
 8001392:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80013aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <SCB_EnableDCache+0x84>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80013b2:	f3bf 8f4f 	dsb	sy
}
 80013b6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <SCB_EnableDCache+0x84>)
 80013ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013be:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	0b5b      	lsrs	r3, r3, #13
 80013c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013c8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	08db      	lsrs	r3, r3, #3
 80013ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013d2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	015a      	lsls	r2, r3, #5
 80013d8:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80013dc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80013e2:	4911      	ldr	r1, [pc, #68]	@ (8001428 <SCB_EnableDCache+0x84>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1e5a      	subs	r2, r3, #1
 80013ee:	60ba      	str	r2, [r7, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1ef      	bne.n	80013d4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	1e5a      	subs	r2, r3, #1
 80013f8:	60fa      	str	r2, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1e5      	bne.n	80013ca <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <SCB_EnableDCache+0x84>)
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	4a07      	ldr	r2, [pc, #28]	@ (8001428 <SCB_EnableDCache+0x84>)
 800140a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800140e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001410:	f3bf 8f4f 	dsb	sy
}
 8001414:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001416:	f3bf 8f6f 	isb	sy
}
 800141a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <AI_Init.0>:
	ai_buffer ai_output[AI_NETWORK_OUT_NUM];

	/**
	 * @brief Initialize the AI model
	 */
	void AI_Init(void) {
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b093      	sub	sp, #76	@ 0x4c
 8001430:	af00      	add	r7, sp, #0
 8001432:	4664      	mov	r4, ip
 8001434:	f8c7 c004 	str.w	ip, [r7, #4]
	    ai_error ai_err;

	    // Set working memory and get weights/biases from the model
	    ai_network_params ai_params = {
	        AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8001438:	f00d f8e4 	bl	800e604 <ai_network_data_weights_get>
 800143c:	4602      	mov	r2, r0
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f00d f8a7 	bl	800e598 <ai_network_data_weights_buffer_get>
	        AI_NETWORK_DATA_ACTIVATIONS(activations)
 800144a:	f64f 235c 	movw	r3, #64092	@ 0xfa5c
 800144e:	4423      	add	r3, r4
 8001450:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001454:	4619      	mov	r1, r3
 8001456:	4610      	mov	r0, r2
 8001458:	f00d f868 	bl	800e52c <ai_network_data_activations_buffer_get>
	    };

	    // Create and initialize the network
	    ai_err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800145c:	f64f 2358 	movw	r3, #64088	@ 0xfa58
 8001460:	4423      	add	r3, r4
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f00c ffcb 	bl	800e400 <ai_network_create>
 800146a:	4603      	mov	r3, r0
 800146c:	647b      	str	r3, [r7, #68]	@ 0x44
	    if (ai_err.type != AI_ERROR_NONE) {
 800146e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00b      	beq.n	800148e <AI_Init.0+0x62>
	        printf("AI network creation failed: type=%d, code=%d\r\n", ai_err.type, ai_err.code);
 8001476:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800147a:	4619      	mov	r1, r3
 800147c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800147e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001482:	461a      	mov	r2, r3
 8001484:	4823      	ldr	r0, [pc, #140]	@ (8001514 <AI_Init.0+0xe8>)
 8001486:	f012 fa25 	bl	80138d4 <iprintf>
	        Error_Handler();
 800148a:	f000 fca1 	bl	8001dd0 <Error_Handler>
	    }

	    if (!ai_network_init(network, &ai_params)) {
 800148e:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 8001492:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	@ 0xa58
 8001496:	f107 020c 	add.w	r2, r7, #12
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f00c fff9 	bl	800e494 <ai_network_init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f083 0301 	eor.w	r3, r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d014      	beq.n	80014d8 <AI_Init.0+0xac>
	        ai_err = ai_network_get_error(network);
 80014ae:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 80014b2:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	@ 0xa58
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00c ff96 	bl	800e3e8 <ai_network_get_error>
 80014bc:	4603      	mov	r3, r0
 80014be:	647b      	str	r3, [r7, #68]	@ 0x44
	        printf("AI network initialization failed: type=%d, code=%d\r\n", ai_err.type, ai_err.code);
 80014c0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80014c4:	4619      	mov	r1, r3
 80014c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014c8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80014cc:	461a      	mov	r2, r3
 80014ce:	4812      	ldr	r0, [pc, #72]	@ (8001518 <AI_Init.0+0xec>)
 80014d0:	f012 fa00 	bl	80138d4 <iprintf>
	        Error_Handler();
 80014d4:	f000 fc7c 	bl	8001dd0 <Error_Handler>
	    }

	    // Retrieve input and output buffer structures dynamically
	    ai_network_inputs_get(network, ai_input);
 80014d8:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 80014dc:	f8d3 2a58 	ldr.w	r2, [r3, #2648]	@ 0xa58
 80014e0:	f64f 233c 	movw	r3, #64060	@ 0xfa3c
 80014e4:	4423      	add	r3, r4
 80014e6:	4619      	mov	r1, r3
 80014e8:	4610      	mov	r0, r2
 80014ea:	f00c ff9f 	bl	800e42c <ai_network_inputs_get>
	    ai_network_outputs_get(network, ai_output);
 80014ee:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 80014f2:	f8d3 2a58 	ldr.w	r2, [r3, #2648]	@ 0xa58
 80014f6:	f64f 2320 	movw	r3, #64032	@ 0xfa20
 80014fa:	4423      	add	r3, r4
 80014fc:	4619      	mov	r1, r3
 80014fe:	4610      	mov	r0, r2
 8001500:	f00c ffae 	bl	800e460 <ai_network_outputs_get>

	    printf("AI model initialized successfully.\r\n");
 8001504:	4805      	ldr	r0, [pc, #20]	@ (800151c <AI_Init.0+0xf0>)
 8001506:	f012 fa4d 	bl	80139a4 <puts>
	}
 800150a:	bf00      	nop
 800150c:	374c      	adds	r7, #76	@ 0x4c
 800150e:	46bd      	mov	sp, r7
 8001510:	bd90      	pop	{r4, r7, pc}
 8001512:	bf00      	nop
 8001514:	08015780 	.word	0x08015780
 8001518:	080157b0 	.word	0x080157b0
 800151c:	080157e8 	.word	0x080157e8

08001520 <main>:
{
 8001520:	b5b0      	push	{r4, r5, r7, lr}
 8001522:	f5ad 3d00 	sub.w	sp, sp, #131072	@ 0x20000
 8001526:	b0b6      	sub	sp, #216	@ 0xd8
 8001528:	af00      	add	r7, sp, #0
int main(void)
 800152a:	4b6c      	ldr	r3, [pc, #432]	@ (80016dc <main+0x1bc>)
 800152c:	443b      	add	r3, r7
 800152e:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8001532:	f502 32f8 	add.w	r2, r2, #126976	@ 0x1f000
 8001536:	f8c2 3fec 	str.w	r3, [r2, #4076]	@ 0xfec
	int buf_len = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	4a68      	ldr	r2, [pc, #416]	@ (80016e0 <main+0x1c0>)
 800153e:	443a      	add	r2, r7
 8001540:	6013      	str	r3, [r2, #0]
	const char* activities[AI_NETWORK_OUT_1_SIZE] = {
 8001542:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001546:	4a67      	ldr	r2, [pc, #412]	@ (80016e4 <main+0x1c4>)
 8001548:	f1a3 04a0 	sub.w	r4, r3, #160	@ 0xa0
 800154c:	4615      	mov	r5, r2
 800154e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001552:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001556:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_handle network = AI_HANDLE_NULL;
 800155a:	2300      	movs	r3, #0
 800155c:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8001560:	f502 4270 	add.w	r2, r2, #61440	@ 0xf000
 8001564:	f8c2 39b8 	str.w	r3, [r2, #2488]	@ 0x9b8
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001568:	f7ff fef6 	bl	8001358 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800156c:	f7ff ff1a 	bl	80013a4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001570:	f003 f960 	bl	8004834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001574:	f000 f944 	bl	8001800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001578:	f7ff fd7e 	bl	8001078 <MX_GPIO_Init>
  MX_DMA_Init();
 800157c:	f7ff fd4e 	bl	800101c <MX_DMA_Init>
  MX_SAI1_Init();
 8001580:	f000 fc2c 	bl	8001ddc <MX_SAI1_Init>
  MX_USART1_UART_Init();
 8001584:	f000 ffe4 	bl	8002550 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001588:	f009 fecc 	bl	800b324 <MX_FATFS_Init>
  MX_SDMMC1_SD_Init();
 800158c:	f000 fd4a 	bl	8002024 <MX_SDMMC1_SD_Init>
  MX_CRC_Init();
 8001590:	f7ff fd02 	bl	8000f98 <MX_CRC_Init>
  __HAL_RCC_CRC_CLK_ENABLE();
 8001594:	4b54      	ldr	r3, [pc, #336]	@ (80016e8 <main+0x1c8>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001598:	4a53      	ldr	r2, [pc, #332]	@ (80016e8 <main+0x1c8>)
 800159a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800159e:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a0:	4b51      	ldr	r3, [pc, #324]	@ (80016e8 <main+0x1c8>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015a8:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 80015ac:	f842 3cd8 	str.w	r3, [r2, #-216]
 80015b0:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80015b4:	f853 3cd8 	ldr.w	r3, [r3, #-216]
  /* USER CODE BEGIN 2 */

  /* We format the SD card */
  printf("SD card init...\r\n");
 80015b8:	484c      	ldr	r0, [pc, #304]	@ (80016ec <main+0x1cc>)
 80015ba:	f012 f9f3 	bl	80139a4 <puts>
  //SDCard_InitAndFormat();

  AI_Init();
 80015be:	4b4c      	ldr	r3, [pc, #304]	@ (80016f0 <main+0x1d0>)
 80015c0:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80015c4:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 80015c8:	443b      	add	r3, r7
 80015ca:	469c      	mov	ip, r3
 80015cc:	f7ff ff2e 	bl	800142c <AI_Init.0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t write_index = 0; // AI stuff
 80015d0:	2300      	movs	r3, #0
 80015d2:	4a48      	ldr	r2, [pc, #288]	@ (80016f4 <main+0x1d4>)
 80015d4:	443a      	add	r2, r7
 80015d6:	6013      	str	r3, [r2, #0]
    while (1)
    {
        check_button_release();
 80015d8:	f000 f9ac 	bl	8001934 <check_button_release>
        printf("Waiting for input to record...\r\n");
 80015dc:	4846      	ldr	r0, [pc, #280]	@ (80016f8 <main+0x1d8>)
 80015de:	f012 f9e1 	bl	80139a4 <puts>
        HAL_Delay(1000);
 80015e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015e6:	f003 f983 	bl	80048f0 <HAL_Delay>
      /* USER CODE END WHILE */

        if (button_pressed == 1)
 80015ea:	4b44      	ldr	r3, [pc, #272]	@ (80016fc <main+0x1dc>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d16f      	bne.n	80016d4 <main+0x1b4>
        {
            /* Toggle the green led to visually show action */
            HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 80015f4:	2102      	movs	r1, #2
 80015f6:	4842      	ldr	r0, [pc, #264]	@ (8001700 <main+0x1e0>)
 80015f8:	f004 faff 	bl	8005bfa <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 80015fc:	2064      	movs	r0, #100	@ 0x64
 80015fe:	f003 f977 	bl	80048f0 <HAL_Delay>
            HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8001602:	2102      	movs	r1, #2
 8001604:	483e      	ldr	r0, [pc, #248]	@ (8001700 <main+0x1e0>)
 8001606:	f004 faf8 	bl	8005bfa <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 800160a:	2064      	movs	r0, #100	@ 0x64
 800160c:	f003 f970 	bl	80048f0 <HAL_Delay>

            /* If the program is not already recording... */
            if (AudioState == AUDIO_STATE_IDLE)
 8001610:	4b3c      	ldr	r3, [pc, #240]	@ (8001704 <main+0x1e4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d108      	bne.n	800162a <main+0x10a>
            {
                /* Configure the audio recorder: sampling frequency, bits-depth, number of channels */
                AUDIO_REC_Start();
 8001618:	f009 fb18 	bl	800ac4c <AUDIO_REC_Start>
            }

            /* While recording, we loop the recording process */
            while (AudioState == AUDIO_STATE_RECORD)
 800161c:	e005      	b.n	800162a <main+0x10a>
            {
                status = AUDIO_REC_Process();
 800161e:	f009 fb9b 	bl	800ad58 <AUDIO_REC_Process>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	4b38      	ldr	r3, [pc, #224]	@ (8001708 <main+0x1e8>)
 8001628:	701a      	strb	r2, [r3, #0]
            while (AudioState == AUDIO_STATE_RECORD)
 800162a:	4b36      	ldr	r3, [pc, #216]	@ (8001704 <main+0x1e4>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b05      	cmp	r3, #5
 8001630:	d0f5      	beq.n	800161e <main+0xfe>
            }

            /* Once we stop recording, we correctly close the .WAV */
            if (AudioState == AUDIO_STATE_STOP)
 8001632:	4b34      	ldr	r3, [pc, #208]	@ (8001704 <main+0x1e4>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b0a      	cmp	r3, #10
 8001638:	d108      	bne.n	800164c <main+0x12c>
            {
                status = AUDIO_REC_Process();
 800163a:	f009 fb8d 	bl	800ad58 <AUDIO_REC_Process>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <main+0x1e8>)
 8001644:	701a      	strb	r2, [r3, #0]
                printf("Recording stopped.\r\n");
 8001646:	4831      	ldr	r0, [pc, #196]	@ (800170c <main+0x1ec>)
 8001648:	f012 f9ac 	bl	80139a4 <puts>
            }

            ReadWAVFileInfo("WAVE.wav");
 800164c:	4830      	ldr	r0, [pc, #192]	@ (8001710 <main+0x1f0>)
 800164e:	f000 f985 	bl	800195c <ReadWAVFileInfo>

            // Process the WAV file for AI inference
            if (status == 0)  // Ensure the WAV file was properly processed
 8001652:	4b2d      	ldr	r3, [pc, #180]	@ (8001708 <main+0x1e8>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d139      	bne.n	80016ce <main+0x1ae>
            {
                int ret = preprocess_wav_data(in_data);
 800165a:	4b25      	ldr	r3, [pc, #148]	@ (80016f0 <main+0x1d0>)
 800165c:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8001660:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8001664:	443b      	add	r3, r7
 8001666:	3330      	adds	r3, #48	@ 0x30
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fb69 	bl	8001d40 <preprocess_wav_data>
 800166e:	4b29      	ldr	r3, [pc, #164]	@ (8001714 <main+0x1f4>)
 8001670:	443b      	add	r3, r7
 8001672:	6018      	str	r0, [r3, #0]
                if (ret == 0)  // Check if preprocessing was successful
 8001674:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <main+0x1f4>)
 8001676:	443b      	add	r3, r7
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d123      	bne.n	80016c6 <main+0x1a6>
                {
                    // Run inference on the preprocessed data
                    int activity_index = AI_Process(in_data);
 800167e:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <main+0x1d0>)
 8001680:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8001684:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8001688:	443b      	add	r3, r7
 800168a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <main+0x1d0>)
 8001690:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8001694:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8001698:	443b      	add	r3, r7
 800169a:	469c      	mov	ip, r3
 800169c:	4610      	mov	r0, r2
 800169e:	f000 f843 	bl	8001728 <AI_Process.1>
 80016a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <main+0x1f8>)
 80016a4:	443b      	add	r3, r7
 80016a6:	6018      	str	r0, [r3, #0]
                    printf("Predicted activity: %s\r\n", activities[activity_index]);
 80016a8:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <main+0x1f8>)
 80016b0:	443b      	add	r3, r7
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 80016bc:	4619      	mov	r1, r3
 80016be:	4817      	ldr	r0, [pc, #92]	@ (800171c <main+0x1fc>)
 80016c0:	f012 f908 	bl	80138d4 <iprintf>
 80016c4:	e006      	b.n	80016d4 <main+0x1b4>
                }
                else
                {
                    printf("Error: WAV file preprocessing failed.\r\n");
 80016c6:	4816      	ldr	r0, [pc, #88]	@ (8001720 <main+0x200>)
 80016c8:	f012 f96c 	bl	80139a4 <puts>
 80016cc:	e002      	b.n	80016d4 <main+0x1b4>
                }
            }
            else
            {
                printf("Error: WAV file info reading failed.\r\n");
 80016ce:	4815      	ldr	r0, [pc, #84]	@ (8001724 <main+0x204>)
 80016d0:	f012 f968 	bl	80139a4 <puts>
            }
        }

        HAL_Delay(100);  // Small delay for stability
 80016d4:	2064      	movs	r0, #100	@ 0x64
 80016d6:	f003 f90b 	bl	80048f0 <HAL_Delay>
    {
 80016da:	e77d      	b.n	80015d8 <main+0xb8>
 80016dc:	000200e8 	.word	0x000200e8
 80016e0:	000200d4 	.word	0x000200d4
 80016e4:	080158f4 	.word	0x080158f4
 80016e8:	40023800 	.word	0x40023800
 80016ec:	0801580c 	.word	0x0801580c
 80016f0:	fffdff60 	.word	0xfffdff60
 80016f4:	000200d0 	.word	0x000200d0
 80016f8:	08015820 	.word	0x08015820
 80016fc:	20000a16 	.word	0x20000a16
 8001700:	40022000 	.word	0x40022000
 8001704:	20000a14 	.word	0x20000a14
 8001708:	20000a15 	.word	0x20000a15
 800170c:	08015840 	.word	0x08015840
 8001710:	08015854 	.word	0x08015854
 8001714:	000200cc 	.word	0x000200cc
 8001718:	000200c8 	.word	0x000200c8
 800171c:	08015860 	.word	0x08015860
 8001720:	0801587c 	.word	0x0801587c
 8001724:	080158a4 	.word	0x080158a4

08001728 <AI_Process.1>:
	int AI_Process(const float* input_data) {
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b089      	sub	sp, #36	@ 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	4664      	mov	r4, ip
 8001732:	f8c7 c000 	str.w	ip, [r7]
	    memcpy(in_data, input_data, sizeof(in_data));
 8001736:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800173a:	f64f 12f0 	movw	r2, #63984	@ 0xf9f0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4618      	mov	r0, r3
 8001742:	f012 fa9e 	bl	8013c82 <memcpy>
	    ai_i32 nbatch = ai_network_run(network, ai_input, ai_output);
 8001746:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 800174a:	f8d3 0a58 	ldr.w	r0, [r3, #2648]	@ 0xa58
 800174e:	f64f 233c 	movw	r3, #64060	@ 0xfa3c
 8001752:	4423      	add	r3, r4
 8001754:	f64f 2220 	movw	r2, #64032	@ 0xfa20
 8001758:	4422      	add	r2, r4
 800175a:	4619      	mov	r1, r3
 800175c:	f00c fed6 	bl	800e50c <ai_network_run>
 8001760:	6138      	str	r0, [r7, #16]
	    if (nbatch != 1) {
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d013      	beq.n	8001790 <AI_Process.1+0x68>
	        ai_error ai_err = ai_network_get_error(network);
 8001768:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 800176c:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	@ 0xa58
 8001770:	4618      	mov	r0, r3
 8001772:	f00c fe39 	bl	800e3e8 <ai_network_get_error>
 8001776:	4603      	mov	r3, r0
 8001778:	60fb      	str	r3, [r7, #12]
	        printf("AI model inference failed: type=%d, code=%d\r\n", ai_err.type, ai_err.code);
 800177a:	7b3b      	ldrb	r3, [r7, #12]
 800177c:	4619      	mov	r1, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001784:	461a      	mov	r2, r3
 8001786:	481c      	ldr	r0, [pc, #112]	@ (80017f8 <AI_Process.1+0xd0>)
 8001788:	f012 f8a4 	bl	80138d4 <iprintf>
	        Error_Handler();
 800178c:	f000 fb20 	bl	8001dd0 <Error_Handler>
	    float max_val = out_data[0];
 8001790:	69a3      	ldr	r3, [r4, #24]
 8001792:	61fb      	str	r3, [r7, #28]
	    int max_idx = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
	    for (int i = 1; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8001798:	2301      	movs	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e017      	b.n	80017ce <AI_Process.1+0xa6>
	        if (out_data[i] > max_val) {
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3306      	adds	r3, #6
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4423      	add	r3, r4
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80017ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	d507      	bpl.n	80017c8 <AI_Process.1+0xa0>
	            max_val = out_data[i];
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3306      	adds	r3, #6
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4423      	add	r3, r4
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	61fb      	str	r3, [r7, #28]
	            max_idx = i;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	61bb      	str	r3, [r7, #24]
	    for (int i = 1; i < AI_NETWORK_OUT_1_SIZE; i++) {
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	dde4      	ble.n	800179e <AI_Process.1+0x76>
	    printf("Predicted activity: %s (confidence: %.2f)\r\n", activities[max_idx], max_val);
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 80017da:	69f8      	ldr	r0, [r7, #28]
 80017dc:	f7fe ff34 	bl	8000648 <__aeabi_f2d>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4621      	mov	r1, r4
 80017e6:	4805      	ldr	r0, [pc, #20]	@ (80017fc <AI_Process.1+0xd4>)
 80017e8:	f012 f874 	bl	80138d4 <iprintf>
	    return max_idx;
 80017ec:	69bb      	ldr	r3, [r7, #24]
	}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	@ 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd90      	pop	{r4, r7, pc}
 80017f6:	bf00      	nop
 80017f8:	0801590c 	.word	0x0801590c
 80017fc:	0801593c 	.word	0x0801593c

08001800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b094      	sub	sp, #80	@ 0x50
 8001804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001806:	f107 0320 	add.w	r3, r7, #32
 800180a:	2230      	movs	r2, #48	@ 0x30
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f012 f9a8 	bl	8013b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001824:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <SystemClock_Config+0xd0>)
 8001826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001828:	4a29      	ldr	r2, [pc, #164]	@ (80018d0 <SystemClock_Config+0xd0>)
 800182a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800182e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001830:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <SystemClock_Config+0xd0>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800183c:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <SystemClock_Config+0xd4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a24      	ldr	r2, [pc, #144]	@ (80018d4 <SystemClock_Config+0xd4>)
 8001842:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b22      	ldr	r3, [pc, #136]	@ (80018d4 <SystemClock_Config+0xd4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001854:	2302      	movs	r3, #2
 8001856:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001858:	2301      	movs	r3, #1
 800185a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800185c:	2310      	movs	r3, #16
 800185e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001860:	2302      	movs	r3, #2
 8001862:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001864:	2300      	movs	r3, #0
 8001866:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001868:	2308      	movs	r3, #8
 800186a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 800186c:	23c8      	movs	r3, #200	@ 0xc8
 800186e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001870:	2302      	movs	r3, #2
 8001872:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001874:	2308      	movs	r3, #8
 8001876:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001878:	f107 0320 	add.w	r3, r7, #32
 800187c:	4618      	mov	r0, r3
 800187e:	f005 f81d 	bl	80068bc <HAL_RCC_OscConfig>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001888:	f000 faa2 	bl	8001dd0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800188c:	f004 ffc6 	bl	800681c <HAL_PWREx_EnableOverDrive>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001896:	f000 fa9b 	bl	8001dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189a:	230f      	movs	r3, #15
 800189c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800189e:	2302      	movs	r3, #2
 80018a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	2106      	movs	r1, #6
 80018b8:	4618      	mov	r0, r3
 80018ba:	f005 faa3 	bl	8006e04 <HAL_RCC_ClockConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80018c4:	f000 fa84 	bl	8001dd0 <Error_Handler>
  }
}
 80018c8:	bf00      	nop
 80018ca:	3750      	adds	r7, #80	@ 0x50
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40007000 	.word	0x40007000

080018d8 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* Needed to send messages easier to terminal for debugging */
PUTCHAR_PROTOTYPE
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 80018e0:	1d39      	adds	r1, r7, #4
 80018e2:	2364      	movs	r3, #100	@ 0x64
 80018e4:	2201      	movs	r2, #1
 80018e6:	4804      	ldr	r0, [pc, #16]	@ (80018f8 <__io_putchar+0x20>)
 80018e8:	f007 ffc6 	bl	8009878 <HAL_UART_Transmit>
return ch;
 80018ec:	687b      	ldr	r3, [r7, #4]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000c48 	.word	0x20000c48

080018fc <HAL_GPIO_EXTI_Callback>:
/* ======================================================== */


/* User button interruption and variable change */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if (GPIO_Pin == USR_BTN_Pin && button_pressed == 0)
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800190c:	d10a      	bne.n	8001924 <HAL_GPIO_EXTI_Callback+0x28>
 800190e:	4b07      	ldr	r3, [pc, #28]	@ (800192c <HAL_GPIO_EXTI_Callback+0x30>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d105      	bne.n	8001924 <HAL_GPIO_EXTI_Callback+0x28>
      {
	  	  button_pressed = 1;
 8001918:	4b04      	ldr	r3, [pc, #16]	@ (800192c <HAL_GPIO_EXTI_Callback+0x30>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
	  	  printf("Button pressed...\r\n");
 800191e:	4804      	ldr	r0, [pc, #16]	@ (8001930 <HAL_GPIO_EXTI_Callback+0x34>)
 8001920:	f012 f840 	bl	80139a4 <puts>
      }
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000a16 	.word	0x20000a16
 8001930:	08015968 	.word	0x08015968

08001934 <check_button_release>:
/* ======================================================== */


/* Used to verify the state of the button */
void check_button_release()
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOI, USR_BTN_Pin) == GPIO_PIN_RESET) button_pressed = 0;
 8001938:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800193c:	4805      	ldr	r0, [pc, #20]	@ (8001954 <check_button_release+0x20>)
 800193e:	f004 f92b 	bl	8005b98 <HAL_GPIO_ReadPin>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <check_button_release+0x1a>
 8001948:	4b03      	ldr	r3, [pc, #12]	@ (8001958 <check_button_release+0x24>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40022000 	.word	0x40022000
 8001958:	20000a16 	.word	0x20000a16

0800195c <ReadWAVFileInfo>:
}
/* ======================================================== */


/* Debug function : reads the characteristics of a .wav file in the SD card */
void ReadWAVFileInfo(const char *filename) {
 800195c:	b580      	push	{r7, lr}
 800195e:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 8001962:	af00      	add	r7, sp, #0
 8001964:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001968:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 800196c:	6018      	str	r0, [r3, #0]
    WAV_Header header;      // WAV file header
    UINT bytesRead;         // Number of bytes read
    FRESULT res;

    // Open the WAV file
    res = f_open(&file, filename, FA_READ);
 800196e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001972:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001976:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800197a:	2201      	movs	r2, #1
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	f00b fca5 	bl	800d2cc <f_open>
 8001982:	4603      	mov	r3, r0
 8001984:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if (res != FR_OK) {
 8001988:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00a      	beq.n	80019a6 <ReadWAVFileInfo+0x4a>
        printf("Error: Failed to open file '%s' (Code: %d).\n", filename, res);
 8001990:	f897 226f 	ldrb.w	r2, [r7, #623]	@ 0x26f
 8001994:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001998:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 800199c:	6819      	ldr	r1, [r3, #0]
 800199e:	4843      	ldr	r0, [pc, #268]	@ (8001aac <ReadWAVFileInfo+0x150>)
 80019a0:	f011 ff98 	bl	80138d4 <iprintf>
        return;
 80019a4:	e07d      	b.n	8001aa2 <ReadWAVFileInfo+0x146>
    }

    // Read the WAV file header
    res = f_read(&file, &header, sizeof(WAV_Header), &bytesRead);
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	f107 0110 	add.w	r1, r7, #16
 80019ae:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80019b2:	222c      	movs	r2, #44	@ 0x2c
 80019b4:	f00b fe44 	bl	800d640 <f_read>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if (res != FR_OK || bytesRead != sizeof(WAV_Header)) {
 80019be:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <ReadWAVFileInfo+0x78>
 80019c6:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80019ca:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b2c      	cmp	r3, #44	@ 0x2c
 80019d2:	d00b      	beq.n	80019ec <ReadWAVFileInfo+0x90>
        printf("Error: Failed to read WAV file header (Code: %d).\n", res);
 80019d4:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 80019d8:	4619      	mov	r1, r3
 80019da:	4835      	ldr	r0, [pc, #212]	@ (8001ab0 <ReadWAVFileInfo+0x154>)
 80019dc:	f011 ff7a 	bl	80138d4 <iprintf>
        f_close(&file);
 80019e0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00c f95d 	bl	800dca4 <f_close>
        return;
 80019ea:	e05a      	b.n	8001aa2 <ReadWAVFileInfo+0x146>
    }

    // Print WAV file information
    printf("WAV File Info:\r\n");
 80019ec:	4831      	ldr	r0, [pc, #196]	@ (8001ab4 <ReadWAVFileInfo+0x158>)
 80019ee:	f011 ffd9 	bl	80139a4 <puts>
    printf("  ChunkID: %.4s\r\n", header.ChunkID);
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	4619      	mov	r1, r3
 80019f8:	482f      	ldr	r0, [pc, #188]	@ (8001ab8 <ReadWAVFileInfo+0x15c>)
 80019fa:	f011 ff6b 	bl	80138d4 <iprintf>
    printf("  Format: %.4s\r\n", header.Format);
 80019fe:	f107 0310 	add.w	r3, r7, #16
 8001a02:	3308      	adds	r3, #8
 8001a04:	4619      	mov	r1, r3
 8001a06:	482d      	ldr	r0, [pc, #180]	@ (8001abc <ReadWAVFileInfo+0x160>)
 8001a08:	f011 ff64 	bl	80138d4 <iprintf>
    printf("  Audio Format: %d\r\n", header.AudioFormat);
 8001a0c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001a10:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a14:	8a9b      	ldrh	r3, [r3, #20]
 8001a16:	4619      	mov	r1, r3
 8001a18:	4829      	ldr	r0, [pc, #164]	@ (8001ac0 <ReadWAVFileInfo+0x164>)
 8001a1a:	f011 ff5b 	bl	80138d4 <iprintf>
    printf("  Number of Channels: %d\r\n", header.NumChannels);
 8001a1e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001a22:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a26:	8adb      	ldrh	r3, [r3, #22]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4826      	ldr	r0, [pc, #152]	@ (8001ac4 <ReadWAVFileInfo+0x168>)
 8001a2c:	f011 ff52 	bl	80138d4 <iprintf>
    printf("  Sample Rate: %d Hz\r\n", header.SampleRate);
 8001a30:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001a34:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4822      	ldr	r0, [pc, #136]	@ (8001ac8 <ReadWAVFileInfo+0x16c>)
 8001a3e:	f011 ff49 	bl	80138d4 <iprintf>
    printf("  Byte Rate: %d\r\n", header.ByteRate);
 8001a42:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001a46:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	481f      	ldr	r0, [pc, #124]	@ (8001acc <ReadWAVFileInfo+0x170>)
 8001a50:	f011 ff40 	bl	80138d4 <iprintf>
    printf("  Block Align: %d\r\n", header.BlockAlign);
 8001a54:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001a58:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a5c:	8c1b      	ldrh	r3, [r3, #32]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	481b      	ldr	r0, [pc, #108]	@ (8001ad0 <ReadWAVFileInfo+0x174>)
 8001a62:	f011 ff37 	bl	80138d4 <iprintf>
    printf("  Bits Per Sample: %d\r\n", header.BitsPerSample);
 8001a66:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001a6a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a6e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001a70:	4619      	mov	r1, r3
 8001a72:	4818      	ldr	r0, [pc, #96]	@ (8001ad4 <ReadWAVFileInfo+0x178>)
 8001a74:	f011 ff2e 	bl	80138d4 <iprintf>
    printf("  Subchunk2ID: %.4s\r\n", header.Subchunk2ID);
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	3324      	adds	r3, #36	@ 0x24
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4815      	ldr	r0, [pc, #84]	@ (8001ad8 <ReadWAVFileInfo+0x17c>)
 8001a82:	f011 ff27 	bl	80138d4 <iprintf>
    printf("  Subchunk2Size: %d bytes\r\n", header.Subchunk2Size);
 8001a86:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001a8a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a90:	4619      	mov	r1, r3
 8001a92:	4812      	ldr	r0, [pc, #72]	@ (8001adc <ReadWAVFileInfo+0x180>)
 8001a94:	f011 ff1e 	bl	80138d4 <iprintf>

    // Close the file
    f_close(&file);
 8001a98:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f00c f901 	bl	800dca4 <f_close>
}
 8001aa2:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	08015a64 	.word	0x08015a64
 8001ab0:	08015a94 	.word	0x08015a94
 8001ab4:	08015ac8 	.word	0x08015ac8
 8001ab8:	08015ad8 	.word	0x08015ad8
 8001abc:	08015aec 	.word	0x08015aec
 8001ac0:	08015b00 	.word	0x08015b00
 8001ac4:	08015b18 	.word	0x08015b18
 8001ac8:	08015b34 	.word	0x08015b34
 8001acc:	08015b4c 	.word	0x08015b4c
 8001ad0:	08015b60 	.word	0x08015b60
 8001ad4:	08015b74 	.word	0x08015b74
 8001ad8:	08015b8c 	.word	0x08015b8c
 8001adc:	08015ba4 	.word	0x08015ba4

08001ae0 <read_wav_file>:
/* ======================================================== */

int read_wav_file(const char *filename, int16_t *audio_buffer, uint32_t *num_samples) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001aec:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8001af0:	6018      	str	r0, [r3, #0]
 8001af2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001af6:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001afa:	6019      	str	r1, [r3, #0]
 8001afc:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001b00:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001b04:	601a      	str	r2, [r3, #0]
    FIL wav_file;
    WAV_Header header;
    UINT bytes_read;

    // Open the WAV file
    if (f_open(&wav_file, filename, FA_READ) != FR_OK) {
 8001b06:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001b0a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8001b0e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001b12:	2201      	movs	r2, #1
 8001b14:	6819      	ldr	r1, [r3, #0]
 8001b16:	f00b fbd9 	bl	800d2cc <f_open>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <read_wav_file+0x4c>
        printf("Error: Unable to open WAV file.\r\n");
 8001b20:	4827      	ldr	r0, [pc, #156]	@ (8001bc0 <read_wav_file+0xe0>)
 8001b22:	f011 ff3f 	bl	80139a4 <puts>
        return -1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e043      	b.n	8001bb4 <read_wav_file+0xd4>
    }

    // Read WAV header
    if (f_read(&wav_file, &header, sizeof(WAV_Header), &bytes_read) != FR_OK) {
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	f107 0114 	add.w	r1, r7, #20
 8001b34:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001b38:	222c      	movs	r2, #44	@ 0x2c
 8001b3a:	f00b fd81 	bl	800d640 <f_read>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00a      	beq.n	8001b5a <read_wav_file+0x7a>
        printf("Error: Unable to read WAV header.\r\n");
 8001b44:	481f      	ldr	r0, [pc, #124]	@ (8001bc4 <read_wav_file+0xe4>)
 8001b46:	f011 ff2d 	bl	80139a4 <puts>
        f_close(&wav_file);
 8001b4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00c f8a8 	bl	800dca4 <f_close>
        return -2;
 8001b54:	f06f 0301 	mvn.w	r3, #1
 8001b58:	e02c      	b.n	8001bb4 <read_wav_file+0xd4>
//        f_close(&wav_file);
//        return -3;
//    }

    // Read audio samples in chunks and process
    if (f_read(&wav_file, audio_buffer, sizeof(int16_t) * FFT_SIZE, &bytes_read) != FR_OK) {
 8001b5a:	f107 0310 	add.w	r3, r7, #16
 8001b5e:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8001b62:	f5a2 711a 	sub.w	r1, r2, #616	@ 0x268
 8001b66:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b6e:	6809      	ldr	r1, [r1, #0]
 8001b70:	f00b fd66 	bl	800d640 <f_read>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00a      	beq.n	8001b90 <read_wav_file+0xb0>
        printf("Error: Unable to read audio data.\r\n");
 8001b7a:	4813      	ldr	r0, [pc, #76]	@ (8001bc8 <read_wav_file+0xe8>)
 8001b7c:	f011 ff12 	bl	80139a4 <puts>
        f_close(&wav_file);
 8001b80:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b84:	4618      	mov	r0, r3
 8001b86:	f00c f88d 	bl	800dca4 <f_close>
        return -4;
 8001b8a:	f06f 0303 	mvn.w	r3, #3
 8001b8e:	e011      	b.n	8001bb4 <read_wav_file+0xd4>
    }

    *num_samples = bytes_read / sizeof(int16_t);
 8001b90:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001b94:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	085a      	lsrs	r2, r3, #1
 8001b9c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001ba0:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	601a      	str	r2, [r3, #0]

    f_close(&wav_file);
 8001ba8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bac:	4618      	mov	r0, r3
 8001bae:	f00c f879 	bl	800dca4 <f_close>
    return 0;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	08015bc0 	.word	0x08015bc0
 8001bc4:	08015be4 	.word	0x08015be4
 8001bc8:	08015c08 	.word	0x08015c08

08001bcc <normalize_audio>:


void normalize_audio(int16_t *audio_data, uint32_t num_samples, float *normalized_buffer) {
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < num_samples; i++) {
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e016      	b.n	8001c0c <normalize_audio+0x40>
        normalized_buffer[i] = (float)audio_data[i] / 32768.0f;  // Normalize to [-1, 1]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4413      	add	r3, r2
 8001be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001c24 <normalize_audio+0x58>
 8001bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c02:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < num_samples; i++) {
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d3e4      	bcc.n	8001bde <normalize_audio+0x12>
    }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	371c      	adds	r7, #28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	47000000 	.word	0x47000000

08001c28 <apply_fft>:

void apply_fft(float *normalized_buffer, float *fft_output, uint32_t fft_size) {
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b08d      	sub	sp, #52	@ 0x34
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
    arm_rfft_fast_instance_f32 fft_instance;
    arm_rfft_fast_init_f32(&fft_instance, fft_size);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f00c fcea 	bl	800e618 <arm_rfft_fast_init_f32>
    arm_rfft_fast_f32(&fft_instance, normalized_buffer, fft_output, 0);
 8001c44:	f107 0014 	add.w	r0, r7, #20
 8001c48:	2300      	movs	r3, #0
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	f00c fd97 	bl	800e780 <arm_rfft_fast_f32>

    // Convert FFT output to magnitude
    for (uint32_t i = 0; i < fft_size / 2; i++) {
 8001c52:	2300      	movs	r3, #0
 8001c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c56:	e01c      	b.n	8001c92 <apply_fft+0x6a>
        fft_output[i] = sqrtf(fft_output[i] * fft_output[i]);
 8001c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	4413      	add	r3, r2
 8001c60:	ed93 7a00 	vldr	s14, [r3]
 8001c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	18d4      	adds	r4, r2, r3
 8001c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c80:	f013 fd48 	bl	8015714 <sqrtf>
 8001c84:	eef0 7a40 	vmov.f32	s15, s0
 8001c88:	edc4 7a00 	vstr	s15, [r4]
    for (uint32_t i = 0; i < fft_size / 2; i++) {
 8001c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8e:	3301      	adds	r3, #1
 8001c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	085b      	lsrs	r3, r3, #1
 8001c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d3dd      	bcc.n	8001c58 <apply_fft+0x30>
    }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3734      	adds	r7, #52	@ 0x34
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd90      	pop	{r4, r7, pc}

08001ca6 <calculate_mel_spectrogram>:


void calculate_mel_spectrogram(float *fft_output, float *mel_spectrogram, uint32_t fft_size, uint32_t num_mel_bins) {
 8001ca6:	b480      	push	{r7}
 8001ca8:	b087      	sub	sp, #28
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	603b      	str	r3, [r7, #0]
    // Your Mel filterbank coefficients should be defined or loaded here
    // Apply Mel filterbank to the FFT output
    for (uint32_t i = 0; i < num_mel_bins; i++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	e009      	b.n	8001cce <calculate_mel_spectrogram+0x28>
        mel_spectrogram[i] = 0.0f;  // Replace this with actual calculation based on filterbank
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < num_mel_bins; i++) {
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d3f1      	bcc.n	8001cba <calculate_mel_spectrogram+0x14>
    }
}
 8001cd6:	bf00      	nop
 8001cd8:	bf00      	nop
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <prepare_ai_model_input>:


void prepare_ai_model_input(float *mel_spectrogram, float *model_input_buffer, uint32_t num_mel_bins, uint32_t ai_input_size) {
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < ai_input_size; i++) {
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	e018      	b.n	8001d2a <prepare_ai_model_input+0x46>
        if (i < num_mel_bins) {
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d20a      	bcs.n	8001d16 <prepare_ai_model_input+0x32>
            model_input_buffer[i] = mel_spectrogram[i];
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	441a      	add	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	440b      	add	r3, r1
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	e006      	b.n	8001d24 <prepare_ai_model_input+0x40>
        } else {
            model_input_buffer[i] = 0.0f;  // Pad with zeros or other initialization if needed
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < ai_input_size; i++) {
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	3301      	adds	r3, #1
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d3e2      	bcc.n	8001cf8 <prepare_ai_model_input+0x14>
        }
    }
}
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <preprocess_wav_data>:

int preprocess_wav_data(float *input_buffer) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	f5ad 6d2b 	sub.w	sp, sp, #2736	@ 0xab0
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001d4c:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 8001d50:	6018      	str	r0, [r3, #0]
    float fft_output[FFT_SIZE];
    float mel_spectrogram[NUM_MEL_BINS];
    uint32_t num_samples;

    // Step 1: Read the WAV file and get audio samples
    if (read_wav_file("WAVE.wav", audio_buffer, &num_samples) != 0) {
 8001d52:	f107 020c 	add.w	r2, r7, #12
 8001d56:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	481b      	ldr	r0, [pc, #108]	@ (8001dcc <preprocess_wav_data+0x8c>)
 8001d5e:	f7ff febf 	bl	8001ae0 <read_wav_file>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <preprocess_wav_data+0x2e>
        return -1;
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	e029      	b.n	8001dc2 <preprocess_wav_data+0x82>
    }

    // Step 2: Normalize audio data to [-1, 1]
    normalize_audio(audio_buffer, num_samples, normalized_buffer);
 8001d6e:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001d72:	f6a3 23a4 	subw	r3, r3, #2724	@ 0xaa4
 8001d76:	6819      	ldr	r1, [r3, #0]
 8001d78:	f507 6296 	add.w	r2, r7, #1200	@ 0x4b0
 8001d7c:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff23 	bl	8001bcc <normalize_audio>

    // Step 3: Apply FFT to the normalized audio data
    apply_fft(normalized_buffer, fft_output, FFT_SIZE);
 8001d86:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001d8a:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8001d8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff ff48 	bl	8001c28 <apply_fft>

    // Step 4: Convert FFT output to Mel spectrogram
    calculate_mel_spectrogram(fft_output, mel_spectrogram, FFT_SIZE / 2, NUM_MEL_BINS);
 8001d98:	f107 0110 	add.w	r1, r7, #16
 8001d9c:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8001da0:	2328      	movs	r3, #40	@ 0x28
 8001da2:	2280      	movs	r2, #128	@ 0x80
 8001da4:	f7ff ff7f 	bl	8001ca6 <calculate_mel_spectrogram>

    // Step 5: Prepare the AI model input buffer with Mel spectrogram
    prepare_ai_model_input(mel_spectrogram, input_buffer, NUM_MEL_BINS, AI_NETWORK_IN_1_SIZE);
 8001da8:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001dac:	f6a3 21ac 	subw	r1, r3, #2732	@ 0xaac
 8001db0:	f107 0010 	add.w	r0, r7, #16
 8001db4:	f643 637c 	movw	r3, #15996	@ 0x3e7c
 8001db8:	2228      	movs	r2, #40	@ 0x28
 8001dba:	6809      	ldr	r1, [r1, #0]
 8001dbc:	f7ff ff92 	bl	8001ce4 <prepare_ai_model_input>

    return 0;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f507 672b 	add.w	r7, r7, #2736	@ 0xab0
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	08015854 	.word	0x08015854

08001dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd4:	b672      	cpsid	i
}
 8001dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <Error_Handler+0x8>

08001ddc <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001de0:	4b27      	ldr	r3, [pc, #156]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001de2:	4a28      	ldr	r2, [pc, #160]	@ (8001e84 <MX_SAI1_Init+0xa8>)
 8001de4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001de6:	4b26      	ldr	r3, [pc, #152]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001dec:	4b24      	ldr	r3, [pc, #144]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8001df2:	4b23      	ldr	r3, [pc, #140]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001df4:	2280      	movs	r2, #128	@ 0x80
 8001df6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001df8:	4b21      	ldr	r3, [pc, #132]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001dfe:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001e04:	4b1e      	ldr	r3, [pc, #120]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e16:	4b1a      	ldr	r3, [pc, #104]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001e1c:	4b18      	ldr	r3, [pc, #96]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e1e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001e22:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e24:	4b16      	ldr	r3, [pc, #88]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e2a:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e30:	4b13      	ldr	r3, [pc, #76]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 16;
 8001e36:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e38:	2210      	movs	r2, #16
 8001e3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001e3c:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001e42:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e48:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e5a:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001e60:	4b07      	ldr	r3, [pc, #28]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001e6c:	4804      	ldr	r0, [pc, #16]	@ (8001e80 <MX_SAI1_Init+0xa4>)
 8001e6e:	f005 ffeb 	bl	8007e48 <HAL_SAI_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_SAI1_Init+0xa0>
  {
    Error_Handler();
 8001e78:	f7ff ffaa 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000a18 	.word	0x20000a18
 8001e84:	40015804 	.word	0x40015804

08001e88 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b0aa      	sub	sp, #168	@ 0xa8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	2284      	movs	r2, #132	@ 0x84
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f011 fe63 	bl	8013b64 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a41      	ldr	r2, [pc, #260]	@ (8001fa8 <HAL_SAI_MspInit+0x120>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d17b      	bne.n	8001fa0 <HAL_SAI_MspInit+0x118>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001ea8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001eac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001eae:	2332      	movs	r3, #50	@ 0x32
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eca:	f107 0310 	add.w	r3, r7, #16
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f005 f97e 	bl	80071d0 <HAL_RCCEx_PeriphCLKConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_SAI_MspInit+0x56>
    {
      Error_Handler();
 8001eda:	f7ff ff79 	bl	8001dd0 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001ede:	4b33      	ldr	r3, [pc, #204]	@ (8001fac <HAL_SAI_MspInit+0x124>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10b      	bne.n	8001efe <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001ee6:	4b32      	ldr	r3, [pc, #200]	@ (8001fb0 <HAL_SAI_MspInit+0x128>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	4a31      	ldr	r2, [pc, #196]	@ (8001fb0 <HAL_SAI_MspInit+0x128>)
 8001eec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb0 <HAL_SAI_MspInit+0x128>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001efe:	4b2b      	ldr	r3, [pc, #172]	@ (8001fac <HAL_SAI_MspInit+0x124>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	3301      	adds	r3, #1
 8001f04:	4a29      	ldr	r2, [pc, #164]	@ (8001fac <HAL_SAI_MspInit+0x124>)
 8001f06:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001f08:	2370      	movs	r3, #112	@ 0x70
 8001f0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001f20:	2306      	movs	r3, #6
 8001f22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f26:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4821      	ldr	r0, [pc, #132]	@ (8001fb4 <HAL_SAI_MspInit+0x12c>)
 8001f2e:	f003 fb7b 	bl	8005628 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001f32:	4b21      	ldr	r3, [pc, #132]	@ (8001fb8 <HAL_SAI_MspInit+0x130>)
 8001f34:	4a21      	ldr	r2, [pc, #132]	@ (8001fbc <HAL_SAI_MspInit+0x134>)
 8001f36:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001f38:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb8 <HAL_SAI_MspInit+0x130>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <HAL_SAI_MspInit+0x130>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f44:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb8 <HAL_SAI_MspInit+0x130>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <HAL_SAI_MspInit+0x130>)
 8001f4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f50:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f52:	4b19      	ldr	r3, [pc, #100]	@ (8001fb8 <HAL_SAI_MspInit+0x130>)
 8001f54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f58:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f5a:	4b17      	ldr	r3, [pc, #92]	@ (8001fb8 <HAL_SAI_MspInit+0x130>)
 8001f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f60:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <HAL_SAI_MspInit+0x130>)
 8001f64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f68:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001f6a:	4b13      	ldr	r3, [pc, #76]	@ (8001fb8 <HAL_SAI_MspInit+0x130>)
 8001f6c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f70:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f72:	4b11      	ldr	r3, [pc, #68]	@ (8001fb8 <HAL_SAI_MspInit+0x130>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001f78:	480f      	ldr	r0, [pc, #60]	@ (8001fb8 <HAL_SAI_MspInit+0x130>)
 8001f7a:	f002 fee1 	bl	8004d40 <HAL_DMA_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 8001f84:	f7ff ff24 	bl	8001dd0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb8 <HAL_SAI_MspInit+0x130>)
 8001f8c:	671a      	str	r2, [r3, #112]	@ 0x70
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <HAL_SAI_MspInit+0x130>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a08      	ldr	r2, [pc, #32]	@ (8001fb8 <HAL_SAI_MspInit+0x130>)
 8001f98:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001f9a:	4a07      	ldr	r2, [pc, #28]	@ (8001fb8 <HAL_SAI_MspInit+0x130>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001fa0:	bf00      	nop
 8001fa2:	37a8      	adds	r7, #168	@ 0xa8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40015804 	.word	0x40015804
 8001fac:	20000afc 	.word	0x20000afc
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	20000a9c 	.word	0x20000a9c
 8001fbc:	40026428 	.word	0x40026428

08001fc0 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a11      	ldr	r2, [pc, #68]	@ (8002014 <HAL_SAI_MspDeInit+0x54>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d11c      	bne.n	800200c <HAL_SAI_MspDeInit+0x4c>
    {
    SAI1_client --;
 8001fd2:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <HAL_SAI_MspDeInit+0x58>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8002018 <HAL_SAI_MspDeInit+0x58>)
 8001fda:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002018 <HAL_SAI_MspDeInit+0x58>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <HAL_SAI_MspDeInit+0x5c>)
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800201c <HAL_SAI_MspDeInit+0x5c>)
 8001fea:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001fee:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8001ff0:	2170      	movs	r1, #112	@ 0x70
 8001ff2:	480b      	ldr	r0, [pc, #44]	@ (8002020 <HAL_SAI_MspDeInit+0x60>)
 8001ff4:	f003 fcc4 	bl	8005980 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f002 ff4d 	bl	8004e9c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002006:	4618      	mov	r0, r3
 8002008:	f002 ff48 	bl	8004e9c <HAL_DMA_DeInit>
    }
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40015804 	.word	0x40015804
 8002018:	20000afc 	.word	0x20000afc
 800201c:	40023800 	.word	0x40023800
 8002020:	40021000 	.word	0x40021000

08002024 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002028:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <MX_SDMMC1_SD_Init+0x38>)
 800202a:	4a0d      	ldr	r2, [pc, #52]	@ (8002060 <MX_SDMMC1_SD_Init+0x3c>)
 800202c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800202e:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <MX_SDMMC1_SD_Init+0x38>)
 8002030:	2200      	movs	r2, #0
 8002032:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002034:	4b09      	ldr	r3, [pc, #36]	@ (800205c <MX_SDMMC1_SD_Init+0x38>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800203a:	4b08      	ldr	r3, [pc, #32]	@ (800205c <MX_SDMMC1_SD_Init+0x38>)
 800203c:	2200      	movs	r2, #0
 800203e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <MX_SDMMC1_SD_Init+0x38>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002046:	4b05      	ldr	r3, [pc, #20]	@ (800205c <MX_SDMMC1_SD_Init+0x38>)
 8002048:	2200      	movs	r2, #0
 800204a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800204c:	4b03      	ldr	r3, [pc, #12]	@ (800205c <MX_SDMMC1_SD_Init+0x38>)
 800204e:	2200      	movs	r2, #0
 8002050:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	20000b00 	.word	0x20000b00
 8002060:	40012c00 	.word	0x40012c00

08002064 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b0ac      	sub	sp, #176	@ 0xb0
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800207c:	f107 0318 	add.w	r3, r7, #24
 8002080:	2284      	movs	r2, #132	@ 0x84
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f011 fd6d 	bl	8013b64 <memset>
  if(sdHandle->Instance==SDMMC1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a74      	ldr	r2, [pc, #464]	@ (8002260 <HAL_SD_MspInit+0x1fc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	f040 80e0 	bne.w	8002256 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8002096:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 800209a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800209c:	2300      	movs	r3, #0
 800209e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a8:	f107 0318 	add.w	r3, r7, #24
 80020ac:	4618      	mov	r0, r3
 80020ae:	f005 f88f 	bl	80071d0 <HAL_RCCEx_PeriphCLKConfig>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80020b8:	f7ff fe8a 	bl	8001dd0 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80020bc:	4b69      	ldr	r3, [pc, #420]	@ (8002264 <HAL_SD_MspInit+0x200>)
 80020be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c0:	4a68      	ldr	r2, [pc, #416]	@ (8002264 <HAL_SD_MspInit+0x200>)
 80020c2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80020c8:	4b66      	ldr	r3, [pc, #408]	@ (8002264 <HAL_SD_MspInit+0x200>)
 80020ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d4:	4b63      	ldr	r3, [pc, #396]	@ (8002264 <HAL_SD_MspInit+0x200>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d8:	4a62      	ldr	r2, [pc, #392]	@ (8002264 <HAL_SD_MspInit+0x200>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e0:	4b60      	ldr	r3, [pc, #384]	@ (8002264 <HAL_SD_MspInit+0x200>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ec:	4b5d      	ldr	r3, [pc, #372]	@ (8002264 <HAL_SD_MspInit+0x200>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f0:	4a5c      	ldr	r2, [pc, #368]	@ (8002264 <HAL_SD_MspInit+0x200>)
 80020f2:	f043 0308 	orr.w	r3, r3, #8
 80020f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f8:	4b5a      	ldr	r3, [pc, #360]	@ (8002264 <HAL_SD_MspInit+0x200>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8002104:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8002108:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800211e:	230c      	movs	r3, #12
 8002120:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002124:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002128:	4619      	mov	r1, r3
 800212a:	484f      	ldr	r0, [pc, #316]	@ (8002268 <HAL_SD_MspInit+0x204>)
 800212c:	f003 fa7c 	bl	8005628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002130:	2304      	movs	r3, #4
 8002132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002148:	230c      	movs	r3, #12
 800214a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800214e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002152:	4619      	mov	r1, r3
 8002154:	4845      	ldr	r0, [pc, #276]	@ (800226c <HAL_SD_MspInit+0x208>)
 8002156:	f003 fa67 	bl	8005628 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800215a:	4b45      	ldr	r3, [pc, #276]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 800215c:	4a45      	ldr	r2, [pc, #276]	@ (8002274 <HAL_SD_MspInit+0x210>)
 800215e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8002160:	4b43      	ldr	r3, [pc, #268]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 8002162:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002166:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002168:	4b41      	ldr	r3, [pc, #260]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800216e:	4b40      	ldr	r3, [pc, #256]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002174:	4b3e      	ldr	r3, [pc, #248]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 8002176:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800217a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800217c:	4b3c      	ldr	r3, [pc, #240]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 800217e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002182:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002184:	4b3a      	ldr	r3, [pc, #232]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 8002186:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800218a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800218c:	4b38      	ldr	r3, [pc, #224]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 800218e:	2220      	movs	r2, #32
 8002190:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002192:	4b37      	ldr	r3, [pc, #220]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 8002194:	2200      	movs	r2, #0
 8002196:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002198:	4b35      	ldr	r3, [pc, #212]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 800219a:	2204      	movs	r2, #4
 800219c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800219e:	4b34      	ldr	r3, [pc, #208]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 80021a0:	2203      	movs	r2, #3
 80021a2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80021a4:	4b32      	ldr	r3, [pc, #200]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 80021a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80021ac:	4b30      	ldr	r3, [pc, #192]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 80021ae:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80021b2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80021b4:	482e      	ldr	r0, [pc, #184]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 80021b6:	f002 fdc3 	bl	8004d40 <HAL_DMA_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 80021c0:	f7ff fe06 	bl	8001dd0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 80021c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80021ca:	4a29      	ldr	r2, [pc, #164]	@ (8002270 <HAL_SD_MspInit+0x20c>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80021d0:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <HAL_SD_MspInit+0x214>)
 80021d2:	4a2a      	ldr	r2, [pc, #168]	@ (800227c <HAL_SD_MspInit+0x218>)
 80021d4:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80021d6:	4b28      	ldr	r3, [pc, #160]	@ (8002278 <HAL_SD_MspInit+0x214>)
 80021d8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021dc:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021de:	4b26      	ldr	r3, [pc, #152]	@ (8002278 <HAL_SD_MspInit+0x214>)
 80021e0:	2240      	movs	r2, #64	@ 0x40
 80021e2:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e4:	4b24      	ldr	r3, [pc, #144]	@ (8002278 <HAL_SD_MspInit+0x214>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021ea:	4b23      	ldr	r3, [pc, #140]	@ (8002278 <HAL_SD_MspInit+0x214>)
 80021ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021f0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021f2:	4b21      	ldr	r3, [pc, #132]	@ (8002278 <HAL_SD_MspInit+0x214>)
 80021f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021f8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <HAL_SD_MspInit+0x214>)
 80021fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002200:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8002202:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <HAL_SD_MspInit+0x214>)
 8002204:	2220      	movs	r2, #32
 8002206:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002208:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <HAL_SD_MspInit+0x214>)
 800220a:	2200      	movs	r2, #0
 800220c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800220e:	4b1a      	ldr	r3, [pc, #104]	@ (8002278 <HAL_SD_MspInit+0x214>)
 8002210:	2204      	movs	r2, #4
 8002212:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002214:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <HAL_SD_MspInit+0x214>)
 8002216:	2203      	movs	r2, #3
 8002218:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800221a:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <HAL_SD_MspInit+0x214>)
 800221c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002220:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <HAL_SD_MspInit+0x214>)
 8002224:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002228:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800222a:	4813      	ldr	r0, [pc, #76]	@ (8002278 <HAL_SD_MspInit+0x214>)
 800222c:	f002 fd88 	bl	8004d40 <HAL_DMA_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8002236:	f7ff fdcb 	bl	8001dd0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a0e      	ldr	r2, [pc, #56]	@ (8002278 <HAL_SD_MspInit+0x214>)
 800223e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002240:	4a0d      	ldr	r2, [pc, #52]	@ (8002278 <HAL_SD_MspInit+0x214>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 1, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2101      	movs	r1, #1
 800224a:	2031      	movs	r0, #49	@ 0x31
 800224c:	f002 fc4f 	bl	8004aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002250:	2031      	movs	r0, #49	@ 0x31
 8002252:	f002 fc68 	bl	8004b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002256:	bf00      	nop
 8002258:	37b0      	adds	r7, #176	@ 0xb0
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40012c00 	.word	0x40012c00
 8002264:	40023800 	.word	0x40023800
 8002268:	40020800 	.word	0x40020800
 800226c:	40020c00 	.word	0x40020c00
 8002270:	20000b84 	.word	0x20000b84
 8002274:	40026458 	.word	0x40026458
 8002278:	20000be4 	.word	0x20000be4
 800227c:	400264a0 	.word	0x400264a0

08002280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <HAL_MspInit+0x44>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	4a0e      	ldr	r2, [pc, #56]	@ (80022c4 <HAL_MspInit+0x44>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002290:	6413      	str	r3, [r2, #64]	@ 0x40
 8002292:	4b0c      	ldr	r3, [pc, #48]	@ (80022c4 <HAL_MspInit+0x44>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <HAL_MspInit+0x44>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	4a08      	ldr	r2, [pc, #32]	@ (80022c4 <HAL_MspInit+0x44>)
 80022a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022aa:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_MspInit+0x44>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800

080022c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <NMI_Handler+0x4>

080022d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <HardFault_Handler+0x4>

080022d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <MemManage_Handler+0x4>

080022e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <BusFault_Handler+0x4>

080022e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <UsageFault_Handler+0x4>

080022f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800231e:	f002 fac7 	bl	80048b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}

08002326 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 800232a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800232e:	f003 fc7f 	bl	8005c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <SDMMC1_IRQHandler+0x10>)
 800233e:	f006 fba5 	bl	8008a8c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000b00 	.word	0x20000b00

0800234c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002350:	4802      	ldr	r0, [pc, #8]	@ (800235c <DMA2_Stream1_IRQHandler+0x10>)
 8002352:	f002 fef3 	bl	800513c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000a9c 	.word	0x20000a9c

08002360 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8002364:	4802      	ldr	r0, [pc, #8]	@ (8002370 <DMA2_Stream3_IRQHandler+0x10>)
 8002366:	f002 fee9 	bl	800513c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000b84 	.word	0x20000b84

08002374 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002378:	4802      	ldr	r0, [pc, #8]	@ (8002384 <DMA2_Stream6_IRQHandler+0x10>)
 800237a:	f002 fedf 	bl	800513c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000be4 	.word	0x20000be4

08002388 <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 Stream 7 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	//extern SAI_HandleTypeDef haudio_in_sai;
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800238c:	4b03      	ldr	r3, [pc, #12]	@ (800239c <DMA2_Stream7_IRQHandler+0x14>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002390:	4618      	mov	r0, r3
 8002392:	f002 fed3 	bl	800513c <HAL_DMA_IRQHandler>
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000db4 	.word	0x20000db4

080023a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return 1;
 80023a4:	2301      	movs	r3, #1
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_kill>:

int _kill(int pid, int sig)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023ba:	f011 fc35 	bl	8013c28 <__errno>
 80023be:	4603      	mov	r3, r0
 80023c0:	2216      	movs	r2, #22
 80023c2:	601a      	str	r2, [r3, #0]
  return -1;
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <_exit>:

void _exit (int status)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023d8:	f04f 31ff 	mov.w	r1, #4294967295
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ffe7 	bl	80023b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023e2:	bf00      	nop
 80023e4:	e7fd      	b.n	80023e2 <_exit+0x12>

080023e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	e00a      	b.n	800240e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023f8:	f3af 8000 	nop.w
 80023fc:	4601      	mov	r1, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	60ba      	str	r2, [r7, #8]
 8002404:	b2ca      	uxtb	r2, r1
 8002406:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	3301      	adds	r3, #1
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	dbf0      	blt.n	80023f8 <_read+0x12>
  }

  return len;
 8002416:	687b      	ldr	r3, [r7, #4]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	e009      	b.n	8002446 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	60ba      	str	r2, [r7, #8]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fa4c 	bl	80018d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	3301      	adds	r3, #1
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	429a      	cmp	r2, r3
 800244c:	dbf1      	blt.n	8002432 <_write+0x12>
  }
  return len;
 800244e:	687b      	ldr	r3, [r7, #4]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <_close>:

int _close(int file)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002460:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002480:	605a      	str	r2, [r3, #4]
  return 0;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_isatty>:

int _isatty(int file)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002498:	2301      	movs	r3, #1
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c8:	4a14      	ldr	r2, [pc, #80]	@ (800251c <_sbrk+0x5c>)
 80024ca:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <_sbrk+0x60>)
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d4:	4b13      	ldr	r3, [pc, #76]	@ (8002524 <_sbrk+0x64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d102      	bne.n	80024e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <_sbrk+0x64>)
 80024de:	4a12      	ldr	r2, [pc, #72]	@ (8002528 <_sbrk+0x68>)
 80024e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024e2:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <_sbrk+0x64>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4413      	add	r3, r2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d207      	bcs.n	8002500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024f0:	f011 fb9a 	bl	8013c28 <__errno>
 80024f4:	4603      	mov	r3, r0
 80024f6:	220c      	movs	r2, #12
 80024f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295
 80024fe:	e009      	b.n	8002514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002500:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <_sbrk+0x64>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002506:	4b07      	ldr	r3, [pc, #28]	@ (8002524 <_sbrk+0x64>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	4a05      	ldr	r2, [pc, #20]	@ (8002524 <_sbrk+0x64>)
 8002510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002512:	68fb      	ldr	r3, [r7, #12]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20050000 	.word	0x20050000
 8002520:	00008000 	.word	0x00008000
 8002524:	20000c44 	.word	0x20000c44
 8002528:	20005e00 	.word	0x20005e00

0800252c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002530:	4b06      	ldr	r3, [pc, #24]	@ (800254c <SystemInit+0x20>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002536:	4a05      	ldr	r2, [pc, #20]	@ (800254c <SystemInit+0x20>)
 8002538:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800253c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002554:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <MX_USART1_UART_Init+0x58>)
 8002556:	4a15      	ldr	r2, [pc, #84]	@ (80025ac <MX_USART1_UART_Init+0x5c>)
 8002558:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800255a:	4b13      	ldr	r3, [pc, #76]	@ (80025a8 <MX_USART1_UART_Init+0x58>)
 800255c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002560:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002562:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <MX_USART1_UART_Init+0x58>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002568:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <MX_USART1_UART_Init+0x58>)
 800256a:	2200      	movs	r2, #0
 800256c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800256e:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <MX_USART1_UART_Init+0x58>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002574:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <MX_USART1_UART_Init+0x58>)
 8002576:	220c      	movs	r2, #12
 8002578:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800257a:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <MX_USART1_UART_Init+0x58>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002580:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <MX_USART1_UART_Init+0x58>)
 8002582:	2200      	movs	r2, #0
 8002584:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002586:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <MX_USART1_UART_Init+0x58>)
 8002588:	2200      	movs	r2, #0
 800258a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800258c:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <MX_USART1_UART_Init+0x58>)
 800258e:	2200      	movs	r2, #0
 8002590:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002592:	4805      	ldr	r0, [pc, #20]	@ (80025a8 <MX_USART1_UART_Init+0x58>)
 8002594:	f007 f922 	bl	80097dc <HAL_UART_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800259e:	f7ff fc17 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000c48 	.word	0x20000c48
 80025ac:	40011000 	.word	0x40011000

080025b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b0ac      	sub	sp, #176	@ 0xb0
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025c8:	f107 0318 	add.w	r3, r7, #24
 80025cc:	2284      	movs	r2, #132	@ 0x84
 80025ce:	2100      	movs	r1, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f011 fac7 	bl	8013b64 <memset>
  if(uartHandle->Instance==USART1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a32      	ldr	r2, [pc, #200]	@ (80026a4 <HAL_UART_MspInit+0xf4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d15c      	bne.n	800269a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025e0:	2340      	movs	r3, #64	@ 0x40
 80025e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80025e4:	2300      	movs	r3, #0
 80025e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025e8:	f107 0318 	add.w	r3, r7, #24
 80025ec:	4618      	mov	r0, r3
 80025ee:	f004 fdef 	bl	80071d0 <HAL_RCCEx_PeriphCLKConfig>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025f8:	f7ff fbea 	bl	8001dd0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025fc:	4b2a      	ldr	r3, [pc, #168]	@ (80026a8 <HAL_UART_MspInit+0xf8>)
 80025fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002600:	4a29      	ldr	r2, [pc, #164]	@ (80026a8 <HAL_UART_MspInit+0xf8>)
 8002602:	f043 0310 	orr.w	r3, r3, #16
 8002606:	6453      	str	r3, [r2, #68]	@ 0x44
 8002608:	4b27      	ldr	r3, [pc, #156]	@ (80026a8 <HAL_UART_MspInit+0xf8>)
 800260a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002614:	4b24      	ldr	r3, [pc, #144]	@ (80026a8 <HAL_UART_MspInit+0xf8>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	4a23      	ldr	r2, [pc, #140]	@ (80026a8 <HAL_UART_MspInit+0xf8>)
 800261a:	f043 0302 	orr.w	r3, r3, #2
 800261e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002620:	4b21      	ldr	r3, [pc, #132]	@ (80026a8 <HAL_UART_MspInit+0xf8>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262c:	4b1e      	ldr	r3, [pc, #120]	@ (80026a8 <HAL_UART_MspInit+0xf8>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002630:	4a1d      	ldr	r2, [pc, #116]	@ (80026a8 <HAL_UART_MspInit+0xf8>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6313      	str	r3, [r2, #48]	@ 0x30
 8002638:	4b1b      	ldr	r3, [pc, #108]	@ (80026a8 <HAL_UART_MspInit+0xf8>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800265c:	2307      	movs	r3, #7
 800265e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002662:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002666:	4619      	mov	r1, r3
 8002668:	4810      	ldr	r0, [pc, #64]	@ (80026ac <HAL_UART_MspInit+0xfc>)
 800266a:	f002 ffdd 	bl	8005628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800266e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002672:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002688:	2307      	movs	r3, #7
 800268a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002692:	4619      	mov	r1, r3
 8002694:	4806      	ldr	r0, [pc, #24]	@ (80026b0 <HAL_UART_MspInit+0x100>)
 8002696:	f002 ffc7 	bl	8005628 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800269a:	bf00      	nop
 800269c:	37b0      	adds	r7, #176	@ 0xb0
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40011000 	.word	0x40011000
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020000 	.word	0x40020000

080026b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026b8:	f7ff ff38 	bl	800252c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026bc:	480c      	ldr	r0, [pc, #48]	@ (80026f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026be:	490d      	ldr	r1, [pc, #52]	@ (80026f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026c0:	4a0d      	ldr	r2, [pc, #52]	@ (80026f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c4:	e002      	b.n	80026cc <LoopCopyDataInit>

080026c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ca:	3304      	adds	r3, #4

080026cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d0:	d3f9      	bcc.n	80026c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d2:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002700 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d8:	e001      	b.n	80026de <LoopFillZerobss>

080026da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026dc:	3204      	adds	r2, #4

080026de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e0:	d3fb      	bcc.n	80026da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80026e2:	f011 faa7 	bl	8013c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e6:	f7fe ff1b 	bl	8001520 <main>
  bx  lr    
 80026ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026ec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80026f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f4:	200009d4 	.word	0x200009d4
  ldr r2, =_sidata
 80026f8:	080d3010 	.word	0x080d3010
  ldr r2, =_sbss
 80026fc:	200009d4 	.word	0x200009d4
  ldr r4, =_ebss
 8002700:	20005dfc 	.word	0x20005dfc

08002704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002704:	e7fe      	b.n	8002704 <ADC_IRQHandler>
	...

08002708 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	4603      	mov	r3, r0
 8002712:	81fb      	strh	r3, [r7, #14]
 8002714:	460b      	mov	r3, r1
 8002716:	81bb      	strh	r3, [r7, #12]
 8002718:	4613      	mov	r3, r2
 800271a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8002720:	89bb      	ldrh	r3, [r7, #12]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8002726:	89bb      	ldrh	r3, [r7, #12]
 8002728:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800272c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002732:	f001 fc71 	bl	8004018 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8002736:	89fb      	ldrh	r3, [r7, #14]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2203      	movs	r2, #3
 800273c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002740:	4618      	mov	r0, r3
 8002742:	f001 fafb 	bl	8003d3c <CODEC_IO_Write>
 8002746:	4603      	mov	r3, r0
 8002748:	461a      	mov	r2, r3
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8002750:	89fb      	ldrh	r3, [r7, #14]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2200      	movs	r2, #0
 8002756:	f640 0117 	movw	r1, #2071	@ 0x817
 800275a:	4618      	mov	r0, r3
 800275c:	f001 faee 	bl	8003d3c <CODEC_IO_Write>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	4413      	add	r3, r2
 8002768:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 800276a:	89fb      	ldrh	r3, [r7, #14]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2200      	movs	r2, #0
 8002770:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002774:	4618      	mov	r0, r3
 8002776:	f001 fae1 	bl	8003d3c <CODEC_IO_Write>
 800277a:	4603      	mov	r3, r0
 800277c:	461a      	mov	r2, r3
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	4413      	add	r3, r2
 8002782:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8002784:	89fb      	ldrh	r3, [r7, #14]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	226c      	movs	r2, #108	@ 0x6c
 800278a:	2139      	movs	r1, #57	@ 0x39
 800278c:	4618      	mov	r0, r3
 800278e:	f001 fad5 	bl	8003d3c <CODEC_IO_Write>
 8002792:	4603      	mov	r3, r0
 8002794:	461a      	mov	r2, r3
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 800279c:	8afb      	ldrh	r3, [r7, #22]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80027a2:	89fb      	ldrh	r3, [r7, #14]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2213      	movs	r2, #19
 80027a8:	2101      	movs	r1, #1
 80027aa:	4618      	mov	r0, r3
 80027ac:	f001 fac6 	bl	8003d3c <CODEC_IO_Write>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461a      	mov	r2, r3
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	4413      	add	r3, r2
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	e00b      	b.n	80027d4 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80027bc:	89fb      	ldrh	r3, [r7, #14]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2203      	movs	r2, #3
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f001 fab9 	bl	8003d3c <CODEC_IO_Write>
 80027ca:	4603      	mov	r3, r0
 80027cc:	461a      	mov	r2, r3
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 80027d4:	2032      	movs	r0, #50	@ 0x32
 80027d6:	f001 fc87 	bl	80040e8 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80027da:	8b3b      	ldrh	r3, [r7, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 815f 	beq.w	8002aa0 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 80027e2:	4bae      	ldr	r3, [pc, #696]	@ (8002a9c <wm8994_Init+0x394>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

    switch (output_device)
 80027e8:	8b3b      	ldrh	r3, [r7, #24]
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	f000 808c 	beq.w	8002908 <wm8994_Init+0x200>
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	f300 8111 	bgt.w	8002a18 <wm8994_Init+0x310>
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d002      	beq.n	8002800 <wm8994_Init+0xf8>
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d042      	beq.n	8002884 <wm8994_Init+0x17c>
 80027fe:	e10b      	b.n	8002a18 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002800:	89fb      	ldrh	r3, [r7, #14]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8002808:	2105      	movs	r1, #5
 800280a:	4618      	mov	r0, r3
 800280c:	f001 fa96 	bl	8003d3c <CODEC_IO_Write>
 8002810:	4603      	mov	r3, r0
 8002812:	461a      	mov	r2, r3
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	4413      	add	r3, r2
 8002818:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800281a:	89fb      	ldrh	r3, [r7, #14]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2200      	movs	r2, #0
 8002820:	f240 6101 	movw	r1, #1537	@ 0x601
 8002824:	4618      	mov	r0, r3
 8002826:	f001 fa89 	bl	8003d3c <CODEC_IO_Write>
 800282a:	4603      	mov	r3, r0
 800282c:	461a      	mov	r2, r3
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	4413      	add	r3, r2
 8002832:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8002834:	89fb      	ldrh	r3, [r7, #14]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2200      	movs	r2, #0
 800283a:	f240 6102 	movw	r1, #1538	@ 0x602
 800283e:	4618      	mov	r0, r3
 8002840:	f001 fa7c 	bl	8003d3c <CODEC_IO_Write>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4413      	add	r3, r2
 800284c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800284e:	89fb      	ldrh	r3, [r7, #14]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2202      	movs	r2, #2
 8002854:	f240 6104 	movw	r1, #1540	@ 0x604
 8002858:	4618      	mov	r0, r3
 800285a:	f001 fa6f 	bl	8003d3c <CODEC_IO_Write>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	4413      	add	r3, r2
 8002866:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002868:	89fb      	ldrh	r3, [r7, #14]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2202      	movs	r2, #2
 800286e:	f240 6105 	movw	r1, #1541	@ 0x605
 8002872:	4618      	mov	r0, r3
 8002874:	f001 fa62 	bl	8003d3c <CODEC_IO_Write>
 8002878:	4603      	mov	r3, r0
 800287a:	461a      	mov	r2, r3
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	4413      	add	r3, r2
 8002880:	61fb      	str	r3, [r7, #28]
      break;
 8002882:	e110      	b.n	8002aa6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002884:	89fb      	ldrh	r3, [r7, #14]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f240 3203 	movw	r2, #771	@ 0x303
 800288c:	2105      	movs	r1, #5
 800288e:	4618      	mov	r0, r3
 8002890:	f001 fa54 	bl	8003d3c <CODEC_IO_Write>
 8002894:	4603      	mov	r3, r0
 8002896:	461a      	mov	r2, r3
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800289e:	89fb      	ldrh	r3, [r7, #14]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2201      	movs	r2, #1
 80028a4:	f240 6101 	movw	r1, #1537	@ 0x601
 80028a8:	4618      	mov	r0, r3
 80028aa:	f001 fa47 	bl	8003d3c <CODEC_IO_Write>
 80028ae:	4603      	mov	r3, r0
 80028b0:	461a      	mov	r2, r3
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	4413      	add	r3, r2
 80028b6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80028b8:	89fb      	ldrh	r3, [r7, #14]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2201      	movs	r2, #1
 80028be:	f240 6102 	movw	r1, #1538	@ 0x602
 80028c2:	4618      	mov	r0, r3
 80028c4:	f001 fa3a 	bl	8003d3c <CODEC_IO_Write>
 80028c8:	4603      	mov	r3, r0
 80028ca:	461a      	mov	r2, r3
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	4413      	add	r3, r2
 80028d0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80028d2:	89fb      	ldrh	r3, [r7, #14]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2200      	movs	r2, #0
 80028d8:	f240 6104 	movw	r1, #1540	@ 0x604
 80028dc:	4618      	mov	r0, r3
 80028de:	f001 fa2d 	bl	8003d3c <CODEC_IO_Write>
 80028e2:	4603      	mov	r3, r0
 80028e4:	461a      	mov	r2, r3
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80028ec:	89fb      	ldrh	r3, [r7, #14]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2200      	movs	r2, #0
 80028f2:	f240 6105 	movw	r1, #1541	@ 0x605
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 fa20 	bl	8003d3c <CODEC_IO_Write>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461a      	mov	r2, r3
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	4413      	add	r3, r2
 8002904:	61fb      	str	r3, [r7, #28]
      break;
 8002906:	e0ce      	b.n	8002aa6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002908:	8afb      	ldrh	r3, [r7, #22]
 800290a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800290e:	d141      	bne.n	8002994 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002910:	89fb      	ldrh	r3, [r7, #14]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002918:	2105      	movs	r1, #5
 800291a:	4618      	mov	r0, r3
 800291c:	f001 fa0e 	bl	8003d3c <CODEC_IO_Write>
 8002920:	4603      	mov	r3, r0
 8002922:	461a      	mov	r2, r3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800292a:	89fb      	ldrh	r3, [r7, #14]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2203      	movs	r2, #3
 8002930:	f240 6101 	movw	r1, #1537	@ 0x601
 8002934:	4618      	mov	r0, r3
 8002936:	f001 fa01 	bl	8003d3c <CODEC_IO_Write>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	4413      	add	r3, r2
 8002942:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8002944:	89fb      	ldrh	r3, [r7, #14]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2203      	movs	r2, #3
 800294a:	f240 6102 	movw	r1, #1538	@ 0x602
 800294e:	4618      	mov	r0, r3
 8002950:	f001 f9f4 	bl	8003d3c <CODEC_IO_Write>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4413      	add	r3, r2
 800295c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800295e:	89fb      	ldrh	r3, [r7, #14]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2203      	movs	r2, #3
 8002964:	f240 6104 	movw	r1, #1540	@ 0x604
 8002968:	4618      	mov	r0, r3
 800296a:	f001 f9e7 	bl	8003d3c <CODEC_IO_Write>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	4413      	add	r3, r2
 8002976:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8002978:	89fb      	ldrh	r3, [r7, #14]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2203      	movs	r2, #3
 800297e:	f240 6105 	movw	r1, #1541	@ 0x605
 8002982:	4618      	mov	r0, r3
 8002984:	f001 f9da 	bl	8003d3c <CODEC_IO_Write>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	4413      	add	r3, r2
 8002990:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8002992:	e088      	b.n	8002aa6 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002994:	89fb      	ldrh	r3, [r7, #14]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800299c:	2105      	movs	r1, #5
 800299e:	4618      	mov	r0, r3
 80029a0:	f001 f9cc 	bl	8003d3c <CODEC_IO_Write>
 80029a4:	4603      	mov	r3, r0
 80029a6:	461a      	mov	r2, r3
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	4413      	add	r3, r2
 80029ac:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80029ae:	89fb      	ldrh	r3, [r7, #14]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2201      	movs	r2, #1
 80029b4:	f240 6101 	movw	r1, #1537	@ 0x601
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 f9bf 	bl	8003d3c <CODEC_IO_Write>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	4413      	add	r3, r2
 80029c6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80029c8:	89fb      	ldrh	r3, [r7, #14]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2201      	movs	r2, #1
 80029ce:	f240 6102 	movw	r1, #1538	@ 0x602
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 f9b2 	bl	8003d3c <CODEC_IO_Write>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	4413      	add	r3, r2
 80029e0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80029e2:	89fb      	ldrh	r3, [r7, #14]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2202      	movs	r2, #2
 80029e8:	f240 6104 	movw	r1, #1540	@ 0x604
 80029ec:	4618      	mov	r0, r3
 80029ee:	f001 f9a5 	bl	8003d3c <CODEC_IO_Write>
 80029f2:	4603      	mov	r3, r0
 80029f4:	461a      	mov	r2, r3
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4413      	add	r3, r2
 80029fa:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80029fc:	89fb      	ldrh	r3, [r7, #14]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2202      	movs	r2, #2
 8002a02:	f240 6105 	movw	r1, #1541	@ 0x605
 8002a06:	4618      	mov	r0, r3
 8002a08:	f001 f998 	bl	8003d3c <CODEC_IO_Write>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461a      	mov	r2, r3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	61fb      	str	r3, [r7, #28]
      break;
 8002a16:	e046      	b.n	8002aa6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002a18:	89fb      	ldrh	r3, [r7, #14]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f240 3203 	movw	r2, #771	@ 0x303
 8002a20:	2105      	movs	r1, #5
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 f98a 	bl	8003d3c <CODEC_IO_Write>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	4413      	add	r3, r2
 8002a30:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002a32:	89fb      	ldrh	r3, [r7, #14]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2201      	movs	r2, #1
 8002a38:	f240 6101 	movw	r1, #1537	@ 0x601
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f001 f97d 	bl	8003d3c <CODEC_IO_Write>
 8002a42:	4603      	mov	r3, r0
 8002a44:	461a      	mov	r2, r3
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002a4c:	89fb      	ldrh	r3, [r7, #14]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2201      	movs	r2, #1
 8002a52:	f240 6102 	movw	r1, #1538	@ 0x602
 8002a56:	4618      	mov	r0, r3
 8002a58:	f001 f970 	bl	8003d3c <CODEC_IO_Write>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	461a      	mov	r2, r3
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002a66:	89fb      	ldrh	r3, [r7, #14]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f240 6104 	movw	r1, #1540	@ 0x604
 8002a70:	4618      	mov	r0, r3
 8002a72:	f001 f963 	bl	8003d3c <CODEC_IO_Write>
 8002a76:	4603      	mov	r3, r0
 8002a78:	461a      	mov	r2, r3
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002a80:	89fb      	ldrh	r3, [r7, #14]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2200      	movs	r2, #0
 8002a86:	f240 6105 	movw	r1, #1541	@ 0x605
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f001 f956 	bl	8003d3c <CODEC_IO_Write>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461a      	mov	r2, r3
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	61fb      	str	r3, [r7, #28]
      break;
 8002a9a:	e004      	b.n	8002aa6 <wm8994_Init+0x39e>
 8002a9c:	20000cd0 	.word	0x20000cd0
    }
  }
  else
  {
    outputEnabled = 0;
 8002aa0:	4b99      	ldr	r3, [pc, #612]	@ (8002d08 <wm8994_Init+0x600>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002aa6:	8afb      	ldrh	r3, [r7, #22]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 81ab 	beq.w	8002e04 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8002aae:	4b97      	ldr	r3, [pc, #604]	@ (8002d0c <wm8994_Init+0x604>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002ab4:	8afb      	ldrh	r3, [r7, #22]
 8002ab6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aba:	f000 8129 	beq.w	8002d10 <wm8994_Init+0x608>
 8002abe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ac2:	f300 819b 	bgt.w	8002dfc <wm8994_Init+0x6f4>
 8002ac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002aca:	d05a      	beq.n	8002b82 <wm8994_Init+0x47a>
 8002acc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ad0:	f300 8194 	bgt.w	8002dfc <wm8994_Init+0x6f4>
 8002ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad8:	f000 80c6 	beq.w	8002c68 <wm8994_Init+0x560>
 8002adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ae0:	f040 818c 	bne.w	8002dfc <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002ae4:	89fb      	ldrh	r3, [r7, #14]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8002aec:	2104      	movs	r1, #4
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 f924 	bl	8003d3c <CODEC_IO_Write>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461a      	mov	r2, r3
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	4413      	add	r3, r2
 8002afc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002afe:	89fb      	ldrh	r3, [r7, #14]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	22db      	movs	r2, #219	@ 0xdb
 8002b04:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f001 f917 	bl	8003d3c <CODEC_IO_Write>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	461a      	mov	r2, r3
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	4413      	add	r3, r2
 8002b16:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8002b18:	89fb      	ldrh	r3, [r7, #14]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8002b20:	2102      	movs	r1, #2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f001 f90a 	bl	8003d3c <CODEC_IO_Write>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	4413      	add	r3, r2
 8002b30:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002b32:	89fb      	ldrh	r3, [r7, #14]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2202      	movs	r2, #2
 8002b38:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f001 f8fd 	bl	8003d3c <CODEC_IO_Write>
 8002b42:	4603      	mov	r3, r0
 8002b44:	461a      	mov	r2, r3
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	4413      	add	r3, r2
 8002b4a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002b4c:	89fb      	ldrh	r3, [r7, #14]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2202      	movs	r2, #2
 8002b52:	f240 6109 	movw	r1, #1545	@ 0x609
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 f8f0 	bl	8003d3c <CODEC_IO_Write>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	4413      	add	r3, r2
 8002b64:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8002b66:	89fb      	ldrh	r3, [r7, #14]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	220e      	movs	r2, #14
 8002b6c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002b70:	4618      	mov	r0, r3
 8002b72:	f001 f8e3 	bl	8003d3c <CODEC_IO_Write>
 8002b76:	4603      	mov	r3, r0
 8002b78:	461a      	mov	r2, r3
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	61fb      	str	r3, [r7, #28]
      break;
 8002b80:	e143      	b.n	8002e0a <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8002b82:	89fb      	ldrh	r3, [r7, #14]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2211      	movs	r2, #17
 8002b88:	2128      	movs	r1, #40	@ 0x28
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 f8d6 	bl	8003d3c <CODEC_IO_Write>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461a      	mov	r2, r3
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	4413      	add	r3, r2
 8002b98:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8002b9a:	89fb      	ldrh	r3, [r7, #14]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2235      	movs	r2, #53	@ 0x35
 8002ba0:	2129      	movs	r1, #41	@ 0x29
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f001 f8ca 	bl	8003d3c <CODEC_IO_Write>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	461a      	mov	r2, r3
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	4413      	add	r3, r2
 8002bb0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8002bb2:	89fb      	ldrh	r3, [r7, #14]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2235      	movs	r2, #53	@ 0x35
 8002bb8:	212a      	movs	r1, #42	@ 0x2a
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 f8be 	bl	8003d3c <CODEC_IO_Write>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8002bca:	89fb      	ldrh	r3, [r7, #14]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f240 3203 	movw	r2, #771	@ 0x303
 8002bd2:	2104      	movs	r1, #4
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 f8b1 	bl	8003d3c <CODEC_IO_Write>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002be4:	89fb      	ldrh	r3, [r7, #14]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	22db      	movs	r2, #219	@ 0xdb
 8002bea:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 f8a4 	bl	8003d3c <CODEC_IO_Write>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002bfe:	89fb      	ldrh	r3, [r7, #14]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002c06:	2102      	movs	r1, #2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f001 f897 	bl	8003d3c <CODEC_IO_Write>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461a      	mov	r2, r3
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	4413      	add	r3, r2
 8002c16:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002c18:	89fb      	ldrh	r3, [r7, #14]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f240 6106 	movw	r1, #1542	@ 0x606
 8002c22:	4618      	mov	r0, r3
 8002c24:	f001 f88a 	bl	8003d3c <CODEC_IO_Write>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	4413      	add	r3, r2
 8002c30:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002c32:	89fb      	ldrh	r3, [r7, #14]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2202      	movs	r2, #2
 8002c38:	f240 6107 	movw	r1, #1543	@ 0x607
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 f87d 	bl	8003d3c <CODEC_IO_Write>
 8002c42:	4603      	mov	r3, r0
 8002c44:	461a      	mov	r2, r3
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4413      	add	r3, r2
 8002c4a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002c4c:	89fb      	ldrh	r3, [r7, #14]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	220d      	movs	r2, #13
 8002c52:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002c56:	4618      	mov	r0, r3
 8002c58:	f001 f870 	bl	8003d3c <CODEC_IO_Write>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	461a      	mov	r2, r3
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	4413      	add	r3, r2
 8002c64:	61fb      	str	r3, [r7, #28]
      break;
 8002c66:	e0d0      	b.n	8002e0a <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8002c68:	89fb      	ldrh	r3, [r7, #14]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8002c70:	2104      	movs	r1, #4
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 f862 	bl	8003d3c <CODEC_IO_Write>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	4413      	add	r3, r2
 8002c80:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002c82:	89fb      	ldrh	r3, [r7, #14]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	22db      	movs	r2, #219	@ 0xdb
 8002c88:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f001 f855 	bl	8003d3c <CODEC_IO_Write>
 8002c92:	4603      	mov	r3, r0
 8002c94:	461a      	mov	r2, r3
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	4413      	add	r3, r2
 8002c9a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002c9c:	89fb      	ldrh	r3, [r7, #14]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 f848 	bl	8003d3c <CODEC_IO_Write>
 8002cac:	4603      	mov	r3, r0
 8002cae:	461a      	mov	r2, r3
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002cb6:	89fb      	ldrh	r3, [r7, #14]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f240 6106 	movw	r1, #1542	@ 0x606
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 f83b 	bl	8003d3c <CODEC_IO_Write>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	461a      	mov	r2, r3
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	4413      	add	r3, r2
 8002cce:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002cd0:	89fb      	ldrh	r3, [r7, #14]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	f240 6107 	movw	r1, #1543	@ 0x607
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 f82e 	bl	8003d3c <CODEC_IO_Write>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002cea:	89fb      	ldrh	r3, [r7, #14]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	220d      	movs	r2, #13
 8002cf0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f001 f821 	bl	8003d3c <CODEC_IO_Write>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	4413      	add	r3, r2
 8002d02:	61fb      	str	r3, [r7, #28]
      break; 
 8002d04:	e081      	b.n	8002e0a <wm8994_Init+0x702>
 8002d06:	bf00      	nop
 8002d08:	20000cd0 	.word	0x20000cd0
 8002d0c:	20000cd4 	.word	0x20000cd4
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002d10:	89fb      	ldrh	r3, [r7, #14]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8002d18:	2104      	movs	r1, #4
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 f80e 	bl	8003d3c <CODEC_IO_Write>
 8002d20:	4603      	mov	r3, r0
 8002d22:	461a      	mov	r2, r3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	4413      	add	r3, r2
 8002d28:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002d2a:	89fb      	ldrh	r3, [r7, #14]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	22db      	movs	r2, #219	@ 0xdb
 8002d30:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002d34:	4618      	mov	r0, r3
 8002d36:	f001 f801 	bl	8003d3c <CODEC_IO_Write>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	4413      	add	r3, r2
 8002d42:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002d44:	89fb      	ldrh	r3, [r7, #14]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	22db      	movs	r2, #219	@ 0xdb
 8002d4a:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fff4 	bl	8003d3c <CODEC_IO_Write>
 8002d54:	4603      	mov	r3, r0
 8002d56:	461a      	mov	r2, r3
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8002d5e:	89fb      	ldrh	r3, [r7, #14]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8002d66:	2102      	movs	r1, #2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 ffe7 	bl	8003d3c <CODEC_IO_Write>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	461a      	mov	r2, r3
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002d78:	89fb      	ldrh	r3, [r7, #14]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	f240 6106 	movw	r1, #1542	@ 0x606
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 ffda 	bl	8003d3c <CODEC_IO_Write>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	4413      	add	r3, r2
 8002d90:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002d92:	89fb      	ldrh	r3, [r7, #14]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2202      	movs	r2, #2
 8002d98:	f240 6107 	movw	r1, #1543	@ 0x607
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 ffcd 	bl	8003d3c <CODEC_IO_Write>
 8002da2:	4603      	mov	r3, r0
 8002da4:	461a      	mov	r2, r3
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	4413      	add	r3, r2
 8002daa:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002dac:	89fb      	ldrh	r3, [r7, #14]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2202      	movs	r2, #2
 8002db2:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 ffc0 	bl	8003d3c <CODEC_IO_Write>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002dc6:	89fb      	ldrh	r3, [r7, #14]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f240 6109 	movw	r1, #1545	@ 0x609
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 ffb3 	bl	8003d3c <CODEC_IO_Write>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002de0:	89fb      	ldrh	r3, [r7, #14]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	220d      	movs	r2, #13
 8002de6:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 ffa6 	bl	8003d3c <CODEC_IO_Write>
 8002df0:	4603      	mov	r3, r0
 8002df2:	461a      	mov	r2, r3
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	4413      	add	r3, r2
 8002df8:	61fb      	str	r3, [r7, #28]
      break;    
 8002dfa:	e006      	b.n	8002e0a <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	61fb      	str	r3, [r7, #28]
      break;
 8002e02:	e002      	b.n	8002e0a <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002e04:	4ba4      	ldr	r3, [pc, #656]	@ (8003098 <wm8994_Init+0x990>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4aa3      	ldr	r2, [pc, #652]	@ (800309c <wm8994_Init+0x994>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d079      	beq.n	8002f06 <wm8994_Init+0x7fe>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4aa1      	ldr	r2, [pc, #644]	@ (800309c <wm8994_Init+0x994>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	f200 80ad 	bhi.w	8002f76 <wm8994_Init+0x86e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d061      	beq.n	8002eea <wm8994_Init+0x7e2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	f200 80a2 	bhi.w	8002f76 <wm8994_Init+0x86e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	f000 808e 	beq.w	8002f5a <wm8994_Init+0x852>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002e44:	4293      	cmp	r3, r2
 8002e46:	f200 8096 	bhi.w	8002f76 <wm8994_Init+0x86e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002e50:	d03d      	beq.n	8002ece <wm8994_Init+0x7c6>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002e58:	f200 808d 	bhi.w	8002f76 <wm8994_Init+0x86e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d06b      	beq.n	8002f3e <wm8994_Init+0x836>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	f200 8082 	bhi.w	8002f76 <wm8994_Init+0x86e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002e78:	d01b      	beq.n	8002eb2 <wm8994_Init+0x7aa>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002e80:	d879      	bhi.n	8002f76 <wm8994_Init+0x86e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002e88:	d005      	beq.n	8002e96 <wm8994_Init+0x78e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d046      	beq.n	8002f22 <wm8994_Init+0x81a>
 8002e94:	e06f      	b.n	8002f76 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002e96:	89fb      	ldrh	r3, [r7, #14]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 ff4b 	bl	8003d3c <CODEC_IO_Write>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	4413      	add	r3, r2
 8002eae:	61fb      	str	r3, [r7, #28]
    break;
 8002eb0:	e06f      	b.n	8002f92 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002eb2:	89fb      	ldrh	r3, [r7, #14]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2233      	movs	r2, #51	@ 0x33
 8002eb8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 ff3d 	bl	8003d3c <CODEC_IO_Write>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	4413      	add	r3, r2
 8002eca:	61fb      	str	r3, [r7, #28]
    break;
 8002ecc:	e061      	b.n	8002f92 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002ece:	89fb      	ldrh	r3, [r7, #14]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2263      	movs	r2, #99	@ 0x63
 8002ed4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 ff2f 	bl	8003d3c <CODEC_IO_Write>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	61fb      	str	r3, [r7, #28]
    break;
 8002ee8:	e053      	b.n	8002f92 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002eea:	89fb      	ldrh	r3, [r7, #14]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2283      	movs	r2, #131	@ 0x83
 8002ef0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 ff21 	bl	8003d3c <CODEC_IO_Write>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	4413      	add	r3, r2
 8002f02:	61fb      	str	r3, [r7, #28]
    break;
 8002f04:	e045      	b.n	8002f92 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002f06:	89fb      	ldrh	r3, [r7, #14]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	22a3      	movs	r2, #163	@ 0xa3
 8002f0c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 ff13 	bl	8003d3c <CODEC_IO_Write>
 8002f16:	4603      	mov	r3, r0
 8002f18:	461a      	mov	r2, r3
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	61fb      	str	r3, [r7, #28]
    break;
 8002f20:	e037      	b.n	8002f92 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002f22:	89fb      	ldrh	r3, [r7, #14]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2213      	movs	r2, #19
 8002f28:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 ff05 	bl	8003d3c <CODEC_IO_Write>
 8002f32:	4603      	mov	r3, r0
 8002f34:	461a      	mov	r2, r3
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4413      	add	r3, r2
 8002f3a:	61fb      	str	r3, [r7, #28]
    break;
 8002f3c:	e029      	b.n	8002f92 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002f3e:	89fb      	ldrh	r3, [r7, #14]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2243      	movs	r2, #67	@ 0x43
 8002f44:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fef7 	bl	8003d3c <CODEC_IO_Write>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	461a      	mov	r2, r3
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	61fb      	str	r3, [r7, #28]
    break;
 8002f58:	e01b      	b.n	8002f92 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8002f5a:	89fb      	ldrh	r3, [r7, #14]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2273      	movs	r2, #115	@ 0x73
 8002f60:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fee9 	bl	8003d3c <CODEC_IO_Write>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	61fb      	str	r3, [r7, #28]
    break; 
 8002f74:	e00d      	b.n	8002f92 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002f76:	89fb      	ldrh	r3, [r7, #14]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2283      	movs	r2, #131	@ 0x83
 8002f7c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fedb 	bl	8003d3c <CODEC_IO_Write>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	61fb      	str	r3, [r7, #28]
    break; 
 8002f90:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002f92:	8afb      	ldrh	r3, [r7, #22]
 8002f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f98:	d10e      	bne.n	8002fb8 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8002f9a:	89fb      	ldrh	r3, [r7, #14]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f244 0218 	movw	r2, #16408	@ 0x4018
 8002fa2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fec8 	bl	8003d3c <CODEC_IO_Write>
 8002fac:	4603      	mov	r3, r0
 8002fae:	461a      	mov	r2, r3
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	e00d      	b.n	8002fd4 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002fb8:	89fb      	ldrh	r3, [r7, #14]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f244 0210 	movw	r2, #16400	@ 0x4010
 8002fc0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 feb9 	bl	8003d3c <CODEC_IO_Write>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	461a      	mov	r2, r3
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002fd4:	89fb      	ldrh	r3, [r7, #14]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f240 3102 	movw	r1, #770	@ 0x302
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 feac 	bl	8003d3c <CODEC_IO_Write>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	4413      	add	r3, r2
 8002fec:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8002fee:	89fb      	ldrh	r3, [r7, #14]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	220a      	movs	r2, #10
 8002ff4:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fe9f 	bl	8003d3c <CODEC_IO_Write>
 8002ffe:	4603      	mov	r3, r0
 8003000:	461a      	mov	r2, r3
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8003008:	89fb      	ldrh	r3, [r7, #14]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2201      	movs	r2, #1
 800300e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fe92 	bl	8003d3c <CODEC_IO_Write>
 8003018:	4603      	mov	r3, r0
 800301a:	461a      	mov	r2, r3
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	4413      	add	r3, r2
 8003020:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8003022:	8b3b      	ldrh	r3, [r7, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 817b 	beq.w	8003320 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800302a:	8b3b      	ldrh	r3, [r7, #24]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d157      	bne.n	80030e0 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8003030:	89fb      	ldrh	r3, [r7, #14]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003038:	212d      	movs	r1, #45	@ 0x2d
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fe7e 	bl	8003d3c <CODEC_IO_Write>
 8003040:	4603      	mov	r3, r0
 8003042:	461a      	mov	r2, r3
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	4413      	add	r3, r2
 8003048:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 800304a:	89fb      	ldrh	r3, [r7, #14]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003052:	212e      	movs	r1, #46	@ 0x2e
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fe71 	bl	8003d3c <CODEC_IO_Write>
 800305a:	4603      	mov	r3, r0
 800305c:	461a      	mov	r2, r3
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	4413      	add	r3, r2
 8003062:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8003064:	4b0e      	ldr	r3, [pc, #56]	@ (80030a0 <wm8994_Init+0x998>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01b      	beq.n	80030a4 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 800306c:	89fb      	ldrh	r3, [r7, #14]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8003074:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fe5f 	bl	8003d3c <CODEC_IO_Write>
 800307e:	4603      	mov	r3, r0
 8003080:	461a      	mov	r2, r3
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	4413      	add	r3, r2
 8003086:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8003088:	4b05      	ldr	r3, [pc, #20]	@ (80030a0 <wm8994_Init+0x998>)
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 800308e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003092:	f001 f829 	bl	80040e8 <AUDIO_IO_Delay>
 8003096:	e016      	b.n	80030c6 <wm8994_Init+0x9be>
 8003098:	20000cd4 	.word	0x20000cd4
 800309c:	00017700 	.word	0x00017700
 80030a0:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80030a4:	89fb      	ldrh	r3, [r7, #14]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f248 1208 	movw	r2, #33032	@ 0x8108
 80030ac:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fe43 	bl	8003d3c <CODEC_IO_Write>
 80030b6:	4603      	mov	r3, r0
 80030b8:	461a      	mov	r2, r3
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80030c0:	2032      	movs	r0, #50	@ 0x32
 80030c2:	f001 f811 	bl	80040e8 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80030c6:	89fb      	ldrh	r3, [r7, #14]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2200      	movs	r2, #0
 80030cc:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fe33 	bl	8003d3c <CODEC_IO_Write>
 80030d6:	4603      	mov	r3, r0
 80030d8:	461a      	mov	r2, r3
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	4413      	add	r3, r2
 80030de:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80030e0:	89fb      	ldrh	r3, [r7, #14]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80030e8:	2103      	movs	r1, #3
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fe26 	bl	8003d3c <CODEC_IO_Write>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461a      	mov	r2, r3
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	4413      	add	r3, r2
 80030f8:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80030fa:	89fb      	ldrh	r3, [r7, #14]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2200      	movs	r2, #0
 8003100:	2122      	movs	r1, #34	@ 0x22
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fe1a 	bl	8003d3c <CODEC_IO_Write>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4413      	add	r3, r2
 8003110:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8003112:	89fb      	ldrh	r3, [r7, #14]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2200      	movs	r2, #0
 8003118:	2123      	movs	r1, #35	@ 0x23
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fe0e 	bl	8003d3c <CODEC_IO_Write>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4413      	add	r3, r2
 8003128:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800312a:	89fb      	ldrh	r3, [r7, #14]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003132:	2136      	movs	r1, #54	@ 0x36
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fe01 	bl	8003d3c <CODEC_IO_Write>
 800313a:	4603      	mov	r3, r0
 800313c:	461a      	mov	r2, r3
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	4413      	add	r3, r2
 8003142:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8003144:	89fb      	ldrh	r3, [r7, #14]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f243 0203 	movw	r2, #12291	@ 0x3003
 800314c:	2101      	movs	r1, #1
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fdf4 	bl	8003d3c <CODEC_IO_Write>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	4413      	add	r3, r2
 800315c:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800315e:	8afb      	ldrh	r3, [r7, #22]
 8003160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003164:	d10d      	bne.n	8003182 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8003166:	89fb      	ldrh	r3, [r7, #14]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f240 2205 	movw	r2, #517	@ 0x205
 800316e:	2151      	movs	r1, #81	@ 0x51
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fde3 	bl	8003d3c <CODEC_IO_Write>
 8003176:	4603      	mov	r3, r0
 8003178:	461a      	mov	r2, r3
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	4413      	add	r3, r2
 800317e:	61fb      	str	r3, [r7, #28]
 8003180:	e00b      	b.n	800319a <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8003182:	89fb      	ldrh	r3, [r7, #14]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2205      	movs	r2, #5
 8003188:	2151      	movs	r1, #81	@ 0x51
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fdd6 	bl	8003d3c <CODEC_IO_Write>
 8003190:	4603      	mov	r3, r0
 8003192:	461a      	mov	r2, r3
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	4413      	add	r3, r2
 8003198:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800319a:	8b7b      	ldrh	r3, [r7, #26]
 800319c:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 80031a0:	f043 0303 	orr.w	r3, r3, #3
 80031a4:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80031a6:	89fb      	ldrh	r3, [r7, #14]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	8b7a      	ldrh	r2, [r7, #26]
 80031ac:	2101      	movs	r1, #1
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fdc4 	bl	8003d3c <CODEC_IO_Write>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	4413      	add	r3, r2
 80031bc:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80031be:	89fb      	ldrh	r3, [r7, #14]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2222      	movs	r2, #34	@ 0x22
 80031c4:	2160      	movs	r1, #96	@ 0x60
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fdb8 	bl	8003d3c <CODEC_IO_Write>
 80031cc:	4603      	mov	r3, r0
 80031ce:	461a      	mov	r2, r3
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80031d6:	89fb      	ldrh	r3, [r7, #14]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f649 7225 	movw	r2, #40741	@ 0x9f25
 80031de:	214c      	movs	r1, #76	@ 0x4c
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fdab 	bl	8003d3c <CODEC_IO_Write>
 80031e6:	4603      	mov	r3, r0
 80031e8:	461a      	mov	r2, r3
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	4413      	add	r3, r2
 80031ee:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80031f0:	200f      	movs	r0, #15
 80031f2:	f000 ff79 	bl	80040e8 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80031f6:	89fb      	ldrh	r3, [r7, #14]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2201      	movs	r2, #1
 80031fc:	212d      	movs	r1, #45	@ 0x2d
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fd9c 	bl	8003d3c <CODEC_IO_Write>
 8003204:	4603      	mov	r3, r0
 8003206:	461a      	mov	r2, r3
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	4413      	add	r3, r2
 800320c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800320e:	89fb      	ldrh	r3, [r7, #14]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2201      	movs	r2, #1
 8003214:	212e      	movs	r1, #46	@ 0x2e
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fd90 	bl	8003d3c <CODEC_IO_Write>
 800321c:	4603      	mov	r3, r0
 800321e:	461a      	mov	r2, r3
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	4413      	add	r3, r2
 8003224:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8003226:	89fb      	ldrh	r3, [r7, #14]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f44f 724c 	mov.w	r2, #816	@ 0x330
 800322e:	2103      	movs	r1, #3
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fd83 	bl	8003d3c <CODEC_IO_Write>
 8003236:	4603      	mov	r3, r0
 8003238:	461a      	mov	r2, r3
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	4413      	add	r3, r2
 800323e:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8003240:	89fb      	ldrh	r3, [r7, #14]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2233      	movs	r2, #51	@ 0x33
 8003246:	2154      	movs	r1, #84	@ 0x54
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fd77 	bl	8003d3c <CODEC_IO_Write>
 800324e:	4603      	mov	r3, r0
 8003250:	461a      	mov	r2, r3
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	4413      	add	r3, r2
 8003256:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8003258:	f240 1001 	movw	r0, #257	@ 0x101
 800325c:	f000 ff44 	bl	80040e8 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8003260:	89fb      	ldrh	r3, [r7, #14]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	22ee      	movs	r2, #238	@ 0xee
 8003266:	2160      	movs	r1, #96	@ 0x60
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fd67 	bl	8003d3c <CODEC_IO_Write>
 800326e:	4603      	mov	r3, r0
 8003270:	461a      	mov	r2, r3
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	4413      	add	r3, r2
 8003276:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8003278:	89fb      	ldrh	r3, [r7, #14]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	22c0      	movs	r2, #192	@ 0xc0
 800327e:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fd5a 	bl	8003d3c <CODEC_IO_Write>
 8003288:	4603      	mov	r3, r0
 800328a:	461a      	mov	r2, r3
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	4413      	add	r3, r2
 8003290:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8003292:	89fb      	ldrh	r3, [r7, #14]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	22c0      	movs	r2, #192	@ 0xc0
 8003298:	f240 6111 	movw	r1, #1553	@ 0x611
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fd4d 	bl	8003d3c <CODEC_IO_Write>
 80032a2:	4603      	mov	r3, r0
 80032a4:	461a      	mov	r2, r3
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	4413      	add	r3, r2
 80032aa:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80032ac:	89fb      	ldrh	r3, [r7, #14]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2210      	movs	r2, #16
 80032b2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fd40 	bl	8003d3c <CODEC_IO_Write>
 80032bc:	4603      	mov	r3, r0
 80032be:	461a      	mov	r2, r3
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	4413      	add	r3, r2
 80032c4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80032c6:	89fb      	ldrh	r3, [r7, #14]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	22c0      	movs	r2, #192	@ 0xc0
 80032cc:	f240 6112 	movw	r1, #1554	@ 0x612
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fd33 	bl	8003d3c <CODEC_IO_Write>
 80032d6:	4603      	mov	r3, r0
 80032d8:	461a      	mov	r2, r3
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	4413      	add	r3, r2
 80032de:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80032e0:	89fb      	ldrh	r3, [r7, #14]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	22c0      	movs	r2, #192	@ 0xc0
 80032e6:	f240 6113 	movw	r1, #1555	@ 0x613
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fd26 	bl	8003d3c <CODEC_IO_Write>
 80032f0:	4603      	mov	r3, r0
 80032f2:	461a      	mov	r2, r3
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	4413      	add	r3, r2
 80032f8:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80032fa:	89fb      	ldrh	r3, [r7, #14]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2210      	movs	r2, #16
 8003300:	f240 4122 	movw	r1, #1058	@ 0x422
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fd19 	bl	8003d3c <CODEC_IO_Write>
 800330a:	4603      	mov	r3, r0
 800330c:	461a      	mov	r2, r3
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	4413      	add	r3, r2
 8003312:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003314:	7afa      	ldrb	r2, [r7, #11]
 8003316:	89fb      	ldrh	r3, [r7, #14]
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f984 	bl	8003628 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8003320:	8afb      	ldrh	r3, [r7, #22]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80a6 	beq.w	8003474 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8003328:	8afb      	ldrh	r3, [r7, #22]
 800332a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800332e:	d003      	beq.n	8003338 <wm8994_Init+0xc30>
 8003330:	8afb      	ldrh	r3, [r7, #22]
 8003332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003336:	d12b      	bne.n	8003390 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003338:	8b7b      	ldrh	r3, [r7, #26]
 800333a:	f043 0313 	orr.w	r3, r3, #19
 800333e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003340:	89fb      	ldrh	r3, [r7, #14]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	8b7a      	ldrh	r2, [r7, #26]
 8003346:	2101      	movs	r1, #1
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fcf7 	bl	8003d3c <CODEC_IO_Write>
 800334e:	4603      	mov	r3, r0
 8003350:	461a      	mov	r2, r3
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003358:	89fb      	ldrh	r3, [r7, #14]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2202      	movs	r2, #2
 800335e:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fcea 	bl	8003d3c <CODEC_IO_Write>
 8003368:	4603      	mov	r3, r0
 800336a:	461a      	mov	r2, r3
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	4413      	add	r3, r2
 8003370:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8003372:	89fb      	ldrh	r3, [r7, #14]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800337a:	f240 4111 	movw	r1, #1041	@ 0x411
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fcdc 	bl	8003d3c <CODEC_IO_Write>
 8003384:	4603      	mov	r3, r0
 8003386:	461a      	mov	r2, r3
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	4413      	add	r3, r2
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	e06b      	b.n	8003468 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003390:	8afb      	ldrh	r3, [r7, #22]
 8003392:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003396:	d139      	bne.n	800340c <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003398:	8b7b      	ldrh	r3, [r7, #26]
 800339a:	f043 0313 	orr.w	r3, r3, #19
 800339e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80033a0:	89fb      	ldrh	r3, [r7, #14]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	8b7a      	ldrh	r2, [r7, #26]
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fcc7 	bl	8003d3c <CODEC_IO_Write>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4413      	add	r3, r2
 80033b6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80033b8:	89fb      	ldrh	r3, [r7, #14]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2202      	movs	r2, #2
 80033be:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fcba 	bl	8003d3c <CODEC_IO_Write>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	4413      	add	r3, r2
 80033d0:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80033d2:	89fb      	ldrh	r3, [r7, #14]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80033da:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fcac 	bl	8003d3c <CODEC_IO_Write>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	4413      	add	r3, r2
 80033ec:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 80033ee:	89fb      	ldrh	r3, [r7, #14]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80033f6:	f240 4111 	movw	r1, #1041	@ 0x411
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fc9e 	bl	8003d3c <CODEC_IO_Write>
 8003400:	4603      	mov	r3, r0
 8003402:	461a      	mov	r2, r3
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	4413      	add	r3, r2
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	e02d      	b.n	8003468 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 800340c:	8afb      	ldrh	r3, [r7, #22]
 800340e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003412:	d003      	beq.n	800341c <wm8994_Init+0xd14>
 8003414:	8afb      	ldrh	r3, [r7, #22]
 8003416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341a:	d125      	bne.n	8003468 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 800341c:	89fb      	ldrh	r3, [r7, #14]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	220b      	movs	r2, #11
 8003422:	2118      	movs	r1, #24
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fc89 	bl	8003d3c <CODEC_IO_Write>
 800342a:	4603      	mov	r3, r0
 800342c:	461a      	mov	r2, r3
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4413      	add	r3, r2
 8003432:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8003434:	89fb      	ldrh	r3, [r7, #14]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	220b      	movs	r2, #11
 800343a:	211a      	movs	r1, #26
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fc7d 	bl	8003d3c <CODEC_IO_Write>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	4413      	add	r3, r2
 800344a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800344c:	89fb      	ldrh	r3, [r7, #14]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003454:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fc6f 	bl	8003d3c <CODEC_IO_Write>
 800345e:	4603      	mov	r3, r0
 8003460:	461a      	mov	r2, r3
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003468:	7afa      	ldrb	r2, [r7, #11]
 800346a:	89fb      	ldrh	r3, [r7, #14]
 800346c:	4611      	mov	r1, r2
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f8da 	bl	8003628 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8003474:	69fb      	ldr	r3, [r7, #28]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop

08003480 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8003484:	f000 fdd2 	bl	800402c <AUDIO_IO_DeInit>
}
 8003488:	bf00      	nop
 800348a:	bd80      	pop	{r7, pc}

0800348c <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8003496:	f000 fdbf 	bl	8004018 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2100      	movs	r1, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fdf5 	bl	8004090 <AUDIO_IO_Read>
 80034a6:	4603      	mov	r3, r0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	6039      	str	r1, [r7, #0]
 80034ba:	80fb      	strh	r3, [r7, #6]
 80034bc:	4613      	mov	r3, r2
 80034be:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	2100      	movs	r1, #0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 f9d1 	bl	8003870 <wm8994_SetMute>
 80034ce:	4602      	mov	r2, r0
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80034d6:	68fb      	ldr	r3, [r7, #12]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	2101      	movs	r1, #1
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f9bc 	bl	8003870 <wm8994_SetMute>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4413      	add	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2201      	movs	r2, #1
 8003506:	2102      	movs	r1, #2
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fc17 	bl	8003d3c <CODEC_IO_Write>
 800350e:	4603      	mov	r3, r0
 8003510:	461a      	mov	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4413      	add	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8003518:	68fb      	ldr	r3, [r7, #12]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f000 f99b 	bl	8003870 <wm8994_SetMute>
 800353a:	4602      	mov	r2, r0
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003542:	68fb      	ldr	r3, [r7, #12]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	6039      	str	r1, [r7, #0]
 8003556:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 800355c:	4b31      	ldr	r3, [pc, #196]	@ (8003624 <wm8994_Stop+0xd8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d05a      	beq.n	800361a <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	2101      	movs	r1, #1
 8003568:	4618      	mov	r0, r3
 800356a:	f000 f981 	bl	8003870 <wm8994_SetMute>
 800356e:	4602      	mov	r2, r0
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d04e      	beq.n	800361a <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003584:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fbd7 	bl	8003d3c <CODEC_IO_Write>
 800358e:	4603      	mov	r3, r0
 8003590:	461a      	mov	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4413      	add	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035a0:	f240 4122 	movw	r1, #1058	@ 0x422
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fbc9 	bl	8003d3c <CODEC_IO_Write>
 80035aa:	4603      	mov	r3, r0
 80035ac:	461a      	mov	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2200      	movs	r2, #0
 80035ba:	212d      	movs	r1, #45	@ 0x2d
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fbbd 	bl	8003d3c <CODEC_IO_Write>
 80035c2:	4603      	mov	r3, r0
 80035c4:	461a      	mov	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4413      	add	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2200      	movs	r2, #0
 80035d2:	212e      	movs	r1, #46	@ 0x2e
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fbb1 	bl	8003d3c <CODEC_IO_Write>
 80035da:	4603      	mov	r3, r0
 80035dc:	461a      	mov	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4413      	add	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2200      	movs	r2, #0
 80035ea:	2105      	movs	r1, #5
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fba5 	bl	8003d3c <CODEC_IO_Write>
 80035f2:	4603      	mov	r3, r0
 80035f4:	461a      	mov	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4413      	add	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2200      	movs	r2, #0
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fb99 	bl	8003d3c <CODEC_IO_Write>
 800360a:	4603      	mov	r3, r0
 800360c:	461a      	mov	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4413      	add	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8003614:	4b03      	ldr	r3, [pc, #12]	@ (8003624 <wm8994_Stop+0xd8>)
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 800361a:	68fb      	ldr	r3, [r7, #12]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20000cd0 	.word	0x20000cd0

08003628 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	460a      	mov	r2, r1
 8003632:	80fb      	strh	r3, [r7, #6]
 8003634:	4613      	mov	r3, r2
 8003636:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800363c:	797b      	ldrb	r3, [r7, #5]
 800363e:	2b64      	cmp	r3, #100	@ 0x64
 8003640:	d80b      	bhi.n	800365a <wm8994_SetVolume+0x32>
 8003642:	797a      	ldrb	r2, [r7, #5]
 8003644:	4613      	mov	r3, r2
 8003646:	019b      	lsls	r3, r3, #6
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	4a86      	ldr	r2, [pc, #536]	@ (8003864 <wm8994_SetVolume+0x23c>)
 800364c:	fb82 1203 	smull	r1, r2, r2, r3
 8003650:	1152      	asrs	r2, r2, #5
 8003652:	17db      	asrs	r3, r3, #31
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	e000      	b.n	800365c <wm8994_SetVolume+0x34>
 800365a:	2364      	movs	r3, #100	@ 0x64
 800365c:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 800365e:	4b82      	ldr	r3, [pc, #520]	@ (8003868 <wm8994_SetVolume+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 809b 	beq.w	800379e <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8003668:	7afb      	ldrb	r3, [r7, #11]
 800366a:	2b3e      	cmp	r3, #62	@ 0x3e
 800366c:	d93d      	bls.n	80036ea <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	2100      	movs	r1, #0
 8003672:	4618      	mov	r0, r3
 8003674:	f000 f8fc 	bl	8003870 <wm8994_SetMute>
 8003678:	4602      	mov	r2, r0
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4413      	add	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f240 127f 	movw	r2, #383	@ 0x17f
 8003688:	211c      	movs	r1, #28
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fb56 	bl	8003d3c <CODEC_IO_Write>
 8003690:	4603      	mov	r3, r0
 8003692:	461a      	mov	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f240 127f 	movw	r2, #383	@ 0x17f
 80036a2:	211d      	movs	r1, #29
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fb49 	bl	8003d3c <CODEC_IO_Write>
 80036aa:	4603      	mov	r3, r0
 80036ac:	461a      	mov	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4413      	add	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f240 127f 	movw	r2, #383	@ 0x17f
 80036bc:	2126      	movs	r1, #38	@ 0x26
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fb3c 	bl	8003d3c <CODEC_IO_Write>
 80036c4:	4603      	mov	r3, r0
 80036c6:	461a      	mov	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f240 127f 	movw	r2, #383	@ 0x17f
 80036d6:	2127      	movs	r1, #39	@ 0x27
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fb2f 	bl	8003d3c <CODEC_IO_Write>
 80036de:	4603      	mov	r3, r0
 80036e0:	461a      	mov	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4413      	add	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	e059      	b.n	800379e <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 80036ea:	797b      	ldrb	r3, [r7, #5]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	2101      	movs	r1, #1
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f8bb 	bl	8003870 <wm8994_SetMute>
 80036fa:	4602      	mov	r2, r0
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	e04c      	b.n	800379e <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f8b1 	bl	8003870 <wm8994_SetMute>
 800370e:	4602      	mov	r2, r0
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	b2d8      	uxtb	r0, r3
 800371a:	7afb      	ldrb	r3, [r7, #11]
 800371c:	b21b      	sxth	r3, r3
 800371e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003722:	b21b      	sxth	r3, r3
 8003724:	b29b      	uxth	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	211c      	movs	r1, #28
 800372a:	f000 fb07 	bl	8003d3c <CODEC_IO_Write>
 800372e:	4603      	mov	r3, r0
 8003730:	461a      	mov	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4413      	add	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	b2d8      	uxtb	r0, r3
 800373c:	7afb      	ldrb	r3, [r7, #11]
 800373e:	b21b      	sxth	r3, r3
 8003740:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003744:	b21b      	sxth	r3, r3
 8003746:	b29b      	uxth	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	211d      	movs	r1, #29
 800374c:	f000 faf6 	bl	8003d3c <CODEC_IO_Write>
 8003750:	4603      	mov	r3, r0
 8003752:	461a      	mov	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4413      	add	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	b2d8      	uxtb	r0, r3
 800375e:	7afb      	ldrb	r3, [r7, #11]
 8003760:	b21b      	sxth	r3, r3
 8003762:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003766:	b21b      	sxth	r3, r3
 8003768:	b29b      	uxth	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	2126      	movs	r1, #38	@ 0x26
 800376e:	f000 fae5 	bl	8003d3c <CODEC_IO_Write>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4413      	add	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 800377c:	88fb      	ldrh	r3, [r7, #6]
 800377e:	b2d8      	uxtb	r0, r3
 8003780:	7afb      	ldrb	r3, [r7, #11]
 8003782:	b21b      	sxth	r3, r3
 8003784:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003788:	b21b      	sxth	r3, r3
 800378a:	b29b      	uxth	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	2127      	movs	r1, #39	@ 0x27
 8003790:	f000 fad4 	bl	8003d3c <CODEC_IO_Write>
 8003794:	4603      	mov	r3, r0
 8003796:	461a      	mov	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800379e:	4b33      	ldr	r3, [pc, #204]	@ (800386c <wm8994_SetVolume+0x244>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d059      	beq.n	800385a <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80037a6:	797b      	ldrb	r3, [r7, #5]
 80037a8:	2b63      	cmp	r3, #99	@ 0x63
 80037aa:	d80c      	bhi.n	80037c6 <wm8994_SetVolume+0x19e>
 80037ac:	797a      	ldrb	r2, [r7, #5]
 80037ae:	4613      	mov	r3, r2
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003864 <wm8994_SetVolume+0x23c>)
 80037b8:	fb82 1203 	smull	r1, r2, r2, r3
 80037bc:	1152      	asrs	r2, r2, #5
 80037be:	17db      	asrs	r3, r3, #31
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	e000      	b.n	80037c8 <wm8994_SetVolume+0x1a0>
 80037c6:	23ef      	movs	r3, #239	@ 0xef
 80037c8:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	b2d8      	uxtb	r0, r3
 80037ce:	7afb      	ldrb	r3, [r7, #11]
 80037d0:	b21b      	sxth	r3, r3
 80037d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d6:	b21b      	sxth	r3, r3
 80037d8:	b29b      	uxth	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80037e0:	f000 faac 	bl	8003d3c <CODEC_IO_Write>
 80037e4:	4603      	mov	r3, r0
 80037e6:	461a      	mov	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	b2d8      	uxtb	r0, r3
 80037f2:	7afb      	ldrb	r3, [r7, #11]
 80037f4:	b21b      	sxth	r3, r3
 80037f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037fa:	b21b      	sxth	r3, r3
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	f240 4101 	movw	r1, #1025	@ 0x401
 8003804:	f000 fa9a 	bl	8003d3c <CODEC_IO_Write>
 8003808:	4603      	mov	r3, r0
 800380a:	461a      	mov	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4413      	add	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	b2d8      	uxtb	r0, r3
 8003816:	7afb      	ldrb	r3, [r7, #11]
 8003818:	b21b      	sxth	r3, r3
 800381a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381e:	b21b      	sxth	r3, r3
 8003820:	b29b      	uxth	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	f240 4104 	movw	r1, #1028	@ 0x404
 8003828:	f000 fa88 	bl	8003d3c <CODEC_IO_Write>
 800382c:	4603      	mov	r3, r0
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	b2d8      	uxtb	r0, r3
 800383a:	7afb      	ldrb	r3, [r7, #11]
 800383c:	b21b      	sxth	r3, r3
 800383e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003842:	b21b      	sxth	r3, r3
 8003844:	b29b      	uxth	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	f240 4105 	movw	r1, #1029	@ 0x405
 800384c:	f000 fa76 	bl	8003d3c <CODEC_IO_Write>
 8003850:	4603      	mov	r3, r0
 8003852:	461a      	mov	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800385a:	68fb      	ldr	r3, [r7, #12]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	51eb851f 	.word	0x51eb851f
 8003868:	20000cd0 	.word	0x20000cd0
 800386c:	20000cd4 	.word	0x20000cd4

08003870 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8003880:	4b21      	ldr	r3, [pc, #132]	@ (8003908 <wm8994_SetMute+0x98>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d039      	beq.n	80038fc <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d11c      	bne.n	80038c8 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003896:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fa4e 	bl	8003d3c <CODEC_IO_Write>
 80038a0:	4603      	mov	r3, r0
 80038a2:	461a      	mov	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038b2:	f240 4122 	movw	r1, #1058	@ 0x422
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fa40 	bl	8003d3c <CODEC_IO_Write>
 80038bc:	4603      	mov	r3, r0
 80038be:	461a      	mov	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e019      	b.n	80038fc <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2210      	movs	r2, #16
 80038ce:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fa32 	bl	8003d3c <CODEC_IO_Write>
 80038d8:	4603      	mov	r3, r0
 80038da:	461a      	mov	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4413      	add	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2210      	movs	r2, #16
 80038e8:	f240 4122 	movw	r1, #1058	@ 0x422
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fa25 	bl	8003d3c <CODEC_IO_Write>
 80038f2:	4603      	mov	r3, r0
 80038f4:	461a      	mov	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4413      	add	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80038fc:	68fb      	ldr	r3, [r7, #12]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000cd0 	.word	0x20000cd0

0800390c <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	460a      	mov	r2, r1
 8003916:	80fb      	strh	r3, [r7, #6]
 8003918:	4613      	mov	r3, r2
 800391a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8003920:	797b      	ldrb	r3, [r7, #5]
 8003922:	2b03      	cmp	r3, #3
 8003924:	f000 808c 	beq.w	8003a40 <wm8994_SetOutputMode+0x134>
 8003928:	2b03      	cmp	r3, #3
 800392a:	f300 80cb 	bgt.w	8003ac4 <wm8994_SetOutputMode+0x1b8>
 800392e:	2b01      	cmp	r3, #1
 8003930:	d002      	beq.n	8003938 <wm8994_SetOutputMode+0x2c>
 8003932:	2b02      	cmp	r3, #2
 8003934:	d042      	beq.n	80039bc <wm8994_SetOutputMode+0xb0>
 8003936:	e0c5      	b.n	8003ac4 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8003940:	2105      	movs	r1, #5
 8003942:	4618      	mov	r0, r3
 8003944:	f000 f9fa 	bl	8003d3c <CODEC_IO_Write>
 8003948:	4603      	mov	r3, r0
 800394a:	461a      	mov	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4413      	add	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2200      	movs	r2, #0
 8003958:	f240 6101 	movw	r1, #1537	@ 0x601
 800395c:	4618      	mov	r0, r3
 800395e:	f000 f9ed 	bl	8003d3c <CODEC_IO_Write>
 8003962:	4603      	mov	r3, r0
 8003964:	461a      	mov	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2200      	movs	r2, #0
 8003972:	f240 6102 	movw	r1, #1538	@ 0x602
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f9e0 	bl	8003d3c <CODEC_IO_Write>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2202      	movs	r2, #2
 800398c:	f240 6104 	movw	r1, #1540	@ 0x604
 8003990:	4618      	mov	r0, r3
 8003992:	f000 f9d3 	bl	8003d3c <CODEC_IO_Write>
 8003996:	4603      	mov	r3, r0
 8003998:	461a      	mov	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4413      	add	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80039a0:	88fb      	ldrh	r3, [r7, #6]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2202      	movs	r2, #2
 80039a6:	f240 6105 	movw	r1, #1541	@ 0x605
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 f9c6 	bl	8003d3c <CODEC_IO_Write>
 80039b0:	4603      	mov	r3, r0
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
    break;
 80039ba:	e0c5      	b.n	8003b48 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f240 3203 	movw	r2, #771	@ 0x303
 80039c4:	2105      	movs	r1, #5
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 f9b8 	bl	8003d3c <CODEC_IO_Write>
 80039cc:	4603      	mov	r3, r0
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2201      	movs	r2, #1
 80039dc:	f240 6101 	movw	r1, #1537	@ 0x601
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 f9ab 	bl	8003d3c <CODEC_IO_Write>
 80039e6:	4603      	mov	r3, r0
 80039e8:	461a      	mov	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2201      	movs	r2, #1
 80039f6:	f240 6102 	movw	r1, #1538	@ 0x602
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f99e 	bl	8003d3c <CODEC_IO_Write>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f240 6104 	movw	r1, #1540	@ 0x604
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 f991 	bl	8003d3c <CODEC_IO_Write>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4413      	add	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f240 6105 	movw	r1, #1541	@ 0x605
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f984 	bl	8003d3c <CODEC_IO_Write>
 8003a34:	4603      	mov	r3, r0
 8003a36:	461a      	mov	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
    break;
 8003a3e:	e083      	b.n	8003b48 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003a40:	88fb      	ldrh	r3, [r7, #6]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8003a48:	2105      	movs	r1, #5
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f976 	bl	8003d3c <CODEC_IO_Write>
 8003a50:	4603      	mov	r3, r0
 8003a52:	461a      	mov	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4413      	add	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f240 6101 	movw	r1, #1537	@ 0x601
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f969 	bl	8003d3c <CODEC_IO_Write>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4413      	add	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f240 6102 	movw	r1, #1538	@ 0x602
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f95c 	bl	8003d3c <CODEC_IO_Write>
 8003a84:	4603      	mov	r3, r0
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2202      	movs	r2, #2
 8003a94:	f240 6104 	movw	r1, #1540	@ 0x604
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 f94f 	bl	8003d3c <CODEC_IO_Write>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2202      	movs	r2, #2
 8003aae:	f240 6105 	movw	r1, #1541	@ 0x605
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 f942 	bl	8003d3c <CODEC_IO_Write>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
    break;
 8003ac2:	e041      	b.n	8003b48 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	f240 3203 	movw	r2, #771	@ 0x303
 8003acc:	2105      	movs	r1, #5
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f934 	bl	8003d3c <CODEC_IO_Write>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f240 6101 	movw	r1, #1537	@ 0x601
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 f927 	bl	8003d3c <CODEC_IO_Write>
 8003aee:	4603      	mov	r3, r0
 8003af0:	461a      	mov	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4413      	add	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003af8:	88fb      	ldrh	r3, [r7, #6]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2201      	movs	r2, #1
 8003afe:	f240 6102 	movw	r1, #1538	@ 0x602
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 f91a 	bl	8003d3c <CODEC_IO_Write>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4413      	add	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003b12:	88fb      	ldrh	r3, [r7, #6]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2200      	movs	r2, #0
 8003b18:	f240 6104 	movw	r1, #1540	@ 0x604
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 f90d 	bl	8003d3c <CODEC_IO_Write>
 8003b22:	4603      	mov	r3, r0
 8003b24:	461a      	mov	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4413      	add	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2200      	movs	r2, #0
 8003b32:	f240 6105 	movw	r1, #1541	@ 0x605
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 f900 	bl	8003d3c <CODEC_IO_Write>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
    break;    
 8003b46:	bf00      	nop
  }  
  return counter;
 8003b48:	68fb      	ldr	r3, [r7, #12]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	6039      	str	r1, [r7, #0]
 8003b5e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	4a64      	ldr	r2, [pc, #400]	@ (8003cf8 <wm8994_SetFrequency+0x1a4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d079      	beq.n	8003c60 <wm8994_SetFrequency+0x10c>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	4a62      	ldr	r2, [pc, #392]	@ (8003cf8 <wm8994_SetFrequency+0x1a4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	f200 80ad 	bhi.w	8003cd0 <wm8994_SetFrequency+0x17c>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d061      	beq.n	8003c44 <wm8994_SetFrequency+0xf0>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003b86:	4293      	cmp	r3, r2
 8003b88:	f200 80a2 	bhi.w	8003cd0 <wm8994_SetFrequency+0x17c>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003b92:	4293      	cmp	r3, r2
 8003b94:	f000 808e 	beq.w	8003cb4 <wm8994_SetFrequency+0x160>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	f200 8096 	bhi.w	8003cd0 <wm8994_SetFrequency+0x17c>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003baa:	d03d      	beq.n	8003c28 <wm8994_SetFrequency+0xd4>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003bb2:	f200 808d 	bhi.w	8003cd0 <wm8994_SetFrequency+0x17c>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d06b      	beq.n	8003c98 <wm8994_SetFrequency+0x144>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	f200 8082 	bhi.w	8003cd0 <wm8994_SetFrequency+0x17c>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003bd2:	d01b      	beq.n	8003c0c <wm8994_SetFrequency+0xb8>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003bda:	d879      	bhi.n	8003cd0 <wm8994_SetFrequency+0x17c>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003be2:	d005      	beq.n	8003bf0 <wm8994_SetFrequency+0x9c>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d046      	beq.n	8003c7c <wm8994_SetFrequency+0x128>
 8003bee:	e06f      	b.n	8003cd0 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f89e 	bl	8003d3c <CODEC_IO_Write>
 8003c00:	4603      	mov	r3, r0
 8003c02:	461a      	mov	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
    break;
 8003c0a:	e06f      	b.n	8003cec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2233      	movs	r2, #51	@ 0x33
 8003c12:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 f890 	bl	8003d3c <CODEC_IO_Write>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
    break;
 8003c26:	e061      	b.n	8003cec <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2263      	movs	r2, #99	@ 0x63
 8003c2e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f882 	bl	8003d3c <CODEC_IO_Write>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
    break;
 8003c42:	e053      	b.n	8003cec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003c44:	88fb      	ldrh	r3, [r7, #6]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2283      	movs	r2, #131	@ 0x83
 8003c4a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f874 	bl	8003d3c <CODEC_IO_Write>
 8003c54:	4603      	mov	r3, r0
 8003c56:	461a      	mov	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
    break;
 8003c5e:	e045      	b.n	8003cec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	22a3      	movs	r2, #163	@ 0xa3
 8003c66:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 f866 	bl	8003d3c <CODEC_IO_Write>
 8003c70:	4603      	mov	r3, r0
 8003c72:	461a      	mov	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
    break;
 8003c7a:	e037      	b.n	8003cec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2213      	movs	r2, #19
 8003c82:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f858 	bl	8003d3c <CODEC_IO_Write>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
    break;
 8003c96:	e029      	b.n	8003cec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2243      	movs	r2, #67	@ 0x43
 8003c9e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 f84a 	bl	8003d3c <CODEC_IO_Write>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	461a      	mov	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
    break;
 8003cb2:	e01b      	b.n	8003cec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2273      	movs	r2, #115	@ 0x73
 8003cba:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 f83c 	bl	8003d3c <CODEC_IO_Write>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
    break; 
 8003cce:	e00d      	b.n	8003cec <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2283      	movs	r2, #131	@ 0x83
 8003cd6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f82e 	bl	8003d3c <CODEC_IO_Write>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
    break; 
 8003cea:	bf00      	nop
  }
  return counter;
 8003cec:	68fb      	ldr	r3, [r7, #12]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	00017700 	.word	0x00017700

08003cfc <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f812 	bl	8003d3c <CODEC_IO_Write>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <wm8994_Reset+0x38>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8003d22:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <wm8994_Reset+0x3c>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

  return counter;
 8003d28:	68fb      	ldr	r3, [r7, #12]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000cd0 	.word	0x20000cd0
 8003d38:	20000cd4 	.word	0x20000cd4

08003d3c <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
 8003d46:	460b      	mov	r3, r1
 8003d48:	80bb      	strh	r3, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8003d52:	887a      	ldrh	r2, [r7, #2]
 8003d54:	88b9      	ldrh	r1, [r7, #4]
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f96f 	bl	800403c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	b2db      	uxtb	r3, r3
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08c      	sub	sp, #48	@ 0x30
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a51      	ldr	r2, [pc, #324]	@ (8003ebc <I2Cx_MspInit+0x150>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d14d      	bne.n	8003e18 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003d7c:	4b50      	ldr	r3, [pc, #320]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d80:	4a4f      	ldr	r2, [pc, #316]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d86:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d88:	4b4d      	ldr	r3, [pc, #308]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003d94:	2380      	movs	r3, #128	@ 0x80
 8003d96:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003d98:	2312      	movs	r3, #18
 8003d9a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003da0:	2302      	movs	r3, #2
 8003da2:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003da4:	2304      	movs	r3, #4
 8003da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003da8:	f107 031c 	add.w	r3, r7, #28
 8003dac:	4619      	mov	r1, r3
 8003dae:	4845      	ldr	r0, [pc, #276]	@ (8003ec4 <I2Cx_MspInit+0x158>)
 8003db0:	f001 fc3a 	bl	8005628 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003db4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003db8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003dba:	f107 031c 	add.w	r3, r7, #28
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4840      	ldr	r0, [pc, #256]	@ (8003ec4 <I2Cx_MspInit+0x158>)
 8003dc2:	f001 fc31 	bl	8005628 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	4a3d      	ldr	r2, [pc, #244]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003dcc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003dde:	4b38      	ldr	r3, [pc, #224]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	4a37      	ldr	r2, [pc, #220]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003de4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003de8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003dea:	4b35      	ldr	r3, [pc, #212]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	4a34      	ldr	r2, [pc, #208]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003df0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003df4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003df6:	2200      	movs	r2, #0
 8003df8:	210f      	movs	r1, #15
 8003dfa:	2048      	movs	r0, #72	@ 0x48
 8003dfc:	f000 fe77 	bl	8004aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003e00:	2048      	movs	r0, #72	@ 0x48
 8003e02:	f000 fe90 	bl	8004b26 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003e06:	2200      	movs	r2, #0
 8003e08:	210f      	movs	r1, #15
 8003e0a:	2049      	movs	r0, #73	@ 0x49
 8003e0c:	f000 fe6f 	bl	8004aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003e10:	2049      	movs	r0, #73	@ 0x49
 8003e12:	f000 fe88 	bl	8004b26 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003e16:	e04d      	b.n	8003eb4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003e18:	4b29      	ldr	r3, [pc, #164]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1c:	4a28      	ldr	r2, [pc, #160]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003e1e:	f043 0302 	orr.w	r3, r3, #2
 8003e22:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e24:	4b26      	ldr	r3, [pc, #152]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003e30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e34:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003e36:	2312      	movs	r3, #18
 8003e38:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003e42:	2304      	movs	r3, #4
 8003e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003e46:	f107 031c 	add.w	r3, r7, #28
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	481e      	ldr	r0, [pc, #120]	@ (8003ec8 <I2Cx_MspInit+0x15c>)
 8003e4e:	f001 fbeb 	bl	8005628 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003e52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003e58:	f107 031c 	add.w	r3, r7, #28
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	481a      	ldr	r0, [pc, #104]	@ (8003ec8 <I2Cx_MspInit+0x15c>)
 8003e60:	f001 fbe2 	bl	8005628 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003e64:	4b16      	ldr	r3, [pc, #88]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	4a15      	ldr	r2, [pc, #84]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003e6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e70:	4b13      	ldr	r3, [pc, #76]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003e7c:	4b10      	ldr	r3, [pc, #64]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	4a0f      	ldr	r2, [pc, #60]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003e82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e86:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003e88:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8003ec0 <I2Cx_MspInit+0x154>)
 8003e8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e92:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003e94:	2200      	movs	r2, #0
 8003e96:	210f      	movs	r1, #15
 8003e98:	201f      	movs	r0, #31
 8003e9a:	f000 fe28 	bl	8004aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003e9e:	201f      	movs	r0, #31
 8003ea0:	f000 fe41 	bl	8004b26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	210f      	movs	r1, #15
 8003ea8:	2020      	movs	r0, #32
 8003eaa:	f000 fe20 	bl	8004aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003eae:	2020      	movs	r0, #32
 8003eb0:	f000 fe39 	bl	8004b26 <HAL_NVIC_EnableIRQ>
}
 8003eb4:	bf00      	nop
 8003eb6:	3730      	adds	r7, #48	@ 0x30
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000cd8 	.word	0x20000cd8
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40021c00 	.word	0x40021c00
 8003ec8:	40020400 	.word	0x40020400

08003ecc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f002 f9d1 	bl	800627c <HAL_I2C_GetState>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d125      	bne.n	8003f2c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a14      	ldr	r2, [pc, #80]	@ (8003f34 <I2Cx_Init+0x68>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d103      	bne.n	8003ef0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a13      	ldr	r2, [pc, #76]	@ (8003f38 <I2Cx_Init+0x6c>)
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e002      	b.n	8003ef6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a12      	ldr	r2, [pc, #72]	@ (8003f3c <I2Cx_Init+0x70>)
 8003ef4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a11      	ldr	r2, [pc, #68]	@ (8003f40 <I2Cx_Init+0x74>)
 8003efa:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff23 	bl	8003d6c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f001 fe9a 	bl	8005c60 <HAL_I2C_Init>
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000cd8 	.word	0x20000cd8
 8003f38:	40005c00 	.word	0x40005c00
 8003f3c:	40005400 	.word	0x40005400
 8003f40:	40912732 	.word	0x40912732

08003f44 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	@ 0x28
 8003f48:	af04      	add	r7, sp, #16
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	4611      	mov	r1, r2
 8003f50:	461a      	mov	r2, r3
 8003f52:	4603      	mov	r3, r0
 8003f54:	72fb      	strb	r3, [r7, #11]
 8003f56:	460b      	mov	r3, r1
 8003f58:	813b      	strh	r3, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003f62:	7afb      	ldrb	r3, [r7, #11]
 8003f64:	b299      	uxth	r1, r3
 8003f66:	88f8      	ldrh	r0, [r7, #6]
 8003f68:	893a      	ldrh	r2, [r7, #8]
 8003f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f6e:	9302      	str	r3, [sp, #8]
 8003f70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	4603      	mov	r3, r0
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f002 f864 	bl	8006048 <HAL_I2C_Mem_Read>
 8003f80:	4603      	mov	r3, r0
 8003f82:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d004      	beq.n	8003f94 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003f8a:	7afb      	ldrb	r3, [r7, #11]
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f832 	bl	8003ff8 <I2Cx_Error>
  }
  return status;    
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b08a      	sub	sp, #40	@ 0x28
 8003fa2:	af04      	add	r7, sp, #16
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	4608      	mov	r0, r1
 8003fa8:	4611      	mov	r1, r2
 8003faa:	461a      	mov	r2, r3
 8003fac:	4603      	mov	r3, r0
 8003fae:	72fb      	strb	r3, [r7, #11]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	813b      	strh	r3, [r7, #8]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003fbc:	7afb      	ldrb	r3, [r7, #11]
 8003fbe:	b299      	uxth	r1, r3
 8003fc0:	88f8      	ldrh	r0, [r7, #6]
 8003fc2:	893a      	ldrh	r2, [r7, #8]
 8003fc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fc8:	9302      	str	r3, [sp, #8]
 8003fca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f001 ff23 	bl	8005e20 <HAL_I2C_Mem_Write>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003fe4:	7afb      	ldrb	r3, [r7, #11]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f805 	bl	8003ff8 <I2Cx_Error>
  }
  return status;
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f001 fec7 	bl	8005d98 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff ff5e 	bl	8003ecc <I2Cx_Init>
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800401c:	4802      	ldr	r0, [pc, #8]	@ (8004028 <AUDIO_IO_Init+0x10>)
 800401e:	f7ff ff55 	bl	8003ecc <I2Cx_Init>
}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000cd8 	.word	0x20000cd8

0800402c <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
}
 8004030:	bf00      	nop
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af02      	add	r7, sp, #8
 8004042:	4603      	mov	r3, r0
 8004044:	71fb      	strb	r3, [r7, #7]
 8004046:	460b      	mov	r3, r1
 8004048:	80bb      	strh	r3, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800404e:	887b      	ldrh	r3, [r7, #2]
 8004050:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8004052:	89fb      	ldrh	r3, [r7, #14]
 8004054:	0a1b      	lsrs	r3, r3, #8
 8004056:	b29b      	uxth	r3, r3
 8004058:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800405a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	b21a      	sxth	r2, r3
 8004062:	887b      	ldrh	r3, [r7, #2]
 8004064:	b21b      	sxth	r3, r3
 8004066:	4313      	orrs	r3, r2
 8004068:	b21b      	sxth	r3, r3
 800406a:	b29b      	uxth	r3, r3
 800406c:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800406e:	88ba      	ldrh	r2, [r7, #4]
 8004070:	79f9      	ldrb	r1, [r7, #7]
 8004072:	2302      	movs	r3, #2
 8004074:	9301      	str	r3, [sp, #4]
 8004076:	1cbb      	adds	r3, r7, #2
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	2302      	movs	r3, #2
 800407c:	4803      	ldr	r0, [pc, #12]	@ (800408c <AUDIO_IO_Write+0x50>)
 800407e:	f7ff ff8e 	bl	8003f9e <I2Cx_WriteMultiple>
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000cd8 	.word	0x20000cd8

08004090 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af02      	add	r7, sp, #8
 8004096:	4603      	mov	r3, r0
 8004098:	460a      	mov	r2, r1
 800409a:	71fb      	strb	r3, [r7, #7]
 800409c:	4613      	mov	r3, r2
 800409e:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	81bb      	strh	r3, [r7, #12]
 80040a4:	2300      	movs	r3, #0
 80040a6:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80040a8:	88ba      	ldrh	r2, [r7, #4]
 80040aa:	79f9      	ldrb	r1, [r7, #7]
 80040ac:	2302      	movs	r3, #2
 80040ae:	9301      	str	r3, [sp, #4]
 80040b0:	f107 030c 	add.w	r3, r7, #12
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	2302      	movs	r3, #2
 80040b8:	480a      	ldr	r0, [pc, #40]	@ (80040e4 <AUDIO_IO_Read+0x54>)
 80040ba:	f7ff ff43 	bl	8003f44 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80040be:	89bb      	ldrh	r3, [r7, #12]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80040c4:	89bb      	ldrh	r3, [r7, #12]
 80040c6:	b21b      	sxth	r3, r3
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	b21a      	sxth	r2, r3
 80040cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	b21b      	sxth	r3, r3
 80040d4:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80040d6:	89fb      	ldrh	r3, [r7, #14]
 80040d8:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80040da:	89bb      	ldrh	r3, [r7, #12]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20000cd8 	.word	0x20000cd8

080040e8 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fbfd 	bl	80048f0 <HAL_Delay>
}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8004108:	480e      	ldr	r0, [pc, #56]	@ (8004144 <HAL_SAI_ErrorCallback+0x44>)
 800410a:	f004 f951 	bl	80083b0 <HAL_SAI_GetState>
 800410e:	4603      	mov	r3, r0
 8004110:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8004112:	480d      	ldr	r0, [pc, #52]	@ (8004148 <HAL_SAI_ErrorCallback+0x48>)
 8004114:	f004 f94c 	bl	80083b0 <HAL_SAI_GetState>
 8004118:	4603      	mov	r3, r0
 800411a:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d002      	beq.n	8004128 <HAL_SAI_ErrorCallback+0x28>
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	2b12      	cmp	r3, #18
 8004126:	d101      	bne.n	800412c <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8004128:	f000 f810 	bl	800414c <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 800412c:	7bbb      	ldrb	r3, [r7, #14]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d002      	beq.n	8004138 <HAL_SAI_ErrorCallback+0x38>
 8004132:	7bbb      	ldrb	r3, [r7, #14]
 8004134:	2b22      	cmp	r3, #34	@ 0x22
 8004136:	d101      	bne.n	800413c <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8004138:	f000 f9f6 	bl	8004528 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20000d30 	.word	0x20000d30
 8004148:	20000db4 	.word	0x20000db4

0800414c <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
}
 8004150:	bf00      	nop
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 800415c:	b580      	push	{r7, lr}
 800415e:	b08c      	sub	sp, #48	@ 0x30
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8004166:	4b63      	ldr	r3, [pc, #396]	@ (80042f4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416a:	4a62      	ldr	r2, [pc, #392]	@ (80042f4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800416c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004170:	6453      	str	r3, [r2, #68]	@ 0x44
 8004172:	4b60      	ldr	r3, [pc, #384]	@ (80042f4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800417e:	4b5d      	ldr	r3, [pc, #372]	@ (80042f4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	4a5c      	ldr	r2, [pc, #368]	@ (80042f4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004188:	6313      	str	r3, [r2, #48]	@ 0x30
 800418a:	4b5a      	ldr	r3, [pc, #360]	@ (80042f4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8004196:	4b57      	ldr	r3, [pc, #348]	@ (80042f4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419a:	4a56      	ldr	r2, [pc, #344]	@ (80042f4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80041a2:	4b54      	ldr	r3, [pc, #336]	@ (80042f4 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 80041ae:	4b51      	ldr	r3, [pc, #324]	@ (80042f4 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b2:	4a50      	ldr	r2, [pc, #320]	@ (80042f4 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ba:	4b4e      	ldr	r3, [pc, #312]	@ (80042f4 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 80041c6:	2380      	movs	r3, #128	@ 0x80
 80041c8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80041ca:	2302      	movs	r3, #2
 80041cc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80041d2:	2303      	movs	r3, #3
 80041d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80041d6:	230a      	movs	r3, #10
 80041d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80041da:	f107 031c 	add.w	r3, r7, #28
 80041de:	4619      	mov	r1, r3
 80041e0:	4845      	ldr	r0, [pc, #276]	@ (80042f8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80041e2:	f001 fa21 	bl	8005628 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80041e6:	2320      	movs	r3, #32
 80041e8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80041ea:	2302      	movs	r3, #2
 80041ec:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80041f2:	2303      	movs	r3, #3
 80041f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80041f6:	230a      	movs	r3, #10
 80041f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80041fa:	f107 031c 	add.w	r3, r7, #28
 80041fe:	4619      	mov	r1, r3
 8004200:	483d      	ldr	r0, [pc, #244]	@ (80042f8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004202:	f001 fa11 	bl	8005628 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8004206:	2340      	movs	r3, #64	@ 0x40
 8004208:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800420a:	2302      	movs	r3, #2
 800420c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800420e:	2300      	movs	r3, #0
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004212:	2303      	movs	r3, #3
 8004214:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004216:	230a      	movs	r3, #10
 8004218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800421a:	f107 031c 	add.w	r3, r7, #28
 800421e:	4619      	mov	r1, r3
 8004220:	4835      	ldr	r0, [pc, #212]	@ (80042f8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004222:	f001 fa01 	bl	8005628 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8004226:	2310      	movs	r3, #16
 8004228:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800422a:	2302      	movs	r3, #2
 800422c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800422e:	2300      	movs	r3, #0
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004232:	2303      	movs	r3, #3
 8004234:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004236:	230a      	movs	r3, #10
 8004238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800423a:	f107 031c 	add.w	r3, r7, #28
 800423e:	4619      	mov	r1, r3
 8004240:	482d      	ldr	r0, [pc, #180]	@ (80042f8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004242:	f001 f9f1 	bl	8005628 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8004246:	4b2b      	ldr	r3, [pc, #172]	@ (80042f4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424a:	4a2a      	ldr	r2, [pc, #168]	@ (80042f4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800424c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004250:	6313      	str	r3, [r2, #48]	@ 0x30
 8004252:	4b28      	ldr	r3, [pc, #160]	@ (80042f4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a26      	ldr	r2, [pc, #152]	@ (80042fc <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d138      	bne.n	80042da <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8004268:	4b25      	ldr	r3, [pc, #148]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800426a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800426e:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004270:	4b23      	ldr	r3, [pc, #140]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004272:	2240      	movs	r2, #64	@ 0x40
 8004274:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004276:	4b22      	ldr	r3, [pc, #136]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004278:	2200      	movs	r2, #0
 800427a:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800427c:	4b20      	ldr	r3, [pc, #128]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800427e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004282:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8004284:	4b1e      	ldr	r3, [pc, #120]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004286:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800428a:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 800428c:	4b1c      	ldr	r3, [pc, #112]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800428e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004292:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8004294:	4b1a      	ldr	r3, [pc, #104]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004296:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800429a:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800429c:	4b18      	ldr	r3, [pc, #96]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800429e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042a2:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80042a4:	4b16      	ldr	r3, [pc, #88]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042a6:	2204      	movs	r2, #4
 80042a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80042aa:	4b15      	ldr	r3, [pc, #84]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042ac:	2203      	movs	r2, #3
 80042ae:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80042b0:	4b13      	ldr	r3, [pc, #76]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80042b6:	4b12      	ldr	r3, [pc, #72]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80042bc:	4b10      	ldr	r3, [pc, #64]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042be:	4a11      	ldr	r2, [pc, #68]	@ (8004304 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 80042c0:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042c6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80042c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 80042ce:	480c      	ldr	r0, [pc, #48]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042d0:	f000 fde4 	bl	8004e9c <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 80042d4:	480a      	ldr	r0, [pc, #40]	@ (8004300 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042d6:	f000 fd33 	bl	8004d40 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80042da:	2200      	movs	r2, #0
 80042dc:	210e      	movs	r1, #14
 80042de:	203c      	movs	r0, #60	@ 0x3c
 80042e0:	f000 fc05 	bl	8004aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 80042e4:	203c      	movs	r0, #60	@ 0x3c
 80042e6:	f000 fc1e 	bl	8004b26 <HAL_NVIC_EnableIRQ>
}
 80042ea:	bf00      	nop
 80042ec:	3730      	adds	r7, #48	@ 0x30
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40022000 	.word	0x40022000
 80042fc:	40015c04 	.word	0x40015c04
 8004300:	20000e38 	.word	0x20000e38
 8004304:	40026470 	.word	0x40026470

08004308 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8004308:	b580      	push	{r7, lr}
 800430a:	b0a6      	sub	sp, #152	@ 0x98
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004314:	f107 0314 	add.w	r3, r7, #20
 8004318:	4618      	mov	r0, r3
 800431a:	f003 fb49 	bl	80079b0 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8004324:	4293      	cmp	r3, r2
 8004326:	d009      	beq.n	800433c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f245 6222 	movw	r2, #22050	@ 0x5622
 800432e:	4293      	cmp	r3, r2
 8004330:	d004      	beq.n	800433c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8004338:	4293      	cmp	r3, r2
 800433a:	d112      	bne.n	8004362 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800433c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004340:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004342:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004346:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8004348:	f240 13ad 	movw	r3, #429	@ 0x1ad
 800434c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800434e:	2302      	movs	r3, #2
 8004350:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8004352:	2313      	movs	r3, #19
 8004354:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004356:	f107 0314 	add.w	r3, r7, #20
 800435a:	4618      	mov	r0, r3
 800435c:	f002 ff38 	bl	80071d0 <HAL_RCCEx_PeriphCLKConfig>
 8004360:	e012      	b.n	8004388 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004362:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004366:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004368:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800436c:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800436e:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8004372:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8004374:	2307      	movs	r3, #7
 8004376:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8004378:	2301      	movs	r3, #1
 800437a:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	4618      	mov	r0, r3
 8004382:	f002 ff25 	bl	80071d0 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	3798      	adds	r7, #152	@ 0x98
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	68f9      	ldr	r1, [r7, #12]
 80043a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80043a6:	f000 f805 	bl	80043b4 <BSP_AUDIO_IN_InitEx>
 80043aa:	4603      	mov	r3, r0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80043b4:	b590      	push	{r4, r7, lr}
 80043b6:	b089      	sub	sp, #36	@ 0x24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	4603      	mov	r3, r0
 80043c2:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 80043cc:	89fb      	ldrh	r3, [r7, #14]
 80043ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d2:	d006      	beq.n	80043e2 <BSP_AUDIO_IN_InitEx+0x2e>
 80043d4:	89fb      	ldrh	r3, [r7, #14]
 80043d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043da:	d002      	beq.n	80043e2 <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e046      	b.n	8004470 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 80043e2:	f000 fa11 	bl	8004808 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80043e6:	2200      	movs	r2, #0
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	4824      	ldr	r0, [pc, #144]	@ (800447c <BSP_AUDIO_IN_InitEx+0xc8>)
 80043ec:	f7ff ff8c 	bl	8004308 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80043f0:	4b22      	ldr	r3, [pc, #136]	@ (800447c <BSP_AUDIO_IN_InitEx+0xc8>)
 80043f2:	4a23      	ldr	r2, [pc, #140]	@ (8004480 <BSP_AUDIO_IN_InitEx+0xcc>)
 80043f4:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80043f6:	4821      	ldr	r0, [pc, #132]	@ (800447c <BSP_AUDIO_IN_InitEx+0xc8>)
 80043f8:	f003 ffda 	bl	80083b0 <HAL_SAI_GetState>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d107      	bne.n	8004412 <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8004402:	2100      	movs	r1, #0
 8004404:	481d      	ldr	r0, [pc, #116]	@ (800447c <BSP_AUDIO_IN_InitEx+0xc8>)
 8004406:	f7ff fea9 	bl	800415c <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 800440a:	2100      	movs	r1, #0
 800440c:	481b      	ldr	r0, [pc, #108]	@ (800447c <BSP_AUDIO_IN_InitEx+0xc8>)
 800440e:	f000 f893 	bl	8004538 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8004412:	89fb      	ldrh	r3, [r7, #14]
 8004414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004418:	d102      	bne.n	8004420 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 800441a:	230a      	movs	r3, #10
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	e001      	b.n	8004424 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8004420:	2305      	movs	r3, #5
 8004422:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	69b9      	ldr	r1, [r7, #24]
 8004428:	2001      	movs	r0, #1
 800442a:	f000 f937 	bl	800469c <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800442e:	4b15      	ldr	r3, [pc, #84]	@ (8004484 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2034      	movs	r0, #52	@ 0x34
 8004434:	4798      	blx	r3
 8004436:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f648 1294 	movw	r2, #35220	@ 0x8994
 800443e:	4293      	cmp	r3, r2
 8004440:	d109      	bne.n	8004456 <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8004442:	4b10      	ldr	r3, [pc, #64]	@ (8004484 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004446:	2034      	movs	r0, #52	@ 0x34
 8004448:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 800444a:	4b0f      	ldr	r3, [pc, #60]	@ (8004488 <BSP_AUDIO_IN_InitEx+0xd4>)
 800444c:	4a0d      	ldr	r2, [pc, #52]	@ (8004484 <BSP_AUDIO_IN_InitEx+0xd0>)
 800444e:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	77fb      	strb	r3, [r7, #31]
 8004454:	e001      	b.n	800445a <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 800445a:	7ffb      	ldrb	r3, [r7, #31]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d107      	bne.n	8004470 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8004460:	4b09      	ldr	r3, [pc, #36]	@ (8004488 <BSP_AUDIO_IN_InitEx+0xd4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681c      	ldr	r4, [r3, #0]
 8004466:	89f9      	ldrh	r1, [r7, #14]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2264      	movs	r2, #100	@ 0x64
 800446c:	2034      	movs	r0, #52	@ 0x34
 800446e:	47a0      	blx	r4
    }
  }
  return ret;
 8004470:	7ffb      	ldrb	r3, [r7, #31]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3724      	adds	r7, #36	@ 0x24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd90      	pop	{r4, r7, pc}
 800447a:	bf00      	nop
 800447c:	20000db4 	.word	0x20000db4
 8004480:	40015c24 	.word	0x40015c24
 8004484:	20000004 	.word	0x20000004
 8004488:	20000d2c 	.word	0x20000d2c

0800448c <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	b29b      	uxth	r3, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	4805      	ldr	r0, [pc, #20]	@ (80044b8 <BSP_AUDIO_IN_Record+0x2c>)
 80044a4:	f003 fef6 	bl	8008294 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
  
  return ret;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	b2db      	uxtb	r3, r3
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000db4 	.word	0x20000db4

080044bc <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 80044c4:	480c      	ldr	r0, [pc, #48]	@ (80044f8 <BSP_AUDIO_IN_Stop+0x3c>)
 80044c6:	f003 fe72 	bl	80081ae <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80044ca:	4b0c      	ldr	r3, [pc, #48]	@ (80044fc <BSP_AUDIO_IN_Stop+0x40>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	2034      	movs	r0, #52	@ 0x34
 80044d4:	4798      	blx	r3
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e006      	b.n	80044ee <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d102      	bne.n	80044ec <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 80044e6:	2001      	movs	r0, #1
 80044e8:	f000 fa02 	bl	80048f0 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80044ec:	2300      	movs	r3, #0
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000db4 	.word	0x20000db4
 80044fc:	20000d2c 	.word	0x20000d2c

08004500 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8004508:	f006 fcfc 	bl	800af04 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 800451c:	f006 fd3a 	bl	800af94 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 800452c:	bf00      	nop
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08c      	sub	sp, #48	@ 0x30
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8004542:	4b50      	ldr	r3, [pc, #320]	@ (8004684 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004546:	4a4f      	ldr	r2, [pc, #316]	@ (8004684 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004548:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800454c:	6453      	str	r3, [r2, #68]	@ 0x44
 800454e:	4b4d      	ldr	r3, [pc, #308]	@ (8004684 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004552:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004556:	61bb      	str	r3, [r7, #24]
 8004558:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 800455a:	4b4a      	ldr	r3, [pc, #296]	@ (8004684 <BSP_AUDIO_IN_MspInit+0x14c>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455e:	4a49      	ldr	r2, [pc, #292]	@ (8004684 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004564:	6313      	str	r3, [r2, #48]	@ 0x30
 8004566:	4b47      	ldr	r3, [pc, #284]	@ (8004684 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8004572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004576:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004578:	2302      	movs	r3, #2
 800457a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004580:	2302      	movs	r3, #2
 8004582:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8004584:	230a      	movs	r3, #10
 8004586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8004588:	f107 031c 	add.w	r3, r7, #28
 800458c:	4619      	mov	r1, r3
 800458e:	483e      	ldr	r0, [pc, #248]	@ (8004688 <BSP_AUDIO_IN_MspInit+0x150>)
 8004590:	f001 f84a 	bl	8005628 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8004594:	4b3b      	ldr	r3, [pc, #236]	@ (8004684 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004598:	4a3a      	ldr	r2, [pc, #232]	@ (8004684 <BSP_AUDIO_IN_MspInit+0x14c>)
 800459a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800459e:	6313      	str	r3, [r2, #48]	@ 0x30
 80045a0:	4b38      	ldr	r3, [pc, #224]	@ (8004684 <BSP_AUDIO_IN_MspInit+0x14c>)
 80045a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80045ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045b0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80045b2:	2300      	movs	r3, #0
 80045b4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80045ba:	2302      	movs	r3, #2
 80045bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80045be:	f107 031c 	add.w	r3, r7, #28
 80045c2:	4619      	mov	r1, r3
 80045c4:	4831      	ldr	r0, [pc, #196]	@ (800468c <BSP_AUDIO_IN_MspInit+0x154>)
 80045c6:	f001 f82f 	bl	8005628 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80045ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004684 <BSP_AUDIO_IN_MspInit+0x14c>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004684 <BSP_AUDIO_IN_MspInit+0x14c>)
 80045d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80045d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004684 <BSP_AUDIO_IN_MspInit+0x14c>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004690 <BSP_AUDIO_IN_MspInit+0x158>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d137      	bne.n	800465c <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 80045ec:	4b29      	ldr	r3, [pc, #164]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80045f2:	4b28      	ldr	r3, [pc, #160]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80045f8:	4b26      	ldr	r3, [pc, #152]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80045fe:	4b25      	ldr	r3, [pc, #148]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004600:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004604:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8004606:	4b23      	ldr	r3, [pc, #140]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004608:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800460c:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800460e:	4b21      	ldr	r3, [pc, #132]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004610:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004614:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8004616:	4b1f      	ldr	r3, [pc, #124]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004618:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800461c:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800461e:	4b1d      	ldr	r3, [pc, #116]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004620:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004624:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004626:	4b1b      	ldr	r3, [pc, #108]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004628:	2200      	movs	r2, #0
 800462a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800462c:	4b19      	ldr	r3, [pc, #100]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 800462e:	2203      	movs	r2, #3
 8004630:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004632:	4b18      	ldr	r3, [pc, #96]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004634:	2200      	movs	r2, #0
 8004636:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8004638:	4b16      	ldr	r3, [pc, #88]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 800463a:	2200      	movs	r2, #0
 800463c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800463e:	4b15      	ldr	r3, [pc, #84]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004640:	4a15      	ldr	r2, [pc, #84]	@ (8004698 <BSP_AUDIO_IN_MspInit+0x160>)
 8004642:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a13      	ldr	r2, [pc, #76]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004648:	671a      	str	r2, [r3, #112]	@ 0x70
 800464a:	4a12      	ldr	r2, [pc, #72]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8004650:	4810      	ldr	r0, [pc, #64]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004652:	f000 fc23 	bl	8004e9c <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8004656:	480f      	ldr	r0, [pc, #60]	@ (8004694 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004658:	f000 fb72 	bl	8004d40 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800465c:	2200      	movs	r2, #0
 800465e:	210f      	movs	r1, #15
 8004660:	2046      	movs	r0, #70	@ 0x46
 8004662:	f000 fa44 	bl	8004aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8004666:	2046      	movs	r0, #70	@ 0x46
 8004668:	f000 fa5d 	bl	8004b26 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800466c:	2200      	movs	r2, #0
 800466e:	210f      	movs	r1, #15
 8004670:	2028      	movs	r0, #40	@ 0x28
 8004672:	f000 fa3c 	bl	8004aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8004676:	2028      	movs	r0, #40	@ 0x28
 8004678:	f000 fa55 	bl	8004b26 <HAL_NVIC_EnableIRQ>
}
 800467c:	bf00      	nop
 800467e:	3730      	adds	r7, #48	@ 0x30
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40023800 	.word	0x40023800
 8004688:	40021800 	.word	0x40021800
 800468c:	40021c00 	.word	0x40021c00
 8004690:	40015c24 	.word	0x40015c24
 8004694:	20000e98 	.word	0x20000e98
 8004698:	400264b8 	.word	0x400264b8

0800469c <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80046a8:	4b53      	ldr	r3, [pc, #332]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80046aa:	4a54      	ldr	r2, [pc, #336]	@ (80047fc <SAIx_In_Init+0x160>)
 80046ac:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80046ae:	4b52      	ldr	r3, [pc, #328]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	4b50      	ldr	r3, [pc, #320]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80046bc:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80046be:	4a4e      	ldr	r2, [pc, #312]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 80046c4:	4a4c      	ldr	r2, [pc, #304]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80046ca:	4b4b      	ldr	r3, [pc, #300]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80046d0:	4b49      	ldr	r3, [pc, #292]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80046d6:	4b48      	ldr	r3, [pc, #288]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80046d8:	2280      	movs	r2, #128	@ 0x80
 80046da:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80046dc:	4b46      	ldr	r3, [pc, #280]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80046de:	2200      	movs	r2, #0
 80046e0:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80046e2:	4b45      	ldr	r3, [pc, #276]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80046e8:	4b43      	ldr	r3, [pc, #268]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80046ee:	4b42      	ldr	r3, [pc, #264]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80046f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046f4:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80046f6:	4b40      	ldr	r3, [pc, #256]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 80046fc:	4b3e      	ldr	r3, [pc, #248]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80046fe:	2240      	movs	r2, #64	@ 0x40
 8004700:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8004702:	4b3d      	ldr	r3, [pc, #244]	@ (80047f8 <SAIx_In_Init+0x15c>)
 8004704:	2220      	movs	r2, #32
 8004706:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004708:	4b3b      	ldr	r3, [pc, #236]	@ (80047f8 <SAIx_In_Init+0x15c>)
 800470a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800470e:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004710:	4b39      	ldr	r3, [pc, #228]	@ (80047f8 <SAIx_In_Init+0x15c>)
 8004712:	2200      	movs	r2, #0
 8004714:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004716:	4b38      	ldr	r3, [pc, #224]	@ (80047f8 <SAIx_In_Init+0x15c>)
 8004718:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800471c:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800471e:	4b36      	ldr	r3, [pc, #216]	@ (80047f8 <SAIx_In_Init+0x15c>)
 8004720:	2200      	movs	r2, #0
 8004722:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004724:	4b34      	ldr	r3, [pc, #208]	@ (80047f8 <SAIx_In_Init+0x15c>)
 8004726:	2200      	movs	r2, #0
 8004728:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 800472a:	4b33      	ldr	r3, [pc, #204]	@ (80047f8 <SAIx_In_Init+0x15c>)
 800472c:	2204      	movs	r2, #4
 800472e:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8004730:	4a31      	ldr	r2, [pc, #196]	@ (80047f8 <SAIx_In_Init+0x15c>)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8004736:	4830      	ldr	r0, [pc, #192]	@ (80047f8 <SAIx_In_Init+0x15c>)
 8004738:	f003 fb86 	bl	8007e48 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800473c:	4b30      	ldr	r3, [pc, #192]	@ (8004800 <SAIx_In_Init+0x164>)
 800473e:	4a31      	ldr	r2, [pc, #196]	@ (8004804 <SAIx_In_Init+0x168>)
 8004740:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004742:	4b2f      	ldr	r3, [pc, #188]	@ (8004800 <SAIx_In_Init+0x164>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b2d      	ldr	r3, [pc, #180]	@ (8004800 <SAIx_In_Init+0x164>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004750:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8004752:	4a2b      	ldr	r2, [pc, #172]	@ (8004800 <SAIx_In_Init+0x164>)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8004758:	4b29      	ldr	r3, [pc, #164]	@ (8004800 <SAIx_In_Init+0x164>)
 800475a:	2203      	movs	r2, #3
 800475c:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800475e:	4b28      	ldr	r3, [pc, #160]	@ (8004800 <SAIx_In_Init+0x164>)
 8004760:	2200      	movs	r2, #0
 8004762:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004764:	4b26      	ldr	r3, [pc, #152]	@ (8004800 <SAIx_In_Init+0x164>)
 8004766:	2200      	movs	r2, #0
 8004768:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 800476a:	4b25      	ldr	r3, [pc, #148]	@ (8004800 <SAIx_In_Init+0x164>)
 800476c:	2280      	movs	r2, #128	@ 0x80
 800476e:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004770:	4b23      	ldr	r3, [pc, #140]	@ (8004800 <SAIx_In_Init+0x164>)
 8004772:	2200      	movs	r2, #0
 8004774:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004776:	4b22      	ldr	r3, [pc, #136]	@ (8004800 <SAIx_In_Init+0x164>)
 8004778:	2201      	movs	r2, #1
 800477a:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 800477c:	4b20      	ldr	r3, [pc, #128]	@ (8004800 <SAIx_In_Init+0x164>)
 800477e:	2201      	movs	r2, #1
 8004780:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8004782:	4b1f      	ldr	r3, [pc, #124]	@ (8004800 <SAIx_In_Init+0x164>)
 8004784:	2200      	movs	r2, #0
 8004786:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004788:	4b1d      	ldr	r3, [pc, #116]	@ (8004800 <SAIx_In_Init+0x164>)
 800478a:	2201      	movs	r2, #1
 800478c:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 800478e:	4b1c      	ldr	r3, [pc, #112]	@ (8004800 <SAIx_In_Init+0x164>)
 8004790:	2240      	movs	r2, #64	@ 0x40
 8004792:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8004794:	4b1a      	ldr	r3, [pc, #104]	@ (8004800 <SAIx_In_Init+0x164>)
 8004796:	2220      	movs	r2, #32
 8004798:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800479a:	4b19      	ldr	r3, [pc, #100]	@ (8004800 <SAIx_In_Init+0x164>)
 800479c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80047a0:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80047a2:	4b17      	ldr	r3, [pc, #92]	@ (8004800 <SAIx_In_Init+0x164>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80047a8:	4b15      	ldr	r3, [pc, #84]	@ (8004800 <SAIx_In_Init+0x164>)
 80047aa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80047ae:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80047b0:	4b13      	ldr	r3, [pc, #76]	@ (8004800 <SAIx_In_Init+0x164>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80047b6:	4b12      	ldr	r3, [pc, #72]	@ (8004800 <SAIx_In_Init+0x164>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 80047bc:	4b10      	ldr	r3, [pc, #64]	@ (8004800 <SAIx_In_Init+0x164>)
 80047be:	2204      	movs	r2, #4
 80047c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80047c2:	4a0f      	ldr	r2, [pc, #60]	@ (8004800 <SAIx_In_Init+0x164>)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 80047c8:	480d      	ldr	r0, [pc, #52]	@ (8004800 <SAIx_In_Init+0x164>)
 80047ca:	f003 fb3d 	bl	8007e48 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 80047ce:	4b0a      	ldr	r3, [pc, #40]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	4b08      	ldr	r3, [pc, #32]	@ (80047f8 <SAIx_In_Init+0x15c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80047dc:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 80047de:	4b08      	ldr	r3, [pc, #32]	@ (8004800 <SAIx_In_Init+0x164>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b06      	ldr	r3, [pc, #24]	@ (8004800 <SAIx_In_Init+0x164>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80047ec:	601a      	str	r2, [r3, #0]
}
 80047ee:	bf00      	nop
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000d30 	.word	0x20000d30
 80047fc:	40015c04 	.word	0x40015c04
 8004800:	20000db4 	.word	0x20000db4
 8004804:	40015c24 	.word	0x40015c24

08004808 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800480c:	4b07      	ldr	r3, [pc, #28]	@ (800482c <SAIx_In_DeInit+0x24>)
 800480e:	4a08      	ldr	r2, [pc, #32]	@ (8004830 <SAIx_In_DeInit+0x28>)
 8004810:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004812:	4b06      	ldr	r3, [pc, #24]	@ (800482c <SAIx_In_DeInit+0x24>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4b04      	ldr	r3, [pc, #16]	@ (800482c <SAIx_In_DeInit+0x24>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004820:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8004822:	4802      	ldr	r0, [pc, #8]	@ (800482c <SAIx_In_DeInit+0x24>)
 8004824:	f003 fc8e 	bl	8008144 <HAL_SAI_DeInit>
}
 8004828:	bf00      	nop
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000db4 	.word	0x20000db4
 8004830:	40015c24 	.word	0x40015c24

08004834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004838:	2003      	movs	r0, #3
 800483a:	f000 f94d 	bl	8004ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800483e:	2000      	movs	r0, #0
 8004840:	f000 f806 	bl	8004850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004844:	f7fd fd1c 	bl	8002280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004858:	4b12      	ldr	r3, [pc, #72]	@ (80048a4 <HAL_InitTick+0x54>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4b12      	ldr	r3, [pc, #72]	@ (80048a8 <HAL_InitTick+0x58>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	4619      	mov	r1, r3
 8004862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004866:	fbb3 f3f1 	udiv	r3, r3, r1
 800486a:	fbb2 f3f3 	udiv	r3, r2, r3
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f967 	bl	8004b42 <HAL_SYSTICK_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e00e      	b.n	800489c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b0f      	cmp	r3, #15
 8004882:	d80a      	bhi.n	800489a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004884:	2200      	movs	r2, #0
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	f000 f92f 	bl	8004aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004890:	4a06      	ldr	r2, [pc, #24]	@ (80048ac <HAL_InitTick+0x5c>)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e000      	b.n	800489c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
}
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20000000 	.word	0x20000000
 80048a8:	2000003c 	.word	0x2000003c
 80048ac:	20000038 	.word	0x20000038

080048b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048b4:	4b06      	ldr	r3, [pc, #24]	@ (80048d0 <HAL_IncTick+0x20>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	4b06      	ldr	r3, [pc, #24]	@ (80048d4 <HAL_IncTick+0x24>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4413      	add	r3, r2
 80048c0:	4a04      	ldr	r2, [pc, #16]	@ (80048d4 <HAL_IncTick+0x24>)
 80048c2:	6013      	str	r3, [r2, #0]
}
 80048c4:	bf00      	nop
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	2000003c 	.word	0x2000003c
 80048d4:	20000ef8 	.word	0x20000ef8

080048d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return uwTick;
 80048dc:	4b03      	ldr	r3, [pc, #12]	@ (80048ec <HAL_GetTick+0x14>)
 80048de:	681b      	ldr	r3, [r3, #0]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20000ef8 	.word	0x20000ef8

080048f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048f8:	f7ff ffee 	bl	80048d8 <HAL_GetTick>
 80048fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d005      	beq.n	8004916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800490a:	4b0a      	ldr	r3, [pc, #40]	@ (8004934 <HAL_Delay+0x44>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	461a      	mov	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004916:	bf00      	nop
 8004918:	f7ff ffde 	bl	80048d8 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	429a      	cmp	r2, r3
 8004926:	d8f7      	bhi.n	8004918 <HAL_Delay+0x28>
  {
  }
}
 8004928:	bf00      	nop
 800492a:	bf00      	nop
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	2000003c 	.word	0x2000003c

08004938 <__NVIC_SetPriorityGrouping>:
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004948:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <__NVIC_SetPriorityGrouping+0x40>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004954:	4013      	ands	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004960:	4b06      	ldr	r3, [pc, #24]	@ (800497c <__NVIC_SetPriorityGrouping+0x44>)
 8004962:	4313      	orrs	r3, r2
 8004964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004966:	4a04      	ldr	r2, [pc, #16]	@ (8004978 <__NVIC_SetPriorityGrouping+0x40>)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	60d3      	str	r3, [r2, #12]
}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	e000ed00 	.word	0xe000ed00
 800497c:	05fa0000 	.word	0x05fa0000

08004980 <__NVIC_GetPriorityGrouping>:
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004984:	4b04      	ldr	r3, [pc, #16]	@ (8004998 <__NVIC_GetPriorityGrouping+0x18>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	0a1b      	lsrs	r3, r3, #8
 800498a:	f003 0307 	and.w	r3, r3, #7
}
 800498e:	4618      	mov	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000ed00 	.word	0xe000ed00

0800499c <__NVIC_EnableIRQ>:
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	db0b      	blt.n	80049c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ae:	79fb      	ldrb	r3, [r7, #7]
 80049b0:	f003 021f 	and.w	r2, r3, #31
 80049b4:	4907      	ldr	r1, [pc, #28]	@ (80049d4 <__NVIC_EnableIRQ+0x38>)
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2001      	movs	r0, #1
 80049be:	fa00 f202 	lsl.w	r2, r0, r2
 80049c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	e000e100 	.word	0xe000e100

080049d8 <__NVIC_SetPriority>:
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	6039      	str	r1, [r7, #0]
 80049e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	db0a      	blt.n	8004a02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	490c      	ldr	r1, [pc, #48]	@ (8004a24 <__NVIC_SetPriority+0x4c>)
 80049f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f6:	0112      	lsls	r2, r2, #4
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	440b      	add	r3, r1
 80049fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004a00:	e00a      	b.n	8004a18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	4908      	ldr	r1, [pc, #32]	@ (8004a28 <__NVIC_SetPriority+0x50>)
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	3b04      	subs	r3, #4
 8004a10:	0112      	lsls	r2, r2, #4
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	440b      	add	r3, r1
 8004a16:	761a      	strb	r2, [r3, #24]
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	e000e100 	.word	0xe000e100
 8004a28:	e000ed00 	.word	0xe000ed00

08004a2c <NVIC_EncodePriority>:
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b089      	sub	sp, #36	@ 0x24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f1c3 0307 	rsb	r3, r3, #7
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	bf28      	it	cs
 8004a4a:	2304      	movcs	r3, #4
 8004a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	3304      	adds	r3, #4
 8004a52:	2b06      	cmp	r3, #6
 8004a54:	d902      	bls.n	8004a5c <NVIC_EncodePriority+0x30>
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	3b03      	subs	r3, #3
 8004a5a:	e000      	b.n	8004a5e <NVIC_EncodePriority+0x32>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a60:	f04f 32ff 	mov.w	r2, #4294967295
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43da      	mvns	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	401a      	ands	r2, r3
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a74:	f04f 31ff 	mov.w	r1, #4294967295
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7e:	43d9      	mvns	r1, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a84:	4313      	orrs	r3, r2
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3724      	adds	r7, #36	@ 0x24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aa4:	d301      	bcc.n	8004aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e00f      	b.n	8004aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad4 <SysTick_Config+0x40>)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ab2:	210f      	movs	r1, #15
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab8:	f7ff ff8e 	bl	80049d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004abc:	4b05      	ldr	r3, [pc, #20]	@ (8004ad4 <SysTick_Config+0x40>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ac2:	4b04      	ldr	r3, [pc, #16]	@ (8004ad4 <SysTick_Config+0x40>)
 8004ac4:	2207      	movs	r2, #7
 8004ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	e000e010 	.word	0xe000e010

08004ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff ff29 	bl	8004938 <__NVIC_SetPriorityGrouping>
}
 8004ae6:	bf00      	nop
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b086      	sub	sp, #24
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	4603      	mov	r3, r0
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
 8004afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b00:	f7ff ff3e 	bl	8004980 <__NVIC_GetPriorityGrouping>
 8004b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	6978      	ldr	r0, [r7, #20]
 8004b0c:	f7ff ff8e 	bl	8004a2c <NVIC_EncodePriority>
 8004b10:	4602      	mov	r2, r0
 8004b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b16:	4611      	mov	r1, r2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff ff5d 	bl	80049d8 <__NVIC_SetPriority>
}
 8004b1e:	bf00      	nop
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff ff31 	bl	800499c <__NVIC_EnableIRQ>
}
 8004b3a:	bf00      	nop
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff ffa2 	bl	8004a94 <SysTick_Config>
 8004b50:	4603      	mov	r3, r0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e054      	b.n	8004c18 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	7f5b      	ldrb	r3, [r3, #29]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d105      	bne.n	8004b84 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fc fa2c 	bl	8000fdc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	791b      	ldrb	r3, [r3, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10c      	bne.n	8004bac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a22      	ldr	r2, [pc, #136]	@ (8004c20 <HAL_CRC_Init+0xc4>)
 8004b98:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0218 	bic.w	r2, r2, #24
 8004ba8:	609a      	str	r2, [r3, #8]
 8004baa:	e00c      	b.n	8004bc6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6899      	ldr	r1, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f834 	bl	8004c24 <HAL_CRCEx_Polynomial_Set>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e028      	b.n	8004c18 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	795b      	ldrb	r3, [r3, #5]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d105      	bne.n	8004bda <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd6:	611a      	str	r2, [r3, #16]
 8004bd8:	e004      	b.n	8004be4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6912      	ldr	r2, [r2, #16]
 8004be2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	04c11db7 	.word	0x04c11db7

08004c24 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c34:	231f      	movs	r3, #31
 8004c36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d102      	bne.n	8004c48 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	75fb      	strb	r3, [r7, #23]
 8004c46:	e063      	b.n	8004d10 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c48:	bf00      	nop
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1e5a      	subs	r2, r3, #1
 8004c4e:	613a      	str	r2, [r7, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d009      	beq.n	8004c68 <HAL_CRCEx_Polynomial_Set+0x44>
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f003 031f 	and.w	r3, r3, #31
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b18      	cmp	r3, #24
 8004c6c:	d846      	bhi.n	8004cfc <HAL_CRCEx_Polynomial_Set+0xd8>
 8004c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c74 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004d03 	.word	0x08004d03
 8004c78:	08004cfd 	.word	0x08004cfd
 8004c7c:	08004cfd 	.word	0x08004cfd
 8004c80:	08004cfd 	.word	0x08004cfd
 8004c84:	08004cfd 	.word	0x08004cfd
 8004c88:	08004cfd 	.word	0x08004cfd
 8004c8c:	08004cfd 	.word	0x08004cfd
 8004c90:	08004cfd 	.word	0x08004cfd
 8004c94:	08004cf1 	.word	0x08004cf1
 8004c98:	08004cfd 	.word	0x08004cfd
 8004c9c:	08004cfd 	.word	0x08004cfd
 8004ca0:	08004cfd 	.word	0x08004cfd
 8004ca4:	08004cfd 	.word	0x08004cfd
 8004ca8:	08004cfd 	.word	0x08004cfd
 8004cac:	08004cfd 	.word	0x08004cfd
 8004cb0:	08004cfd 	.word	0x08004cfd
 8004cb4:	08004ce5 	.word	0x08004ce5
 8004cb8:	08004cfd 	.word	0x08004cfd
 8004cbc:	08004cfd 	.word	0x08004cfd
 8004cc0:	08004cfd 	.word	0x08004cfd
 8004cc4:	08004cfd 	.word	0x08004cfd
 8004cc8:	08004cfd 	.word	0x08004cfd
 8004ccc:	08004cfd 	.word	0x08004cfd
 8004cd0:	08004cfd 	.word	0x08004cfd
 8004cd4:	08004cd9 	.word	0x08004cd9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	2b06      	cmp	r3, #6
 8004cdc:	d913      	bls.n	8004d06 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004ce2:	e010      	b.n	8004d06 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	2b07      	cmp	r3, #7
 8004ce8:	d90f      	bls.n	8004d0a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004cee:	e00c      	b.n	8004d0a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b0f      	cmp	r3, #15
 8004cf4:	d90b      	bls.n	8004d0e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004cfa:	e008      	b.n	8004d0e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	75fb      	strb	r3, [r7, #23]
        break;
 8004d00:	e006      	b.n	8004d10 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004d02:	bf00      	nop
 8004d04:	e004      	b.n	8004d10 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004d06:	bf00      	nop
 8004d08:	e002      	b.n	8004d10 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004d0a:	bf00      	nop
 8004d0c:	e000      	b.n	8004d10 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004d0e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004d10:	7dfb      	ldrb	r3, [r7, #23]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10d      	bne.n	8004d32 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f023 0118 	bic.w	r1, r3, #24
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d4c:	f7ff fdc4 	bl	80048d8 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e099      	b.n	8004e90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0201 	bic.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d7c:	e00f      	b.n	8004d9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d7e:	f7ff fdab 	bl	80048d8 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b05      	cmp	r3, #5
 8004d8a:	d908      	bls.n	8004d9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2203      	movs	r2, #3
 8004d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e078      	b.n	8004e90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e8      	bne.n	8004d7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4b38      	ldr	r3, [pc, #224]	@ (8004e98 <HAL_DMA_Init+0x158>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d107      	bne.n	8004e08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e00:	4313      	orrs	r3, r2
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0307 	bic.w	r3, r3, #7
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d117      	bne.n	8004e62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00e      	beq.n	8004e62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fb73 	bl	8005530 <DMA_CheckFifoParam>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2240      	movs	r2, #64	@ 0x40
 8004e54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e016      	b.n	8004e90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fb2a 	bl	80054c4 <DMA_CalcBaseAndBitshift>
 8004e70:	4603      	mov	r3, r0
 8004e72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e78:	223f      	movs	r2, #63	@ 0x3f
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	f010803f 	.word	0xf010803f

08004e9c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e050      	b.n	8004f50 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d101      	bne.n	8004ebe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e048      	b.n	8004f50 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0201 	bic.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2200      	movs	r2, #0
 8004eec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2221      	movs	r2, #33	@ 0x21
 8004efc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fae0 	bl	80054c4 <DMA_CalcBaseAndBitshift>
 8004f04:	4603      	mov	r3, r0
 8004f06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f0c:	223f      	movs	r2, #63	@ 0x3f
 8004f0e:	409a      	lsls	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <HAL_DMA_Start_IT+0x26>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e048      	b.n	8005010 <HAL_DMA_Start_IT+0xb8>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d137      	bne.n	8005002 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2202      	movs	r2, #2
 8004f96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 fa5e 	bl	8005468 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb0:	223f      	movs	r2, #63	@ 0x3f
 8004fb2:	409a      	lsls	r2, r3
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0216 	orr.w	r2, r2, #22
 8004fc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695a      	ldr	r2, [r3, #20]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fd6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d007      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0208 	orr.w	r2, r2, #8
 8004fee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	e005      	b.n	800500e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800500a:	2302      	movs	r3, #2
 800500c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800500e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005024:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005026:	f7ff fc57 	bl	80048d8 <HAL_GetTick>
 800502a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d008      	beq.n	800504a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2280      	movs	r2, #128	@ 0x80
 800503c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e052      	b.n	80050f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0216 	bic.w	r2, r2, #22
 8005058:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695a      	ldr	r2, [r3, #20]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005068:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d103      	bne.n	800507a <HAL_DMA_Abort+0x62>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005076:	2b00      	cmp	r3, #0
 8005078:	d007      	beq.n	800508a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0208 	bic.w	r2, r2, #8
 8005088:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0201 	bic.w	r2, r2, #1
 8005098:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800509a:	e013      	b.n	80050c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800509c:	f7ff fc1c 	bl	80048d8 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b05      	cmp	r3, #5
 80050a8:	d90c      	bls.n	80050c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2203      	movs	r2, #3
 80050b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e015      	b.n	80050f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e4      	bne.n	800509c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d6:	223f      	movs	r2, #63	@ 0x3f
 80050d8:	409a      	lsls	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d004      	beq.n	8005116 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2280      	movs	r2, #128	@ 0x80
 8005110:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e00c      	b.n	8005130 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2205      	movs	r2, #5
 800511a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005148:	4b8e      	ldr	r3, [pc, #568]	@ (8005384 <HAL_DMA_IRQHandler+0x248>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a8e      	ldr	r2, [pc, #568]	@ (8005388 <HAL_DMA_IRQHandler+0x24c>)
 800514e:	fba2 2303 	umull	r2, r3, r2, r3
 8005152:	0a9b      	lsrs	r3, r3, #10
 8005154:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005166:	2208      	movs	r2, #8
 8005168:	409a      	lsls	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4013      	ands	r3, r2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01a      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d013      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0204 	bic.w	r2, r2, #4
 800518e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005194:	2208      	movs	r2, #8
 8005196:	409a      	lsls	r2, r3
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a0:	f043 0201 	orr.w	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ac:	2201      	movs	r2, #1
 80051ae:	409a      	lsls	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d012      	beq.n	80051de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00b      	beq.n	80051de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ca:	2201      	movs	r2, #1
 80051cc:	409a      	lsls	r2, r3
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d6:	f043 0202 	orr.w	r2, r3, #2
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e2:	2204      	movs	r2, #4
 80051e4:	409a      	lsls	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4013      	ands	r3, r2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d012      	beq.n	8005214 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005200:	2204      	movs	r2, #4
 8005202:	409a      	lsls	r2, r3
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520c:	f043 0204 	orr.w	r2, r3, #4
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005218:	2210      	movs	r2, #16
 800521a:	409a      	lsls	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4013      	ands	r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d043      	beq.n	80052ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b00      	cmp	r3, #0
 8005230:	d03c      	beq.n	80052ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005236:	2210      	movs	r2, #16
 8005238:	409a      	lsls	r2, r3
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d018      	beq.n	800527e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d108      	bne.n	800526c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d024      	beq.n	80052ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4798      	blx	r3
 800526a:	e01f      	b.n	80052ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01b      	beq.n	80052ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	4798      	blx	r3
 800527c:	e016      	b.n	80052ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d107      	bne.n	800529c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0208 	bic.w	r2, r2, #8
 800529a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b0:	2220      	movs	r2, #32
 80052b2:	409a      	lsls	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4013      	ands	r3, r2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 808f 	beq.w	80053dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8087 	beq.w	80053dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d2:	2220      	movs	r2, #32
 80052d4:	409a      	lsls	r2, r3
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b05      	cmp	r3, #5
 80052e4:	d136      	bne.n	8005354 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0216 	bic.w	r2, r2, #22
 80052f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695a      	ldr	r2, [r3, #20]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005304:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <HAL_DMA_IRQHandler+0x1da>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005312:	2b00      	cmp	r3, #0
 8005314:	d007      	beq.n	8005326 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0208 	bic.w	r2, r2, #8
 8005324:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800532a:	223f      	movs	r2, #63	@ 0x3f
 800532c:	409a      	lsls	r2, r3
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005346:	2b00      	cmp	r3, #0
 8005348:	d07e      	beq.n	8005448 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	4798      	blx	r3
        }
        return;
 8005352:	e079      	b.n	8005448 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01d      	beq.n	800539e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10d      	bne.n	800538c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005374:	2b00      	cmp	r3, #0
 8005376:	d031      	beq.n	80053dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	4798      	blx	r3
 8005380:	e02c      	b.n	80053dc <HAL_DMA_IRQHandler+0x2a0>
 8005382:	bf00      	nop
 8005384:	20000000 	.word	0x20000000
 8005388:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d023      	beq.n	80053dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	4798      	blx	r3
 800539c:	e01e      	b.n	80053dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10f      	bne.n	80053cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0210 	bic.w	r2, r2, #16
 80053ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d032      	beq.n	800544a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d022      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2205      	movs	r2, #5
 80053f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0201 	bic.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	3301      	adds	r3, #1
 800540c:	60bb      	str	r3, [r7, #8]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	429a      	cmp	r2, r3
 8005412:	d307      	bcc.n	8005424 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f2      	bne.n	8005408 <HAL_DMA_IRQHandler+0x2cc>
 8005422:	e000      	b.n	8005426 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005424:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d005      	beq.n	800544a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	4798      	blx	r3
 8005446:	e000      	b.n	800544a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005448:	bf00      	nop
    }
  }
}
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005484:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b40      	cmp	r3, #64	@ 0x40
 8005494:	d108      	bne.n	80054a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054a6:	e007      	b.n	80054b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	60da      	str	r2, [r3, #12]
}
 80054b8:	bf00      	nop
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	3b10      	subs	r3, #16
 80054d4:	4a13      	ldr	r2, [pc, #76]	@ (8005524 <DMA_CalcBaseAndBitshift+0x60>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	091b      	lsrs	r3, r3, #4
 80054dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054de:	4a12      	ldr	r2, [pc, #72]	@ (8005528 <DMA_CalcBaseAndBitshift+0x64>)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d908      	bls.n	8005504 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	4b0c      	ldr	r3, [pc, #48]	@ (800552c <DMA_CalcBaseAndBitshift+0x68>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	1d1a      	adds	r2, r3, #4
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	659a      	str	r2, [r3, #88]	@ 0x58
 8005502:	e006      	b.n	8005512 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	4b08      	ldr	r3, [pc, #32]	@ (800552c <DMA_CalcBaseAndBitshift+0x68>)
 800550c:	4013      	ands	r3, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	aaaaaaab 	.word	0xaaaaaaab
 8005528:	08015db0 	.word	0x08015db0
 800552c:	fffffc00 	.word	0xfffffc00

08005530 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005540:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d11f      	bne.n	800558a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b03      	cmp	r3, #3
 800554e:	d856      	bhi.n	80055fe <DMA_CheckFifoParam+0xce>
 8005550:	a201      	add	r2, pc, #4	@ (adr r2, 8005558 <DMA_CheckFifoParam+0x28>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	08005569 	.word	0x08005569
 800555c:	0800557b 	.word	0x0800557b
 8005560:	08005569 	.word	0x08005569
 8005564:	080055ff 	.word	0x080055ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d046      	beq.n	8005602 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005578:	e043      	b.n	8005602 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005582:	d140      	bne.n	8005606 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005588:	e03d      	b.n	8005606 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005592:	d121      	bne.n	80055d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b03      	cmp	r3, #3
 8005598:	d837      	bhi.n	800560a <DMA_CheckFifoParam+0xda>
 800559a:	a201      	add	r2, pc, #4	@ (adr r2, 80055a0 <DMA_CheckFifoParam+0x70>)
 800559c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a0:	080055b1 	.word	0x080055b1
 80055a4:	080055b7 	.word	0x080055b7
 80055a8:	080055b1 	.word	0x080055b1
 80055ac:	080055c9 	.word	0x080055c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	73fb      	strb	r3, [r7, #15]
      break;
 80055b4:	e030      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d025      	beq.n	800560e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c6:	e022      	b.n	800560e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80055d0:	d11f      	bne.n	8005612 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055d6:	e01c      	b.n	8005612 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d903      	bls.n	80055e6 <DMA_CheckFifoParam+0xb6>
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d003      	beq.n	80055ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055e4:	e018      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	73fb      	strb	r3, [r7, #15]
      break;
 80055ea:	e015      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00e      	beq.n	8005616 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
      break;
 80055fc:	e00b      	b.n	8005616 <DMA_CheckFifoParam+0xe6>
      break;
 80055fe:	bf00      	nop
 8005600:	e00a      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;
 8005602:	bf00      	nop
 8005604:	e008      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;
 8005606:	bf00      	nop
 8005608:	e006      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;
 800560a:	bf00      	nop
 800560c:	e004      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;
 800560e:	bf00      	nop
 8005610:	e002      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;   
 8005612:	bf00      	nop
 8005614:	e000      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;
 8005616:	bf00      	nop
    }
  } 
  
  return status; 
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop

08005628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005628:	b480      	push	{r7}
 800562a:	b089      	sub	sp, #36	@ 0x24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005632:	2300      	movs	r3, #0
 8005634:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800563a:	2300      	movs	r3, #0
 800563c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800563e:	2300      	movs	r3, #0
 8005640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005642:	2300      	movs	r3, #0
 8005644:	61fb      	str	r3, [r7, #28]
 8005646:	e175      	b.n	8005934 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005648:	2201      	movs	r2, #1
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4013      	ands	r3, r2
 800565a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	429a      	cmp	r2, r3
 8005662:	f040 8164 	bne.w	800592e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	2b01      	cmp	r3, #1
 8005670:	d005      	beq.n	800567e <HAL_GPIO_Init+0x56>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d130      	bne.n	80056e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	2203      	movs	r2, #3
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	43db      	mvns	r3, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4013      	ands	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056b4:	2201      	movs	r2, #1
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	43db      	mvns	r3, r3
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	4013      	ands	r3, r2
 80056c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	f003 0201 	and.w	r2, r3, #1
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f003 0303 	and.w	r3, r3, #3
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d017      	beq.n	800571c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	2203      	movs	r2, #3
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	43db      	mvns	r3, r3
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	4013      	ands	r3, r2
 8005702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	4313      	orrs	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f003 0303 	and.w	r3, r3, #3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d123      	bne.n	8005770 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	08da      	lsrs	r2, r3, #3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3208      	adds	r2, #8
 8005730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	220f      	movs	r2, #15
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	43db      	mvns	r3, r3
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	4013      	ands	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4313      	orrs	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	08da      	lsrs	r2, r3, #3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3208      	adds	r2, #8
 800576a:	69b9      	ldr	r1, [r7, #24]
 800576c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	2203      	movs	r2, #3
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	43db      	mvns	r3, r3
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	4013      	ands	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 0203 	and.w	r2, r3, #3
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	4313      	orrs	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 80be 	beq.w	800592e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057b2:	4b66      	ldr	r3, [pc, #408]	@ (800594c <HAL_GPIO_Init+0x324>)
 80057b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b6:	4a65      	ldr	r2, [pc, #404]	@ (800594c <HAL_GPIO_Init+0x324>)
 80057b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80057be:	4b63      	ldr	r3, [pc, #396]	@ (800594c <HAL_GPIO_Init+0x324>)
 80057c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80057ca:	4a61      	ldr	r2, [pc, #388]	@ (8005950 <HAL_GPIO_Init+0x328>)
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	089b      	lsrs	r3, r3, #2
 80057d0:	3302      	adds	r3, #2
 80057d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	220f      	movs	r2, #15
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	43db      	mvns	r3, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4013      	ands	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a58      	ldr	r2, [pc, #352]	@ (8005954 <HAL_GPIO_Init+0x32c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d037      	beq.n	8005866 <HAL_GPIO_Init+0x23e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a57      	ldr	r2, [pc, #348]	@ (8005958 <HAL_GPIO_Init+0x330>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d031      	beq.n	8005862 <HAL_GPIO_Init+0x23a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a56      	ldr	r2, [pc, #344]	@ (800595c <HAL_GPIO_Init+0x334>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d02b      	beq.n	800585e <HAL_GPIO_Init+0x236>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a55      	ldr	r2, [pc, #340]	@ (8005960 <HAL_GPIO_Init+0x338>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d025      	beq.n	800585a <HAL_GPIO_Init+0x232>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a54      	ldr	r2, [pc, #336]	@ (8005964 <HAL_GPIO_Init+0x33c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d01f      	beq.n	8005856 <HAL_GPIO_Init+0x22e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a53      	ldr	r2, [pc, #332]	@ (8005968 <HAL_GPIO_Init+0x340>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d019      	beq.n	8005852 <HAL_GPIO_Init+0x22a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a52      	ldr	r2, [pc, #328]	@ (800596c <HAL_GPIO_Init+0x344>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_GPIO_Init+0x226>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a51      	ldr	r2, [pc, #324]	@ (8005970 <HAL_GPIO_Init+0x348>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00d      	beq.n	800584a <HAL_GPIO_Init+0x222>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a50      	ldr	r2, [pc, #320]	@ (8005974 <HAL_GPIO_Init+0x34c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d007      	beq.n	8005846 <HAL_GPIO_Init+0x21e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a4f      	ldr	r2, [pc, #316]	@ (8005978 <HAL_GPIO_Init+0x350>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d101      	bne.n	8005842 <HAL_GPIO_Init+0x21a>
 800583e:	2309      	movs	r3, #9
 8005840:	e012      	b.n	8005868 <HAL_GPIO_Init+0x240>
 8005842:	230a      	movs	r3, #10
 8005844:	e010      	b.n	8005868 <HAL_GPIO_Init+0x240>
 8005846:	2308      	movs	r3, #8
 8005848:	e00e      	b.n	8005868 <HAL_GPIO_Init+0x240>
 800584a:	2307      	movs	r3, #7
 800584c:	e00c      	b.n	8005868 <HAL_GPIO_Init+0x240>
 800584e:	2306      	movs	r3, #6
 8005850:	e00a      	b.n	8005868 <HAL_GPIO_Init+0x240>
 8005852:	2305      	movs	r3, #5
 8005854:	e008      	b.n	8005868 <HAL_GPIO_Init+0x240>
 8005856:	2304      	movs	r3, #4
 8005858:	e006      	b.n	8005868 <HAL_GPIO_Init+0x240>
 800585a:	2303      	movs	r3, #3
 800585c:	e004      	b.n	8005868 <HAL_GPIO_Init+0x240>
 800585e:	2302      	movs	r3, #2
 8005860:	e002      	b.n	8005868 <HAL_GPIO_Init+0x240>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <HAL_GPIO_Init+0x240>
 8005866:	2300      	movs	r3, #0
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	f002 0203 	and.w	r2, r2, #3
 800586e:	0092      	lsls	r2, r2, #2
 8005870:	4093      	lsls	r3, r2
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4313      	orrs	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005878:	4935      	ldr	r1, [pc, #212]	@ (8005950 <HAL_GPIO_Init+0x328>)
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	089b      	lsrs	r3, r3, #2
 800587e:	3302      	adds	r3, #2
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005886:	4b3d      	ldr	r3, [pc, #244]	@ (800597c <HAL_GPIO_Init+0x354>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	43db      	mvns	r3, r3
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	4013      	ands	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058aa:	4a34      	ldr	r2, [pc, #208]	@ (800597c <HAL_GPIO_Init+0x354>)
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058b0:	4b32      	ldr	r3, [pc, #200]	@ (800597c <HAL_GPIO_Init+0x354>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058d4:	4a29      	ldr	r2, [pc, #164]	@ (800597c <HAL_GPIO_Init+0x354>)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058da:	4b28      	ldr	r3, [pc, #160]	@ (800597c <HAL_GPIO_Init+0x354>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	43db      	mvns	r3, r3
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	4013      	ands	r3, r2
 80058e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058fe:	4a1f      	ldr	r2, [pc, #124]	@ (800597c <HAL_GPIO_Init+0x354>)
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005904:	4b1d      	ldr	r3, [pc, #116]	@ (800597c <HAL_GPIO_Init+0x354>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	43db      	mvns	r3, r3
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	4013      	ands	r3, r2
 8005912:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005928:	4a14      	ldr	r2, [pc, #80]	@ (800597c <HAL_GPIO_Init+0x354>)
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3301      	adds	r3, #1
 8005932:	61fb      	str	r3, [r7, #28]
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	2b0f      	cmp	r3, #15
 8005938:	f67f ae86 	bls.w	8005648 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800593c:	bf00      	nop
 800593e:	bf00      	nop
 8005940:	3724      	adds	r7, #36	@ 0x24
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40023800 	.word	0x40023800
 8005950:	40013800 	.word	0x40013800
 8005954:	40020000 	.word	0x40020000
 8005958:	40020400 	.word	0x40020400
 800595c:	40020800 	.word	0x40020800
 8005960:	40020c00 	.word	0x40020c00
 8005964:	40021000 	.word	0x40021000
 8005968:	40021400 	.word	0x40021400
 800596c:	40021800 	.word	0x40021800
 8005970:	40021c00 	.word	0x40021c00
 8005974:	40022000 	.word	0x40022000
 8005978:	40022400 	.word	0x40022400
 800597c:	40013c00 	.word	0x40013c00

08005980 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800598a:	2300      	movs	r3, #0
 800598c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005992:	2300      	movs	r3, #0
 8005994:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	e0d9      	b.n	8005b50 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800599c:	2201      	movs	r2, #1
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	fa02 f303 	lsl.w	r3, r2, r3
 80059a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	4013      	ands	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	f040 80c9 	bne.w	8005b4a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80059b8:	4a6b      	ldr	r2, [pc, #428]	@ (8005b68 <HAL_GPIO_DeInit+0x1e8>)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	089b      	lsrs	r3, r3, #2
 80059be:	3302      	adds	r3, #2
 80059c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	220f      	movs	r2, #15
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	4013      	ands	r3, r2
 80059d8:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a63      	ldr	r2, [pc, #396]	@ (8005b6c <HAL_GPIO_DeInit+0x1ec>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d037      	beq.n	8005a52 <HAL_GPIO_DeInit+0xd2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a62      	ldr	r2, [pc, #392]	@ (8005b70 <HAL_GPIO_DeInit+0x1f0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d031      	beq.n	8005a4e <HAL_GPIO_DeInit+0xce>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a61      	ldr	r2, [pc, #388]	@ (8005b74 <HAL_GPIO_DeInit+0x1f4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d02b      	beq.n	8005a4a <HAL_GPIO_DeInit+0xca>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a60      	ldr	r2, [pc, #384]	@ (8005b78 <HAL_GPIO_DeInit+0x1f8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d025      	beq.n	8005a46 <HAL_GPIO_DeInit+0xc6>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a5f      	ldr	r2, [pc, #380]	@ (8005b7c <HAL_GPIO_DeInit+0x1fc>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d01f      	beq.n	8005a42 <HAL_GPIO_DeInit+0xc2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a5e      	ldr	r2, [pc, #376]	@ (8005b80 <HAL_GPIO_DeInit+0x200>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d019      	beq.n	8005a3e <HAL_GPIO_DeInit+0xbe>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a5d      	ldr	r2, [pc, #372]	@ (8005b84 <HAL_GPIO_DeInit+0x204>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_GPIO_DeInit+0xba>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a5c      	ldr	r2, [pc, #368]	@ (8005b88 <HAL_GPIO_DeInit+0x208>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00d      	beq.n	8005a36 <HAL_GPIO_DeInit+0xb6>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a5b      	ldr	r2, [pc, #364]	@ (8005b8c <HAL_GPIO_DeInit+0x20c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d007      	beq.n	8005a32 <HAL_GPIO_DeInit+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a5a      	ldr	r2, [pc, #360]	@ (8005b90 <HAL_GPIO_DeInit+0x210>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d101      	bne.n	8005a2e <HAL_GPIO_DeInit+0xae>
 8005a2a:	2309      	movs	r3, #9
 8005a2c:	e012      	b.n	8005a54 <HAL_GPIO_DeInit+0xd4>
 8005a2e:	230a      	movs	r3, #10
 8005a30:	e010      	b.n	8005a54 <HAL_GPIO_DeInit+0xd4>
 8005a32:	2308      	movs	r3, #8
 8005a34:	e00e      	b.n	8005a54 <HAL_GPIO_DeInit+0xd4>
 8005a36:	2307      	movs	r3, #7
 8005a38:	e00c      	b.n	8005a54 <HAL_GPIO_DeInit+0xd4>
 8005a3a:	2306      	movs	r3, #6
 8005a3c:	e00a      	b.n	8005a54 <HAL_GPIO_DeInit+0xd4>
 8005a3e:	2305      	movs	r3, #5
 8005a40:	e008      	b.n	8005a54 <HAL_GPIO_DeInit+0xd4>
 8005a42:	2304      	movs	r3, #4
 8005a44:	e006      	b.n	8005a54 <HAL_GPIO_DeInit+0xd4>
 8005a46:	2303      	movs	r3, #3
 8005a48:	e004      	b.n	8005a54 <HAL_GPIO_DeInit+0xd4>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e002      	b.n	8005a54 <HAL_GPIO_DeInit+0xd4>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <HAL_GPIO_DeInit+0xd4>
 8005a52:	2300      	movs	r3, #0
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	f002 0203 	and.w	r2, r2, #3
 8005a5a:	0092      	lsls	r2, r2, #2
 8005a5c:	4093      	lsls	r3, r2
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d132      	bne.n	8005aca <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005a64:	4b4b      	ldr	r3, [pc, #300]	@ (8005b94 <HAL_GPIO_DeInit+0x214>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	4949      	ldr	r1, [pc, #292]	@ (8005b94 <HAL_GPIO_DeInit+0x214>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005a72:	4b48      	ldr	r3, [pc, #288]	@ (8005b94 <HAL_GPIO_DeInit+0x214>)
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	4946      	ldr	r1, [pc, #280]	@ (8005b94 <HAL_GPIO_DeInit+0x214>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005a80:	4b44      	ldr	r3, [pc, #272]	@ (8005b94 <HAL_GPIO_DeInit+0x214>)
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	43db      	mvns	r3, r3
 8005a88:	4942      	ldr	r1, [pc, #264]	@ (8005b94 <HAL_GPIO_DeInit+0x214>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005a8e:	4b41      	ldr	r3, [pc, #260]	@ (8005b94 <HAL_GPIO_DeInit+0x214>)
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	43db      	mvns	r3, r3
 8005a96:	493f      	ldr	r1, [pc, #252]	@ (8005b94 <HAL_GPIO_DeInit+0x214>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	220f      	movs	r2, #15
 8005aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aaa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005aac:	4a2e      	ldr	r2, [pc, #184]	@ (8005b68 <HAL_GPIO_DeInit+0x1e8>)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	089b      	lsrs	r3, r3, #2
 8005ab2:	3302      	adds	r3, #2
 8005ab4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	43da      	mvns	r2, r3
 8005abc:	482a      	ldr	r0, [pc, #168]	@ (8005b68 <HAL_GPIO_DeInit+0x1e8>)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	089b      	lsrs	r3, r3, #2
 8005ac2:	400a      	ands	r2, r1
 8005ac4:	3302      	adds	r3, #2
 8005ac6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	2103      	movs	r1, #3
 8005ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad8:	43db      	mvns	r3, r3
 8005ada:	401a      	ands	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	08da      	lsrs	r2, r3, #3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3208      	adds	r2, #8
 8005ae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	220f      	movs	r2, #15
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	43db      	mvns	r3, r3
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	08d2      	lsrs	r2, r2, #3
 8005b00:	4019      	ands	r1, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3208      	adds	r2, #8
 8005b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	2103      	movs	r1, #3
 8005b14:	fa01 f303 	lsl.w	r3, r1, r3
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	401a      	ands	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	2101      	movs	r1, #1
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2c:	43db      	mvns	r3, r3
 8005b2e:	401a      	ands	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	2103      	movs	r1, #3
 8005b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b42:	43db      	mvns	r3, r3
 8005b44:	401a      	ands	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2b0f      	cmp	r3, #15
 8005b54:	f67f af22 	bls.w	800599c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005b58:	bf00      	nop
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40013800 	.word	0x40013800
 8005b6c:	40020000 	.word	0x40020000
 8005b70:	40020400 	.word	0x40020400
 8005b74:	40020800 	.word	0x40020800
 8005b78:	40020c00 	.word	0x40020c00
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	40021400 	.word	0x40021400
 8005b84:	40021800 	.word	0x40021800
 8005b88:	40021c00 	.word	0x40021c00
 8005b8c:	40022000 	.word	0x40022000
 8005b90:	40022400 	.word	0x40022400
 8005b94:	40013c00 	.word	0x40013c00

08005b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	887b      	ldrh	r3, [r7, #2]
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	73fb      	strb	r3, [r7, #15]
 8005bb4:	e001      	b.n	8005bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	807b      	strh	r3, [r7, #2]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005bd8:	787b      	ldrb	r3, [r7, #1]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bde:	887a      	ldrh	r2, [r7, #2]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005be4:	e003      	b.n	8005bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005be6:	887b      	ldrh	r3, [r7, #2]
 8005be8:	041a      	lsls	r2, r3, #16
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	619a      	str	r2, [r3, #24]
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	460b      	mov	r3, r1
 8005c04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c0c:	887a      	ldrh	r2, [r7, #2]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4013      	ands	r3, r2
 8005c12:	041a      	lsls	r2, r3, #16
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	43d9      	mvns	r1, r3
 8005c18:	887b      	ldrh	r3, [r7, #2]
 8005c1a:	400b      	ands	r3, r1
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	619a      	str	r2, [r3, #24]
}
 8005c22:	bf00      	nop
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	4603      	mov	r3, r0
 8005c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c3a:	4b08      	ldr	r3, [pc, #32]	@ (8005c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c3c:	695a      	ldr	r2, [r3, #20]
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d006      	beq.n	8005c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c46:	4a05      	ldr	r2, [pc, #20]	@ (8005c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c48:	88fb      	ldrh	r3, [r7, #6]
 8005c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fb fe54 	bl	80018fc <HAL_GPIO_EXTI_Callback>
  }
}
 8005c54:	bf00      	nop
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40013c00 	.word	0x40013c00

08005c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e08b      	b.n	8005d8a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d106      	bne.n	8005c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f8b5 	bl	8005df6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2224      	movs	r2, #36	@ 0x24
 8005c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005cb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d107      	bne.n	8005cda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cd6:	609a      	str	r2, [r3, #8]
 8005cd8:	e006      	b.n	8005ce8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005ce6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d108      	bne.n	8005d02 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cfe:	605a      	str	r2, [r3, #4]
 8005d00:	e007      	b.n	8005d12 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6859      	ldr	r1, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8005d94 <HAL_I2C_Init+0x134>)
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691a      	ldr	r2, [r3, #16]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69d9      	ldr	r1, [r3, #28]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1a      	ldr	r2, [r3, #32]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0201 	orr.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	02008000 	.word	0x02008000

08005d98 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e021      	b.n	8005dee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2224      	movs	r2, #36	@ 0x24
 8005dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0201 	bic.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f821 	bl	8005e0a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	4608      	mov	r0, r1
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4603      	mov	r3, r0
 8005e30:	817b      	strh	r3, [r7, #10]
 8005e32:	460b      	mov	r3, r1
 8005e34:	813b      	strh	r3, [r7, #8]
 8005e36:	4613      	mov	r3, r2
 8005e38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	f040 80f9 	bne.w	800603a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <HAL_I2C_Mem_Write+0x34>
 8005e4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d105      	bne.n	8005e60 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e5a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e0ed      	b.n	800603c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d101      	bne.n	8005e6e <HAL_I2C_Mem_Write+0x4e>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e0e6      	b.n	800603c <HAL_I2C_Mem_Write+0x21c>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e76:	f7fe fd2f 	bl	80048d8 <HAL_GetTick>
 8005e7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	2319      	movs	r3, #25
 8005e82:	2201      	movs	r2, #1
 8005e84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fad1 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e0d1      	b.n	800603c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2221      	movs	r2, #33	@ 0x21
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2240      	movs	r2, #64	@ 0x40
 8005ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a3a      	ldr	r2, [r7, #32]
 8005eb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ec0:	88f8      	ldrh	r0, [r7, #6]
 8005ec2:	893a      	ldrh	r2, [r7, #8]
 8005ec4:	8979      	ldrh	r1, [r7, #10]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	4603      	mov	r3, r0
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f9e1 	bl	8006298 <I2C_RequestMemoryWrite>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e0a9      	b.n	800603c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2bff      	cmp	r3, #255	@ 0xff
 8005ef0:	d90e      	bls.n	8005f10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	22ff      	movs	r2, #255	@ 0xff
 8005ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	8979      	ldrh	r1, [r7, #10]
 8005f00:	2300      	movs	r3, #0
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fc55 	bl	80067b8 <I2C_TransferConfig>
 8005f0e:	e00f      	b.n	8005f30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	8979      	ldrh	r1, [r7, #10]
 8005f22:	2300      	movs	r3, #0
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 fc44 	bl	80067b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 fad4 	bl	80064e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e07b      	b.n	800603c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f48:	781a      	ldrb	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d034      	beq.n	8005fe8 <HAL_I2C_Mem_Write+0x1c8>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d130      	bne.n	8005fe8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2180      	movs	r1, #128	@ 0x80
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fa4d 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e04d      	b.n	800603c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2bff      	cmp	r3, #255	@ 0xff
 8005fa8:	d90e      	bls.n	8005fc8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	22ff      	movs	r2, #255	@ 0xff
 8005fae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	8979      	ldrh	r1, [r7, #10]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 fbf9 	bl	80067b8 <I2C_TransferConfig>
 8005fc6:	e00f      	b.n	8005fe8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	8979      	ldrh	r1, [r7, #10]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 fbe8 	bl	80067b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d19e      	bne.n	8005f30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 faba 	bl	8006570 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e01a      	b.n	800603c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2220      	movs	r2, #32
 800600c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6859      	ldr	r1, [r3, #4]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	4b0a      	ldr	r3, [pc, #40]	@ (8006044 <HAL_I2C_Mem_Write+0x224>)
 800601a:	400b      	ands	r3, r1
 800601c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	e000      	b.n	800603c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800603a:	2302      	movs	r3, #2
  }
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	fe00e800 	.word	0xfe00e800

08006048 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af02      	add	r7, sp, #8
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	4608      	mov	r0, r1
 8006052:	4611      	mov	r1, r2
 8006054:	461a      	mov	r2, r3
 8006056:	4603      	mov	r3, r0
 8006058:	817b      	strh	r3, [r7, #10]
 800605a:	460b      	mov	r3, r1
 800605c:	813b      	strh	r3, [r7, #8]
 800605e:	4613      	mov	r3, r2
 8006060:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b20      	cmp	r3, #32
 800606c:	f040 80fd 	bne.w	800626a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <HAL_I2C_Mem_Read+0x34>
 8006076:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006078:	2b00      	cmp	r3, #0
 800607a:	d105      	bne.n	8006088 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006082:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e0f1      	b.n	800626c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_I2C_Mem_Read+0x4e>
 8006092:	2302      	movs	r3, #2
 8006094:	e0ea      	b.n	800626c <HAL_I2C_Mem_Read+0x224>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800609e:	f7fe fc1b 	bl	80048d8 <HAL_GetTick>
 80060a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	2319      	movs	r3, #25
 80060aa:	2201      	movs	r2, #1
 80060ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f9bd 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e0d5      	b.n	800626c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2222      	movs	r2, #34	@ 0x22
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2240      	movs	r2, #64	@ 0x40
 80060cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a3a      	ldr	r2, [r7, #32]
 80060da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80060e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060e8:	88f8      	ldrh	r0, [r7, #6]
 80060ea:	893a      	ldrh	r2, [r7, #8]
 80060ec:	8979      	ldrh	r1, [r7, #10]
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	9301      	str	r3, [sp, #4]
 80060f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	4603      	mov	r3, r0
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f921 	bl	8006340 <I2C_RequestMemoryRead>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e0ad      	b.n	800626c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006114:	b29b      	uxth	r3, r3
 8006116:	2bff      	cmp	r3, #255	@ 0xff
 8006118:	d90e      	bls.n	8006138 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006124:	b2da      	uxtb	r2, r3
 8006126:	8979      	ldrh	r1, [r7, #10]
 8006128:	4b52      	ldr	r3, [pc, #328]	@ (8006274 <HAL_I2C_Mem_Read+0x22c>)
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 fb41 	bl	80067b8 <I2C_TransferConfig>
 8006136:	e00f      	b.n	8006158 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006146:	b2da      	uxtb	r2, r3
 8006148:	8979      	ldrh	r1, [r7, #10]
 800614a:	4b4a      	ldr	r3, [pc, #296]	@ (8006274 <HAL_I2C_Mem_Read+0x22c>)
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 fb30 	bl	80067b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615e:	2200      	movs	r2, #0
 8006160:	2104      	movs	r1, #4
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f964 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e07c      	b.n	800626c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d034      	beq.n	8006218 <HAL_I2C_Mem_Read+0x1d0>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d130      	bne.n	8006218 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061bc:	2200      	movs	r2, #0
 80061be:	2180      	movs	r1, #128	@ 0x80
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 f935 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e04d      	b.n	800626c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2bff      	cmp	r3, #255	@ 0xff
 80061d8:	d90e      	bls.n	80061f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	8979      	ldrh	r1, [r7, #10]
 80061e8:	2300      	movs	r3, #0
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 fae1 	bl	80067b8 <I2C_TransferConfig>
 80061f6:	e00f      	b.n	8006218 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006206:	b2da      	uxtb	r2, r3
 8006208:	8979      	ldrh	r1, [r7, #10]
 800620a:	2300      	movs	r3, #0
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fad0 	bl	80067b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d19a      	bne.n	8006158 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f9a2 	bl	8006570 <I2C_WaitOnSTOPFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e01a      	b.n	800626c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2220      	movs	r2, #32
 800623c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6859      	ldr	r1, [r3, #4]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	4b0b      	ldr	r3, [pc, #44]	@ (8006278 <HAL_I2C_Mem_Read+0x230>)
 800624a:	400b      	ands	r3, r1
 800624c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	e000      	b.n	800626c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800626a:	2302      	movs	r3, #2
  }
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	80002400 	.word	0x80002400
 8006278:	fe00e800 	.word	0xfe00e800

0800627c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800628a:	b2db      	uxtb	r3, r3
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af02      	add	r7, sp, #8
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	4608      	mov	r0, r1
 80062a2:	4611      	mov	r1, r2
 80062a4:	461a      	mov	r2, r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	817b      	strh	r3, [r7, #10]
 80062aa:	460b      	mov	r3, r1
 80062ac:	813b      	strh	r3, [r7, #8]
 80062ae:	4613      	mov	r3, r2
 80062b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	8979      	ldrh	r1, [r7, #10]
 80062b8:	4b20      	ldr	r3, [pc, #128]	@ (800633c <I2C_RequestMemoryWrite+0xa4>)
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fa79 	bl	80067b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062c6:	69fa      	ldr	r2, [r7, #28]
 80062c8:	69b9      	ldr	r1, [r7, #24]
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 f909 	bl	80064e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e02c      	b.n	8006334 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d105      	bne.n	80062ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062e0:	893b      	ldrh	r3, [r7, #8]
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80062ea:	e015      	b.n	8006318 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062ec:	893b      	ldrh	r3, [r7, #8]
 80062ee:	0a1b      	lsrs	r3, r3, #8
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	69b9      	ldr	r1, [r7, #24]
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 f8ef 	bl	80064e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e012      	b.n	8006334 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800630e:	893b      	ldrh	r3, [r7, #8]
 8006310:	b2da      	uxtb	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	2200      	movs	r2, #0
 8006320:	2180      	movs	r1, #128	@ 0x80
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 f884 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	80002000 	.word	0x80002000

08006340 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af02      	add	r7, sp, #8
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	4608      	mov	r0, r1
 800634a:	4611      	mov	r1, r2
 800634c:	461a      	mov	r2, r3
 800634e:	4603      	mov	r3, r0
 8006350:	817b      	strh	r3, [r7, #10]
 8006352:	460b      	mov	r3, r1
 8006354:	813b      	strh	r3, [r7, #8]
 8006356:	4613      	mov	r3, r2
 8006358:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	b2da      	uxtb	r2, r3
 800635e:	8979      	ldrh	r1, [r7, #10]
 8006360:	4b20      	ldr	r3, [pc, #128]	@ (80063e4 <I2C_RequestMemoryRead+0xa4>)
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	2300      	movs	r3, #0
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 fa26 	bl	80067b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	69b9      	ldr	r1, [r7, #24]
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 f8b6 	bl	80064e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e02c      	b.n	80063da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006380:	88fb      	ldrh	r3, [r7, #6]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d105      	bne.n	8006392 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006386:	893b      	ldrh	r3, [r7, #8]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006390:	e015      	b.n	80063be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006392:	893b      	ldrh	r3, [r7, #8]
 8006394:	0a1b      	lsrs	r3, r3, #8
 8006396:	b29b      	uxth	r3, r3
 8006398:	b2da      	uxtb	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063a0:	69fa      	ldr	r2, [r7, #28]
 80063a2:	69b9      	ldr	r1, [r7, #24]
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 f89c 	bl	80064e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e012      	b.n	80063da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063b4:	893b      	ldrh	r3, [r7, #8]
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2200      	movs	r2, #0
 80063c6:	2140      	movs	r1, #64	@ 0x40
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 f831 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	80002000 	.word	0x80002000

080063e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d103      	bne.n	8006406 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2200      	movs	r2, #0
 8006404:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b01      	cmp	r3, #1
 8006412:	d007      	beq.n	8006424 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	619a      	str	r2, [r3, #24]
  }
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	4613      	mov	r3, r2
 800643e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006440:	e03b      	b.n	80064ba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 f8d6 	bl	80065f8 <I2C_IsErrorOccurred>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e041      	b.n	80064da <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645c:	d02d      	beq.n	80064ba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800645e:	f7fe fa3b 	bl	80048d8 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d302      	bcc.n	8006474 <I2C_WaitOnFlagUntilTimeout+0x44>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d122      	bne.n	80064ba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	4013      	ands	r3, r2
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	429a      	cmp	r2, r3
 8006482:	bf0c      	ite	eq
 8006484:	2301      	moveq	r3, #1
 8006486:	2300      	movne	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	429a      	cmp	r2, r3
 8006490:	d113      	bne.n	80064ba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006496:	f043 0220 	orr.w	r2, r3, #32
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e00f      	b.n	80064da <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	699a      	ldr	r2, [r3, #24]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4013      	ands	r3, r2
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	bf0c      	ite	eq
 80064ca:	2301      	moveq	r3, #1
 80064cc:	2300      	movne	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d0b4      	beq.n	8006442 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064ee:	e033      	b.n	8006558 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f87f 	bl	80065f8 <I2C_IsErrorOccurred>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e031      	b.n	8006568 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650a:	d025      	beq.n	8006558 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800650c:	f7fe f9e4 	bl	80048d8 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	429a      	cmp	r2, r3
 800651a:	d302      	bcc.n	8006522 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d11a      	bne.n	8006558 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b02      	cmp	r3, #2
 800652e:	d013      	beq.n	8006558 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006534:	f043 0220 	orr.w	r2, r3, #32
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e007      	b.n	8006568 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b02      	cmp	r3, #2
 8006564:	d1c4      	bne.n	80064f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800657c:	e02f      	b.n	80065de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f838 	bl	80065f8 <I2C_IsErrorOccurred>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e02d      	b.n	80065ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006592:	f7fe f9a1 	bl	80048d8 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d302      	bcc.n	80065a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d11a      	bne.n	80065de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	d013      	beq.n	80065de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ba:	f043 0220 	orr.w	r2, r3, #32
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e007      	b.n	80065ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	d1c8      	bne.n	800657e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08a      	sub	sp, #40	@ 0x28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006604:	2300      	movs	r3, #0
 8006606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	d068      	beq.n	80066f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2210      	movs	r2, #16
 800662a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800662c:	e049      	b.n	80066c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006634:	d045      	beq.n	80066c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006636:	f7fe f94f 	bl	80048d8 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	429a      	cmp	r2, r3
 8006644:	d302      	bcc.n	800664c <I2C_IsErrorOccurred+0x54>
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d13a      	bne.n	80066c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006656:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800665e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800666a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800666e:	d121      	bne.n	80066b4 <I2C_IsErrorOccurred+0xbc>
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006676:	d01d      	beq.n	80066b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006678:	7cfb      	ldrb	r3, [r7, #19]
 800667a:	2b20      	cmp	r3, #32
 800667c:	d01a      	beq.n	80066b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800668c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800668e:	f7fe f923 	bl	80048d8 <HAL_GetTick>
 8006692:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006694:	e00e      	b.n	80066b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006696:	f7fe f91f 	bl	80048d8 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b19      	cmp	r3, #25
 80066a2:	d907      	bls.n	80066b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	f043 0320 	orr.w	r3, r3, #32
 80066aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80066b2:	e006      	b.n	80066c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b20      	cmp	r3, #32
 80066c0:	d1e9      	bne.n	8006696 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d003      	beq.n	80066d8 <I2C_IsErrorOccurred+0xe0>
 80066d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0aa      	beq.n	800662e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80066d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d103      	bne.n	80066e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2220      	movs	r2, #32
 80066e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	f043 0304 	orr.w	r3, r3, #4
 80066ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00b      	beq.n	8006720 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	f043 0301 	orr.w	r3, r3, #1
 800670e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006718:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00b      	beq.n	8006742 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	f043 0308 	orr.w	r3, r3, #8
 8006730:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800673a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	f043 0302 	orr.w	r3, r3, #2
 8006752:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800675c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01c      	beq.n	80067a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f7ff fe3b 	bl	80063e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6859      	ldr	r1, [r3, #4]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	4b0d      	ldr	r3, [pc, #52]	@ (80067b4 <I2C_IsErrorOccurred+0x1bc>)
 800677e:	400b      	ands	r3, r1
 8006780:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	431a      	orrs	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80067a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3728      	adds	r7, #40	@ 0x28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	fe00e800 	.word	0xfe00e800

080067b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	607b      	str	r3, [r7, #4]
 80067c2:	460b      	mov	r3, r1
 80067c4:	817b      	strh	r3, [r7, #10]
 80067c6:	4613      	mov	r3, r2
 80067c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067ca:	897b      	ldrh	r3, [r7, #10]
 80067cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067d0:	7a7b      	ldrb	r3, [r7, #9]
 80067d2:	041b      	lsls	r3, r3, #16
 80067d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	0d5b      	lsrs	r3, r3, #21
 80067f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80067f6:	4b08      	ldr	r3, [pc, #32]	@ (8006818 <I2C_TransferConfig+0x60>)
 80067f8:	430b      	orrs	r3, r1
 80067fa:	43db      	mvns	r3, r3
 80067fc:	ea02 0103 	and.w	r1, r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	430a      	orrs	r2, r1
 8006808:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	03ff63ff 	.word	0x03ff63ff

0800681c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006826:	4b23      	ldr	r3, [pc, #140]	@ (80068b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682a:	4a22      	ldr	r2, [pc, #136]	@ (80068b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800682c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006830:	6413      	str	r3, [r2, #64]	@ 0x40
 8006832:	4b20      	ldr	r3, [pc, #128]	@ (80068b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800683e:	4b1e      	ldr	r3, [pc, #120]	@ (80068b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1d      	ldr	r2, [pc, #116]	@ (80068b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006848:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800684a:	f7fe f845 	bl	80048d8 <HAL_GetTick>
 800684e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006850:	e009      	b.n	8006866 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006852:	f7fe f841 	bl	80048d8 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006860:	d901      	bls.n	8006866 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e022      	b.n	80068ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006866:	4b14      	ldr	r3, [pc, #80]	@ (80068b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800686e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006872:	d1ee      	bne.n	8006852 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006874:	4b10      	ldr	r3, [pc, #64]	@ (80068b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a0f      	ldr	r2, [pc, #60]	@ (80068b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800687a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800687e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006880:	f7fe f82a 	bl	80048d8 <HAL_GetTick>
 8006884:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006886:	e009      	b.n	800689c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006888:	f7fe f826 	bl	80048d8 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006896:	d901      	bls.n	800689c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e007      	b.n	80068ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800689c:	4b06      	ldr	r3, [pc, #24]	@ (80068b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068a8:	d1ee      	bne.n	8006888 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	40023800 	.word	0x40023800
 80068b8:	40007000 	.word	0x40007000

080068bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80068c4:	2300      	movs	r3, #0
 80068c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e291      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 8087 	beq.w	80069ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068e0:	4b96      	ldr	r3, [pc, #600]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f003 030c 	and.w	r3, r3, #12
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d00c      	beq.n	8006906 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ec:	4b93      	ldr	r3, [pc, #588]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f003 030c 	and.w	r3, r3, #12
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d112      	bne.n	800691e <HAL_RCC_OscConfig+0x62>
 80068f8:	4b90      	ldr	r3, [pc, #576]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006900:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006904:	d10b      	bne.n	800691e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006906:	4b8d      	ldr	r3, [pc, #564]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d06c      	beq.n	80069ec <HAL_RCC_OscConfig+0x130>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d168      	bne.n	80069ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e26b      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006926:	d106      	bne.n	8006936 <HAL_RCC_OscConfig+0x7a>
 8006928:	4b84      	ldr	r3, [pc, #528]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a83      	ldr	r2, [pc, #524]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 800692e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	e02e      	b.n	8006994 <HAL_RCC_OscConfig+0xd8>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10c      	bne.n	8006958 <HAL_RCC_OscConfig+0x9c>
 800693e:	4b7f      	ldr	r3, [pc, #508]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a7e      	ldr	r2, [pc, #504]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	4b7c      	ldr	r3, [pc, #496]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a7b      	ldr	r2, [pc, #492]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006950:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	e01d      	b.n	8006994 <HAL_RCC_OscConfig+0xd8>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006960:	d10c      	bne.n	800697c <HAL_RCC_OscConfig+0xc0>
 8006962:	4b76      	ldr	r3, [pc, #472]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a75      	ldr	r2, [pc, #468]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	4b73      	ldr	r3, [pc, #460]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a72      	ldr	r2, [pc, #456]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006978:	6013      	str	r3, [r2, #0]
 800697a:	e00b      	b.n	8006994 <HAL_RCC_OscConfig+0xd8>
 800697c:	4b6f      	ldr	r3, [pc, #444]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a6e      	ldr	r2, [pc, #440]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	4b6c      	ldr	r3, [pc, #432]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a6b      	ldr	r2, [pc, #428]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 800698e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d013      	beq.n	80069c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699c:	f7fd ff9c 	bl	80048d8 <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069a4:	f7fd ff98 	bl	80048d8 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b64      	cmp	r3, #100	@ 0x64
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e21f      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069b6:	4b61      	ldr	r3, [pc, #388]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0f0      	beq.n	80069a4 <HAL_RCC_OscConfig+0xe8>
 80069c2:	e014      	b.n	80069ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c4:	f7fd ff88 	bl	80048d8 <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069cc:	f7fd ff84 	bl	80048d8 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b64      	cmp	r3, #100	@ 0x64
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e20b      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069de:	4b57      	ldr	r3, [pc, #348]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1f0      	bne.n	80069cc <HAL_RCC_OscConfig+0x110>
 80069ea:	e000      	b.n	80069ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d069      	beq.n	8006ace <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069fa:	4b50      	ldr	r3, [pc, #320]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 030c 	and.w	r3, r3, #12
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00b      	beq.n	8006a1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a06:	4b4d      	ldr	r3, [pc, #308]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 030c 	and.w	r3, r3, #12
 8006a0e:	2b08      	cmp	r3, #8
 8006a10:	d11c      	bne.n	8006a4c <HAL_RCC_OscConfig+0x190>
 8006a12:	4b4a      	ldr	r3, [pc, #296]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d116      	bne.n	8006a4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a1e:	4b47      	ldr	r3, [pc, #284]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d005      	beq.n	8006a36 <HAL_RCC_OscConfig+0x17a>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d001      	beq.n	8006a36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e1df      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a36:	4b41      	ldr	r3, [pc, #260]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	493d      	ldr	r1, [pc, #244]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a4a:	e040      	b.n	8006ace <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d023      	beq.n	8006a9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a54:	4b39      	ldr	r3, [pc, #228]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a38      	ldr	r2, [pc, #224]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a60:	f7fd ff3a 	bl	80048d8 <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a68:	f7fd ff36 	bl	80048d8 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e1bd      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a7a:	4b30      	ldr	r3, [pc, #192]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f0      	beq.n	8006a68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a86:	4b2d      	ldr	r3, [pc, #180]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	4929      	ldr	r1, [pc, #164]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	600b      	str	r3, [r1, #0]
 8006a9a:	e018      	b.n	8006ace <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a9c:	4b27      	ldr	r3, [pc, #156]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a26      	ldr	r2, [pc, #152]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006aa2:	f023 0301 	bic.w	r3, r3, #1
 8006aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa8:	f7fd ff16 	bl	80048d8 <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ab0:	f7fd ff12 	bl	80048d8 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e199      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f0      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0308 	and.w	r3, r3, #8
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d038      	beq.n	8006b4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d019      	beq.n	8006b16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ae2:	4b16      	ldr	r3, [pc, #88]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ae6:	4a15      	ldr	r2, [pc, #84]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
 8006aec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aee:	f7fd fef3 	bl	80048d8 <HAL_GetTick>
 8006af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006af4:	e008      	b.n	8006b08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006af6:	f7fd feef 	bl	80048d8 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e176      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b08:	4b0c      	ldr	r3, [pc, #48]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0f0      	beq.n	8006af6 <HAL_RCC_OscConfig+0x23a>
 8006b14:	e01a      	b.n	8006b4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b16:	4b09      	ldr	r3, [pc, #36]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b1a:	4a08      	ldr	r2, [pc, #32]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006b1c:	f023 0301 	bic.w	r3, r3, #1
 8006b20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b22:	f7fd fed9 	bl	80048d8 <HAL_GetTick>
 8006b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b28:	e00a      	b.n	8006b40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b2a:	f7fd fed5 	bl	80048d8 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d903      	bls.n	8006b40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e15c      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
 8006b3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b40:	4b91      	ldr	r3, [pc, #580]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1ee      	bne.n	8006b2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 80a4 	beq.w	8006ca2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10d      	bne.n	8006b82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b66:	4b88      	ldr	r3, [pc, #544]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6a:	4a87      	ldr	r2, [pc, #540]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b72:	4b85      	ldr	r3, [pc, #532]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b7a:	60bb      	str	r3, [r7, #8]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b82:	4b82      	ldr	r3, [pc, #520]	@ (8006d8c <HAL_RCC_OscConfig+0x4d0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d118      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006b8e:	4b7f      	ldr	r3, [pc, #508]	@ (8006d8c <HAL_RCC_OscConfig+0x4d0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a7e      	ldr	r2, [pc, #504]	@ (8006d8c <HAL_RCC_OscConfig+0x4d0>)
 8006b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b9a:	f7fd fe9d 	bl	80048d8 <HAL_GetTick>
 8006b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ba0:	e008      	b.n	8006bb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ba2:	f7fd fe99 	bl	80048d8 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b64      	cmp	r3, #100	@ 0x64
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e120      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bb4:	4b75      	ldr	r3, [pc, #468]	@ (8006d8c <HAL_RCC_OscConfig+0x4d0>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0f0      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d106      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x31a>
 8006bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bcc:	4a6e      	ldr	r2, [pc, #440]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006bce:	f043 0301 	orr.w	r3, r3, #1
 8006bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bd4:	e02d      	b.n	8006c32 <HAL_RCC_OscConfig+0x376>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10c      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x33c>
 8006bde:	4b6a      	ldr	r3, [pc, #424]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006be2:	4a69      	ldr	r2, [pc, #420]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bea:	4b67      	ldr	r3, [pc, #412]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bee:	4a66      	ldr	r2, [pc, #408]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006bf0:	f023 0304 	bic.w	r3, r3, #4
 8006bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bf6:	e01c      	b.n	8006c32 <HAL_RCC_OscConfig+0x376>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	2b05      	cmp	r3, #5
 8006bfe:	d10c      	bne.n	8006c1a <HAL_RCC_OscConfig+0x35e>
 8006c00:	4b61      	ldr	r3, [pc, #388]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c04:	4a60      	ldr	r2, [pc, #384]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c06:	f043 0304 	orr.w	r3, r3, #4
 8006c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c0c:	4b5e      	ldr	r3, [pc, #376]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c10:	4a5d      	ldr	r2, [pc, #372]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c12:	f043 0301 	orr.w	r3, r3, #1
 8006c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c18:	e00b      	b.n	8006c32 <HAL_RCC_OscConfig+0x376>
 8006c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c1e:	4a5a      	ldr	r2, [pc, #360]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c20:	f023 0301 	bic.w	r3, r3, #1
 8006c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c26:	4b58      	ldr	r3, [pc, #352]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c2a:	4a57      	ldr	r2, [pc, #348]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c2c:	f023 0304 	bic.w	r3, r3, #4
 8006c30:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d015      	beq.n	8006c66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c3a:	f7fd fe4d 	bl	80048d8 <HAL_GetTick>
 8006c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c40:	e00a      	b.n	8006c58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c42:	f7fd fe49 	bl	80048d8 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d901      	bls.n	8006c58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e0ce      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c58:	4b4b      	ldr	r3, [pc, #300]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0ee      	beq.n	8006c42 <HAL_RCC_OscConfig+0x386>
 8006c64:	e014      	b.n	8006c90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c66:	f7fd fe37 	bl	80048d8 <HAL_GetTick>
 8006c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c6c:	e00a      	b.n	8006c84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c6e:	f7fd fe33 	bl	80048d8 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e0b8      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c84:	4b40      	ldr	r3, [pc, #256]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1ee      	bne.n	8006c6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d105      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c96:	4b3c      	ldr	r3, [pc, #240]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9a:	4a3b      	ldr	r2, [pc, #236]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ca0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 80a4 	beq.w	8006df4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cac:	4b36      	ldr	r3, [pc, #216]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 030c 	and.w	r3, r3, #12
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d06b      	beq.n	8006d90 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d149      	bne.n	8006d54 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cc0:	4b31      	ldr	r3, [pc, #196]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a30      	ldr	r2, [pc, #192]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006cc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ccc:	f7fd fe04 	bl	80048d8 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cd4:	f7fd fe00 	bl	80048d8 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e087      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ce6:	4b28      	ldr	r3, [pc, #160]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1f0      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69da      	ldr	r2, [r3, #28]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d00:	019b      	lsls	r3, r3, #6
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d08:	085b      	lsrs	r3, r3, #1
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	041b      	lsls	r3, r3, #16
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d14:	061b      	lsls	r3, r3, #24
 8006d16:	4313      	orrs	r3, r2
 8006d18:	4a1b      	ldr	r2, [pc, #108]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006d1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d1e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d20:	4b19      	ldr	r3, [pc, #100]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a18      	ldr	r2, [pc, #96]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2c:	f7fd fdd4 	bl	80048d8 <HAL_GetTick>
 8006d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d32:	e008      	b.n	8006d46 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d34:	f7fd fdd0 	bl	80048d8 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e057      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d46:	4b10      	ldr	r3, [pc, #64]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0f0      	beq.n	8006d34 <HAL_RCC_OscConfig+0x478>
 8006d52:	e04f      	b.n	8006df4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d54:	4b0c      	ldr	r3, [pc, #48]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a0b      	ldr	r2, [pc, #44]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006d5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d60:	f7fd fdba 	bl	80048d8 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d68:	f7fd fdb6 	bl	80048d8 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e03d      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d7a:	4b03      	ldr	r3, [pc, #12]	@ (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f0      	bne.n	8006d68 <HAL_RCC_OscConfig+0x4ac>
 8006d86:	e035      	b.n	8006df4 <HAL_RCC_OscConfig+0x538>
 8006d88:	40023800 	.word	0x40023800
 8006d8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006d90:	4b1b      	ldr	r3, [pc, #108]	@ (8006e00 <HAL_RCC_OscConfig+0x544>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d028      	beq.n	8006df0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d121      	bne.n	8006df0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d11a      	bne.n	8006df0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006dc6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d111      	bne.n	8006df0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd6:	085b      	lsrs	r3, r3, #1
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d107      	bne.n	8006df0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d001      	beq.n	8006df4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e000      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	40023800 	.word	0x40023800

08006e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e0d0      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e1c:	4b6a      	ldr	r3, [pc, #424]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 030f 	and.w	r3, r3, #15
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d910      	bls.n	8006e4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2a:	4b67      	ldr	r3, [pc, #412]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f023 020f 	bic.w	r2, r3, #15
 8006e32:	4965      	ldr	r1, [pc, #404]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3a:	4b63      	ldr	r3, [pc, #396]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d001      	beq.n	8006e4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e0b8      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d020      	beq.n	8006e9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e64:	4b59      	ldr	r3, [pc, #356]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	4a58      	ldr	r2, [pc, #352]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006e6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006e6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0308 	and.w	r3, r3, #8
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e7c:	4b53      	ldr	r3, [pc, #332]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	4a52      	ldr	r2, [pc, #328]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006e82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006e86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e88:	4b50      	ldr	r3, [pc, #320]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	494d      	ldr	r1, [pc, #308]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d040      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d107      	bne.n	8006ebe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eae:	4b47      	ldr	r3, [pc, #284]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d115      	bne.n	8006ee6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e07f      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d107      	bne.n	8006ed6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ec6:	4b41      	ldr	r3, [pc, #260]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e073      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e06b      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ee6:	4b39      	ldr	r3, [pc, #228]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f023 0203 	bic.w	r2, r3, #3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	4936      	ldr	r1, [pc, #216]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ef8:	f7fd fcee 	bl	80048d8 <HAL_GetTick>
 8006efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006efe:	e00a      	b.n	8006f16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f00:	f7fd fcea 	bl	80048d8 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e053      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f16:	4b2d      	ldr	r3, [pc, #180]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f003 020c 	and.w	r2, r3, #12
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d1eb      	bne.n	8006f00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f28:	4b27      	ldr	r3, [pc, #156]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d210      	bcs.n	8006f58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f36:	4b24      	ldr	r3, [pc, #144]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f023 020f 	bic.w	r2, r3, #15
 8006f3e:	4922      	ldr	r1, [pc, #136]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f46:	4b20      	ldr	r3, [pc, #128]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d001      	beq.n	8006f58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e032      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d008      	beq.n	8006f76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f64:	4b19      	ldr	r3, [pc, #100]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	4916      	ldr	r1, [pc, #88]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0308 	and.w	r3, r3, #8
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d009      	beq.n	8006f96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f82:	4b12      	ldr	r3, [pc, #72]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	490e      	ldr	r1, [pc, #56]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f96:	f000 f821 	bl	8006fdc <HAL_RCC_GetSysClockFreq>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	091b      	lsrs	r3, r3, #4
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	490a      	ldr	r1, [pc, #40]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1cc>)
 8006fa8:	5ccb      	ldrb	r3, [r1, r3]
 8006faa:	fa22 f303 	lsr.w	r3, r2, r3
 8006fae:	4a09      	ldr	r2, [pc, #36]	@ (8006fd4 <HAL_RCC_ClockConfig+0x1d0>)
 8006fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006fb2:	4b09      	ldr	r3, [pc, #36]	@ (8006fd8 <HAL_RCC_ClockConfig+0x1d4>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fd fc4a 	bl	8004850 <HAL_InitTick>

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40023c00 	.word	0x40023c00
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	08015d98 	.word	0x08015d98
 8006fd4:	20000000 	.word	0x20000000
 8006fd8:	20000038 	.word	0x20000038

08006fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fe0:	b090      	sub	sp, #64	@ 0x40
 8006fe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fe8:	2300      	movs	r3, #0
 8006fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fec:	2300      	movs	r3, #0
 8006fee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ff4:	4b59      	ldr	r3, [pc, #356]	@ (800715c <HAL_RCC_GetSysClockFreq+0x180>)
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f003 030c 	and.w	r3, r3, #12
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d00d      	beq.n	800701c <HAL_RCC_GetSysClockFreq+0x40>
 8007000:	2b08      	cmp	r3, #8
 8007002:	f200 80a1 	bhi.w	8007148 <HAL_RCC_GetSysClockFreq+0x16c>
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <HAL_RCC_GetSysClockFreq+0x34>
 800700a:	2b04      	cmp	r3, #4
 800700c:	d003      	beq.n	8007016 <HAL_RCC_GetSysClockFreq+0x3a>
 800700e:	e09b      	b.n	8007148 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007010:	4b53      	ldr	r3, [pc, #332]	@ (8007160 <HAL_RCC_GetSysClockFreq+0x184>)
 8007012:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007014:	e09b      	b.n	800714e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007016:	4b53      	ldr	r3, [pc, #332]	@ (8007164 <HAL_RCC_GetSysClockFreq+0x188>)
 8007018:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800701a:	e098      	b.n	800714e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800701c:	4b4f      	ldr	r3, [pc, #316]	@ (800715c <HAL_RCC_GetSysClockFreq+0x180>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007024:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007026:	4b4d      	ldr	r3, [pc, #308]	@ (800715c <HAL_RCC_GetSysClockFreq+0x180>)
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d028      	beq.n	8007084 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007032:	4b4a      	ldr	r3, [pc, #296]	@ (800715c <HAL_RCC_GetSysClockFreq+0x180>)
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	099b      	lsrs	r3, r3, #6
 8007038:	2200      	movs	r2, #0
 800703a:	623b      	str	r3, [r7, #32]
 800703c:	627a      	str	r2, [r7, #36]	@ 0x24
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007044:	2100      	movs	r1, #0
 8007046:	4b47      	ldr	r3, [pc, #284]	@ (8007164 <HAL_RCC_GetSysClockFreq+0x188>)
 8007048:	fb03 f201 	mul.w	r2, r3, r1
 800704c:	2300      	movs	r3, #0
 800704e:	fb00 f303 	mul.w	r3, r0, r3
 8007052:	4413      	add	r3, r2
 8007054:	4a43      	ldr	r2, [pc, #268]	@ (8007164 <HAL_RCC_GetSysClockFreq+0x188>)
 8007056:	fba0 1202 	umull	r1, r2, r0, r2
 800705a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800705c:	460a      	mov	r2, r1
 800705e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007062:	4413      	add	r3, r2
 8007064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007068:	2200      	movs	r2, #0
 800706a:	61bb      	str	r3, [r7, #24]
 800706c:	61fa      	str	r2, [r7, #28]
 800706e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007072:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007076:	f7f9 fe17 	bl	8000ca8 <__aeabi_uldivmod>
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	4613      	mov	r3, r2
 8007080:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007082:	e053      	b.n	800712c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007084:	4b35      	ldr	r3, [pc, #212]	@ (800715c <HAL_RCC_GetSysClockFreq+0x180>)
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	099b      	lsrs	r3, r3, #6
 800708a:	2200      	movs	r2, #0
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	617a      	str	r2, [r7, #20]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007096:	f04f 0b00 	mov.w	fp, #0
 800709a:	4652      	mov	r2, sl
 800709c:	465b      	mov	r3, fp
 800709e:	f04f 0000 	mov.w	r0, #0
 80070a2:	f04f 0100 	mov.w	r1, #0
 80070a6:	0159      	lsls	r1, r3, #5
 80070a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070ac:	0150      	lsls	r0, r2, #5
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	ebb2 080a 	subs.w	r8, r2, sl
 80070b6:	eb63 090b 	sbc.w	r9, r3, fp
 80070ba:	f04f 0200 	mov.w	r2, #0
 80070be:	f04f 0300 	mov.w	r3, #0
 80070c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80070c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80070ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80070ce:	ebb2 0408 	subs.w	r4, r2, r8
 80070d2:	eb63 0509 	sbc.w	r5, r3, r9
 80070d6:	f04f 0200 	mov.w	r2, #0
 80070da:	f04f 0300 	mov.w	r3, #0
 80070de:	00eb      	lsls	r3, r5, #3
 80070e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070e4:	00e2      	lsls	r2, r4, #3
 80070e6:	4614      	mov	r4, r2
 80070e8:	461d      	mov	r5, r3
 80070ea:	eb14 030a 	adds.w	r3, r4, sl
 80070ee:	603b      	str	r3, [r7, #0]
 80070f0:	eb45 030b 	adc.w	r3, r5, fp
 80070f4:	607b      	str	r3, [r7, #4]
 80070f6:	f04f 0200 	mov.w	r2, #0
 80070fa:	f04f 0300 	mov.w	r3, #0
 80070fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007102:	4629      	mov	r1, r5
 8007104:	028b      	lsls	r3, r1, #10
 8007106:	4621      	mov	r1, r4
 8007108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800710c:	4621      	mov	r1, r4
 800710e:	028a      	lsls	r2, r1, #10
 8007110:	4610      	mov	r0, r2
 8007112:	4619      	mov	r1, r3
 8007114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007116:	2200      	movs	r2, #0
 8007118:	60bb      	str	r3, [r7, #8]
 800711a:	60fa      	str	r2, [r7, #12]
 800711c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007120:	f7f9 fdc2 	bl	8000ca8 <__aeabi_uldivmod>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4613      	mov	r3, r2
 800712a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800712c:	4b0b      	ldr	r3, [pc, #44]	@ (800715c <HAL_RCC_GetSysClockFreq+0x180>)
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	0c1b      	lsrs	r3, r3, #16
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	3301      	adds	r3, #1
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800713c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800713e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007140:	fbb2 f3f3 	udiv	r3, r2, r3
 8007144:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007146:	e002      	b.n	800714e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007148:	4b05      	ldr	r3, [pc, #20]	@ (8007160 <HAL_RCC_GetSysClockFreq+0x184>)
 800714a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800714c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800714e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007150:	4618      	mov	r0, r3
 8007152:	3740      	adds	r7, #64	@ 0x40
 8007154:	46bd      	mov	sp, r7
 8007156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800715a:	bf00      	nop
 800715c:	40023800 	.word	0x40023800
 8007160:	00f42400 	.word	0x00f42400
 8007164:	017d7840 	.word	0x017d7840

08007168 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800716c:	4b03      	ldr	r3, [pc, #12]	@ (800717c <HAL_RCC_GetHCLKFreq+0x14>)
 800716e:	681b      	ldr	r3, [r3, #0]
}
 8007170:	4618      	mov	r0, r3
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20000000 	.word	0x20000000

08007180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007184:	f7ff fff0 	bl	8007168 <HAL_RCC_GetHCLKFreq>
 8007188:	4602      	mov	r2, r0
 800718a:	4b05      	ldr	r3, [pc, #20]	@ (80071a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	0a9b      	lsrs	r3, r3, #10
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	4903      	ldr	r1, [pc, #12]	@ (80071a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007196:	5ccb      	ldrb	r3, [r1, r3]
 8007198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800719c:	4618      	mov	r0, r3
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	40023800 	.word	0x40023800
 80071a4:	08015da8 	.word	0x08015da8

080071a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071ac:	f7ff ffdc 	bl	8007168 <HAL_RCC_GetHCLKFreq>
 80071b0:	4602      	mov	r2, r0
 80071b2:	4b05      	ldr	r3, [pc, #20]	@ (80071c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	0b5b      	lsrs	r3, r3, #13
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	4903      	ldr	r1, [pc, #12]	@ (80071cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80071be:	5ccb      	ldrb	r3, [r1, r3]
 80071c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	40023800 	.word	0x40023800
 80071cc:	08015da8 	.word	0x08015da8

080071d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b088      	sub	sp, #32
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d012      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071f8:	4b69      	ldr	r3, [pc, #420]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	4a68      	ldr	r2, [pc, #416]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007202:	6093      	str	r3, [r2, #8]
 8007204:	4b66      	ldr	r3, [pc, #408]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800720c:	4964      	ldr	r1, [pc, #400]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800720e:	4313      	orrs	r3, r2
 8007210:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800721a:	2301      	movs	r3, #1
 800721c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d017      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800722a:	4b5d      	ldr	r3, [pc, #372]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800722c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007230:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007238:	4959      	ldr	r1, [pc, #356]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800723a:	4313      	orrs	r3, r2
 800723c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007244:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007248:	d101      	bne.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800724a:	2301      	movs	r3, #1
 800724c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007256:	2301      	movs	r3, #1
 8007258:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d017      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007266:	4b4e      	ldr	r3, [pc, #312]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800726c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007274:	494a      	ldr	r1, [pc, #296]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007276:	4313      	orrs	r3, r2
 8007278:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007280:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007284:	d101      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007286:	2301      	movs	r3, #1
 8007288:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007292:	2301      	movs	r3, #1
 8007294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80072a2:	2301      	movs	r3, #1
 80072a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 808b 	beq.w	80073ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072b4:	4b3a      	ldr	r3, [pc, #232]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b8:	4a39      	ldr	r2, [pc, #228]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072be:	6413      	str	r3, [r2, #64]	@ 0x40
 80072c0:	4b37      	ldr	r3, [pc, #220]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072c8:	60bb      	str	r3, [r7, #8]
 80072ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072cc:	4b35      	ldr	r3, [pc, #212]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a34      	ldr	r2, [pc, #208]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072d8:	f7fd fafe 	bl	80048d8 <HAL_GetTick>
 80072dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072de:	e008      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072e0:	f7fd fafa 	bl	80048d8 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b64      	cmp	r3, #100	@ 0x64
 80072ec:	d901      	bls.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e357      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072f2:	4b2c      	ldr	r3, [pc, #176]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0f0      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072fe:	4b28      	ldr	r3, [pc, #160]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007306:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d035      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	429a      	cmp	r2, r3
 800731a:	d02e      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800731c:	4b20      	ldr	r3, [pc, #128]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800731e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007324:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007326:	4b1e      	ldr	r3, [pc, #120]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800732a:	4a1d      	ldr	r2, [pc, #116]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800732c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007330:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007332:	4b1b      	ldr	r3, [pc, #108]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007336:	4a1a      	ldr	r2, [pc, #104]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800733c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800733e:	4a18      	ldr	r2, [pc, #96]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007344:	4b16      	ldr	r3, [pc, #88]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b01      	cmp	r3, #1
 800734e:	d114      	bne.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007350:	f7fd fac2 	bl	80048d8 <HAL_GetTick>
 8007354:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007356:	e00a      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007358:	f7fd fabe 	bl	80048d8 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007366:	4293      	cmp	r3, r2
 8007368:	d901      	bls.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e319      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800736e:	4b0c      	ldr	r3, [pc, #48]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0ee      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800737e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007382:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007386:	d111      	bne.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007388:	4b05      	ldr	r3, [pc, #20]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007394:	4b04      	ldr	r3, [pc, #16]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007396:	400b      	ands	r3, r1
 8007398:	4901      	ldr	r1, [pc, #4]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800739a:	4313      	orrs	r3, r2
 800739c:	608b      	str	r3, [r1, #8]
 800739e:	e00b      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80073a0:	40023800 	.word	0x40023800
 80073a4:	40007000 	.word	0x40007000
 80073a8:	0ffffcff 	.word	0x0ffffcff
 80073ac:	4baa      	ldr	r3, [pc, #680]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	4aa9      	ldr	r2, [pc, #676]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073b2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80073b6:	6093      	str	r3, [r2, #8]
 80073b8:	4ba7      	ldr	r3, [pc, #668]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073c4:	49a4      	ldr	r1, [pc, #656]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0310 	and.w	r3, r3, #16
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d010      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073d6:	4ba0      	ldr	r3, [pc, #640]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073dc:	4a9e      	ldr	r2, [pc, #632]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80073e6:	4b9c      	ldr	r3, [pc, #624]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f0:	4999      	ldr	r1, [pc, #612]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007404:	4b94      	ldr	r3, [pc, #592]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800740a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007412:	4991      	ldr	r1, [pc, #580]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007414:	4313      	orrs	r3, r2
 8007416:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007426:	4b8c      	ldr	r3, [pc, #560]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007434:	4988      	ldr	r1, [pc, #544]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007436:	4313      	orrs	r3, r2
 8007438:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007448:	4b83      	ldr	r3, [pc, #524]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800744a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800744e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007456:	4980      	ldr	r1, [pc, #512]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007458:	4313      	orrs	r3, r2
 800745a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800746a:	4b7b      	ldr	r3, [pc, #492]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800746c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007470:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007478:	4977      	ldr	r1, [pc, #476]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800747a:	4313      	orrs	r3, r2
 800747c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800748c:	4b72      	ldr	r3, [pc, #456]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800748e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007492:	f023 0203 	bic.w	r2, r3, #3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800749a:	496f      	ldr	r1, [pc, #444]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800749c:	4313      	orrs	r3, r2
 800749e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074ae:	4b6a      	ldr	r3, [pc, #424]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b4:	f023 020c 	bic.w	r2, r3, #12
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074bc:	4966      	ldr	r1, [pc, #408]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074d0:	4b61      	ldr	r3, [pc, #388]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074de:	495e      	ldr	r1, [pc, #376]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074f2:	4b59      	ldr	r3, [pc, #356]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074f8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007500:	4955      	ldr	r1, [pc, #340]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007502:	4313      	orrs	r3, r2
 8007504:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007514:	4b50      	ldr	r3, [pc, #320]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800751a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007522:	494d      	ldr	r1, [pc, #308]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007524:	4313      	orrs	r3, r2
 8007526:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007536:	4b48      	ldr	r3, [pc, #288]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800753c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007544:	4944      	ldr	r1, [pc, #272]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00a      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007558:	4b3f      	ldr	r3, [pc, #252]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800755a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800755e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007566:	493c      	ldr	r1, [pc, #240]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007568:	4313      	orrs	r3, r2
 800756a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800757a:	4b37      	ldr	r3, [pc, #220]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800757c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007580:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007588:	4933      	ldr	r1, [pc, #204]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800758a:	4313      	orrs	r3, r2
 800758c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800759c:	4b2e      	ldr	r3, [pc, #184]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800759e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075aa:	492b      	ldr	r1, [pc, #172]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d011      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80075be:	4b26      	ldr	r3, [pc, #152]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075cc:	4922      	ldr	r1, [pc, #136]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075dc:	d101      	bne.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80075de:	2301      	movs	r3, #1
 80075e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0308 	and.w	r3, r3, #8
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80075ee:	2301      	movs	r3, #1
 80075f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075fe:	4b16      	ldr	r3, [pc, #88]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007604:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800760c:	4912      	ldr	r1, [pc, #72]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800760e:	4313      	orrs	r3, r2
 8007610:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007620:	4b0d      	ldr	r3, [pc, #52]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007626:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007630:	4909      	ldr	r1, [pc, #36]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007632:	4313      	orrs	r3, r2
 8007634:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d006      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 80d9 	beq.w	80077fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800764c:	4b02      	ldr	r3, [pc, #8]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a01      	ldr	r2, [pc, #4]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007652:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007656:	e001      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007658:	40023800 	.word	0x40023800
 800765c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800765e:	f7fd f93b 	bl	80048d8 <HAL_GetTick>
 8007662:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007664:	e008      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007666:	f7fd f937 	bl	80048d8 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	2b64      	cmp	r3, #100	@ 0x64
 8007672:	d901      	bls.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e194      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007678:	4b6c      	ldr	r3, [pc, #432]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1f0      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b00      	cmp	r3, #0
 800768e:	d021      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007694:	2b00      	cmp	r3, #0
 8007696:	d11d      	bne.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007698:	4b64      	ldr	r3, [pc, #400]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800769a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800769e:	0c1b      	lsrs	r3, r3, #16
 80076a0:	f003 0303 	and.w	r3, r3, #3
 80076a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076a6:	4b61      	ldr	r3, [pc, #388]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ac:	0e1b      	lsrs	r3, r3, #24
 80076ae:	f003 030f 	and.w	r3, r3, #15
 80076b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	019a      	lsls	r2, r3, #6
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	041b      	lsls	r3, r3, #16
 80076be:	431a      	orrs	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	061b      	lsls	r3, r3, #24
 80076c4:	431a      	orrs	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	071b      	lsls	r3, r3, #28
 80076cc:	4957      	ldr	r1, [pc, #348]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d004      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076e8:	d00a      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d02e      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076fe:	d129      	bne.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007700:	4b4a      	ldr	r3, [pc, #296]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007706:	0c1b      	lsrs	r3, r3, #16
 8007708:	f003 0303 	and.w	r3, r3, #3
 800770c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800770e:	4b47      	ldr	r3, [pc, #284]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007714:	0f1b      	lsrs	r3, r3, #28
 8007716:	f003 0307 	and.w	r3, r3, #7
 800771a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	019a      	lsls	r2, r3, #6
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	041b      	lsls	r3, r3, #16
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	061b      	lsls	r3, r3, #24
 800772e:	431a      	orrs	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	071b      	lsls	r3, r3, #28
 8007734:	493d      	ldr	r1, [pc, #244]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007736:	4313      	orrs	r3, r2
 8007738:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800773c:	4b3b      	ldr	r3, [pc, #236]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800773e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007742:	f023 021f 	bic.w	r2, r3, #31
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800774a:	3b01      	subs	r3, #1
 800774c:	4937      	ldr	r1, [pc, #220]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800774e:	4313      	orrs	r3, r2
 8007750:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01d      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007760:	4b32      	ldr	r3, [pc, #200]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007766:	0e1b      	lsrs	r3, r3, #24
 8007768:	f003 030f 	and.w	r3, r3, #15
 800776c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800776e:	4b2f      	ldr	r3, [pc, #188]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007774:	0f1b      	lsrs	r3, r3, #28
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	019a      	lsls	r2, r3, #6
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	041b      	lsls	r3, r3, #16
 8007788:	431a      	orrs	r2, r3
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	061b      	lsls	r3, r3, #24
 800778e:	431a      	orrs	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	071b      	lsls	r3, r3, #28
 8007794:	4925      	ldr	r1, [pc, #148]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007796:	4313      	orrs	r3, r2
 8007798:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d011      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	019a      	lsls	r2, r3, #6
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	041b      	lsls	r3, r3, #16
 80077b4:	431a      	orrs	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	061b      	lsls	r3, r3, #24
 80077bc:	431a      	orrs	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	071b      	lsls	r3, r3, #28
 80077c4:	4919      	ldr	r1, [pc, #100]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80077cc:	4b17      	ldr	r3, [pc, #92]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a16      	ldr	r2, [pc, #88]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80077d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d8:	f7fd f87e 	bl	80048d8 <HAL_GetTick>
 80077dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077de:	e008      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80077e0:	f7fd f87a 	bl	80048d8 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b64      	cmp	r3, #100	@ 0x64
 80077ec:	d901      	bls.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e0d7      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077f2:	4b0e      	ldr	r3, [pc, #56]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0f0      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b01      	cmp	r3, #1
 8007802:	f040 80cd 	bne.w	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007806:	4b09      	ldr	r3, [pc, #36]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a08      	ldr	r2, [pc, #32]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800780c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007812:	f7fd f861 	bl	80048d8 <HAL_GetTick>
 8007816:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007818:	e00a      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800781a:	f7fd f85d 	bl	80048d8 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	2b64      	cmp	r3, #100	@ 0x64
 8007826:	d903      	bls.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e0ba      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800782c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007830:	4b5e      	ldr	r3, [pc, #376]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800783c:	d0ed      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d009      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800785a:	2b00      	cmp	r3, #0
 800785c:	d02e      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	d12a      	bne.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007866:	4b51      	ldr	r3, [pc, #324]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800786c:	0c1b      	lsrs	r3, r3, #16
 800786e:	f003 0303 	and.w	r3, r3, #3
 8007872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007874:	4b4d      	ldr	r3, [pc, #308]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800787a:	0f1b      	lsrs	r3, r3, #28
 800787c:	f003 0307 	and.w	r3, r3, #7
 8007880:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	019a      	lsls	r2, r3, #6
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	041b      	lsls	r3, r3, #16
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	061b      	lsls	r3, r3, #24
 8007894:	431a      	orrs	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	071b      	lsls	r3, r3, #28
 800789a:	4944      	ldr	r1, [pc, #272]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800789c:	4313      	orrs	r3, r2
 800789e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80078a2:	4b42      	ldr	r3, [pc, #264]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078a8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b0:	3b01      	subs	r3, #1
 80078b2:	021b      	lsls	r3, r3, #8
 80078b4:	493d      	ldr	r1, [pc, #244]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d022      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078d0:	d11d      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078d2:	4b36      	ldr	r3, [pc, #216]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078d8:	0e1b      	lsrs	r3, r3, #24
 80078da:	f003 030f 	and.w	r3, r3, #15
 80078de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80078e0:	4b32      	ldr	r3, [pc, #200]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078e6:	0f1b      	lsrs	r3, r3, #28
 80078e8:	f003 0307 	and.w	r3, r3, #7
 80078ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	019a      	lsls	r2, r3, #6
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	041b      	lsls	r3, r3, #16
 80078fa:	431a      	orrs	r2, r3
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	061b      	lsls	r3, r3, #24
 8007900:	431a      	orrs	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	071b      	lsls	r3, r3, #28
 8007906:	4929      	ldr	r1, [pc, #164]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007908:	4313      	orrs	r3, r2
 800790a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0308 	and.w	r3, r3, #8
 8007916:	2b00      	cmp	r3, #0
 8007918:	d028      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800791a:	4b24      	ldr	r3, [pc, #144]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800791c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007920:	0e1b      	lsrs	r3, r3, #24
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007928:	4b20      	ldr	r3, [pc, #128]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800792a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800792e:	0c1b      	lsrs	r3, r3, #16
 8007930:	f003 0303 	and.w	r3, r3, #3
 8007934:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	019a      	lsls	r2, r3, #6
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	041b      	lsls	r3, r3, #16
 8007940:	431a      	orrs	r2, r3
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	061b      	lsls	r3, r3, #24
 8007946:	431a      	orrs	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	071b      	lsls	r3, r3, #28
 800794e:	4917      	ldr	r1, [pc, #92]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007950:	4313      	orrs	r3, r2
 8007952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007956:	4b15      	ldr	r3, [pc, #84]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800795c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007964:	4911      	ldr	r1, [pc, #68]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007966:	4313      	orrs	r3, r2
 8007968:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800796c:	4b0f      	ldr	r3, [pc, #60]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a0e      	ldr	r2, [pc, #56]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007978:	f7fc ffae 	bl	80048d8 <HAL_GetTick>
 800797c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800797e:	e008      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007980:	f7fc ffaa 	bl	80048d8 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b64      	cmp	r3, #100	@ 0x64
 800798c:	d901      	bls.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e007      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007992:	4b06      	ldr	r3, [pc, #24]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800799a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800799e:	d1ef      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3720      	adds	r7, #32
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	40023800 	.word	0x40023800

080079b0 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a80      	ldr	r2, [pc, #512]	@ (8007bc0 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 80079c0:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80079c2:	4b80      	ldr	r3, [pc, #512]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80079c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079c8:	099b      	lsrs	r3, r3, #6
 80079ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80079d2:	4b7c      	ldr	r3, [pc, #496]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80079d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079d8:	0c1b      	lsrs	r3, r3, #16
 80079da:	f003 0203 	and.w	r2, r3, #3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80079e2:	4b78      	ldr	r3, [pc, #480]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80079e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079e8:	0e1b      	lsrs	r3, r3, #24
 80079ea:	f003 020f 	and.w	r2, r3, #15
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80079f2:	4b74      	ldr	r3, [pc, #464]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80079f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079f8:	0f1b      	lsrs	r3, r3, #28
 80079fa:	f003 0207 	and.w	r2, r3, #7
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8007a02:	4b70      	ldr	r3, [pc, #448]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a08:	099b      	lsrs	r3, r3, #6
 8007a0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a12:	4b6c      	ldr	r3, [pc, #432]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a18:	0c1b      	lsrs	r3, r3, #16
 8007a1a:	f003 0203 	and.w	r2, r3, #3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a22:	4b68      	ldr	r3, [pc, #416]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a28:	0e1b      	lsrs	r3, r3, #24
 8007a2a:	f003 020f 	and.w	r2, r3, #15
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a32:	4b64      	ldr	r3, [pc, #400]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a38:	0f1b      	lsrs	r3, r3, #28
 8007a3a:	f003 0207 	and.w	r2, r3, #7
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8007a42:	4b60      	ldr	r3, [pc, #384]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a48:	f003 021f 	and.w	r2, r3, #31
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8007a50:	4b5c      	ldr	r3, [pc, #368]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a56:	0a1b      	lsrs	r3, r3, #8
 8007a58:	f003 021f 	and.w	r2, r3, #31
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8007a60:	4b58      	ldr	r3, [pc, #352]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a66:	0c1b      	lsrs	r3, r3, #16
 8007a68:	f003 0203 	and.w	r2, r3, #3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8007a70:	4b54      	ldr	r3, [pc, #336]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a76:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8007a7e:	4b51      	ldr	r3, [pc, #324]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a84:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8007a8c:	4b4d      	ldr	r3, [pc, #308]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8007a98:	4b4a      	ldr	r3, [pc, #296]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8007aa6:	4b47      	ldr	r3, [pc, #284]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aac:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8007ab4:	4b43      	ldr	r3, [pc, #268]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aba:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8007ac2:	4b40      	ldr	r3, [pc, #256]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ac8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8007ad0:	4b3c      	ldr	r3, [pc, #240]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad6:	f003 0203 	and.w	r2, r3, #3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8007ade:	4b39      	ldr	r3, [pc, #228]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae4:	f003 020c 	and.w	r2, r3, #12
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8007aec:	4b35      	ldr	r3, [pc, #212]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8007afa:	4b32      	ldr	r3, [pc, #200]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b00:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8007b08:	4b2e      	ldr	r3, [pc, #184]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b0e:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8007b16:	4b2b      	ldr	r3, [pc, #172]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b1c:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8007b24:	4b27      	ldr	r3, [pc, #156]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b2a:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8007b32:	4b24      	ldr	r3, [pc, #144]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b38:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007b40:	4b20      	ldr	r3, [pc, #128]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b46:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8007b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b54:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8007b5c:	4b19      	ldr	r3, [pc, #100]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b62:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007b6a:	4b16      	ldr	r3, [pc, #88]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b70:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007b7a:	4b12      	ldr	r3, [pc, #72]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007b82:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007b84:	4b0f      	ldr	r3, [pc, #60]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b88:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8007b94:	4b0b      	ldr	r3, [pc, #44]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d103      	bne.n	8007baa <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8007ba8:	e003      	b.n	8007bb2 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007bb0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007bb2:	bf00      	nop
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	00fffff1 	.word	0x00fffff1
 8007bc4:	40023800 	.word	0x40023800

08007bc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007be6:	f040 808d 	bne.w	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007bea:	4b93      	ldr	r3, [pc, #588]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bf0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007bf8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c00:	d07c      	beq.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c08:	d87b      	bhi.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d004      	beq.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c16:	d039      	beq.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007c18:	e073      	b.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007c1a:	4b87      	ldr	r3, [pc, #540]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d108      	bne.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c26:	4b84      	ldr	r3, [pc, #528]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c2e:	4a83      	ldr	r2, [pc, #524]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c34:	613b      	str	r3, [r7, #16]
 8007c36:	e007      	b.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007c38:	4b7f      	ldr	r3, [pc, #508]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c40:	4a7f      	ldr	r2, [pc, #508]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c46:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007c48:	4b7b      	ldr	r3, [pc, #492]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c4e:	0e1b      	lsrs	r3, r3, #24
 8007c50:	f003 030f 	and.w	r3, r3, #15
 8007c54:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007c56:	4b78      	ldr	r3, [pc, #480]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c5c:	099b      	lsrs	r3, r3, #6
 8007c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	fb03 f202 	mul.w	r2, r3, r2
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007c70:	4b71      	ldr	r3, [pc, #452]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c76:	0a1b      	lsrs	r3, r3, #8
 8007c78:	f003 031f 	and.w	r3, r3, #31
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c88:	617b      	str	r3, [r7, #20]
        break;
 8007c8a:	e03b      	b.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007c8c:	4b6a      	ldr	r3, [pc, #424]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d108      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c98:	4b67      	ldr	r3, [pc, #412]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ca0:	4a66      	ldr	r2, [pc, #408]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca6:	613b      	str	r3, [r7, #16]
 8007ca8:	e007      	b.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007caa:	4b63      	ldr	r3, [pc, #396]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cb2:	4a63      	ldr	r2, [pc, #396]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007cba:	4b5f      	ldr	r3, [pc, #380]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cc0:	0e1b      	lsrs	r3, r3, #24
 8007cc2:	f003 030f 	and.w	r3, r3, #15
 8007cc6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007cc8:	4b5b      	ldr	r3, [pc, #364]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cce:	099b      	lsrs	r3, r3, #6
 8007cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	fb03 f202 	mul.w	r2, r3, r2
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007ce2:	4b55      	ldr	r3, [pc, #340]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ce8:	f003 031f 	and.w	r3, r3, #31
 8007cec:	3301      	adds	r3, #1
 8007cee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf8:	617b      	str	r3, [r7, #20]
        break;
 8007cfa:	e003      	b.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007cfc:	4b51      	ldr	r3, [pc, #324]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007cfe:	617b      	str	r3, [r7, #20]
        break;
 8007d00:	e000      	b.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8007d02:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d0a:	f040 808d 	bne.w	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d14:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007d1c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d24:	d07c      	beq.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d2c:	d87b      	bhi.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d004      	beq.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d3a:	d039      	beq.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007d3c:	e073      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d108      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d52:	4a3a      	ldr	r2, [pc, #232]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d58:	613b      	str	r3, [r7, #16]
 8007d5a:	e007      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007d5c:	4b36      	ldr	r3, [pc, #216]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d64:	4a36      	ldr	r2, [pc, #216]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007d6c:	4b32      	ldr	r3, [pc, #200]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d72:	0e1b      	lsrs	r3, r3, #24
 8007d74:	f003 030f 	and.w	r3, r3, #15
 8007d78:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d80:	099b      	lsrs	r3, r3, #6
 8007d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	fb03 f202 	mul.w	r2, r3, r2
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d92:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007d94:	4b28      	ldr	r3, [pc, #160]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d9a:	0a1b      	lsrs	r3, r3, #8
 8007d9c:	f003 031f 	and.w	r3, r3, #31
 8007da0:	3301      	adds	r3, #1
 8007da2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dac:	617b      	str	r3, [r7, #20]
        break;
 8007dae:	e03b      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007db0:	4b21      	ldr	r3, [pc, #132]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d108      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dca:	613b      	str	r3, [r7, #16]
 8007dcc:	e007      	b.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007dce:	4b1a      	ldr	r3, [pc, #104]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ddc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007dde:	4b16      	ldr	r3, [pc, #88]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007de4:	0e1b      	lsrs	r3, r3, #24
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007dec:	4b12      	ldr	r3, [pc, #72]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007df2:	099b      	lsrs	r3, r3, #6
 8007df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	fb03 f202 	mul.w	r2, r3, r2
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e04:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007e06:	4b0c      	ldr	r3, [pc, #48]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e0c:	f003 031f 	and.w	r3, r3, #31
 8007e10:	3301      	adds	r3, #1
 8007e12:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e1c:	617b      	str	r3, [r7, #20]
        break;
 8007e1e:	e003      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e20:	4b08      	ldr	r3, [pc, #32]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007e22:	617b      	str	r3, [r7, #20]
        break;
 8007e24:	e000      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8007e26:	bf00      	nop
      }
    }
  }

  return frequency;
 8007e28:	697b      	ldr	r3, [r7, #20]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	371c      	adds	r7, #28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	40023800 	.word	0x40023800
 8007e3c:	00f42400 	.word	0x00f42400
 8007e40:	017d7840 	.word	0x017d7840
 8007e44:	00bb8000 	.word	0x00bb8000

08007e48 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b088      	sub	sp, #32
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e156      	b.n	8008114 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d106      	bne.n	8007e80 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7fa f804 	bl	8001e88 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fad5 	bl	8008438 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d00c      	beq.n	8007eb0 <HAL_SAI_Init+0x68>
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d80d      	bhi.n	8007eb6 <HAL_SAI_Init+0x6e>
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d002      	beq.n	8007ea4 <HAL_SAI_Init+0x5c>
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d003      	beq.n	8007eaa <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8007ea2:	e008      	b.n	8007eb6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61fb      	str	r3, [r7, #28]
      break;
 8007ea8:	e006      	b.n	8007eb8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007eaa:	2310      	movs	r3, #16
 8007eac:	61fb      	str	r3, [r7, #28]
      break;
 8007eae:	e003      	b.n	8007eb8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007eb0:	2320      	movs	r3, #32
 8007eb2:	61fb      	str	r3, [r7, #28]
      break;
 8007eb4:	e000      	b.n	8007eb8 <HAL_SAI_Init+0x70>
      break;
 8007eb6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d81e      	bhi.n	8007efe <HAL_SAI_Init+0xb6>
 8007ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec8 <HAL_SAI_Init+0x80>)
 8007ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec6:	bf00      	nop
 8007ec8:	08007ed9 	.word	0x08007ed9
 8007ecc:	08007edf 	.word	0x08007edf
 8007ed0:	08007ee7 	.word	0x08007ee7
 8007ed4:	08007eef 	.word	0x08007eef
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	617b      	str	r3, [r7, #20]
    }
    break;
 8007edc:	e010      	b.n	8007f00 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007ede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ee2:	617b      	str	r3, [r7, #20]
    }
    break;
 8007ee4:	e00c      	b.n	8007f00 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007ee6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007eea:	617b      	str	r3, [r7, #20]
    }
    break;
 8007eec:	e008      	b.n	8007f00 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007eee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007ef2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	f043 0301 	orr.w	r3, r3, #1
 8007efa:	61fb      	str	r3, [r7, #28]
    }
    break;
 8007efc:	e000      	b.n	8007f00 <HAL_SAI_Init+0xb8>
    default:
      break;
 8007efe:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a85      	ldr	r2, [pc, #532]	@ (800811c <HAL_SAI_Init+0x2d4>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d004      	beq.n	8007f14 <HAL_SAI_Init+0xcc>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a84      	ldr	r2, [pc, #528]	@ (8008120 <HAL_SAI_Init+0x2d8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d103      	bne.n	8007f1c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8007f14:	4a83      	ldr	r2, [pc, #524]	@ (8008124 <HAL_SAI_Init+0x2dc>)
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	6013      	str	r3, [r2, #0]
 8007f1a:	e002      	b.n	8007f22 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007f1c:	4a82      	ldr	r2, [pc, #520]	@ (8008128 <HAL_SAI_Init+0x2e0>)
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d04c      	beq.n	8007fc4 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a7a      	ldr	r2, [pc, #488]	@ (800811c <HAL_SAI_Init+0x2d4>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d004      	beq.n	8007f42 <HAL_SAI_Init+0xfa>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a78      	ldr	r2, [pc, #480]	@ (8008120 <HAL_SAI_Init+0x2d8>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d104      	bne.n	8007f4c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007f42:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007f46:	f7ff fe3f 	bl	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f4a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a76      	ldr	r2, [pc, #472]	@ (800812c <HAL_SAI_Init+0x2e4>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d004      	beq.n	8007f60 <HAL_SAI_Init+0x118>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a75      	ldr	r2, [pc, #468]	@ (8008130 <HAL_SAI_Init+0x2e8>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d104      	bne.n	8007f6a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007f60:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007f64:	f7ff fe30 	bl	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f68:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	461a      	mov	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	025b      	lsls	r3, r3, #9
 8007f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f80:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	4a6b      	ldr	r2, [pc, #428]	@ (8008134 <HAL_SAI_Init+0x2ec>)
 8007f86:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8a:	08da      	lsrs	r2, r3, #3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8007f90:	68f9      	ldr	r1, [r7, #12]
 8007f92:	4b68      	ldr	r3, [pc, #416]	@ (8008134 <HAL_SAI_Init+0x2ec>)
 8007f94:	fba3 2301 	umull	r2, r3, r3, r1
 8007f98:	08da      	lsrs	r2, r3, #3
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	1aca      	subs	r2, r1, r3
 8007fa4:	2a08      	cmp	r2, #8
 8007fa6:	d904      	bls.n	8007fb2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb6:	2b04      	cmp	r3, #4
 8007fb8:	d104      	bne.n	8007fc4 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	085a      	lsrs	r2, r3, #1
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d003      	beq.n	8007fd4 <HAL_SAI_Init+0x18c>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d109      	bne.n	8007fe8 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d101      	bne.n	8007fe0 <HAL_SAI_Init+0x198>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	e001      	b.n	8007fe4 <HAL_SAI_Init+0x19c>
 8007fe0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fe4:	61bb      	str	r3, [r7, #24]
 8007fe6:	e008      	b.n	8007ffa <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d102      	bne.n	8007ff6 <HAL_SAI_Init+0x1ae>
 8007ff0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ff4:	e000      	b.n	8007ff8 <HAL_SAI_Init+0x1b0>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6819      	ldr	r1, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	4b4c      	ldr	r3, [pc, #304]	@ (8008138 <HAL_SAI_Init+0x2f0>)
 8008006:	400b      	ands	r3, r1
 8008008:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6819      	ldr	r1, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008018:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800801e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008024:	431a      	orrs	r2, r3
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8008032:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800803e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a1b      	ldr	r3, [r3, #32]
 8008044:	051b      	lsls	r3, r3, #20
 8008046:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	430a      	orrs	r2, r1
 800804e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6859      	ldr	r1, [r3, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	4b38      	ldr	r3, [pc, #224]	@ (800813c <HAL_SAI_Init+0x2f4>)
 800805c:	400b      	ands	r3, r1
 800805e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6859      	ldr	r1, [r3, #4]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	699a      	ldr	r2, [r3, #24]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806e:	431a      	orrs	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008074:	431a      	orrs	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6899      	ldr	r1, [r3, #8]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	4b2d      	ldr	r3, [pc, #180]	@ (8008140 <HAL_SAI_Init+0x2f8>)
 800808a:	400b      	ands	r3, r1
 800808c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6899      	ldr	r1, [r3, #8]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008098:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800809e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80080a4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80080aa:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080b0:	3b01      	subs	r3, #1
 80080b2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80080b4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68d9      	ldr	r1, [r3, #12]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80080cc:	400b      	ands	r3, r1
 80080ce:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68d9      	ldr	r1, [r3, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080de:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080e4:	041b      	lsls	r3, r3, #16
 80080e6:	431a      	orrs	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080ec:	3b01      	subs	r3, #1
 80080ee:	021b      	lsls	r3, r3, #8
 80080f0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3720      	adds	r7, #32
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	40015804 	.word	0x40015804
 8008120:	40015824 	.word	0x40015824
 8008124:	40015800 	.word	0x40015800
 8008128:	40015c00 	.word	0x40015c00
 800812c:	40015c04 	.word	0x40015c04
 8008130:	40015c24 	.word	0x40015c24
 8008134:	cccccccd 	.word	0xcccccccd
 8008138:	ff05c010 	.word	0xff05c010
 800813c:	ffff1ff0 	.word	0xffff1ff0
 8008140:	fff88000 	.word	0xfff88000

08008144 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e027      	b.n	80081a6 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2202      	movs	r2, #2
 800815a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2200      	movs	r2, #0
 8008164:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f04f 32ff 	mov.w	r2, #4294967295
 800816e:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f961 	bl	8008438 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f042 0208 	orr.w	r2, r2, #8
 8008184:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7f9 ff1a 	bl	8001fc0 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d101      	bne.n	80081c8 <HAL_SAI_DMAStop+0x1a>
 80081c4:	2302      	movs	r3, #2
 80081c6:	e061      	b.n	800828c <HAL_SAI_DMAStop+0xde>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f931 	bl	8008438 <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80081e4:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d01c      	beq.n	8008228 <HAL_SAI_DMAStop+0x7a>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b12      	cmp	r3, #18
 80081f8:	d116      	bne.n	8008228 <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fc ff0a 	bl	8005018 <HAL_DMA_Abort>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00e      	beq.n	8008228 <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800820e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008210:	2b80      	cmp	r3, #128	@ 0x80
 8008212:	d009      	beq.n	8008228 <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800821e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822c:	2b00      	cmp	r3, #0
 800822e:	d01c      	beq.n	800826a <HAL_SAI_DMAStop+0xbc>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b22      	cmp	r3, #34	@ 0x22
 800823a:	d116      	bne.n	800826a <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008240:	4618      	mov	r0, r3
 8008242:	f7fc fee9 	bl	8005018 <HAL_DMA_Abort>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00e      	beq.n	800826a <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008252:	2b80      	cmp	r3, #128	@ 0x80
 8008254:	d009      	beq.n	800826a <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008260:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f042 0208 	orr.w	r2, r2, #8
 8008278:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 800828a:	7bfb      	ldrb	r3, [r7, #15]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	4613      	mov	r3, r2
 80082a0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <HAL_SAI_Receive_DMA+0x1a>
 80082a8:	88fb      	ldrh	r3, [r7, #6]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e074      	b.n	800839c <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d16d      	bne.n	800839a <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d101      	bne.n	80082cc <HAL_SAI_Receive_DMA+0x38>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e067      	b.n	800839c <HAL_SAI_Receive_DMA+0x108>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	88fa      	ldrh	r2, [r7, #6]
 80082de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	88fa      	ldrh	r2, [r7, #6]
 80082e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2222      	movs	r2, #34	@ 0x22
 80082f6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082fe:	4a29      	ldr	r2, [pc, #164]	@ (80083a4 <HAL_SAI_Receive_DMA+0x110>)
 8008300:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008306:	4a28      	ldr	r2, [pc, #160]	@ (80083a8 <HAL_SAI_Receive_DMA+0x114>)
 8008308:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800830e:	4a27      	ldr	r2, [pc, #156]	@ (80083ac <HAL_SAI_Receive_DMA+0x118>)
 8008310:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008316:	2200      	movs	r2, #0
 8008318:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	331c      	adds	r3, #28
 8008324:	4619      	mov	r1, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800832a:	461a      	mov	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008332:	f7fc fe11 	bl	8004f58 <HAL_DMA_Start_IT>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e029      	b.n	800839c <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008348:	2100      	movs	r1, #0
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 f83e 	bl	80083cc <SAI_InterruptFlag>
 8008350:	4601      	mov	r1, r0
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	691a      	ldr	r2, [r3, #16]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800836e:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d107      	bne.n	800838e <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800838c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	e000      	b.n	800839c <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800839a:	2302      	movs	r3, #2
  }
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	08008509 	.word	0x08008509
 80083a8:	080084a9 	.word	0x080084a9
 80083ac:	08008525 	.word	0x08008525

080083b0 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  return hsai->State;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80083be:	b2db      	uxtb	r3, r3
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d103      	bne.n	80083e8 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f043 0308 	orr.w	r3, r3, #8
 80083e6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d10b      	bne.n	8008408 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d003      	beq.n	8008400 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d103      	bne.n	8008408 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f043 0310 	orr.w	r3, r3, #16
 8008406:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	2b03      	cmp	r3, #3
 800840e:	d003      	beq.n	8008418 <SAI_InterruptFlag+0x4c>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	2b02      	cmp	r3, #2
 8008416:	d104      	bne.n	8008422 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800841e:	60fb      	str	r3, [r7, #12]
 8008420:	e003      	b.n	800842a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f043 0304 	orr.w	r3, r3, #4
 8008428:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800842a:	68fb      	ldr	r3, [r7, #12]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008440:	4b17      	ldr	r3, [pc, #92]	@ (80084a0 <SAI_Disable+0x68>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a17      	ldr	r2, [pc, #92]	@ (80084a4 <SAI_Disable+0x6c>)
 8008446:	fba2 2303 	umull	r2, r3, r2, r3
 800844a:	0b1b      	lsrs	r3, r3, #12
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008462:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	1e5a      	subs	r2, r3, #1
 8008468:	60fa      	str	r2, [r7, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10a      	bne.n	8008484 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008474:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	72fb      	strb	r3, [r7, #11]
      break;
 8008482:	e006      	b.n	8008492 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1e8      	bne.n	8008464 <SAI_Disable+0x2c>

  return status;
 8008492:	7afb      	ldrb	r3, [r7, #11]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	20000000 	.word	0x20000000
 80084a4:	95cbec1b 	.word	0x95cbec1b

080084a8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084be:	d01c      	beq.n	80084fa <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80084ce:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80084d8:	2100      	movs	r1, #0
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f7ff ff76 	bl	80083cc <SAI_InterruptFlag>
 80084e0:	4603      	mov	r3, r0
 80084e2:	43d9      	mvns	r1, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	691a      	ldr	r2, [r3, #16]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	400a      	ands	r2, r1
 80084f0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f7fc f800 	bl	8004500 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008500:	bf00      	nop
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008514:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f7fb fffc 	bl	8004514 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800851c:	bf00      	nop
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008530:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008538:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008548:	2b01      	cmp	r3, #1
 800854a:	d004      	beq.n	8008556 <SAI_DMAError+0x32>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008552:	2b01      	cmp	r3, #1
 8008554:	d112      	bne.n	800857c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008564:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f7ff ff66 	bl	8008438 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7fb fdbf 	bl	8004100 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008582:	bf00      	nop
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e022      	b.n	80085e2 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d105      	bne.n	80085b4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7f9 fd58 	bl	8002064 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2203      	movs	r2, #3
 80085b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f815 	bl	80085ec <HAL_SD_InitCard>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e00a      	b.n	80085e2 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80085ec:	b5b0      	push	{r4, r5, r7, lr}
 80085ee:	b08e      	sub	sp, #56	@ 0x38
 80085f0:	af04      	add	r7, sp, #16
 80085f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80085f4:	2300      	movs	r3, #0
 80085f6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80085fc:	2300      	movs	r3, #0
 80085fe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008600:	2300      	movs	r3, #0
 8008602:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008604:	2300      	movs	r3, #0
 8008606:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008608:	2376      	movs	r3, #118	@ 0x76
 800860a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681d      	ldr	r5, [r3, #0]
 8008610:	466c      	mov	r4, sp
 8008612:	f107 0314 	add.w	r3, r7, #20
 8008616:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800861a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800861e:	f107 0308 	add.w	r3, r7, #8
 8008622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008624:	4628      	mov	r0, r5
 8008626:	f001 fddf 	bl	800a1e8 <SDMMC_Init>
 800862a:	4603      	mov	r3, r0
 800862c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8008630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e059      	b.n	80086f0 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800864a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4618      	mov	r0, r3
 8008652:	f001 fe13 	bl	800a27c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008664:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008666:	2002      	movs	r0, #2
 8008668:	f7fc f942 	bl	80048f0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 ff59 	bl	8009524 <SD_PowerON>
 8008672:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00b      	beq.n	8008692 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	431a      	orrs	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e02e      	b.n	80086f0 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fe78 	bl	8009388 <SD_InitCard>
 8008698:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00b      	beq.n	80086b8 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	431a      	orrs	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e01b      	b.n	80086f0 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80086c0:	4618      	mov	r0, r3
 80086c2:	f001 fe6d 	bl	800a3a0 <SDMMC_CmdBlockLength>
 80086c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00f      	beq.n	80086ee <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a09      	ldr	r2, [pc, #36]	@ (80086f8 <HAL_SD_InitCard+0x10c>)
 80086d4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	431a      	orrs	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e000      	b.n	80086f0 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3728      	adds	r7, #40	@ 0x28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bdb0      	pop	{r4, r5, r7, pc}
 80086f8:	004005ff 	.word	0x004005ff

080086fc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08c      	sub	sp, #48	@ 0x30
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
 8008708:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d107      	bne.n	8008724 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008718:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e0c3      	b.n	80088ac <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b01      	cmp	r3, #1
 800872e:	f040 80bc 	bne.w	80088aa <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	441a      	add	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008742:	429a      	cmp	r2, r3
 8008744:	d907      	bls.n	8008756 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800874a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e0aa      	b.n	80088ac <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2203      	movs	r2, #3
 800875a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2200      	movs	r2, #0
 8008764:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008774:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800877a:	4a4e      	ldr	r2, [pc, #312]	@ (80088b4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800877c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008782:	4a4d      	ldr	r2, [pc, #308]	@ (80088b8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008784:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878a:	2200      	movs	r2, #0
 800878c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008792:	2200      	movs	r2, #0
 8008794:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a6:	689a      	ldr	r2, [r3, #8]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3380      	adds	r3, #128	@ 0x80
 80087bc:	4619      	mov	r1, r3
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	025b      	lsls	r3, r3, #9
 80087c4:	089b      	lsrs	r3, r3, #2
 80087c6:	f7fc fbc7 	bl	8004f58 <HAL_DMA_Start_IT>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d017      	beq.n	8008800 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80087de:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a35      	ldr	r2, [pc, #212]	@ (80088bc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80087e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e055      	b.n	80088ac <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f042 0208 	orr.w	r2, r2, #8
 800880e:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008814:	2b01      	cmp	r3, #1
 8008816:	d002      	beq.n	800881e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881a:	025b      	lsls	r3, r3, #9
 800881c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800881e:	f04f 33ff 	mov.w	r3, #4294967295
 8008822:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	025b      	lsls	r3, r3, #9
 8008828:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800882a:	2390      	movs	r3, #144	@ 0x90
 800882c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800882e:	2302      	movs	r3, #2
 8008830:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008832:	2300      	movs	r3, #0
 8008834:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008836:	2301      	movs	r3, #1
 8008838:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f107 0210 	add.w	r2, r7, #16
 8008842:	4611      	mov	r1, r2
 8008844:	4618      	mov	r0, r3
 8008846:	f001 fd7f 	bl	800a348 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d90a      	bls.n	8008866 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2282      	movs	r2, #130	@ 0x82
 8008854:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800885c:	4618      	mov	r0, r3
 800885e:	f001 fde3 	bl	800a428 <SDMMC_CmdReadMultiBlock>
 8008862:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008864:	e009      	b.n	800887a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2281      	movs	r2, #129	@ 0x81
 800886a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008872:	4618      	mov	r0, r3
 8008874:	f001 fdb6 	bl	800a3e4 <SDMMC_CmdReadSingleBlock>
 8008878:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800887a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800887c:	2b00      	cmp	r3, #0
 800887e:	d012      	beq.n	80088a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a0d      	ldr	r2, [pc, #52]	@ (80088bc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008886:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800888c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888e:	431a      	orrs	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e002      	b.n	80088ac <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	e000      	b.n	80088ac <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80088aa:	2302      	movs	r3, #2
  }
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3730      	adds	r7, #48	@ 0x30
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	08009197 	.word	0x08009197
 80088b8:	08009209 	.word	0x08009209
 80088bc:	004005ff 	.word	0x004005ff

080088c0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b08c      	sub	sp, #48	@ 0x30
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
 80088cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d107      	bne.n	80088e8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088dc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e0c6      	b.n	8008a76 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	f040 80bf 	bne.w	8008a74 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80088fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	441a      	add	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008906:	429a      	cmp	r2, r3
 8008908:	d907      	bls.n	800891a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800890e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e0ad      	b.n	8008a76 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2203      	movs	r2, #3
 800891e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2200      	movs	r2, #0
 8008928:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f042 021a 	orr.w	r2, r2, #26
 8008938:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800893e:	4a50      	ldr	r2, [pc, #320]	@ (8008a80 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008940:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008946:	4a4f      	ldr	r2, [pc, #316]	@ (8008a84 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008948:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800894e:	2200      	movs	r2, #0
 8008950:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008956:	2b01      	cmp	r3, #1
 8008958:	d002      	beq.n	8008960 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800895a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895c:	025b      	lsls	r3, r3, #9
 800895e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d90a      	bls.n	800897c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	22a0      	movs	r2, #160	@ 0xa0
 800896a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008972:	4618      	mov	r0, r3
 8008974:	f001 fd9c 	bl	800a4b0 <SDMMC_CmdWriteMultiBlock>
 8008978:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800897a:	e009      	b.n	8008990 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2290      	movs	r2, #144	@ 0x90
 8008980:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008988:	4618      	mov	r0, r3
 800898a:	f001 fd6f 	bl	800a46c <SDMMC_CmdWriteSingleBlock>
 800898e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008992:	2b00      	cmp	r3, #0
 8008994:	d012      	beq.n	80089bc <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a3b      	ldr	r2, [pc, #236]	@ (8008a88 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800899c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a4:	431a      	orrs	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e05c      	b.n	8008a76 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0208 	orr.w	r2, r2, #8
 80089ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089d0:	2240      	movs	r2, #64	@ 0x40
 80089d2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e4:	689a      	ldr	r2, [r3, #8]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80089f4:	68b9      	ldr	r1, [r7, #8]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3380      	adds	r3, #128	@ 0x80
 80089fc:	461a      	mov	r2, r3
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	025b      	lsls	r3, r3, #9
 8008a02:	089b      	lsrs	r3, r3, #2
 8008a04:	f7fc faa8 	bl	8004f58 <HAL_DMA_Start_IT>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d01a      	beq.n	8008a44 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f022 021a 	bic.w	r2, r2, #26
 8008a1c:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a19      	ldr	r2, [pc, #100]	@ (8008a88 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008a24:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a2a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e018      	b.n	8008a76 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a44:	f04f 33ff 	mov.w	r3, #4294967295
 8008a48:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	025b      	lsls	r3, r3, #9
 8008a4e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008a50:	2390      	movs	r3, #144	@ 0x90
 8008a52:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f107 0210 	add.w	r2, r7, #16
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f001 fc6c 	bl	800a348 <SDMMC_ConfigData>

      return HAL_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	e000      	b.n	8008a76 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008a74:	2302      	movs	r3, #2
  }
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3730      	adds	r7, #48	@ 0x30
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	0800916d 	.word	0x0800916d
 8008a84:	08009209 	.word	0x08009209
 8008a88:	004005ff 	.word	0x004005ff

08008a8c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a98:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d008      	beq.n	8008aba <HAL_SD_IRQHandler+0x2e>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f003 0308 	and.w	r3, r3, #8
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d003      	beq.n	8008aba <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fdec 	bl	8009690 <SD_Read_IT>
 8008ab8:	e15a      	b.n	8008d70 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 808d 	beq.w	8008be4 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ad2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	4b9a      	ldr	r3, [pc, #616]	@ (8008d48 <HAL_SD_IRQHandler+0x2bc>)
 8008ae0:	400b      	ands	r3, r1
 8008ae2:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 0201 	bic.w	r2, r2, #1
 8008af2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f003 0308 	and.w	r3, r3, #8
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d039      	beq.n	8008b72 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f003 0302 	and.w	r3, r3, #2
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d104      	bne.n	8008b12 <HAL_SD_IRQHandler+0x86>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f003 0320 	and.w	r3, r3, #32
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d011      	beq.n	8008b36 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f001 fcec 	bl	800a4f4 <SDMMC_CmdStopTransfer>
 8008b1c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d008      	beq.n	8008b36 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f921 	bl	8008d78 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008b3e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d104      	bne.n	8008b62 <HAL_SD_IRQHandler+0xd6>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f003 0302 	and.w	r3, r3, #2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f002 fc76 	bl	800b454 <HAL_SD_RxCpltCallback>
 8008b68:	e102      	b.n	8008d70 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f002 fc68 	bl	800b440 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b70:	e0fe      	b.n	8008d70 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 80f9 	beq.w	8008d70 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f003 0320 	and.w	r3, r3, #32
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d011      	beq.n	8008bac <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 fcb1 	bl	800a4f4 <SDMMC_CmdStopTransfer>
 8008b92:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d008      	beq.n	8008bac <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f8e6 	bl	8008d78 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f040 80dc 	bne.w	8008d70 <HAL_SD_IRQHandler+0x2e4>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f040 80d6 	bne.w	8008d70 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f022 0208 	bic.w	r2, r2, #8
 8008bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f002 fc2f 	bl	800b440 <HAL_SD_TxCpltCallback>
}
 8008be2:	e0c5      	b.n	8008d70 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d008      	beq.n	8008c04 <HAL_SD_IRQHandler+0x178>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f003 0308 	and.w	r3, r3, #8
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d003      	beq.n	8008c04 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fd98 	bl	8009732 <SD_Write_IT>
 8008c02:	e0b5      	b.n	8008d70 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c0a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 80ae 	beq.w	8008d70 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c1a:	f003 0302 	and.w	r3, r3, #2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d005      	beq.n	8008c2e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c26:	f043 0202 	orr.w	r2, r3, #2
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c34:	f003 0308 	and.w	r3, r3, #8
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d005      	beq.n	8008c48 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c40:	f043 0208 	orr.w	r2, r3, #8
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c4e:	f003 0320 	and.w	r3, r3, #32
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d005      	beq.n	8008c62 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c5a:	f043 0220 	orr.w	r2, r3, #32
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c68:	f003 0310 	and.w	r3, r3, #16
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d005      	beq.n	8008c7c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c74:	f043 0210 	orr.w	r2, r3, #16
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008c84:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008c94:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f001 fc2a 	bl	800a4f4 <SDMMC_CmdStopTransfer>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f003 0308 	and.w	r3, r3, #8
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f857 	bl	8008d78 <HAL_SD_ErrorCallback>
}
 8008cca:	e051      	b.n	8008d70 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d04c      	beq.n	8008d70 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f003 0310 	and.w	r3, r3, #16
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d104      	bne.n	8008cea <HAL_SD_IRQHandler+0x25e>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f003 0320 	and.w	r3, r3, #32
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d011      	beq.n	8008d0e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cee:	4a17      	ldr	r2, [pc, #92]	@ (8008d4c <HAL_SD_IRQHandler+0x2c0>)
 8008cf0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fc f9fe 	bl	80050f8 <HAL_DMA_Abort_IT>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d036      	beq.n	8008d70 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 fad0 	bl	80092ac <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008d0c:	e030      	b.n	8008d70 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d104      	bne.n	8008d22 <HAL_SD_IRQHandler+0x296>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f003 0302 	and.w	r3, r3, #2
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d018      	beq.n	8008d54 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d26:	4a0a      	ldr	r2, [pc, #40]	@ (8008d50 <HAL_SD_IRQHandler+0x2c4>)
 8008d28:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fc f9e2 	bl	80050f8 <HAL_DMA_Abort_IT>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d01a      	beq.n	8008d70 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 faeb 	bl	800931a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008d44:	e014      	b.n	8008d70 <HAL_SD_IRQHandler+0x2e4>
 8008d46:	bf00      	nop
 8008d48:	ffff3ec5 	.word	0xffff3ec5
 8008d4c:	080092ad 	.word	0x080092ad
 8008d50:	0800931b 	.word	0x0800931b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f002 fb5f 	bl	800b42c <HAL_SD_AbortCallback>
}
 8008d6e:	e7ff      	b.n	8008d70 <HAL_SD_IRQHandler+0x2e4>
 8008d70:	bf00      	nop
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d9a:	0f9b      	lsrs	r3, r3, #30
 8008d9c:	b2da      	uxtb	r2, r3
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008da6:	0e9b      	lsrs	r3, r3, #26
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	f003 030f 	and.w	r3, r3, #15
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008db8:	0e1b      	lsrs	r3, r3, #24
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	f003 0303 	and.w	r3, r3, #3
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dca:	0c1b      	lsrs	r3, r3, #16
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dd6:	0a1b      	lsrs	r3, r3, #8
 8008dd8:	b2da      	uxtb	r2, r3
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dec:	0d1b      	lsrs	r3, r3, #20
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008df8:	0c1b      	lsrs	r3, r3, #16
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	f003 030f 	and.w	r3, r3, #15
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e0a:	0bdb      	lsrs	r3, r3, #15
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e1c:	0b9b      	lsrs	r3, r3, #14
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	f003 0301 	and.w	r3, r3, #1
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e2e:	0b5b      	lsrs	r3, r3, #13
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e40:	0b1b      	lsrs	r3, r3, #12
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	f003 0301 	and.w	r3, r3, #1
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2200      	movs	r2, #0
 8008e52:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d163      	bne.n	8008f24 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e60:	009a      	lsls	r2, r3, #2
 8008e62:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008e66:	4013      	ands	r3, r2
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008e6c:	0f92      	lsrs	r2, r2, #30
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e78:	0edb      	lsrs	r3, r3, #27
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	f003 0307 	and.w	r3, r3, #7
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e8a:	0e1b      	lsrs	r3, r3, #24
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	f003 0307 	and.w	r3, r3, #7
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e9c:	0d5b      	lsrs	r3, r3, #21
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	f003 0307 	and.w	r3, r3, #7
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eae:	0c9b      	lsrs	r3, r3, #18
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	f003 0307 	and.w	r3, r3, #7
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ec0:	0bdb      	lsrs	r3, r3, #15
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	f003 0307 	and.w	r3, r3, #7
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	1c5a      	adds	r2, r3, #1
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	7e1b      	ldrb	r3, [r3, #24]
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	f003 0307 	and.w	r3, r3, #7
 8008ee2:	3302      	adds	r3, #2
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008eee:	fb03 f202 	mul.w	r2, r3, r2
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	7a1b      	ldrb	r3, [r3, #8]
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	f003 030f 	and.w	r3, r3, #15
 8008f00:	2201      	movs	r2, #1
 8008f02:	409a      	lsls	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008f10:	0a52      	lsrs	r2, r2, #9
 8008f12:	fb03 f202 	mul.w	r2, r3, r2
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f20:	661a      	str	r2, [r3, #96]	@ 0x60
 8008f22:	e031      	b.n	8008f88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d11d      	bne.n	8008f68 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f30:	041b      	lsls	r3, r3, #16
 8008f32:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f3a:	0c1b      	lsrs	r3, r3, #16
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	3301      	adds	r3, #1
 8008f48:	029a      	lsls	r2, r3, #10
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f5c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	661a      	str	r2, [r3, #96]	@ 0x60
 8008f66:	e00f      	b.n	8008f88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a58      	ldr	r2, [pc, #352]	@ (80090d0 <HAL_SD_GetCardCSD+0x344>)
 8008f6e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e09d      	b.n	80090c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f8c:	0b9b      	lsrs	r3, r3, #14
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	b2da      	uxtb	r2, r3
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f9e:	09db      	lsrs	r3, r3, #7
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fc0:	0fdb      	lsrs	r3, r3, #31
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fcc:	0f5b      	lsrs	r3, r3, #29
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	f003 0303 	and.w	r3, r3, #3
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fde:	0e9b      	lsrs	r3, r3, #26
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ff0:	0d9b      	lsrs	r3, r3, #22
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	f003 030f 	and.w	r3, r3, #15
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009002:	0d5b      	lsrs	r3, r3, #21
 8009004:	b2db      	uxtb	r3, r3
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	b2da      	uxtb	r2, r3
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2200      	movs	r2, #0
 8009016:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800901e:	0c1b      	lsrs	r3, r3, #16
 8009020:	b2db      	uxtb	r3, r3
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	b2da      	uxtb	r2, r3
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009032:	0bdb      	lsrs	r3, r3, #15
 8009034:	b2db      	uxtb	r3, r3
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	b2da      	uxtb	r2, r3
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009046:	0b9b      	lsrs	r3, r3, #14
 8009048:	b2db      	uxtb	r3, r3
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	b2da      	uxtb	r2, r3
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800905a:	0b5b      	lsrs	r3, r3, #13
 800905c:	b2db      	uxtb	r3, r3
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	b2da      	uxtb	r2, r3
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800906e:	0b1b      	lsrs	r3, r3, #12
 8009070:	b2db      	uxtb	r3, r3
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	b2da      	uxtb	r2, r3
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009082:	0a9b      	lsrs	r3, r3, #10
 8009084:	b2db      	uxtb	r3, r3
 8009086:	f003 0303 	and.w	r3, r3, #3
 800908a:	b2da      	uxtb	r2, r3
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009096:	0a1b      	lsrs	r3, r3, #8
 8009098:	b2db      	uxtb	r3, r3
 800909a:	f003 0303 	and.w	r3, r3, #3
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090aa:	085b      	lsrs	r3, r3, #1
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	004005ff 	.word	0x004005ff

080090d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009134:	2300      	movs	r3, #0
 8009136:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009138:	f107 030c 	add.w	r3, r7, #12
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fa7e 	bl	8009640 <SD_SendStatus>
 8009144:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d005      	beq.n	8009158 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	431a      	orrs	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	0a5b      	lsrs	r3, r3, #9
 800915c:	f003 030f 	and.w	r3, r3, #15
 8009160:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009162:	693b      	ldr	r3, [r7, #16]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009178:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009188:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800918a:	bf00      	nop
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091a8:	2b82      	cmp	r3, #130	@ 0x82
 80091aa:	d111      	bne.n	80091d0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f001 f99f 	bl	800a4f4 <SDMMC_CmdStopTransfer>
 80091b6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d008      	beq.n	80091d0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	431a      	orrs	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f7ff fdd4 	bl	8008d78 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f022 0208 	bic.w	r2, r2, #8
 80091de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80091e8:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f002 f92b 	bl	800b454 <HAL_SD_RxCpltCallback>
#endif
}
 80091fe:	bf00      	nop
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009214:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7fc f91a 	bl	8005450 <HAL_DMA_GetError>
 800921c:	4603      	mov	r3, r0
 800921e:	2b02      	cmp	r3, #2
 8009220:	d03e      	beq.n	80092a0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009228:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800922e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009230:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d002      	beq.n	800923e <SD_DMAError+0x36>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d12d      	bne.n	800929a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a19      	ldr	r2, [pc, #100]	@ (80092a8 <SD_DMAError+0xa0>)
 8009244:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009254:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009262:	6978      	ldr	r0, [r7, #20]
 8009264:	f7ff ff62 	bl	800912c <HAL_SD_GetCardState>
 8009268:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b06      	cmp	r3, #6
 800926e:	d002      	beq.n	8009276 <SD_DMAError+0x6e>
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2b05      	cmp	r3, #5
 8009274:	d10a      	bne.n	800928c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4618      	mov	r0, r3
 800927c:	f001 f93a 	bl	800a4f4 <SDMMC_CmdStopTransfer>
 8009280:	4602      	mov	r2, r0
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009286:	431a      	orrs	r2, r3
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2200      	movs	r2, #0
 8009298:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800929a:	6978      	ldr	r0, [r7, #20]
 800929c:	f7ff fd6c 	bl	8008d78 <HAL_SD_ErrorCallback>
#endif
  }
}
 80092a0:	bf00      	nop
 80092a2:	3718      	adds	r7, #24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	004005ff 	.word	0x004005ff

080092ac <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f240 523a 	movw	r2, #1338	@ 0x53a
 80092c2:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f7ff ff31 	bl	800912c <HAL_SD_GetCardState>
 80092ca:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	2b06      	cmp	r3, #6
 80092de:	d002      	beq.n	80092e6 <SD_DMATxAbort+0x3a>
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	2b05      	cmp	r3, #5
 80092e4:	d10a      	bne.n	80092fc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f001 f902 	bl	800a4f4 <SDMMC_CmdStopTransfer>
 80092f0:	4602      	mov	r2, r0
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f6:	431a      	orrs	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009300:	2b00      	cmp	r3, #0
 8009302:	d103      	bne.n	800930c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f002 f891 	bl	800b42c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800930a:	e002      	b.n	8009312 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f7ff fd33 	bl	8008d78 <HAL_SD_ErrorCallback>
}
 8009312:	bf00      	nop
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009326:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009330:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f7ff fefa 	bl	800912c <HAL_SD_GetCardState>
 8009338:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	2b06      	cmp	r3, #6
 800934c:	d002      	beq.n	8009354 <SD_DMARxAbort+0x3a>
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2b05      	cmp	r3, #5
 8009352:	d10a      	bne.n	800936a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4618      	mov	r0, r3
 800935a:	f001 f8cb 	bl	800a4f4 <SDMMC_CmdStopTransfer>
 800935e:	4602      	mov	r2, r0
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009364:	431a      	orrs	r2, r3
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936e:	2b00      	cmp	r3, #0
 8009370:	d103      	bne.n	800937a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f002 f85a 	bl	800b42c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009378:	e002      	b.n	8009380 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f7ff fcfc 	bl	8008d78 <HAL_SD_ErrorCallback>
}
 8009380:	bf00      	nop
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009388:	b5b0      	push	{r4, r5, r7, lr}
 800938a:	b094      	sub	sp, #80	@ 0x50
 800938c:	af04      	add	r7, sp, #16
 800938e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009390:	2301      	movs	r3, #1
 8009392:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4618      	mov	r0, r3
 800939a:	f000 ff7d 	bl	800a298 <SDMMC_GetPowerState>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d102      	bne.n	80093aa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093a4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80093a8:	e0b8      	b.n	800951c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d02f      	beq.n	8009412 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f001 f964 	bl	800a684 <SDMMC_CmdSendCID>
 80093bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80093be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <SD_InitCard+0x40>
    {
      return errorstate;
 80093c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c6:	e0a9      	b.n	800951c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2100      	movs	r1, #0
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 ffa7 	bl	800a322 <SDMMC_GetResponse>
 80093d4:	4602      	mov	r2, r0
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2104      	movs	r1, #4
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 ff9e 	bl	800a322 <SDMMC_GetResponse>
 80093e6:	4602      	mov	r2, r0
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2108      	movs	r1, #8
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 ff95 	bl	800a322 <SDMMC_GetResponse>
 80093f8:	4602      	mov	r2, r0
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	210c      	movs	r1, #12
 8009404:	4618      	mov	r0, r3
 8009406:	f000 ff8c 	bl	800a322 <SDMMC_GetResponse>
 800940a:	4602      	mov	r2, r0
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009416:	2b03      	cmp	r3, #3
 8009418:	d00d      	beq.n	8009436 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f107 020e 	add.w	r2, r7, #14
 8009422:	4611      	mov	r1, r2
 8009424:	4618      	mov	r0, r3
 8009426:	f001 f96a 	bl	800a6fe <SDMMC_CmdSetRelAdd>
 800942a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800942c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <SD_InitCard+0xae>
    {
      return errorstate;
 8009432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009434:	e072      	b.n	800951c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800943a:	2b03      	cmp	r3, #3
 800943c:	d036      	beq.n	80094ac <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800943e:	89fb      	ldrh	r3, [r7, #14]
 8009440:	461a      	mov	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800944e:	041b      	lsls	r3, r3, #16
 8009450:	4619      	mov	r1, r3
 8009452:	4610      	mov	r0, r2
 8009454:	f001 f934 	bl	800a6c0 <SDMMC_CmdSendCSD>
 8009458:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800945a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009462:	e05b      	b.n	800951c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2100      	movs	r1, #0
 800946a:	4618      	mov	r0, r3
 800946c:	f000 ff59 	bl	800a322 <SDMMC_GetResponse>
 8009470:	4602      	mov	r2, r0
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2104      	movs	r1, #4
 800947c:	4618      	mov	r0, r3
 800947e:	f000 ff50 	bl	800a322 <SDMMC_GetResponse>
 8009482:	4602      	mov	r2, r0
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2108      	movs	r1, #8
 800948e:	4618      	mov	r0, r3
 8009490:	f000 ff47 	bl	800a322 <SDMMC_GetResponse>
 8009494:	4602      	mov	r2, r0
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	210c      	movs	r1, #12
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 ff3e 	bl	800a322 <SDMMC_GetResponse>
 80094a6:	4602      	mov	r2, r0
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2104      	movs	r1, #4
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 ff35 	bl	800a322 <SDMMC_GetResponse>
 80094b8:	4603      	mov	r3, r0
 80094ba:	0d1a      	lsrs	r2, r3, #20
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80094c0:	f107 0310 	add.w	r3, r7, #16
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7ff fc60 	bl	8008d8c <HAL_SD_GetCardCSD>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d002      	beq.n	80094d8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80094d6:	e021      	b.n	800951c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6819      	ldr	r1, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094e0:	041b      	lsls	r3, r3, #16
 80094e2:	2200      	movs	r2, #0
 80094e4:	461c      	mov	r4, r3
 80094e6:	4615      	mov	r5, r2
 80094e8:	4622      	mov	r2, r4
 80094ea:	462b      	mov	r3, r5
 80094ec:	4608      	mov	r0, r1
 80094ee:	f001 f823 	bl	800a538 <SDMMC_CmdSelDesel>
 80094f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80094f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <SD_InitCard+0x176>
  {
    return errorstate;
 80094fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094fc:	e00e      	b.n	800951c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681d      	ldr	r5, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	466c      	mov	r4, sp
 8009506:	f103 0210 	add.w	r2, r3, #16
 800950a:	ca07      	ldmia	r2, {r0, r1, r2}
 800950c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009510:	3304      	adds	r3, #4
 8009512:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009514:	4628      	mov	r0, r5
 8009516:	f000 fe67 	bl	800a1e8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3740      	adds	r7, #64	@ 0x40
 8009520:	46bd      	mov	sp, r7
 8009522:	bdb0      	pop	{r4, r5, r7, pc}

08009524 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800952c:	2300      	movs	r3, #0
 800952e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009530:	2300      	movs	r3, #0
 8009532:	617b      	str	r3, [r7, #20]
 8009534:	2300      	movs	r3, #0
 8009536:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4618      	mov	r0, r3
 800953e:	f001 f81e 	bl	800a57e <SDMMC_CmdGoIdleState>
 8009542:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <SD_PowerON+0x2a>
  {
    return errorstate;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	e072      	b.n	8009634 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4618      	mov	r0, r3
 8009554:	f001 f831 	bl	800a5ba <SDMMC_CmdOperCond>
 8009558:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00d      	beq.n	800957c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4618      	mov	r0, r3
 800956c:	f001 f807 	bl	800a57e <SDMMC_CmdGoIdleState>
 8009570:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d004      	beq.n	8009582 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	e05b      	b.n	8009634 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009586:	2b01      	cmp	r3, #1
 8009588:	d137      	bne.n	80095fa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2100      	movs	r1, #0
 8009590:	4618      	mov	r0, r3
 8009592:	f001 f831 	bl	800a5f8 <SDMMC_CmdAppCommand>
 8009596:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d02d      	beq.n	80095fa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800959e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80095a2:	e047      	b.n	8009634 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2100      	movs	r1, #0
 80095aa:	4618      	mov	r0, r3
 80095ac:	f001 f824 	bl	800a5f8 <SDMMC_CmdAppCommand>
 80095b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <SD_PowerON+0x98>
    {
      return errorstate;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	e03b      	b.n	8009634 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	491e      	ldr	r1, [pc, #120]	@ (800963c <SD_PowerON+0x118>)
 80095c2:	4618      	mov	r0, r3
 80095c4:	f001 f83a 	bl	800a63c <SDMMC_CmdAppOperCommand>
 80095c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d002      	beq.n	80095d6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095d0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80095d4:	e02e      	b.n	8009634 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2100      	movs	r1, #0
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 fea0 	bl	800a322 <SDMMC_GetResponse>
 80095e2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	0fdb      	lsrs	r3, r3, #31
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d101      	bne.n	80095f0 <SD_PowerON+0xcc>
 80095ec:	2301      	movs	r3, #1
 80095ee:	e000      	b.n	80095f2 <SD_PowerON+0xce>
 80095f0:	2300      	movs	r3, #0
 80095f2:	613b      	str	r3, [r7, #16]

    count++;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	3301      	adds	r3, #1
 80095f8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009600:	4293      	cmp	r3, r2
 8009602:	d802      	bhi.n	800960a <SD_PowerON+0xe6>
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d0cc      	beq.n	80095a4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009610:	4293      	cmp	r3, r2
 8009612:	d902      	bls.n	800961a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009614:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009618:	e00c      	b.n	8009634 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	645a      	str	r2, [r3, #68]	@ 0x44
 800962a:	e002      	b.n	8009632 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3718      	adds	r7, #24
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	c1100000 	.word	0xc1100000

08009640 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d102      	bne.n	8009656 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009650:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009654:	e018      	b.n	8009688 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800965e:	041b      	lsls	r3, r3, #16
 8009660:	4619      	mov	r1, r3
 8009662:	4610      	mov	r0, r2
 8009664:	f001 f86c 	bl	800a740 <SDMMC_CmdSendStatus>
 8009668:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	e009      	b.n	8009688 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2100      	movs	r1, #0
 800967a:	4618      	mov	r0, r3
 800967c:	f000 fe51 	bl	800a322 <SDMMC_GetResponse>
 8009680:	4602      	mov	r2, r0
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d03f      	beq.n	800972a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80096aa:	2300      	movs	r3, #0
 80096ac:	617b      	str	r3, [r7, #20]
 80096ae:	e033      	b.n	8009718 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 fdc3 	bl	800a240 <SDMMC_ReadFIFO>
 80096ba:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	3301      	adds	r3, #1
 80096c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	3b01      	subs	r3, #1
 80096ce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	0a1b      	lsrs	r3, r3, #8
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	3301      	adds	r3, #1
 80096de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	3b01      	subs	r3, #1
 80096e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	0c1b      	lsrs	r3, r3, #16
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	3301      	adds	r3, #1
 80096f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	0e1b      	lsrs	r3, r3, #24
 8009700:	b2da      	uxtb	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	3301      	adds	r3, #1
 800970a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	3b01      	subs	r3, #1
 8009710:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	3301      	adds	r3, #1
 8009716:	617b      	str	r3, [r7, #20]
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	2b07      	cmp	r3, #7
 800971c:	d9c8      	bls.n	80096b0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800972a:	bf00      	nop
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b086      	sub	sp, #24
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009744:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d043      	beq.n	80097d4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800974c:	2300      	movs	r3, #0
 800974e:	617b      	str	r3, [r7, #20]
 8009750:	e037      	b.n	80097c2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	3301      	adds	r3, #1
 800975c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	3b01      	subs	r3, #1
 8009762:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	021a      	lsls	r2, r3, #8
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	4313      	orrs	r3, r2
 800976e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	3301      	adds	r3, #1
 8009774:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	3b01      	subs	r3, #1
 800977a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	041a      	lsls	r2, r3, #16
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	4313      	orrs	r3, r2
 8009786:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	3301      	adds	r3, #1
 800978c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	3b01      	subs	r3, #1
 8009792:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	061a      	lsls	r2, r3, #24
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	4313      	orrs	r3, r2
 800979e:	60bb      	str	r3, [r7, #8]
      tmp++;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3301      	adds	r3, #1
 80097a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f107 0208 	add.w	r2, r7, #8
 80097b4:	4611      	mov	r1, r2
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 fd4f 	bl	800a25a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	3301      	adds	r3, #1
 80097c0:	617b      	str	r3, [r7, #20]
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	2b07      	cmp	r3, #7
 80097c6:	d9c4      	bls.n	8009752 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80097d4:	bf00      	nop
 80097d6:	3718      	adds	r7, #24
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e040      	b.n	8009870 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d106      	bne.n	8009804 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7f8 fed6 	bl	80025b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2224      	movs	r2, #36	@ 0x24
 8009808:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f022 0201 	bic.w	r2, r2, #1
 8009818:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800981e:	2b00      	cmp	r3, #0
 8009820:	d002      	beq.n	8009828 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fb16 	bl	8009e54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f8af 	bl	800998c <UART_SetConfig>
 800982e:	4603      	mov	r3, r0
 8009830:	2b01      	cmp	r3, #1
 8009832:	d101      	bne.n	8009838 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e01b      	b.n	8009870 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	685a      	ldr	r2, [r3, #4]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009846:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689a      	ldr	r2, [r3, #8]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009856:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f042 0201 	orr.w	r2, r2, #1
 8009866:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fb95 	bl	8009f98 <UART_CheckIdleState>
 800986e:	4603      	mov	r3, r0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08a      	sub	sp, #40	@ 0x28
 800987c:	af02      	add	r7, sp, #8
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	4613      	mov	r3, r2
 8009886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800988c:	2b20      	cmp	r3, #32
 800988e:	d177      	bne.n	8009980 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d002      	beq.n	800989c <HAL_UART_Transmit+0x24>
 8009896:	88fb      	ldrh	r3, [r7, #6]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d101      	bne.n	80098a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e070      	b.n	8009982 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2221      	movs	r2, #33	@ 0x21
 80098ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098ae:	f7fb f813 	bl	80048d8 <HAL_GetTick>
 80098b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	88fa      	ldrh	r2, [r7, #6]
 80098b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	88fa      	ldrh	r2, [r7, #6]
 80098c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098cc:	d108      	bne.n	80098e0 <HAL_UART_Transmit+0x68>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d104      	bne.n	80098e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80098d6:	2300      	movs	r3, #0
 80098d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	61bb      	str	r3, [r7, #24]
 80098de:	e003      	b.n	80098e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80098e4:	2300      	movs	r3, #0
 80098e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80098e8:	e02f      	b.n	800994a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	9300      	str	r3, [sp, #0]
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	2200      	movs	r2, #0
 80098f2:	2180      	movs	r1, #128	@ 0x80
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f000 fba6 	bl	800a046 <UART_WaitOnFlagUntilTimeout>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d004      	beq.n	800990a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2220      	movs	r2, #32
 8009904:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e03b      	b.n	8009982 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10b      	bne.n	8009928 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	461a      	mov	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800991e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	3302      	adds	r3, #2
 8009924:	61bb      	str	r3, [r7, #24]
 8009926:	e007      	b.n	8009938 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	781a      	ldrb	r2, [r3, #0]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	3301      	adds	r3, #1
 8009936:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800993e:	b29b      	uxth	r3, r3
 8009940:	3b01      	subs	r3, #1
 8009942:	b29a      	uxth	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009950:	b29b      	uxth	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1c9      	bne.n	80098ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	2200      	movs	r2, #0
 800995e:	2140      	movs	r1, #64	@ 0x40
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 fb70 	bl	800a046 <UART_WaitOnFlagUntilTimeout>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d004      	beq.n	8009976 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2220      	movs	r2, #32
 8009970:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e005      	b.n	8009982 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2220      	movs	r2, #32
 800997a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	e000      	b.n	8009982 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009980:	2302      	movs	r3, #2
  }
}
 8009982:	4618      	mov	r0, r3
 8009984:	3720      	adds	r7, #32
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
	...

0800998c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b088      	sub	sp, #32
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	689a      	ldr	r2, [r3, #8]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	431a      	orrs	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	431a      	orrs	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	69db      	ldr	r3, [r3, #28]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	4ba6      	ldr	r3, [pc, #664]	@ (8009c50 <UART_SetConfig+0x2c4>)
 80099b8:	4013      	ands	r3, r2
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	6812      	ldr	r2, [r2, #0]
 80099be:	6979      	ldr	r1, [r7, #20]
 80099c0:	430b      	orrs	r3, r1
 80099c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	68da      	ldr	r2, [r3, #12]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	430a      	orrs	r2, r1
 80099d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	430a      	orrs	r2, r1
 80099fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a94      	ldr	r2, [pc, #592]	@ (8009c54 <UART_SetConfig+0x2c8>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d120      	bne.n	8009a4a <UART_SetConfig+0xbe>
 8009a08:	4b93      	ldr	r3, [pc, #588]	@ (8009c58 <UART_SetConfig+0x2cc>)
 8009a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a0e:	f003 0303 	and.w	r3, r3, #3
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d816      	bhi.n	8009a44 <UART_SetConfig+0xb8>
 8009a16:	a201      	add	r2, pc, #4	@ (adr r2, 8009a1c <UART_SetConfig+0x90>)
 8009a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1c:	08009a2d 	.word	0x08009a2d
 8009a20:	08009a39 	.word	0x08009a39
 8009a24:	08009a33 	.word	0x08009a33
 8009a28:	08009a3f 	.word	0x08009a3f
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	77fb      	strb	r3, [r7, #31]
 8009a30:	e150      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009a32:	2302      	movs	r3, #2
 8009a34:	77fb      	strb	r3, [r7, #31]
 8009a36:	e14d      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009a38:	2304      	movs	r3, #4
 8009a3a:	77fb      	strb	r3, [r7, #31]
 8009a3c:	e14a      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009a3e:	2308      	movs	r3, #8
 8009a40:	77fb      	strb	r3, [r7, #31]
 8009a42:	e147      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009a44:	2310      	movs	r3, #16
 8009a46:	77fb      	strb	r3, [r7, #31]
 8009a48:	e144      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a83      	ldr	r2, [pc, #524]	@ (8009c5c <UART_SetConfig+0x2d0>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d132      	bne.n	8009aba <UART_SetConfig+0x12e>
 8009a54:	4b80      	ldr	r3, [pc, #512]	@ (8009c58 <UART_SetConfig+0x2cc>)
 8009a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a5a:	f003 030c 	and.w	r3, r3, #12
 8009a5e:	2b0c      	cmp	r3, #12
 8009a60:	d828      	bhi.n	8009ab4 <UART_SetConfig+0x128>
 8009a62:	a201      	add	r2, pc, #4	@ (adr r2, 8009a68 <UART_SetConfig+0xdc>)
 8009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a68:	08009a9d 	.word	0x08009a9d
 8009a6c:	08009ab5 	.word	0x08009ab5
 8009a70:	08009ab5 	.word	0x08009ab5
 8009a74:	08009ab5 	.word	0x08009ab5
 8009a78:	08009aa9 	.word	0x08009aa9
 8009a7c:	08009ab5 	.word	0x08009ab5
 8009a80:	08009ab5 	.word	0x08009ab5
 8009a84:	08009ab5 	.word	0x08009ab5
 8009a88:	08009aa3 	.word	0x08009aa3
 8009a8c:	08009ab5 	.word	0x08009ab5
 8009a90:	08009ab5 	.word	0x08009ab5
 8009a94:	08009ab5 	.word	0x08009ab5
 8009a98:	08009aaf 	.word	0x08009aaf
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	77fb      	strb	r3, [r7, #31]
 8009aa0:	e118      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	77fb      	strb	r3, [r7, #31]
 8009aa6:	e115      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009aa8:	2304      	movs	r3, #4
 8009aaa:	77fb      	strb	r3, [r7, #31]
 8009aac:	e112      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009aae:	2308      	movs	r3, #8
 8009ab0:	77fb      	strb	r3, [r7, #31]
 8009ab2:	e10f      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009ab4:	2310      	movs	r3, #16
 8009ab6:	77fb      	strb	r3, [r7, #31]
 8009ab8:	e10c      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a68      	ldr	r2, [pc, #416]	@ (8009c60 <UART_SetConfig+0x2d4>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d120      	bne.n	8009b06 <UART_SetConfig+0x17a>
 8009ac4:	4b64      	ldr	r3, [pc, #400]	@ (8009c58 <UART_SetConfig+0x2cc>)
 8009ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009ace:	2b30      	cmp	r3, #48	@ 0x30
 8009ad0:	d013      	beq.n	8009afa <UART_SetConfig+0x16e>
 8009ad2:	2b30      	cmp	r3, #48	@ 0x30
 8009ad4:	d814      	bhi.n	8009b00 <UART_SetConfig+0x174>
 8009ad6:	2b20      	cmp	r3, #32
 8009ad8:	d009      	beq.n	8009aee <UART_SetConfig+0x162>
 8009ada:	2b20      	cmp	r3, #32
 8009adc:	d810      	bhi.n	8009b00 <UART_SetConfig+0x174>
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d002      	beq.n	8009ae8 <UART_SetConfig+0x15c>
 8009ae2:	2b10      	cmp	r3, #16
 8009ae4:	d006      	beq.n	8009af4 <UART_SetConfig+0x168>
 8009ae6:	e00b      	b.n	8009b00 <UART_SetConfig+0x174>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	77fb      	strb	r3, [r7, #31]
 8009aec:	e0f2      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009aee:	2302      	movs	r3, #2
 8009af0:	77fb      	strb	r3, [r7, #31]
 8009af2:	e0ef      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009af4:	2304      	movs	r3, #4
 8009af6:	77fb      	strb	r3, [r7, #31]
 8009af8:	e0ec      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009afa:	2308      	movs	r3, #8
 8009afc:	77fb      	strb	r3, [r7, #31]
 8009afe:	e0e9      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009b00:	2310      	movs	r3, #16
 8009b02:	77fb      	strb	r3, [r7, #31]
 8009b04:	e0e6      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a56      	ldr	r2, [pc, #344]	@ (8009c64 <UART_SetConfig+0x2d8>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d120      	bne.n	8009b52 <UART_SetConfig+0x1c6>
 8009b10:	4b51      	ldr	r3, [pc, #324]	@ (8009c58 <UART_SetConfig+0x2cc>)
 8009b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009b1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b1c:	d013      	beq.n	8009b46 <UART_SetConfig+0x1ba>
 8009b1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b20:	d814      	bhi.n	8009b4c <UART_SetConfig+0x1c0>
 8009b22:	2b80      	cmp	r3, #128	@ 0x80
 8009b24:	d009      	beq.n	8009b3a <UART_SetConfig+0x1ae>
 8009b26:	2b80      	cmp	r3, #128	@ 0x80
 8009b28:	d810      	bhi.n	8009b4c <UART_SetConfig+0x1c0>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d002      	beq.n	8009b34 <UART_SetConfig+0x1a8>
 8009b2e:	2b40      	cmp	r3, #64	@ 0x40
 8009b30:	d006      	beq.n	8009b40 <UART_SetConfig+0x1b4>
 8009b32:	e00b      	b.n	8009b4c <UART_SetConfig+0x1c0>
 8009b34:	2300      	movs	r3, #0
 8009b36:	77fb      	strb	r3, [r7, #31]
 8009b38:	e0cc      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	77fb      	strb	r3, [r7, #31]
 8009b3e:	e0c9      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009b40:	2304      	movs	r3, #4
 8009b42:	77fb      	strb	r3, [r7, #31]
 8009b44:	e0c6      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009b46:	2308      	movs	r3, #8
 8009b48:	77fb      	strb	r3, [r7, #31]
 8009b4a:	e0c3      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009b4c:	2310      	movs	r3, #16
 8009b4e:	77fb      	strb	r3, [r7, #31]
 8009b50:	e0c0      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a44      	ldr	r2, [pc, #272]	@ (8009c68 <UART_SetConfig+0x2dc>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d125      	bne.n	8009ba8 <UART_SetConfig+0x21c>
 8009b5c:	4b3e      	ldr	r3, [pc, #248]	@ (8009c58 <UART_SetConfig+0x2cc>)
 8009b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b6a:	d017      	beq.n	8009b9c <UART_SetConfig+0x210>
 8009b6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b70:	d817      	bhi.n	8009ba2 <UART_SetConfig+0x216>
 8009b72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b76:	d00b      	beq.n	8009b90 <UART_SetConfig+0x204>
 8009b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b7c:	d811      	bhi.n	8009ba2 <UART_SetConfig+0x216>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <UART_SetConfig+0x1fe>
 8009b82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b86:	d006      	beq.n	8009b96 <UART_SetConfig+0x20a>
 8009b88:	e00b      	b.n	8009ba2 <UART_SetConfig+0x216>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	77fb      	strb	r3, [r7, #31]
 8009b8e:	e0a1      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009b90:	2302      	movs	r3, #2
 8009b92:	77fb      	strb	r3, [r7, #31]
 8009b94:	e09e      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009b96:	2304      	movs	r3, #4
 8009b98:	77fb      	strb	r3, [r7, #31]
 8009b9a:	e09b      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009b9c:	2308      	movs	r3, #8
 8009b9e:	77fb      	strb	r3, [r7, #31]
 8009ba0:	e098      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009ba2:	2310      	movs	r3, #16
 8009ba4:	77fb      	strb	r3, [r7, #31]
 8009ba6:	e095      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a2f      	ldr	r2, [pc, #188]	@ (8009c6c <UART_SetConfig+0x2e0>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d125      	bne.n	8009bfe <UART_SetConfig+0x272>
 8009bb2:	4b29      	ldr	r3, [pc, #164]	@ (8009c58 <UART_SetConfig+0x2cc>)
 8009bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009bbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bc0:	d017      	beq.n	8009bf2 <UART_SetConfig+0x266>
 8009bc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bc6:	d817      	bhi.n	8009bf8 <UART_SetConfig+0x26c>
 8009bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bcc:	d00b      	beq.n	8009be6 <UART_SetConfig+0x25a>
 8009bce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bd2:	d811      	bhi.n	8009bf8 <UART_SetConfig+0x26c>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d003      	beq.n	8009be0 <UART_SetConfig+0x254>
 8009bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bdc:	d006      	beq.n	8009bec <UART_SetConfig+0x260>
 8009bde:	e00b      	b.n	8009bf8 <UART_SetConfig+0x26c>
 8009be0:	2301      	movs	r3, #1
 8009be2:	77fb      	strb	r3, [r7, #31]
 8009be4:	e076      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009be6:	2302      	movs	r3, #2
 8009be8:	77fb      	strb	r3, [r7, #31]
 8009bea:	e073      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009bec:	2304      	movs	r3, #4
 8009bee:	77fb      	strb	r3, [r7, #31]
 8009bf0:	e070      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009bf2:	2308      	movs	r3, #8
 8009bf4:	77fb      	strb	r3, [r7, #31]
 8009bf6:	e06d      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009bf8:	2310      	movs	r3, #16
 8009bfa:	77fb      	strb	r3, [r7, #31]
 8009bfc:	e06a      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a1b      	ldr	r2, [pc, #108]	@ (8009c70 <UART_SetConfig+0x2e4>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d138      	bne.n	8009c7a <UART_SetConfig+0x2ee>
 8009c08:	4b13      	ldr	r3, [pc, #76]	@ (8009c58 <UART_SetConfig+0x2cc>)
 8009c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c0e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009c12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c16:	d017      	beq.n	8009c48 <UART_SetConfig+0x2bc>
 8009c18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c1c:	d82a      	bhi.n	8009c74 <UART_SetConfig+0x2e8>
 8009c1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c22:	d00b      	beq.n	8009c3c <UART_SetConfig+0x2b0>
 8009c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c28:	d824      	bhi.n	8009c74 <UART_SetConfig+0x2e8>
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <UART_SetConfig+0x2aa>
 8009c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c32:	d006      	beq.n	8009c42 <UART_SetConfig+0x2b6>
 8009c34:	e01e      	b.n	8009c74 <UART_SetConfig+0x2e8>
 8009c36:	2300      	movs	r3, #0
 8009c38:	77fb      	strb	r3, [r7, #31]
 8009c3a:	e04b      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	77fb      	strb	r3, [r7, #31]
 8009c40:	e048      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009c42:	2304      	movs	r3, #4
 8009c44:	77fb      	strb	r3, [r7, #31]
 8009c46:	e045      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009c48:	2308      	movs	r3, #8
 8009c4a:	77fb      	strb	r3, [r7, #31]
 8009c4c:	e042      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009c4e:	bf00      	nop
 8009c50:	efff69f3 	.word	0xefff69f3
 8009c54:	40011000 	.word	0x40011000
 8009c58:	40023800 	.word	0x40023800
 8009c5c:	40004400 	.word	0x40004400
 8009c60:	40004800 	.word	0x40004800
 8009c64:	40004c00 	.word	0x40004c00
 8009c68:	40005000 	.word	0x40005000
 8009c6c:	40011400 	.word	0x40011400
 8009c70:	40007800 	.word	0x40007800
 8009c74:	2310      	movs	r3, #16
 8009c76:	77fb      	strb	r3, [r7, #31]
 8009c78:	e02c      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a72      	ldr	r2, [pc, #456]	@ (8009e48 <UART_SetConfig+0x4bc>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d125      	bne.n	8009cd0 <UART_SetConfig+0x344>
 8009c84:	4b71      	ldr	r3, [pc, #452]	@ (8009e4c <UART_SetConfig+0x4c0>)
 8009c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c8a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009c8e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009c92:	d017      	beq.n	8009cc4 <UART_SetConfig+0x338>
 8009c94:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009c98:	d817      	bhi.n	8009cca <UART_SetConfig+0x33e>
 8009c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c9e:	d00b      	beq.n	8009cb8 <UART_SetConfig+0x32c>
 8009ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ca4:	d811      	bhi.n	8009cca <UART_SetConfig+0x33e>
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d003      	beq.n	8009cb2 <UART_SetConfig+0x326>
 8009caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cae:	d006      	beq.n	8009cbe <UART_SetConfig+0x332>
 8009cb0:	e00b      	b.n	8009cca <UART_SetConfig+0x33e>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	77fb      	strb	r3, [r7, #31]
 8009cb6:	e00d      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009cb8:	2302      	movs	r3, #2
 8009cba:	77fb      	strb	r3, [r7, #31]
 8009cbc:	e00a      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009cbe:	2304      	movs	r3, #4
 8009cc0:	77fb      	strb	r3, [r7, #31]
 8009cc2:	e007      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009cc4:	2308      	movs	r3, #8
 8009cc6:	77fb      	strb	r3, [r7, #31]
 8009cc8:	e004      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009cca:	2310      	movs	r3, #16
 8009ccc:	77fb      	strb	r3, [r7, #31]
 8009cce:	e001      	b.n	8009cd4 <UART_SetConfig+0x348>
 8009cd0:	2310      	movs	r3, #16
 8009cd2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	69db      	ldr	r3, [r3, #28]
 8009cd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cdc:	d15b      	bne.n	8009d96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009cde:	7ffb      	ldrb	r3, [r7, #31]
 8009ce0:	2b08      	cmp	r3, #8
 8009ce2:	d828      	bhi.n	8009d36 <UART_SetConfig+0x3aa>
 8009ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8009cec <UART_SetConfig+0x360>)
 8009ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cea:	bf00      	nop
 8009cec:	08009d11 	.word	0x08009d11
 8009cf0:	08009d19 	.word	0x08009d19
 8009cf4:	08009d21 	.word	0x08009d21
 8009cf8:	08009d37 	.word	0x08009d37
 8009cfc:	08009d27 	.word	0x08009d27
 8009d00:	08009d37 	.word	0x08009d37
 8009d04:	08009d37 	.word	0x08009d37
 8009d08:	08009d37 	.word	0x08009d37
 8009d0c:	08009d2f 	.word	0x08009d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d10:	f7fd fa36 	bl	8007180 <HAL_RCC_GetPCLK1Freq>
 8009d14:	61b8      	str	r0, [r7, #24]
        break;
 8009d16:	e013      	b.n	8009d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d18:	f7fd fa46 	bl	80071a8 <HAL_RCC_GetPCLK2Freq>
 8009d1c:	61b8      	str	r0, [r7, #24]
        break;
 8009d1e:	e00f      	b.n	8009d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d20:	4b4b      	ldr	r3, [pc, #300]	@ (8009e50 <UART_SetConfig+0x4c4>)
 8009d22:	61bb      	str	r3, [r7, #24]
        break;
 8009d24:	e00c      	b.n	8009d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d26:	f7fd f959 	bl	8006fdc <HAL_RCC_GetSysClockFreq>
 8009d2a:	61b8      	str	r0, [r7, #24]
        break;
 8009d2c:	e008      	b.n	8009d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d32:	61bb      	str	r3, [r7, #24]
        break;
 8009d34:	e004      	b.n	8009d40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009d36:	2300      	movs	r3, #0
 8009d38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	77bb      	strb	r3, [r7, #30]
        break;
 8009d3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d074      	beq.n	8009e30 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	005a      	lsls	r2, r3, #1
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	085b      	lsrs	r3, r3, #1
 8009d50:	441a      	add	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	2b0f      	cmp	r3, #15
 8009d60:	d916      	bls.n	8009d90 <UART_SetConfig+0x404>
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d68:	d212      	bcs.n	8009d90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	f023 030f 	bic.w	r3, r3, #15
 8009d72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	085b      	lsrs	r3, r3, #1
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	f003 0307 	and.w	r3, r3, #7
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	89fb      	ldrh	r3, [r7, #14]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	89fa      	ldrh	r2, [r7, #14]
 8009d8c:	60da      	str	r2, [r3, #12]
 8009d8e:	e04f      	b.n	8009e30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	77bb      	strb	r3, [r7, #30]
 8009d94:	e04c      	b.n	8009e30 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d96:	7ffb      	ldrb	r3, [r7, #31]
 8009d98:	2b08      	cmp	r3, #8
 8009d9a:	d828      	bhi.n	8009dee <UART_SetConfig+0x462>
 8009d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009da4 <UART_SetConfig+0x418>)
 8009d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da2:	bf00      	nop
 8009da4:	08009dc9 	.word	0x08009dc9
 8009da8:	08009dd1 	.word	0x08009dd1
 8009dac:	08009dd9 	.word	0x08009dd9
 8009db0:	08009def 	.word	0x08009def
 8009db4:	08009ddf 	.word	0x08009ddf
 8009db8:	08009def 	.word	0x08009def
 8009dbc:	08009def 	.word	0x08009def
 8009dc0:	08009def 	.word	0x08009def
 8009dc4:	08009de7 	.word	0x08009de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dc8:	f7fd f9da 	bl	8007180 <HAL_RCC_GetPCLK1Freq>
 8009dcc:	61b8      	str	r0, [r7, #24]
        break;
 8009dce:	e013      	b.n	8009df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dd0:	f7fd f9ea 	bl	80071a8 <HAL_RCC_GetPCLK2Freq>
 8009dd4:	61b8      	str	r0, [r7, #24]
        break;
 8009dd6:	e00f      	b.n	8009df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8009e50 <UART_SetConfig+0x4c4>)
 8009dda:	61bb      	str	r3, [r7, #24]
        break;
 8009ddc:	e00c      	b.n	8009df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dde:	f7fd f8fd 	bl	8006fdc <HAL_RCC_GetSysClockFreq>
 8009de2:	61b8      	str	r0, [r7, #24]
        break;
 8009de4:	e008      	b.n	8009df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dea:	61bb      	str	r3, [r7, #24]
        break;
 8009dec:	e004      	b.n	8009df8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009dee:	2300      	movs	r3, #0
 8009df0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	77bb      	strb	r3, [r7, #30]
        break;
 8009df6:	bf00      	nop
    }

    if (pclk != 0U)
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d018      	beq.n	8009e30 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	085a      	lsrs	r2, r3, #1
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	441a      	add	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	2b0f      	cmp	r3, #15
 8009e16:	d909      	bls.n	8009e2c <UART_SetConfig+0x4a0>
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e1e:	d205      	bcs.n	8009e2c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	60da      	str	r2, [r3, #12]
 8009e2a:	e001      	b.n	8009e30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009e3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3720      	adds	r7, #32
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	40007c00 	.word	0x40007c00
 8009e4c:	40023800 	.word	0x40023800
 8009e50:	00f42400 	.word	0x00f42400

08009e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e60:	f003 0308 	and.w	r3, r3, #8
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00a      	beq.n	8009e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	430a      	orrs	r2, r1
 8009e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e82:	f003 0301 	and.w	r3, r3, #1
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00a      	beq.n	8009ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	430a      	orrs	r2, r1
 8009e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea4:	f003 0302 	and.w	r3, r3, #2
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00a      	beq.n	8009ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	430a      	orrs	r2, r1
 8009ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec6:	f003 0304 	and.w	r3, r3, #4
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00a      	beq.n	8009ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee8:	f003 0310 	and.w	r3, r3, #16
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00a      	beq.n	8009f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f0a:	f003 0320 	and.w	r3, r3, #32
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00a      	beq.n	8009f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	430a      	orrs	r2, r1
 8009f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d01a      	beq.n	8009f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	430a      	orrs	r2, r1
 8009f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f52:	d10a      	bne.n	8009f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00a      	beq.n	8009f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	430a      	orrs	r2, r1
 8009f8a:	605a      	str	r2, [r3, #4]
  }
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b08c      	sub	sp, #48	@ 0x30
 8009f9c:	af02      	add	r7, sp, #8
 8009f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fa8:	f7fa fc96 	bl	80048d8 <HAL_GetTick>
 8009fac:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 0308 	and.w	r3, r3, #8
 8009fb8:	2b08      	cmp	r3, #8
 8009fba:	d12e      	bne.n	800a01a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f83b 	bl	800a046 <UART_WaitOnFlagUntilTimeout>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d021      	beq.n	800a01a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	e853 3f00 	ldrex	r3, [r3]
 8009fe2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fea:	623b      	str	r3, [r7, #32]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	61fb      	str	r3, [r7, #28]
 8009ff6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff8:	69b9      	ldr	r1, [r7, #24]
 8009ffa:	69fa      	ldr	r2, [r7, #28]
 8009ffc:	e841 2300 	strex	r3, r2, [r1]
 800a000:	617b      	str	r3, [r7, #20]
   return(result);
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1e6      	bne.n	8009fd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2220      	movs	r2, #32
 800a00c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e011      	b.n	800a03e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2220      	movs	r2, #32
 800a01e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2220      	movs	r2, #32
 800a024:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3728      	adds	r7, #40	@ 0x28
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b084      	sub	sp, #16
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	60f8      	str	r0, [r7, #12]
 800a04e:	60b9      	str	r1, [r7, #8]
 800a050:	603b      	str	r3, [r7, #0]
 800a052:	4613      	mov	r3, r2
 800a054:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a056:	e04f      	b.n	800a0f8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05e:	d04b      	beq.n	800a0f8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a060:	f7fa fc3a 	bl	80048d8 <HAL_GetTick>
 800a064:	4602      	mov	r2, r0
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	69ba      	ldr	r2, [r7, #24]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d302      	bcc.n	800a076 <UART_WaitOnFlagUntilTimeout+0x30>
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a076:	2303      	movs	r3, #3
 800a078:	e04e      	b.n	800a118 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0304 	and.w	r3, r3, #4
 800a084:	2b00      	cmp	r3, #0
 800a086:	d037      	beq.n	800a0f8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	2b80      	cmp	r3, #128	@ 0x80
 800a08c:	d034      	beq.n	800a0f8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2b40      	cmp	r3, #64	@ 0x40
 800a092:	d031      	beq.n	800a0f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	f003 0308 	and.w	r3, r3, #8
 800a09e:	2b08      	cmp	r3, #8
 800a0a0:	d110      	bne.n	800a0c4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2208      	movs	r2, #8
 800a0a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f000 f838 	bl	800a120 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2208      	movs	r2, #8
 800a0b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e029      	b.n	800a118 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	69db      	ldr	r3, [r3, #28]
 800a0ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0d2:	d111      	bne.n	800a0f8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a0dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f000 f81e 	bl	800a120 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2220      	movs	r2, #32
 800a0e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	e00f      	b.n	800a118 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	69da      	ldr	r2, [r3, #28]
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	4013      	ands	r3, r2
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	429a      	cmp	r2, r3
 800a106:	bf0c      	ite	eq
 800a108:	2301      	moveq	r3, #1
 800a10a:	2300      	movne	r3, #0
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	461a      	mov	r2, r3
 800a110:	79fb      	ldrb	r3, [r7, #7]
 800a112:	429a      	cmp	r2, r3
 800a114:	d0a0      	beq.n	800a058 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a120:	b480      	push	{r7}
 800a122:	b095      	sub	sp, #84	@ 0x54
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a130:	e853 3f00 	ldrex	r3, [r3]
 800a134:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a138:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a13c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	461a      	mov	r2, r3
 800a144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a146:	643b      	str	r3, [r7, #64]	@ 0x40
 800a148:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a14c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a14e:	e841 2300 	strex	r3, r2, [r1]
 800a152:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1e6      	bne.n	800a128 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	3308      	adds	r3, #8
 800a160:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	e853 3f00 	ldrex	r3, [r3]
 800a168:	61fb      	str	r3, [r7, #28]
   return(result);
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	f023 0301 	bic.w	r3, r3, #1
 800a170:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3308      	adds	r3, #8
 800a178:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a17a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a17c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a180:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a182:	e841 2300 	strex	r3, r2, [r1]
 800a186:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1e5      	bne.n	800a15a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a192:	2b01      	cmp	r3, #1
 800a194:	d118      	bne.n	800a1c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	e853 3f00 	ldrex	r3, [r3]
 800a1a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	f023 0310 	bic.w	r3, r3, #16
 800a1aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1b4:	61bb      	str	r3, [r7, #24]
 800a1b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b8:	6979      	ldr	r1, [r7, #20]
 800a1ba:	69ba      	ldr	r2, [r7, #24]
 800a1bc:	e841 2300 	strex	r3, r2, [r1]
 800a1c0:	613b      	str	r3, [r7, #16]
   return(result);
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e6      	bne.n	800a196 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2220      	movs	r2, #32
 800a1cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a1dc:	bf00      	nop
 800a1de:	3754      	adds	r7, #84	@ 0x54
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	b480      	push	{r7}
 800a1ec:	b085      	sub	sp, #20
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	f107 001c 	add.w	r0, r7, #28
 800a1f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a1fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a200:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a202:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a206:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a20a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a20e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a212:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	4313      	orrs	r3, r2
 800a218:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	4b07      	ldr	r3, [pc, #28]	@ (800a23c <SDMMC_Init+0x54>)
 800a220:	4013      	ands	r3, r2
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	431a      	orrs	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	b004      	add	sp, #16
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	ffff8100 	.word	0xffff8100

0800a240 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a24e:	4618      	mov	r0, r3
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2203      	movs	r2, #3
 800a288:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0303 	and.w	r3, r3, #3
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2d2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a2d8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a2de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68da      	ldr	r2, [r3, #12]
 800a2ea:	4b06      	ldr	r3, [pc, #24]	@ (800a304 <SDMMC_SendCommand+0x50>)
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	431a      	orrs	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	fffff000 	.word	0xfffff000

0800a308 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	b2db      	uxtb	r3, r3
}
 800a316:	4618      	mov	r0, r3
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a322:	b480      	push	{r7}
 800a324:	b085      	sub	sp, #20
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	3314      	adds	r3, #20
 800a330:	461a      	mov	r2, r3
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	4413      	add	r3, r2
 800a336:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
}  
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685a      	ldr	r2, [r3, #4]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a36e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a374:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a37a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	4313      	orrs	r3, r2
 800a380:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a386:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	431a      	orrs	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a392:	2300      	movs	r3, #0

}
 800a394:	4618      	mov	r0, r3
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b088      	sub	sp, #32
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a3ae:	2310      	movs	r3, #16
 800a3b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3b2:	2340      	movs	r3, #64	@ 0x40
 800a3b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3c0:	f107 0308 	add.w	r3, r7, #8
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f7ff ff74 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a3cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3d0:	2110      	movs	r1, #16
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f9d6 	bl	800a784 <SDMMC_GetCmdResp1>
 800a3d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3da:	69fb      	ldr	r3, [r7, #28]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3720      	adds	r7, #32
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a3f2:	2311      	movs	r3, #17
 800a3f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3f6:	2340      	movs	r3, #64	@ 0x40
 800a3f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a402:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a404:	f107 0308 	add.w	r3, r7, #8
 800a408:	4619      	mov	r1, r3
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7ff ff52 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a410:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a414:	2111      	movs	r1, #17
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f9b4 	bl	800a784 <SDMMC_GetCmdResp1>
 800a41c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a41e:	69fb      	ldr	r3, [r7, #28]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3720      	adds	r7, #32
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b088      	sub	sp, #32
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a436:	2312      	movs	r3, #18
 800a438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a43a:	2340      	movs	r3, #64	@ 0x40
 800a43c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a43e:	2300      	movs	r3, #0
 800a440:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a442:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a446:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a448:	f107 0308 	add.w	r3, r7, #8
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7ff ff30 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a454:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a458:	2112      	movs	r1, #18
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f992 	bl	800a784 <SDMMC_GetCmdResp1>
 800a460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a462:	69fb      	ldr	r3, [r7, #28]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3720      	adds	r7, #32
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b088      	sub	sp, #32
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a47a:	2318      	movs	r3, #24
 800a47c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a47e:	2340      	movs	r3, #64	@ 0x40
 800a480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a482:	2300      	movs	r3, #0
 800a484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a48a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a48c:	f107 0308 	add.w	r3, r7, #8
 800a490:	4619      	mov	r1, r3
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7ff ff0e 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a49c:	2118      	movs	r1, #24
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f970 	bl	800a784 <SDMMC_GetCmdResp1>
 800a4a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4a6:	69fb      	ldr	r3, [r7, #28]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3720      	adds	r7, #32
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b088      	sub	sp, #32
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a4be:	2319      	movs	r3, #25
 800a4c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4c2:	2340      	movs	r3, #64	@ 0x40
 800a4c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4d0:	f107 0308 	add.w	r3, r7, #8
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7ff feec 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a4dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4e0:	2119      	movs	r1, #25
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f94e 	bl	800a784 <SDMMC_GetCmdResp1>
 800a4e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4ea:	69fb      	ldr	r3, [r7, #28]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3720      	adds	r7, #32
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a500:	230c      	movs	r3, #12
 800a502:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a504:	2340      	movs	r3, #64	@ 0x40
 800a506:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a508:	2300      	movs	r3, #0
 800a50a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a50c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a510:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a512:	f107 0308 	add.w	r3, r7, #8
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7ff fecb 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a51e:	4a05      	ldr	r2, [pc, #20]	@ (800a534 <SDMMC_CmdStopTransfer+0x40>)
 800a520:	210c      	movs	r1, #12
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f92e 	bl	800a784 <SDMMC_GetCmdResp1>
 800a528:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a52a:	69fb      	ldr	r3, [r7, #28]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3720      	adds	r7, #32
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	05f5e100 	.word	0x05f5e100

0800a538 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08a      	sub	sp, #40	@ 0x28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a548:	2307      	movs	r3, #7
 800a54a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a54c:	2340      	movs	r3, #64	@ 0x40
 800a54e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a550:	2300      	movs	r3, #0
 800a552:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a554:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a558:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a55a:	f107 0310 	add.w	r3, r7, #16
 800a55e:	4619      	mov	r1, r3
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f7ff fea7 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a56a:	2107      	movs	r1, #7
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f000 f909 	bl	800a784 <SDMMC_GetCmdResp1>
 800a572:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a576:	4618      	mov	r0, r3
 800a578:	3728      	adds	r7, #40	@ 0x28
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b088      	sub	sp, #32
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a586:	2300      	movs	r3, #0
 800a588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a58a:	2300      	movs	r3, #0
 800a58c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a58e:	2300      	movs	r3, #0
 800a590:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a592:	2300      	movs	r3, #0
 800a594:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a59a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a59c:	f107 0308 	add.w	r3, r7, #8
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7ff fe86 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fb23 	bl	800abf4 <SDMMC_GetCmdError>
 800a5ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5b0:	69fb      	ldr	r3, [r7, #28]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3720      	adds	r7, #32
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b088      	sub	sp, #32
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a5c2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a5c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a5c8:	2308      	movs	r3, #8
 800a5ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5cc:	2340      	movs	r3, #64	@ 0x40
 800a5ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5da:	f107 0308 	add.w	r3, r7, #8
 800a5de:	4619      	mov	r1, r3
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f7ff fe67 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fab6 	bl	800ab58 <SDMMC_GetCmdResp7>
 800a5ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5ee:	69fb      	ldr	r3, [r7, #28]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3720      	adds	r7, #32
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b088      	sub	sp, #32
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a606:	2337      	movs	r3, #55	@ 0x37
 800a608:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a60a:	2340      	movs	r3, #64	@ 0x40
 800a60c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a60e:	2300      	movs	r3, #0
 800a610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a616:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a618:	f107 0308 	add.w	r3, r7, #8
 800a61c:	4619      	mov	r1, r3
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7ff fe48 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a624:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a628:	2137      	movs	r1, #55	@ 0x37
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f8aa 	bl	800a784 <SDMMC_GetCmdResp1>
 800a630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a632:	69fb      	ldr	r3, [r7, #28]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3720      	adds	r7, #32
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b088      	sub	sp, #32
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	4b0d      	ldr	r3, [pc, #52]	@ (800a680 <SDMMC_CmdAppOperCommand+0x44>)
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a64e:	2329      	movs	r3, #41	@ 0x29
 800a650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a652:	2340      	movs	r3, #64	@ 0x40
 800a654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a656:	2300      	movs	r3, #0
 800a658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a65a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a65e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a660:	f107 0308 	add.w	r3, r7, #8
 800a664:	4619      	mov	r1, r3
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7ff fe24 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f9bf 	bl	800a9f0 <SDMMC_GetCmdResp3>
 800a672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a674:	69fb      	ldr	r3, [r7, #28]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3720      	adds	r7, #32
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	80100000 	.word	0x80100000

0800a684 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b088      	sub	sp, #32
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a690:	2302      	movs	r3, #2
 800a692:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a694:	23c0      	movs	r3, #192	@ 0xc0
 800a696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a698:	2300      	movs	r3, #0
 800a69a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a69c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6a2:	f107 0308 	add.w	r3, r7, #8
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7ff fe03 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f956 	bl	800a960 <SDMMC_GetCmdResp2>
 800a6b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6b6:	69fb      	ldr	r3, [r7, #28]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3720      	adds	r7, #32
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b088      	sub	sp, #32
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a6ce:	2309      	movs	r3, #9
 800a6d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a6d2:	23c0      	movs	r3, #192	@ 0xc0
 800a6d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6e0:	f107 0308 	add.w	r3, r7, #8
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7ff fde4 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f937 	bl	800a960 <SDMMC_GetCmdResp2>
 800a6f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6f4:	69fb      	ldr	r3, [r7, #28]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3720      	adds	r7, #32
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b088      	sub	sp, #32
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a708:	2300      	movs	r3, #0
 800a70a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a70c:	2303      	movs	r3, #3
 800a70e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a710:	2340      	movs	r3, #64	@ 0x40
 800a712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a714:	2300      	movs	r3, #0
 800a716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a718:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a71c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a71e:	f107 0308 	add.w	r3, r7, #8
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7ff fdc5 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a72a:	683a      	ldr	r2, [r7, #0]
 800a72c:	2103      	movs	r1, #3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f99c 	bl	800aa6c <SDMMC_GetCmdResp6>
 800a734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a736:	69fb      	ldr	r3, [r7, #28]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3720      	adds	r7, #32
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a74e:	230d      	movs	r3, #13
 800a750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a752:	2340      	movs	r3, #64	@ 0x40
 800a754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a756:	2300      	movs	r3, #0
 800a758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a75a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a75e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a760:	f107 0308 	add.w	r3, r7, #8
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f7ff fda4 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a76c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a770:	210d      	movs	r1, #13
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f806 	bl	800a784 <SDMMC_GetCmdResp1>
 800a778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a77a:	69fb      	ldr	r3, [r7, #28]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3720      	adds	r7, #32
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	460b      	mov	r3, r1
 800a78e:	607a      	str	r2, [r7, #4]
 800a790:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a792:	4b70      	ldr	r3, [pc, #448]	@ (800a954 <SDMMC_GetCmdResp1+0x1d0>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a70      	ldr	r2, [pc, #448]	@ (800a958 <SDMMC_GetCmdResp1+0x1d4>)
 800a798:	fba2 2303 	umull	r2, r3, r2, r3
 800a79c:	0a5a      	lsrs	r2, r3, #9
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	fb02 f303 	mul.w	r3, r2, r3
 800a7a4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	1e5a      	subs	r2, r3, #1
 800a7aa:	61fa      	str	r2, [r7, #28]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d102      	bne.n	800a7b6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a7b4:	e0c9      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ba:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d0ef      	beq.n	800a7a6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1ea      	bne.n	800a7a6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7d4:	f003 0304 	and.w	r3, r3, #4
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d004      	beq.n	800a7e6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2204      	movs	r2, #4
 800a7e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7e2:	2304      	movs	r3, #4
 800a7e4:	e0b1      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d004      	beq.n	800a7fc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e0a6      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	22c5      	movs	r2, #197	@ 0xc5
 800a800:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7ff fd80 	bl	800a308 <SDMMC_GetCommandResponse>
 800a808:	4603      	mov	r3, r0
 800a80a:	461a      	mov	r2, r3
 800a80c:	7afb      	ldrb	r3, [r7, #11]
 800a80e:	4293      	cmp	r3, r2
 800a810:	d001      	beq.n	800a816 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a812:	2301      	movs	r3, #1
 800a814:	e099      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a816:	2100      	movs	r1, #0
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f7ff fd82 	bl	800a322 <SDMMC_GetResponse>
 800a81e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	4b4e      	ldr	r3, [pc, #312]	@ (800a95c <SDMMC_GetCmdResp1+0x1d8>)
 800a824:	4013      	ands	r3, r2
 800a826:	2b00      	cmp	r3, #0
 800a828:	d101      	bne.n	800a82e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a82a:	2300      	movs	r3, #0
 800a82c:	e08d      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	2b00      	cmp	r3, #0
 800a832:	da02      	bge.n	800a83a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a834:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a838:	e087      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a844:	2340      	movs	r3, #64	@ 0x40
 800a846:	e080      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a852:	2380      	movs	r3, #128	@ 0x80
 800a854:	e079      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d002      	beq.n	800a866 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a864:	e071      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d002      	beq.n	800a876 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a870:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a874:	e069      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a880:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a884:	e061      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d002      	beq.n	800a896 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a890:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a894:	e059      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a8a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8a4:	e051      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d002      	beq.n	800a8b6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a8b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a8b4:	e049      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d002      	beq.n	800a8c6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a8c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a8c4:	e041      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d002      	beq.n	800a8d6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a8d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8d4:	e039      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d002      	beq.n	800a8e6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a8e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a8e4:	e031      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d002      	beq.n	800a8f6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a8f0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a8f4:	e029      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a900:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a904:	e021      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d002      	beq.n	800a916 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a910:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a914:	e019      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a920:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a924:	e011      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d002      	beq.n	800a936 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a930:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a934:	e009      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f003 0308 	and.w	r3, r3, #8
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a940:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a944:	e001      	b.n	800a94a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a946:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3720      	adds	r7, #32
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	20000000 	.word	0x20000000
 800a958:	10624dd3 	.word	0x10624dd3
 800a95c:	fdffe008 	.word	0xfdffe008

0800a960 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a968:	4b1f      	ldr	r3, [pc, #124]	@ (800a9e8 <SDMMC_GetCmdResp2+0x88>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a1f      	ldr	r2, [pc, #124]	@ (800a9ec <SDMMC_GetCmdResp2+0x8c>)
 800a96e:	fba2 2303 	umull	r2, r3, r2, r3
 800a972:	0a5b      	lsrs	r3, r3, #9
 800a974:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a978:	fb02 f303 	mul.w	r3, r2, r3
 800a97c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	1e5a      	subs	r2, r3, #1
 800a982:	60fa      	str	r2, [r7, #12]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d102      	bne.n	800a98e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a988:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a98c:	e026      	b.n	800a9dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a992:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d0ef      	beq.n	800a97e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1ea      	bne.n	800a97e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ac:	f003 0304 	and.w	r3, r3, #4
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d004      	beq.n	800a9be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2204      	movs	r2, #4
 800a9b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9ba:	2304      	movs	r3, #4
 800a9bc:	e00e      	b.n	800a9dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d004      	beq.n	800a9d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e003      	b.n	800a9dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	22c5      	movs	r2, #197	@ 0xc5
 800a9d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr
 800a9e8:	20000000 	.word	0x20000000
 800a9ec:	10624dd3 	.word	0x10624dd3

0800a9f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9f8:	4b1a      	ldr	r3, [pc, #104]	@ (800aa64 <SDMMC_GetCmdResp3+0x74>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a1a      	ldr	r2, [pc, #104]	@ (800aa68 <SDMMC_GetCmdResp3+0x78>)
 800a9fe:	fba2 2303 	umull	r2, r3, r2, r3
 800aa02:	0a5b      	lsrs	r3, r3, #9
 800aa04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa08:	fb02 f303 	mul.w	r3, r2, r3
 800aa0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	1e5a      	subs	r2, r3, #1
 800aa12:	60fa      	str	r2, [r7, #12]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d102      	bne.n	800aa1e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa1c:	e01b      	b.n	800aa56 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa22:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d0ef      	beq.n	800aa0e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1ea      	bne.n	800aa0e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa3c:	f003 0304 	and.w	r3, r3, #4
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d004      	beq.n	800aa4e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2204      	movs	r2, #4
 800aa48:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa4a:	2304      	movs	r3, #4
 800aa4c:	e003      	b.n	800aa56 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	22c5      	movs	r2, #197	@ 0xc5
 800aa52:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3714      	adds	r7, #20
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	20000000 	.word	0x20000000
 800aa68:	10624dd3 	.word	0x10624dd3

0800aa6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b088      	sub	sp, #32
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	460b      	mov	r3, r1
 800aa76:	607a      	str	r2, [r7, #4]
 800aa78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa7a:	4b35      	ldr	r3, [pc, #212]	@ (800ab50 <SDMMC_GetCmdResp6+0xe4>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a35      	ldr	r2, [pc, #212]	@ (800ab54 <SDMMC_GetCmdResp6+0xe8>)
 800aa80:	fba2 2303 	umull	r2, r3, r2, r3
 800aa84:	0a5b      	lsrs	r3, r3, #9
 800aa86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa8a:	fb02 f303 	mul.w	r3, r2, r3
 800aa8e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	1e5a      	subs	r2, r3, #1
 800aa94:	61fa      	str	r2, [r7, #28]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d102      	bne.n	800aaa0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa9a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa9e:	e052      	b.n	800ab46 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaa4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d0ef      	beq.n	800aa90 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1ea      	bne.n	800aa90 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aabe:	f003 0304 	and.w	r3, r3, #4
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d004      	beq.n	800aad0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2204      	movs	r2, #4
 800aaca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aacc:	2304      	movs	r3, #4
 800aace:	e03a      	b.n	800ab46 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aad4:	f003 0301 	and.w	r3, r3, #1
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d004      	beq.n	800aae6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2201      	movs	r2, #1
 800aae0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aae2:	2301      	movs	r3, #1
 800aae4:	e02f      	b.n	800ab46 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f7ff fc0e 	bl	800a308 <SDMMC_GetCommandResponse>
 800aaec:	4603      	mov	r3, r0
 800aaee:	461a      	mov	r2, r3
 800aaf0:	7afb      	ldrb	r3, [r7, #11]
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d001      	beq.n	800aafa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e025      	b.n	800ab46 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	22c5      	movs	r2, #197	@ 0xc5
 800aafe:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ab00:	2100      	movs	r1, #0
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f7ff fc0d 	bl	800a322 <SDMMC_GetResponse>
 800ab08:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d106      	bne.n	800ab22 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	0c1b      	lsrs	r3, r3, #16
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	e011      	b.n	800ab46 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab30:	e009      	b.n	800ab46 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d002      	beq.n	800ab42 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab40:	e001      	b.n	800ab46 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ab42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3720      	adds	r7, #32
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	20000000 	.word	0x20000000
 800ab54:	10624dd3 	.word	0x10624dd3

0800ab58 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab60:	4b22      	ldr	r3, [pc, #136]	@ (800abec <SDMMC_GetCmdResp7+0x94>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a22      	ldr	r2, [pc, #136]	@ (800abf0 <SDMMC_GetCmdResp7+0x98>)
 800ab66:	fba2 2303 	umull	r2, r3, r2, r3
 800ab6a:	0a5b      	lsrs	r3, r3, #9
 800ab6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab70:	fb02 f303 	mul.w	r3, r2, r3
 800ab74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	1e5a      	subs	r2, r3, #1
 800ab7a:	60fa      	str	r2, [r7, #12]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d102      	bne.n	800ab86 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ab84:	e02c      	b.n	800abe0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d0ef      	beq.n	800ab76 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1ea      	bne.n	800ab76 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aba4:	f003 0304 	and.w	r3, r3, #4
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d004      	beq.n	800abb6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2204      	movs	r2, #4
 800abb0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800abb2:	2304      	movs	r3, #4
 800abb4:	e014      	b.n	800abe0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d004      	beq.n	800abcc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abc8:	2301      	movs	r3, #1
 800abca:	e009      	b.n	800abe0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d002      	beq.n	800abde <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2240      	movs	r2, #64	@ 0x40
 800abdc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800abde:	2300      	movs	r3, #0
  
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3714      	adds	r7, #20
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr
 800abec:	20000000 	.word	0x20000000
 800abf0:	10624dd3 	.word	0x10624dd3

0800abf4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abfc:	4b11      	ldr	r3, [pc, #68]	@ (800ac44 <SDMMC_GetCmdError+0x50>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a11      	ldr	r2, [pc, #68]	@ (800ac48 <SDMMC_GetCmdError+0x54>)
 800ac02:	fba2 2303 	umull	r2, r3, r2, r3
 800ac06:	0a5b      	lsrs	r3, r3, #9
 800ac08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac0c:	fb02 f303 	mul.w	r3, r2, r3
 800ac10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	1e5a      	subs	r2, r3, #1
 800ac16:	60fa      	str	r2, [r7, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d102      	bne.n	800ac22 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac20:	e009      	b.n	800ac36 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d0f1      	beq.n	800ac12 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	22c5      	movs	r2, #197	@ 0xc5
 800ac32:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3714      	adds	r7, #20
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	20000000 	.word	0x20000000
 800ac48:	10624dd3 	.word	0x10624dd3

0800ac4c <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b090      	sub	sp, #64	@ 0x40
 800ac50:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800ac52:	2300      	movs	r3, #0
 800ac54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20];

  uwVolume = 100;
 800ac56:	4b33      	ldr	r3, [pc, #204]	@ (800ad24 <AUDIO_REC_Start+0xd8>)
 800ac58:	2264      	movs	r2, #100	@ 0x64
 800ac5a:	601a      	str	r2, [r3, #0]

  /* Create a new file system */
  if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	4932      	ldr	r1, [pc, #200]	@ (800ad28 <AUDIO_REC_Start+0xdc>)
 800ac60:	4832      	ldr	r0, [pc, #200]	@ (800ad2c <AUDIO_REC_Start+0xe0>)
 800ac62:	f002 faed 	bl	800d240 <f_mount>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d002      	beq.n	800ac72 <AUDIO_REC_Start+0x26>
    	Error_Handler(); /* FatFs Initialization Error */
 800ac6c:	f7f7 f8b0 	bl	8001dd0 <Error_Handler>
 800ac70:	e052      	b.n	800ad18 <AUDIO_REC_Start+0xcc>
  } else {
	  printf("SD card mounted\r\n");
 800ac72:	482f      	ldr	r0, [pc, #188]	@ (800ad30 <AUDIO_REC_Start+0xe4>)
 800ac74:	f008 fe96 	bl	80139a4 <puts>
		  	  sizeof(workBuffer)) != FR_OK) {
		  Error_Handler(); / * FatFs Format Error */
//	  } else {
//	  */

	  printf("WAV file created\r\n");
 800ac78:	482e      	ldr	r0, [pc, #184]	@ (800ad34 <AUDIO_REC_Start+0xe8>)
 800ac7a:	f008 fe93 	bl	80139a4 <puts>
	  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800ac7e:	220a      	movs	r2, #10
 800ac80:	492d      	ldr	r1, [pc, #180]	@ (800ad38 <AUDIO_REC_Start+0xec>)
 800ac82:	482e      	ldr	r0, [pc, #184]	@ (800ad3c <AUDIO_REC_Start+0xf0>)
 800ac84:	f002 fb22 	bl	800d2cc <f_open>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d144      	bne.n	800ad18 <AUDIO_REC_Start+0xcc>
	  {
		/* Initialize header file */
		WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 800ac8e:	492c      	ldr	r1, [pc, #176]	@ (800ad40 <AUDIO_REC_Start+0xf4>)
 800ac90:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800ac94:	f000 f9c6 	bl	800b024 <WavProcess_EncInit>

		/* Write header file */
		if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 800ac98:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ac9c:	222c      	movs	r2, #44	@ 0x2c
 800ac9e:	4928      	ldr	r1, [pc, #160]	@ (800ad40 <AUDIO_REC_Start+0xf4>)
 800aca0:	4826      	ldr	r0, [pc, #152]	@ (800ad3c <AUDIO_REC_Start+0xf0>)
 800aca2:	f002 fe0c 	bl	800d8be <f_write>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d135      	bne.n	800ad18 <AUDIO_REC_Start+0xcc>
		{
		  printf("State : ready to record\r\n");
 800acac:	4825      	ldr	r0, [pc, #148]	@ (800ad44 <AUDIO_REC_Start+0xf8>)
 800acae:	f008 fe79 	bl	80139a4 <puts>
		  AudioState = AUDIO_STATE_RECORD;
 800acb2:	4b25      	ldr	r3, [pc, #148]	@ (800ad48 <AUDIO_REC_Start+0xfc>)
 800acb4:	2205      	movs	r2, #5
 800acb6:	701a      	strb	r2, [r3, #0]

			if(byteswritten != 0)
 800acb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d02c      	beq.n	800ad18 <AUDIO_REC_Start+0xcc>
			{
			  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 800acbe:	2202      	movs	r2, #2
 800acc0:	2110      	movs	r1, #16
 800acc2:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800acc6:	f7f9 fb63 	bl	8004390 <BSP_AUDIO_IN_Init>
			  printf("Recording config initialized\r\n");
 800acca:	4820      	ldr	r0, [pc, #128]	@ (800ad4c <AUDIO_REC_Start+0x100>)
 800accc:	f008 fe6a 	bl	80139a4 <puts>
			  BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
 800acd0:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 800acd4:	481e      	ldr	r0, [pc, #120]	@ (800ad50 <AUDIO_REC_Start+0x104>)
 800acd6:	f7f9 fbd9 	bl	800448c <BSP_AUDIO_IN_Record>
			  printf("Recording started...\r\n");
 800acda:	481e      	ldr	r0, [pc, #120]	@ (800ad54 <AUDIO_REC_Start+0x108>)
 800acdc:	f008 fe62 	bl	80139a4 <puts>
			  BufferCtl.fptr = byteswritten;
 800ace0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ace2:	4a1b      	ldr	r2, [pc, #108]	@ (800ad50 <AUDIO_REC_Start+0x104>)
 800ace4:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800ace8:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
			  BufferCtl.pcm_ptr = 0;
 800acec:	4b18      	ldr	r3, [pc, #96]	@ (800ad50 <AUDIO_REC_Start+0x104>)
 800acee:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800acf2:	461a      	mov	r2, r3
 800acf4:	2300      	movs	r3, #0
 800acf6:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
			  BufferCtl.offset = 0;
 800acfa:	4b15      	ldr	r3, [pc, #84]	@ (800ad50 <AUDIO_REC_Start+0x104>)
 800acfc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad00:	461a      	mov	r2, r3
 800ad02:	2300      	movs	r3, #0
 800ad04:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
			  BufferCtl.wr_state = BUFFER_EMPTY;
 800ad08:	4b11      	ldr	r3, [pc, #68]	@ (800ad50 <AUDIO_REC_Start+0x104>)
 800ad0a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			  return AUDIO_ERROR_NONE;
 800ad14:	2300      	movs	r3, #0
 800ad16:	e000      	b.n	800ad1a <AUDIO_REC_Start+0xce>
			}
		}
	  }
	  //}
  }
  return AUDIO_ERROR_IO;
 800ad18:	2301      	movs	r3, #1
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3740      	adds	r7, #64	@ 0x40
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	20000040 	.word	0x20000040
 800ad28:	20005998 	.word	0x20005998
 800ad2c:	2000599c 	.word	0x2000599c
 800ad30:	08015c2c 	.word	0x08015c2c
 800ad34:	08015c40 	.word	0x08015c40
 800ad38:	08015c54 	.word	0x08015c54
 800ad3c:	20005764 	.word	0x20005764
 800ad40:	20000efc 	.word	0x20000efc
 800ad44:	08015c60 	.word	0x08015c60
 800ad48:	20000a14 	.word	0x20000a14
 800ad4c:	08015c7c 	.word	0x08015c7c
 800ad50:	20000f28 	.word	0x20000f28
 800ad54:	08015c9c 	.word	0x08015c9c

0800ad58 <AUDIO_REC_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_REC_Process(void)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b088      	sub	sp, #32
 800ad5c:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	617b      	str	r3, [r7, #20]
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 800ad62:	2300      	movs	r3, #0
 800ad64:	77fb      	strb	r3, [r7, #31]
  uint32_t elapsed_time; 
  static uint32_t prev_elapsed_time = 0xFFFFFFFF;
  uint8_t str[16];
  //static TS_StateTypeDef  TS_State={0};
  //printf("PRE SWITCH\r\n");
  switch(AudioState)
 800ad66:	4b59      	ldr	r3, [pc, #356]	@ (800aecc <AUDIO_REC_Process+0x174>)
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	2b05      	cmp	r3, #5
 800ad6c:	d002      	beq.n	800ad74 <AUDIO_REC_Process+0x1c>
 800ad6e:	2b0a      	cmp	r3, #10
 800ad70:	d079      	beq.n	800ae66 <AUDIO_REC_Process+0x10e>

  	case AUDIO_STATE_IDLE:
  	case AUDIO_STATE_INIT:
  	default:
      /* Do Nothing */
      break;
 800ad72:	e0a7      	b.n	800aec4 <AUDIO_REC_Process+0x16c>
      if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
 800ad74:	4b56      	ldr	r3, [pc, #344]	@ (800aed0 <AUDIO_REC_Process+0x178>)
 800ad76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad7a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ad7e:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 800ad82:	d303      	bcc.n	800ad8c <AUDIO_REC_Process+0x34>
        AudioState = AUDIO_STATE_STOP;
 800ad84:	4b51      	ldr	r3, [pc, #324]	@ (800aecc <AUDIO_REC_Process+0x174>)
 800ad86:	220a      	movs	r2, #10
 800ad88:	701a      	strb	r2, [r3, #0]
        break;
 800ad8a:	e09b      	b.n	800aec4 <AUDIO_REC_Process+0x16c>
      if(BufferCtl.wr_state == BUFFER_FULL)
 800ad8c:	4b50      	ldr	r3, [pc, #320]	@ (800aed0 <AUDIO_REC_Process+0x178>)
 800ad8e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad92:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d128      	bne.n	800adec <AUDIO_REC_Process+0x94>
        if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset),
 800ad9a:	4b4d      	ldr	r3, [pc, #308]	@ (800aed0 <AUDIO_REC_Process+0x178>)
 800ad9c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ada0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	4a4a      	ldr	r2, [pc, #296]	@ (800aed0 <AUDIO_REC_Process+0x178>)
 800ada8:	1899      	adds	r1, r3, r2
 800adaa:	f107 0314 	add.w	r3, r7, #20
 800adae:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 800adb2:	4848      	ldr	r0, [pc, #288]	@ (800aed4 <AUDIO_REC_Process+0x17c>)
 800adb4:	f002 fd83 	bl	800d8be <f_write>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d004      	beq.n	800adc8 <AUDIO_REC_Process+0x70>
          printf("recording failed\r\n");
 800adbe:	4846      	ldr	r0, [pc, #280]	@ (800aed8 <AUDIO_REC_Process+0x180>)
 800adc0:	f008 fdf0 	bl	80139a4 <puts>
          return AUDIO_ERROR_IO;
 800adc4:	2301      	movs	r3, #1
 800adc6:	e07d      	b.n	800aec4 <AUDIO_REC_Process+0x16c>
        BufferCtl.fptr += byteswritten;
 800adc8:	4b41      	ldr	r3, [pc, #260]	@ (800aed0 <AUDIO_REC_Process+0x178>)
 800adca:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800adce:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	4413      	add	r3, r2
 800add6:	4a3e      	ldr	r2, [pc, #248]	@ (800aed0 <AUDIO_REC_Process+0x178>)
 800add8:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800addc:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
        BufferCtl.wr_state =  BUFFER_EMPTY;
 800ade0:	4b3b      	ldr	r3, [pc, #236]	@ (800aed0 <AUDIO_REC_Process+0x178>)
 800ade2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ade6:	2200      	movs	r2, #0
 800ade8:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
      elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2);
 800adec:	4b38      	ldr	r3, [pc, #224]	@ (800aed0 <AUDIO_REC_Process+0x178>)
 800adee:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800adf2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800adf6:	4a39      	ldr	r2, [pc, #228]	@ (800aedc <AUDIO_REC_Process+0x184>)
 800adf8:	fba2 2303 	umull	r2, r3, r2, r3
 800adfc:	0b1b      	lsrs	r3, r3, #12
 800adfe:	61bb      	str	r3, [r7, #24]
      if(prev_elapsed_time != elapsed_time)
 800ae00:	4b37      	ldr	r3, [pc, #220]	@ (800aee0 <AUDIO_REC_Process+0x188>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	69ba      	ldr	r2, [r7, #24]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d05b      	beq.n	800aec2 <AUDIO_REC_Process+0x16a>
        prev_elapsed_time = elapsed_time;
 800ae0a:	4a35      	ldr	r2, [pc, #212]	@ (800aee0 <AUDIO_REC_Process+0x188>)
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	6013      	str	r3, [r2, #0]
        printf("Elapsed time : \r\n");
 800ae10:	4834      	ldr	r0, [pc, #208]	@ (800aee4 <AUDIO_REC_Process+0x18c>)
 800ae12:	f008 fdc7 	bl	80139a4 <puts>
        printf("[%02d:%02d]\r\n", (int)(elapsed_time /60), (int)(elapsed_time%60));
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	4a33      	ldr	r2, [pc, #204]	@ (800aee8 <AUDIO_REC_Process+0x190>)
 800ae1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae1e:	095b      	lsrs	r3, r3, #5
 800ae20:	4618      	mov	r0, r3
 800ae22:	69b9      	ldr	r1, [r7, #24]
 800ae24:	4b30      	ldr	r3, [pc, #192]	@ (800aee8 <AUDIO_REC_Process+0x190>)
 800ae26:	fba3 2301 	umull	r2, r3, r3, r1
 800ae2a:	095a      	lsrs	r2, r3, #5
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	011b      	lsls	r3, r3, #4
 800ae30:	1a9b      	subs	r3, r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	1aca      	subs	r2, r1, r3
 800ae36:	4613      	mov	r3, r2
 800ae38:	461a      	mov	r2, r3
 800ae3a:	4601      	mov	r1, r0
 800ae3c:	482b      	ldr	r0, [pc, #172]	@ (800aeec <AUDIO_REC_Process+0x194>)
 800ae3e:	f008 fd49 	bl	80138d4 <iprintf>
        printf("File size : \r\n");
 800ae42:	482b      	ldr	r0, [pc, #172]	@ (800aef0 <AUDIO_REC_Process+0x198>)
 800ae44:	f008 fdae 	bl	80139a4 <puts>
        printf("%4d KB\r\n", (int)((int32_t)BufferCtl.fptr/1024));
 800ae48:	4b21      	ldr	r3, [pc, #132]	@ (800aed0 <AUDIO_REC_Process+0x178>)
 800ae4a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ae4e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	da01      	bge.n	800ae5a <AUDIO_REC_Process+0x102>
 800ae56:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800ae5a:	129b      	asrs	r3, r3, #10
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	4825      	ldr	r0, [pc, #148]	@ (800aef4 <AUDIO_REC_Process+0x19c>)
 800ae60:	f008 fd38 	bl	80138d4 <iprintf>
      break;
 800ae64:	e02d      	b.n	800aec2 <AUDIO_REC_Process+0x16a>
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800ae66:	2002      	movs	r0, #2
 800ae68:	f7f9 fb28 	bl	80044bc <BSP_AUDIO_IN_Stop>
      HAL_Delay(300);
 800ae6c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ae70:	f7f9 fd3e 	bl	80048f0 <HAL_Delay>
      if(f_lseek(&WavFile, 0) == FR_OK)
 800ae74:	2100      	movs	r1, #0
 800ae76:	4817      	ldr	r0, [pc, #92]	@ (800aed4 <AUDIO_REC_Process+0x17c>)
 800ae78:	f002 ff3e 	bl	800dcf8 <f_lseek>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d113      	bne.n	800aeaa <AUDIO_REC_Process+0x152>
        WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 800ae82:	491d      	ldr	r1, [pc, #116]	@ (800aef8 <AUDIO_REC_Process+0x1a0>)
 800ae84:	481d      	ldr	r0, [pc, #116]	@ (800aefc <AUDIO_REC_Process+0x1a4>)
 800ae86:	f000 f9e5 	bl	800b254 <WavProcess_HeaderUpdate>
        if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 800ae8a:	f107 0314 	add.w	r3, r7, #20
 800ae8e:	222c      	movs	r2, #44	@ 0x2c
 800ae90:	491a      	ldr	r1, [pc, #104]	@ (800aefc <AUDIO_REC_Process+0x1a4>)
 800ae92:	4810      	ldr	r0, [pc, #64]	@ (800aed4 <AUDIO_REC_Process+0x17c>)
 800ae94:	f002 fd13 	bl	800d8be <f_write>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d102      	bne.n	800aea4 <AUDIO_REC_Process+0x14c>
          audio_error = AUDIO_ERROR_EOF;
 800ae9e:	2302      	movs	r3, #2
 800aea0:	77fb      	strb	r3, [r7, #31]
 800aea2:	e004      	b.n	800aeae <AUDIO_REC_Process+0x156>
          audio_error = AUDIO_ERROR_IO;
 800aea4:	2301      	movs	r3, #1
 800aea6:	77fb      	strb	r3, [r7, #31]
 800aea8:	e001      	b.n	800aeae <AUDIO_REC_Process+0x156>
        audio_error = AUDIO_ERROR_IO;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	77fb      	strb	r3, [r7, #31]
      AudioState = AUDIO_STATE_IDLE;
 800aeae:	4b07      	ldr	r3, [pc, #28]	@ (800aecc <AUDIO_REC_Process+0x174>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	701a      	strb	r2, [r3, #0]
      f_close(&WavFile);
 800aeb4:	4807      	ldr	r0, [pc, #28]	@ (800aed4 <AUDIO_REC_Process+0x17c>)
 800aeb6:	f002 fef5 	bl	800dca4 <f_close>
      printf("wave file closed success\r\n");
 800aeba:	4811      	ldr	r0, [pc, #68]	@ (800af00 <AUDIO_REC_Process+0x1a8>)
 800aebc:	f008 fd72 	bl	80139a4 <puts>
      break;
 800aec0:	e000      	b.n	800aec4 <AUDIO_REC_Process+0x16c>
      break;
 800aec2:	bf00      	nop
      return audio_error;
    }
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3720      	adds	r7, #32
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	20000a14 	.word	0x20000a14
 800aed0:	20000f28 	.word	0x20000f28
 800aed4:	20005764 	.word	0x20005764
 800aed8:	08015cb4 	.word	0x08015cb4
 800aedc:	10624dd3 	.word	0x10624dd3
 800aee0:	20000044 	.word	0x20000044
 800aee4:	08015cc8 	.word	0x08015cc8
 800aee8:	88888889 	.word	0x88888889
 800aeec:	08015cdc 	.word	0x08015cdc
 800aef0:	08015cec 	.word	0x08015cec
 800aef4:	08015cfc 	.word	0x08015cfc
 800aef8:	20005738 	.word	0x20005738
 800aefc:	20000efc 	.word	0x20000efc
 800af00:	08015d08 	.word	0x08015d08

0800af04 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800af04:	b480      	push	{r7}
 800af06:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800af08:	4b21      	ldr	r3, [pc, #132]	@ (800af90 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800af0a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af0e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800af12:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800af16:	4a1e      	ldr	r2, [pc, #120]	@ (800af90 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800af18:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800af1c:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800af20:	4b1b      	ldr	r3, [pc, #108]	@ (800af90 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800af22:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af26:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800af2a:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800af2e:	d10c      	bne.n	800af4a <BSP_AUDIO_IN_TransferComplete_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800af30:	4b17      	ldr	r3, [pc, #92]	@ (800af90 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800af32:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af36:	2201      	movs	r2, #1
 800af38:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800af3c:	4b14      	ldr	r3, [pc, #80]	@ (800af90 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800af3e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af42:	461a      	mov	r2, r3
 800af44:	2300      	movs	r3, #0
 800af46:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800af4a:	4b11      	ldr	r3, [pc, #68]	@ (800af90 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800af4c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af50:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800af54:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800af58:	d314      	bcc.n	800af84 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800af5a:	4b0d      	ldr	r3, [pc, #52]	@ (800af90 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800af5c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af60:	2201      	movs	r2, #1
 800af62:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800af66:	4b0a      	ldr	r3, [pc, #40]	@ (800af90 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800af68:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af6c:	461a      	mov	r2, r3
 800af6e:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800af72:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800af76:	4b06      	ldr	r3, [pc, #24]	@ (800af90 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800af78:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af7c:	461a      	mov	r2, r3
 800af7e:	2300      	movs	r3, #0
 800af80:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800af84:	bf00      	nop
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	20000f28 	.word	0x20000f28

0800af94 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 800af94:	b480      	push	{r7}
 800af96:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800af98:	4b21      	ldr	r3, [pc, #132]	@ (800b020 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800af9a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af9e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800afa2:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800afa6:	4a1e      	ldr	r2, [pc, #120]	@ (800b020 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800afa8:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800afac:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800afb0:	4b1b      	ldr	r3, [pc, #108]	@ (800b020 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800afb2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800afb6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800afba:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800afbe:	d10c      	bne.n	800afda <BSP_AUDIO_IN_HalfTransfer_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800afc0:	4b17      	ldr	r3, [pc, #92]	@ (800b020 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800afc2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800afcc:	4b14      	ldr	r3, [pc, #80]	@ (800b020 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800afce:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800afd2:	461a      	mov	r2, r3
 800afd4:	2300      	movs	r3, #0
 800afd6:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800afda:	4b11      	ldr	r3, [pc, #68]	@ (800b020 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800afdc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800afe0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800afe4:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800afe8:	d314      	bcc.n	800b014 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800afea:	4b0d      	ldr	r3, [pc, #52]	@ (800b020 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800afec:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aff0:	2201      	movs	r2, #1
 800aff2:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800aff6:	4b0a      	ldr	r3, [pc, #40]	@ (800b020 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800aff8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800affc:	461a      	mov	r2, r3
 800affe:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800b002:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800b006:	4b06      	ldr	r3, [pc, #24]	@ (800b020 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b008:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b00c:	461a      	mov	r2, r3
 800b00e:	2300      	movs	r3, #0
 800b010:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800b014:	bf00      	nop
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop
 800b020:	20000f28 	.word	0x20000f28

0800b024 <WavProcess_EncInit>:
  * @param  Freq: Sampling frequency.
  * @param  pHeader: Pointer to the WAV file header to be written.  
  * @retval 0 if success, !0 else.
  */
static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{  
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 800b02e:	4a1b      	ldr	r2, [pc, #108]	@ (800b09c <WavProcess_EncInit+0x78>)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800b034:	4b19      	ldr	r3, [pc, #100]	@ (800b09c <WavProcess_EncInit+0x78>)
 800b036:	2202      	movs	r2, #2
 800b038:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800b03a:	4b18      	ldr	r3, [pc, #96]	@ (800b09c <WavProcess_EncInit+0x78>)
 800b03c:	2210      	movs	r2, #16
 800b03e:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800b040:	4b16      	ldr	r3, [pc, #88]	@ (800b09c <WavProcess_EncInit+0x78>)
 800b042:	4a17      	ldr	r2, [pc, #92]	@ (800b0a0 <WavProcess_EncInit+0x7c>)
 800b044:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800b046:	4b15      	ldr	r3, [pc, #84]	@ (800b09c <WavProcess_EncInit+0x78>)
 800b048:	222c      	movs	r2, #44	@ 0x2c
 800b04a:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800b04c:	4b13      	ldr	r3, [pc, #76]	@ (800b09c <WavProcess_EncInit+0x78>)
 800b04e:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800b050:	4a12      	ldr	r2, [pc, #72]	@ (800b09c <WavProcess_EncInit+0x78>)
 800b052:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800b054:	08d2      	lsrs	r2, r2, #3
 800b056:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800b058:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800b05c:	4a0f      	ldr	r2, [pc, #60]	@ (800b09c <WavProcess_EncInit+0x78>)
 800b05e:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800b060:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800b064:	4a0d      	ldr	r2, [pc, #52]	@ (800b09c <WavProcess_EncInit+0x78>)
 800b066:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800b068:	4b0c      	ldr	r3, [pc, #48]	@ (800b09c <WavProcess_EncInit+0x78>)
 800b06a:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800b06c:	4b0b      	ldr	r3, [pc, #44]	@ (800b09c <WavProcess_EncInit+0x78>)
 800b06e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800b070:	08db      	lsrs	r3, r3, #3
 800b072:	b29b      	uxth	r3, r3
 800b074:	fb12 f303 	smulbb	r3, r2, r3
 800b078:	b29a      	uxth	r2, r3
 800b07a:	4b08      	ldr	r3, [pc, #32]	@ (800b09c <WavProcess_EncInit+0x78>)
 800b07c:	841a      	strh	r2, [r3, #32]
  
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 800b07e:	4907      	ldr	r1, [pc, #28]	@ (800b09c <WavProcess_EncInit+0x78>)
 800b080:	6838      	ldr	r0, [r7, #0]
 800b082:	f000 f80f 	bl	800b0a4 <WavProcess_HeaderInit>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <WavProcess_EncInit+0x6c>
  {
    return 1;
 800b08c:	2301      	movs	r3, #1
 800b08e:	e000      	b.n	800b092 <WavProcess_EncInit+0x6e>
  }
  return 0;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	20005738 	.word	0x20005738
 800b0a0:	001d4c00 	.word	0x001d4c00

0800b0a4 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2252      	movs	r2, #82	@ 0x52
 800b0b2:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	2249      	movs	r2, #73	@ 0x49
 800b0ba:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	3302      	adds	r3, #2
 800b0c0:	2246      	movs	r2, #70	@ 0x46
 800b0c2:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3303      	adds	r3, #3
 800b0c8:	2246      	movs	r2, #70	@ 0x46
 800b0ca:	701a      	strb	r2, [r3, #0]
  
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	3305      	adds	r3, #5
 800b0d8:	224c      	movs	r2, #76	@ 0x4c
 800b0da:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	3306      	adds	r3, #6
 800b0e0:	221d      	movs	r2, #29
 800b0e2:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	3307      	adds	r3, #7
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	701a      	strb	r2, [r3, #0]
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	3308      	adds	r3, #8
 800b0f0:	2257      	movs	r2, #87	@ 0x57
 800b0f2:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	3309      	adds	r3, #9
 800b0f8:	2241      	movs	r2, #65	@ 0x41
 800b0fa:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	330a      	adds	r3, #10
 800b100:	2256      	movs	r2, #86	@ 0x56
 800b102:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	330b      	adds	r3, #11
 800b108:	2245      	movs	r2, #69	@ 0x45
 800b10a:	701a      	strb	r2, [r3, #0]
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	330c      	adds	r3, #12
 800b110:	2266      	movs	r2, #102	@ 0x66
 800b112:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	330d      	adds	r3, #13
 800b118:	226d      	movs	r2, #109	@ 0x6d
 800b11a:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	330e      	adds	r3, #14
 800b120:	2274      	movs	r2, #116	@ 0x74
 800b122:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	330f      	adds	r3, #15
 800b128:	2220      	movs	r2, #32
 800b12a:	701a      	strb	r2, [r3, #0]
  
  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3310      	adds	r3, #16
 800b130:	2210      	movs	r2, #16
 800b132:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	3311      	adds	r3, #17
 800b138:	2200      	movs	r2, #0
 800b13a:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	3312      	adds	r3, #18
 800b140:	2200      	movs	r2, #0
 800b142:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	3313      	adds	r3, #19
 800b148:	2200      	movs	r2, #0
 800b14a:	701a      	strb	r2, [r3, #0]
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3314      	adds	r3, #20
 800b150:	2201      	movs	r2, #1
 800b152:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3315      	adds	r3, #21
 800b158:	2200      	movs	r2, #0
 800b15a:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	8ada      	ldrh	r2, [r3, #22]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	3316      	adds	r3, #22
 800b164:	b2d2      	uxtb	r2, r2
 800b166:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	3317      	adds	r3, #23
 800b16c:	2200      	movs	r2, #0
 800b16e:	701a      	strb	r2, [r3, #0]
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	699a      	ldr	r2, [r3, #24]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	3318      	adds	r3, #24
 800b178:	b2d2      	uxtb	r2, r2
 800b17a:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	0a1a      	lsrs	r2, r3, #8
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	3319      	adds	r3, #25
 800b186:	b2d2      	uxtb	r2, r2
 800b188:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	699b      	ldr	r3, [r3, #24]
 800b18e:	0c1a      	lsrs	r2, r3, #16
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	331a      	adds	r3, #26
 800b194:	b2d2      	uxtb	r2, r2
 800b196:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	699b      	ldr	r3, [r3, #24]
 800b19c:	0e1a      	lsrs	r2, r3, #24
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	331b      	adds	r3, #27
 800b1a2:	b2d2      	uxtb	r2, r2
 800b1a4:	701a      	strb	r2, [r3, #0]
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	69da      	ldr	r2, [r3, #28]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	331c      	adds	r3, #28
 800b1ae:	b2d2      	uxtb	r2, r2
 800b1b0:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	69db      	ldr	r3, [r3, #28]
 800b1b6:	0a1a      	lsrs	r2, r3, #8
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	331d      	adds	r3, #29
 800b1bc:	b2d2      	uxtb	r2, r2
 800b1be:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	69db      	ldr	r3, [r3, #28]
 800b1c4:	0c1a      	lsrs	r2, r3, #16
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	331e      	adds	r3, #30
 800b1ca:	b2d2      	uxtb	r2, r2
 800b1cc:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	69db      	ldr	r3, [r3, #28]
 800b1d2:	0e1a      	lsrs	r2, r3, #24
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	331f      	adds	r3, #31
 800b1d8:	b2d2      	uxtb	r2, r2
 800b1da:	701a      	strb	r2, [r3, #0]
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	8c1a      	ldrh	r2, [r3, #32]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	3320      	adds	r3, #32
 800b1e4:	b2d2      	uxtb	r2, r2
 800b1e6:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	3321      	adds	r3, #33	@ 0x21
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	3322      	adds	r3, #34	@ 0x22
 800b1f8:	b2d2      	uxtb	r2, r2
 800b1fa:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	3323      	adds	r3, #35	@ 0x23
 800b200:	2200      	movs	r2, #0
 800b202:	701a      	strb	r2, [r3, #0]
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	3324      	adds	r3, #36	@ 0x24
 800b208:	2264      	movs	r2, #100	@ 0x64
 800b20a:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	3325      	adds	r3, #37	@ 0x25
 800b210:	2261      	movs	r2, #97	@ 0x61
 800b212:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	3326      	adds	r3, #38	@ 0x26
 800b218:	2274      	movs	r2, #116	@ 0x74
 800b21a:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	3327      	adds	r3, #39	@ 0x27
 800b220:	2261      	movs	r2, #97	@ 0x61
 800b222:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	3328      	adds	r3, #40	@ 0x28
 800b228:	2200      	movs	r2, #0
 800b22a:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	3329      	adds	r3, #41	@ 0x29
 800b230:	224c      	movs	r2, #76	@ 0x4c
 800b232:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	332a      	adds	r3, #42	@ 0x2a
 800b238:	221d      	movs	r2, #29
 800b23a:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	332b      	adds	r3, #43	@ 0x2b
 800b240:	2200      	movs	r2, #0
 800b242:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	370c      	adds	r7, #12
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
	...

0800b254 <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 800b25e:	4b30      	ldr	r3, [pc, #192]	@ (800b320 <WavProcess_HeaderUpdate+0xcc>)
 800b260:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b264:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3304      	adds	r3, #4
 800b26c:	b2d2      	uxtb	r2, r2
 800b26e:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 800b270:	4b2b      	ldr	r3, [pc, #172]	@ (800b320 <WavProcess_HeaderUpdate+0xcc>)
 800b272:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b276:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b27a:	0a1a      	lsrs	r2, r3, #8
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3305      	adds	r3, #5
 800b280:	b2d2      	uxtb	r2, r2
 800b282:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 800b284:	4b26      	ldr	r3, [pc, #152]	@ (800b320 <WavProcess_HeaderUpdate+0xcc>)
 800b286:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b28a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b28e:	0c1a      	lsrs	r2, r3, #16
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3306      	adds	r3, #6
 800b294:	b2d2      	uxtb	r2, r2
 800b296:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 800b298:	4b21      	ldr	r3, [pc, #132]	@ (800b320 <WavProcess_HeaderUpdate+0xcc>)
 800b29a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b29e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b2a2:	0e1a      	lsrs	r2, r3, #24
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	3307      	adds	r3, #7
 800b2a8:	b2d2      	uxtb	r2, r2
 800b2aa:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 800b2ac:	4b1c      	ldr	r3, [pc, #112]	@ (800b320 <WavProcess_HeaderUpdate+0xcc>)
 800b2ae:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b2b2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b2b6:	3b2c      	subs	r3, #44	@ 0x2c
 800b2b8:	4a19      	ldr	r2, [pc, #100]	@ (800b320 <WavProcess_HeaderUpdate+0xcc>)
 800b2ba:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800b2be:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 800b2c2:	4b17      	ldr	r3, [pc, #92]	@ (800b320 <WavProcess_HeaderUpdate+0xcc>)
 800b2c4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b2c8:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3328      	adds	r3, #40	@ 0x28
 800b2d0:	b2d2      	uxtb	r2, r2
 800b2d2:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 800b2d4:	4b12      	ldr	r3, [pc, #72]	@ (800b320 <WavProcess_HeaderUpdate+0xcc>)
 800b2d6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b2da:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b2de:	0a1a      	lsrs	r2, r3, #8
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	3329      	adds	r3, #41	@ 0x29
 800b2e4:	b2d2      	uxtb	r2, r2
 800b2e6:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 800b2e8:	4b0d      	ldr	r3, [pc, #52]	@ (800b320 <WavProcess_HeaderUpdate+0xcc>)
 800b2ea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b2ee:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b2f2:	0c1a      	lsrs	r2, r3, #16
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	332a      	adds	r3, #42	@ 0x2a
 800b2f8:	b2d2      	uxtb	r2, r2
 800b2fa:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 800b2fc:	4b08      	ldr	r3, [pc, #32]	@ (800b320 <WavProcess_HeaderUpdate+0xcc>)
 800b2fe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b302:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b306:	0e1a      	lsrs	r2, r3, #24
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	332b      	adds	r3, #43	@ 0x2b
 800b30c:	b2d2      	uxtb	r2, r2
 800b30e:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	370c      	adds	r7, #12
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	20000f28 	.word	0x20000f28

0800b324 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b328:	4904      	ldr	r1, [pc, #16]	@ (800b33c <MX_FATFS_Init+0x18>)
 800b32a:	4805      	ldr	r0, [pc, #20]	@ (800b340 <MX_FATFS_Init+0x1c>)
 800b32c:	f002 ff3a 	bl	800e1a4 <FATFS_LinkDriver>
 800b330:	4603      	mov	r3, r0
 800b332:	461a      	mov	r2, r3
 800b334:	4b03      	ldr	r3, [pc, #12]	@ (800b344 <MX_FATFS_Init+0x20>)
 800b336:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b338:	bf00      	nop
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	20005998 	.word	0x20005998
 800b340:	08015db8 	.word	0x08015db8
 800b344:	20005994 	.word	0x20005994

0800b348 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b34c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b34e:	4618      	mov	r0, r3
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b362:	f000 f888 	bl	800b476 <BSP_SD_IsDetected>
 800b366:	4603      	mov	r3, r0
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d001      	beq.n	800b370 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b36c:	2302      	movs	r3, #2
 800b36e:	e005      	b.n	800b37c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b370:	4804      	ldr	r0, [pc, #16]	@ (800b384 <BSP_SD_Init+0x2c>)
 800b372:	f7fd f90a 	bl	800858a <HAL_SD_Init>
 800b376:	4603      	mov	r3, r0
 800b378:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b37a:	79fb      	ldrb	r3, [r7, #7]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	20000b00 	.word	0x20000b00

0800b388 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b394:	2300      	movs	r3, #0
 800b396:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	68f9      	ldr	r1, [r7, #12]
 800b39e:	4806      	ldr	r0, [pc, #24]	@ (800b3b8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b3a0:	f7fd f9ac 	bl	80086fc <HAL_SD_ReadBlocks_DMA>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d001      	beq.n	800b3ae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3718      	adds	r7, #24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	20000b00 	.word	0x20000b00

0800b3bc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	68f9      	ldr	r1, [r7, #12]
 800b3d2:	4806      	ldr	r0, [pc, #24]	@ (800b3ec <BSP_SD_WriteBlocks_DMA+0x30>)
 800b3d4:	f7fd fa74 	bl	80088c0 <HAL_SD_WriteBlocks_DMA>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b3e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3718      	adds	r7, #24
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	20000b00 	.word	0x20000b00

0800b3f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b3f4:	4805      	ldr	r0, [pc, #20]	@ (800b40c <BSP_SD_GetCardState+0x1c>)
 800b3f6:	f7fd fe99 	bl	800912c <HAL_SD_GetCardState>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b04      	cmp	r3, #4
 800b3fe:	bf14      	ite	ne
 800b400:	2301      	movne	r3, #1
 800b402:	2300      	moveq	r3, #0
 800b404:	b2db      	uxtb	r3, r3
}
 800b406:	4618      	mov	r0, r3
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	20000b00 	.word	0x20000b00

0800b410 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b418:	6879      	ldr	r1, [r7, #4]
 800b41a:	4803      	ldr	r0, [pc, #12]	@ (800b428 <BSP_SD_GetCardInfo+0x18>)
 800b41c:	f7fd fe5a 	bl	80090d4 <HAL_SD_GetCardInfo>
}
 800b420:	bf00      	nop
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	20000b00 	.word	0x20000b00

0800b42c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b434:	f000 f818 	bl	800b468 <BSP_SD_AbortCallback>
}
 800b438:	bf00      	nop
 800b43a:	3708      	adds	r7, #8
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b448:	f000 f9a8 	bl	800b79c <BSP_SD_WriteCpltCallback>
}
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b45c:	f000 f9aa 	bl	800b7b4 <BSP_SD_ReadCpltCallback>
}
 800b460:	bf00      	nop
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b468:	b480      	push	{r7}
 800b46a:	af00      	add	r7, sp, #0

}
 800b46c:	bf00      	nop
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr

0800b476 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b082      	sub	sp, #8
 800b47a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b47c:	2301      	movs	r3, #1
 800b47e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b480:	f000 f80c 	bl	800b49c <BSP_PlatformIsDetected>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d101      	bne.n	800b48e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b48a:	2300      	movs	r3, #0
 800b48c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b48e:	79fb      	ldrb	r3, [r7, #7]
 800b490:	b2db      	uxtb	r3, r3
}
 800b492:	4618      	mov	r0, r3
 800b494:	3708      	adds	r7, #8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
	...

0800b49c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b4a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b4aa:	4806      	ldr	r0, [pc, #24]	@ (800b4c4 <BSP_PlatformIsDetected+0x28>)
 800b4ac:	f7fa fb74 	bl	8005b98 <HAL_GPIO_ReadPin>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d001      	beq.n	800b4ba <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b4ba:	79fb      	ldrb	r3, [r7, #7]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	40020800 	.word	0x40020800

0800b4c8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b4d0:	f7f9 fa02 	bl	80048d8 <HAL_GetTick>
 800b4d4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b4d6:	e006      	b.n	800b4e6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b4d8:	f7ff ff8a 	bl	800b3f0 <BSP_SD_GetCardState>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	e009      	b.n	800b4fa <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b4e6:	f7f9 f9f7 	bl	80048d8 <HAL_GetTick>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d8f0      	bhi.n	800b4d8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b4f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
	...

0800b504 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	4603      	mov	r3, r0
 800b50c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b50e:	4b0b      	ldr	r3, [pc, #44]	@ (800b53c <SD_CheckStatus+0x38>)
 800b510:	2201      	movs	r2, #1
 800b512:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b514:	f7ff ff6c 	bl	800b3f0 <BSP_SD_GetCardState>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d107      	bne.n	800b52e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b51e:	4b07      	ldr	r3, [pc, #28]	@ (800b53c <SD_CheckStatus+0x38>)
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	b2db      	uxtb	r3, r3
 800b524:	f023 0301 	bic.w	r3, r3, #1
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	4b04      	ldr	r3, [pc, #16]	@ (800b53c <SD_CheckStatus+0x38>)
 800b52c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b52e:	4b03      	ldr	r3, [pc, #12]	@ (800b53c <SD_CheckStatus+0x38>)
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	b2db      	uxtb	r3, r3
}
 800b534:	4618      	mov	r0, r3
 800b536:	3708      	adds	r7, #8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	20000048 	.word	0x20000048

0800b540 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	4603      	mov	r3, r0
 800b548:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b54a:	f7ff ff05 	bl	800b358 <BSP_SD_Init>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d107      	bne.n	800b564 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b554:	79fb      	ldrb	r3, [r7, #7]
 800b556:	4618      	mov	r0, r3
 800b558:	f7ff ffd4 	bl	800b504 <SD_CheckStatus>
 800b55c:	4603      	mov	r3, r0
 800b55e:	461a      	mov	r2, r3
 800b560:	4b04      	ldr	r3, [pc, #16]	@ (800b574 <SD_initialize+0x34>)
 800b562:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b564:	4b03      	ldr	r3, [pc, #12]	@ (800b574 <SD_initialize+0x34>)
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	b2db      	uxtb	r3, r3
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	20000048 	.word	0x20000048

0800b578 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	4603      	mov	r3, r0
 800b580:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b582:	79fb      	ldrb	r3, [r7, #7]
 800b584:	4618      	mov	r0, r3
 800b586:	f7ff ffbd 	bl	800b504 <SD_CheckStatus>
 800b58a:	4603      	mov	r3, r0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b086      	sub	sp, #24
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60b9      	str	r1, [r7, #8]
 800b59c:	607a      	str	r2, [r7, #4]
 800b59e:	603b      	str	r3, [r7, #0]
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b5a8:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b5ac:	f7ff ff8c 	bl	800b4c8 <SD_CheckStatusWithTimeout>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	da01      	bge.n	800b5ba <SD_read+0x26>
  {
    return res;
 800b5b6:	7dfb      	ldrb	r3, [r7, #23]
 800b5b8:	e03b      	b.n	800b632 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	6879      	ldr	r1, [r7, #4]
 800b5be:	68b8      	ldr	r0, [r7, #8]
 800b5c0:	f7ff fee2 	bl	800b388 <BSP_SD_ReadBlocks_DMA>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d132      	bne.n	800b630 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b5ca:	4b1c      	ldr	r3, [pc, #112]	@ (800b63c <SD_read+0xa8>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b5d0:	f7f9 f982 	bl	80048d8 <HAL_GetTick>
 800b5d4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b5d6:	bf00      	nop
 800b5d8:	4b18      	ldr	r3, [pc, #96]	@ (800b63c <SD_read+0xa8>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d108      	bne.n	800b5f2 <SD_read+0x5e>
 800b5e0:	f7f9 f97a 	bl	80048d8 <HAL_GetTick>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	1ad3      	subs	r3, r2, r3
 800b5ea:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d9f2      	bls.n	800b5d8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b5f2:	4b12      	ldr	r3, [pc, #72]	@ (800b63c <SD_read+0xa8>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d102      	bne.n	800b600 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	75fb      	strb	r3, [r7, #23]
 800b5fe:	e017      	b.n	800b630 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b600:	4b0e      	ldr	r3, [pc, #56]	@ (800b63c <SD_read+0xa8>)
 800b602:	2200      	movs	r2, #0
 800b604:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b606:	f7f9 f967 	bl	80048d8 <HAL_GetTick>
 800b60a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b60c:	e007      	b.n	800b61e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b60e:	f7ff feef 	bl	800b3f0 <BSP_SD_GetCardState>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d102      	bne.n	800b61e <SD_read+0x8a>
          {
            res = RES_OK;
 800b618:	2300      	movs	r3, #0
 800b61a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b61c:	e008      	b.n	800b630 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b61e:	f7f9 f95b 	bl	80048d8 <HAL_GetTick>
 800b622:	4602      	mov	r2, r0
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d9ee      	bls.n	800b60e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b630:	7dfb      	ldrb	r3, [r7, #23]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3718      	adds	r7, #24
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	20005bd0 	.word	0x20005bd0

0800b640 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	60b9      	str	r1, [r7, #8]
 800b648:	607a      	str	r2, [r7, #4]
 800b64a:	603b      	str	r3, [r7, #0]
 800b64c:	4603      	mov	r3, r0
 800b64e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b654:	4b24      	ldr	r3, [pc, #144]	@ (800b6e8 <SD_write+0xa8>)
 800b656:	2200      	movs	r2, #0
 800b658:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b65a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b65e:	f7ff ff33 	bl	800b4c8 <SD_CheckStatusWithTimeout>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	da01      	bge.n	800b66c <SD_write+0x2c>
  {
    return res;
 800b668:	7dfb      	ldrb	r3, [r7, #23]
 800b66a:	e038      	b.n	800b6de <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b66c:	683a      	ldr	r2, [r7, #0]
 800b66e:	6879      	ldr	r1, [r7, #4]
 800b670:	68b8      	ldr	r0, [r7, #8]
 800b672:	f7ff fea3 	bl	800b3bc <BSP_SD_WriteBlocks_DMA>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d12f      	bne.n	800b6dc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b67c:	f7f9 f92c 	bl	80048d8 <HAL_GetTick>
 800b680:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b682:	bf00      	nop
 800b684:	4b18      	ldr	r3, [pc, #96]	@ (800b6e8 <SD_write+0xa8>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d108      	bne.n	800b69e <SD_write+0x5e>
 800b68c:	f7f9 f924 	bl	80048d8 <HAL_GetTick>
 800b690:	4602      	mov	r2, r0
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	1ad3      	subs	r3, r2, r3
 800b696:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d9f2      	bls.n	800b684 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b69e:	4b12      	ldr	r3, [pc, #72]	@ (800b6e8 <SD_write+0xa8>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d102      	bne.n	800b6ac <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	75fb      	strb	r3, [r7, #23]
 800b6aa:	e017      	b.n	800b6dc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b6ac:	4b0e      	ldr	r3, [pc, #56]	@ (800b6e8 <SD_write+0xa8>)
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b6b2:	f7f9 f911 	bl	80048d8 <HAL_GetTick>
 800b6b6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b6b8:	e007      	b.n	800b6ca <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b6ba:	f7ff fe99 	bl	800b3f0 <BSP_SD_GetCardState>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d102      	bne.n	800b6ca <SD_write+0x8a>
          {
            res = RES_OK;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	75fb      	strb	r3, [r7, #23]
            break;
 800b6c8:	e008      	b.n	800b6dc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b6ca:	f7f9 f905 	bl	80048d8 <HAL_GetTick>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	1ad3      	subs	r3, r2, r3
 800b6d4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d9ee      	bls.n	800b6ba <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b6dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3718      	adds	r7, #24
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20005bcc 	.word	0x20005bcc

0800b6ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b08c      	sub	sp, #48	@ 0x30
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	603a      	str	r2, [r7, #0]
 800b6f6:	71fb      	strb	r3, [r7, #7]
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b702:	4b25      	ldr	r3, [pc, #148]	@ (800b798 <SD_ioctl+0xac>)
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	b2db      	uxtb	r3, r3
 800b708:	f003 0301 	and.w	r3, r3, #1
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d001      	beq.n	800b714 <SD_ioctl+0x28>
 800b710:	2303      	movs	r3, #3
 800b712:	e03c      	b.n	800b78e <SD_ioctl+0xa2>

  switch (cmd)
 800b714:	79bb      	ldrb	r3, [r7, #6]
 800b716:	2b03      	cmp	r3, #3
 800b718:	d834      	bhi.n	800b784 <SD_ioctl+0x98>
 800b71a:	a201      	add	r2, pc, #4	@ (adr r2, 800b720 <SD_ioctl+0x34>)
 800b71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b720:	0800b731 	.word	0x0800b731
 800b724:	0800b739 	.word	0x0800b739
 800b728:	0800b751 	.word	0x0800b751
 800b72c:	0800b76b 	.word	0x0800b76b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b736:	e028      	b.n	800b78a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b738:	f107 030c 	add.w	r3, r7, #12
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7ff fe67 	bl	800b410 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b748:	2300      	movs	r3, #0
 800b74a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b74e:	e01c      	b.n	800b78a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b750:	f107 030c 	add.w	r3, r7, #12
 800b754:	4618      	mov	r0, r3
 800b756:	f7ff fe5b 	bl	800b410 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b75c:	b29a      	uxth	r2, r3
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b762:	2300      	movs	r3, #0
 800b764:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b768:	e00f      	b.n	800b78a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b76a:	f107 030c 	add.w	r3, r7, #12
 800b76e:	4618      	mov	r0, r3
 800b770:	f7ff fe4e 	bl	800b410 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b776:	0a5a      	lsrs	r2, r3, #9
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b77c:	2300      	movs	r3, #0
 800b77e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b782:	e002      	b.n	800b78a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b784:	2304      	movs	r3, #4
 800b786:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b78a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3730      	adds	r7, #48	@ 0x30
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	20000048 	.word	0x20000048

0800b79c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b79c:	b480      	push	{r7}
 800b79e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b7a0:	4b03      	ldr	r3, [pc, #12]	@ (800b7b0 <BSP_SD_WriteCpltCallback+0x14>)
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	601a      	str	r2, [r3, #0]
}
 800b7a6:	bf00      	nop
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr
 800b7b0:	20005bcc 	.word	0x20005bcc

0800b7b4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b7b8:	4b03      	ldr	r3, [pc, #12]	@ (800b7c8 <BSP_SD_ReadCpltCallback+0x14>)
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	601a      	str	r2, [r3, #0]
}
 800b7be:	bf00      	nop
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	20005bd0 	.word	0x20005bd0

0800b7cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b7d6:	79fb      	ldrb	r3, [r7, #7]
 800b7d8:	4a08      	ldr	r2, [pc, #32]	@ (800b7fc <disk_status+0x30>)
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4413      	add	r3, r2
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	79fa      	ldrb	r2, [r7, #7]
 800b7e4:	4905      	ldr	r1, [pc, #20]	@ (800b7fc <disk_status+0x30>)
 800b7e6:	440a      	add	r2, r1
 800b7e8:	7a12      	ldrb	r2, [r2, #8]
 800b7ea:	4610      	mov	r0, r2
 800b7ec:	4798      	blx	r3
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b7f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	20005bfc 	.word	0x20005bfc

0800b800 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
 800b806:	4603      	mov	r3, r0
 800b808:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b80a:	2300      	movs	r3, #0
 800b80c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b80e:	79fb      	ldrb	r3, [r7, #7]
 800b810:	4a0d      	ldr	r2, [pc, #52]	@ (800b848 <disk_initialize+0x48>)
 800b812:	5cd3      	ldrb	r3, [r2, r3]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d111      	bne.n	800b83c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b818:	79fb      	ldrb	r3, [r7, #7]
 800b81a:	4a0b      	ldr	r2, [pc, #44]	@ (800b848 <disk_initialize+0x48>)
 800b81c:	2101      	movs	r1, #1
 800b81e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b820:	79fb      	ldrb	r3, [r7, #7]
 800b822:	4a09      	ldr	r2, [pc, #36]	@ (800b848 <disk_initialize+0x48>)
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	79fa      	ldrb	r2, [r7, #7]
 800b82e:	4906      	ldr	r1, [pc, #24]	@ (800b848 <disk_initialize+0x48>)
 800b830:	440a      	add	r2, r1
 800b832:	7a12      	ldrb	r2, [r2, #8]
 800b834:	4610      	mov	r0, r2
 800b836:	4798      	blx	r3
 800b838:	4603      	mov	r3, r0
 800b83a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20005bfc 	.word	0x20005bfc

0800b84c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b84c:	b590      	push	{r4, r7, lr}
 800b84e:	b087      	sub	sp, #28
 800b850:	af00      	add	r7, sp, #0
 800b852:	60b9      	str	r1, [r7, #8]
 800b854:	607a      	str	r2, [r7, #4]
 800b856:	603b      	str	r3, [r7, #0]
 800b858:	4603      	mov	r3, r0
 800b85a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
 800b85e:	4a0a      	ldr	r2, [pc, #40]	@ (800b888 <disk_read+0x3c>)
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	4413      	add	r3, r2
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	689c      	ldr	r4, [r3, #8]
 800b868:	7bfb      	ldrb	r3, [r7, #15]
 800b86a:	4a07      	ldr	r2, [pc, #28]	@ (800b888 <disk_read+0x3c>)
 800b86c:	4413      	add	r3, r2
 800b86e:	7a18      	ldrb	r0, [r3, #8]
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	68b9      	ldr	r1, [r7, #8]
 800b876:	47a0      	blx	r4
 800b878:	4603      	mov	r3, r0
 800b87a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b87c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	371c      	adds	r7, #28
 800b882:	46bd      	mov	sp, r7
 800b884:	bd90      	pop	{r4, r7, pc}
 800b886:	bf00      	nop
 800b888:	20005bfc 	.word	0x20005bfc

0800b88c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b88c:	b590      	push	{r4, r7, lr}
 800b88e:	b087      	sub	sp, #28
 800b890:	af00      	add	r7, sp, #0
 800b892:	60b9      	str	r1, [r7, #8]
 800b894:	607a      	str	r2, [r7, #4]
 800b896:	603b      	str	r3, [r7, #0]
 800b898:	4603      	mov	r3, r0
 800b89a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
 800b89e:	4a0a      	ldr	r2, [pc, #40]	@ (800b8c8 <disk_write+0x3c>)
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	4413      	add	r3, r2
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	68dc      	ldr	r4, [r3, #12]
 800b8a8:	7bfb      	ldrb	r3, [r7, #15]
 800b8aa:	4a07      	ldr	r2, [pc, #28]	@ (800b8c8 <disk_write+0x3c>)
 800b8ac:	4413      	add	r3, r2
 800b8ae:	7a18      	ldrb	r0, [r3, #8]
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	68b9      	ldr	r1, [r7, #8]
 800b8b6:	47a0      	blx	r4
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	75fb      	strb	r3, [r7, #23]
  return res;
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	371c      	adds	r7, #28
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd90      	pop	{r4, r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	20005bfc 	.word	0x20005bfc

0800b8cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	603a      	str	r2, [r7, #0]
 800b8d6:	71fb      	strb	r3, [r7, #7]
 800b8d8:	460b      	mov	r3, r1
 800b8da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b8dc:	79fb      	ldrb	r3, [r7, #7]
 800b8de:	4a09      	ldr	r2, [pc, #36]	@ (800b904 <disk_ioctl+0x38>)
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	4413      	add	r3, r2
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	691b      	ldr	r3, [r3, #16]
 800b8e8:	79fa      	ldrb	r2, [r7, #7]
 800b8ea:	4906      	ldr	r1, [pc, #24]	@ (800b904 <disk_ioctl+0x38>)
 800b8ec:	440a      	add	r2, r1
 800b8ee:	7a10      	ldrb	r0, [r2, #8]
 800b8f0:	79b9      	ldrb	r1, [r7, #6]
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	4798      	blx	r3
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	73fb      	strb	r3, [r7, #15]
  return res;
 800b8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3710      	adds	r7, #16
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	20005bfc 	.word	0x20005bfc

0800b908 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	3301      	adds	r3, #1
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b918:	89fb      	ldrh	r3, [r7, #14]
 800b91a:	021b      	lsls	r3, r3, #8
 800b91c:	b21a      	sxth	r2, r3
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	b21b      	sxth	r3, r3
 800b924:	4313      	orrs	r3, r2
 800b926:	b21b      	sxth	r3, r3
 800b928:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b92a:	89fb      	ldrh	r3, [r7, #14]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	3303      	adds	r3, #3
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	021b      	lsls	r3, r3, #8
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	3202      	adds	r2, #2
 800b950:	7812      	ldrb	r2, [r2, #0]
 800b952:	4313      	orrs	r3, r2
 800b954:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	021b      	lsls	r3, r3, #8
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	3201      	adds	r2, #1
 800b95e:	7812      	ldrb	r2, [r2, #0]
 800b960:	4313      	orrs	r3, r2
 800b962:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	021b      	lsls	r3, r3, #8
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	7812      	ldrb	r2, [r2, #0]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	60fb      	str	r3, [r7, #12]
	return rv;
 800b970:	68fb      	ldr	r3, [r7, #12]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3714      	adds	r7, #20
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr

0800b97e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b97e:	b480      	push	{r7}
 800b980:	b083      	sub	sp, #12
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
 800b986:	460b      	mov	r3, r1
 800b988:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	1c5a      	adds	r2, r3, #1
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	887a      	ldrh	r2, [r7, #2]
 800b992:	b2d2      	uxtb	r2, r2
 800b994:	701a      	strb	r2, [r3, #0]
 800b996:	887b      	ldrh	r3, [r7, #2]
 800b998:	0a1b      	lsrs	r3, r3, #8
 800b99a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	1c5a      	adds	r2, r3, #1
 800b9a0:	607a      	str	r2, [r7, #4]
 800b9a2:	887a      	ldrh	r2, [r7, #2]
 800b9a4:	b2d2      	uxtb	r2, r2
 800b9a6:	701a      	strb	r2, [r3, #0]
}
 800b9a8:	bf00      	nop
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	607a      	str	r2, [r7, #4]
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	b2d2      	uxtb	r2, r2
 800b9c8:	701a      	strb	r2, [r3, #0]
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	0a1b      	lsrs	r3, r3, #8
 800b9ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	607a      	str	r2, [r7, #4]
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	b2d2      	uxtb	r2, r2
 800b9da:	701a      	strb	r2, [r3, #0]
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	0a1b      	lsrs	r3, r3, #8
 800b9e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	1c5a      	adds	r2, r3, #1
 800b9e6:	607a      	str	r2, [r7, #4]
 800b9e8:	683a      	ldr	r2, [r7, #0]
 800b9ea:	b2d2      	uxtb	r2, r2
 800b9ec:	701a      	strb	r2, [r3, #0]
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	0a1b      	lsrs	r3, r3, #8
 800b9f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	1c5a      	adds	r2, r3, #1
 800b9f8:	607a      	str	r2, [r7, #4]
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	b2d2      	uxtb	r2, r2
 800b9fe:	701a      	strb	r2, [r3, #0]
}
 800ba00:	bf00      	nop
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ba0c:	b480      	push	{r7}
 800ba0e:	b087      	sub	sp, #28
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00d      	beq.n	800ba42 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	1c53      	adds	r3, r2, #1
 800ba2a:	613b      	str	r3, [r7, #16]
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	1c59      	adds	r1, r3, #1
 800ba30:	6179      	str	r1, [r7, #20]
 800ba32:	7812      	ldrb	r2, [r2, #0]
 800ba34:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	607b      	str	r3, [r7, #4]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1f1      	bne.n	800ba26 <mem_cpy+0x1a>
	}
}
 800ba42:	bf00      	nop
 800ba44:	371c      	adds	r7, #28
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ba4e:	b480      	push	{r7}
 800ba50:	b087      	sub	sp, #28
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	60f8      	str	r0, [r7, #12]
 800ba56:	60b9      	str	r1, [r7, #8]
 800ba58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	1c5a      	adds	r2, r3, #1
 800ba62:	617a      	str	r2, [r7, #20]
 800ba64:	68ba      	ldr	r2, [r7, #8]
 800ba66:	b2d2      	uxtb	r2, r2
 800ba68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	607b      	str	r3, [r7, #4]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1f3      	bne.n	800ba5e <mem_set+0x10>
}
 800ba76:	bf00      	nop
 800ba78:	bf00      	nop
 800ba7a:	371c      	adds	r7, #28
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ba84:	b480      	push	{r7}
 800ba86:	b089      	sub	sp, #36	@ 0x24
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	61fb      	str	r3, [r7, #28]
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	1c5a      	adds	r2, r3, #1
 800baa0:	61fa      	str	r2, [r7, #28]
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	4619      	mov	r1, r3
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	1c5a      	adds	r2, r3, #1
 800baaa:	61ba      	str	r2, [r7, #24]
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	1acb      	subs	r3, r1, r3
 800bab0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	3b01      	subs	r3, #1
 800bab6:	607b      	str	r3, [r7, #4]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d002      	beq.n	800bac4 <mem_cmp+0x40>
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d0eb      	beq.n	800ba9c <mem_cmp+0x18>

	return r;
 800bac4:	697b      	ldr	r3, [r7, #20]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3724      	adds	r7, #36	@ 0x24
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bad2:	b480      	push	{r7}
 800bad4:	b083      	sub	sp, #12
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
 800bada:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800badc:	e002      	b.n	800bae4 <chk_chr+0x12>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	3301      	adds	r3, #1
 800bae2:	607b      	str	r3, [r7, #4]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d005      	beq.n	800baf8 <chk_chr+0x26>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	461a      	mov	r2, r3
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d1f2      	bne.n	800bade <chk_chr+0xc>
	return *str;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	781b      	ldrb	r3, [r3, #0]
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bb12:	2300      	movs	r3, #0
 800bb14:	60bb      	str	r3, [r7, #8]
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	60fb      	str	r3, [r7, #12]
 800bb1a:	e029      	b.n	800bb70 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bb1c:	4a27      	ldr	r2, [pc, #156]	@ (800bbbc <chk_lock+0xb4>)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	011b      	lsls	r3, r3, #4
 800bb22:	4413      	add	r3, r2
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d01d      	beq.n	800bb66 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bb2a:	4a24      	ldr	r2, [pc, #144]	@ (800bbbc <chk_lock+0xb4>)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	011b      	lsls	r3, r3, #4
 800bb30:	4413      	add	r3, r2
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d116      	bne.n	800bb6a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bb3c:	4a1f      	ldr	r2, [pc, #124]	@ (800bbbc <chk_lock+0xb4>)
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	011b      	lsls	r3, r3, #4
 800bb42:	4413      	add	r3, r2
 800bb44:	3304      	adds	r3, #4
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d10c      	bne.n	800bb6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bb50:	4a1a      	ldr	r2, [pc, #104]	@ (800bbbc <chk_lock+0xb4>)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	011b      	lsls	r3, r3, #4
 800bb56:	4413      	add	r3, r2
 800bb58:	3308      	adds	r3, #8
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d102      	bne.n	800bb6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bb64:	e007      	b.n	800bb76 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bb66:	2301      	movs	r3, #1
 800bb68:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	60fb      	str	r3, [r7, #12]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d9d2      	bls.n	800bb1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d109      	bne.n	800bb90 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d102      	bne.n	800bb88 <chk_lock+0x80>
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d101      	bne.n	800bb8c <chk_lock+0x84>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	e010      	b.n	800bbae <chk_lock+0xa6>
 800bb8c:	2312      	movs	r3, #18
 800bb8e:	e00e      	b.n	800bbae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d108      	bne.n	800bba8 <chk_lock+0xa0>
 800bb96:	4a09      	ldr	r2, [pc, #36]	@ (800bbbc <chk_lock+0xb4>)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	011b      	lsls	r3, r3, #4
 800bb9c:	4413      	add	r3, r2
 800bb9e:	330c      	adds	r3, #12
 800bba0:	881b      	ldrh	r3, [r3, #0]
 800bba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bba6:	d101      	bne.n	800bbac <chk_lock+0xa4>
 800bba8:	2310      	movs	r3, #16
 800bbaa:	e000      	b.n	800bbae <chk_lock+0xa6>
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3714      	adds	r7, #20
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	20005bdc 	.word	0x20005bdc

0800bbc0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	607b      	str	r3, [r7, #4]
 800bbca:	e002      	b.n	800bbd2 <enq_lock+0x12>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	607b      	str	r3, [r7, #4]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d806      	bhi.n	800bbe6 <enq_lock+0x26>
 800bbd8:	4a09      	ldr	r2, [pc, #36]	@ (800bc00 <enq_lock+0x40>)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	011b      	lsls	r3, r3, #4
 800bbde:	4413      	add	r3, r2
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1f2      	bne.n	800bbcc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2b02      	cmp	r3, #2
 800bbea:	bf14      	ite	ne
 800bbec:	2301      	movne	r3, #1
 800bbee:	2300      	moveq	r3, #0
 800bbf0:	b2db      	uxtb	r3, r3
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	20005bdc 	.word	0x20005bdc

0800bc04 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bc0e:	2300      	movs	r3, #0
 800bc10:	60fb      	str	r3, [r7, #12]
 800bc12:	e01f      	b.n	800bc54 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bc14:	4a41      	ldr	r2, [pc, #260]	@ (800bd1c <inc_lock+0x118>)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	011b      	lsls	r3, r3, #4
 800bc1a:	4413      	add	r3, r2
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d113      	bne.n	800bc4e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bc26:	4a3d      	ldr	r2, [pc, #244]	@ (800bd1c <inc_lock+0x118>)
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	011b      	lsls	r3, r3, #4
 800bc2c:	4413      	add	r3, r2
 800bc2e:	3304      	adds	r3, #4
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d109      	bne.n	800bc4e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bc3a:	4a38      	ldr	r2, [pc, #224]	@ (800bd1c <inc_lock+0x118>)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	011b      	lsls	r3, r3, #4
 800bc40:	4413      	add	r3, r2
 800bc42:	3308      	adds	r3, #8
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d006      	beq.n	800bc5c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	3301      	adds	r3, #1
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d9dc      	bls.n	800bc14 <inc_lock+0x10>
 800bc5a:	e000      	b.n	800bc5e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bc5c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d132      	bne.n	800bcca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bc64:	2300      	movs	r3, #0
 800bc66:	60fb      	str	r3, [r7, #12]
 800bc68:	e002      	b.n	800bc70 <inc_lock+0x6c>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	60fb      	str	r3, [r7, #12]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d806      	bhi.n	800bc84 <inc_lock+0x80>
 800bc76:	4a29      	ldr	r2, [pc, #164]	@ (800bd1c <inc_lock+0x118>)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	011b      	lsls	r3, r3, #4
 800bc7c:	4413      	add	r3, r2
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1f2      	bne.n	800bc6a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2b02      	cmp	r3, #2
 800bc88:	d101      	bne.n	800bc8e <inc_lock+0x8a>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	e040      	b.n	800bd10 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	4922      	ldr	r1, [pc, #136]	@ (800bd1c <inc_lock+0x118>)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	011b      	lsls	r3, r3, #4
 800bc98:	440b      	add	r3, r1
 800bc9a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	689a      	ldr	r2, [r3, #8]
 800bca0:	491e      	ldr	r1, [pc, #120]	@ (800bd1c <inc_lock+0x118>)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	011b      	lsls	r3, r3, #4
 800bca6:	440b      	add	r3, r1
 800bca8:	3304      	adds	r3, #4
 800bcaa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	695a      	ldr	r2, [r3, #20]
 800bcb0:	491a      	ldr	r1, [pc, #104]	@ (800bd1c <inc_lock+0x118>)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	011b      	lsls	r3, r3, #4
 800bcb6:	440b      	add	r3, r1
 800bcb8:	3308      	adds	r3, #8
 800bcba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bcbc:	4a17      	ldr	r2, [pc, #92]	@ (800bd1c <inc_lock+0x118>)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	011b      	lsls	r3, r3, #4
 800bcc2:	4413      	add	r3, r2
 800bcc4:	330c      	adds	r3, #12
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d009      	beq.n	800bce4 <inc_lock+0xe0>
 800bcd0:	4a12      	ldr	r2, [pc, #72]	@ (800bd1c <inc_lock+0x118>)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	011b      	lsls	r3, r3, #4
 800bcd6:	4413      	add	r3, r2
 800bcd8:	330c      	adds	r3, #12
 800bcda:	881b      	ldrh	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d001      	beq.n	800bce4 <inc_lock+0xe0>
 800bce0:	2300      	movs	r3, #0
 800bce2:	e015      	b.n	800bd10 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d108      	bne.n	800bcfc <inc_lock+0xf8>
 800bcea:	4a0c      	ldr	r2, [pc, #48]	@ (800bd1c <inc_lock+0x118>)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	011b      	lsls	r3, r3, #4
 800bcf0:	4413      	add	r3, r2
 800bcf2:	330c      	adds	r3, #12
 800bcf4:	881b      	ldrh	r3, [r3, #0]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	b29a      	uxth	r2, r3
 800bcfa:	e001      	b.n	800bd00 <inc_lock+0xfc>
 800bcfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bd00:	4906      	ldr	r1, [pc, #24]	@ (800bd1c <inc_lock+0x118>)
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	011b      	lsls	r3, r3, #4
 800bd06:	440b      	add	r3, r1
 800bd08:	330c      	adds	r3, #12
 800bd0a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	3301      	adds	r3, #1
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3714      	adds	r7, #20
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr
 800bd1c:	20005bdc 	.word	0x20005bdc

0800bd20 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	607b      	str	r3, [r7, #4]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d825      	bhi.n	800bd80 <dec_lock+0x60>
		n = Files[i].ctr;
 800bd34:	4a17      	ldr	r2, [pc, #92]	@ (800bd94 <dec_lock+0x74>)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	011b      	lsls	r3, r3, #4
 800bd3a:	4413      	add	r3, r2
 800bd3c:	330c      	adds	r3, #12
 800bd3e:	881b      	ldrh	r3, [r3, #0]
 800bd40:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bd42:	89fb      	ldrh	r3, [r7, #14]
 800bd44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd48:	d101      	bne.n	800bd4e <dec_lock+0x2e>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bd4e:	89fb      	ldrh	r3, [r7, #14]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d002      	beq.n	800bd5a <dec_lock+0x3a>
 800bd54:	89fb      	ldrh	r3, [r7, #14]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bd5a:	4a0e      	ldr	r2, [pc, #56]	@ (800bd94 <dec_lock+0x74>)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	011b      	lsls	r3, r3, #4
 800bd60:	4413      	add	r3, r2
 800bd62:	330c      	adds	r3, #12
 800bd64:	89fa      	ldrh	r2, [r7, #14]
 800bd66:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bd68:	89fb      	ldrh	r3, [r7, #14]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d105      	bne.n	800bd7a <dec_lock+0x5a>
 800bd6e:	4a09      	ldr	r2, [pc, #36]	@ (800bd94 <dec_lock+0x74>)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	011b      	lsls	r3, r3, #4
 800bd74:	4413      	add	r3, r2
 800bd76:	2200      	movs	r2, #0
 800bd78:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	737b      	strb	r3, [r7, #13]
 800bd7e:	e001      	b.n	800bd84 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bd80:	2302      	movs	r3, #2
 800bd82:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bd84:	7b7b      	ldrb	r3, [r7, #13]
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3714      	adds	r7, #20
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	20005bdc 	.word	0x20005bdc

0800bd98 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bda0:	2300      	movs	r3, #0
 800bda2:	60fb      	str	r3, [r7, #12]
 800bda4:	e010      	b.n	800bdc8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bda6:	4a0d      	ldr	r2, [pc, #52]	@ (800bddc <clear_lock+0x44>)
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	011b      	lsls	r3, r3, #4
 800bdac:	4413      	add	r3, r2
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d105      	bne.n	800bdc2 <clear_lock+0x2a>
 800bdb6:	4a09      	ldr	r2, [pc, #36]	@ (800bddc <clear_lock+0x44>)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	011b      	lsls	r3, r3, #4
 800bdbc:	4413      	add	r3, r2
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	60fb      	str	r3, [r7, #12]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d9eb      	bls.n	800bda6 <clear_lock+0xe>
	}
}
 800bdce:	bf00      	nop
 800bdd0:	bf00      	nop
 800bdd2:	3714      	adds	r7, #20
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	20005bdc 	.word	0x20005bdc

0800bde0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b086      	sub	sp, #24
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bde8:	2300      	movs	r3, #0
 800bdea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	78db      	ldrb	r3, [r3, #3]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d034      	beq.n	800be5e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	7858      	ldrb	r0, [r3, #1]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be04:	2301      	movs	r3, #1
 800be06:	697a      	ldr	r2, [r7, #20]
 800be08:	f7ff fd40 	bl	800b88c <disk_write>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d002      	beq.n	800be18 <sync_window+0x38>
			res = FR_DISK_ERR;
 800be12:	2301      	movs	r3, #1
 800be14:	73fb      	strb	r3, [r7, #15]
 800be16:	e022      	b.n	800be5e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	1ad2      	subs	r2, r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	699b      	ldr	r3, [r3, #24]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d217      	bcs.n	800be5e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	789b      	ldrb	r3, [r3, #2]
 800be32:	613b      	str	r3, [r7, #16]
 800be34:	e010      	b.n	800be58 <sync_window+0x78>
					wsect += fs->fsize;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	699b      	ldr	r3, [r3, #24]
 800be3a:	697a      	ldr	r2, [r7, #20]
 800be3c:	4413      	add	r3, r2
 800be3e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	7858      	ldrb	r0, [r3, #1]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be4a:	2301      	movs	r3, #1
 800be4c:	697a      	ldr	r2, [r7, #20]
 800be4e:	f7ff fd1d 	bl	800b88c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	3b01      	subs	r3, #1
 800be56:	613b      	str	r3, [r7, #16]
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d8eb      	bhi.n	800be36 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800be5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3718      	adds	r7, #24
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800be72:	2300      	movs	r3, #0
 800be74:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d01b      	beq.n	800beb8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f7ff ffad 	bl	800bde0 <sync_window>
 800be86:	4603      	mov	r3, r0
 800be88:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d113      	bne.n	800beb8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	7858      	ldrb	r0, [r3, #1]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be9a:	2301      	movs	r3, #1
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	f7ff fcd5 	bl	800b84c <disk_read>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d004      	beq.n	800beb2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bea8:	f04f 33ff 	mov.w	r3, #4294967295
 800beac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800beae:	2301      	movs	r3, #1
 800beb0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	683a      	ldr	r2, [r7, #0]
 800beb6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800beb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
	...

0800bec4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff ff87 	bl	800bde0 <sync_window>
 800bed2:	4603      	mov	r3, r0
 800bed4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bed6:	7bfb      	ldrb	r3, [r7, #15]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d158      	bne.n	800bf8e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	2b03      	cmp	r3, #3
 800bee2:	d148      	bne.n	800bf76 <sync_fs+0xb2>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	791b      	ldrb	r3, [r3, #4]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d144      	bne.n	800bf76 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	3330      	adds	r3, #48	@ 0x30
 800bef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bef4:	2100      	movs	r1, #0
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7ff fda9 	bl	800ba4e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	3330      	adds	r3, #48	@ 0x30
 800bf00:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bf04:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7ff fd38 	bl	800b97e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	3330      	adds	r3, #48	@ 0x30
 800bf12:	4921      	ldr	r1, [pc, #132]	@ (800bf98 <sync_fs+0xd4>)
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7ff fd4d 	bl	800b9b4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	3330      	adds	r3, #48	@ 0x30
 800bf1e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bf22:	491e      	ldr	r1, [pc, #120]	@ (800bf9c <sync_fs+0xd8>)
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7ff fd45 	bl	800b9b4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	3330      	adds	r3, #48	@ 0x30
 800bf2e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	4619      	mov	r1, r3
 800bf38:	4610      	mov	r0, r2
 800bf3a:	f7ff fd3b 	bl	800b9b4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	3330      	adds	r3, #48	@ 0x30
 800bf42:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	4610      	mov	r0, r2
 800bf4e:	f7ff fd31 	bl	800b9b4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	69db      	ldr	r3, [r3, #28]
 800bf56:	1c5a      	adds	r2, r3, #1
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	7858      	ldrb	r0, [r3, #1]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	f7ff fc8e 	bl	800b88c <disk_write>
			fs->fsi_flag = 0;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	785b      	ldrb	r3, [r3, #1]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7ff fca4 	bl	800b8cc <disk_ioctl>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d001      	beq.n	800bf8e <sync_fs+0xca>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bf8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	41615252 	.word	0x41615252
 800bf9c:	61417272 	.word	0x61417272

0800bfa0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	3b02      	subs	r3, #2
 800bfae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	695b      	ldr	r3, [r3, #20]
 800bfb4:	3b02      	subs	r3, #2
 800bfb6:	683a      	ldr	r2, [r7, #0]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d301      	bcc.n	800bfc0 <clust2sect+0x20>
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	e008      	b.n	800bfd2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	895b      	ldrh	r3, [r3, #10]
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	fb03 f202 	mul.w	r2, r3, r2
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfd0:	4413      	add	r3, r2
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b086      	sub	sp, #24
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d904      	bls.n	800bffe <get_fat+0x20>
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	683a      	ldr	r2, [r7, #0]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d302      	bcc.n	800c004 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bffe:	2301      	movs	r3, #1
 800c000:	617b      	str	r3, [r7, #20]
 800c002:	e08e      	b.n	800c122 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c004:	f04f 33ff 	mov.w	r3, #4294967295
 800c008:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	2b03      	cmp	r3, #3
 800c010:	d061      	beq.n	800c0d6 <get_fat+0xf8>
 800c012:	2b03      	cmp	r3, #3
 800c014:	dc7b      	bgt.n	800c10e <get_fat+0x130>
 800c016:	2b01      	cmp	r3, #1
 800c018:	d002      	beq.n	800c020 <get_fat+0x42>
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	d041      	beq.n	800c0a2 <get_fat+0xc4>
 800c01e:	e076      	b.n	800c10e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	60fb      	str	r3, [r7, #12]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	085b      	lsrs	r3, r3, #1
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	4413      	add	r3, r2
 800c02c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	6a1a      	ldr	r2, [r3, #32]
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	0a5b      	lsrs	r3, r3, #9
 800c036:	4413      	add	r3, r2
 800c038:	4619      	mov	r1, r3
 800c03a:	6938      	ldr	r0, [r7, #16]
 800c03c:	f7ff ff14 	bl	800be68 <move_window>
 800c040:	4603      	mov	r3, r0
 800c042:	2b00      	cmp	r3, #0
 800c044:	d166      	bne.n	800c114 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	1c5a      	adds	r2, r3, #1
 800c04a:	60fa      	str	r2, [r7, #12]
 800c04c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	4413      	add	r3, r2
 800c054:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c058:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	6a1a      	ldr	r2, [r3, #32]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	0a5b      	lsrs	r3, r3, #9
 800c062:	4413      	add	r3, r2
 800c064:	4619      	mov	r1, r3
 800c066:	6938      	ldr	r0, [r7, #16]
 800c068:	f7ff fefe 	bl	800be68 <move_window>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d152      	bne.n	800c118 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c078:	693a      	ldr	r2, [r7, #16]
 800c07a:	4413      	add	r3, r2
 800c07c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c080:	021b      	lsls	r3, r3, #8
 800c082:	68ba      	ldr	r2, [r7, #8]
 800c084:	4313      	orrs	r3, r2
 800c086:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	f003 0301 	and.w	r3, r3, #1
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d002      	beq.n	800c098 <get_fat+0xba>
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	091b      	lsrs	r3, r3, #4
 800c096:	e002      	b.n	800c09e <get_fat+0xc0>
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c09e:	617b      	str	r3, [r7, #20]
			break;
 800c0a0:	e03f      	b.n	800c122 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	6a1a      	ldr	r2, [r3, #32]
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	0a1b      	lsrs	r3, r3, #8
 800c0aa:	4413      	add	r3, r2
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	6938      	ldr	r0, [r7, #16]
 800c0b0:	f7ff feda 	bl	800be68 <move_window>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d130      	bne.n	800c11c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	005b      	lsls	r3, r3, #1
 800c0c4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c0c8:	4413      	add	r3, r2
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7ff fc1c 	bl	800b908 <ld_word>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	617b      	str	r3, [r7, #20]
			break;
 800c0d4:	e025      	b.n	800c122 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	6a1a      	ldr	r2, [r3, #32]
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	09db      	lsrs	r3, r3, #7
 800c0de:	4413      	add	r3, r2
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6938      	ldr	r0, [r7, #16]
 800c0e4:	f7ff fec0 	bl	800be68 <move_window>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d118      	bne.n	800c120 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c0fc:	4413      	add	r3, r2
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7ff fc1a 	bl	800b938 <ld_dword>
 800c104:	4603      	mov	r3, r0
 800c106:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c10a:	617b      	str	r3, [r7, #20]
			break;
 800c10c:	e009      	b.n	800c122 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c10e:	2301      	movs	r3, #1
 800c110:	617b      	str	r3, [r7, #20]
 800c112:	e006      	b.n	800c122 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c114:	bf00      	nop
 800c116:	e004      	b.n	800c122 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c118:	bf00      	nop
 800c11a:	e002      	b.n	800c122 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c11c:	bf00      	nop
 800c11e:	e000      	b.n	800c122 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c120:	bf00      	nop
		}
	}

	return val;
 800c122:	697b      	ldr	r3, [r7, #20]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3718      	adds	r7, #24
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c12c:	b590      	push	{r4, r7, lr}
 800c12e:	b089      	sub	sp, #36	@ 0x24
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c138:	2302      	movs	r3, #2
 800c13a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	f240 80d9 	bls.w	800c2f6 <put_fat+0x1ca>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	695b      	ldr	r3, [r3, #20]
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	f080 80d3 	bcs.w	800c2f6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	2b03      	cmp	r3, #3
 800c156:	f000 8096 	beq.w	800c286 <put_fat+0x15a>
 800c15a:	2b03      	cmp	r3, #3
 800c15c:	f300 80cb 	bgt.w	800c2f6 <put_fat+0x1ca>
 800c160:	2b01      	cmp	r3, #1
 800c162:	d002      	beq.n	800c16a <put_fat+0x3e>
 800c164:	2b02      	cmp	r3, #2
 800c166:	d06e      	beq.n	800c246 <put_fat+0x11a>
 800c168:	e0c5      	b.n	800c2f6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	61bb      	str	r3, [r7, #24]
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	085b      	lsrs	r3, r3, #1
 800c172:	69ba      	ldr	r2, [r7, #24]
 800c174:	4413      	add	r3, r2
 800c176:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6a1a      	ldr	r2, [r3, #32]
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	0a5b      	lsrs	r3, r3, #9
 800c180:	4413      	add	r3, r2
 800c182:	4619      	mov	r1, r3
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	f7ff fe6f 	bl	800be68 <move_window>
 800c18a:	4603      	mov	r3, r0
 800c18c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c18e:	7ffb      	ldrb	r3, [r7, #31]
 800c190:	2b00      	cmp	r3, #0
 800c192:	f040 80a9 	bne.w	800c2e8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	1c59      	adds	r1, r3, #1
 800c1a0:	61b9      	str	r1, [r7, #24]
 800c1a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1a6:	4413      	add	r3, r2
 800c1a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	f003 0301 	and.w	r3, r3, #1
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00d      	beq.n	800c1d0 <put_fat+0xa4>
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	b25b      	sxtb	r3, r3
 800c1ba:	f003 030f 	and.w	r3, r3, #15
 800c1be:	b25a      	sxtb	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	011b      	lsls	r3, r3, #4
 800c1c6:	b25b      	sxtb	r3, r3
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	b25b      	sxtb	r3, r3
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	e001      	b.n	800c1d4 <put_fat+0xa8>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	697a      	ldr	r2, [r7, #20]
 800c1d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6a1a      	ldr	r2, [r3, #32]
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	0a5b      	lsrs	r3, r3, #9
 800c1e6:	4413      	add	r3, r2
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	f7ff fe3c 	bl	800be68 <move_window>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c1f4:	7ffb      	ldrb	r3, [r7, #31]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d178      	bne.n	800c2ec <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c206:	4413      	add	r3, r2
 800c208:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	f003 0301 	and.w	r3, r3, #1
 800c210:	2b00      	cmp	r3, #0
 800c212:	d003      	beq.n	800c21c <put_fat+0xf0>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	091b      	lsrs	r3, r3, #4
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	e00e      	b.n	800c23a <put_fat+0x10e>
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	b25b      	sxtb	r3, r3
 800c222:	f023 030f 	bic.w	r3, r3, #15
 800c226:	b25a      	sxtb	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	0a1b      	lsrs	r3, r3, #8
 800c22c:	b25b      	sxtb	r3, r3
 800c22e:	f003 030f 	and.w	r3, r3, #15
 800c232:	b25b      	sxtb	r3, r3
 800c234:	4313      	orrs	r3, r2
 800c236:	b25b      	sxtb	r3, r3
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	697a      	ldr	r2, [r7, #20]
 800c23c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2201      	movs	r2, #1
 800c242:	70da      	strb	r2, [r3, #3]
			break;
 800c244:	e057      	b.n	800c2f6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	6a1a      	ldr	r2, [r3, #32]
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	0a1b      	lsrs	r3, r3, #8
 800c24e:	4413      	add	r3, r2
 800c250:	4619      	mov	r1, r3
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f7ff fe08 	bl	800be68 <move_window>
 800c258:	4603      	mov	r3, r0
 800c25a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c25c:	7ffb      	ldrb	r3, [r7, #31]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d146      	bne.n	800c2f0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	005b      	lsls	r3, r3, #1
 800c26c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c270:	4413      	add	r3, r2
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	b292      	uxth	r2, r2
 800c276:	4611      	mov	r1, r2
 800c278:	4618      	mov	r0, r3
 800c27a:	f7ff fb80 	bl	800b97e <st_word>
			fs->wflag = 1;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2201      	movs	r2, #1
 800c282:	70da      	strb	r2, [r3, #3]
			break;
 800c284:	e037      	b.n	800c2f6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6a1a      	ldr	r2, [r3, #32]
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	09db      	lsrs	r3, r3, #7
 800c28e:	4413      	add	r3, r2
 800c290:	4619      	mov	r1, r3
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f7ff fde8 	bl	800be68 <move_window>
 800c298:	4603      	mov	r3, r0
 800c29a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c29c:	7ffb      	ldrb	r3, [r7, #31]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d128      	bne.n	800c2f4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c2b6:	4413      	add	r3, r2
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7ff fb3d 	bl	800b938 <ld_dword>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c2c4:	4323      	orrs	r3, r4
 800c2c6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c2d6:	4413      	add	r3, r2
 800c2d8:	6879      	ldr	r1, [r7, #4]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7ff fb6a 	bl	800b9b4 <st_dword>
			fs->wflag = 1;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	70da      	strb	r2, [r3, #3]
			break;
 800c2e6:	e006      	b.n	800c2f6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c2e8:	bf00      	nop
 800c2ea:	e004      	b.n	800c2f6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c2ec:	bf00      	nop
 800c2ee:	e002      	b.n	800c2f6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c2f0:	bf00      	nop
 800c2f2:	e000      	b.n	800c2f6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c2f4:	bf00      	nop
		}
	}
	return res;
 800c2f6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3724      	adds	r7, #36	@ 0x24
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd90      	pop	{r4, r7, pc}

0800c300 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b088      	sub	sp, #32
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c30c:	2300      	movs	r3, #0
 800c30e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d904      	bls.n	800c326 <remove_chain+0x26>
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	695b      	ldr	r3, [r3, #20]
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	429a      	cmp	r2, r3
 800c324:	d301      	bcc.n	800c32a <remove_chain+0x2a>
 800c326:	2302      	movs	r3, #2
 800c328:	e04b      	b.n	800c3c2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00c      	beq.n	800c34a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c330:	f04f 32ff 	mov.w	r2, #4294967295
 800c334:	6879      	ldr	r1, [r7, #4]
 800c336:	69b8      	ldr	r0, [r7, #24]
 800c338:	f7ff fef8 	bl	800c12c <put_fat>
 800c33c:	4603      	mov	r3, r0
 800c33e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c340:	7ffb      	ldrb	r3, [r7, #31]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d001      	beq.n	800c34a <remove_chain+0x4a>
 800c346:	7ffb      	ldrb	r3, [r7, #31]
 800c348:	e03b      	b.n	800c3c2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c34a:	68b9      	ldr	r1, [r7, #8]
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f7ff fe46 	bl	800bfde <get_fat>
 800c352:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d031      	beq.n	800c3be <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d101      	bne.n	800c364 <remove_chain+0x64>
 800c360:	2302      	movs	r3, #2
 800c362:	e02e      	b.n	800c3c2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c36a:	d101      	bne.n	800c370 <remove_chain+0x70>
 800c36c:	2301      	movs	r3, #1
 800c36e:	e028      	b.n	800c3c2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c370:	2200      	movs	r2, #0
 800c372:	68b9      	ldr	r1, [r7, #8]
 800c374:	69b8      	ldr	r0, [r7, #24]
 800c376:	f7ff fed9 	bl	800c12c <put_fat>
 800c37a:	4603      	mov	r3, r0
 800c37c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c37e:	7ffb      	ldrb	r3, [r7, #31]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d001      	beq.n	800c388 <remove_chain+0x88>
 800c384:	7ffb      	ldrb	r3, [r7, #31]
 800c386:	e01c      	b.n	800c3c2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	691a      	ldr	r2, [r3, #16]
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	695b      	ldr	r3, [r3, #20]
 800c390:	3b02      	subs	r3, #2
 800c392:	429a      	cmp	r2, r3
 800c394:	d20b      	bcs.n	800c3ae <remove_chain+0xae>
			fs->free_clst++;
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	1c5a      	adds	r2, r3, #1
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	791b      	ldrb	r3, [r3, #4]
 800c3a4:	f043 0301 	orr.w	r3, r3, #1
 800c3a8:	b2da      	uxtb	r2, r3
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	695b      	ldr	r3, [r3, #20]
 800c3b6:	68ba      	ldr	r2, [r7, #8]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d3c6      	bcc.n	800c34a <remove_chain+0x4a>
 800c3bc:	e000      	b.n	800c3c0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c3be:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c3c0:	2300      	movs	r3, #0
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3720      	adds	r7, #32
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b088      	sub	sp, #32
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
 800c3d2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10d      	bne.n	800c3fc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d004      	beq.n	800c3f6 <create_chain+0x2c>
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	695b      	ldr	r3, [r3, #20]
 800c3f0:	69ba      	ldr	r2, [r7, #24]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d31b      	bcc.n	800c42e <create_chain+0x64>
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	61bb      	str	r3, [r7, #24]
 800c3fa:	e018      	b.n	800c42e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c3fc:	6839      	ldr	r1, [r7, #0]
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7ff fded 	bl	800bfde <get_fat>
 800c404:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d801      	bhi.n	800c410 <create_chain+0x46>
 800c40c:	2301      	movs	r3, #1
 800c40e:	e070      	b.n	800c4f2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c416:	d101      	bne.n	800c41c <create_chain+0x52>
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	e06a      	b.n	800c4f2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	695b      	ldr	r3, [r3, #20]
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	429a      	cmp	r2, r3
 800c424:	d201      	bcs.n	800c42a <create_chain+0x60>
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	e063      	b.n	800c4f2 <create_chain+0x128>
		scl = clst;
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	3301      	adds	r3, #1
 800c436:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	695b      	ldr	r3, [r3, #20]
 800c43c:	69fa      	ldr	r2, [r7, #28]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d307      	bcc.n	800c452 <create_chain+0x88>
				ncl = 2;
 800c442:	2302      	movs	r3, #2
 800c444:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c446:	69fa      	ldr	r2, [r7, #28]
 800c448:	69bb      	ldr	r3, [r7, #24]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d901      	bls.n	800c452 <create_chain+0x88>
 800c44e:	2300      	movs	r3, #0
 800c450:	e04f      	b.n	800c4f2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c452:	69f9      	ldr	r1, [r7, #28]
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f7ff fdc2 	bl	800bfde <get_fat>
 800c45a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00e      	beq.n	800c480 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2b01      	cmp	r3, #1
 800c466:	d003      	beq.n	800c470 <create_chain+0xa6>
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46e:	d101      	bne.n	800c474 <create_chain+0xaa>
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	e03e      	b.n	800c4f2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c474:	69fa      	ldr	r2, [r7, #28]
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d1da      	bne.n	800c432 <create_chain+0x68>
 800c47c:	2300      	movs	r3, #0
 800c47e:	e038      	b.n	800c4f2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c480:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c482:	f04f 32ff 	mov.w	r2, #4294967295
 800c486:	69f9      	ldr	r1, [r7, #28]
 800c488:	6938      	ldr	r0, [r7, #16]
 800c48a:	f7ff fe4f 	bl	800c12c <put_fat>
 800c48e:	4603      	mov	r3, r0
 800c490:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c492:	7dfb      	ldrb	r3, [r7, #23]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d109      	bne.n	800c4ac <create_chain+0xe2>
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d006      	beq.n	800c4ac <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c49e:	69fa      	ldr	r2, [r7, #28]
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6938      	ldr	r0, [r7, #16]
 800c4a4:	f7ff fe42 	bl	800c12c <put_fat>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c4ac:	7dfb      	ldrb	r3, [r7, #23]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d116      	bne.n	800c4e0 <create_chain+0x116>
		fs->last_clst = ncl;
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	69fa      	ldr	r2, [r7, #28]
 800c4b6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	691a      	ldr	r2, [r3, #16]
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	695b      	ldr	r3, [r3, #20]
 800c4c0:	3b02      	subs	r3, #2
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d804      	bhi.n	800c4d0 <create_chain+0x106>
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	1e5a      	subs	r2, r3, #1
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	791b      	ldrb	r3, [r3, #4]
 800c4d4:	f043 0301 	orr.w	r3, r3, #1
 800c4d8:	b2da      	uxtb	r2, r3
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	711a      	strb	r2, [r3, #4]
 800c4de:	e007      	b.n	800c4f0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c4e0:	7dfb      	ldrb	r3, [r7, #23]
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d102      	bne.n	800c4ec <create_chain+0x122>
 800c4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ea:	e000      	b.n	800c4ee <create_chain+0x124>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c4f0:	69fb      	ldr	r3, [r7, #28]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3720      	adds	r7, #32
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c4fa:	b480      	push	{r7}
 800c4fc:	b087      	sub	sp, #28
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c50e:	3304      	adds	r3, #4
 800c510:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	0a5b      	lsrs	r3, r3, #9
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	8952      	ldrh	r2, [r2, #10]
 800c51a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c51e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	1d1a      	adds	r2, r3, #4
 800c524:	613a      	str	r2, [r7, #16]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d101      	bne.n	800c534 <clmt_clust+0x3a>
 800c530:	2300      	movs	r3, #0
 800c532:	e010      	b.n	800c556 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c534:	697a      	ldr	r2, [r7, #20]
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d307      	bcc.n	800c54c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c53c:	697a      	ldr	r2, [r7, #20]
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	617b      	str	r3, [r7, #20]
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	3304      	adds	r3, #4
 800c548:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c54a:	e7e9      	b.n	800c520 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c54c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	4413      	add	r3, r2
}
 800c556:	4618      	mov	r0, r3
 800c558:	371c      	adds	r7, #28
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr

0800c562 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b086      	sub	sp, #24
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
 800c56a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c578:	d204      	bcs.n	800c584 <dir_sdi+0x22>
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	f003 031f 	and.w	r3, r3, #31
 800c580:	2b00      	cmp	r3, #0
 800c582:	d001      	beq.n	800c588 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c584:	2302      	movs	r3, #2
 800c586:	e063      	b.n	800c650 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	689b      	ldr	r3, [r3, #8]
 800c592:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d106      	bne.n	800c5a8 <dir_sdi+0x46>
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	d902      	bls.n	800c5a8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5a6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10c      	bne.n	800c5c8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	095b      	lsrs	r3, r3, #5
 800c5b2:	693a      	ldr	r2, [r7, #16]
 800c5b4:	8912      	ldrh	r2, [r2, #8]
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d301      	bcc.n	800c5be <dir_sdi+0x5c>
 800c5ba:	2302      	movs	r3, #2
 800c5bc:	e048      	b.n	800c650 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	61da      	str	r2, [r3, #28]
 800c5c6:	e029      	b.n	800c61c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	895b      	ldrh	r3, [r3, #10]
 800c5cc:	025b      	lsls	r3, r3, #9
 800c5ce:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c5d0:	e019      	b.n	800c606 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6979      	ldr	r1, [r7, #20]
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7ff fd01 	bl	800bfde <get_fat>
 800c5dc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5e4:	d101      	bne.n	800c5ea <dir_sdi+0x88>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e032      	b.n	800c650 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d904      	bls.n	800c5fa <dir_sdi+0x98>
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	695b      	ldr	r3, [r3, #20]
 800c5f4:	697a      	ldr	r2, [r7, #20]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d301      	bcc.n	800c5fe <dir_sdi+0x9c>
 800c5fa:	2302      	movs	r3, #2
 800c5fc:	e028      	b.n	800c650 <dir_sdi+0xee>
			ofs -= csz;
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	1ad3      	subs	r3, r2, r3
 800c604:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d2e1      	bcs.n	800c5d2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c60e:	6979      	ldr	r1, [r7, #20]
 800c610:	6938      	ldr	r0, [r7, #16]
 800c612:	f7ff fcc5 	bl	800bfa0 <clust2sect>
 800c616:	4602      	mov	r2, r0
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	697a      	ldr	r2, [r7, #20]
 800c620:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	69db      	ldr	r3, [r3, #28]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d101      	bne.n	800c62e <dir_sdi+0xcc>
 800c62a:	2302      	movs	r3, #2
 800c62c:	e010      	b.n	800c650 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	69da      	ldr	r2, [r3, #28]
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	0a5b      	lsrs	r3, r3, #9
 800c636:	441a      	add	r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c648:	441a      	add	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	3718      	adds	r7, #24
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	695b      	ldr	r3, [r3, #20]
 800c66c:	3320      	adds	r3, #32
 800c66e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	69db      	ldr	r3, [r3, #28]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d003      	beq.n	800c680 <dir_next+0x28>
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c67e:	d301      	bcc.n	800c684 <dir_next+0x2c>
 800c680:	2304      	movs	r3, #4
 800c682:	e0aa      	b.n	800c7da <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f040 8098 	bne.w	800c7c0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	69db      	ldr	r3, [r3, #28]
 800c694:	1c5a      	adds	r2, r3, #1
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	699b      	ldr	r3, [r3, #24]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d10b      	bne.n	800c6ba <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	095b      	lsrs	r3, r3, #5
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	8912      	ldrh	r2, [r2, #8]
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	f0c0 8088 	bcc.w	800c7c0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	61da      	str	r2, [r3, #28]
 800c6b6:	2304      	movs	r3, #4
 800c6b8:	e08f      	b.n	800c7da <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	0a5b      	lsrs	r3, r3, #9
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	8952      	ldrh	r2, [r2, #10]
 800c6c2:	3a01      	subs	r2, #1
 800c6c4:	4013      	ands	r3, r2
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d17a      	bne.n	800c7c0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	699b      	ldr	r3, [r3, #24]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	4610      	mov	r0, r2
 800c6d4:	f7ff fc83 	bl	800bfde <get_fat>
 800c6d8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d801      	bhi.n	800c6e4 <dir_next+0x8c>
 800c6e0:	2302      	movs	r3, #2
 800c6e2:	e07a      	b.n	800c7da <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ea:	d101      	bne.n	800c6f0 <dir_next+0x98>
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	e074      	b.n	800c7da <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	695b      	ldr	r3, [r3, #20]
 800c6f4:	697a      	ldr	r2, [r7, #20]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d358      	bcc.n	800c7ac <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d104      	bne.n	800c70a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	61da      	str	r2, [r3, #28]
 800c706:	2304      	movs	r3, #4
 800c708:	e067      	b.n	800c7da <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	699b      	ldr	r3, [r3, #24]
 800c710:	4619      	mov	r1, r3
 800c712:	4610      	mov	r0, r2
 800c714:	f7ff fe59 	bl	800c3ca <create_chain>
 800c718:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d101      	bne.n	800c724 <dir_next+0xcc>
 800c720:	2307      	movs	r3, #7
 800c722:	e05a      	b.n	800c7da <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	2b01      	cmp	r3, #1
 800c728:	d101      	bne.n	800c72e <dir_next+0xd6>
 800c72a:	2302      	movs	r3, #2
 800c72c:	e055      	b.n	800c7da <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c734:	d101      	bne.n	800c73a <dir_next+0xe2>
 800c736:	2301      	movs	r3, #1
 800c738:	e04f      	b.n	800c7da <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c73a:	68f8      	ldr	r0, [r7, #12]
 800c73c:	f7ff fb50 	bl	800bde0 <sync_window>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d001      	beq.n	800c74a <dir_next+0xf2>
 800c746:	2301      	movs	r3, #1
 800c748:	e047      	b.n	800c7da <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3330      	adds	r3, #48	@ 0x30
 800c74e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c752:	2100      	movs	r1, #0
 800c754:	4618      	mov	r0, r3
 800c756:	f7ff f97a 	bl	800ba4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c75a:	2300      	movs	r3, #0
 800c75c:	613b      	str	r3, [r7, #16]
 800c75e:	6979      	ldr	r1, [r7, #20]
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f7ff fc1d 	bl	800bfa0 <clust2sect>
 800c766:	4602      	mov	r2, r0
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c76c:	e012      	b.n	800c794 <dir_next+0x13c>
						fs->wflag = 1;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2201      	movs	r2, #1
 800c772:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c774:	68f8      	ldr	r0, [r7, #12]
 800c776:	f7ff fb33 	bl	800bde0 <sync_window>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d001      	beq.n	800c784 <dir_next+0x12c>
 800c780:	2301      	movs	r3, #1
 800c782:	e02a      	b.n	800c7da <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	3301      	adds	r3, #1
 800c788:	613b      	str	r3, [r7, #16]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c78e:	1c5a      	adds	r2, r3, #1
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	895b      	ldrh	r3, [r3, #10]
 800c798:	461a      	mov	r2, r3
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d3e6      	bcc.n	800c76e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	1ad2      	subs	r2, r2, r3
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	697a      	ldr	r2, [r7, #20]
 800c7b0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c7b2:	6979      	ldr	r1, [r7, #20]
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f7ff fbf3 	bl	800bfa0 <clust2sect>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	68ba      	ldr	r2, [r7, #8]
 800c7c4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7d2:	441a      	add	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3718      	adds	r7, #24
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b086      	sub	sp, #24
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c7f2:	2100      	movs	r1, #0
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f7ff feb4 	bl	800c562 <dir_sdi>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c7fe:	7dfb      	ldrb	r3, [r7, #23]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d12b      	bne.n	800c85c <dir_alloc+0x7a>
		n = 0;
 800c804:	2300      	movs	r3, #0
 800c806:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	69db      	ldr	r3, [r3, #28]
 800c80c:	4619      	mov	r1, r3
 800c80e:	68f8      	ldr	r0, [r7, #12]
 800c810:	f7ff fb2a 	bl	800be68 <move_window>
 800c814:	4603      	mov	r3, r0
 800c816:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c818:	7dfb      	ldrb	r3, [r7, #23]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d11d      	bne.n	800c85a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a1b      	ldr	r3, [r3, #32]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	2be5      	cmp	r3, #229	@ 0xe5
 800c826:	d004      	beq.n	800c832 <dir_alloc+0x50>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6a1b      	ldr	r3, [r3, #32]
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d107      	bne.n	800c842 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	3301      	adds	r3, #1
 800c836:	613b      	str	r3, [r7, #16]
 800c838:	693a      	ldr	r2, [r7, #16]
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d102      	bne.n	800c846 <dir_alloc+0x64>
 800c840:	e00c      	b.n	800c85c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c842:	2300      	movs	r3, #0
 800c844:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c846:	2101      	movs	r1, #1
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7ff ff05 	bl	800c658 <dir_next>
 800c84e:	4603      	mov	r3, r0
 800c850:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c852:	7dfb      	ldrb	r3, [r7, #23]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d0d7      	beq.n	800c808 <dir_alloc+0x26>
 800c858:	e000      	b.n	800c85c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c85a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c85c:	7dfb      	ldrb	r3, [r7, #23]
 800c85e:	2b04      	cmp	r3, #4
 800c860:	d101      	bne.n	800c866 <dir_alloc+0x84>
 800c862:	2307      	movs	r3, #7
 800c864:	75fb      	strb	r3, [r7, #23]
	return res;
 800c866:	7dfb      	ldrb	r3, [r7, #23]
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3718      	adds	r7, #24
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	331a      	adds	r3, #26
 800c87e:	4618      	mov	r0, r3
 800c880:	f7ff f842 	bl	800b908 <ld_word>
 800c884:	4603      	mov	r3, r0
 800c886:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	2b03      	cmp	r3, #3
 800c88e:	d109      	bne.n	800c8a4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	3314      	adds	r3, #20
 800c894:	4618      	mov	r0, r3
 800c896:	f7ff f837 	bl	800b908 <ld_word>
 800c89a:	4603      	mov	r3, r0
 800c89c:	041b      	lsls	r3, r3, #16
 800c89e:	68fa      	ldr	r2, [r7, #12]
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b084      	sub	sp, #16
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	60f8      	str	r0, [r7, #12]
 800c8b6:	60b9      	str	r1, [r7, #8]
 800c8b8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	331a      	adds	r3, #26
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	b292      	uxth	r2, r2
 800c8c2:	4611      	mov	r1, r2
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7ff f85a 	bl	800b97e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d109      	bne.n	800c8e6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	f103 0214 	add.w	r2, r3, #20
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	0c1b      	lsrs	r3, r3, #16
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	4619      	mov	r1, r3
 800c8e0:	4610      	mov	r0, r2
 800c8e2:	f7ff f84c 	bl	800b97e <st_word>
	}
}
 800c8e6:	bf00      	nop
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b086      	sub	sp, #24
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f7ff fe2f 	bl	800c562 <dir_sdi>
 800c904:	4603      	mov	r3, r0
 800c906:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c908:	7dfb      	ldrb	r3, [r7, #23]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d001      	beq.n	800c912 <dir_find+0x24>
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
 800c910:	e03e      	b.n	800c990 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	69db      	ldr	r3, [r3, #28]
 800c916:	4619      	mov	r1, r3
 800c918:	6938      	ldr	r0, [r7, #16]
 800c91a:	f7ff faa5 	bl	800be68 <move_window>
 800c91e:	4603      	mov	r3, r0
 800c920:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c922:	7dfb      	ldrb	r3, [r7, #23]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d12f      	bne.n	800c988 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6a1b      	ldr	r3, [r3, #32]
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c930:	7bfb      	ldrb	r3, [r7, #15]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d102      	bne.n	800c93c <dir_find+0x4e>
 800c936:	2304      	movs	r3, #4
 800c938:	75fb      	strb	r3, [r7, #23]
 800c93a:	e028      	b.n	800c98e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6a1b      	ldr	r3, [r3, #32]
 800c940:	330b      	adds	r3, #11
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c948:	b2da      	uxtb	r2, r3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6a1b      	ldr	r3, [r3, #32]
 800c952:	330b      	adds	r3, #11
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	f003 0308 	and.w	r3, r3, #8
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d10a      	bne.n	800c974 <dir_find+0x86>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a18      	ldr	r0, [r3, #32]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	3324      	adds	r3, #36	@ 0x24
 800c966:	220b      	movs	r2, #11
 800c968:	4619      	mov	r1, r3
 800c96a:	f7ff f88b 	bl	800ba84 <mem_cmp>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00b      	beq.n	800c98c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c974:	2100      	movs	r1, #0
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7ff fe6e 	bl	800c658 <dir_next>
 800c97c:	4603      	mov	r3, r0
 800c97e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c980:	7dfb      	ldrb	r3, [r7, #23]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d0c5      	beq.n	800c912 <dir_find+0x24>
 800c986:	e002      	b.n	800c98e <dir_find+0xa0>
		if (res != FR_OK) break;
 800c988:	bf00      	nop
 800c98a:	e000      	b.n	800c98e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c98c:	bf00      	nop

	return res;
 800c98e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3718      	adds	r7, #24
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c9a6:	2101      	movs	r1, #1
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7ff ff1a 	bl	800c7e2 <dir_alloc>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c9b2:	7bfb      	ldrb	r3, [r7, #15]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d11c      	bne.n	800c9f2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	69db      	ldr	r3, [r3, #28]
 800c9bc:	4619      	mov	r1, r3
 800c9be:	68b8      	ldr	r0, [r7, #8]
 800c9c0:	f7ff fa52 	bl	800be68 <move_window>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c9c8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d111      	bne.n	800c9f2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a1b      	ldr	r3, [r3, #32]
 800c9d2:	2220      	movs	r2, #32
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7ff f839 	bl	800ba4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6a18      	ldr	r0, [r3, #32]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	3324      	adds	r3, #36	@ 0x24
 800c9e4:	220b      	movs	r2, #11
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	f7ff f810 	bl	800ba0c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b088      	sub	sp, #32
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	60fb      	str	r3, [r7, #12]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	3324      	adds	r3, #36	@ 0x24
 800ca10:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ca12:	220b      	movs	r2, #11
 800ca14:	2120      	movs	r1, #32
 800ca16:	68b8      	ldr	r0, [r7, #8]
 800ca18:	f7ff f819 	bl	800ba4e <mem_set>
	si = i = 0; ni = 8;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	613b      	str	r3, [r7, #16]
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	61fb      	str	r3, [r7, #28]
 800ca24:	2308      	movs	r3, #8
 800ca26:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	1c5a      	adds	r2, r3, #1
 800ca2c:	61fa      	str	r2, [r7, #28]
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	4413      	add	r3, r2
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ca36:	7efb      	ldrb	r3, [r7, #27]
 800ca38:	2b20      	cmp	r3, #32
 800ca3a:	d94e      	bls.n	800cada <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ca3c:	7efb      	ldrb	r3, [r7, #27]
 800ca3e:	2b2f      	cmp	r3, #47	@ 0x2f
 800ca40:	d006      	beq.n	800ca50 <create_name+0x54>
 800ca42:	7efb      	ldrb	r3, [r7, #27]
 800ca44:	2b5c      	cmp	r3, #92	@ 0x5c
 800ca46:	d110      	bne.n	800ca6a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ca48:	e002      	b.n	800ca50 <create_name+0x54>
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	61fb      	str	r3, [r7, #28]
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	4413      	add	r3, r2
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	2b2f      	cmp	r3, #47	@ 0x2f
 800ca5a:	d0f6      	beq.n	800ca4a <create_name+0x4e>
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	4413      	add	r3, r2
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	2b5c      	cmp	r3, #92	@ 0x5c
 800ca66:	d0f0      	beq.n	800ca4a <create_name+0x4e>
			break;
 800ca68:	e038      	b.n	800cadc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ca6a:	7efb      	ldrb	r3, [r7, #27]
 800ca6c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca6e:	d003      	beq.n	800ca78 <create_name+0x7c>
 800ca70:	693a      	ldr	r2, [r7, #16]
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d30c      	bcc.n	800ca92 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	2b0b      	cmp	r3, #11
 800ca7c:	d002      	beq.n	800ca84 <create_name+0x88>
 800ca7e:	7efb      	ldrb	r3, [r7, #27]
 800ca80:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca82:	d001      	beq.n	800ca88 <create_name+0x8c>
 800ca84:	2306      	movs	r3, #6
 800ca86:	e044      	b.n	800cb12 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ca88:	2308      	movs	r3, #8
 800ca8a:	613b      	str	r3, [r7, #16]
 800ca8c:	230b      	movs	r3, #11
 800ca8e:	617b      	str	r3, [r7, #20]
			continue;
 800ca90:	e022      	b.n	800cad8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ca92:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	da04      	bge.n	800caa4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ca9a:	7efb      	ldrb	r3, [r7, #27]
 800ca9c:	3b80      	subs	r3, #128	@ 0x80
 800ca9e:	4a1f      	ldr	r2, [pc, #124]	@ (800cb1c <create_name+0x120>)
 800caa0:	5cd3      	ldrb	r3, [r2, r3]
 800caa2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800caa4:	7efb      	ldrb	r3, [r7, #27]
 800caa6:	4619      	mov	r1, r3
 800caa8:	481d      	ldr	r0, [pc, #116]	@ (800cb20 <create_name+0x124>)
 800caaa:	f7ff f812 	bl	800bad2 <chk_chr>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d001      	beq.n	800cab8 <create_name+0xbc>
 800cab4:	2306      	movs	r3, #6
 800cab6:	e02c      	b.n	800cb12 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cab8:	7efb      	ldrb	r3, [r7, #27]
 800caba:	2b60      	cmp	r3, #96	@ 0x60
 800cabc:	d905      	bls.n	800caca <create_name+0xce>
 800cabe:	7efb      	ldrb	r3, [r7, #27]
 800cac0:	2b7a      	cmp	r3, #122	@ 0x7a
 800cac2:	d802      	bhi.n	800caca <create_name+0xce>
 800cac4:	7efb      	ldrb	r3, [r7, #27]
 800cac6:	3b20      	subs	r3, #32
 800cac8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	1c5a      	adds	r2, r3, #1
 800cace:	613a      	str	r2, [r7, #16]
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	4413      	add	r3, r2
 800cad4:	7efa      	ldrb	r2, [r7, #27]
 800cad6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cad8:	e7a6      	b.n	800ca28 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cada:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	441a      	add	r2, r3
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d101      	bne.n	800caf0 <create_name+0xf4>
 800caec:	2306      	movs	r3, #6
 800caee:	e010      	b.n	800cb12 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	2be5      	cmp	r3, #229	@ 0xe5
 800caf6:	d102      	bne.n	800cafe <create_name+0x102>
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	2205      	movs	r2, #5
 800cafc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cafe:	7efb      	ldrb	r3, [r7, #27]
 800cb00:	2b20      	cmp	r3, #32
 800cb02:	d801      	bhi.n	800cb08 <create_name+0x10c>
 800cb04:	2204      	movs	r2, #4
 800cb06:	e000      	b.n	800cb0a <create_name+0x10e>
 800cb08:	2200      	movs	r2, #0
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	330b      	adds	r3, #11
 800cb0e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cb10:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3720      	adds	r7, #32
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	08015dcc 	.word	0x08015dcc
 800cb20:	08015d24 	.word	0x08015d24

0800cb24 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b086      	sub	sp, #24
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cb38:	e002      	b.n	800cb40 <follow_path+0x1c>
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	603b      	str	r3, [r7, #0]
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	2b2f      	cmp	r3, #47	@ 0x2f
 800cb46:	d0f8      	beq.n	800cb3a <follow_path+0x16>
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	2b5c      	cmp	r3, #92	@ 0x5c
 800cb4e:	d0f4      	beq.n	800cb3a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	2200      	movs	r2, #0
 800cb54:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	2b1f      	cmp	r3, #31
 800cb5c:	d80a      	bhi.n	800cb74 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2280      	movs	r2, #128	@ 0x80
 800cb62:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800cb66:	2100      	movs	r1, #0
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f7ff fcfa 	bl	800c562 <dir_sdi>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	75fb      	strb	r3, [r7, #23]
 800cb72:	e043      	b.n	800cbfc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cb74:	463b      	mov	r3, r7
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7ff ff3f 	bl	800c9fc <create_name>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cb82:	7dfb      	ldrb	r3, [r7, #23]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d134      	bne.n	800cbf2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f7ff feb0 	bl	800c8ee <dir_find>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cb98:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cb9a:	7dfb      	ldrb	r3, [r7, #23]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d00a      	beq.n	800cbb6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cba0:	7dfb      	ldrb	r3, [r7, #23]
 800cba2:	2b04      	cmp	r3, #4
 800cba4:	d127      	bne.n	800cbf6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cba6:	7afb      	ldrb	r3, [r7, #11]
 800cba8:	f003 0304 	and.w	r3, r3, #4
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d122      	bne.n	800cbf6 <follow_path+0xd2>
 800cbb0:	2305      	movs	r3, #5
 800cbb2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cbb4:	e01f      	b.n	800cbf6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cbb6:	7afb      	ldrb	r3, [r7, #11]
 800cbb8:	f003 0304 	and.w	r3, r3, #4
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d11c      	bne.n	800cbfa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	799b      	ldrb	r3, [r3, #6]
 800cbc4:	f003 0310 	and.w	r3, r3, #16
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d102      	bne.n	800cbd2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cbcc:	2305      	movs	r3, #5
 800cbce:	75fb      	strb	r3, [r7, #23]
 800cbd0:	e014      	b.n	800cbfc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	695b      	ldr	r3, [r3, #20]
 800cbdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe0:	4413      	add	r3, r2
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	68f8      	ldr	r0, [r7, #12]
 800cbe6:	f7ff fe43 	bl	800c870 <ld_clust>
 800cbea:	4602      	mov	r2, r0
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cbf0:	e7c0      	b.n	800cb74 <follow_path+0x50>
			if (res != FR_OK) break;
 800cbf2:	bf00      	nop
 800cbf4:	e002      	b.n	800cbfc <follow_path+0xd8>
				break;
 800cbf6:	bf00      	nop
 800cbf8:	e000      	b.n	800cbfc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cbfa:	bf00      	nop
			}
		}
	}

	return res;
 800cbfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3718      	adds	r7, #24
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cc06:	b480      	push	{r7}
 800cc08:	b087      	sub	sp, #28
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cc0e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc12:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d031      	beq.n	800cc80 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	617b      	str	r3, [r7, #20]
 800cc22:	e002      	b.n	800cc2a <get_ldnumber+0x24>
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	3301      	adds	r3, #1
 800cc28:	617b      	str	r3, [r7, #20]
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	2b20      	cmp	r3, #32
 800cc30:	d903      	bls.n	800cc3a <get_ldnumber+0x34>
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	2b3a      	cmp	r3, #58	@ 0x3a
 800cc38:	d1f4      	bne.n	800cc24 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	2b3a      	cmp	r3, #58	@ 0x3a
 800cc40:	d11c      	bne.n	800cc7c <get_ldnumber+0x76>
			tp = *path;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	1c5a      	adds	r2, r3, #1
 800cc4c:	60fa      	str	r2, [r7, #12]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	3b30      	subs	r3, #48	@ 0x30
 800cc52:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	2b09      	cmp	r3, #9
 800cc58:	d80e      	bhi.n	800cc78 <get_ldnumber+0x72>
 800cc5a:	68fa      	ldr	r2, [r7, #12]
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d10a      	bne.n	800cc78 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d107      	bne.n	800cc78 <get_ldnumber+0x72>
					vol = (int)i;
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	617b      	str	r3, [r7, #20]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	697a      	ldr	r2, [r7, #20]
 800cc76:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	e002      	b.n	800cc82 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cc80:	693b      	ldr	r3, [r7, #16]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	371c      	adds	r7, #28
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
	...

0800cc90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	70da      	strb	r2, [r3, #3]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f04f 32ff 	mov.w	r2, #4294967295
 800cca6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cca8:	6839      	ldr	r1, [r7, #0]
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7ff f8dc 	bl	800be68 <move_window>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d001      	beq.n	800ccba <check_fs+0x2a>
 800ccb6:	2304      	movs	r3, #4
 800ccb8:	e038      	b.n	800cd2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	3330      	adds	r3, #48	@ 0x30
 800ccbe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7fe fe20 	bl	800b908 <ld_word>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	461a      	mov	r2, r3
 800cccc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d001      	beq.n	800ccd8 <check_fs+0x48>
 800ccd4:	2303      	movs	r3, #3
 800ccd6:	e029      	b.n	800cd2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ccde:	2be9      	cmp	r3, #233	@ 0xe9
 800cce0:	d009      	beq.n	800ccf6 <check_fs+0x66>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cce8:	2beb      	cmp	r3, #235	@ 0xeb
 800ccea:	d11e      	bne.n	800cd2a <check_fs+0x9a>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ccf2:	2b90      	cmp	r3, #144	@ 0x90
 800ccf4:	d119      	bne.n	800cd2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	3330      	adds	r3, #48	@ 0x30
 800ccfa:	3336      	adds	r3, #54	@ 0x36
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7fe fe1b 	bl	800b938 <ld_dword>
 800cd02:	4603      	mov	r3, r0
 800cd04:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cd08:	4a0a      	ldr	r2, [pc, #40]	@ (800cd34 <check_fs+0xa4>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d101      	bne.n	800cd12 <check_fs+0x82>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	e00c      	b.n	800cd2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	3330      	adds	r3, #48	@ 0x30
 800cd16:	3352      	adds	r3, #82	@ 0x52
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fe fe0d 	bl	800b938 <ld_dword>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	4a05      	ldr	r2, [pc, #20]	@ (800cd38 <check_fs+0xa8>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d101      	bne.n	800cd2a <check_fs+0x9a>
 800cd26:	2300      	movs	r3, #0
 800cd28:	e000      	b.n	800cd2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cd2a:	2302      	movs	r3, #2
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3708      	adds	r7, #8
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	00544146 	.word	0x00544146
 800cd38:	33544146 	.word	0x33544146

0800cd3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b096      	sub	sp, #88	@ 0x58
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	4613      	mov	r3, r2
 800cd48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f7ff ff58 	bl	800cc06 <get_ldnumber>
 800cd56:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	da01      	bge.n	800cd62 <find_volume+0x26>
 800cd5e:	230b      	movs	r3, #11
 800cd60:	e22d      	b.n	800d1be <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cd62:	4aa1      	ldr	r2, [pc, #644]	@ (800cfe8 <find_volume+0x2ac>)
 800cd64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd6a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d101      	bne.n	800cd76 <find_volume+0x3a>
 800cd72:	230c      	movs	r3, #12
 800cd74:	e223      	b.n	800d1be <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cd7c:	79fb      	ldrb	r3, [r7, #7]
 800cd7e:	f023 0301 	bic.w	r3, r3, #1
 800cd82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d01a      	beq.n	800cdc2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd8e:	785b      	ldrb	r3, [r3, #1]
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7fe fd1b 	bl	800b7cc <disk_status>
 800cd96:	4603      	mov	r3, r0
 800cd98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cd9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cda0:	f003 0301 	and.w	r3, r3, #1
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d10c      	bne.n	800cdc2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cda8:	79fb      	ldrb	r3, [r7, #7]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d007      	beq.n	800cdbe <find_volume+0x82>
 800cdae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cdb2:	f003 0304 	and.w	r3, r3, #4
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d001      	beq.n	800cdbe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cdba:	230a      	movs	r3, #10
 800cdbc:	e1ff      	b.n	800d1be <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	e1fd      	b.n	800d1be <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cdc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cdc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdca:	b2da      	uxtb	r2, r3
 800cdcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd2:	785b      	ldrb	r3, [r3, #1]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7fe fd13 	bl	800b800 <disk_initialize>
 800cdda:	4603      	mov	r3, r0
 800cddc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cde0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cde4:	f003 0301 	and.w	r3, r3, #1
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d001      	beq.n	800cdf0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cdec:	2303      	movs	r3, #3
 800cdee:	e1e6      	b.n	800d1be <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cdf0:	79fb      	ldrb	r3, [r7, #7]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d007      	beq.n	800ce06 <find_volume+0xca>
 800cdf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cdfa:	f003 0304 	and.w	r3, r3, #4
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d001      	beq.n	800ce06 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ce02:	230a      	movs	r3, #10
 800ce04:	e1db      	b.n	800d1be <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ce06:	2300      	movs	r3, #0
 800ce08:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ce0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ce0c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ce0e:	f7ff ff3f 	bl	800cc90 <check_fs>
 800ce12:	4603      	mov	r3, r0
 800ce14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ce18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d149      	bne.n	800ceb4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ce20:	2300      	movs	r3, #0
 800ce22:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce24:	e01e      	b.n	800ce64 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ce26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce28:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce2e:	011b      	lsls	r3, r3, #4
 800ce30:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ce34:	4413      	add	r3, r2
 800ce36:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ce38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce3a:	3304      	adds	r3, #4
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d006      	beq.n	800ce50 <find_volume+0x114>
 800ce42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce44:	3308      	adds	r3, #8
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7fe fd76 	bl	800b938 <ld_dword>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	e000      	b.n	800ce52 <find_volume+0x116>
 800ce50:	2200      	movs	r2, #0
 800ce52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	3358      	adds	r3, #88	@ 0x58
 800ce58:	443b      	add	r3, r7
 800ce5a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ce5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce60:	3301      	adds	r3, #1
 800ce62:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce66:	2b03      	cmp	r3, #3
 800ce68:	d9dd      	bls.n	800ce26 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ce6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d002      	beq.n	800ce7a <find_volume+0x13e>
 800ce74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce76:	3b01      	subs	r3, #1
 800ce78:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ce7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	3358      	adds	r3, #88	@ 0x58
 800ce80:	443b      	add	r3, r7
 800ce82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ce86:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ce88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d005      	beq.n	800ce9a <find_volume+0x15e>
 800ce8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ce90:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ce92:	f7ff fefd 	bl	800cc90 <check_fs>
 800ce96:	4603      	mov	r3, r0
 800ce98:	e000      	b.n	800ce9c <find_volume+0x160>
 800ce9a:	2303      	movs	r3, #3
 800ce9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cea0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d905      	bls.n	800ceb4 <find_volume+0x178>
 800cea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceaa:	3301      	adds	r3, #1
 800ceac:	643b      	str	r3, [r7, #64]	@ 0x40
 800ceae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceb0:	2b03      	cmp	r3, #3
 800ceb2:	d9e2      	bls.n	800ce7a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ceb4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ceb8:	2b04      	cmp	r3, #4
 800ceba:	d101      	bne.n	800cec0 <find_volume+0x184>
 800cebc:	2301      	movs	r3, #1
 800cebe:	e17e      	b.n	800d1be <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cec0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d901      	bls.n	800cecc <find_volume+0x190>
 800cec8:	230d      	movs	r3, #13
 800ceca:	e178      	b.n	800d1be <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cece:	3330      	adds	r3, #48	@ 0x30
 800ced0:	330b      	adds	r3, #11
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fe fd18 	bl	800b908 <ld_word>
 800ced8:	4603      	mov	r3, r0
 800ceda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cede:	d001      	beq.n	800cee4 <find_volume+0x1a8>
 800cee0:	230d      	movs	r3, #13
 800cee2:	e16c      	b.n	800d1be <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee6:	3330      	adds	r3, #48	@ 0x30
 800cee8:	3316      	adds	r3, #22
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7fe fd0c 	bl	800b908 <ld_word>
 800cef0:	4603      	mov	r3, r0
 800cef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d106      	bne.n	800cf08 <find_volume+0x1cc>
 800cefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cefc:	3330      	adds	r3, #48	@ 0x30
 800cefe:	3324      	adds	r3, #36	@ 0x24
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7fe fd19 	bl	800b938 <ld_dword>
 800cf06:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800cf08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cf0c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cf0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf10:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800cf14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf16:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cf18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf1a:	789b      	ldrb	r3, [r3, #2]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d005      	beq.n	800cf2c <find_volume+0x1f0>
 800cf20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf22:	789b      	ldrb	r3, [r3, #2]
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	d001      	beq.n	800cf2c <find_volume+0x1f0>
 800cf28:	230d      	movs	r3, #13
 800cf2a:	e148      	b.n	800d1be <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cf2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf2e:	789b      	ldrb	r3, [r3, #2]
 800cf30:	461a      	mov	r2, r3
 800cf32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf34:	fb02 f303 	mul.w	r3, r2, r3
 800cf38:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf40:	461a      	mov	r2, r3
 800cf42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf44:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cf46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf48:	895b      	ldrh	r3, [r3, #10]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d008      	beq.n	800cf60 <find_volume+0x224>
 800cf4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf50:	895b      	ldrh	r3, [r3, #10]
 800cf52:	461a      	mov	r2, r3
 800cf54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf56:	895b      	ldrh	r3, [r3, #10]
 800cf58:	3b01      	subs	r3, #1
 800cf5a:	4013      	ands	r3, r2
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d001      	beq.n	800cf64 <find_volume+0x228>
 800cf60:	230d      	movs	r3, #13
 800cf62:	e12c      	b.n	800d1be <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cf64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf66:	3330      	adds	r3, #48	@ 0x30
 800cf68:	3311      	adds	r3, #17
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fe fccc 	bl	800b908 <ld_word>
 800cf70:	4603      	mov	r3, r0
 800cf72:	461a      	mov	r2, r3
 800cf74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf76:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cf78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf7a:	891b      	ldrh	r3, [r3, #8]
 800cf7c:	f003 030f 	and.w	r3, r3, #15
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d001      	beq.n	800cf8a <find_volume+0x24e>
 800cf86:	230d      	movs	r3, #13
 800cf88:	e119      	b.n	800d1be <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cf8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf8c:	3330      	adds	r3, #48	@ 0x30
 800cf8e:	3313      	adds	r3, #19
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7fe fcb9 	bl	800b908 <ld_word>
 800cf96:	4603      	mov	r3, r0
 800cf98:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cf9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d106      	bne.n	800cfae <find_volume+0x272>
 800cfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa2:	3330      	adds	r3, #48	@ 0x30
 800cfa4:	3320      	adds	r3, #32
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fe fcc6 	bl	800b938 <ld_dword>
 800cfac:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cfae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb0:	3330      	adds	r3, #48	@ 0x30
 800cfb2:	330e      	adds	r3, #14
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fe fca7 	bl	800b908 <ld_word>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cfbe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d101      	bne.n	800cfc8 <find_volume+0x28c>
 800cfc4:	230d      	movs	r3, #13
 800cfc6:	e0fa      	b.n	800d1be <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cfc8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cfca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfcc:	4413      	add	r3, r2
 800cfce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cfd0:	8912      	ldrh	r2, [r2, #8]
 800cfd2:	0912      	lsrs	r2, r2, #4
 800cfd4:	b292      	uxth	r2, r2
 800cfd6:	4413      	add	r3, r2
 800cfd8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cfda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cfdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d204      	bcs.n	800cfec <find_volume+0x2b0>
 800cfe2:	230d      	movs	r3, #13
 800cfe4:	e0eb      	b.n	800d1be <find_volume+0x482>
 800cfe6:	bf00      	nop
 800cfe8:	20005bd4 	.word	0x20005bd4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cfec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cff0:	1ad3      	subs	r3, r2, r3
 800cff2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cff4:	8952      	ldrh	r2, [r2, #10]
 800cff6:	fbb3 f3f2 	udiv	r3, r3, r2
 800cffa:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d101      	bne.n	800d006 <find_volume+0x2ca>
 800d002:	230d      	movs	r3, #13
 800d004:	e0db      	b.n	800d1be <find_volume+0x482>
		fmt = FS_FAT32;
 800d006:	2303      	movs	r3, #3
 800d008:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d012:	4293      	cmp	r3, r2
 800d014:	d802      	bhi.n	800d01c <find_volume+0x2e0>
 800d016:	2302      	movs	r3, #2
 800d018:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d022:	4293      	cmp	r3, r2
 800d024:	d802      	bhi.n	800d02c <find_volume+0x2f0>
 800d026:	2301      	movs	r3, #1
 800d028:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02e:	1c9a      	adds	r2, r3, #2
 800d030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d032:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d036:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d038:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d03a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d03c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d03e:	441a      	add	r2, r3
 800d040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d042:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d044:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d048:	441a      	add	r2, r3
 800d04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d04c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d04e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d052:	2b03      	cmp	r3, #3
 800d054:	d11e      	bne.n	800d094 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d058:	3330      	adds	r3, #48	@ 0x30
 800d05a:	332a      	adds	r3, #42	@ 0x2a
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7fe fc53 	bl	800b908 <ld_word>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d001      	beq.n	800d06c <find_volume+0x330>
 800d068:	230d      	movs	r3, #13
 800d06a:	e0a8      	b.n	800d1be <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d06e:	891b      	ldrh	r3, [r3, #8]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d001      	beq.n	800d078 <find_volume+0x33c>
 800d074:	230d      	movs	r3, #13
 800d076:	e0a2      	b.n	800d1be <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07a:	3330      	adds	r3, #48	@ 0x30
 800d07c:	332c      	adds	r3, #44	@ 0x2c
 800d07e:	4618      	mov	r0, r3
 800d080:	f7fe fc5a 	bl	800b938 <ld_dword>
 800d084:	4602      	mov	r2, r0
 800d086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d088:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d08c:	695b      	ldr	r3, [r3, #20]
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	647b      	str	r3, [r7, #68]	@ 0x44
 800d092:	e01f      	b.n	800d0d4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d096:	891b      	ldrh	r3, [r3, #8]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d101      	bne.n	800d0a0 <find_volume+0x364>
 800d09c:	230d      	movs	r3, #13
 800d09e:	e08e      	b.n	800d1be <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a2:	6a1a      	ldr	r2, [r3, #32]
 800d0a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0a6:	441a      	add	r2, r3
 800d0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0aa:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d0ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d0b0:	2b02      	cmp	r3, #2
 800d0b2:	d103      	bne.n	800d0bc <find_volume+0x380>
 800d0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b6:	695b      	ldr	r3, [r3, #20]
 800d0b8:	005b      	lsls	r3, r3, #1
 800d0ba:	e00a      	b.n	800d0d2 <find_volume+0x396>
 800d0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0be:	695a      	ldr	r2, [r3, #20]
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	005b      	lsls	r3, r3, #1
 800d0c4:	4413      	add	r3, r2
 800d0c6:	085a      	lsrs	r2, r3, #1
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ca:	695b      	ldr	r3, [r3, #20]
 800d0cc:	f003 0301 	and.w	r3, r3, #1
 800d0d0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d0d2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d6:	699a      	ldr	r2, [r3, #24]
 800d0d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0da:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d0de:	0a5b      	lsrs	r3, r3, #9
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d201      	bcs.n	800d0e8 <find_volume+0x3ac>
 800d0e4:	230d      	movs	r3, #13
 800d0e6:	e06a      	b.n	800d1be <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ee:	611a      	str	r2, [r3, #16]
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f2:	691a      	ldr	r2, [r3, #16]
 800d0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0fa:	2280      	movs	r2, #128	@ 0x80
 800d0fc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d0fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d102:	2b03      	cmp	r3, #3
 800d104:	d149      	bne.n	800d19a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d108:	3330      	adds	r3, #48	@ 0x30
 800d10a:	3330      	adds	r3, #48	@ 0x30
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fe fbfb 	bl	800b908 <ld_word>
 800d112:	4603      	mov	r3, r0
 800d114:	2b01      	cmp	r3, #1
 800d116:	d140      	bne.n	800d19a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d11a:	3301      	adds	r3, #1
 800d11c:	4619      	mov	r1, r3
 800d11e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d120:	f7fe fea2 	bl	800be68 <move_window>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d137      	bne.n	800d19a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d12c:	2200      	movs	r2, #0
 800d12e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d132:	3330      	adds	r3, #48	@ 0x30
 800d134:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d138:	4618      	mov	r0, r3
 800d13a:	f7fe fbe5 	bl	800b908 <ld_word>
 800d13e:	4603      	mov	r3, r0
 800d140:	461a      	mov	r2, r3
 800d142:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d146:	429a      	cmp	r2, r3
 800d148:	d127      	bne.n	800d19a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d14c:	3330      	adds	r3, #48	@ 0x30
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fe fbf2 	bl	800b938 <ld_dword>
 800d154:	4603      	mov	r3, r0
 800d156:	4a1c      	ldr	r2, [pc, #112]	@ (800d1c8 <find_volume+0x48c>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d11e      	bne.n	800d19a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d15e:	3330      	adds	r3, #48	@ 0x30
 800d160:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d164:	4618      	mov	r0, r3
 800d166:	f7fe fbe7 	bl	800b938 <ld_dword>
 800d16a:	4603      	mov	r3, r0
 800d16c:	4a17      	ldr	r2, [pc, #92]	@ (800d1cc <find_volume+0x490>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d113      	bne.n	800d19a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d174:	3330      	adds	r3, #48	@ 0x30
 800d176:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7fe fbdc 	bl	800b938 <ld_dword>
 800d180:	4602      	mov	r2, r0
 800d182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d184:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d188:	3330      	adds	r3, #48	@ 0x30
 800d18a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d18e:	4618      	mov	r0, r3
 800d190:	f7fe fbd2 	bl	800b938 <ld_dword>
 800d194:	4602      	mov	r2, r0
 800d196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d198:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d19c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d1a0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d1a2:	4b0b      	ldr	r3, [pc, #44]	@ (800d1d0 <find_volume+0x494>)
 800d1a4:	881b      	ldrh	r3, [r3, #0]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	4b09      	ldr	r3, [pc, #36]	@ (800d1d0 <find_volume+0x494>)
 800d1ac:	801a      	strh	r2, [r3, #0]
 800d1ae:	4b08      	ldr	r3, [pc, #32]	@ (800d1d0 <find_volume+0x494>)
 800d1b0:	881a      	ldrh	r2, [r3, #0]
 800d1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d1b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d1b8:	f7fe fdee 	bl	800bd98 <clear_lock>
#endif
	return FR_OK;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3758      	adds	r7, #88	@ 0x58
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	41615252 	.word	0x41615252
 800d1cc:	61417272 	.word	0x61417272
 800d1d0:	20005bd8 	.word	0x20005bd8

0800d1d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d1de:	2309      	movs	r3, #9
 800d1e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d01c      	beq.n	800d222 <validate+0x4e>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d018      	beq.n	800d222 <validate+0x4e>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d013      	beq.n	800d222 <validate+0x4e>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	889a      	ldrh	r2, [r3, #4]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	88db      	ldrh	r3, [r3, #6]
 800d204:	429a      	cmp	r2, r3
 800d206:	d10c      	bne.n	800d222 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	785b      	ldrb	r3, [r3, #1]
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fe fadc 	bl	800b7cc <disk_status>
 800d214:	4603      	mov	r3, r0
 800d216:	f003 0301 	and.w	r3, r3, #1
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d101      	bne.n	800d222 <validate+0x4e>
			res = FR_OK;
 800d21e:	2300      	movs	r3, #0
 800d220:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d222:	7bfb      	ldrb	r3, [r7, #15]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d102      	bne.n	800d22e <validate+0x5a>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	e000      	b.n	800d230 <validate+0x5c>
 800d22e:	2300      	movs	r3, #0
 800d230:	683a      	ldr	r2, [r7, #0]
 800d232:	6013      	str	r3, [r2, #0]
	return res;
 800d234:	7bfb      	ldrb	r3, [r7, #15]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3710      	adds	r7, #16
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
	...

0800d240 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b088      	sub	sp, #32
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	4613      	mov	r3, r2
 800d24c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d252:	f107 0310 	add.w	r3, r7, #16
 800d256:	4618      	mov	r0, r3
 800d258:	f7ff fcd5 	bl	800cc06 <get_ldnumber>
 800d25c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	2b00      	cmp	r3, #0
 800d262:	da01      	bge.n	800d268 <f_mount+0x28>
 800d264:	230b      	movs	r3, #11
 800d266:	e02b      	b.n	800d2c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d268:	4a17      	ldr	r2, [pc, #92]	@ (800d2c8 <f_mount+0x88>)
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d270:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d272:	69bb      	ldr	r3, [r7, #24]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d005      	beq.n	800d284 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d278:	69b8      	ldr	r0, [r7, #24]
 800d27a:	f7fe fd8d 	bl	800bd98 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	2200      	movs	r2, #0
 800d282:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d002      	beq.n	800d290 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2200      	movs	r2, #0
 800d28e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d290:	68fa      	ldr	r2, [r7, #12]
 800d292:	490d      	ldr	r1, [pc, #52]	@ (800d2c8 <f_mount+0x88>)
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d002      	beq.n	800d2a6 <f_mount+0x66>
 800d2a0:	79fb      	ldrb	r3, [r7, #7]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d001      	beq.n	800d2aa <f_mount+0x6a>
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	e00a      	b.n	800d2c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d2aa:	f107 010c 	add.w	r1, r7, #12
 800d2ae:	f107 0308 	add.w	r3, r7, #8
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7ff fd41 	bl	800cd3c <find_volume>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d2be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3720      	adds	r7, #32
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	20005bd4 	.word	0x20005bd4

0800d2cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b098      	sub	sp, #96	@ 0x60
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	4613      	mov	r3, r2
 800d2d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d101      	bne.n	800d2e4 <f_open+0x18>
 800d2e0:	2309      	movs	r3, #9
 800d2e2:	e1a9      	b.n	800d638 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d2e4:	79fb      	ldrb	r3, [r7, #7]
 800d2e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d2ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d2ec:	79fa      	ldrb	r2, [r7, #7]
 800d2ee:	f107 0110 	add.w	r1, r7, #16
 800d2f2:	f107 0308 	add.w	r3, r7, #8
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7ff fd20 	bl	800cd3c <find_volume>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d302:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d306:	2b00      	cmp	r3, #0
 800d308:	f040 818d 	bne.w	800d626 <f_open+0x35a>
		dj.obj.fs = fs;
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d310:	68ba      	ldr	r2, [r7, #8]
 800d312:	f107 0314 	add.w	r3, r7, #20
 800d316:	4611      	mov	r1, r2
 800d318:	4618      	mov	r0, r3
 800d31a:	f7ff fc03 	bl	800cb24 <follow_path>
 800d31e:	4603      	mov	r3, r0
 800d320:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d324:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d118      	bne.n	800d35e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d32c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d330:	b25b      	sxtb	r3, r3
 800d332:	2b00      	cmp	r3, #0
 800d334:	da03      	bge.n	800d33e <f_open+0x72>
				res = FR_INVALID_NAME;
 800d336:	2306      	movs	r3, #6
 800d338:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d33c:	e00f      	b.n	800d35e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d33e:	79fb      	ldrb	r3, [r7, #7]
 800d340:	2b01      	cmp	r3, #1
 800d342:	bf8c      	ite	hi
 800d344:	2301      	movhi	r3, #1
 800d346:	2300      	movls	r3, #0
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	461a      	mov	r2, r3
 800d34c:	f107 0314 	add.w	r3, r7, #20
 800d350:	4611      	mov	r1, r2
 800d352:	4618      	mov	r0, r3
 800d354:	f7fe fbd8 	bl	800bb08 <chk_lock>
 800d358:	4603      	mov	r3, r0
 800d35a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d35e:	79fb      	ldrb	r3, [r7, #7]
 800d360:	f003 031c 	and.w	r3, r3, #28
 800d364:	2b00      	cmp	r3, #0
 800d366:	d07f      	beq.n	800d468 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d368:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d017      	beq.n	800d3a0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d370:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d374:	2b04      	cmp	r3, #4
 800d376:	d10e      	bne.n	800d396 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d378:	f7fe fc22 	bl	800bbc0 <enq_lock>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d006      	beq.n	800d390 <f_open+0xc4>
 800d382:	f107 0314 	add.w	r3, r7, #20
 800d386:	4618      	mov	r0, r3
 800d388:	f7ff fb06 	bl	800c998 <dir_register>
 800d38c:	4603      	mov	r3, r0
 800d38e:	e000      	b.n	800d392 <f_open+0xc6>
 800d390:	2312      	movs	r3, #18
 800d392:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d396:	79fb      	ldrb	r3, [r7, #7]
 800d398:	f043 0308 	orr.w	r3, r3, #8
 800d39c:	71fb      	strb	r3, [r7, #7]
 800d39e:	e010      	b.n	800d3c2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d3a0:	7ebb      	ldrb	r3, [r7, #26]
 800d3a2:	f003 0311 	and.w	r3, r3, #17
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d003      	beq.n	800d3b2 <f_open+0xe6>
					res = FR_DENIED;
 800d3aa:	2307      	movs	r3, #7
 800d3ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d3b0:	e007      	b.n	800d3c2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d3b2:	79fb      	ldrb	r3, [r7, #7]
 800d3b4:	f003 0304 	and.w	r3, r3, #4
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d002      	beq.n	800d3c2 <f_open+0xf6>
 800d3bc:	2308      	movs	r3, #8
 800d3be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d3c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d168      	bne.n	800d49c <f_open+0x1d0>
 800d3ca:	79fb      	ldrb	r3, [r7, #7]
 800d3cc:	f003 0308 	and.w	r3, r3, #8
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d063      	beq.n	800d49c <f_open+0x1d0>
				dw = GET_FATTIME();
 800d3d4:	f7fd ffb8 	bl	800b348 <get_fattime>
 800d3d8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d3da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3dc:	330e      	adds	r3, #14
 800d3de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fe fae7 	bl	800b9b4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d3e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3e8:	3316      	adds	r3, #22
 800d3ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fe fae1 	bl	800b9b4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d3f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3f4:	330b      	adds	r3, #11
 800d3f6:	2220      	movs	r2, #32
 800d3f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3fe:	4611      	mov	r1, r2
 800d400:	4618      	mov	r0, r3
 800d402:	f7ff fa35 	bl	800c870 <ld_clust>
 800d406:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d40c:	2200      	movs	r2, #0
 800d40e:	4618      	mov	r0, r3
 800d410:	f7ff fa4d 	bl	800c8ae <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d416:	331c      	adds	r3, #28
 800d418:	2100      	movs	r1, #0
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7fe faca 	bl	800b9b4 <st_dword>
					fs->wflag = 1;
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	2201      	movs	r2, #1
 800d424:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d037      	beq.n	800d49c <f_open+0x1d0>
						dw = fs->winsect;
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d430:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d432:	f107 0314 	add.w	r3, r7, #20
 800d436:	2200      	movs	r2, #0
 800d438:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d43a:	4618      	mov	r0, r3
 800d43c:	f7fe ff60 	bl	800c300 <remove_chain>
 800d440:	4603      	mov	r3, r0
 800d442:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d446:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d126      	bne.n	800d49c <f_open+0x1d0>
							res = move_window(fs, dw);
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d452:	4618      	mov	r0, r3
 800d454:	f7fe fd08 	bl	800be68 <move_window>
 800d458:	4603      	mov	r3, r0
 800d45a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d462:	3a01      	subs	r2, #1
 800d464:	60da      	str	r2, [r3, #12]
 800d466:	e019      	b.n	800d49c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d468:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d115      	bne.n	800d49c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d470:	7ebb      	ldrb	r3, [r7, #26]
 800d472:	f003 0310 	and.w	r3, r3, #16
 800d476:	2b00      	cmp	r3, #0
 800d478:	d003      	beq.n	800d482 <f_open+0x1b6>
					res = FR_NO_FILE;
 800d47a:	2304      	movs	r3, #4
 800d47c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d480:	e00c      	b.n	800d49c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d482:	79fb      	ldrb	r3, [r7, #7]
 800d484:	f003 0302 	and.w	r3, r3, #2
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d007      	beq.n	800d49c <f_open+0x1d0>
 800d48c:	7ebb      	ldrb	r3, [r7, #26]
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	2b00      	cmp	r3, #0
 800d494:	d002      	beq.n	800d49c <f_open+0x1d0>
						res = FR_DENIED;
 800d496:	2307      	movs	r3, #7
 800d498:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d49c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d126      	bne.n	800d4f2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d4a4:	79fb      	ldrb	r3, [r7, #7]
 800d4a6:	f003 0308 	and.w	r3, r3, #8
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d003      	beq.n	800d4b6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d4ae:	79fb      	ldrb	r3, [r7, #7]
 800d4b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d4be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d4c4:	79fb      	ldrb	r3, [r7, #7]
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	bf8c      	ite	hi
 800d4ca:	2301      	movhi	r3, #1
 800d4cc:	2300      	movls	r3, #0
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	f107 0314 	add.w	r3, r7, #20
 800d4d6:	4611      	mov	r1, r2
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7fe fb93 	bl	800bc04 <inc_lock>
 800d4de:	4602      	mov	r2, r0
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	691b      	ldr	r3, [r3, #16]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d102      	bne.n	800d4f2 <f_open+0x226>
 800d4ec:	2302      	movs	r3, #2
 800d4ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d4f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f040 8095 	bne.w	800d626 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d500:	4611      	mov	r1, r2
 800d502:	4618      	mov	r0, r3
 800d504:	f7ff f9b4 	bl	800c870 <ld_clust>
 800d508:	4602      	mov	r2, r0
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d50e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d510:	331c      	adds	r3, #28
 800d512:	4618      	mov	r0, r3
 800d514:	f7fe fa10 	bl	800b938 <ld_dword>
 800d518:	4602      	mov	r2, r0
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2200      	movs	r2, #0
 800d522:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d524:	693a      	ldr	r2, [r7, #16]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	88da      	ldrh	r2, [r3, #6]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	79fa      	ldrb	r2, [r7, #7]
 800d536:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2200      	movs	r2, #0
 800d53c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2200      	movs	r2, #0
 800d542:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2200      	movs	r2, #0
 800d548:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	3330      	adds	r3, #48	@ 0x30
 800d54e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d552:	2100      	movs	r1, #0
 800d554:	4618      	mov	r0, r3
 800d556:	f7fe fa7a 	bl	800ba4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d55a:	79fb      	ldrb	r3, [r7, #7]
 800d55c:	f003 0320 	and.w	r3, r3, #32
 800d560:	2b00      	cmp	r3, #0
 800d562:	d060      	beq.n	800d626 <f_open+0x35a>
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d05c      	beq.n	800d626 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	68da      	ldr	r2, [r3, #12]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	895b      	ldrh	r3, [r3, #10]
 800d578:	025b      	lsls	r3, r3, #9
 800d57a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	657b      	str	r3, [r7, #84]	@ 0x54
 800d588:	e016      	b.n	800d5b8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d58e:	4618      	mov	r0, r3
 800d590:	f7fe fd25 	bl	800bfde <get_fat>
 800d594:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d596:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d802      	bhi.n	800d5a2 <f_open+0x2d6>
 800d59c:	2302      	movs	r3, #2
 800d59e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d5a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a8:	d102      	bne.n	800d5b0 <f_open+0x2e4>
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d5b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800d5b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d103      	bne.n	800d5c8 <f_open+0x2fc>
 800d5c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d8e0      	bhi.n	800d58a <f_open+0x2be>
				}
				fp->clust = clst;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d5cc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d5ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d127      	bne.n	800d626 <f_open+0x35a>
 800d5d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d022      	beq.n	800d626 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7fe fcdb 	bl	800bfa0 <clust2sect>
 800d5ea:	6478      	str	r0, [r7, #68]	@ 0x44
 800d5ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d103      	bne.n	800d5fa <f_open+0x32e>
						res = FR_INT_ERR;
 800d5f2:	2302      	movs	r3, #2
 800d5f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d5f8:	e015      	b.n	800d626 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d5fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5fc:	0a5a      	lsrs	r2, r3, #9
 800d5fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d600:	441a      	add	r2, r3
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	7858      	ldrb	r0, [r3, #1]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6a1a      	ldr	r2, [r3, #32]
 800d614:	2301      	movs	r3, #1
 800d616:	f7fe f919 	bl	800b84c <disk_read>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d002      	beq.n	800d626 <f_open+0x35a>
 800d620:	2301      	movs	r3, #1
 800d622:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d626:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d002      	beq.n	800d634 <f_open+0x368>
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2200      	movs	r2, #0
 800d632:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d634:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3760      	adds	r7, #96	@ 0x60
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b08e      	sub	sp, #56	@ 0x38
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	607a      	str	r2, [r7, #4]
 800d64c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	2200      	movs	r2, #0
 800d656:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f107 0214 	add.w	r2, r7, #20
 800d65e:	4611      	mov	r1, r2
 800d660:	4618      	mov	r0, r3
 800d662:	f7ff fdb7 	bl	800d1d4 <validate>
 800d666:	4603      	mov	r3, r0
 800d668:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d66c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d670:	2b00      	cmp	r3, #0
 800d672:	d107      	bne.n	800d684 <f_read+0x44>
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	7d5b      	ldrb	r3, [r3, #21]
 800d678:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d67c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d680:	2b00      	cmp	r3, #0
 800d682:	d002      	beq.n	800d68a <f_read+0x4a>
 800d684:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d688:	e115      	b.n	800d8b6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	7d1b      	ldrb	r3, [r3, #20]
 800d68e:	f003 0301 	and.w	r3, r3, #1
 800d692:	2b00      	cmp	r3, #0
 800d694:	d101      	bne.n	800d69a <f_read+0x5a>
 800d696:	2307      	movs	r3, #7
 800d698:	e10d      	b.n	800d8b6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	68da      	ldr	r2, [r3, #12]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	699b      	ldr	r3, [r3, #24]
 800d6a2:	1ad3      	subs	r3, r2, r3
 800d6a4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	6a3b      	ldr	r3, [r7, #32]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	f240 80fe 	bls.w	800d8ac <f_read+0x26c>
 800d6b0:	6a3b      	ldr	r3, [r7, #32]
 800d6b2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d6b4:	e0fa      	b.n	800d8ac <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	699b      	ldr	r3, [r3, #24]
 800d6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f040 80c6 	bne.w	800d850 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	699b      	ldr	r3, [r3, #24]
 800d6c8:	0a5b      	lsrs	r3, r3, #9
 800d6ca:	697a      	ldr	r2, [r7, #20]
 800d6cc:	8952      	ldrh	r2, [r2, #10]
 800d6ce:	3a01      	subs	r2, #1
 800d6d0:	4013      	ands	r3, r2
 800d6d2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d12f      	bne.n	800d73a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	699b      	ldr	r3, [r3, #24]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d103      	bne.n	800d6ea <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6e8:	e013      	b.n	800d712 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d007      	beq.n	800d702 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	699b      	ldr	r3, [r3, #24]
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	68f8      	ldr	r0, [r7, #12]
 800d6fa:	f7fe fefe 	bl	800c4fa <clmt_clust>
 800d6fe:	6338      	str	r0, [r7, #48]	@ 0x30
 800d700:	e007      	b.n	800d712 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d702:	68fa      	ldr	r2, [r7, #12]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	69db      	ldr	r3, [r3, #28]
 800d708:	4619      	mov	r1, r3
 800d70a:	4610      	mov	r0, r2
 800d70c:	f7fe fc67 	bl	800bfde <get_fat>
 800d710:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d714:	2b01      	cmp	r3, #1
 800d716:	d804      	bhi.n	800d722 <f_read+0xe2>
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2202      	movs	r2, #2
 800d71c:	755a      	strb	r2, [r3, #21]
 800d71e:	2302      	movs	r3, #2
 800d720:	e0c9      	b.n	800d8b6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d728:	d104      	bne.n	800d734 <f_read+0xf4>
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2201      	movs	r2, #1
 800d72e:	755a      	strb	r2, [r3, #21]
 800d730:	2301      	movs	r3, #1
 800d732:	e0c0      	b.n	800d8b6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d738:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d73a:	697a      	ldr	r2, [r7, #20]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	69db      	ldr	r3, [r3, #28]
 800d740:	4619      	mov	r1, r3
 800d742:	4610      	mov	r0, r2
 800d744:	f7fe fc2c 	bl	800bfa0 <clust2sect>
 800d748:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d104      	bne.n	800d75a <f_read+0x11a>
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2202      	movs	r2, #2
 800d754:	755a      	strb	r2, [r3, #21]
 800d756:	2302      	movs	r3, #2
 800d758:	e0ad      	b.n	800d8b6 <f_read+0x276>
			sect += csect;
 800d75a:	69ba      	ldr	r2, [r7, #24]
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	4413      	add	r3, r2
 800d760:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	0a5b      	lsrs	r3, r3, #9
 800d766:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d039      	beq.n	800d7e2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d76e:	69fa      	ldr	r2, [r7, #28]
 800d770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d772:	4413      	add	r3, r2
 800d774:	697a      	ldr	r2, [r7, #20]
 800d776:	8952      	ldrh	r2, [r2, #10]
 800d778:	4293      	cmp	r3, r2
 800d77a:	d905      	bls.n	800d788 <f_read+0x148>
					cc = fs->csize - csect;
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	895b      	ldrh	r3, [r3, #10]
 800d780:	461a      	mov	r2, r3
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	1ad3      	subs	r3, r2, r3
 800d786:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	7858      	ldrb	r0, [r3, #1]
 800d78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d78e:	69ba      	ldr	r2, [r7, #24]
 800d790:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d792:	f7fe f85b 	bl	800b84c <disk_read>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d004      	beq.n	800d7a6 <f_read+0x166>
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	755a      	strb	r2, [r3, #21]
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	e087      	b.n	800d8b6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	7d1b      	ldrb	r3, [r3, #20]
 800d7aa:	b25b      	sxtb	r3, r3
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	da14      	bge.n	800d7da <f_read+0x19a>
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6a1a      	ldr	r2, [r3, #32]
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	1ad3      	subs	r3, r2, r3
 800d7b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d90d      	bls.n	800d7da <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	6a1a      	ldr	r2, [r3, #32]
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	1ad3      	subs	r3, r2, r3
 800d7c6:	025b      	lsls	r3, r3, #9
 800d7c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7ca:	18d0      	adds	r0, r2, r3
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	3330      	adds	r3, #48	@ 0x30
 800d7d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	f7fe f919 	bl	800ba0c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7dc:	025b      	lsls	r3, r3, #9
 800d7de:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d7e0:	e050      	b.n	800d884 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6a1b      	ldr	r3, [r3, #32]
 800d7e6:	69ba      	ldr	r2, [r7, #24]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d02e      	beq.n	800d84a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	7d1b      	ldrb	r3, [r3, #20]
 800d7f0:	b25b      	sxtb	r3, r3
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	da18      	bge.n	800d828 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	7858      	ldrb	r0, [r3, #1]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6a1a      	ldr	r2, [r3, #32]
 800d804:	2301      	movs	r3, #1
 800d806:	f7fe f841 	bl	800b88c <disk_write>
 800d80a:	4603      	mov	r3, r0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d004      	beq.n	800d81a <f_read+0x1da>
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2201      	movs	r2, #1
 800d814:	755a      	strb	r2, [r3, #21]
 800d816:	2301      	movs	r3, #1
 800d818:	e04d      	b.n	800d8b6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	7d1b      	ldrb	r3, [r3, #20]
 800d81e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d822:	b2da      	uxtb	r2, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	7858      	ldrb	r0, [r3, #1]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d832:	2301      	movs	r3, #1
 800d834:	69ba      	ldr	r2, [r7, #24]
 800d836:	f7fe f809 	bl	800b84c <disk_read>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d004      	beq.n	800d84a <f_read+0x20a>
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2201      	movs	r2, #1
 800d844:	755a      	strb	r2, [r3, #21]
 800d846:	2301      	movs	r3, #1
 800d848:	e035      	b.n	800d8b6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	69ba      	ldr	r2, [r7, #24]
 800d84e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	699b      	ldr	r3, [r3, #24]
 800d854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d858:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d85c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d85e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	429a      	cmp	r2, r3
 800d864:	d901      	bls.n	800d86a <f_read+0x22a>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	699b      	ldr	r3, [r3, #24]
 800d874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d878:	4413      	add	r3, r2
 800d87a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d87c:	4619      	mov	r1, r3
 800d87e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d880:	f7fe f8c4 	bl	800ba0c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d888:	4413      	add	r3, r2
 800d88a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	699a      	ldr	r2, [r3, #24]
 800d890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d892:	441a      	add	r2, r3
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	619a      	str	r2, [r3, #24]
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89e:	441a      	add	r2, r3
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	601a      	str	r2, [r3, #0]
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a8:	1ad3      	subs	r3, r2, r3
 800d8aa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	f47f af01 	bne.w	800d6b6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3738      	adds	r7, #56	@ 0x38
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}

0800d8be <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d8be:	b580      	push	{r7, lr}
 800d8c0:	b08c      	sub	sp, #48	@ 0x30
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	60f8      	str	r0, [r7, #12]
 800d8c6:	60b9      	str	r1, [r7, #8]
 800d8c8:	607a      	str	r2, [r7, #4]
 800d8ca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f107 0210 	add.w	r2, r7, #16
 800d8dc:	4611      	mov	r1, r2
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7ff fc78 	bl	800d1d4 <validate>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d8ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d107      	bne.n	800d902 <f_write+0x44>
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	7d5b      	ldrb	r3, [r3, #21]
 800d8f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d8fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d002      	beq.n	800d908 <f_write+0x4a>
 800d902:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d906:	e14b      	b.n	800dba0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	7d1b      	ldrb	r3, [r3, #20]
 800d90c:	f003 0302 	and.w	r3, r3, #2
 800d910:	2b00      	cmp	r3, #0
 800d912:	d101      	bne.n	800d918 <f_write+0x5a>
 800d914:	2307      	movs	r3, #7
 800d916:	e143      	b.n	800dba0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	699a      	ldr	r2, [r3, #24]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	441a      	add	r2, r3
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	699b      	ldr	r3, [r3, #24]
 800d924:	429a      	cmp	r2, r3
 800d926:	f080 812d 	bcs.w	800db84 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	699b      	ldr	r3, [r3, #24]
 800d92e:	43db      	mvns	r3, r3
 800d930:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d932:	e127      	b.n	800db84 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	699b      	ldr	r3, [r3, #24]
 800d938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f040 80e3 	bne.w	800db08 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	699b      	ldr	r3, [r3, #24]
 800d946:	0a5b      	lsrs	r3, r3, #9
 800d948:	693a      	ldr	r2, [r7, #16]
 800d94a:	8952      	ldrh	r2, [r2, #10]
 800d94c:	3a01      	subs	r2, #1
 800d94e:	4013      	ands	r3, r2
 800d950:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d143      	bne.n	800d9e0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	699b      	ldr	r3, [r3, #24]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d10c      	bne.n	800d97a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d11a      	bne.n	800d9a2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2100      	movs	r1, #0
 800d970:	4618      	mov	r0, r3
 800d972:	f7fe fd2a 	bl	800c3ca <create_chain>
 800d976:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d978:	e013      	b.n	800d9a2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d007      	beq.n	800d992 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	699b      	ldr	r3, [r3, #24]
 800d986:	4619      	mov	r1, r3
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f7fe fdb6 	bl	800c4fa <clmt_clust>
 800d98e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d990:	e007      	b.n	800d9a2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d992:	68fa      	ldr	r2, [r7, #12]
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	69db      	ldr	r3, [r3, #28]
 800d998:	4619      	mov	r1, r3
 800d99a:	4610      	mov	r0, r2
 800d99c:	f7fe fd15 	bl	800c3ca <create_chain>
 800d9a0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	f000 80f2 	beq.w	800db8e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d104      	bne.n	800d9ba <f_write+0xfc>
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2202      	movs	r2, #2
 800d9b4:	755a      	strb	r2, [r3, #21]
 800d9b6:	2302      	movs	r3, #2
 800d9b8:	e0f2      	b.n	800dba0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c0:	d104      	bne.n	800d9cc <f_write+0x10e>
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	755a      	strb	r2, [r3, #21]
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e0e9      	b.n	800dba0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9d0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d102      	bne.n	800d9e0 <f_write+0x122>
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9de:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	7d1b      	ldrb	r3, [r3, #20]
 800d9e4:	b25b      	sxtb	r3, r3
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	da18      	bge.n	800da1c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	7858      	ldrb	r0, [r3, #1]
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6a1a      	ldr	r2, [r3, #32]
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	f7fd ff47 	bl	800b88c <disk_write>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d004      	beq.n	800da0e <f_write+0x150>
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2201      	movs	r2, #1
 800da08:	755a      	strb	r2, [r3, #21]
 800da0a:	2301      	movs	r3, #1
 800da0c:	e0c8      	b.n	800dba0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	7d1b      	ldrb	r3, [r3, #20]
 800da12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da16:	b2da      	uxtb	r2, r3
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800da1c:	693a      	ldr	r2, [r7, #16]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	69db      	ldr	r3, [r3, #28]
 800da22:	4619      	mov	r1, r3
 800da24:	4610      	mov	r0, r2
 800da26:	f7fe fabb 	bl	800bfa0 <clust2sect>
 800da2a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d104      	bne.n	800da3c <f_write+0x17e>
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2202      	movs	r2, #2
 800da36:	755a      	strb	r2, [r3, #21]
 800da38:	2302      	movs	r3, #2
 800da3a:	e0b1      	b.n	800dba0 <f_write+0x2e2>
			sect += csect;
 800da3c:	697a      	ldr	r2, [r7, #20]
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	4413      	add	r3, r2
 800da42:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	0a5b      	lsrs	r3, r3, #9
 800da48:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800da4a:	6a3b      	ldr	r3, [r7, #32]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d03c      	beq.n	800daca <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800da50:	69ba      	ldr	r2, [r7, #24]
 800da52:	6a3b      	ldr	r3, [r7, #32]
 800da54:	4413      	add	r3, r2
 800da56:	693a      	ldr	r2, [r7, #16]
 800da58:	8952      	ldrh	r2, [r2, #10]
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d905      	bls.n	800da6a <f_write+0x1ac>
					cc = fs->csize - csect;
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	895b      	ldrh	r3, [r3, #10]
 800da62:	461a      	mov	r2, r3
 800da64:	69bb      	ldr	r3, [r7, #24]
 800da66:	1ad3      	subs	r3, r2, r3
 800da68:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	7858      	ldrb	r0, [r3, #1]
 800da6e:	6a3b      	ldr	r3, [r7, #32]
 800da70:	697a      	ldr	r2, [r7, #20]
 800da72:	69f9      	ldr	r1, [r7, #28]
 800da74:	f7fd ff0a 	bl	800b88c <disk_write>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d004      	beq.n	800da88 <f_write+0x1ca>
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2201      	movs	r2, #1
 800da82:	755a      	strb	r2, [r3, #21]
 800da84:	2301      	movs	r3, #1
 800da86:	e08b      	b.n	800dba0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6a1a      	ldr	r2, [r3, #32]
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	1ad3      	subs	r3, r2, r3
 800da90:	6a3a      	ldr	r2, [r7, #32]
 800da92:	429a      	cmp	r2, r3
 800da94:	d915      	bls.n	800dac2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6a1a      	ldr	r2, [r3, #32]
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	1ad3      	subs	r3, r2, r3
 800daa4:	025b      	lsls	r3, r3, #9
 800daa6:	69fa      	ldr	r2, [r7, #28]
 800daa8:	4413      	add	r3, r2
 800daaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800daae:	4619      	mov	r1, r3
 800dab0:	f7fd ffac 	bl	800ba0c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	7d1b      	ldrb	r3, [r3, #20]
 800dab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dabc:	b2da      	uxtb	r2, r3
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800dac2:	6a3b      	ldr	r3, [r7, #32]
 800dac4:	025b      	lsls	r3, r3, #9
 800dac6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800dac8:	e03f      	b.n	800db4a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	6a1b      	ldr	r3, [r3, #32]
 800dace:	697a      	ldr	r2, [r7, #20]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d016      	beq.n	800db02 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	699a      	ldr	r2, [r3, #24]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dadc:	429a      	cmp	r2, r3
 800dade:	d210      	bcs.n	800db02 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	7858      	ldrb	r0, [r3, #1]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800daea:	2301      	movs	r3, #1
 800daec:	697a      	ldr	r2, [r7, #20]
 800daee:	f7fd fead 	bl	800b84c <disk_read>
 800daf2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d004      	beq.n	800db02 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2201      	movs	r2, #1
 800dafc:	755a      	strb	r2, [r3, #21]
 800dafe:	2301      	movs	r3, #1
 800db00:	e04e      	b.n	800dba0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	697a      	ldr	r2, [r7, #20]
 800db06:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db10:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800db14:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800db16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d901      	bls.n	800db22 <f_write+0x264>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	699b      	ldr	r3, [r3, #24]
 800db2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db30:	4413      	add	r3, r2
 800db32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db34:	69f9      	ldr	r1, [r7, #28]
 800db36:	4618      	mov	r0, r3
 800db38:	f7fd ff68 	bl	800ba0c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	7d1b      	ldrb	r3, [r3, #20]
 800db40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800db44:	b2da      	uxtb	r2, r3
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800db4a:	69fa      	ldr	r2, [r7, #28]
 800db4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db4e:	4413      	add	r3, r2
 800db50:	61fb      	str	r3, [r7, #28]
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	699a      	ldr	r2, [r3, #24]
 800db56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db58:	441a      	add	r2, r3
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	619a      	str	r2, [r3, #24]
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	68da      	ldr	r2, [r3, #12]
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	699b      	ldr	r3, [r3, #24]
 800db66:	429a      	cmp	r2, r3
 800db68:	bf38      	it	cc
 800db6a:	461a      	movcc	r2, r3
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	60da      	str	r2, [r3, #12]
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	681a      	ldr	r2, [r3, #0]
 800db74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db76:	441a      	add	r2, r3
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	601a      	str	r2, [r3, #0]
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db80:	1ad3      	subs	r3, r2, r3
 800db82:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	f47f aed4 	bne.w	800d934 <f_write+0x76>
 800db8c:	e000      	b.n	800db90 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800db8e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	7d1b      	ldrb	r3, [r3, #20]
 800db94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db98:	b2da      	uxtb	r2, r3
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3730      	adds	r7, #48	@ 0x30
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b086      	sub	sp, #24
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f107 0208 	add.w	r2, r7, #8
 800dbb6:	4611      	mov	r1, r2
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7ff fb0b 	bl	800d1d4 <validate>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dbc2:	7dfb      	ldrb	r3, [r7, #23]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d168      	bne.n	800dc9a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	7d1b      	ldrb	r3, [r3, #20]
 800dbcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d062      	beq.n	800dc9a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	7d1b      	ldrb	r3, [r3, #20]
 800dbd8:	b25b      	sxtb	r3, r3
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	da15      	bge.n	800dc0a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	7858      	ldrb	r0, [r3, #1]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6a1a      	ldr	r2, [r3, #32]
 800dbec:	2301      	movs	r3, #1
 800dbee:	f7fd fe4d 	bl	800b88c <disk_write>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d001      	beq.n	800dbfc <f_sync+0x54>
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e04f      	b.n	800dc9c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	7d1b      	ldrb	r3, [r3, #20]
 800dc00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc04:	b2da      	uxtb	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dc0a:	f7fd fb9d 	bl	800b348 <get_fattime>
 800dc0e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc16:	4619      	mov	r1, r3
 800dc18:	4610      	mov	r0, r2
 800dc1a:	f7fe f925 	bl	800be68 <move_window>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dc22:	7dfb      	ldrb	r3, [r7, #23]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d138      	bne.n	800dc9a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc2c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	330b      	adds	r3, #11
 800dc32:	781a      	ldrb	r2, [r3, #0]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	330b      	adds	r3, #11
 800dc38:	f042 0220 	orr.w	r2, r2, #32
 800dc3c:	b2d2      	uxtb	r2, r2
 800dc3e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6818      	ldr	r0, [r3, #0]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	461a      	mov	r2, r3
 800dc4a:	68f9      	ldr	r1, [r7, #12]
 800dc4c:	f7fe fe2f 	bl	800c8ae <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f103 021c 	add.w	r2, r3, #28
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	68db      	ldr	r3, [r3, #12]
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	4610      	mov	r0, r2
 800dc5e:	f7fd fea9 	bl	800b9b4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	3316      	adds	r3, #22
 800dc66:	6939      	ldr	r1, [r7, #16]
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fd fea3 	bl	800b9b4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	3312      	adds	r3, #18
 800dc72:	2100      	movs	r1, #0
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fd fe82 	bl	800b97e <st_word>
					fs->wflag = 1;
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7fe f91e 	bl	800bec4 <sync_fs>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	7d1b      	ldrb	r3, [r3, #20]
 800dc90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc94:	b2da      	uxtb	r2, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dc9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3718      	adds	r7, #24
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f7ff ff7b 	bl	800dba8 <f_sync>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dcb6:	7bfb      	ldrb	r3, [r7, #15]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d118      	bne.n	800dcee <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f107 0208 	add.w	r2, r7, #8
 800dcc2:	4611      	mov	r1, r2
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7ff fa85 	bl	800d1d4 <validate>
 800dcca:	4603      	mov	r3, r0
 800dccc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dcce:	7bfb      	ldrb	r3, [r7, #15]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d10c      	bne.n	800dcee <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	691b      	ldr	r3, [r3, #16]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7fe f821 	bl	800bd20 <dec_lock>
 800dcde:	4603      	mov	r3, r0
 800dce0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dce2:	7bfb      	ldrb	r3, [r7, #15]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d102      	bne.n	800dcee <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dcee:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3710      	adds	r7, #16
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b090      	sub	sp, #64	@ 0x40
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f107 0208 	add.w	r2, r7, #8
 800dd08:	4611      	mov	r1, r2
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7ff fa62 	bl	800d1d4 <validate>
 800dd10:	4603      	mov	r3, r0
 800dd12:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800dd16:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d103      	bne.n	800dd26 <f_lseek+0x2e>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	7d5b      	ldrb	r3, [r3, #21]
 800dd22:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800dd26:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d002      	beq.n	800dd34 <f_lseek+0x3c>
 800dd2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dd32:	e1e6      	b.n	800e102 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f000 80d1 	beq.w	800dee0 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd44:	d15a      	bne.n	800ddfc <f_lseek+0x104>
			tbl = fp->cltbl;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd4a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800dd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd4e:	1d1a      	adds	r2, r3, #4
 800dd50:	627a      	str	r2, [r7, #36]	@ 0x24
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	617b      	str	r3, [r7, #20]
 800dd56:	2302      	movs	r3, #2
 800dd58:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	689b      	ldr	r3, [r3, #8]
 800dd5e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800dd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d03a      	beq.n	800dddc <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800dd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd68:	613b      	str	r3, [r7, #16]
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd70:	3302      	adds	r3, #2
 800dd72:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800dd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd76:	60fb      	str	r3, [r7, #12]
 800dd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fe f92b 	bl	800bfde <get_fat>
 800dd88:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d804      	bhi.n	800dd9a <f_lseek+0xa2>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2202      	movs	r2, #2
 800dd94:	755a      	strb	r2, [r3, #21]
 800dd96:	2302      	movs	r3, #2
 800dd98:	e1b3      	b.n	800e102 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda0:	d104      	bne.n	800ddac <f_lseek+0xb4>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2201      	movs	r2, #1
 800dda6:	755a      	strb	r2, [r3, #21]
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e1aa      	b.n	800e102 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	3301      	adds	r3, #1
 800ddb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d0de      	beq.n	800dd74 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ddb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d809      	bhi.n	800ddd2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ddbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc0:	1d1a      	adds	r2, r3, #4
 800ddc2:	627a      	str	r2, [r7, #36]	@ 0x24
 800ddc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddc6:	601a      	str	r2, [r3, #0]
 800ddc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddca:	1d1a      	adds	r2, r3, #4
 800ddcc:	627a      	str	r2, [r7, #36]	@ 0x24
 800ddce:	693a      	ldr	r2, [r7, #16]
 800ddd0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	695b      	ldr	r3, [r3, #20]
 800ddd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d3c4      	bcc.n	800dd66 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dde0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dde2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800dde4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d803      	bhi.n	800ddf4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ddec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddee:	2200      	movs	r2, #0
 800ddf0:	601a      	str	r2, [r3, #0]
 800ddf2:	e184      	b.n	800e0fe <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ddf4:	2311      	movs	r3, #17
 800ddf6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ddfa:	e180      	b.n	800e0fe <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	683a      	ldr	r2, [r7, #0]
 800de02:	429a      	cmp	r2, r3
 800de04:	d902      	bls.n	800de0c <f_lseek+0x114>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	683a      	ldr	r2, [r7, #0]
 800de10:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	f000 8172 	beq.w	800e0fe <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	3b01      	subs	r3, #1
 800de1e:	4619      	mov	r1, r3
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f7fe fb6a 	bl	800c4fa <clmt_clust>
 800de26:	4602      	mov	r2, r0
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800de2c:	68ba      	ldr	r2, [r7, #8]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	69db      	ldr	r3, [r3, #28]
 800de32:	4619      	mov	r1, r3
 800de34:	4610      	mov	r0, r2
 800de36:	f7fe f8b3 	bl	800bfa0 <clust2sect>
 800de3a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d104      	bne.n	800de4c <f_lseek+0x154>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2202      	movs	r2, #2
 800de46:	755a      	strb	r2, [r3, #21]
 800de48:	2302      	movs	r3, #2
 800de4a:	e15a      	b.n	800e102 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	3b01      	subs	r3, #1
 800de50:	0a5b      	lsrs	r3, r3, #9
 800de52:	68ba      	ldr	r2, [r7, #8]
 800de54:	8952      	ldrh	r2, [r2, #10]
 800de56:	3a01      	subs	r2, #1
 800de58:	4013      	ands	r3, r2
 800de5a:	69ba      	ldr	r2, [r7, #24]
 800de5c:	4413      	add	r3, r2
 800de5e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	699b      	ldr	r3, [r3, #24]
 800de64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de68:	2b00      	cmp	r3, #0
 800de6a:	f000 8148 	beq.w	800e0fe <f_lseek+0x406>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6a1b      	ldr	r3, [r3, #32]
 800de72:	69ba      	ldr	r2, [r7, #24]
 800de74:	429a      	cmp	r2, r3
 800de76:	f000 8142 	beq.w	800e0fe <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	7d1b      	ldrb	r3, [r3, #20]
 800de7e:	b25b      	sxtb	r3, r3
 800de80:	2b00      	cmp	r3, #0
 800de82:	da18      	bge.n	800deb6 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	7858      	ldrb	r0, [r3, #1]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6a1a      	ldr	r2, [r3, #32]
 800de92:	2301      	movs	r3, #1
 800de94:	f7fd fcfa 	bl	800b88c <disk_write>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d004      	beq.n	800dea8 <f_lseek+0x1b0>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2201      	movs	r2, #1
 800dea2:	755a      	strb	r2, [r3, #21]
 800dea4:	2301      	movs	r3, #1
 800dea6:	e12c      	b.n	800e102 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	7d1b      	ldrb	r3, [r3, #20]
 800deac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800deb0:	b2da      	uxtb	r2, r3
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	7858      	ldrb	r0, [r3, #1]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dec0:	2301      	movs	r3, #1
 800dec2:	69ba      	ldr	r2, [r7, #24]
 800dec4:	f7fd fcc2 	bl	800b84c <disk_read>
 800dec8:	4603      	mov	r3, r0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d004      	beq.n	800ded8 <f_lseek+0x1e0>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2201      	movs	r2, #1
 800ded2:	755a      	strb	r2, [r3, #21]
 800ded4:	2301      	movs	r3, #1
 800ded6:	e114      	b.n	800e102 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	69ba      	ldr	r2, [r7, #24]
 800dedc:	621a      	str	r2, [r3, #32]
 800dede:	e10e      	b.n	800e0fe <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	683a      	ldr	r2, [r7, #0]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d908      	bls.n	800defc <f_lseek+0x204>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	7d1b      	ldrb	r3, [r3, #20]
 800deee:	f003 0302 	and.w	r3, r3, #2
 800def2:	2b00      	cmp	r3, #0
 800def4:	d102      	bne.n	800defc <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	699b      	ldr	r3, [r3, #24]
 800df00:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800df02:	2300      	movs	r3, #0
 800df04:	637b      	str	r3, [r7, #52]	@ 0x34
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df0a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	f000 80a7 	beq.w	800e062 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	895b      	ldrh	r3, [r3, #10]
 800df18:	025b      	lsls	r3, r3, #9
 800df1a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800df1c:	6a3b      	ldr	r3, [r7, #32]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d01b      	beq.n	800df5a <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	1e5a      	subs	r2, r3, #1
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	fbb2 f2f3 	udiv	r2, r2, r3
 800df2c:	6a3b      	ldr	r3, [r7, #32]
 800df2e:	1e59      	subs	r1, r3, #1
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800df36:	429a      	cmp	r2, r3
 800df38:	d30f      	bcc.n	800df5a <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800df3a:	6a3b      	ldr	r3, [r7, #32]
 800df3c:	1e5a      	subs	r2, r3, #1
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	425b      	negs	r3, r3
 800df42:	401a      	ands	r2, r3
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	699b      	ldr	r3, [r3, #24]
 800df4c:	683a      	ldr	r2, [r7, #0]
 800df4e:	1ad3      	subs	r3, r2, r3
 800df50:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	69db      	ldr	r3, [r3, #28]
 800df56:	63bb      	str	r3, [r7, #56]	@ 0x38
 800df58:	e022      	b.n	800dfa0 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800df60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df62:	2b00      	cmp	r3, #0
 800df64:	d119      	bne.n	800df9a <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2100      	movs	r1, #0
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fe fa2d 	bl	800c3ca <create_chain>
 800df70:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800df72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df74:	2b01      	cmp	r3, #1
 800df76:	d104      	bne.n	800df82 <f_lseek+0x28a>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2202      	movs	r2, #2
 800df7c:	755a      	strb	r2, [r3, #21]
 800df7e:	2302      	movs	r3, #2
 800df80:	e0bf      	b.n	800e102 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800df82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df88:	d104      	bne.n	800df94 <f_lseek+0x29c>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2201      	movs	r2, #1
 800df8e:	755a      	strb	r2, [r3, #21]
 800df90:	2301      	movs	r3, #1
 800df92:	e0b6      	b.n	800e102 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df98:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df9e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800dfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d05d      	beq.n	800e062 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800dfa6:	e03a      	b.n	800e01e <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800dfa8:	683a      	ldr	r2, [r7, #0]
 800dfaa:	69fb      	ldr	r3, [r7, #28]
 800dfac:	1ad3      	subs	r3, r2, r3
 800dfae:	603b      	str	r3, [r7, #0]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	699a      	ldr	r2, [r3, #24]
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	441a      	add	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	7d1b      	ldrb	r3, [r3, #20]
 800dfc0:	f003 0302 	and.w	r3, r3, #2
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d00b      	beq.n	800dfe0 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7fe f9fc 	bl	800c3ca <create_chain>
 800dfd2:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800dfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d108      	bne.n	800dfec <f_lseek+0x2f4>
							ofs = 0; break;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	603b      	str	r3, [r7, #0]
 800dfde:	e022      	b.n	800e026 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fd fffa 	bl	800bfde <get_fat>
 800dfea:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dfec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dff2:	d104      	bne.n	800dffe <f_lseek+0x306>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2201      	movs	r2, #1
 800dff8:	755a      	strb	r2, [r3, #21]
 800dffa:	2301      	movs	r3, #1
 800dffc:	e081      	b.n	800e102 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800dffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e000:	2b01      	cmp	r3, #1
 800e002:	d904      	bls.n	800e00e <f_lseek+0x316>
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	695b      	ldr	r3, [r3, #20]
 800e008:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d304      	bcc.n	800e018 <f_lseek+0x320>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2202      	movs	r2, #2
 800e012:	755a      	strb	r2, [r3, #21]
 800e014:	2302      	movs	r3, #2
 800e016:	e074      	b.n	800e102 <f_lseek+0x40a>
					fp->clust = clst;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e01c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e01e:	683a      	ldr	r2, [r7, #0]
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	429a      	cmp	r2, r3
 800e024:	d8c0      	bhi.n	800dfa8 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	699a      	ldr	r2, [r3, #24]
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	441a      	add	r2, r3
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d012      	beq.n	800e062 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e040:	4618      	mov	r0, r3
 800e042:	f7fd ffad 	bl	800bfa0 <clust2sect>
 800e046:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d104      	bne.n	800e058 <f_lseek+0x360>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2202      	movs	r2, #2
 800e052:	755a      	strb	r2, [r3, #21]
 800e054:	2302      	movs	r3, #2
 800e056:	e054      	b.n	800e102 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	0a5b      	lsrs	r3, r3, #9
 800e05c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e05e:	4413      	add	r3, r2
 800e060:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	699a      	ldr	r2, [r3, #24]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d90a      	bls.n	800e084 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	699a      	ldr	r2, [r3, #24]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	7d1b      	ldrb	r3, [r3, #20]
 800e07a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e07e:	b2da      	uxtb	r2, r3
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	699b      	ldr	r3, [r3, #24]
 800e088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d036      	beq.n	800e0fe <f_lseek+0x406>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6a1b      	ldr	r3, [r3, #32]
 800e094:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e096:	429a      	cmp	r2, r3
 800e098:	d031      	beq.n	800e0fe <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	7d1b      	ldrb	r3, [r3, #20]
 800e09e:	b25b      	sxtb	r3, r3
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	da18      	bge.n	800e0d6 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	7858      	ldrb	r0, [r3, #1]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6a1a      	ldr	r2, [r3, #32]
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	f7fd fbea 	bl	800b88c <disk_write>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d004      	beq.n	800e0c8 <f_lseek+0x3d0>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	755a      	strb	r2, [r3, #21]
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	e01c      	b.n	800e102 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	7d1b      	ldrb	r3, [r3, #20]
 800e0cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	7858      	ldrb	r0, [r3, #1]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0e4:	f7fd fbb2 	bl	800b84c <disk_read>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d004      	beq.n	800e0f8 <f_lseek+0x400>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	755a      	strb	r2, [r3, #21]
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	e004      	b.n	800e102 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0fc:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e0fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e102:	4618      	mov	r0, r3
 800e104:	3740      	adds	r7, #64	@ 0x40
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}
	...

0800e10c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b087      	sub	sp, #28
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	4613      	mov	r3, r2
 800e118:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e11a:	2301      	movs	r3, #1
 800e11c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e11e:	2300      	movs	r3, #0
 800e120:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e122:	4b1f      	ldr	r3, [pc, #124]	@ (800e1a0 <FATFS_LinkDriverEx+0x94>)
 800e124:	7a5b      	ldrb	r3, [r3, #9]
 800e126:	b2db      	uxtb	r3, r3
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d131      	bne.n	800e190 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e12c:	4b1c      	ldr	r3, [pc, #112]	@ (800e1a0 <FATFS_LinkDriverEx+0x94>)
 800e12e:	7a5b      	ldrb	r3, [r3, #9]
 800e130:	b2db      	uxtb	r3, r3
 800e132:	461a      	mov	r2, r3
 800e134:	4b1a      	ldr	r3, [pc, #104]	@ (800e1a0 <FATFS_LinkDriverEx+0x94>)
 800e136:	2100      	movs	r1, #0
 800e138:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e13a:	4b19      	ldr	r3, [pc, #100]	@ (800e1a0 <FATFS_LinkDriverEx+0x94>)
 800e13c:	7a5b      	ldrb	r3, [r3, #9]
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	4a17      	ldr	r2, [pc, #92]	@ (800e1a0 <FATFS_LinkDriverEx+0x94>)
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	4413      	add	r3, r2
 800e146:	68fa      	ldr	r2, [r7, #12]
 800e148:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e14a:	4b15      	ldr	r3, [pc, #84]	@ (800e1a0 <FATFS_LinkDriverEx+0x94>)
 800e14c:	7a5b      	ldrb	r3, [r3, #9]
 800e14e:	b2db      	uxtb	r3, r3
 800e150:	461a      	mov	r2, r3
 800e152:	4b13      	ldr	r3, [pc, #76]	@ (800e1a0 <FATFS_LinkDriverEx+0x94>)
 800e154:	4413      	add	r3, r2
 800e156:	79fa      	ldrb	r2, [r7, #7]
 800e158:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e15a:	4b11      	ldr	r3, [pc, #68]	@ (800e1a0 <FATFS_LinkDriverEx+0x94>)
 800e15c:	7a5b      	ldrb	r3, [r3, #9]
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	1c5a      	adds	r2, r3, #1
 800e162:	b2d1      	uxtb	r1, r2
 800e164:	4a0e      	ldr	r2, [pc, #56]	@ (800e1a0 <FATFS_LinkDriverEx+0x94>)
 800e166:	7251      	strb	r1, [r2, #9]
 800e168:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e16a:	7dbb      	ldrb	r3, [r7, #22]
 800e16c:	3330      	adds	r3, #48	@ 0x30
 800e16e:	b2da      	uxtb	r2, r3
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	3301      	adds	r3, #1
 800e178:	223a      	movs	r2, #58	@ 0x3a
 800e17a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	3302      	adds	r3, #2
 800e180:	222f      	movs	r2, #47	@ 0x2f
 800e182:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	3303      	adds	r3, #3
 800e188:	2200      	movs	r2, #0
 800e18a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e18c:	2300      	movs	r3, #0
 800e18e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e190:	7dfb      	ldrb	r3, [r7, #23]
}
 800e192:	4618      	mov	r0, r3
 800e194:	371c      	adds	r7, #28
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	20005bfc 	.word	0x20005bfc

0800e1a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	6839      	ldr	r1, [r7, #0]
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f7ff ffaa 	bl	800e10c <FATFS_LinkDriverEx>
 800e1b8:	4603      	mov	r3, r0
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3708      	adds	r7, #8
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
	...

0800e1c4 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800e1ce:	683a      	ldr	r2, [r7, #0]
 800e1d0:	2101      	movs	r1, #1
 800e1d2:	4831      	ldr	r0, [pc, #196]	@ (800e298 <network_configure_activations+0xd4>)
 800e1d4:	f001 fac0 	bl	800f758 <ai_platform_get_activations_map>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d051      	beq.n	800e282 <network_configure_activations+0xbe>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e1de:	4b2e      	ldr	r3, [pc, #184]	@ (800e298 <network_configure_activations+0xd4>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a2e      	ldr	r2, [pc, #184]	@ (800e29c <network_configure_activations+0xd8>)
 800e1e4:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e1e6:	4b2c      	ldr	r3, [pc, #176]	@ (800e298 <network_configure_activations+0xd4>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a2c      	ldr	r2, [pc, #176]	@ (800e29c <network_configure_activations+0xd8>)
 800e1ec:	60d3      	str	r3, [r2, #12]
    upsample_0_output_array.data = AI_PTR(g_network_activations_map[0] + 63984);
 800e1ee:	4b2a      	ldr	r3, [pc, #168]	@ (800e298 <network_configure_activations+0xd4>)
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800e1f6:	4413      	add	r3, r2
 800e1f8:	4a29      	ldr	r2, [pc, #164]	@ (800e2a0 <network_configure_activations+0xdc>)
 800e1fa:	6093      	str	r3, [r2, #8]
    upsample_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 63984);
 800e1fc:	4b26      	ldr	r3, [pc, #152]	@ (800e298 <network_configure_activations+0xd4>)
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800e204:	4413      	add	r3, r2
 800e206:	4a26      	ldr	r2, [pc, #152]	@ (800e2a0 <network_configure_activations+0xdc>)
 800e208:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e20a:	4b23      	ldr	r3, [pc, #140]	@ (800e298 <network_configure_activations+0xd4>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4a25      	ldr	r2, [pc, #148]	@ (800e2a4 <network_configure_activations+0xe0>)
 800e210:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e212:	4b21      	ldr	r3, [pc, #132]	@ (800e298 <network_configure_activations+0xd4>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4a23      	ldr	r2, [pc, #140]	@ (800e2a4 <network_configure_activations+0xe0>)
 800e218:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 36);
 800e21a:	4b1f      	ldr	r3, [pc, #124]	@ (800e298 <network_configure_activations+0xd4>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	3324      	adds	r3, #36	@ 0x24
 800e220:	4a21      	ldr	r2, [pc, #132]	@ (800e2a8 <network_configure_activations+0xe4>)
 800e222:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 36);
 800e224:	4b1c      	ldr	r3, [pc, #112]	@ (800e298 <network_configure_activations+0xd4>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	3324      	adds	r3, #36	@ 0x24
 800e22a:	4a1f      	ldr	r2, [pc, #124]	@ (800e2a8 <network_configure_activations+0xe4>)
 800e22c:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 3364);
 800e22e:	4b1a      	ldr	r3, [pc, #104]	@ (800e298 <network_configure_activations+0xd4>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800e236:	4a1d      	ldr	r2, [pc, #116]	@ (800e2ac <network_configure_activations+0xe8>)
 800e238:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3364);
 800e23a:	4b17      	ldr	r3, [pc, #92]	@ (800e298 <network_configure_activations+0xd4>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800e242:	4a1a      	ldr	r2, [pc, #104]	@ (800e2ac <network_configure_activations+0xe8>)
 800e244:	60d3      	str	r3, [r2, #12]
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e246:	4b14      	ldr	r3, [pc, #80]	@ (800e298 <network_configure_activations+0xd4>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4a19      	ldr	r2, [pc, #100]	@ (800e2b0 <network_configure_activations+0xec>)
 800e24c:	6093      	str	r3, [r2, #8]
    gemm_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e24e:	4b12      	ldr	r3, [pc, #72]	@ (800e298 <network_configure_activations+0xd4>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4a17      	ldr	r2, [pc, #92]	@ (800e2b0 <network_configure_activations+0xec>)
 800e254:	60d3      	str	r3, [r2, #12]
    nl_4_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800e256:	4b10      	ldr	r3, [pc, #64]	@ (800e298 <network_configure_activations+0xd4>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e25e:	4a15      	ldr	r2, [pc, #84]	@ (800e2b4 <network_configure_activations+0xf0>)
 800e260:	6093      	str	r3, [r2, #8]
    nl_4_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800e262:	4b0d      	ldr	r3, [pc, #52]	@ (800e298 <network_configure_activations+0xd4>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e26a:	4a12      	ldr	r2, [pc, #72]	@ (800e2b4 <network_configure_activations+0xf0>)
 800e26c:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e26e:	4b0a      	ldr	r3, [pc, #40]	@ (800e298 <network_configure_activations+0xd4>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4a11      	ldr	r2, [pc, #68]	@ (800e2b8 <network_configure_activations+0xf4>)
 800e274:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e276:	4b08      	ldr	r3, [pc, #32]	@ (800e298 <network_configure_activations+0xd4>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	4a0f      	ldr	r2, [pc, #60]	@ (800e2b8 <network_configure_activations+0xf4>)
 800e27c:	60d3      	str	r3, [r2, #12]
    return true;
 800e27e:	2301      	movs	r3, #1
 800e280:	e005      	b.n	800e28e <network_configure_activations+0xca>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800e282:	2213      	movs	r2, #19
 800e284:	2130      	movs	r1, #48	@ 0x30
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f001 faca 	bl	800f820 <ai_platform_network_set_error>
  return false;
 800e28c:	2300      	movs	r3, #0
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	20005c08 	.word	0x20005c08
 800e29c:	2000004c 	.word	0x2000004c
 800e2a0:	2000005c 	.word	0x2000005c
 800e2a4:	2000010c 	.word	0x2000010c
 800e2a8:	2000011c 	.word	0x2000011c
 800e2ac:	2000006c 	.word	0x2000006c
 800e2b0:	2000007c 	.word	0x2000007c
 800e2b4:	2000008c 	.word	0x2000008c
 800e2b8:	2000009c 	.word	0x2000009c

0800e2bc <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	2101      	movs	r1, #1
 800e2ca:	483d      	ldr	r0, [pc, #244]	@ (800e3c0 <network_configure_weights+0x104>)
 800e2cc:	f001 f9ec 	bl	800f6a8 <ai_platform_get_weights_map>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d069      	beq.n	800e3aa <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800e2d6:	4b3b      	ldr	r3, [pc, #236]	@ (800e3c4 <network_configure_weights+0x108>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e2de:	4a39      	ldr	r2, [pc, #228]	@ (800e3c4 <network_configure_weights+0x108>)
 800e2e0:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800e2e2:	4b37      	ldr	r3, [pc, #220]	@ (800e3c0 <network_configure_weights+0x104>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a37      	ldr	r2, [pc, #220]	@ (800e3c4 <network_configure_weights+0x108>)
 800e2e8:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800e2ea:	4b35      	ldr	r3, [pc, #212]	@ (800e3c0 <network_configure_weights+0x104>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	4a35      	ldr	r2, [pc, #212]	@ (800e3c4 <network_configure_weights+0x108>)
 800e2f0:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800e2f2:	4b35      	ldr	r3, [pc, #212]	@ (800e3c8 <network_configure_weights+0x10c>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e2fa:	4a33      	ldr	r2, [pc, #204]	@ (800e3c8 <network_configure_weights+0x10c>)
 800e2fc:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 800e2fe:	4b30      	ldr	r3, [pc, #192]	@ (800e3c0 <network_configure_weights+0x104>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800e306:	4a30      	ldr	r2, [pc, #192]	@ (800e3c8 <network_configure_weights+0x10c>)
 800e308:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 800e30a:	4b2d      	ldr	r3, [pc, #180]	@ (800e3c0 <network_configure_weights+0x104>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800e312:	4a2d      	ldr	r2, [pc, #180]	@ (800e3c8 <network_configure_weights+0x10c>)
 800e314:	60d3      	str	r3, [r2, #12]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800e316:	4b2d      	ldr	r3, [pc, #180]	@ (800e3cc <network_configure_weights+0x110>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e31e:	4a2b      	ldr	r2, [pc, #172]	@ (800e3cc <network_configure_weights+0x110>)
 800e320:	6013      	str	r3, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 640);
 800e322:	4b27      	ldr	r3, [pc, #156]	@ (800e3c0 <network_configure_weights+0x104>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800e32a:	4a28      	ldr	r2, [pc, #160]	@ (800e3cc <network_configure_weights+0x110>)
 800e32c:	6093      	str	r3, [r2, #8]
    gemm_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 800e32e:	4b24      	ldr	r3, [pc, #144]	@ (800e3c0 <network_configure_weights+0x104>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800e336:	4a25      	ldr	r2, [pc, #148]	@ (800e3cc <network_configure_weights+0x110>)
 800e338:	60d3      	str	r3, [r2, #12]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800e33a:	4b25      	ldr	r3, [pc, #148]	@ (800e3d0 <network_configure_weights+0x114>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e342:	4a23      	ldr	r2, [pc, #140]	@ (800e3d0 <network_configure_weights+0x114>)
 800e344:	6013      	str	r3, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 692864);
 800e346:	4b1e      	ldr	r3, [pc, #120]	@ (800e3c0 <network_configure_weights+0x104>)
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	4b22      	ldr	r3, [pc, #136]	@ (800e3d4 <network_configure_weights+0x118>)
 800e34c:	4413      	add	r3, r2
 800e34e:	4a20      	ldr	r2, [pc, #128]	@ (800e3d0 <network_configure_weights+0x114>)
 800e350:	6093      	str	r3, [r2, #8]
    gemm_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 692864);
 800e352:	4b1b      	ldr	r3, [pc, #108]	@ (800e3c0 <network_configure_weights+0x104>)
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	4b1f      	ldr	r3, [pc, #124]	@ (800e3d4 <network_configure_weights+0x118>)
 800e358:	4413      	add	r3, r2
 800e35a:	4a1d      	ldr	r2, [pc, #116]	@ (800e3d0 <network_configure_weights+0x114>)
 800e35c:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800e35e:	4b1e      	ldr	r3, [pc, #120]	@ (800e3d8 <network_configure_weights+0x11c>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e366:	4a1c      	ldr	r2, [pc, #112]	@ (800e3d8 <network_configure_weights+0x11c>)
 800e368:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 693120);
 800e36a:	4b15      	ldr	r3, [pc, #84]	@ (800e3c0 <network_configure_weights+0x104>)
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	4b1b      	ldr	r3, [pc, #108]	@ (800e3dc <network_configure_weights+0x120>)
 800e370:	4413      	add	r3, r2
 800e372:	4a19      	ldr	r2, [pc, #100]	@ (800e3d8 <network_configure_weights+0x11c>)
 800e374:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 693120);
 800e376:	4b12      	ldr	r3, [pc, #72]	@ (800e3c0 <network_configure_weights+0x104>)
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	4b18      	ldr	r3, [pc, #96]	@ (800e3dc <network_configure_weights+0x120>)
 800e37c:	4413      	add	r3, r2
 800e37e:	4a16      	ldr	r2, [pc, #88]	@ (800e3d8 <network_configure_weights+0x11c>)
 800e380:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800e382:	4b17      	ldr	r3, [pc, #92]	@ (800e3e0 <network_configure_weights+0x124>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e38a:	4a15      	ldr	r2, [pc, #84]	@ (800e3e0 <network_configure_weights+0x124>)
 800e38c:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 694656);
 800e38e:	4b0c      	ldr	r3, [pc, #48]	@ (800e3c0 <network_configure_weights+0x104>)
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	4b14      	ldr	r3, [pc, #80]	@ (800e3e4 <network_configure_weights+0x128>)
 800e394:	4413      	add	r3, r2
 800e396:	4a12      	ldr	r2, [pc, #72]	@ (800e3e0 <network_configure_weights+0x124>)
 800e398:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 694656);
 800e39a:	4b09      	ldr	r3, [pc, #36]	@ (800e3c0 <network_configure_weights+0x104>)
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	4b11      	ldr	r3, [pc, #68]	@ (800e3e4 <network_configure_weights+0x128>)
 800e3a0:	4413      	add	r3, r2
 800e3a2:	4a0f      	ldr	r2, [pc, #60]	@ (800e3e0 <network_configure_weights+0x124>)
 800e3a4:	60d3      	str	r3, [r2, #12]
    return true;
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	e005      	b.n	800e3b6 <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800e3aa:	2212      	movs	r2, #18
 800e3ac:	2130      	movs	r1, #48	@ 0x30
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f001 fa36 	bl	800f820 <ai_platform_network_set_error>
  return false;
 800e3b4:	2300      	movs	r3, #0
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3708      	adds	r7, #8
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	20005c0c 	.word	0x20005c0c
 800e3c4:	200000ac 	.word	0x200000ac
 800e3c8:	200000bc 	.word	0x200000bc
 800e3cc:	200000cc 	.word	0x200000cc
 800e3d0:	200000dc 	.word	0x200000dc
 800e3d4:	000a9280 	.word	0x000a9280
 800e3d8:	200000ec 	.word	0x200000ec
 800e3dc:	000a9380 	.word	0x000a9380
 800e3e0:	200000fc 	.word	0x200000fc
 800e3e4:	000a9980 	.word	0x000a9980

0800e3e8 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f001 fa09 	bl	800f808 <ai_platform_network_get_error>
 800e3f6:	4603      	mov	r3, r0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af02      	add	r7, sp, #8
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800e40a:	2300      	movs	r3, #0
 800e40c:	9301      	str	r3, [sp, #4]
 800e40e:	2305      	movs	r3, #5
 800e410:	9300      	str	r3, [sp, #0]
 800e412:	2301      	movs	r3, #1
 800e414:	4a04      	ldr	r2, [pc, #16]	@ (800e428 <ai_network_create+0x28>)
 800e416:	6839      	ldr	r1, [r7, #0]
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f001 faf5 	bl	800fa08 <ai_platform_network_create>
 800e41e:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800e420:	4618      	mov	r0, r3
 800e422:	3708      	adds	r7, #8
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}
 800e428:	2000075c 	.word	0x2000075c

0800e42c <ai_network_inputs_get>:
}


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d104      	bne.n	800e446 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800e43c:	4b06      	ldr	r3, [pc, #24]	@ (800e458 <ai_network_inputs_get+0x2c>)
 800e43e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	4a06      	ldr	r2, [pc, #24]	@ (800e45c <ai_network_inputs_get+0x30>)
 800e444:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800e446:	6839      	ldr	r1, [r7, #0]
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f001 f9ef 	bl	800f82c <ai_platform_inputs_get>
 800e44e:	4603      	mov	r3, r0
}
 800e450:	4618      	mov	r0, r3
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	2000075c 	.word	0x2000075c
 800e45c:	a1c00100 	.word	0xa1c00100

0800e460 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d104      	bne.n	800e47a <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800e470:	4b06      	ldr	r3, [pc, #24]	@ (800e48c <ai_network_outputs_get+0x2c>)
 800e472:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	4a06      	ldr	r2, [pc, #24]	@ (800e490 <ai_network_outputs_get+0x30>)
 800e478:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800e47a:	6839      	ldr	r1, [r7, #0]
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f001 fa4d 	bl	800f91c <ai_platform_outputs_get>
 800e482:	4603      	mov	r3, r0
}
 800e484:	4618      	mov	r0, r3
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	2000075c 	.word	0x2000075c
 800e490:	a1c00100 	.word	0xa1c00100

0800e494 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800e49e:	6839      	ldr	r1, [r7, #0]
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f001 faf3 	bl	800fa8c <ai_platform_network_init>
 800e4a6:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d101      	bne.n	800e4b6 <ai_network_init+0x22>
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	e026      	b.n	800e504 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 800e4b6:	6839      	ldr	r1, [r7, #0]
 800e4b8:	68f8      	ldr	r0, [r7, #12]
 800e4ba:	f7ff feff 	bl	800e2bc <network_configure_weights>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	7afb      	ldrb	r3, [r7, #11]
 800e4c4:	4013      	ands	r3, r2
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	bf14      	ite	ne
 800e4ca:	2301      	movne	r3, #1
 800e4cc:	2300      	moveq	r3, #0
 800e4ce:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800e4d0:	6839      	ldr	r1, [r7, #0]
 800e4d2:	68f8      	ldr	r0, [r7, #12]
 800e4d4:	f7ff fe76 	bl	800e1c4 <network_configure_activations>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	461a      	mov	r2, r3
 800e4dc:	7afb      	ldrb	r3, [r7, #11]
 800e4de:	4013      	ands	r3, r2
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	bf14      	ite	ne
 800e4e4:	2301      	movne	r3, #1
 800e4e6:	2300      	moveq	r3, #0
 800e4e8:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f001 fb8e 	bl	800fc0c <ai_platform_network_post_init>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	7afb      	ldrb	r3, [r7, #11]
 800e4f6:	4013      	ands	r3, r2
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	bf14      	ite	ne
 800e4fc:	2301      	movne	r3, #1
 800e4fe:	2300      	moveq	r3, #0
 800e500:	72fb      	strb	r3, [r7, #11]

  return ok;
 800e502:	7afb      	ldrb	r3, [r7, #11]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3710      	adds	r7, #16
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	68b9      	ldr	r1, [r7, #8]
 800e51c:	68f8      	ldr	r0, [r7, #12]
 800e51e:	f001 fba5 	bl	800fc6c <ai_platform_network_process>
 800e522:	4603      	mov	r3, r0
}
 800e524:	4618      	mov	r0, r3
 800e526:	3710      	adds	r7, #16
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 800e52c:	b4b0      	push	{r4, r5, r7}
 800e52e:	b08f      	sub	sp, #60	@ 0x3c
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800e536:	4b15      	ldr	r3, [pc, #84]	@ (800e58c <ai_network_data_activations_buffer_get+0x60>)
 800e538:	61fb      	str	r3, [r7, #28]
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	623b      	str	r3, [r7, #32]
 800e53e:	2300      	movs	r3, #0
 800e540:	627b      	str	r3, [r7, #36]	@ 0x24
 800e542:	2300      	movs	r3, #0
 800e544:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e546:	4b12      	ldr	r3, [pc, #72]	@ (800e590 <ai_network_data_activations_buffer_get+0x64>)
 800e548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e54a:	2301      	movs	r3, #1
 800e54c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800e550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e552:	2204      	movs	r2, #4
 800e554:	f362 231f 	bfi	r3, r2, #8, #24
 800e558:	633b      	str	r3, [r7, #48]	@ 0x30
 800e55a:	4b0e      	ldr	r3, [pc, #56]	@ (800e594 <ai_network_data_activations_buffer_get+0x68>)
 800e55c:	f107 040c 	add.w	r4, r7, #12
 800e560:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e562:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e566:	f107 030c 	add.w	r3, r7, #12
 800e56a:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	461d      	mov	r5, r3
 800e570:	f107 041c 	add.w	r4, r7, #28
 800e574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e578:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e57c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	373c      	adds	r7, #60	@ 0x3c
 800e584:	46bd      	mov	sp, r7
 800e586:	bcb0      	pop	{r4, r5, r7}
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	00040440 	.word	0x00040440
 800e590:	00010630 	.word	0x00010630
 800e594:	08015d68 	.word	0x08015d68

0800e598 <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 800e598:	b4b0      	push	{r4, r5, r7}
 800e59a:	b08f      	sub	sp, #60	@ 0x3c
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800e5a2:	4b15      	ldr	r3, [pc, #84]	@ (800e5f8 <ai_network_data_weights_buffer_get+0x60>)
 800e5a4:	61fb      	str	r3, [r7, #28]
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	623b      	str	r3, [r7, #32]
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e5b2:	4b12      	ldr	r3, [pc, #72]	@ (800e5fc <ai_network_data_weights_buffer_get+0x64>)
 800e5b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800e5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5be:	2204      	movs	r2, #4
 800e5c0:	f362 231f 	bfi	r3, r2, #8, #24
 800e5c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800e5c6:	4b0e      	ldr	r3, [pc, #56]	@ (800e600 <ai_network_data_weights_buffer_get+0x68>)
 800e5c8:	f107 040c 	add.w	r4, r7, #12
 800e5cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e5ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e5d2:	f107 030c 	add.w	r3, r7, #12
 800e5d6:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	461d      	mov	r5, r3
 800e5dc:	f107 041c 	add.w	r4, r7, #28
 800e5e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e5e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e5e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e5e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	373c      	adds	r7, #60	@ 0x3c
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bcb0      	pop	{r4, r5, r7}
 800e5f4:	4770      	bx	lr
 800e5f6:	bf00      	nop
 800e5f8:	40040440 	.word	0x40040440
 800e5fc:	000a9998 	.word	0x000a9998
 800e600:	08015d78 	.word	0x08015d78

0800e604 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 800e604:	b480      	push	{r7}
 800e606:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_network_weights_table);
 800e608:	4b02      	ldr	r3, [pc, #8]	@ (800e614 <ai_network_data_weights_get+0x10>)

}
 800e60a:	4618      	mov	r0, r3
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr
 800e614:	20000800 	.word	0x20000800

0800e618 <arm_rfft_fast_init_f32>:
 800e618:	084b      	lsrs	r3, r1, #1
 800e61a:	2b80      	cmp	r3, #128	@ 0x80
 800e61c:	b430      	push	{r4, r5}
 800e61e:	8201      	strh	r1, [r0, #16]
 800e620:	8003      	strh	r3, [r0, #0]
 800e622:	d070      	beq.n	800e706 <arm_rfft_fast_init_f32+0xee>
 800e624:	d916      	bls.n	800e654 <arm_rfft_fast_init_f32+0x3c>
 800e626:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e62a:	d05f      	beq.n	800e6ec <arm_rfft_fast_init_f32+0xd4>
 800e62c:	d936      	bls.n	800e69c <arm_rfft_fast_init_f32+0x84>
 800e62e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e632:	d026      	beq.n	800e682 <arm_rfft_fast_init_f32+0x6a>
 800e634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e638:	d112      	bne.n	800e660 <arm_rfft_fast_init_f32+0x48>
 800e63a:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 800e63e:	4c38      	ldr	r4, [pc, #224]	@ (800e720 <arm_rfft_fast_init_f32+0x108>)
 800e640:	4938      	ldr	r1, [pc, #224]	@ (800e724 <arm_rfft_fast_init_f32+0x10c>)
 800e642:	2300      	movs	r3, #0
 800e644:	4a38      	ldr	r2, [pc, #224]	@ (800e728 <arm_rfft_fast_init_f32+0x110>)
 800e646:	8185      	strh	r5, [r0, #12]
 800e648:	6084      	str	r4, [r0, #8]
 800e64a:	6041      	str	r1, [r0, #4]
 800e64c:	6142      	str	r2, [r0, #20]
 800e64e:	4618      	mov	r0, r3
 800e650:	bc30      	pop	{r4, r5}
 800e652:	4770      	bx	lr
 800e654:	2b20      	cmp	r3, #32
 800e656:	d031      	beq.n	800e6bc <arm_rfft_fast_init_f32+0xa4>
 800e658:	2b40      	cmp	r3, #64	@ 0x40
 800e65a:	d006      	beq.n	800e66a <arm_rfft_fast_init_f32+0x52>
 800e65c:	2b10      	cmp	r3, #16
 800e65e:	d039      	beq.n	800e6d4 <arm_rfft_fast_init_f32+0xbc>
 800e660:	f04f 33ff 	mov.w	r3, #4294967295
 800e664:	bc30      	pop	{r4, r5}
 800e666:	4618      	mov	r0, r3
 800e668:	4770      	bx	lr
 800e66a:	2538      	movs	r5, #56	@ 0x38
 800e66c:	4c2f      	ldr	r4, [pc, #188]	@ (800e72c <arm_rfft_fast_init_f32+0x114>)
 800e66e:	4930      	ldr	r1, [pc, #192]	@ (800e730 <arm_rfft_fast_init_f32+0x118>)
 800e670:	2300      	movs	r3, #0
 800e672:	4a30      	ldr	r2, [pc, #192]	@ (800e734 <arm_rfft_fast_init_f32+0x11c>)
 800e674:	8185      	strh	r5, [r0, #12]
 800e676:	6084      	str	r4, [r0, #8]
 800e678:	6041      	str	r1, [r0, #4]
 800e67a:	6142      	str	r2, [r0, #20]
 800e67c:	4618      	mov	r0, r3
 800e67e:	bc30      	pop	{r4, r5}
 800e680:	4770      	bx	lr
 800e682:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 800e686:	4c2c      	ldr	r4, [pc, #176]	@ (800e738 <arm_rfft_fast_init_f32+0x120>)
 800e688:	492c      	ldr	r1, [pc, #176]	@ (800e73c <arm_rfft_fast_init_f32+0x124>)
 800e68a:	2300      	movs	r3, #0
 800e68c:	4a2c      	ldr	r2, [pc, #176]	@ (800e740 <arm_rfft_fast_init_f32+0x128>)
 800e68e:	8185      	strh	r5, [r0, #12]
 800e690:	6084      	str	r4, [r0, #8]
 800e692:	6041      	str	r1, [r0, #4]
 800e694:	6142      	str	r2, [r0, #20]
 800e696:	4618      	mov	r0, r3
 800e698:	bc30      	pop	{r4, r5}
 800e69a:	4770      	bx	lr
 800e69c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e6a0:	d1de      	bne.n	800e660 <arm_rfft_fast_init_f32+0x48>
 800e6a2:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 800e6a6:	4c27      	ldr	r4, [pc, #156]	@ (800e744 <arm_rfft_fast_init_f32+0x12c>)
 800e6a8:	4927      	ldr	r1, [pc, #156]	@ (800e748 <arm_rfft_fast_init_f32+0x130>)
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	4a27      	ldr	r2, [pc, #156]	@ (800e74c <arm_rfft_fast_init_f32+0x134>)
 800e6ae:	8185      	strh	r5, [r0, #12]
 800e6b0:	6084      	str	r4, [r0, #8]
 800e6b2:	6041      	str	r1, [r0, #4]
 800e6b4:	6142      	str	r2, [r0, #20]
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	bc30      	pop	{r4, r5}
 800e6ba:	4770      	bx	lr
 800e6bc:	2530      	movs	r5, #48	@ 0x30
 800e6be:	4c24      	ldr	r4, [pc, #144]	@ (800e750 <arm_rfft_fast_init_f32+0x138>)
 800e6c0:	4924      	ldr	r1, [pc, #144]	@ (800e754 <arm_rfft_fast_init_f32+0x13c>)
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	4a24      	ldr	r2, [pc, #144]	@ (800e758 <arm_rfft_fast_init_f32+0x140>)
 800e6c6:	8185      	strh	r5, [r0, #12]
 800e6c8:	6084      	str	r4, [r0, #8]
 800e6ca:	6041      	str	r1, [r0, #4]
 800e6cc:	6142      	str	r2, [r0, #20]
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	bc30      	pop	{r4, r5}
 800e6d2:	4770      	bx	lr
 800e6d4:	2514      	movs	r5, #20
 800e6d6:	4c21      	ldr	r4, [pc, #132]	@ (800e75c <arm_rfft_fast_init_f32+0x144>)
 800e6d8:	4921      	ldr	r1, [pc, #132]	@ (800e760 <arm_rfft_fast_init_f32+0x148>)
 800e6da:	2300      	movs	r3, #0
 800e6dc:	4a21      	ldr	r2, [pc, #132]	@ (800e764 <arm_rfft_fast_init_f32+0x14c>)
 800e6de:	8185      	strh	r5, [r0, #12]
 800e6e0:	6084      	str	r4, [r0, #8]
 800e6e2:	6041      	str	r1, [r0, #4]
 800e6e4:	6142      	str	r2, [r0, #20]
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	bc30      	pop	{r4, r5}
 800e6ea:	4770      	bx	lr
 800e6ec:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 800e6f0:	4c1d      	ldr	r4, [pc, #116]	@ (800e768 <arm_rfft_fast_init_f32+0x150>)
 800e6f2:	491e      	ldr	r1, [pc, #120]	@ (800e76c <arm_rfft_fast_init_f32+0x154>)
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	4a1e      	ldr	r2, [pc, #120]	@ (800e770 <arm_rfft_fast_init_f32+0x158>)
 800e6f8:	8185      	strh	r5, [r0, #12]
 800e6fa:	6084      	str	r4, [r0, #8]
 800e6fc:	6041      	str	r1, [r0, #4]
 800e6fe:	6142      	str	r2, [r0, #20]
 800e700:	4618      	mov	r0, r3
 800e702:	bc30      	pop	{r4, r5}
 800e704:	4770      	bx	lr
 800e706:	25d0      	movs	r5, #208	@ 0xd0
 800e708:	4c1a      	ldr	r4, [pc, #104]	@ (800e774 <arm_rfft_fast_init_f32+0x15c>)
 800e70a:	491b      	ldr	r1, [pc, #108]	@ (800e778 <arm_rfft_fast_init_f32+0x160>)
 800e70c:	2300      	movs	r3, #0
 800e70e:	4a1b      	ldr	r2, [pc, #108]	@ (800e77c <arm_rfft_fast_init_f32+0x164>)
 800e710:	8185      	strh	r5, [r0, #12]
 800e712:	6084      	str	r4, [r0, #8]
 800e714:	6041      	str	r1, [r0, #4]
 800e716:	6142      	str	r2, [r0, #20]
 800e718:	4618      	mov	r0, r3
 800e71a:	bc30      	pop	{r4, r5}
 800e71c:	4770      	bx	lr
 800e71e:	bf00      	nop
 800e720:	080ce640 	.word	0x080ce640
 800e724:	080bf838 	.word	0x080bf838
 800e728:	080c59a8 	.word	0x080c59a8
 800e72c:	080c3938 	.word	0x080c3938
 800e730:	080d0400 	.word	0x080d0400
 800e734:	080d28f0 	.word	0x080d28f0
 800e738:	080cc328 	.word	0x080cc328
 800e73c:	080ca228 	.word	0x080ca228
 800e740:	080c39a8 	.word	0x080c39a8
 800e744:	080d2580 	.word	0x080d2580
 800e748:	080c99a8 	.word	0x080c99a8
 800e74c:	080d0600 	.word	0x080d0600
 800e750:	080cd1e0 	.word	0x080cd1e0
 800e754:	080cc228 	.word	0x080cc228
 800e758:	080c3838 	.word	0x080c3838
 800e75c:	080cd138 	.word	0x080cd138
 800e760:	080ca1a8 	.word	0x080ca1a8
 800e764:	080cd160 	.word	0x080cd160
 800e768:	080d0e00 	.word	0x080d0e00
 800e76c:	080cd640 	.word	0x080cd640
 800e770:	080d1180 	.word	0x080d1180
 800e774:	080d2af0 	.word	0x080d2af0
 800e778:	080cd240 	.word	0x080cd240
 800e77c:	080d2180 	.word	0x080d2180

0800e780 <arm_rfft_fast_f32>:
 800e780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e784:	8a05      	ldrh	r5, [r0, #16]
 800e786:	4606      	mov	r6, r0
 800e788:	4617      	mov	r7, r2
 800e78a:	460c      	mov	r4, r1
 800e78c:	086d      	lsrs	r5, r5, #1
 800e78e:	8005      	strh	r5, [r0, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d15e      	bne.n	800e852 <arm_rfft_fast_f32+0xd2>
 800e794:	461a      	mov	r2, r3
 800e796:	2301      	movs	r3, #1
 800e798:	f000 fbde 	bl	800ef58 <arm_cfft_f32>
 800e79c:	edd4 7a00 	vldr	s15, [r4]
 800e7a0:	ed94 7a01 	vldr	s14, [r4, #4]
 800e7a4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e7a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e7ac:	8832      	ldrh	r2, [r6, #0]
 800e7ae:	ee37 7a07 	vadd.f32	s14, s14, s14
 800e7b2:	6975      	ldr	r5, [r6, #20]
 800e7b4:	3a01      	subs	r2, #1
 800e7b6:	eeb0 3a46 	vmov.f32	s6, s12
 800e7ba:	3510      	adds	r5, #16
 800e7bc:	f107 0610 	add.w	r6, r7, #16
 800e7c0:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e7c4:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800e7c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e7cc:	f104 0310 	add.w	r3, r4, #16
 800e7d0:	3808      	subs	r0, #8
 800e7d2:	ee26 7a86 	vmul.f32	s14, s13, s12
 800e7d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e7da:	ed87 7a00 	vstr	s14, [r7]
 800e7de:	edc7 7a01 	vstr	s15, [r7, #4]
 800e7e2:	ed90 7a02 	vldr	s14, [r0, #8]
 800e7e6:	3a01      	subs	r2, #1
 800e7e8:	ed53 6a02 	vldr	s13, [r3, #-8]
 800e7ec:	f1a0 0008 	sub.w	r0, r0, #8
 800e7f0:	ed15 6a02 	vldr	s12, [r5, #-8]
 800e7f4:	f103 0308 	add.w	r3, r3, #8
 800e7f8:	ee77 7a66 	vsub.f32	s15, s14, s13
 800e7fc:	edd0 3a05 	vldr	s7, [r0, #20]
 800e800:	ed13 5a03 	vldr	s10, [r3, #-12]
 800e804:	ee77 4a26 	vadd.f32	s9, s14, s13
 800e808:	ed55 5a01 	vldr	s11, [r5, #-4]
 800e80c:	f106 0608 	add.w	r6, r6, #8
 800e810:	ee66 6a27 	vmul.f32	s13, s12, s15
 800e814:	f105 0508 	add.w	r5, r5, #8
 800e818:	ee33 4a85 	vadd.f32	s8, s7, s10
 800e81c:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800e820:	ee35 5a63 	vsub.f32	s10, s10, s7
 800e824:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e828:	ee26 6a04 	vmul.f32	s12, s12, s8
 800e82c:	ee77 7a05 	vadd.f32	s15, s14, s10
 800e830:	ee65 5a84 	vmul.f32	s11, s11, s8
 800e834:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e838:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800e83c:	ee67 7a83 	vmul.f32	s15, s15, s6
 800e840:	ee27 7a03 	vmul.f32	s14, s14, s6
 800e844:	ed46 7a03 	vstr	s15, [r6, #-12]
 800e848:	ed06 7a04 	vstr	s14, [r6, #-16]
 800e84c:	d1c9      	bne.n	800e7e2 <arm_rfft_fast_f32+0x62>
 800e84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e852:	edd1 7a00 	vldr	s15, [r1]
 800e856:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800e85a:	edd1 6a01 	vldr	s13, [r1, #4]
 800e85e:	1e68      	subs	r0, r5, #1
 800e860:	6975      	ldr	r5, [r6, #20]
 800e862:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e866:	00c1      	lsls	r1, r0, #3
 800e868:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e86c:	ee27 7a23 	vmul.f32	s14, s14, s7
 800e870:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800e874:	ed82 7a00 	vstr	s14, [r2]
 800e878:	edc2 7a01 	vstr	s15, [r2, #4]
 800e87c:	b3e0      	cbz	r0, 800e8f8 <arm_rfft_fast_f32+0x178>
 800e87e:	3908      	subs	r1, #8
 800e880:	f104 0210 	add.w	r2, r4, #16
 800e884:	3510      	adds	r5, #16
 800e886:	440c      	add	r4, r1
 800e888:	f107 0110 	add.w	r1, r7, #16
 800e88c:	ed94 7a02 	vldr	s14, [r4, #8]
 800e890:	3801      	subs	r0, #1
 800e892:	ed52 6a02 	vldr	s13, [r2, #-8]
 800e896:	f1a4 0408 	sub.w	r4, r4, #8
 800e89a:	ed15 6a02 	vldr	s12, [r5, #-8]
 800e89e:	f102 0208 	add.w	r2, r2, #8
 800e8a2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800e8a6:	ed94 4a05 	vldr	s8, [r4, #20]
 800e8aa:	ed12 5a03 	vldr	s10, [r2, #-12]
 800e8ae:	ee77 6a26 	vadd.f32	s13, s14, s13
 800e8b2:	ed55 5a01 	vldr	s11, [r5, #-4]
 800e8b6:	f101 0108 	add.w	r1, r1, #8
 800e8ba:	ee26 3a27 	vmul.f32	s6, s12, s15
 800e8be:	f105 0508 	add.w	r5, r5, #8
 800e8c2:	ee74 4a05 	vadd.f32	s9, s8, s10
 800e8c6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800e8ca:	ee35 5a44 	vsub.f32	s10, s10, s8
 800e8ce:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800e8d2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e8d6:	ee77 7a05 	vadd.f32	s15, s14, s10
 800e8da:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800e8de:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e8e2:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800e8e6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800e8ea:	ee27 7a23 	vmul.f32	s14, s14, s7
 800e8ee:	ed41 7a03 	vstr	s15, [r1, #-12]
 800e8f2:	ed01 7a04 	vstr	s14, [r1, #-16]
 800e8f6:	d1c9      	bne.n	800e88c <arm_rfft_fast_f32+0x10c>
 800e8f8:	461a      	mov	r2, r3
 800e8fa:	4639      	mov	r1, r7
 800e8fc:	4630      	mov	r0, r6
 800e8fe:	2301      	movs	r3, #1
 800e900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e904:	f000 bb28 	b.w	800ef58 <arm_cfft_f32>

0800e908 <arm_cfft_radix8by2_f32>:
 800e908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e90c:	4607      	mov	r7, r0
 800e90e:	4608      	mov	r0, r1
 800e910:	ed2d 8b06 	vpush	{d8-d10}
 800e914:	f8b7 e000 	ldrh.w	lr, [r7]
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800e91e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800e922:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800e926:	f000 80b0 	beq.w	800ea8a <arm_cfft_radix8by2_f32+0x182>
 800e92a:	008b      	lsls	r3, r1, #2
 800e92c:	3210      	adds	r2, #16
 800e92e:	f100 0610 	add.w	r6, r0, #16
 800e932:	f108 0510 	add.w	r5, r8, #16
 800e936:	3310      	adds	r3, #16
 800e938:	18c4      	adds	r4, r0, r3
 800e93a:	4443      	add	r3, r8
 800e93c:	ed55 6a04 	vldr	s13, [r5, #-16]
 800e940:	f1be 0e01 	subs.w	lr, lr, #1
 800e944:	ed56 4a04 	vldr	s9, [r6, #-16]
 800e948:	f104 0410 	add.w	r4, r4, #16
 800e94c:	ed15 7a03 	vldr	s14, [r5, #-12]
 800e950:	f106 0610 	add.w	r6, r6, #16
 800e954:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800e958:	ed55 7a02 	vldr	s15, [r5, #-8]
 800e95c:	ed55 2a01 	vldr	s5, [r5, #-4]
 800e960:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800e964:	ed53 0a04 	vldr	s1, [r3, #-16]
 800e968:	f102 0210 	add.w	r2, r2, #16
 800e96c:	ed13 5a03 	vldr	s10, [r3, #-12]
 800e970:	f105 0510 	add.w	r5, r5, #16
 800e974:	ed13 3a02 	vldr	s6, [r3, #-8]
 800e978:	f103 0310 	add.w	r3, r3, #16
 800e97c:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 800e980:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 800e984:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800e988:	ee33 8a83 	vadd.f32	s16, s7, s6
 800e98c:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 800e990:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 800e994:	ee34 0a06 	vadd.f32	s0, s8, s12
 800e998:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 800e99c:	ee76 aa87 	vadd.f32	s21, s13, s14
 800e9a0:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 800e9a4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e9a8:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 800e9ac:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800e9b0:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 800e9b4:	ee71 8a05 	vadd.f32	s17, s2, s10
 800e9b8:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800e9bc:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 800e9c0:	ee72 9a22 	vadd.f32	s19, s4, s5
 800e9c4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800e9c8:	ee35 5a41 	vsub.f32	s10, s10, s2
 800e9cc:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 800e9d0:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 800e9d4:	ee36 6a44 	vsub.f32	s12, s12, s8
 800e9d8:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 800e9dc:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800e9e0:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 800e9e4:	ee72 7a62 	vsub.f32	s15, s4, s5
 800e9e8:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 800e9ec:	ee73 2a63 	vsub.f32	s5, s6, s7
 800e9f0:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 800e9f4:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 800e9f8:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 800e9fc:	ee24 3a84 	vmul.f32	s6, s9, s8
 800ea00:	ee27 2a26 	vmul.f32	s4, s14, s13
 800ea04:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800ea08:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800ea0c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ea10:	ee65 5a84 	vmul.f32	s11, s11, s8
 800ea14:	ee65 6a26 	vmul.f32	s13, s10, s13
 800ea18:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ea1c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ea20:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800ea24:	ee33 4a02 	vadd.f32	s8, s6, s4
 800ea28:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800ea2c:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 800ea30:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 800ea34:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 800ea38:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800ea3c:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800ea40:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800ea44:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800ea48:	ee27 4a87 	vmul.f32	s8, s15, s14
 800ea4c:	ee61 5a87 	vmul.f32	s11, s3, s14
 800ea50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ea54:	ee22 5a87 	vmul.f32	s10, s5, s14
 800ea58:	ee26 7a07 	vmul.f32	s14, s12, s14
 800ea5c:	ee26 6a26 	vmul.f32	s12, s12, s13
 800ea60:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800ea64:	ee74 4a84 	vadd.f32	s9, s9, s8
 800ea68:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ea6c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800ea70:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ea74:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 800ea78:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 800ea7c:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800ea80:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800ea84:	f47f af5a 	bne.w	800e93c <arm_cfft_radix8by2_f32+0x34>
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	b28c      	uxth	r4, r1
 800ea8c:	2302      	movs	r3, #2
 800ea8e:	4621      	mov	r1, r4
 800ea90:	f000 fada 	bl	800f048 <arm_radix8_butterfly_f32>
 800ea94:	4621      	mov	r1, r4
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	4640      	mov	r0, r8
 800ea9a:	2302      	movs	r3, #2
 800ea9c:	ecbd 8b06 	vpop	{d8-d10}
 800eaa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eaa4:	f000 bad0 	b.w	800f048 <arm_radix8_butterfly_f32>

0800eaa8 <arm_cfft_radix8by4_f32>:
 800eaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaac:	ed2d 8b06 	vpush	{d8-d10}
 800eab0:	8804      	ldrh	r4, [r0, #0]
 800eab2:	b08f      	sub	sp, #60	@ 0x3c
 800eab4:	ed91 6a00 	vldr	s12, [r1]
 800eab8:	460a      	mov	r2, r1
 800eaba:	0864      	lsrs	r4, r4, #1
 800eabc:	ed91 7a01 	vldr	s14, [r1, #4]
 800eac0:	9101      	str	r1, [sp, #4]
 800eac2:	00a3      	lsls	r3, r4, #2
 800eac4:	6841      	ldr	r1, [r0, #4]
 800eac6:	0864      	lsrs	r4, r4, #1
 800eac8:	900c      	str	r0, [sp, #48]	@ 0x30
 800eaca:	9205      	str	r2, [sp, #20]
 800eacc:	f101 0610 	add.w	r6, r1, #16
 800ead0:	4625      	mov	r5, r4
 800ead2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ead4:	f101 0408 	add.w	r4, r1, #8
 800ead8:	9602      	str	r6, [sp, #8]
 800eada:	9407      	str	r4, [sp, #28]
 800eadc:	18d4      	adds	r4, r2, r3
 800eade:	1eaa      	subs	r2, r5, #2
 800eae0:	f101 0518 	add.w	r5, r1, #24
 800eae4:	18e0      	adds	r0, r4, r3
 800eae6:	edd4 4a00 	vldr	s9, [r4]
 800eaea:	ed94 4a01 	vldr	s8, [r4, #4]
 800eaee:	46a6      	mov	lr, r4
 800eaf0:	edd0 6a00 	vldr	s13, [r0]
 800eaf4:	18c7      	adds	r7, r0, r3
 800eaf6:	edd0 7a01 	vldr	s15, [r0, #4]
 800eafa:	46a0      	mov	r8, r4
 800eafc:	ee76 5a26 	vadd.f32	s11, s12, s13
 800eb00:	ed97 5a00 	vldr	s10, [r7]
 800eb04:	ee76 6a66 	vsub.f32	s13, s12, s13
 800eb08:	4604      	mov	r4, r0
 800eb0a:	9506      	str	r5, [sp, #24]
 800eb0c:	4605      	mov	r5, r0
 800eb0e:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800eb12:	900a      	str	r0, [sp, #40]	@ 0x28
 800eb14:	9801      	ldr	r0, [sp, #4]
 800eb16:	ee37 6a27 	vadd.f32	s12, s14, s15
 800eb1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb1e:	ed97 3a01 	vldr	s6, [r7, #4]
 800eb22:	ee72 2a85 	vadd.f32	s5, s5, s10
 800eb26:	46bc      	mov	ip, r7
 800eb28:	ee76 3a84 	vadd.f32	s7, s13, s8
 800eb2c:	9704      	str	r7, [sp, #16]
 800eb2e:	ee36 7a44 	vsub.f32	s14, s12, s8
 800eb32:	f8cd e00c 	str.w	lr, [sp, #12]
 800eb36:	ee12 9a90 	vmov	r9, s5
 800eb3a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800eb3e:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800eb42:	1f3e      	subs	r6, r7, #4
 800eb44:	f840 9b08 	str.w	r9, [r0], #8
 800eb48:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800eb4c:	edde 2a01 	vldr	s5, [lr, #4]
 800eb50:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800eb54:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800eb58:	eddc 4a01 	vldr	s9, [ip, #4]
 800eb5c:	ee36 6a22 	vadd.f32	s12, s12, s5
 800eb60:	9001      	str	r0, [sp, #4]
 800eb62:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800eb66:	9805      	ldr	r0, [sp, #20]
 800eb68:	ee13 9a90 	vmov	r9, s7
 800eb6c:	ee37 7a43 	vsub.f32	s14, s14, s6
 800eb70:	ee36 6a24 	vadd.f32	s12, s12, s9
 800eb74:	f1ae 0704 	sub.w	r7, lr, #4
 800eb78:	ee74 4a05 	vadd.f32	s9, s8, s10
 800eb7c:	ee76 6a83 	vadd.f32	s13, s13, s6
 800eb80:	ed80 6a01 	vstr	s12, [r0, #4]
 800eb84:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800eb88:	f848 9b08 	str.w	r9, [r8], #8
 800eb8c:	edce 4a01 	vstr	s9, [lr, #4]
 800eb90:	ee15 ea90 	vmov	lr, s11
 800eb94:	f844 eb08 	str.w	lr, [r4], #8
 800eb98:	ee16 ea90 	vmov	lr, s13
 800eb9c:	9408      	str	r4, [sp, #32]
 800eb9e:	462c      	mov	r4, r5
 800eba0:	ed85 7a01 	vstr	s14, [r5, #4]
 800eba4:	9d04      	ldr	r5, [sp, #16]
 800eba6:	f84c eb08 	str.w	lr, [ip], #8
 800ebaa:	edc5 7a01 	vstr	s15, [r5, #4]
 800ebae:	0855      	lsrs	r5, r2, #1
 800ebb0:	9509      	str	r5, [sp, #36]	@ 0x24
 800ebb2:	f000 8130 	beq.w	800ee16 <arm_cfft_radix8by4_f32+0x36e>
 800ebb6:	9805      	ldr	r0, [sp, #20]
 800ebb8:	3b08      	subs	r3, #8
 800ebba:	46ab      	mov	fp, r5
 800ebbc:	f1a4 020c 	sub.w	r2, r4, #12
 800ebc0:	f100 0510 	add.w	r5, r0, #16
 800ebc4:	f101 0920 	add.w	r9, r1, #32
 800ebc8:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800ebcc:	f8dd a008 	ldr.w	sl, [sp, #8]
 800ebd0:	4433      	add	r3, r6
 800ebd2:	3410      	adds	r4, #16
 800ebd4:	4660      	mov	r0, ip
 800ebd6:	4641      	mov	r1, r8
 800ebd8:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 800ebdc:	ed54 6a02 	vldr	s13, [r4, #-8]
 800ebe0:	f1bb 0b01 	subs.w	fp, fp, #1
 800ebe4:	ed55 5a02 	vldr	s11, [r5, #-8]
 800ebe8:	f10a 0a08 	add.w	sl, sl, #8
 800ebec:	edd1 7a00 	vldr	s15, [r1]
 800ebf0:	f105 0508 	add.w	r5, r5, #8
 800ebf4:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800ebf8:	edd0 2a00 	vldr	s5, [r0]
 800ebfc:	ed14 7a01 	vldr	s14, [r4, #-4]
 800ec00:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800ec04:	ed55 6a03 	vldr	s13, [r5, #-12]
 800ec08:	f1a2 0208 	sub.w	r2, r2, #8
 800ec0c:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800ec10:	ed90 2a01 	vldr	s4, [r0, #4]
 800ec14:	ee36 5a87 	vadd.f32	s10, s13, s14
 800ec18:	ed91 6a01 	vldr	s12, [r1, #4]
 800ec1c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ec20:	f109 0910 	add.w	r9, r9, #16
 800ec24:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800ec28:	f104 0408 	add.w	r4, r4, #8
 800ec2c:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800ec30:	f10e 0e18 	add.w	lr, lr, #24
 800ec34:	ee37 3a67 	vsub.f32	s6, s14, s15
 800ec38:	f1a3 0308 	sub.w	r3, r3, #8
 800ec3c:	ed45 6a04 	vstr	s13, [r5, #-16]
 800ec40:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec44:	edd1 6a01 	vldr	s13, [r1, #4]
 800ec48:	ee75 1a86 	vadd.f32	s3, s11, s12
 800ec4c:	edd0 4a01 	vldr	s9, [r0, #4]
 800ec50:	ee33 3a22 	vadd.f32	s6, s6, s5
 800ec54:	ee75 6a26 	vadd.f32	s13, s10, s13
 800ec58:	ee35 5a46 	vsub.f32	s10, s10, s12
 800ec5c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800ec60:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ec64:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800ec68:	ee35 5a42 	vsub.f32	s10, s10, s4
 800ec6c:	ed45 6a03 	vstr	s13, [r5, #-12]
 800ec70:	ee36 2a02 	vadd.f32	s4, s12, s4
 800ec74:	edd6 7a00 	vldr	s15, [r6]
 800ec78:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800ec7c:	ed97 1a00 	vldr	s2, [r7]
 800ec80:	ee77 2a62 	vsub.f32	s5, s14, s5
 800ec84:	ed92 8a04 	vldr	s16, [r2, #16]
 800ec88:	ee71 8a27 	vadd.f32	s17, s2, s15
 800ec8c:	ed93 aa04 	vldr	s20, [r3, #16]
 800ec90:	ed16 7a01 	vldr	s14, [r6, #-4]
 800ec94:	ee71 7a67 	vsub.f32	s15, s2, s15
 800ec98:	ed57 0a01 	vldr	s1, [r7, #-4]
 800ec9c:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800eca0:	ee38 6a88 	vadd.f32	s12, s17, s16
 800eca4:	edd3 9a03 	vldr	s19, [r3, #12]
 800eca8:	ee30 0a87 	vadd.f32	s0, s1, s14
 800ecac:	ed92 9a03 	vldr	s18, [r2, #12]
 800ecb0:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800ecb4:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800ecb8:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800ecbc:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800ecc0:	ee16 ca10 	vmov	ip, s12
 800ecc4:	ee30 6a49 	vsub.f32	s12, s0, s18
 800ecc8:	ee77 4a01 	vadd.f32	s9, s14, s2
 800eccc:	f847 c908 	str.w	ip, [r7], #-8
 800ecd0:	ee34 4a29 	vadd.f32	s8, s8, s19
 800ecd4:	edd2 8a03 	vldr	s17, [r2, #12]
 800ecd8:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800ecdc:	ed93 8a03 	vldr	s16, [r3, #12]
 800ece0:	ee71 0a47 	vsub.f32	s1, s2, s14
 800ece4:	ee30 0a28 	vadd.f32	s0, s0, s17
 800ece8:	ee39 1a67 	vsub.f32	s2, s18, s15
 800ecec:	ee36 6a69 	vsub.f32	s12, s12, s19
 800ecf0:	ee30 0a08 	vadd.f32	s0, s0, s16
 800ecf4:	ee75 5aca 	vsub.f32	s11, s11, s20
 800ecf8:	ed87 0a01 	vstr	s0, [r7, #4]
 800ecfc:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800ed00:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800ed04:	ee21 8a80 	vmul.f32	s16, s3, s0
 800ed08:	ee23 7a26 	vmul.f32	s14, s6, s13
 800ed0c:	ee64 7a26 	vmul.f32	s15, s8, s13
 800ed10:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800ed14:	ee24 4a00 	vmul.f32	s8, s8, s0
 800ed18:	ee23 3a00 	vmul.f32	s6, s6, s0
 800ed1c:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800ed20:	ee24 0a80 	vmul.f32	s0, s9, s0
 800ed24:	ee38 7a07 	vadd.f32	s14, s16, s14
 800ed28:	ee76 6a84 	vadd.f32	s13, s13, s8
 800ed2c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ed30:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ed34:	ee17 ca10 	vmov	ip, s14
 800ed38:	f841 cb08 	str.w	ip, [r1], #8
 800ed3c:	ed01 3a01 	vstr	s6, [r1, #-4]
 800ed40:	ed82 0a04 	vstr	s0, [r2, #16]
 800ed44:	edc2 6a03 	vstr	s13, [r2, #12]
 800ed48:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 800ed4c:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 800ed50:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800ed54:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800ed58:	ee65 4a27 	vmul.f32	s9, s10, s15
 800ed5c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800ed60:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800ed64:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ed68:	ee25 5a26 	vmul.f32	s10, s10, s13
 800ed6c:	ee66 6a26 	vmul.f32	s13, s12, s13
 800ed70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed74:	ee34 6a24 	vadd.f32	s12, s8, s9
 800ed78:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800ed7c:	ee35 5a63 	vsub.f32	s10, s10, s7
 800ed80:	ee17 ca90 	vmov	ip, s15
 800ed84:	ed04 6a04 	vstr	s12, [r4, #-16]
 800ed88:	ed04 5a03 	vstr	s10, [r4, #-12]
 800ed8c:	f846 c908 	str.w	ip, [r6], #-8
 800ed90:	edc6 6a01 	vstr	s13, [r6, #4]
 800ed94:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 800ed98:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 800ed9c:	ee62 5a27 	vmul.f32	s11, s4, s15
 800eda0:	ee22 6a87 	vmul.f32	s12, s5, s14
 800eda4:	ee22 2a07 	vmul.f32	s4, s4, s14
 800eda8:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800edac:	ee61 6a07 	vmul.f32	s13, s2, s14
 800edb0:	ee20 7a87 	vmul.f32	s14, s1, s14
 800edb4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800edb8:	ee61 7a27 	vmul.f32	s15, s2, s15
 800edbc:	ee35 6a86 	vadd.f32	s12, s11, s12
 800edc0:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800edc4:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800edc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800edcc:	ee16 ca10 	vmov	ip, s12
 800edd0:	f840 cb08 	str.w	ip, [r0], #8
 800edd4:	ed40 2a01 	vstr	s5, [r0, #-4]
 800edd8:	edc3 0a04 	vstr	s1, [r3, #16]
 800eddc:	edc3 7a03 	vstr	s15, [r3, #12]
 800ede0:	f47f aefc 	bne.w	800ebdc <arm_cfft_radix8by4_f32+0x134>
 800ede4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ede6:	9802      	ldr	r0, [sp, #8]
 800ede8:	00cb      	lsls	r3, r1, #3
 800edea:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 800edee:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800edf2:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800edf6:	4498      	add	r8, r3
 800edf8:	449c      	add	ip, r3
 800edfa:	9102      	str	r1, [sp, #8]
 800edfc:	9901      	ldr	r1, [sp, #4]
 800edfe:	4419      	add	r1, r3
 800ee00:	9101      	str	r1, [sp, #4]
 800ee02:	9907      	ldr	r1, [sp, #28]
 800ee04:	4419      	add	r1, r3
 800ee06:	9107      	str	r1, [sp, #28]
 800ee08:	9908      	ldr	r1, [sp, #32]
 800ee0a:	4419      	add	r1, r3
 800ee0c:	9b06      	ldr	r3, [sp, #24]
 800ee0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee12:	9108      	str	r1, [sp, #32]
 800ee14:	9306      	str	r3, [sp, #24]
 800ee16:	9a01      	ldr	r2, [sp, #4]
 800ee18:	2304      	movs	r3, #4
 800ee1a:	9e08      	ldr	r6, [sp, #32]
 800ee1c:	edd2 7a00 	vldr	s15, [r2]
 800ee20:	ed96 7a00 	vldr	s14, [r6]
 800ee24:	edd8 2a00 	vldr	s5, [r8]
 800ee28:	ee77 5a87 	vadd.f32	s11, s15, s14
 800ee2c:	ed9c 3a00 	vldr	s6, [ip]
 800ee30:	ed92 6a01 	vldr	s12, [r2, #4]
 800ee34:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ee38:	edd6 6a01 	vldr	s13, [r6, #4]
 800ee3c:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800ee40:	ed9c 2a01 	vldr	s4, [ip, #4]
 800ee44:	ee36 5a26 	vadd.f32	s10, s12, s13
 800ee48:	edd8 7a01 	vldr	s15, [r8, #4]
 800ee4c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ee50:	9d02      	ldr	r5, [sp, #8]
 800ee52:	ee34 6a83 	vadd.f32	s12, s9, s6
 800ee56:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800ee5a:	ee37 4a27 	vadd.f32	s8, s14, s15
 800ee5e:	9805      	ldr	r0, [sp, #20]
 800ee60:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800ee64:	4621      	mov	r1, r4
 800ee66:	ed82 6a00 	vstr	s12, [r2]
 800ee6a:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800ee6e:	edd8 3a01 	vldr	s7, [r8, #4]
 800ee72:	ee75 5a67 	vsub.f32	s11, s10, s15
 800ee76:	eddc 1a01 	vldr	s3, [ip, #4]
 800ee7a:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ee7e:	ee75 3a23 	vadd.f32	s7, s10, s7
 800ee82:	ee74 4a83 	vadd.f32	s9, s9, s6
 800ee86:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800ee8a:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800ee8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ee92:	ee36 6a43 	vsub.f32	s12, s12, s6
 800ee96:	ed82 5a01 	vstr	s10, [r2, #4]
 800ee9a:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800ee9e:	9a07      	ldr	r2, [sp, #28]
 800eea0:	ee77 7a02 	vadd.f32	s15, s14, s4
 800eea4:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800eea8:	edd2 2a00 	vldr	s5, [r2]
 800eeac:	ed92 5a01 	vldr	s10, [r2, #4]
 800eeb0:	ee64 3a22 	vmul.f32	s7, s8, s5
 800eeb4:	ee24 4a05 	vmul.f32	s8, s8, s10
 800eeb8:	ee24 5a85 	vmul.f32	s10, s9, s10
 800eebc:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800eec0:	ee33 5a85 	vadd.f32	s10, s7, s10
 800eec4:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800eec8:	ed88 5a00 	vstr	s10, [r8]
 800eecc:	edc8 4a01 	vstr	s9, [r8, #4]
 800eed0:	edd5 4a01 	vldr	s9, [r5, #4]
 800eed4:	edd5 6a00 	vldr	s13, [r5]
 800eed8:	9d06      	ldr	r5, [sp, #24]
 800eeda:	ee26 5a26 	vmul.f32	s10, s12, s13
 800eede:	ee26 6a24 	vmul.f32	s12, s12, s9
 800eee2:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800eee6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800eeea:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800eeee:	ee75 5a25 	vadd.f32	s11, s10, s11
 800eef2:	ed86 6a01 	vstr	s12, [r6, #4]
 800eef6:	edc6 5a00 	vstr	s11, [r6]
 800eefa:	edd5 5a01 	vldr	s11, [r5, #4]
 800eefe:	edd5 6a00 	vldr	s13, [r5]
 800ef02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ef04:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800ef08:	ee67 6a26 	vmul.f32	s13, s14, s13
 800ef0c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ef10:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ef14:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ef18:	ee36 7a07 	vadd.f32	s14, s12, s14
 800ef1c:	edcc 7a01 	vstr	s15, [ip, #4]
 800ef20:	ed8c 7a00 	vstr	s14, [ip]
 800ef24:	6872      	ldr	r2, [r6, #4]
 800ef26:	f000 f88f 	bl	800f048 <arm_radix8_butterfly_f32>
 800ef2a:	9803      	ldr	r0, [sp, #12]
 800ef2c:	4621      	mov	r1, r4
 800ef2e:	6872      	ldr	r2, [r6, #4]
 800ef30:	2304      	movs	r3, #4
 800ef32:	f000 f889 	bl	800f048 <arm_radix8_butterfly_f32>
 800ef36:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ef38:	4621      	mov	r1, r4
 800ef3a:	6872      	ldr	r2, [r6, #4]
 800ef3c:	2304      	movs	r3, #4
 800ef3e:	f000 f883 	bl	800f048 <arm_radix8_butterfly_f32>
 800ef42:	4621      	mov	r1, r4
 800ef44:	6872      	ldr	r2, [r6, #4]
 800ef46:	2304      	movs	r3, #4
 800ef48:	9804      	ldr	r0, [sp, #16]
 800ef4a:	b00f      	add	sp, #60	@ 0x3c
 800ef4c:	ecbd 8b06 	vpop	{d8-d10}
 800ef50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef54:	f000 b878 	b.w	800f048 <arm_radix8_butterfly_f32>

0800ef58 <arm_cfft_f32>:
 800ef58:	2a01      	cmp	r2, #1
 800ef5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef5e:	4606      	mov	r6, r0
 800ef60:	4617      	mov	r7, r2
 800ef62:	460c      	mov	r4, r1
 800ef64:	4698      	mov	r8, r3
 800ef66:	8805      	ldrh	r5, [r0, #0]
 800ef68:	d053      	beq.n	800f012 <arm_cfft_f32+0xba>
 800ef6a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800ef6e:	d04b      	beq.n	800f008 <arm_cfft_f32+0xb0>
 800ef70:	d916      	bls.n	800efa0 <arm_cfft_f32+0x48>
 800ef72:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800ef76:	d01a      	beq.n	800efae <arm_cfft_f32+0x56>
 800ef78:	d95a      	bls.n	800f030 <arm_cfft_f32+0xd8>
 800ef7a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800ef7e:	d043      	beq.n	800f008 <arm_cfft_f32+0xb0>
 800ef80:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800ef84:	d105      	bne.n	800ef92 <arm_cfft_f32+0x3a>
 800ef86:	2301      	movs	r3, #1
 800ef88:	6872      	ldr	r2, [r6, #4]
 800ef8a:	4629      	mov	r1, r5
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	f000 f85b 	bl	800f048 <arm_radix8_butterfly_f32>
 800ef92:	f1b8 0f00 	cmp.w	r8, #0
 800ef96:	d111      	bne.n	800efbc <arm_cfft_f32+0x64>
 800ef98:	2f01      	cmp	r7, #1
 800ef9a:	d016      	beq.n	800efca <arm_cfft_f32+0x72>
 800ef9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efa0:	2d20      	cmp	r5, #32
 800efa2:	d031      	beq.n	800f008 <arm_cfft_f32+0xb0>
 800efa4:	d948      	bls.n	800f038 <arm_cfft_f32+0xe0>
 800efa6:	2d40      	cmp	r5, #64	@ 0x40
 800efa8:	d0ed      	beq.n	800ef86 <arm_cfft_f32+0x2e>
 800efaa:	2d80      	cmp	r5, #128	@ 0x80
 800efac:	d1f1      	bne.n	800ef92 <arm_cfft_f32+0x3a>
 800efae:	4621      	mov	r1, r4
 800efb0:	4630      	mov	r0, r6
 800efb2:	f7ff fca9 	bl	800e908 <arm_cfft_radix8by2_f32>
 800efb6:	f1b8 0f00 	cmp.w	r8, #0
 800efba:	d0ed      	beq.n	800ef98 <arm_cfft_f32+0x40>
 800efbc:	68b2      	ldr	r2, [r6, #8]
 800efbe:	4620      	mov	r0, r4
 800efc0:	89b1      	ldrh	r1, [r6, #12]
 800efc2:	f7f1 f925 	bl	8000210 <arm_bitreversal_32>
 800efc6:	2f01      	cmp	r7, #1
 800efc8:	d1e8      	bne.n	800ef9c <arm_cfft_f32+0x44>
 800efca:	ee07 5a90 	vmov	s15, r5
 800efce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800efd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efd6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800efda:	2d00      	cmp	r5, #0
 800efdc:	d0de      	beq.n	800ef9c <arm_cfft_f32+0x44>
 800efde:	f104 0108 	add.w	r1, r4, #8
 800efe2:	2300      	movs	r3, #0
 800efe4:	ed11 7a02 	vldr	s14, [r1, #-8]
 800efe8:	3301      	adds	r3, #1
 800efea:	ed51 7a01 	vldr	s15, [r1, #-4]
 800efee:	3108      	adds	r1, #8
 800eff0:	429d      	cmp	r5, r3
 800eff2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800eff6:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800effa:	ed01 7a04 	vstr	s14, [r1, #-16]
 800effe:	ed41 7a03 	vstr	s15, [r1, #-12]
 800f002:	d1ef      	bne.n	800efe4 <arm_cfft_f32+0x8c>
 800f004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f008:	4621      	mov	r1, r4
 800f00a:	4630      	mov	r0, r6
 800f00c:	f7ff fd4c 	bl	800eaa8 <arm_cfft_radix8by4_f32>
 800f010:	e7bf      	b.n	800ef92 <arm_cfft_f32+0x3a>
 800f012:	b1a5      	cbz	r5, 800f03e <arm_cfft_f32+0xe6>
 800f014:	f101 030c 	add.w	r3, r1, #12
 800f018:	2200      	movs	r2, #0
 800f01a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800f01e:	3201      	adds	r2, #1
 800f020:	3308      	adds	r3, #8
 800f022:	eef1 7a67 	vneg.f32	s15, s15
 800f026:	4295      	cmp	r5, r2
 800f028:	ed43 7a04 	vstr	s15, [r3, #-16]
 800f02c:	d1f5      	bne.n	800f01a <arm_cfft_f32+0xc2>
 800f02e:	e79c      	b.n	800ef6a <arm_cfft_f32+0x12>
 800f030:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800f034:	d0a7      	beq.n	800ef86 <arm_cfft_f32+0x2e>
 800f036:	e7ac      	b.n	800ef92 <arm_cfft_f32+0x3a>
 800f038:	2d10      	cmp	r5, #16
 800f03a:	d0b8      	beq.n	800efae <arm_cfft_f32+0x56>
 800f03c:	e7a9      	b.n	800ef92 <arm_cfft_f32+0x3a>
 800f03e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800f042:	d896      	bhi.n	800ef72 <arm_cfft_f32+0x1a>
 800f044:	e7ac      	b.n	800efa0 <arm_cfft_f32+0x48>
 800f046:	bf00      	nop

0800f048 <arm_radix8_butterfly_f32>:
 800f048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f04c:	469e      	mov	lr, r3
 800f04e:	4603      	mov	r3, r0
 800f050:	468a      	mov	sl, r1
 800f052:	468b      	mov	fp, r1
 800f054:	3304      	adds	r3, #4
 800f056:	ed2d 8b10 	vpush	{d8-d15}
 800f05a:	469c      	mov	ip, r3
 800f05c:	b09d      	sub	sp, #116	@ 0x74
 800f05e:	ed9f 9ac3 	vldr	s18, [pc, #780]	@ 800f36c <arm_radix8_butterfly_f32+0x324>
 800f062:	9019      	str	r0, [sp, #100]	@ 0x64
 800f064:	921a      	str	r2, [sp, #104]	@ 0x68
 800f066:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f068:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800f06c:	f04f 0800 	mov.w	r8, #0
 800f070:	461a      	mov	r2, r3
 800f072:	9311      	str	r3, [sp, #68]	@ 0x44
 800f074:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f078:	4611      	mov	r1, r2
 800f07a:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800f07e:	9300      	str	r3, [sp, #0]
 800f080:	0053      	lsls	r3, r2, #1
 800f082:	18d5      	adds	r5, r2, r3
 800f084:	9301      	str	r3, [sp, #4]
 800f086:	0113      	lsls	r3, r2, #4
 800f088:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f08a:	194c      	adds	r4, r1, r5
 800f08c:	eb02 0609 	add.w	r6, r2, r9
 800f090:	9302      	str	r3, [sp, #8]
 800f092:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f096:	4613      	mov	r3, r2
 800f098:	190a      	adds	r2, r1, r4
 800f09a:	eb06 0709 	add.w	r7, r6, r9
 800f09e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f0a2:	1888      	adds	r0, r1, r2
 800f0a4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f0a8:	4401      	add	r1, r0
 800f0aa:	3204      	adds	r2, #4
 800f0ac:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800f0b0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f0b4:	9b00      	ldr	r3, [sp, #0]
 800f0b6:	3104      	adds	r1, #4
 800f0b8:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800f0bc:	44d8      	add	r8, fp
 800f0be:	ed90 7a00 	vldr	s14, [r0]
 800f0c2:	ed94 5a00 	vldr	s10, [r4]
 800f0c6:	45c2      	cmp	sl, r8
 800f0c8:	edd7 3a00 	vldr	s7, [r7]
 800f0cc:	ed96 6a00 	vldr	s12, [r6]
 800f0d0:	ee37 1a85 	vadd.f32	s2, s15, s10
 800f0d4:	ed52 6a01 	vldr	s13, [r2, #-4]
 800f0d8:	ee73 4a87 	vadd.f32	s9, s7, s14
 800f0dc:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800f0e0:	edd5 7a00 	vldr	s15, [r5]
 800f0e4:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800f0e8:	ed11 7a01 	vldr	s14, [r1, #-4]
 800f0ec:	ee36 2a26 	vadd.f32	s4, s12, s13
 800f0f0:	ee37 4a87 	vadd.f32	s8, s15, s14
 800f0f4:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f0f8:	ee71 5a24 	vadd.f32	s11, s2, s9
 800f0fc:	ee32 6a04 	vadd.f32	s12, s4, s8
 800f100:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800f104:	ee31 1a64 	vsub.f32	s2, s2, s9
 800f108:	ee75 4a86 	vadd.f32	s9, s11, s12
 800f10c:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800f110:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800f114:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800f118:	ee32 2a44 	vsub.f32	s4, s4, s8
 800f11c:	ee67 7a89 	vmul.f32	s15, s15, s18
 800f120:	ed94 0a01 	vldr	s0, [r4, #4]
 800f124:	edc4 5a00 	vstr	s11, [r4]
 800f128:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f12c:	edd6 5a01 	vldr	s11, [r6, #4]
 800f130:	edd5 2a01 	vldr	s5, [r5, #4]
 800f134:	ee75 1a27 	vadd.f32	s3, s10, s15
 800f138:	ed92 4a00 	vldr	s8, [r2]
 800f13c:	ee75 7a67 	vsub.f32	s15, s10, s15
 800f140:	edd1 4a00 	vldr	s9, [r1]
 800f144:	ee27 7a09 	vmul.f32	s14, s14, s18
 800f148:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800f14c:	ed9c 6a00 	vldr	s12, [ip]
 800f150:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800f154:	edd0 0a01 	vldr	s1, [r0, #4]
 800f158:	ed97 5a01 	vldr	s10, [r7, #4]
 800f15c:	ee35 4a84 	vadd.f32	s8, s11, s8
 800f160:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800f164:	ee73 5a26 	vadd.f32	s11, s6, s13
 800f168:	ee76 2a00 	vadd.f32	s5, s12, s0
 800f16c:	ee73 6a66 	vsub.f32	s13, s6, s13
 800f170:	ee36 6a40 	vsub.f32	s12, s12, s0
 800f174:	ee35 0a20 	vadd.f32	s0, s10, s1
 800f178:	ee65 5a89 	vmul.f32	s11, s11, s18
 800f17c:	ee35 5a60 	vsub.f32	s10, s10, s1
 800f180:	ee32 3a80 	vadd.f32	s6, s5, s0
 800f184:	ee74 0a24 	vadd.f32	s1, s8, s9
 800f188:	ee66 6a89 	vmul.f32	s13, s13, s18
 800f18c:	ee74 4a64 	vsub.f32	s9, s8, s9
 800f190:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800f194:	ee75 2a25 	vadd.f32	s5, s10, s11
 800f198:	ee33 0a20 	vadd.f32	s0, s6, s1
 800f19c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800f1a0:	ee33 3a60 	vsub.f32	s6, s6, s1
 800f1a4:	ee36 5a26 	vadd.f32	s10, s12, s13
 800f1a8:	ed8c 0a00 	vstr	s0, [ip]
 800f1ac:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f1b0:	449c      	add	ip, r3
 800f1b2:	ee33 6a87 	vadd.f32	s12, s7, s14
 800f1b6:	ed84 3a01 	vstr	s6, [r4, #4]
 800f1ba:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800f1be:	441c      	add	r4, r3
 800f1c0:	ee71 3a24 	vadd.f32	s7, s2, s9
 800f1c4:	ee71 4a64 	vsub.f32	s9, s2, s9
 800f1c8:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800f1cc:	edc7 3a00 	vstr	s7, [r7]
 800f1d0:	ee34 1a42 	vsub.f32	s2, s8, s4
 800f1d4:	edc0 4a00 	vstr	s9, [r0]
 800f1d8:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800f1dc:	ee75 4a46 	vsub.f32	s9, s10, s12
 800f1e0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f1e4:	ed87 1a01 	vstr	s2, [r7, #4]
 800f1e8:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800f1ec:	441f      	add	r7, r3
 800f1ee:	ee32 4a04 	vadd.f32	s8, s4, s8
 800f1f2:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800f1f6:	ee36 6a05 	vadd.f32	s12, s12, s10
 800f1fa:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f1fe:	ed80 4a01 	vstr	s8, [r0, #4]
 800f202:	ed86 3a00 	vstr	s6, [r6]
 800f206:	4418      	add	r0, r3
 800f208:	ed41 1a01 	vstr	s3, [r1, #-4]
 800f20c:	ed42 3a01 	vstr	s7, [r2, #-4]
 800f210:	edc5 7a00 	vstr	s15, [r5]
 800f214:	edc6 4a01 	vstr	s9, [r6, #4]
 800f218:	441e      	add	r6, r3
 800f21a:	ed81 6a00 	vstr	s12, [r1]
 800f21e:	4419      	add	r1, r3
 800f220:	edc2 5a00 	vstr	s11, [r2]
 800f224:	441a      	add	r2, r3
 800f226:	ed85 7a01 	vstr	s14, [r5, #4]
 800f22a:	441d      	add	r5, r3
 800f22c:	f63f af44 	bhi.w	800f0b8 <arm_radix8_butterfly_f32+0x70>
 800f230:	9300      	str	r3, [sp, #0]
 800f232:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f234:	2b07      	cmp	r3, #7
 800f236:	f240 81f4 	bls.w	800f622 <arm_radix8_butterfly_f32+0x5da>
 800f23a:	9901      	ldr	r1, [sp, #4]
 800f23c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800f240:	9d02      	ldr	r5, [sp, #8]
 800f242:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800f246:	3101      	adds	r1, #1
 800f248:	eb04 000e 	add.w	r0, r4, lr
 800f24c:	00e4      	lsls	r4, r4, #3
 800f24e:	3508      	adds	r5, #8
 800f250:	4419      	add	r1, r3
 800f252:	eb00 0c0e 	add.w	ip, r0, lr
 800f256:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f258:	00c0      	lsls	r0, r0, #3
 800f25a:	185e      	adds	r6, r3, r1
 800f25c:	4617      	mov	r7, r2
 800f25e:	9218      	str	r2, [sp, #96]	@ 0x60
 800f260:	f109 0908 	add.w	r9, r9, #8
 800f264:	199c      	adds	r4, r3, r6
 800f266:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f268:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f26a:	9012      	str	r0, [sp, #72]	@ 0x48
 800f26c:	195d      	adds	r5, r3, r5
 800f26e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800f270:	443a      	add	r2, r7
 800f272:	950c      	str	r5, [sp, #48]	@ 0x30
 800f274:	4698      	mov	r8, r3
 800f276:	4420      	add	r0, r4
 800f278:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800f27a:	19d7      	adds	r7, r2, r7
 800f27c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f280:	4405      	add	r5, r0
 800f282:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800f286:	9710      	str	r7, [sp, #64]	@ 0x40
 800f288:	eb0c 070e 	add.w	r7, ip, lr
 800f28c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800f290:	3404      	adds	r4, #4
 800f292:	3004      	adds	r0, #4
 800f294:	44c8      	add	r8, r9
 800f296:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 800f29a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f29c:	940a      	str	r4, [sp, #40]	@ 0x28
 800f29e:	9009      	str	r0, [sp, #36]	@ 0x24
 800f2a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f2a4:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800f2a6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f2aa:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800f2ac:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 800f2b0:	eb07 080e 	add.w	r8, r7, lr
 800f2b4:	eb04 0900 	add.w	r9, r4, r0
 800f2b8:	00f8      	lsls	r0, r7, #3
 800f2ba:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800f2be:	3504      	adds	r5, #4
 800f2c0:	4607      	mov	r7, r0
 800f2c2:	9017      	str	r0, [sp, #92]	@ 0x5c
 800f2c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800f2cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f2ce:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 800f2d2:	18e3      	adds	r3, r4, r3
 800f2d4:	9508      	str	r5, [sp, #32]
 800f2d6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800f2d8:	910e      	str	r1, [sp, #56]	@ 0x38
 800f2da:	4621      	mov	r1, r4
 800f2dc:	eb04 0805 	add.w	r8, r4, r5
 800f2e0:	9304      	str	r3, [sp, #16]
 800f2e2:	19e5      	adds	r5, r4, r7
 800f2e4:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800f2e8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800f2ea:	9316      	str	r3, [sp, #88]	@ 0x58
 800f2ec:	190b      	adds	r3, r1, r4
 800f2ee:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800f2f0:	9505      	str	r5, [sp, #20]
 800f2f2:	9303      	str	r3, [sp, #12]
 800f2f4:	f100 0308 	add.w	r3, r0, #8
 800f2f8:	9707      	str	r7, [sp, #28]
 800f2fa:	4638      	mov	r0, r7
 800f2fc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f2fe:	2301      	movs	r3, #1
 800f300:	9306      	str	r3, [sp, #24]
 800f302:	9b00      	ldr	r3, [sp, #0]
 800f304:	ed90 fa00 	vldr	s30, [r0]
 800f308:	edd0 ba01 	vldr	s23, [r0, #4]
 800f30c:	9803      	ldr	r0, [sp, #12]
 800f30e:	9903      	ldr	r1, [sp, #12]
 800f310:	ed90 ba01 	vldr	s22, [r0, #4]
 800f314:	9804      	ldr	r0, [sp, #16]
 800f316:	edd1 ea00 	vldr	s29, [r1]
 800f31a:	edd0 aa01 	vldr	s21, [r0, #4]
 800f31e:	9805      	ldr	r0, [sp, #20]
 800f320:	9905      	ldr	r1, [sp, #20]
 800f322:	edd0 7a01 	vldr	s15, [r0, #4]
 800f326:	ed91 da00 	vldr	s26, [r1]
 800f32a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f32c:	9c04      	ldr	r4, [sp, #16]
 800f32e:	edcd 7a01 	vstr	s15, [sp, #4]
 800f332:	edd8 7a01 	vldr	s15, [r8, #4]
 800f336:	9100      	str	r1, [sp, #0]
 800f338:	edd2 fa00 	vldr	s31, [r2]
 800f33c:	ed94 ea00 	vldr	s28, [r4]
 800f340:	ed92 ca01 	vldr	s24, [r2, #4]
 800f344:	f8dd e020 	ldr.w	lr, [sp, #32]
 800f348:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800f34a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f34c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f34e:	edd9 da00 	vldr	s27, [r9]
 800f352:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800f354:	edd8 ca00 	vldr	s25, [r8]
 800f358:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f35a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f35c:	f8dd c018 	ldr.w	ip, [sp, #24]
 800f360:	ed99 aa01 	vldr	s20, [r9, #4]
 800f364:	edcd 7a02 	vstr	s15, [sp, #8]
 800f368:	9800      	ldr	r0, [sp, #0]
 800f36a:	e001      	b.n	800f370 <arm_radix8_butterfly_f32+0x328>
 800f36c:	3f3504f3 	.word	0x3f3504f3
 800f370:	edd5 3a00 	vldr	s7, [r5]
 800f374:	44dc      	add	ip, fp
 800f376:	ed91 7a00 	vldr	s14, [r1]
 800f37a:	edd4 8a00 	vldr	s17, [r4]
 800f37e:	45e2      	cmp	sl, ip
 800f380:	ed57 7a01 	vldr	s15, [r7, #-4]
 800f384:	ed90 5a00 	vldr	s10, [r0]
 800f388:	ed56 5a01 	vldr	s11, [r6, #-4]
 800f38c:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800f390:	ed92 1a00 	vldr	s2, [r2]
 800f394:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800f398:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800f39c:	ee75 9a25 	vadd.f32	s19, s10, s11
 800f3a0:	ee31 3a07 	vadd.f32	s6, s2, s14
 800f3a4:	ed92 8a01 	vldr	s16, [r2, #4]
 800f3a8:	ee73 6a84 	vadd.f32	s13, s7, s8
 800f3ac:	ee75 5a65 	vsub.f32	s11, s10, s11
 800f3b0:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800f3b4:	ee73 1a06 	vadd.f32	s3, s6, s12
 800f3b8:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800f3bc:	ee75 7a84 	vadd.f32	s15, s11, s8
 800f3c0:	ee31 1a47 	vsub.f32	s2, s2, s14
 800f3c4:	ee31 7a85 	vadd.f32	s14, s3, s10
 800f3c8:	ee67 7a89 	vmul.f32	s15, s15, s18
 800f3cc:	ee33 3a46 	vsub.f32	s6, s6, s12
 800f3d0:	ed82 7a00 	vstr	s14, [r2]
 800f3d4:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800f3d8:	ed96 6a00 	vldr	s12, [r6]
 800f3dc:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800f3e0:	edd5 3a01 	vldr	s7, [r5, #4]
 800f3e4:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800f3e8:	ed90 7a01 	vldr	s14, [r0, #4]
 800f3ec:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800f3f0:	edde 4a00 	vldr	s9, [lr]
 800f3f4:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800f3f8:	ee77 2a46 	vsub.f32	s5, s14, s12
 800f3fc:	edd1 6a01 	vldr	s13, [r1, #4]
 800f400:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800f404:	edd7 0a00 	vldr	s1, [r7]
 800f408:	ee77 5a06 	vadd.f32	s11, s14, s12
 800f40c:	ed94 7a01 	vldr	s14, [r4, #4]
 800f410:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800f414:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800f418:	ee78 4a66 	vsub.f32	s9, s16, s13
 800f41c:	ee78 3a26 	vadd.f32	s7, s16, s13
 800f420:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800f424:	ee77 6a20 	vadd.f32	s13, s14, s1
 800f428:	ee24 4a09 	vmul.f32	s8, s8, s18
 800f42c:	ee37 7a60 	vsub.f32	s14, s14, s1
 800f430:	ee20 8a09 	vmul.f32	s16, s0, s18
 800f434:	ee75 0a86 	vadd.f32	s1, s11, s12
 800f438:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800f43c:	ee62 2a89 	vmul.f32	s5, s5, s18
 800f440:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800f444:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800f448:	ee77 7a62 	vsub.f32	s15, s14, s5
 800f44c:	ee74 5a88 	vadd.f32	s11, s9, s16
 800f450:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800f454:	ee77 4a22 	vadd.f32	s9, s14, s5
 800f458:	ee71 2a04 	vadd.f32	s5, s2, s8
 800f45c:	ee31 7a44 	vsub.f32	s14, s2, s8
 800f460:	ee30 1a60 	vsub.f32	s2, s0, s1
 800f464:	ee73 1a06 	vadd.f32	s3, s6, s12
 800f468:	ee33 6a46 	vsub.f32	s12, s6, s12
 800f46c:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800f470:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800f474:	ee38 4a68 	vsub.f32	s8, s16, s17
 800f478:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800f47c:	ee72 5a25 	vadd.f32	s11, s4, s11
 800f480:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800f484:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800f488:	ee77 2a27 	vadd.f32	s5, s14, s15
 800f48c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f490:	ee78 7a88 	vadd.f32	s15, s17, s16
 800f494:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800f498:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800f49c:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800f4a0:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800f4a4:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800f4a8:	ee70 0a20 	vadd.f32	s1, s0, s1
 800f4ac:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800f4b0:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800f4b4:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800f4b8:	edc2 0a01 	vstr	s1, [r2, #4]
 800f4bc:	ee38 8a88 	vadd.f32	s16, s17, s16
 800f4c0:	441a      	add	r2, r3
 800f4c2:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800f4c6:	ee31 5a45 	vsub.f32	s10, s2, s10
 800f4ca:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800f4ce:	ed81 8a00 	vstr	s16, [r1]
 800f4d2:	ee39 0a80 	vadd.f32	s0, s19, s0
 800f4d6:	ee33 3a61 	vsub.f32	s6, s6, s3
 800f4da:	ed81 5a01 	vstr	s10, [r1, #4]
 800f4de:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800f4e2:	edcd 3a00 	vstr	s7, [sp]
 800f4e6:	ed9d 5a02 	vldr	s10, [sp, #8]
 800f4ea:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800f4ee:	eddd 3a01 	vldr	s7, [sp, #4]
 800f4f2:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800f4f6:	ed84 0a00 	vstr	s0, [r4]
 800f4fa:	ee65 4a24 	vmul.f32	s9, s10, s9
 800f4fe:	ed84 3a01 	vstr	s6, [r4, #4]
 800f502:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800f506:	ee23 6a86 	vmul.f32	s12, s7, s12
 800f50a:	eddd 3a00 	vldr	s7, [sp]
 800f50e:	ee25 5a25 	vmul.f32	s10, s10, s11
 800f512:	4419      	add	r1, r3
 800f514:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800f518:	441c      	add	r4, r3
 800f51a:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800f51e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800f522:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800f526:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800f52a:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800f52e:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800f532:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800f536:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800f53a:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800f53e:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800f542:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800f546:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800f54a:	ee38 8a01 	vadd.f32	s16, s16, s2
 800f54e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800f552:	ee39 5a85 	vadd.f32	s10, s19, s10
 800f556:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800f55a:	ed07 8a01 	vstr	s16, [r7, #-4]
 800f55e:	ee30 0a21 	vadd.f32	s0, s0, s3
 800f562:	ed87 6a00 	vstr	s12, [r7]
 800f566:	ee74 2a62 	vsub.f32	s5, s8, s5
 800f56a:	edc0 0a00 	vstr	s1, [r0]
 800f56e:	ee33 3a28 	vadd.f32	s6, s6, s17
 800f572:	edc0 3a01 	vstr	s7, [r0, #4]
 800f576:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800f57a:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800f57e:	edce 4a00 	vstr	s9, [lr]
 800f582:	4418      	add	r0, r3
 800f584:	ed06 0a01 	vstr	s0, [r6, #-4]
 800f588:	441f      	add	r7, r3
 800f58a:	edc6 2a00 	vstr	s5, [r6]
 800f58e:	449e      	add	lr, r3
 800f590:	ed85 3a00 	vstr	s6, [r5]
 800f594:	441e      	add	r6, r3
 800f596:	ed85 7a01 	vstr	s14, [r5, #4]
 800f59a:	441d      	add	r5, r3
 800f59c:	f63f aee8 	bhi.w	800f370 <arm_radix8_butterfly_f32+0x328>
 800f5a0:	9a06      	ldr	r2, [sp, #24]
 800f5a2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800f5a4:	3201      	adds	r2, #1
 800f5a6:	4611      	mov	r1, r2
 800f5a8:	9206      	str	r2, [sp, #24]
 800f5aa:	9a07      	ldr	r2, [sp, #28]
 800f5ac:	4402      	add	r2, r0
 800f5ae:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800f5b0:	9207      	str	r2, [sp, #28]
 800f5b2:	9a03      	ldr	r2, [sp, #12]
 800f5b4:	4402      	add	r2, r0
 800f5b6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800f5b8:	9203      	str	r2, [sp, #12]
 800f5ba:	9a04      	ldr	r2, [sp, #16]
 800f5bc:	4402      	add	r2, r0
 800f5be:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800f5c0:	9204      	str	r2, [sp, #16]
 800f5c2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f5c4:	4491      	add	r9, r2
 800f5c6:	9a05      	ldr	r2, [sp, #20]
 800f5c8:	4402      	add	r2, r0
 800f5ca:	9205      	str	r2, [sp, #20]
 800f5cc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f5ce:	4490      	add	r8, r2
 800f5d0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f5d2:	3208      	adds	r2, #8
 800f5d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f5d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5d8:	3208      	adds	r2, #8
 800f5da:	920e      	str	r2, [sp, #56]	@ 0x38
 800f5dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f5de:	3208      	adds	r2, #8
 800f5e0:	920d      	str	r2, [sp, #52]	@ 0x34
 800f5e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f5e4:	3208      	adds	r2, #8
 800f5e6:	920c      	str	r2, [sp, #48]	@ 0x30
 800f5e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f5ea:	3208      	adds	r2, #8
 800f5ec:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f5ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f5f0:	3208      	adds	r2, #8
 800f5f2:	920a      	str	r2, [sp, #40]	@ 0x28
 800f5f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5f6:	3208      	adds	r2, #8
 800f5f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800f5fa:	9a08      	ldr	r2, [sp, #32]
 800f5fc:	3208      	adds	r2, #8
 800f5fe:	9208      	str	r2, [sp, #32]
 800f600:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800f602:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800f604:	4622      	mov	r2, r4
 800f606:	4288      	cmp	r0, r1
 800f608:	d005      	beq.n	800f616 <arm_radix8_butterfly_f32+0x5ce>
 800f60a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800f60c:	4621      	mov	r1, r4
 800f60e:	4401      	add	r1, r0
 800f610:	9807      	ldr	r0, [sp, #28]
 800f612:	9110      	str	r1, [sp, #64]	@ 0x40
 800f614:	e676      	b.n	800f304 <arm_radix8_butterfly_f32+0x2bc>
 800f616:	4683      	mov	fp, r0
 800f618:	f8bd e060 	ldrh.w	lr, [sp, #96]	@ 0x60
 800f61c:	f8dd c06c 	ldr.w	ip, [sp, #108]	@ 0x6c
 800f620:	e522      	b.n	800f068 <arm_radix8_butterfly_f32+0x20>
 800f622:	b01d      	add	sp, #116	@ 0x74
 800f624:	ecbd 8b10 	vpop	{d8-d15}
 800f628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f62c <ai_buffer_get_size>:
 800f62c:	b368      	cbz	r0, 800f68a <ai_buffer_get_size+0x5e>
 800f62e:	4b17      	ldr	r3, [pc, #92]	@ (800f68c <ai_buffer_get_size+0x60>)
 800f630:	4a17      	ldr	r2, [pc, #92]	@ (800f690 <ai_buffer_get_size+0x64>)
 800f632:	b410      	push	{r4}
 800f634:	6804      	ldr	r4, [r0, #0]
 800f636:	4023      	ands	r3, r4
 800f638:	4293      	cmp	r3, r2
 800f63a:	d123      	bne.n	800f684 <ai_buffer_get_size+0x58>
 800f63c:	b311      	cbz	r1, 800f684 <ai_buffer_get_size+0x58>
 800f63e:	6984      	ldr	r4, [r0, #24]
 800f640:	6862      	ldr	r2, [r4, #4]
 800f642:	321f      	adds	r2, #31
 800f644:	f022 021f 	bic.w	r2, r2, #31
 800f648:	7d03      	ldrb	r3, [r0, #20]
 800f64a:	6941      	ldr	r1, [r0, #20]
 800f64c:	f1a3 0301 	sub.w	r3, r3, #1
 800f650:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800f654:	fab3 f383 	clz	r3, r3
 800f658:	095b      	lsrs	r3, r3, #5
 800f65a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800f65e:	da0c      	bge.n	800f67a <ai_buffer_get_size+0x4e>
 800f660:	2b01      	cmp	r3, #1
 800f662:	d103      	bne.n	800f66c <ai_buffer_get_size+0x40>
 800f664:	2802      	cmp	r0, #2
 800f666:	f04f 0302 	mov.w	r3, #2
 800f66a:	d006      	beq.n	800f67a <ai_buffer_get_size+0x4e>
 800f66c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800f670:	3301      	adds	r3, #1
 800f672:	4298      	cmp	r0, r3
 800f674:	fb01 f202 	mul.w	r2, r1, r2
 800f678:	d1f2      	bne.n	800f660 <ai_buffer_get_size+0x34>
 800f67a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800f67e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f682:	4770      	bx	lr
 800f684:	6984      	ldr	r4, [r0, #24]
 800f686:	6862      	ldr	r2, [r4, #4]
 800f688:	e7de      	b.n	800f648 <ai_buffer_get_size+0x1c>
 800f68a:	4770      	bx	lr
 800f68c:	017fffff 	.word	0x017fffff
 800f690:	000400c0 	.word	0x000400c0

0800f694 <ai_buffer_array_sane>:
 800f694:	b138      	cbz	r0, 800f6a6 <ai_buffer_array_sane+0x12>
 800f696:	6843      	ldr	r3, [r0, #4]
 800f698:	b123      	cbz	r3, 800f6a4 <ai_buffer_array_sane+0x10>
 800f69a:	8840      	ldrh	r0, [r0, #2]
 800f69c:	3800      	subs	r0, #0
 800f69e:	bf18      	it	ne
 800f6a0:	2001      	movne	r0, #1
 800f6a2:	4770      	bx	lr
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	4770      	bx	lr

0800f6a8 <ai_platform_get_weights_map>:
 800f6a8:	2900      	cmp	r1, #0
 800f6aa:	bf18      	it	ne
 800f6ac:	2800      	cmpne	r0, #0
 800f6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6b0:	bf0c      	ite	eq
 800f6b2:	2401      	moveq	r4, #1
 800f6b4:	2400      	movne	r4, #0
 800f6b6:	2a00      	cmp	r2, #0
 800f6b8:	bf08      	it	eq
 800f6ba:	f044 0401 	orreq.w	r4, r4, #1
 800f6be:	b114      	cbz	r4, 800f6c6 <ai_platform_get_weights_map+0x1e>
 800f6c0:	2400      	movs	r4, #0
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6c6:	4616      	mov	r6, r2
 800f6c8:	4b22      	ldr	r3, [pc, #136]	@ (800f754 <ai_platform_get_weights_map+0xac>)
 800f6ca:	6812      	ldr	r2, [r2, #0]
 800f6cc:	4605      	mov	r5, r0
 800f6ce:	460f      	mov	r7, r1
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d022      	beq.n	800f71a <ai_platform_get_weights_map+0x72>
 800f6d4:	6870      	ldr	r0, [r6, #4]
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	d0f2      	beq.n	800f6c0 <ai_platform_get_weights_map+0x18>
 800f6da:	6806      	ldr	r6, [r0, #0]
 800f6dc:	429e      	cmp	r6, r3
 800f6de:	d006      	beq.n	800f6ee <ai_platform_get_weights_map+0x46>
 800f6e0:	f1a1 0401 	sub.w	r4, r1, #1
 800f6e4:	6028      	str	r0, [r5, #0]
 800f6e6:	fab4 f484 	clz	r4, r4
 800f6ea:	0964      	lsrs	r4, r4, #5
 800f6ec:	e7e9      	b.n	800f6c2 <ai_platform_get_weights_map+0x1a>
 800f6ee:	3d04      	subs	r5, #4
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	4621      	mov	r1, r4
 800f6f4:	e000      	b.n	800f6f8 <ai_platform_get_weights_map+0x50>
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f6fc:	42b3      	cmp	r3, r6
 800f6fe:	d025      	beq.n	800f74c <ai_platform_get_weights_map+0xa4>
 800f700:	f845 3f04 	str.w	r3, [r5, #4]!
 800f704:	1c4b      	adds	r3, r1, #1
 800f706:	429f      	cmp	r7, r3
 800f708:	d8f5      	bhi.n	800f6f6 <ai_platform_get_weights_map+0x4e>
 800f70a:	d1da      	bne.n	800f6c2 <ai_platform_get_weights_map+0x1a>
 800f70c:	3102      	adds	r1, #2
 800f70e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f712:	42b3      	cmp	r3, r6
 800f714:	d1d5      	bne.n	800f6c2 <ai_platform_get_weights_map+0x1a>
 800f716:	2401      	movs	r4, #1
 800f718:	e7d3      	b.n	800f6c2 <ai_platform_get_weights_map+0x1a>
 800f71a:	1d30      	adds	r0, r6, #4
 800f71c:	f7ff ffba 	bl	800f694 <ai_buffer_array_sane>
 800f720:	2800      	cmp	r0, #0
 800f722:	d0cd      	beq.n	800f6c0 <ai_platform_get_weights_map+0x18>
 800f724:	88f3      	ldrh	r3, [r6, #6]
 800f726:	429f      	cmp	r7, r3
 800f728:	d1ca      	bne.n	800f6c0 <ai_platform_get_weights_map+0x18>
 800f72a:	3d04      	subs	r5, #4
 800f72c:	4622      	mov	r2, r4
 800f72e:	68b3      	ldr	r3, [r6, #8]
 800f730:	4423      	add	r3, r4
 800f732:	341c      	adds	r4, #28
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	b123      	cbz	r3, 800f742 <ai_platform_get_weights_map+0x9a>
 800f738:	3201      	adds	r2, #1
 800f73a:	f845 3f04 	str.w	r3, [r5, #4]!
 800f73e:	4297      	cmp	r7, r2
 800f740:	d8f5      	bhi.n	800f72e <ai_platform_get_weights_map+0x86>
 800f742:	1abc      	subs	r4, r7, r2
 800f744:	fab4 f484 	clz	r4, r4
 800f748:	0964      	lsrs	r4, r4, #5
 800f74a:	e7ba      	b.n	800f6c2 <ai_platform_get_weights_map+0x1a>
 800f74c:	428f      	cmp	r7, r1
 800f74e:	d1b8      	bne.n	800f6c2 <ai_platform_get_weights_map+0x1a>
 800f750:	e7e1      	b.n	800f716 <ai_platform_get_weights_map+0x6e>
 800f752:	bf00      	nop
 800f754:	a1facade 	.word	0xa1facade

0800f758 <ai_platform_get_activations_map>:
 800f758:	2900      	cmp	r1, #0
 800f75a:	bf18      	it	ne
 800f75c:	2800      	cmpne	r0, #0
 800f75e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f760:	bf0c      	ite	eq
 800f762:	2401      	moveq	r4, #1
 800f764:	2400      	movne	r4, #0
 800f766:	2a00      	cmp	r2, #0
 800f768:	bf08      	it	eq
 800f76a:	f044 0401 	orreq.w	r4, r4, #1
 800f76e:	b114      	cbz	r4, 800f776 <ai_platform_get_activations_map+0x1e>
 800f770:	2400      	movs	r4, #0
 800f772:	4620      	mov	r0, r4
 800f774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f776:	4616      	mov	r6, r2
 800f778:	4b22      	ldr	r3, [pc, #136]	@ (800f804 <ai_platform_get_activations_map+0xac>)
 800f77a:	6812      	ldr	r2, [r2, #0]
 800f77c:	4605      	mov	r5, r0
 800f77e:	460f      	mov	r7, r1
 800f780:	429a      	cmp	r2, r3
 800f782:	d022      	beq.n	800f7ca <ai_platform_get_activations_map+0x72>
 800f784:	6a30      	ldr	r0, [r6, #32]
 800f786:	2800      	cmp	r0, #0
 800f788:	d0f2      	beq.n	800f770 <ai_platform_get_activations_map+0x18>
 800f78a:	6806      	ldr	r6, [r0, #0]
 800f78c:	429e      	cmp	r6, r3
 800f78e:	d006      	beq.n	800f79e <ai_platform_get_activations_map+0x46>
 800f790:	f1a1 0401 	sub.w	r4, r1, #1
 800f794:	6028      	str	r0, [r5, #0]
 800f796:	fab4 f484 	clz	r4, r4
 800f79a:	0964      	lsrs	r4, r4, #5
 800f79c:	e7e9      	b.n	800f772 <ai_platform_get_activations_map+0x1a>
 800f79e:	3d04      	subs	r5, #4
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	4621      	mov	r1, r4
 800f7a4:	e000      	b.n	800f7a8 <ai_platform_get_activations_map+0x50>
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f7ac:	42b3      	cmp	r3, r6
 800f7ae:	d026      	beq.n	800f7fe <ai_platform_get_activations_map+0xa6>
 800f7b0:	f845 3f04 	str.w	r3, [r5, #4]!
 800f7b4:	1c4b      	adds	r3, r1, #1
 800f7b6:	429f      	cmp	r7, r3
 800f7b8:	d8f5      	bhi.n	800f7a6 <ai_platform_get_activations_map+0x4e>
 800f7ba:	d1da      	bne.n	800f772 <ai_platform_get_activations_map+0x1a>
 800f7bc:	3102      	adds	r1, #2
 800f7be:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f7c2:	42b3      	cmp	r3, r6
 800f7c4:	d1d5      	bne.n	800f772 <ai_platform_get_activations_map+0x1a>
 800f7c6:	2401      	movs	r4, #1
 800f7c8:	e7d3      	b.n	800f772 <ai_platform_get_activations_map+0x1a>
 800f7ca:	f106 000c 	add.w	r0, r6, #12
 800f7ce:	f7ff ff61 	bl	800f694 <ai_buffer_array_sane>
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	d0cc      	beq.n	800f770 <ai_platform_get_activations_map+0x18>
 800f7d6:	89f3      	ldrh	r3, [r6, #14]
 800f7d8:	429f      	cmp	r7, r3
 800f7da:	d1c9      	bne.n	800f770 <ai_platform_get_activations_map+0x18>
 800f7dc:	3d04      	subs	r5, #4
 800f7de:	4622      	mov	r2, r4
 800f7e0:	6933      	ldr	r3, [r6, #16]
 800f7e2:	4423      	add	r3, r4
 800f7e4:	341c      	adds	r4, #28
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	b123      	cbz	r3, 800f7f4 <ai_platform_get_activations_map+0x9c>
 800f7ea:	3201      	adds	r2, #1
 800f7ec:	f845 3f04 	str.w	r3, [r5, #4]!
 800f7f0:	4297      	cmp	r7, r2
 800f7f2:	d8f5      	bhi.n	800f7e0 <ai_platform_get_activations_map+0x88>
 800f7f4:	1abc      	subs	r4, r7, r2
 800f7f6:	fab4 f484 	clz	r4, r4
 800f7fa:	0964      	lsrs	r4, r4, #5
 800f7fc:	e7b9      	b.n	800f772 <ai_platform_get_activations_map+0x1a>
 800f7fe:	428f      	cmp	r7, r1
 800f800:	d1b7      	bne.n	800f772 <ai_platform_get_activations_map+0x1a>
 800f802:	e7e0      	b.n	800f7c6 <ai_platform_get_activations_map+0x6e>
 800f804:	a1facade 	.word	0xa1facade

0800f808 <ai_platform_network_get_error>:
 800f808:	4b04      	ldr	r3, [pc, #16]	@ (800f81c <ai_platform_network_get_error+0x14>)
 800f80a:	6802      	ldr	r2, [r0, #0]
 800f80c:	4393      	bics	r3, r2
 800f80e:	d102      	bne.n	800f816 <ai_platform_network_get_error+0xe>
 800f810:	300c      	adds	r0, #12
 800f812:	f000 bc73 	b.w	80100fc <core_get_error>
 800f816:	f241 0010 	movw	r0, #4112	@ 0x1010
 800f81a:	4770      	bx	lr
 800f81c:	a1c00100 	.word	0xa1c00100

0800f820 <ai_platform_network_set_error>:
 800f820:	b110      	cbz	r0, 800f828 <ai_platform_network_set_error+0x8>
 800f822:	300c      	adds	r0, #12
 800f824:	f000 bc70 	b.w	8010108 <core_set_error>
 800f828:	4770      	bx	lr
 800f82a:	bf00      	nop

0800f82c <ai_platform_inputs_get>:
 800f82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f830:	4b39      	ldr	r3, [pc, #228]	@ (800f918 <ai_platform_inputs_get+0xec>)
 800f832:	b085      	sub	sp, #20
 800f834:	6802      	ldr	r2, [r0, #0]
 800f836:	4393      	bics	r3, r2
 800f838:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800f83c:	d162      	bne.n	800f904 <ai_platform_inputs_get+0xd8>
 800f83e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800f840:	2b00      	cmp	r3, #0
 800f842:	d051      	beq.n	800f8e8 <ai_platform_inputs_get+0xbc>
 800f844:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800f848:	f1ba 0f00 	cmp.w	sl, #0
 800f84c:	d04c      	beq.n	800f8e8 <ai_platform_inputs_get+0xbc>
 800f84e:	f04f 0900 	mov.w	r9, #0
 800f852:	464d      	mov	r5, r9
 800f854:	e016      	b.n	800f884 <ai_platform_inputs_get+0x58>
 800f856:	9901      	ldr	r1, [sp, #4]
 800f858:	2301      	movs	r3, #1
 800f85a:	f848 3001 	str.w	r3, [r8, r1]
 800f85e:	69b1      	ldr	r1, [r6, #24]
 800f860:	f04f 0301 	mov.w	r3, #1
 800f864:	684e      	ldr	r6, [r1, #4]
 800f866:	3501      	adds	r5, #1
 800f868:	f109 091c 	add.w	r9, r9, #28
 800f86c:	7523      	strb	r3, [r4, #20]
 800f86e:	2300      	movs	r3, #0
 800f870:	6961      	ldr	r1, [r4, #20]
 800f872:	6020      	str	r0, [r4, #0]
 800f874:	f36b 211f 	bfi	r1, fp, #8, #24
 800f878:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800f87c:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800f880:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800f884:	f8ba 3000 	ldrh.w	r3, [sl]
 800f888:	b2ac      	uxth	r4, r5
 800f88a:	42ab      	cmp	r3, r5
 800f88c:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800f890:	9301      	str	r3, [sp, #4]
 800f892:	d93b      	bls.n	800f90c <ai_platform_inputs_get+0xe0>
 800f894:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d037      	beq.n	800f90c <ai_platform_inputs_get+0xe0>
 800f89c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800f8a0:	2e00      	cmp	r6, #0
 800f8a2:	d033      	beq.n	800f90c <ai_platform_inputs_get+0xe0>
 800f8a4:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f8a8:	69b2      	ldr	r2, [r6, #24]
 800f8aa:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800f8ae:	6810      	ldr	r0, [r2, #0]
 800f8b0:	68b3      	ldr	r3, [r6, #8]
 800f8b2:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800f8b6:	68f2      	ldr	r2, [r6, #12]
 800f8b8:	444c      	add	r4, r9
 800f8ba:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800f8be:	9200      	str	r2, [sp, #0]
 800f8c0:	f002 fffa 	bl	80128b8 <ai_array_to_buffer_fmt>
 800f8c4:	69b1      	ldr	r1, [r6, #24]
 800f8c6:	9a00      	ldr	r2, [sp, #0]
 800f8c8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800f8cc:	2f00      	cmp	r7, #0
 800f8ce:	d0c7      	beq.n	800f860 <ai_platform_inputs_get+0x34>
 800f8d0:	2100      	movs	r1, #0
 800f8d2:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800f8d6:	6831      	ldr	r1, [r6, #0]
 800f8d8:	6079      	str	r1, [r7, #4]
 800f8da:	b111      	cbz	r1, 800f8e2 <ai_platform_inputs_get+0xb6>
 800f8dc:	8849      	ldrh	r1, [r1, #2]
 800f8de:	2900      	cmp	r1, #0
 800f8e0:	d1b9      	bne.n	800f856 <ai_platform_inputs_get+0x2a>
 800f8e2:	69b1      	ldr	r1, [r6, #24]
 800f8e4:	2700      	movs	r7, #0
 800f8e6:	e7bb      	b.n	800f860 <ai_platform_inputs_get+0x34>
 800f8e8:	9803      	ldr	r0, [sp, #12]
 800f8ea:	2400      	movs	r4, #0
 800f8ec:	2218      	movs	r2, #24
 800f8ee:	2111      	movs	r1, #17
 800f8f0:	300c      	adds	r0, #12
 800f8f2:	f000 fc09 	bl	8010108 <core_set_error>
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	9b02      	ldr	r3, [sp, #8]
 800f8fa:	b103      	cbz	r3, 800f8fe <ai_platform_inputs_get+0xd2>
 800f8fc:	801c      	strh	r4, [r3, #0]
 800f8fe:	b005      	add	sp, #20
 800f900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f904:	2000      	movs	r0, #0
 800f906:	b005      	add	sp, #20
 800f908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f90c:	2c00      	cmp	r4, #0
 800f90e:	d0eb      	beq.n	800f8e8 <ai_platform_inputs_get+0xbc>
 800f910:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f914:	6858      	ldr	r0, [r3, #4]
 800f916:	e7ef      	b.n	800f8f8 <ai_platform_inputs_get+0xcc>
 800f918:	a1c00100 	.word	0xa1c00100

0800f91c <ai_platform_outputs_get>:
 800f91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f920:	4b38      	ldr	r3, [pc, #224]	@ (800fa04 <ai_platform_outputs_get+0xe8>)
 800f922:	b085      	sub	sp, #20
 800f924:	6802      	ldr	r2, [r0, #0]
 800f926:	4393      	bics	r3, r2
 800f928:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800f92c:	d15f      	bne.n	800f9ee <ai_platform_outputs_get+0xd2>
 800f92e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800f930:	2b01      	cmp	r3, #1
 800f932:	d94e      	bls.n	800f9d2 <ai_platform_outputs_get+0xb6>
 800f934:	f04f 0900 	mov.w	r9, #0
 800f938:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800f93c:	464d      	mov	r5, r9
 800f93e:	e016      	b.n	800f96e <ai_platform_outputs_get+0x52>
 800f940:	9901      	ldr	r1, [sp, #4]
 800f942:	2301      	movs	r3, #1
 800f944:	f848 3001 	str.w	r3, [r8, r1]
 800f948:	69b1      	ldr	r1, [r6, #24]
 800f94a:	f04f 0301 	mov.w	r3, #1
 800f94e:	684e      	ldr	r6, [r1, #4]
 800f950:	3501      	adds	r5, #1
 800f952:	f109 091c 	add.w	r9, r9, #28
 800f956:	7523      	strb	r3, [r4, #20]
 800f958:	2300      	movs	r3, #0
 800f95a:	6961      	ldr	r1, [r4, #20]
 800f95c:	6020      	str	r0, [r4, #0]
 800f95e:	f36b 211f 	bfi	r1, fp, #8, #24
 800f962:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800f966:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800f96a:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800f96e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800f972:	b2ac      	uxth	r4, r5
 800f974:	42ab      	cmp	r3, r5
 800f976:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800f97a:	9301      	str	r3, [sp, #4]
 800f97c:	d93b      	bls.n	800f9f6 <ai_platform_outputs_get+0xda>
 800f97e:	f8da 3010 	ldr.w	r3, [sl, #16]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d037      	beq.n	800f9f6 <ai_platform_outputs_get+0xda>
 800f986:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800f98a:	2e00      	cmp	r6, #0
 800f98c:	d033      	beq.n	800f9f6 <ai_platform_outputs_get+0xda>
 800f98e:	f8da 3014 	ldr.w	r3, [sl, #20]
 800f992:	69b2      	ldr	r2, [r6, #24]
 800f994:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800f998:	6810      	ldr	r0, [r2, #0]
 800f99a:	68b3      	ldr	r3, [r6, #8]
 800f99c:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800f9a0:	68f2      	ldr	r2, [r6, #12]
 800f9a2:	444c      	add	r4, r9
 800f9a4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800f9a8:	9200      	str	r2, [sp, #0]
 800f9aa:	f002 ff85 	bl	80128b8 <ai_array_to_buffer_fmt>
 800f9ae:	69b1      	ldr	r1, [r6, #24]
 800f9b0:	9a00      	ldr	r2, [sp, #0]
 800f9b2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800f9b6:	2f00      	cmp	r7, #0
 800f9b8:	d0c7      	beq.n	800f94a <ai_platform_outputs_get+0x2e>
 800f9ba:	2100      	movs	r1, #0
 800f9bc:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800f9c0:	6831      	ldr	r1, [r6, #0]
 800f9c2:	6079      	str	r1, [r7, #4]
 800f9c4:	b111      	cbz	r1, 800f9cc <ai_platform_outputs_get+0xb0>
 800f9c6:	8849      	ldrh	r1, [r1, #2]
 800f9c8:	2900      	cmp	r1, #0
 800f9ca:	d1b9      	bne.n	800f940 <ai_platform_outputs_get+0x24>
 800f9cc:	69b1      	ldr	r1, [r6, #24]
 800f9ce:	2700      	movs	r7, #0
 800f9d0:	e7bb      	b.n	800f94a <ai_platform_outputs_get+0x2e>
 800f9d2:	9803      	ldr	r0, [sp, #12]
 800f9d4:	2400      	movs	r4, #0
 800f9d6:	2218      	movs	r2, #24
 800f9d8:	2111      	movs	r1, #17
 800f9da:	300c      	adds	r0, #12
 800f9dc:	f000 fb94 	bl	8010108 <core_set_error>
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	9b02      	ldr	r3, [sp, #8]
 800f9e4:	b103      	cbz	r3, 800f9e8 <ai_platform_outputs_get+0xcc>
 800f9e6:	801c      	strh	r4, [r3, #0]
 800f9e8:	b005      	add	sp, #20
 800f9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	b005      	add	sp, #20
 800f9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9f6:	2c00      	cmp	r4, #0
 800f9f8:	d0eb      	beq.n	800f9d2 <ai_platform_outputs_get+0xb6>
 800f9fa:	f8da 3014 	ldr.w	r3, [sl, #20]
 800f9fe:	6858      	ldr	r0, [r3, #4]
 800fa00:	e7ef      	b.n	800f9e2 <ai_platform_outputs_get+0xc6>
 800fa02:	bf00      	nop
 800fa04:	a1c00100 	.word	0xa1c00100

0800fa08 <ai_platform_network_create>:
 800fa08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa0c:	b083      	sub	sp, #12
 800fa0e:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800fa12:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800fa16:	b320      	cbz	r0, 800fa62 <ai_platform_network_create+0x5a>
 800fa18:	6002      	str	r2, [r0, #0]
 800fa1a:	4616      	mov	r6, r2
 800fa1c:	461f      	mov	r7, r3
 800fa1e:	4604      	mov	r4, r0
 800fa20:	f000 fb6a 	bl	80100f8 <core_init>
 800fa24:	b970      	cbnz	r0, 800fa44 <ai_platform_network_create+0x3c>
 800fa26:	2530      	movs	r5, #48	@ 0x30
 800fa28:	2300      	movs	r3, #0
 800fa2a:	6023      	str	r3, [r4, #0]
 800fa2c:	2410      	movs	r4, #16
 800fa2e:	464a      	mov	r2, r9
 800fa30:	4641      	mov	r1, r8
 800fa32:	4638      	mov	r0, r7
 800fa34:	f002 ffea 	bl	8012a0c <ai_version_get>
 800fa38:	60b0      	str	r0, [r6, #8]
 800fa3a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800fa3e:	b003      	add	sp, #12
 800fa40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa44:	2200      	movs	r2, #0
 800fa46:	4641      	mov	r1, r8
 800fa48:	4638      	mov	r0, r7
 800fa4a:	f002 ffdf 	bl	8012a0c <ai_version_get>
 800fa4e:	4605      	mov	r5, r0
 800fa50:	2200      	movs	r2, #0
 800fa52:	2105      	movs	r1, #5
 800fa54:	2001      	movs	r0, #1
 800fa56:	f002 ffd9 	bl	8012a0c <ai_version_get>
 800fa5a:	4285      	cmp	r5, r0
 800fa5c:	d008      	beq.n	800fa70 <ai_platform_network_create+0x68>
 800fa5e:	2501      	movs	r5, #1
 800fa60:	e7e2      	b.n	800fa28 <ai_platform_network_create+0x20>
 800fa62:	2510      	movs	r5, #16
 800fa64:	462c      	mov	r4, r5
 800fa66:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800fa6a:	b003      	add	sp, #12
 800fa6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa70:	4b05      	ldr	r3, [pc, #20]	@ (800fa88 <ai_platform_network_create+0x80>)
 800fa72:	a801      	add	r0, sp, #4
 800fa74:	9301      	str	r3, [sp, #4]
 800fa76:	f000 fb53 	bl	8010120 <ai_check_custom_types>
 800fa7a:	b110      	cbz	r0, 800fa82 <ai_platform_network_create+0x7a>
 800fa7c:	2400      	movs	r4, #0
 800fa7e:	4625      	mov	r5, r4
 800fa80:	e7d5      	b.n	800fa2e <ai_platform_network_create+0x26>
 800fa82:	2502      	movs	r5, #2
 800fa84:	e7d0      	b.n	800fa28 <ai_platform_network_create+0x20>
 800fa86:	bf00      	nop
 800fa88:	84048403 	.word	0x84048403

0800fa8c <ai_platform_network_init>:
 800fa8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa90:	4a5c      	ldr	r2, [pc, #368]	@ (800fc04 <ai_platform_network_init+0x178>)
 800fa92:	460c      	mov	r4, r1
 800fa94:	6801      	ldr	r1, [r0, #0]
 800fa96:	438a      	bics	r2, r1
 800fa98:	d133      	bne.n	800fb02 <ai_platform_network_init+0x76>
 800fa9a:	4605      	mov	r5, r0
 800fa9c:	2c00      	cmp	r4, #0
 800fa9e:	f000 8093 	beq.w	800fbc8 <ai_platform_network_init+0x13c>
 800faa2:	f8d4 b000 	ldr.w	fp, [r4]
 800faa6:	4a58      	ldr	r2, [pc, #352]	@ (800fc08 <ai_platform_network_init+0x17c>)
 800faa8:	4593      	cmp	fp, r2
 800faaa:	d10f      	bne.n	800facc <ai_platform_network_init+0x40>
 800faac:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 800fab0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fab4:	4b53      	ldr	r3, [pc, #332]	@ (800fc04 <ai_platform_network_init+0x178>)
 800fab6:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 800faba:	0c32      	lsrs	r2, r6, #16
 800fabc:	4299      	cmp	r1, r3
 800fabe:	d02c      	beq.n	800fb1a <ai_platform_network_init+0x8e>
 800fac0:	2303      	movs	r3, #3
 800fac2:	462c      	mov	r4, r5
 800fac4:	612b      	str	r3, [r5, #16]
 800fac6:	4620      	mov	r0, r4
 800fac8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800facc:	4627      	mov	r7, r4
 800face:	2101      	movs	r1, #1
 800fad0:	6864      	ldr	r4, [r4, #4]
 800fad2:	4638      	mov	r0, r7
 800fad4:	f107 081c 	add.w	r8, r7, #28
 800fad8:	f7ff fda8 	bl	800f62c <ai_buffer_get_size>
 800fadc:	4606      	mov	r6, r0
 800fade:	2101      	movs	r1, #1
 800fae0:	4640      	mov	r0, r8
 800fae2:	f8d7 9020 	ldr.w	r9, [r7, #32]
 800fae6:	f7ff fda1 	bl	800f62c <ai_buffer_get_size>
 800faea:	b976      	cbnz	r6, 800fb0a <ai_platform_network_init+0x7e>
 800faec:	2800      	cmp	r0, #0
 800faee:	d150      	bne.n	800fb92 <ai_platform_network_init+0x106>
 800faf0:	4680      	mov	r8, r0
 800faf2:	4686      	mov	lr, r0
 800faf4:	4606      	mov	r6, r0
 800faf6:	4607      	mov	r7, r0
 800faf8:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800fafc:	6829      	ldr	r1, [r5, #0]
 800fafe:	0436      	lsls	r6, r6, #16
 800fb00:	e7d8      	b.n	800fab4 <ai_platform_network_init+0x28>
 800fb02:	2400      	movs	r4, #0
 800fb04:	4620      	mov	r0, r4
 800fb06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	d13b      	bne.n	800fb86 <ai_platform_network_init+0xfa>
 800fb0e:	4680      	mov	r8, r0
 800fb10:	4686      	mov	lr, r0
 800fb12:	2c00      	cmp	r4, #0
 800fb14:	d05e      	beq.n	800fbd4 <ai_platform_network_init+0x148>
 800fb16:	2601      	movs	r6, #1
 800fb18:	e7ee      	b.n	800faf8 <ai_platform_network_init+0x6c>
 800fb1a:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	4b3a      	ldr	r3, [pc, #232]	@ (800fc08 <ai_platform_network_init+0x17c>)
 800fb20:	d33e      	bcc.n	800fba0 <ai_platform_network_init+0x114>
 800fb22:	459b      	cmp	fp, r3
 800fb24:	d03e      	beq.n	800fba4 <ai_platform_network_init+0x118>
 800fb26:	b1a2      	cbz	r2, 800fb52 <ai_platform_network_init+0xc6>
 800fb28:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800fb2c:	f04f 0c00 	mov.w	ip, #0
 800fb30:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800fb34:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 800fb36:	eb07 0b0c 	add.w	fp, r7, ip
 800fb3a:	4464      	add	r4, ip
 800fb3c:	f10c 0c1c 	add.w	ip, ip, #28
 800fb40:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800fb44:	45cc      	cmp	ip, r9
 800fb46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb48:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 800fb4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fb50:	d1f0      	bne.n	800fb34 <ai_platform_network_init+0xa8>
 800fb52:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800fb54:	622e      	str	r6, [r5, #32]
 800fb56:	4553      	cmp	r3, sl
 800fb58:	d34b      	bcc.n	800fbf2 <ai_platform_network_init+0x166>
 800fb5a:	f1ba 0f00 	cmp.w	sl, #0
 800fb5e:	d025      	beq.n	800fbac <ai_platform_network_init+0x120>
 800fb60:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800fb64:	2700      	movs	r7, #0
 800fb66:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800fb6a:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 800fb6c:	eb08 0607 	add.w	r6, r8, r7
 800fb70:	443c      	add	r4, r7
 800fb72:	371c      	adds	r7, #28
 800fb74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fb76:	4557      	cmp	r7, sl
 800fb78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb7a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800fb7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fb82:	d1f2      	bne.n	800fb6a <ai_platform_network_init+0xde>
 800fb84:	e012      	b.n	800fbac <ai_platform_network_init+0x120>
 800fb86:	f1b9 0f00 	cmp.w	r9, #0
 800fb8a:	d015      	beq.n	800fbb8 <ai_platform_network_init+0x12c>
 800fb8c:	f04f 0e01 	mov.w	lr, #1
 800fb90:	e7bf      	b.n	800fb12 <ai_platform_network_init+0x86>
 800fb92:	f1b9 0f00 	cmp.w	r9, #0
 800fb96:	d00f      	beq.n	800fbb8 <ai_platform_network_init+0x12c>
 800fb98:	f04f 0e01 	mov.w	lr, #1
 800fb9c:	4637      	mov	r7, r6
 800fb9e:	e7ab      	b.n	800faf8 <ai_platform_network_init+0x6c>
 800fba0:	459b      	cmp	fp, r3
 800fba2:	d11e      	bne.n	800fbe2 <ai_platform_network_init+0x156>
 800fba4:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 800fba8:	e9c5 6708 	strd	r6, r7, [r5, #32]
 800fbac:	4628      	mov	r0, r5
 800fbae:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 800fbb2:	f000 fadd 	bl	8010170 <ai_layers_init_all>
 800fbb6:	e783      	b.n	800fac0 <ai_platform_network_init+0x34>
 800fbb8:	2213      	movs	r2, #19
 800fbba:	2110      	movs	r1, #16
 800fbbc:	f105 000c 	add.w	r0, r5, #12
 800fbc0:	2400      	movs	r4, #0
 800fbc2:	f000 faa1 	bl	8010108 <core_set_error>
 800fbc6:	e77e      	b.n	800fac6 <ai_platform_network_init+0x3a>
 800fbc8:	2211      	movs	r2, #17
 800fbca:	2110      	movs	r1, #16
 800fbcc:	300c      	adds	r0, #12
 800fbce:	f000 fa9b 	bl	8010108 <core_set_error>
 800fbd2:	e778      	b.n	800fac6 <ai_platform_network_init+0x3a>
 800fbd4:	2212      	movs	r2, #18
 800fbd6:	2110      	movs	r1, #16
 800fbd8:	f105 000c 	add.w	r0, r5, #12
 800fbdc:	f000 fa94 	bl	8010108 <core_set_error>
 800fbe0:	e771      	b.n	800fac6 <ai_platform_network_init+0x3a>
 800fbe2:	2212      	movs	r2, #18
 800fbe4:	2116      	movs	r1, #22
 800fbe6:	f105 000c 	add.w	r0, r5, #12
 800fbea:	2400      	movs	r4, #0
 800fbec:	f000 fa8c 	bl	8010108 <core_set_error>
 800fbf0:	e769      	b.n	800fac6 <ai_platform_network_init+0x3a>
 800fbf2:	2213      	movs	r2, #19
 800fbf4:	2116      	movs	r1, #22
 800fbf6:	f105 000c 	add.w	r0, r5, #12
 800fbfa:	2400      	movs	r4, #0
 800fbfc:	f000 fa84 	bl	8010108 <core_set_error>
 800fc00:	e761      	b.n	800fac6 <ai_platform_network_init+0x3a>
 800fc02:	bf00      	nop
 800fc04:	a1c00100 	.word	0xa1c00100
 800fc08:	a1facade 	.word	0xa1facade

0800fc0c <ai_platform_network_post_init>:
 800fc0c:	b538      	push	{r3, r4, r5, lr}
 800fc0e:	4b16      	ldr	r3, [pc, #88]	@ (800fc68 <ai_platform_network_post_init+0x5c>)
 800fc10:	6802      	ldr	r2, [r0, #0]
 800fc12:	ea02 0103 	and.w	r1, r2, r3
 800fc16:	4393      	bics	r3, r2
 800fc18:	d108      	bne.n	800fc2c <ai_platform_network_post_init+0x20>
 800fc1a:	6903      	ldr	r3, [r0, #16]
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	f013 0502 	ands.w	r5, r3, #2
 800fc22:	d005      	beq.n	800fc30 <ai_platform_network_post_init+0x24>
 800fc24:	428a      	cmp	r2, r1
 800fc26:	d00a      	beq.n	800fc3e <ai_platform_network_post_init+0x32>
 800fc28:	2001      	movs	r0, #1
 800fc2a:	bd38      	pop	{r3, r4, r5, pc}
 800fc2c:	2000      	movs	r0, #0
 800fc2e:	bd38      	pop	{r3, r4, r5, pc}
 800fc30:	2210      	movs	r2, #16
 800fc32:	2111      	movs	r1, #17
 800fc34:	300c      	adds	r0, #12
 800fc36:	f000 fa67 	bl	8010108 <core_set_error>
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	bd38      	pop	{r3, r4, r5, pc}
 800fc3e:	f000 faa5 	bl	801018c <ai_layers_post_init_all>
 800fc42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d0ef      	beq.n	800fc28 <ai_platform_network_post_init+0x1c>
 800fc48:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800fc4a:	e008      	b.n	800fc5e <ai_platform_network_post_init+0x52>
 800fc4c:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800fc50:	4798      	blx	r3
 800fc52:	692b      	ldr	r3, [r5, #16]
 800fc54:	42ab      	cmp	r3, r5
 800fc56:	461d      	mov	r5, r3
 800fc58:	d0e6      	beq.n	800fc28 <ai_platform_network_post_init+0x1c>
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d0e4      	beq.n	800fc28 <ai_platform_network_post_init+0x1c>
 800fc5e:	4629      	mov	r1, r5
 800fc60:	2000      	movs	r0, #0
 800fc62:	2d00      	cmp	r5, #0
 800fc64:	d1f2      	bne.n	800fc4c <ai_platform_network_post_init+0x40>
 800fc66:	e7df      	b.n	800fc28 <ai_platform_network_post_init+0x1c>
 800fc68:	a1c00100 	.word	0xa1c00100

0800fc6c <ai_platform_network_process>:
 800fc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc70:	b085      	sub	sp, #20
 800fc72:	4bb7      	ldr	r3, [pc, #732]	@ (800ff50 <ai_platform_network_process+0x2e4>)
 800fc74:	9202      	str	r2, [sp, #8]
 800fc76:	6802      	ldr	r2, [r0, #0]
 800fc78:	4393      	bics	r3, r2
 800fc7a:	f040 8142 	bne.w	800ff02 <ai_platform_network_process+0x296>
 800fc7e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800fc80:	4605      	mov	r5, r0
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f000 8126 	beq.w	800fed4 <ai_platform_network_process+0x268>
 800fc88:	6903      	ldr	r3, [r0, #16]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 800fc90:	f003 0303 	and.w	r3, r3, #3
 800fc94:	6182      	str	r2, [r0, #24]
 800fc96:	2b03      	cmp	r3, #3
 800fc98:	f040 8122 	bne.w	800fee0 <ai_platform_network_process+0x274>
 800fc9c:	2900      	cmp	r1, #0
 800fc9e:	f000 8136 	beq.w	800ff0e <ai_platform_network_process+0x2a2>
 800fca2:	fab8 f788 	clz	r7, r8
 800fca6:	097f      	lsrs	r7, r7, #5
 800fca8:	f1b8 0f00 	cmp.w	r8, #0
 800fcac:	f000 812f 	beq.w	800ff0e <ai_platform_network_process+0x2a2>
 800fcb0:	f8b8 3000 	ldrh.w	r3, [r8]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	f000 812a 	beq.w	800ff0e <ai_platform_network_process+0x2a2>
 800fcba:	698b      	ldr	r3, [r1, #24]
 800fcbc:	460e      	mov	r6, r1
 800fcbe:	9003      	str	r0, [sp, #12]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	9301      	str	r3, [sp, #4]
 800fcc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d072      	beq.n	800fdb2 <ai_platform_network_process+0x146>
 800fccc:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800fcd0:	2c00      	cmp	r4, #0
 800fcd2:	d06e      	beq.n	800fdb2 <ai_platform_network_process+0x146>
 800fcd4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fcd8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800fcdc:	f8d3 a000 	ldr.w	sl, [r3]
 800fce0:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800fce4:	f000 8112 	beq.w	800ff0c <ai_platform_network_process+0x2a0>
 800fce8:	69a3      	ldr	r3, [r4, #24]
 800fcea:	2101      	movs	r1, #1
 800fcec:	4630      	mov	r0, r6
 800fcee:	685d      	ldr	r5, [r3, #4]
 800fcf0:	f7ff fc9c 	bl	800f62c <ai_buffer_get_size>
 800fcf4:	4285      	cmp	r5, r0
 800fcf6:	f0c0 8115 	bcc.w	800ff24 <ai_platform_network_process+0x2b8>
 800fcfa:	68e0      	ldr	r0, [r4, #12]
 800fcfc:	69b1      	ldr	r1, [r6, #24]
 800fcfe:	68c2      	ldr	r2, [r0, #12]
 800fd00:	68cb      	ldr	r3, [r1, #12]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	f040 810e 	bne.w	800ff24 <ai_platform_network_process+0x2b8>
 800fd08:	6882      	ldr	r2, [r0, #8]
 800fd0a:	688b      	ldr	r3, [r1, #8]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	f040 8109 	bne.w	800ff24 <ai_platform_network_process+0x2b8>
 800fd12:	6842      	ldr	r2, [r0, #4]
 800fd14:	684b      	ldr	r3, [r1, #4]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	f040 8104 	bne.w	800ff24 <ai_platform_network_process+0x2b8>
 800fd1c:	69a3      	ldr	r3, [r4, #24]
 800fd1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd22:	f002 fe61 	bl	80129e8 <ai_array_get_data_byte_size>
 800fd26:	4605      	mov	r5, r0
 800fd28:	4620      	mov	r0, r4
 800fd2a:	f002 fe75 	bl	8012a18 <get_tensor_byte_size>
 800fd2e:	4285      	cmp	r5, r0
 800fd30:	f0c0 80f8 	bcc.w	800ff24 <ai_platform_network_process+0x2b8>
 800fd34:	69a3      	ldr	r3, [r4, #24]
 800fd36:	6818      	ldr	r0, [r3, #0]
 800fd38:	f002 fdbe 	bl	80128b8 <ai_array_to_buffer_fmt>
 800fd3c:	6833      	ldr	r3, [r6, #0]
 800fd3e:	4058      	eors	r0, r3
 800fd40:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800fd44:	f040 81a4 	bne.w	8010090 <ai_platform_network_process+0x424>
 800fd48:	6873      	ldr	r3, [r6, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	f000 80de 	beq.w	800ff0c <ai_platform_network_process+0x2a0>
 800fd50:	69b3      	ldr	r3, [r6, #24]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f000 81a4 	beq.w	80100a2 <ai_platform_network_process+0x436>
 800fd5a:	9a01      	ldr	r2, [sp, #4]
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	3701      	adds	r7, #1
 800fd60:	361c      	adds	r6, #28
 800fd62:	429a      	cmp	r2, r3
 800fd64:	bf38      	it	cc
 800fd66:	461a      	movcc	r2, r3
 800fd68:	9201      	str	r2, [sp, #4]
 800fd6a:	f002 fe55 	bl	8012a18 <get_tensor_byte_size>
 800fd6e:	f8c9 0008 	str.w	r0, [r9, #8]
 800fd72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	fb00 f303 	mul.w	r3, r0, r3
 800fd7c:	f8c9 300c 	str.w	r3, [r9, #12]
 800fd80:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800fd84:	440b      	add	r3, r1
 800fd86:	f8c9 1004 	str.w	r1, [r9, #4]
 800fd8a:	f84a 300b 	str.w	r3, [sl, fp]
 800fd8e:	69a0      	ldr	r0, [r4, #24]
 800fd90:	6803      	ldr	r3, [r0, #0]
 800fd92:	009a      	lsls	r2, r3, #2
 800fd94:	f100 80af 	bmi.w	800fef6 <ai_platform_network_process+0x28a>
 800fd98:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800fd9c:	1a9b      	subs	r3, r3, r2
 800fd9e:	4419      	add	r1, r3
 800fda0:	6081      	str	r1, [r0, #8]
 800fda2:	69a3      	ldr	r3, [r4, #24]
 800fda4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800fda8:	60da      	str	r2, [r3, #12]
 800fdaa:	f8b8 3000 	ldrh.w	r3, [r8]
 800fdae:	42bb      	cmp	r3, r7
 800fdb0:	d888      	bhi.n	800fcc4 <ai_platform_network_process+0x58>
 800fdb2:	9d03      	ldr	r5, [sp, #12]
 800fdb4:	9b02      	ldr	r3, [sp, #8]
 800fdb6:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	f000 817b 	beq.w	80100b4 <ai_platform_network_process+0x448>
 800fdbe:	2a01      	cmp	r2, #1
 800fdc0:	f240 80bd 	bls.w	800ff3e <ai_platform_network_process+0x2d2>
 800fdc4:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 800fdc8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	f000 80b6 	beq.w	800ff3e <ai_platform_network_process+0x2d2>
 800fdd2:	2700      	movs	r7, #0
 800fdd4:	f8dd b008 	ldr.w	fp, [sp, #8]
 800fdd8:	9502      	str	r5, [sp, #8]
 800fdda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	f000 80bd 	beq.w	800ff5e <ai_platform_network_process+0x2f2>
 800fde4:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800fde8:	2e00      	cmp	r6, #0
 800fdea:	f000 80b8 	beq.w	800ff5e <ai_platform_network_process+0x2f2>
 800fdee:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fdf2:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800fdf6:	681c      	ldr	r4, [r3, #0]
 800fdf8:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 800fdfc:	f000 8170 	beq.w	80100e0 <ai_platform_network_process+0x474>
 800fe00:	69b3      	ldr	r3, [r6, #24]
 800fe02:	2101      	movs	r1, #1
 800fe04:	4658      	mov	r0, fp
 800fe06:	685d      	ldr	r5, [r3, #4]
 800fe08:	f7ff fc10 	bl	800f62c <ai_buffer_get_size>
 800fe0c:	4285      	cmp	r5, r0
 800fe0e:	f0c0 8095 	bcc.w	800ff3c <ai_platform_network_process+0x2d0>
 800fe12:	68f0      	ldr	r0, [r6, #12]
 800fe14:	f8db 1018 	ldr.w	r1, [fp, #24]
 800fe18:	68c2      	ldr	r2, [r0, #12]
 800fe1a:	68cb      	ldr	r3, [r1, #12]
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	f040 808d 	bne.w	800ff3c <ai_platform_network_process+0x2d0>
 800fe22:	6882      	ldr	r2, [r0, #8]
 800fe24:	688b      	ldr	r3, [r1, #8]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	f040 8088 	bne.w	800ff3c <ai_platform_network_process+0x2d0>
 800fe2c:	6842      	ldr	r2, [r0, #4]
 800fe2e:	684b      	ldr	r3, [r1, #4]
 800fe30:	429a      	cmp	r2, r3
 800fe32:	f040 8083 	bne.w	800ff3c <ai_platform_network_process+0x2d0>
 800fe36:	69b3      	ldr	r3, [r6, #24]
 800fe38:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe3c:	f002 fdd4 	bl	80129e8 <ai_array_get_data_byte_size>
 800fe40:	9003      	str	r0, [sp, #12]
 800fe42:	4630      	mov	r0, r6
 800fe44:	f002 fde8 	bl	8012a18 <get_tensor_byte_size>
 800fe48:	9b03      	ldr	r3, [sp, #12]
 800fe4a:	4283      	cmp	r3, r0
 800fe4c:	d376      	bcc.n	800ff3c <ai_platform_network_process+0x2d0>
 800fe4e:	69b3      	ldr	r3, [r6, #24]
 800fe50:	6818      	ldr	r0, [r3, #0]
 800fe52:	f002 fd31 	bl	80128b8 <ai_array_to_buffer_fmt>
 800fe56:	f8db 3000 	ldr.w	r3, [fp]
 800fe5a:	4058      	eors	r0, r3
 800fe5c:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800fe60:	f040 812c 	bne.w	80100bc <ai_platform_network_process+0x450>
 800fe64:	f8db 3004 	ldr.w	r3, [fp, #4]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f000 8139 	beq.w	80100e0 <ai_platform_network_process+0x474>
 800fe6e:	f8db 3018 	ldr.w	r3, [fp, #24]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f000 812a 	beq.w	80100ce <ai_platform_network_process+0x462>
 800fe7a:	9a01      	ldr	r2, [sp, #4]
 800fe7c:	4630      	mov	r0, r6
 800fe7e:	3701      	adds	r7, #1
 800fe80:	f10b 0b1c 	add.w	fp, fp, #28
 800fe84:	429a      	cmp	r2, r3
 800fe86:	bf38      	it	cc
 800fe88:	461a      	movcc	r2, r3
 800fe8a:	9201      	str	r2, [sp, #4]
 800fe8c:	f002 fdc4 	bl	8012a18 <get_tensor_byte_size>
 800fe90:	f8c8 0008 	str.w	r0, [r8, #8]
 800fe94:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	fb00 f303 	mul.w	r3, r0, r3
 800fe9e:	f8c8 300c 	str.w	r3, [r8, #12]
 800fea2:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 800fea6:	440b      	add	r3, r1
 800fea8:	f8c8 1004 	str.w	r1, [r8, #4]
 800feac:	f844 300a 	str.w	r3, [r4, sl]
 800feb0:	69b0      	ldr	r0, [r6, #24]
 800feb2:	6803      	ldr	r3, [r0, #0]
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	d44d      	bmi.n	800ff54 <ai_platform_network_process+0x2e8>
 800feb8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800febc:	1a9b      	subs	r3, r3, r2
 800febe:	4419      	add	r1, r3
 800fec0:	6081      	str	r1, [r0, #8]
 800fec2:	69b3      	ldr	r3, [r6, #24]
 800fec4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800fec8:	60da      	str	r2, [r3, #12]
 800feca:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800fece:	42bb      	cmp	r3, r7
 800fed0:	d883      	bhi.n	800fdda <ai_platform_network_process+0x16e>
 800fed2:	e044      	b.n	800ff5e <ai_platform_network_process+0x2f2>
 800fed4:	6902      	ldr	r2, [r0, #16]
 800fed6:	6183      	str	r3, [r0, #24]
 800fed8:	f002 0203 	and.w	r2, r2, #3
 800fedc:	2a03      	cmp	r2, #3
 800fede:	d016      	beq.n	800ff0e <ai_platform_network_process+0x2a2>
 800fee0:	2230      	movs	r2, #48	@ 0x30
 800fee2:	2111      	movs	r1, #17
 800fee4:	f105 000c 	add.w	r0, r5, #12
 800fee8:	2400      	movs	r4, #0
 800feea:	f000 f90d 	bl	8010108 <core_set_error>
 800feee:	4620      	mov	r0, r4
 800fef0:	b005      	add	sp, #20
 800fef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef6:	f8b8 3000 	ldrh.w	r3, [r8]
 800fefa:	429f      	cmp	r7, r3
 800fefc:	f4ff aee2 	bcc.w	800fcc4 <ai_platform_network_process+0x58>
 800ff00:	e757      	b.n	800fdb2 <ai_platform_network_process+0x146>
 800ff02:	2400      	movs	r4, #0
 800ff04:	4620      	mov	r0, r4
 800ff06:	b005      	add	sp, #20
 800ff08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff0c:	9d03      	ldr	r5, [sp, #12]
 800ff0e:	2400      	movs	r4, #0
 800ff10:	2217      	movs	r2, #23
 800ff12:	2112      	movs	r1, #18
 800ff14:	f105 000c 	add.w	r0, r5, #12
 800ff18:	f000 f8f6 	bl	8010108 <core_set_error>
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	b005      	add	sp, #20
 800ff20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff24:	9d03      	ldr	r5, [sp, #12]
 800ff26:	2400      	movs	r4, #0
 800ff28:	2218      	movs	r2, #24
 800ff2a:	2112      	movs	r1, #18
 800ff2c:	f105 000c 	add.w	r0, r5, #12
 800ff30:	f000 f8ea 	bl	8010108 <core_set_error>
 800ff34:	4620      	mov	r0, r4
 800ff36:	b005      	add	sp, #20
 800ff38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff3c:	9d02      	ldr	r5, [sp, #8]
 800ff3e:	2218      	movs	r2, #24
 800ff40:	2113      	movs	r1, #19
 800ff42:	f105 000c 	add.w	r0, r5, #12
 800ff46:	2400      	movs	r4, #0
 800ff48:	f000 f8de 	bl	8010108 <core_set_error>
 800ff4c:	e7cf      	b.n	800feee <ai_platform_network_process+0x282>
 800ff4e:	bf00      	nop
 800ff50:	a1c00100 	.word	0xa1c00100
 800ff54:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800ff58:	429f      	cmp	r7, r3
 800ff5a:	f4ff af3e 	bcc.w	800fdda <ai_platform_network_process+0x16e>
 800ff5e:	9d02      	ldr	r5, [sp, #8]
 800ff60:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ff64:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800ff66:	832b      	strh	r3, [r5, #24]
 800ff68:	2a00      	cmp	r2, #0
 800ff6a:	f040 808b 	bne.w	8010084 <ai_platform_network_process+0x418>
 800ff6e:	4616      	mov	r6, r2
 800ff70:	4617      	mov	r7, r2
 800ff72:	8b6c      	ldrh	r4, [r5, #26]
 800ff74:	429c      	cmp	r4, r3
 800ff76:	d2ba      	bcs.n	800feee <ai_platform_network_process+0x282>
 800ff78:	46ab      	mov	fp, r5
 800ff7a:	2e00      	cmp	r6, #0
 800ff7c:	d030      	beq.n	800ffe0 <ai_platform_network_process+0x374>
 800ff7e:	f04f 0800 	mov.w	r8, #0
 800ff82:	e014      	b.n	800ffae <ai_platform_network_process+0x342>
 800ff84:	6882      	ldr	r2, [r0, #8]
 800ff86:	68c5      	ldr	r5, [r0, #12]
 800ff88:	6863      	ldr	r3, [r4, #4]
 800ff8a:	1b52      	subs	r2, r2, r5
 800ff8c:	4413      	add	r3, r2
 800ff8e:	6083      	str	r3, [r0, #8]
 800ff90:	698b      	ldr	r3, [r1, #24]
 800ff92:	6862      	ldr	r2, [r4, #4]
 800ff94:	60da      	str	r2, [r3, #12]
 800ff96:	f859 200a 	ldr.w	r2, [r9, sl]
 800ff9a:	f108 0801 	add.w	r8, r8, #1
 800ff9e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800ffa2:	440b      	add	r3, r1
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	d301      	bcc.n	800ffac <ai_platform_network_process+0x340>
 800ffa8:	68e3      	ldr	r3, [r4, #12]
 800ffaa:	1ad3      	subs	r3, r2, r3
 800ffac:	6063      	str	r3, [r4, #4]
 800ffae:	8833      	ldrh	r3, [r6, #0]
 800ffb0:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800ffb4:	4543      	cmp	r3, r8
 800ffb6:	d913      	bls.n	800ffe0 <ai_platform_network_process+0x374>
 800ffb8:	6873      	ldr	r3, [r6, #4]
 800ffba:	b18b      	cbz	r3, 800ffe0 <ai_platform_network_process+0x374>
 800ffbc:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800ffc0:	b171      	cbz	r1, 800ffe0 <ai_platform_network_process+0x374>
 800ffc2:	6988      	ldr	r0, [r1, #24]
 800ffc4:	68b2      	ldr	r2, [r6, #8]
 800ffc6:	6803      	ldr	r3, [r0, #0]
 800ffc8:	f8d2 9000 	ldr.w	r9, [r2]
 800ffcc:	009d      	lsls	r5, r3, #2
 800ffce:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800ffd2:	d5d7      	bpl.n	800ff84 <ai_platform_network_process+0x318>
 800ffd4:	6881      	ldr	r1, [r0, #8]
 800ffd6:	68a2      	ldr	r2, [r4, #8]
 800ffd8:	6860      	ldr	r0, [r4, #4]
 800ffda:	f002 fbe5 	bl	80127a8 <st_int8_copy>
 800ffde:	e7da      	b.n	800ff96 <ai_platform_network_process+0x32a>
 800ffe0:	4658      	mov	r0, fp
 800ffe2:	f000 f8e7 	bl	80101b4 <ai_layers_forward_all>
 800ffe6:	2f00      	cmp	r7, #0
 800ffe8:	d03d      	beq.n	8010066 <ai_platform_network_process+0x3fa>
 800ffea:	2400      	movs	r4, #0
 800ffec:	e016      	b.n	801001c <ai_platform_network_process+0x3b0>
 800ffee:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800fff2:	f859 100a 	ldr.w	r1, [r9, sl]
 800fff6:	4413      	add	r3, r2
 800fff8:	428b      	cmp	r3, r1
 800fffa:	d302      	bcc.n	8010002 <ai_platform_network_process+0x396>
 800fffc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010000:	1acb      	subs	r3, r1, r3
 8010002:	f8c8 3004 	str.w	r3, [r8, #4]
 8010006:	6981      	ldr	r1, [r0, #24]
 8010008:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 801000c:	1b52      	subs	r2, r2, r5
 801000e:	4413      	add	r3, r2
 8010010:	608b      	str	r3, [r1, #8]
 8010012:	6983      	ldr	r3, [r0, #24]
 8010014:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010018:	60da      	str	r2, [r3, #12]
 801001a:	3401      	adds	r4, #1
 801001c:	883b      	ldrh	r3, [r7, #0]
 801001e:	42a3      	cmp	r3, r4
 8010020:	d921      	bls.n	8010066 <ai_platform_network_process+0x3fa>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	b1fb      	cbz	r3, 8010066 <ai_platform_network_process+0x3fa>
 8010026:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801002a:	b1e0      	cbz	r0, 8010066 <ai_platform_network_process+0x3fa>
 801002c:	68ba      	ldr	r2, [r7, #8]
 801002e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8010032:	6983      	ldr	r3, [r0, #24]
 8010034:	f8d2 9000 	ldr.w	r9, [r2]
 8010038:	681a      	ldr	r2, [r3, #0]
 801003a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 801003e:	0092      	lsls	r2, r2, #2
 8010040:	d5d5      	bpl.n	800ffee <ai_platform_network_process+0x382>
 8010042:	6898      	ldr	r0, [r3, #8]
 8010044:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8010048:	f002 fbae 	bl	80127a8 <st_int8_copy>
 801004c:	f859 200a 	ldr.w	r2, [r9, sl]
 8010050:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8010054:	440b      	add	r3, r1
 8010056:	4293      	cmp	r3, r2
 8010058:	d302      	bcc.n	8010060 <ai_platform_network_process+0x3f4>
 801005a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801005e:	1ad3      	subs	r3, r2, r3
 8010060:	f8c8 3004 	str.w	r3, [r8, #4]
 8010064:	e7d9      	b.n	801001a <ai_platform_network_process+0x3ae>
 8010066:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 801006a:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 801006e:	3401      	adds	r4, #1
 8010070:	b2a4      	uxth	r4, r4
 8010072:	42a3      	cmp	r3, r4
 8010074:	f8ab 401a 	strh.w	r4, [fp, #26]
 8010078:	f63f af7f 	bhi.w	800ff7a <ai_platform_network_process+0x30e>
 801007c:	4620      	mov	r0, r4
 801007e:	b005      	add	sp, #20
 8010080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010084:	2a01      	cmp	r2, #1
 8010086:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8010088:	d033      	beq.n	80100f2 <ai_platform_network_process+0x486>
 801008a:	f106 070c 	add.w	r7, r6, #12
 801008e:	e770      	b.n	800ff72 <ai_platform_network_process+0x306>
 8010090:	9d03      	ldr	r5, [sp, #12]
 8010092:	2219      	movs	r2, #25
 8010094:	2112      	movs	r1, #18
 8010096:	2400      	movs	r4, #0
 8010098:	f105 000c 	add.w	r0, r5, #12
 801009c:	f000 f834 	bl	8010108 <core_set_error>
 80100a0:	e725      	b.n	800feee <ai_platform_network_process+0x282>
 80100a2:	9d03      	ldr	r5, [sp, #12]
 80100a4:	4604      	mov	r4, r0
 80100a6:	2221      	movs	r2, #33	@ 0x21
 80100a8:	2112      	movs	r1, #18
 80100aa:	f105 000c 	add.w	r0, r5, #12
 80100ae:	f000 f82b 	bl	8010108 <core_set_error>
 80100b2:	e71c      	b.n	800feee <ai_platform_network_process+0x282>
 80100b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80100b8:	832b      	strh	r3, [r5, #24]
 80100ba:	e755      	b.n	800ff68 <ai_platform_network_process+0x2fc>
 80100bc:	9d02      	ldr	r5, [sp, #8]
 80100be:	2219      	movs	r2, #25
 80100c0:	2113      	movs	r1, #19
 80100c2:	2400      	movs	r4, #0
 80100c4:	f105 000c 	add.w	r0, r5, #12
 80100c8:	f000 f81e 	bl	8010108 <core_set_error>
 80100cc:	e70f      	b.n	800feee <ai_platform_network_process+0x282>
 80100ce:	9d02      	ldr	r5, [sp, #8]
 80100d0:	4604      	mov	r4, r0
 80100d2:	2221      	movs	r2, #33	@ 0x21
 80100d4:	2113      	movs	r1, #19
 80100d6:	f105 000c 	add.w	r0, r5, #12
 80100da:	f000 f815 	bl	8010108 <core_set_error>
 80100de:	e706      	b.n	800feee <ai_platform_network_process+0x282>
 80100e0:	9d02      	ldr	r5, [sp, #8]
 80100e2:	2217      	movs	r2, #23
 80100e4:	2113      	movs	r1, #19
 80100e6:	2400      	movs	r4, #0
 80100e8:	f105 000c 	add.w	r0, r5, #12
 80100ec:	f000 f80c 	bl	8010108 <core_set_error>
 80100f0:	e6fd      	b.n	800feee <ai_platform_network_process+0x282>
 80100f2:	2700      	movs	r7, #0
 80100f4:	e73d      	b.n	800ff72 <ai_platform_network_process+0x306>
 80100f6:	bf00      	nop

080100f8 <core_init>:
 80100f8:	2001      	movs	r0, #1
 80100fa:	4770      	bx	lr

080100fc <core_get_error>:
 80100fc:	4603      	mov	r3, r0
 80100fe:	2200      	movs	r2, #0
 8010100:	6800      	ldr	r0, [r0, #0]
 8010102:	601a      	str	r2, [r3, #0]
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop

08010108 <core_set_error>:
 8010108:	4603      	mov	r3, r0
 801010a:	7800      	ldrb	r0, [r0, #0]
 801010c:	b108      	cbz	r0, 8010112 <core_set_error+0xa>
 801010e:	2000      	movs	r0, #0
 8010110:	4770      	bx	lr
 8010112:	7019      	strb	r1, [r3, #0]
 8010114:	2001      	movs	r0, #1
 8010116:	6819      	ldr	r1, [r3, #0]
 8010118:	f362 211f 	bfi	r1, r2, #8, #24
 801011c:	6019      	str	r1, [r3, #0]
 801011e:	4770      	bx	lr

08010120 <ai_check_custom_types>:
 8010120:	b082      	sub	sp, #8
 8010122:	4b12      	ldr	r3, [pc, #72]	@ (801016c <ai_check_custom_types+0x4c>)
 8010124:	9301      	str	r3, [sp, #4]
 8010126:	b118      	cbz	r0, 8010130 <ai_check_custom_types+0x10>
 8010128:	7803      	ldrb	r3, [r0, #0]
 801012a:	2b03      	cmp	r3, #3
 801012c:	d002      	beq.n	8010134 <ai_check_custom_types+0x14>
 801012e:	2000      	movs	r0, #0
 8010130:	b002      	add	sp, #8
 8010132:	4770      	bx	lr
 8010134:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010138:	4293      	cmp	r3, r2
 801013a:	d004      	beq.n	8010146 <ai_check_custom_types+0x26>
 801013c:	2001      	movs	r0, #1
 801013e:	f080 0001 	eor.w	r0, r0, #1
 8010142:	b002      	add	sp, #8
 8010144:	4770      	bx	lr
 8010146:	7842      	ldrb	r2, [r0, #1]
 8010148:	3001      	adds	r0, #1
 801014a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801014e:	429a      	cmp	r2, r3
 8010150:	d1f4      	bne.n	801013c <ai_check_custom_types+0x1c>
 8010152:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8010156:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801015a:	429a      	cmp	r2, r3
 801015c:	d1ee      	bne.n	801013c <ai_check_custom_types+0x1c>
 801015e:	7842      	ldrb	r2, [r0, #1]
 8010160:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010164:	429a      	cmp	r2, r3
 8010166:	d1e9      	bne.n	801013c <ai_check_custom_types+0x1c>
 8010168:	2000      	movs	r0, #0
 801016a:	e7e8      	b.n	801013e <ai_check_custom_types+0x1e>
 801016c:	84048403 	.word	0x84048403

08010170 <ai_layers_init_all>:
 8010170:	2100      	movs	r1, #0
 8010172:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010174:	b13b      	cbz	r3, 8010186 <ai_layers_init_all+0x16>
 8010176:	691a      	ldr	r2, [r3, #16]
 8010178:	3101      	adds	r1, #1
 801017a:	60d8      	str	r0, [r3, #12]
 801017c:	429a      	cmp	r2, r3
 801017e:	4613      	mov	r3, r2
 8010180:	d001      	beq.n	8010186 <ai_layers_init_all+0x16>
 8010182:	2a00      	cmp	r2, #0
 8010184:	d1f6      	bne.n	8010174 <ai_layers_init_all+0x4>
 8010186:	4608      	mov	r0, r1
 8010188:	4770      	bx	lr
 801018a:	bf00      	nop

0801018c <ai_layers_post_init_all>:
 801018c:	b538      	push	{r3, r4, r5, lr}
 801018e:	2500      	movs	r5, #0
 8010190:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8010192:	b16c      	cbz	r4, 80101b0 <ai_layers_post_init_all+0x24>
 8010194:	6863      	ldr	r3, [r4, #4]
 8010196:	07db      	lsls	r3, r3, #31
 8010198:	d504      	bpl.n	80101a4 <ai_layers_post_init_all+0x18>
 801019a:	6a23      	ldr	r3, [r4, #32]
 801019c:	4620      	mov	r0, r4
 801019e:	b10b      	cbz	r3, 80101a4 <ai_layers_post_init_all+0x18>
 80101a0:	3501      	adds	r5, #1
 80101a2:	4798      	blx	r3
 80101a4:	6923      	ldr	r3, [r4, #16]
 80101a6:	42a3      	cmp	r3, r4
 80101a8:	461c      	mov	r4, r3
 80101aa:	d001      	beq.n	80101b0 <ai_layers_post_init_all+0x24>
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d1f0      	bne.n	8010192 <ai_layers_post_init_all+0x6>
 80101b0:	4628      	mov	r0, r5
 80101b2:	bd38      	pop	{r3, r4, r5, pc}

080101b4 <ai_layers_forward_all>:
 80101b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101b8:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 80101bc:	4604      	mov	r4, r0
 80101be:	f1b8 0f00 	cmp.w	r8, #0
 80101c2:	d02a      	beq.n	801021a <ai_layers_forward_all+0x66>
 80101c4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80101c6:	63c1      	str	r1, [r0, #60]	@ 0x3c
 80101c8:	b319      	cbz	r1, 8010212 <ai_layers_forward_all+0x5e>
 80101ca:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80101cc:	2001      	movs	r0, #1
 80101ce:	47c0      	blx	r8
 80101d0:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 80101d2:	b1f6      	cbz	r6, 8010212 <ai_layers_forward_all+0x5e>
 80101d4:	2700      	movs	r7, #0
 80101d6:	4631      	mov	r1, r6
 80101d8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80101da:	2002      	movs	r0, #2
 80101dc:	47c0      	blx	r8
 80101de:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80101e0:	4628      	mov	r0, r5
 80101e2:	696b      	ldr	r3, [r5, #20]
 80101e4:	4798      	blx	r3
 80101e6:	692e      	ldr	r6, [r5, #16]
 80101e8:	2003      	movs	r0, #3
 80101ea:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80101ec:	42b5      	cmp	r5, r6
 80101ee:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80101f0:	d007      	beq.n	8010202 <ai_layers_forward_all+0x4e>
 80101f2:	47c0      	blx	r8
 80101f4:	3701      	adds	r7, #1
 80101f6:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80101f8:	2e00      	cmp	r6, #0
 80101fa:	d1ec      	bne.n	80101d6 <ai_layers_forward_all+0x22>
 80101fc:	4638      	mov	r0, r7
 80101fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010202:	2003      	movs	r0, #3
 8010204:	3701      	adds	r7, #1
 8010206:	47c0      	blx	r8
 8010208:	2300      	movs	r3, #0
 801020a:	4638      	mov	r0, r7
 801020c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801020e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010212:	2700      	movs	r7, #0
 8010214:	4638      	mov	r0, r7
 8010216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801021a:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 801021c:	63c5      	str	r5, [r0, #60]	@ 0x3c
 801021e:	2d00      	cmp	r5, #0
 8010220:	d0f7      	beq.n	8010212 <ai_layers_forward_all+0x5e>
 8010222:	4647      	mov	r7, r8
 8010224:	696b      	ldr	r3, [r5, #20]
 8010226:	4628      	mov	r0, r5
 8010228:	4798      	blx	r3
 801022a:	462b      	mov	r3, r5
 801022c:	692d      	ldr	r5, [r5, #16]
 801022e:	429d      	cmp	r5, r3
 8010230:	d004      	beq.n	801023c <ai_layers_forward_all+0x88>
 8010232:	3701      	adds	r7, #1
 8010234:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8010236:	2d00      	cmp	r5, #0
 8010238:	d1f4      	bne.n	8010224 <ai_layers_forward_all+0x70>
 801023a:	e7df      	b.n	80101fc <ai_layers_forward_all+0x48>
 801023c:	2300      	movs	r3, #0
 801023e:	3701      	adds	r7, #1
 8010240:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8010242:	e7db      	b.n	80101fc <ai_layers_forward_all+0x48>

08010244 <forward_conv2d_if32of32wf32_nl_pool>:
 8010244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010248:	f8d0 c018 	ldr.w	ip, [r0, #24]
 801024c:	b0c3      	sub	sp, #268	@ 0x10c
 801024e:	f8bc 3000 	ldrh.w	r3, [ip]
 8010252:	9321      	str	r3, [sp, #132]	@ 0x84
 8010254:	2b00      	cmp	r3, #0
 8010256:	f000 813c 	beq.w	80104d2 <forward_conv2d_if32of32wf32_nl_pool+0x28e>
 801025a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801025e:	4604      	mov	r4, r0
 8010260:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8010264:	f1bb 0f00 	cmp.w	fp, #0
 8010268:	d001      	beq.n	801026e <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 801026a:	f8db b000 	ldr.w	fp, [fp]
 801026e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010270:	2a01      	cmp	r2, #1
 8010272:	f000 812d 	beq.w	80104d0 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8010276:	f8d3 a010 	ldr.w	sl, [r3, #16]
 801027a:	f1ba 0f00 	cmp.w	sl, #0
 801027e:	d001      	beq.n	8010284 <forward_conv2d_if32of32wf32_nl_pool+0x40>
 8010280:	f8da a000 	ldr.w	sl, [sl]
 8010284:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010286:	2a02      	cmp	r2, #2
 8010288:	f000 8122 	beq.w	80104d0 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 801028c:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8010290:	8b1b      	ldrh	r3, [r3, #24]
 8010292:	f1b8 0f00 	cmp.w	r8, #0
 8010296:	f000 812f 	beq.w	80104f8 <forward_conv2d_if32of32wf32_nl_pool+0x2b4>
 801029a:	2b01      	cmp	r3, #1
 801029c:	f8d8 2000 	ldr.w	r2, [r8]
 80102a0:	f240 8130 	bls.w	8010504 <forward_conv2d_if32of32wf32_nl_pool+0x2c0>
 80102a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80102a8:	9340      	str	r3, [sp, #256]	@ 0x100
 80102aa:	f8d8 8008 	ldr.w	r8, [r8, #8]
 80102ae:	f8db 100c 	ldr.w	r1, [fp, #12]
 80102b2:	f8da 000c 	ldr.w	r0, [sl, #12]
 80102b6:	9122      	str	r1, [sp, #136]	@ 0x88
 80102b8:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80102bc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80102c0:	9130      	str	r1, [sp, #192]	@ 0xc0
 80102c2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80102c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80102c8:	9131      	str	r1, [sp, #196]	@ 0xc4
 80102ca:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80102ce:	f8de 7004 	ldr.w	r7, [lr, #4]
 80102d2:	9132      	str	r1, [sp, #200]	@ 0xc8
 80102d4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80102d8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80102da:	9133      	str	r1, [sp, #204]	@ 0xcc
 80102dc:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80102e0:	681e      	ldr	r6, [r3, #0]
 80102e2:	9123      	str	r1, [sp, #140]	@ 0x8c
 80102e4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80102e8:	972a      	str	r7, [sp, #168]	@ 0xa8
 80102ea:	9124      	str	r1, [sp, #144]	@ 0x90
 80102ec:	f8de 7008 	ldr.w	r7, [lr, #8]
 80102f0:	9628      	str	r6, [sp, #160]	@ 0xa0
 80102f2:	972f      	str	r7, [sp, #188]	@ 0xbc
 80102f4:	e9d4 950a 	ldrd	r9, r5, [r4, #40]	@ 0x28
 80102f8:	fa1f f189 	uxth.w	r1, r9
 80102fc:	9527      	str	r5, [sp, #156]	@ 0x9c
 80102fe:	685d      	ldr	r5, [r3, #4]
 8010300:	9134      	str	r1, [sp, #208]	@ 0xd0
 8010302:	9529      	str	r5, [sp, #164]	@ 0xa4
 8010304:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 8010308:	f8bd 109c 	ldrh.w	r1, [sp, #156]	@ 0x9c
 801030c:	9135      	str	r1, [sp, #212]	@ 0xd4
 801030e:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	@ 0xa0
 8010312:	9136      	str	r1, [sp, #216]	@ 0xd8
 8010314:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 8010318:	9137      	str	r1, [sp, #220]	@ 0xdc
 801031a:	6899      	ldr	r1, [r3, #8]
 801031c:	68db      	ldr	r3, [r3, #12]
 801031e:	912d      	str	r1, [sp, #180]	@ 0xb4
 8010320:	932e      	str	r3, [sp, #184]	@ 0xb8
 8010322:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8010326:	9338      	str	r3, [sp, #224]	@ 0xe0
 8010328:	b2ab      	uxth	r3, r5
 801032a:	9339      	str	r3, [sp, #228]	@ 0xe4
 801032c:	b2b3      	uxth	r3, r6
 801032e:	933a      	str	r3, [sp, #232]	@ 0xe8
 8010330:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	@ 0xa8
 8010334:	9325      	str	r3, [sp, #148]	@ 0x94
 8010336:	b23b      	sxth	r3, r7
 8010338:	9326      	str	r3, [sp, #152]	@ 0x98
 801033a:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 801033e:	933b      	str	r3, [sp, #236]	@ 0xec
 8010340:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 8010344:	933c      	str	r3, [sp, #240]	@ 0xf0
 8010346:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 801034a:	933d      	str	r3, [sp, #244]	@ 0xf4
 801034c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801034e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010352:	933e      	str	r3, [sp, #248]	@ 0xf8
 8010354:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010356:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801035a:	933f      	str	r3, [sp, #252]	@ 0xfc
 801035c:	6a23      	ldr	r3, [r4, #32]
 801035e:	9322      	str	r3, [sp, #136]	@ 0x88
 8010360:	f1b8 0f00 	cmp.w	r8, #0
 8010364:	f000 80b7 	beq.w	80104d6 <forward_conv2d_if32of32wf32_nl_pool+0x292>
 8010368:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801036c:	2b00      	cmp	r3, #0
 801036e:	f000 80ba 	beq.w	80104e6 <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 8010372:	9221      	str	r2, [sp, #132]	@ 0x84
 8010374:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010378:	689b      	ldr	r3, [r3, #8]
 801037a:	9322      	str	r3, [sp, #136]	@ 0x88
 801037c:	f002 fb0c 	bl	8012998 <ai_array_get_byte_size>
 8010380:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8010384:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010386:	902c      	str	r0, [sp, #176]	@ 0xb0
 8010388:	2b00      	cmp	r3, #0
 801038a:	f000 80be 	beq.w	801050a <forward_conv2d_if32of32wf32_nl_pool+0x2c6>
 801038e:	9241      	str	r2, [sp, #260]	@ 0x104
 8010390:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010394:	f002 fb00 	bl	8012998 <ai_array_get_byte_size>
 8010398:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801039c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801039e:	f8bc 3000 	ldrh.w	r3, [ip]
 80103a2:	902b      	str	r0, [sp, #172]	@ 0xac
 80103a4:	9321      	str	r3, [sp, #132]	@ 0x84
 80103a6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80103a8:	b2ad      	uxth	r5, r5
 80103aa:	b2b6      	uxth	r6, r6
 80103ac:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 80103ae:	f107 38ff 	add.w	r8, r7, #4294967295
 80103b2:	3d01      	subs	r5, #1
 80103b4:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 80103b6:	3e01      	subs	r6, #1
 80103b8:	fa1f f989 	uxth.w	r9, r9
 80103bc:	f8bd e09c 	ldrh.w	lr, [sp, #156]	@ 0x9c
 80103c0:	fb15 7508 	smlabb	r5, r5, r8, r7
 80103c4:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 80103c6:	699b      	ldr	r3, [r3, #24]
 80103c8:	fa0f f885 	sxth.w	r8, r5
 80103cc:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80103ce:	f8db 0018 	ldr.w	r0, [fp, #24]
 80103d2:	3d01      	subs	r5, #1
 80103d4:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80103d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80103da:	fb16 7605 	smlabb	r6, r6, r5, r7
 80103de:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 80103e0:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 80103e2:	2b03      	cmp	r3, #3
 80103e4:	eba5 0508 	sub.w	r5, r5, r8
 80103e8:	b236      	sxth	r6, r6
 80103ea:	f8da 1018 	ldr.w	r1, [sl, #24]
 80103ee:	fa15 f587 	uxtah	r5, r5, r7
 80103f2:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80103f4:	6992      	ldr	r2, [r2, #24]
 80103f6:	fa15 f587 	uxtah	r5, r5, r7
 80103fa:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 80103fc:	f8d4 a05c 	ldr.w	sl, [r4, #92]	@ 0x5c
 8010400:	6880      	ldr	r0, [r0, #8]
 8010402:	6889      	ldr	r1, [r1, #8]
 8010404:	6892      	ldr	r2, [r2, #8]
 8010406:	fb95 f5f9 	sdiv	r5, r5, r9
 801040a:	eba7 0906 	sub.w	r9, r7, r6
 801040e:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8010410:	f105 0501 	add.w	r5, r5, #1
 8010414:	fa19 f987 	uxtah	r9, r9, r7
 8010418:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
 801041a:	b22d      	sxth	r5, r5
 801041c:	fa19 f987 	uxtah	r9, r9, r7
 8010420:	fb99 f9fe 	sdiv	r9, r9, lr
 8010424:	f109 0e01 	add.w	lr, r9, #1
 8010428:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 801042c:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 8010430:	d94e      	bls.n	80104d0 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8010432:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8010436:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 801043a:	f1bc 0f00 	cmp.w	ip, #0
 801043e:	d06f      	beq.n	8010520 <forward_conv2d_if32of32wf32_nl_pool+0x2dc>
 8010440:	f8dc 7000 	ldr.w	r7, [ip]
 8010444:	b10f      	cbz	r7, 801044a <forward_conv2d_if32of32wf32_nl_pool+0x206>
 8010446:	69bf      	ldr	r7, [r7, #24]
 8010448:	68bf      	ldr	r7, [r7, #8]
 801044a:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 801044c:	9513      	str	r5, [sp, #76]	@ 0x4c
 801044e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010450:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 8010452:	960e      	str	r6, [sp, #56]	@ 0x38
 8010454:	931e      	str	r3, [sp, #120]	@ 0x78
 8010456:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8010458:	931d      	str	r3, [sp, #116]	@ 0x74
 801045a:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 801045c:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 8010460:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8010462:	fa0f f48e 	sxth.w	r4, lr
 8010466:	e9cd a319 	strd	sl, r3, [sp, #100]	@ 0x64
 801046a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801046c:	9318      	str	r3, [sp, #96]	@ 0x60
 801046e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8010470:	9317      	str	r3, [sp, #92]	@ 0x5c
 8010472:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010474:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
 8010478:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 801047a:	9312      	str	r3, [sp, #72]	@ 0x48
 801047c:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 801047e:	9311      	str	r3, [sp, #68]	@ 0x44
 8010480:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8010482:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 8010486:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8010488:	930d      	str	r3, [sp, #52]	@ 0x34
 801048a:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 801048c:	930c      	str	r3, [sp, #48]	@ 0x30
 801048e:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8010490:	9414      	str	r4, [sp, #80]	@ 0x50
 8010492:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010494:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8010496:	930a      	str	r3, [sp, #40]	@ 0x28
 8010498:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801049a:	9309      	str	r3, [sp, #36]	@ 0x24
 801049c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801049e:	9308      	str	r3, [sp, #32]
 80104a0:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80104a2:	9307      	str	r3, [sp, #28]
 80104a4:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80104a6:	9306      	str	r3, [sp, #24]
 80104a8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80104aa:	9305      	str	r3, [sp, #20]
 80104ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80104ae:	9304      	str	r3, [sp, #16]
 80104b0:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80104b2:	9303      	str	r3, [sp, #12]
 80104b4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80104b6:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80104ba:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80104be:	465b      	mov	r3, fp
 80104c0:	69a4      	ldr	r4, [r4, #24]
 80104c2:	68a4      	ldr	r4, [r4, #8]
 80104c4:	9400      	str	r4, [sp, #0]
 80104c6:	f000 f9cf 	bl	8010868 <forward_lite_conv2d_if32of32wf32_pool>
 80104ca:	b043      	add	sp, #268	@ 0x10c
 80104cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104d0:	2300      	movs	r3, #0
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	deff      	udf	#255	@ 0xff
 80104d6:	b10b      	cbz	r3, 80104dc <forward_conv2d_if32of32wf32_nl_pool+0x298>
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	9322      	str	r3, [sp, #136]	@ 0x88
 80104dc:	2301      	movs	r3, #1
 80104de:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 80104e2:	932b      	str	r3, [sp, #172]	@ 0xac
 80104e4:	e75f      	b.n	80103a6 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 80104e6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80104e8:	b10b      	cbz	r3, 80104ee <forward_conv2d_if32of32wf32_nl_pool+0x2aa>
 80104ea:	689b      	ldr	r3, [r3, #8]
 80104ec:	9322      	str	r3, [sp, #136]	@ 0x88
 80104ee:	2301      	movs	r3, #1
 80104f0:	2100      	movs	r1, #0
 80104f2:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
 80104f6:	e756      	b.n	80103a6 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	d90e      	bls.n	801051a <forward_conv2d_if32of32wf32_nl_pool+0x2d6>
 80104fc:	4642      	mov	r2, r8
 80104fe:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
 8010502:	e6d4      	b.n	80102ae <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 8010504:	2300      	movs	r3, #0
 8010506:	9340      	str	r3, [sp, #256]	@ 0x100
 8010508:	e6cf      	b.n	80102aa <forward_conv2d_if32of32wf32_nl_pool+0x66>
 801050a:	2301      	movs	r3, #1
 801050c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8010510:	932b      	str	r3, [sp, #172]	@ 0xac
 8010512:	f8bc 3000 	ldrh.w	r3, [ip]
 8010516:	9321      	str	r3, [sp, #132]	@ 0x84
 8010518:	e745      	b.n	80103a6 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 801051a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801051e:	deff      	udf	#255	@ 0xff
 8010520:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8010524:	deff      	udf	#255	@ 0xff
 8010526:	bf00      	nop

08010528 <forward_dense>:
 8010528:	6982      	ldr	r2, [r0, #24]
 801052a:	8813      	ldrh	r3, [r2, #0]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d043      	beq.n	80105b8 <forward_dense+0x90>
 8010530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010534:	6855      	ldr	r5, [r2, #4]
 8010536:	b08e      	sub	sp, #56	@ 0x38
 8010538:	6869      	ldr	r1, [r5, #4]
 801053a:	b101      	cbz	r1, 801053e <forward_dense+0x16>
 801053c:	6809      	ldr	r1, [r1, #0]
 801053e:	2b01      	cmp	r3, #1
 8010540:	d069      	beq.n	8010616 <forward_dense+0xee>
 8010542:	692a      	ldr	r2, [r5, #16]
 8010544:	b102      	cbz	r2, 8010548 <forward_dense+0x20>
 8010546:	6812      	ldr	r2, [r2, #0]
 8010548:	2b02      	cmp	r3, #2
 801054a:	d061      	beq.n	8010610 <forward_dense+0xe8>
 801054c:	69ec      	ldr	r4, [r5, #28]
 801054e:	2c00      	cmp	r4, #0
 8010550:	d057      	beq.n	8010602 <forward_dense+0xda>
 8010552:	8b2e      	ldrh	r6, [r5, #24]
 8010554:	6820      	ldr	r0, [r4, #0]
 8010556:	2e01      	cmp	r6, #1
 8010558:	d955      	bls.n	8010606 <forward_dense+0xde>
 801055a:	6864      	ldr	r4, [r4, #4]
 801055c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8010560:	2b03      	cmp	r3, #3
 8010562:	68d0      	ldr	r0, [r2, #12]
 8010564:	68cf      	ldr	r7, [r1, #12]
 8010566:	f8d0 e004 	ldr.w	lr, [r0, #4]
 801056a:	f8d7 a004 	ldr.w	sl, [r7, #4]
 801056e:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8010572:	f8d9 0000 	ldr.w	r0, [r9]
 8010576:	fb06 f807 	mul.w	r8, r6, r7
 801057a:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 801057e:	d044      	beq.n	801060a <forward_dense+0xe2>
 8010580:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 8010582:	b11d      	cbz	r5, 801058c <forward_dense+0x64>
 8010584:	682d      	ldr	r5, [r5, #0]
 8010586:	b10d      	cbz	r5, 801058c <forward_dense+0x64>
 8010588:	69ab      	ldr	r3, [r5, #24]
 801058a:	689d      	ldr	r5, [r3, #8]
 801058c:	6992      	ldr	r2, [r2, #24]
 801058e:	698b      	ldr	r3, [r1, #24]
 8010590:	6890      	ldr	r0, [r2, #8]
 8010592:	6899      	ldr	r1, [r3, #8]
 8010594:	b10c      	cbz	r4, 801059a <forward_dense+0x72>
 8010596:	69a3      	ldr	r3, [r4, #24]
 8010598:	689c      	ldr	r4, [r3, #8]
 801059a:	4b20      	ldr	r3, [pc, #128]	@ (801061c <forward_dense+0xf4>)
 801059c:	459c      	cmp	ip, r3
 801059e:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 80105a2:	d023      	beq.n	80105ec <forward_dense+0xc4>
 80105a4:	4e1e      	ldr	r6, [pc, #120]	@ (8010620 <forward_dense+0xf8>)
 80105a6:	45b4      	cmp	ip, r6
 80105a8:	d015      	beq.n	80105d6 <forward_dense+0xae>
 80105aa:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 80105ae:	459c      	cmp	ip, r3
 80105b0:	d004      	beq.n	80105bc <forward_dense+0x94>
 80105b2:	b00e      	add	sp, #56	@ 0x38
 80105b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	deff      	udf	#255	@ 0xff
 80105bc:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80105c0:	a807      	add	r0, sp, #28
 80105c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80105c4:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 80105c8:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 80105cc:	f001 fb98 	bl	8011d00 <forward_lite_dense_if32of32wf32>
 80105d0:	b00e      	add	sp, #56	@ 0x38
 80105d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105d6:	464b      	mov	r3, r9
 80105d8:	9500      	str	r5, [sp, #0]
 80105da:	e9cd e803 	strd	lr, r8, [sp, #12]
 80105de:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80105e2:	f001 fceb 	bl	8011fbc <forward_lite_dense_if32of32wf32_lut4>
 80105e6:	b00e      	add	sp, #56	@ 0x38
 80105e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105ec:	464b      	mov	r3, r9
 80105ee:	9500      	str	r5, [sp, #0]
 80105f0:	e9cd e803 	strd	lr, r8, [sp, #12]
 80105f4:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80105f8:	f001 fe0a 	bl	8012210 <forward_lite_dense_if32of32wf32_lut8>
 80105fc:	b00e      	add	sp, #56	@ 0x38
 80105fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010602:	4620      	mov	r0, r4
 8010604:	e7aa      	b.n	801055c <forward_dense+0x34>
 8010606:	2400      	movs	r4, #0
 8010608:	e7a8      	b.n	801055c <forward_dense+0x34>
 801060a:	2300      	movs	r3, #0
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	deff      	udf	#255	@ 0xff
 8010610:	2300      	movs	r3, #0
 8010612:	685b      	ldr	r3, [r3, #4]
 8010614:	deff      	udf	#255	@ 0xff
 8010616:	2300      	movs	r3, #0
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	deff      	udf	#255	@ 0xff
 801061c:	01d01040 	.word	0x01d01040
 8010620:	01e81040 	.word	0x01e81040

08010624 <forward_relu>:
 8010624:	6982      	ldr	r2, [r0, #24]
 8010626:	8813      	ldrh	r3, [r2, #0]
 8010628:	b323      	cbz	r3, 8010674 <forward_relu+0x50>
 801062a:	6851      	ldr	r1, [r2, #4]
 801062c:	684a      	ldr	r2, [r1, #4]
 801062e:	b102      	cbz	r2, 8010632 <forward_relu+0xe>
 8010630:	6812      	ldr	r2, [r2, #0]
 8010632:	2b01      	cmp	r3, #1
 8010634:	f000 8086 	beq.w	8010744 <forward_relu+0x120>
 8010638:	b470      	push	{r4, r5, r6}
 801063a:	690b      	ldr	r3, [r1, #16]
 801063c:	b103      	cbz	r3, 8010640 <forward_relu+0x1c>
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	69c6      	ldr	r6, [r0, #28]
 8010642:	b1ce      	cbz	r6, 8010678 <forward_relu+0x54>
 8010644:	6871      	ldr	r1, [r6, #4]
 8010646:	6998      	ldr	r0, [r3, #24]
 8010648:	2901      	cmp	r1, #1
 801064a:	d03f      	beq.n	80106cc <forward_relu+0xa8>
 801064c:	6893      	ldr	r3, [r2, #8]
 801064e:	6991      	ldr	r1, [r2, #24]
 8010650:	0a1b      	lsrs	r3, r3, #8
 8010652:	6880      	ldr	r0, [r0, #8]
 8010654:	6889      	ldr	r1, [r1, #8]
 8010656:	d06c      	beq.n	8010732 <forward_relu+0x10e>
 8010658:	68d5      	ldr	r5, [r2, #12]
 801065a:	2201      	movs	r2, #1
 801065c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010660:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8010664:	429d      	cmp	r5, r3
 8010666:	fb04 f202 	mul.w	r2, r4, r2
 801066a:	d1f9      	bne.n	8010660 <forward_relu+0x3c>
 801066c:	68b3      	ldr	r3, [r6, #8]
 801066e:	bc70      	pop	{r4, r5, r6}
 8010670:	f000 bd04 	b.w	801107c <forward_lite_nl_relu_generic_if32of32_kernel>
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	deff      	udf	#255	@ 0xff
 8010678:	6999      	ldr	r1, [r3, #24]
 801067a:	6893      	ldr	r3, [r2, #8]
 801067c:	6990      	ldr	r0, [r2, #24]
 801067e:	0a1b      	lsrs	r3, r3, #8
 8010680:	6889      	ldr	r1, [r1, #8]
 8010682:	6884      	ldr	r4, [r0, #8]
 8010684:	d057      	beq.n	8010736 <forward_relu+0x112>
 8010686:	68d5      	ldr	r5, [r2, #12]
 8010688:	2201      	movs	r2, #1
 801068a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801068e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8010692:	429d      	cmp	r5, r3
 8010694:	fb00 f202 	mul.w	r2, r0, r2
 8010698:	d1f9      	bne.n	801068e <forward_relu+0x6a>
 801069a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801069e:	4413      	add	r3, r2
 80106a0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80106a4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80106a8:	4294      	cmp	r4, r2
 80106aa:	d80d      	bhi.n	80106c8 <forward_relu+0xa4>
 80106ac:	3204      	adds	r2, #4
 80106ae:	3104      	adds	r1, #4
 80106b0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801074c <forward_relu+0x128>
 80106b4:	4613      	mov	r3, r2
 80106b6:	ed72 7a01 	vldmdb	r2!, {s15}
 80106ba:	3b08      	subs	r3, #8
 80106bc:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80106c0:	ed61 7a01 	vstmdb	r1!, {s15}
 80106c4:	429c      	cmp	r4, r3
 80106c6:	d9f5      	bls.n	80106b4 <forward_relu+0x90>
 80106c8:	bc70      	pop	{r4, r5, r6}
 80106ca:	4770      	bx	lr
 80106cc:	6993      	ldr	r3, [r2, #24]
 80106ce:	6880      	ldr	r0, [r0, #8]
 80106d0:	689c      	ldr	r4, [r3, #8]
 80106d2:	6893      	ldr	r3, [r2, #8]
 80106d4:	0a1b      	lsrs	r3, r3, #8
 80106d6:	d030      	beq.n	801073a <forward_relu+0x116>
 80106d8:	68d5      	ldr	r5, [r2, #12]
 80106da:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80106de:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80106e2:	429d      	cmp	r5, r3
 80106e4:	fb02 f101 	mul.w	r1, r2, r1
 80106e8:	d1f9      	bne.n	80106de <forward_relu+0xba>
 80106ea:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 80106ee:	68b3      	ldr	r3, [r6, #8]
 80106f0:	440a      	add	r2, r1
 80106f2:	ed93 7a00 	vldr	s14, [r3]
 80106f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80106fa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80106fe:	429c      	cmp	r4, r3
 8010700:	d8e2      	bhi.n	80106c8 <forward_relu+0xa4>
 8010702:	1d02      	adds	r2, r0, #4
 8010704:	3304      	adds	r3, #4
 8010706:	2000      	movs	r0, #0
 8010708:	ed53 7a01 	vldr	s15, [r3, #-4]
 801070c:	1f19      	subs	r1, r3, #4
 801070e:	3b08      	subs	r3, #8
 8010710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010718:	d405      	bmi.n	8010726 <forward_relu+0x102>
 801071a:	429c      	cmp	r4, r3
 801071c:	f842 0d04 	str.w	r0, [r2, #-4]!
 8010720:	d8d2      	bhi.n	80106c8 <forward_relu+0xa4>
 8010722:	460b      	mov	r3, r1
 8010724:	e7f0      	b.n	8010708 <forward_relu+0xe4>
 8010726:	429c      	cmp	r4, r3
 8010728:	ed62 7a01 	vstmdb	r2!, {s15}
 801072c:	d8cc      	bhi.n	80106c8 <forward_relu+0xa4>
 801072e:	460b      	mov	r3, r1
 8010730:	e7ea      	b.n	8010708 <forward_relu+0xe4>
 8010732:	2201      	movs	r2, #1
 8010734:	e79a      	b.n	801066c <forward_relu+0x48>
 8010736:	4622      	mov	r2, r4
 8010738:	e7b8      	b.n	80106ac <forward_relu+0x88>
 801073a:	68b2      	ldr	r2, [r6, #8]
 801073c:	4623      	mov	r3, r4
 801073e:	ed92 7a00 	vldr	s14, [r2]
 8010742:	e7de      	b.n	8010702 <forward_relu+0xde>
 8010744:	2300      	movs	r3, #0
 8010746:	685b      	ldr	r3, [r3, #4]
 8010748:	deff      	udf	#255	@ 0xff
 801074a:	bf00      	nop
 801074c:	00000000 	.word	0x00000000

08010750 <forward_upsample_bilinear>:
 8010750:	6983      	ldr	r3, [r0, #24]
 8010752:	881a      	ldrh	r2, [r3, #0]
 8010754:	2a00      	cmp	r2, #0
 8010756:	d04e      	beq.n	80107f6 <forward_upsample_bilinear+0xa6>
 8010758:	6859      	ldr	r1, [r3, #4]
 801075a:	4684      	mov	ip, r0
 801075c:	684b      	ldr	r3, [r1, #4]
 801075e:	b103      	cbz	r3, 8010762 <forward_upsample_bilinear+0x12>
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2a01      	cmp	r2, #1
 8010764:	d073      	beq.n	801084e <forward_upsample_bilinear+0xfe>
 8010766:	690a      	ldr	r2, [r1, #16]
 8010768:	2a00      	cmp	r2, #0
 801076a:	d073      	beq.n	8010854 <forward_upsample_bilinear+0x104>
 801076c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010770:	699c      	ldr	r4, [r3, #24]
 8010772:	b084      	sub	sp, #16
 8010774:	68d8      	ldr	r0, [r3, #12]
 8010776:	6821      	ldr	r1, [r4, #0]
 8010778:	6815      	ldr	r5, [r2, #0]
 801077a:	f8dc 3020 	ldr.w	r3, [ip, #32]
 801077e:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 8010782:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8010864 <forward_upsample_bilinear+0x114>
 8010786:	689b      	ldr	r3, [r3, #8]
 8010788:	68ee      	ldr	r6, [r5, #12]
 801078a:	4541      	cmp	r1, r8
 801078c:	edd3 0a00 	vldr	s1, [r3]
 8010790:	ed93 0a01 	vldr	s0, [r3, #4]
 8010794:	6882      	ldr	r2, [r0, #8]
 8010796:	68c3      	ldr	r3, [r0, #12]
 8010798:	f8d0 e004 	ldr.w	lr, [r0, #4]
 801079c:	e9d6 6702 	ldrd	r6, r7, [r6, #8]
 80107a0:	d047      	beq.n	8010832 <forward_upsample_bilinear+0xe2>
 80107a2:	dd13      	ble.n	80107cc <forward_upsample_bilinear+0x7c>
 80107a4:	482c      	ldr	r0, [pc, #176]	@ (8010858 <forward_upsample_bilinear+0x108>)
 80107a6:	4281      	cmp	r1, r0
 80107a8:	d035      	beq.n	8010816 <forward_upsample_bilinear+0xc6>
 80107aa:	482c      	ldr	r0, [pc, #176]	@ (801085c <forward_upsample_bilinear+0x10c>)
 80107ac:	4281      	cmp	r1, r0
 80107ae:	d10a      	bne.n	80107c6 <forward_upsample_bilinear+0x76>
 80107b0:	69a9      	ldr	r1, [r5, #24]
 80107b2:	68a0      	ldr	r0, [r4, #8]
 80107b4:	f89c 401d 	ldrb.w	r4, [ip, #29]
 80107b8:	6889      	ldr	r1, [r1, #8]
 80107ba:	e9cd e402 	strd	lr, r4, [sp, #8]
 80107be:	e9cd 6700 	strd	r6, r7, [sp]
 80107c2:	f000 fed9 	bl	8011578 <forward_lite_upsample_bilinear_if32of32>
 80107c6:	b004      	add	sp, #16
 80107c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107cc:	4824      	ldr	r0, [pc, #144]	@ (8010860 <forward_upsample_bilinear+0x110>)
 80107ce:	4281      	cmp	r1, r0
 80107d0:	d013      	beq.n	80107fa <forward_upsample_bilinear+0xaa>
 80107d2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80107d6:	4281      	cmp	r1, r0
 80107d8:	d1f5      	bne.n	80107c6 <forward_upsample_bilinear+0x76>
 80107da:	69a9      	ldr	r1, [r5, #24]
 80107dc:	68a0      	ldr	r0, [r4, #8]
 80107de:	f89c 401d 	ldrb.w	r4, [ip, #29]
 80107e2:	6889      	ldr	r1, [r1, #8]
 80107e4:	e9cd e402 	strd	lr, r4, [sp, #8]
 80107e8:	e9cd 6700 	strd	r6, r7, [sp]
 80107ec:	f001 f9c8 	bl	8011b80 <forward_lite_upsample_bilinear_iu16ou16>
 80107f0:	b004      	add	sp, #16
 80107f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107f6:	6853      	ldr	r3, [r2, #4]
 80107f8:	deff      	udf	#255	@ 0xff
 80107fa:	69a9      	ldr	r1, [r5, #24]
 80107fc:	68a0      	ldr	r0, [r4, #8]
 80107fe:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8010802:	6889      	ldr	r1, [r1, #8]
 8010804:	e9cd e402 	strd	lr, r4, [sp, #8]
 8010808:	e9cd 6700 	strd	r6, r7, [sp]
 801080c:	f001 f836 	bl	801187c <forward_lite_upsample_bilinear_iu8ou8>
 8010810:	b004      	add	sp, #16
 8010812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010816:	69a9      	ldr	r1, [r5, #24]
 8010818:	68a0      	ldr	r0, [r4, #8]
 801081a:	f89c 401d 	ldrb.w	r4, [ip, #29]
 801081e:	6889      	ldr	r1, [r1, #8]
 8010820:	e9cd e402 	strd	lr, r4, [sp, #8]
 8010824:	e9cd 6700 	strd	r6, r7, [sp]
 8010828:	f001 f8ea 	bl	8011a00 <forward_lite_upsample_bilinear_is16os16>
 801082c:	b004      	add	sp, #16
 801082e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010832:	69a9      	ldr	r1, [r5, #24]
 8010834:	68a0      	ldr	r0, [r4, #8]
 8010836:	f89c 401d 	ldrb.w	r4, [ip, #29]
 801083a:	6889      	ldr	r1, [r1, #8]
 801083c:	e9cd e402 	strd	lr, r4, [sp, #8]
 8010840:	e9cd 6700 	strd	r6, r7, [sp]
 8010844:	f000 ff58 	bl	80116f8 <forward_lite_upsample_bilinear_is8os8>
 8010848:	b004      	add	sp, #16
 801084a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801084e:	2300      	movs	r3, #0
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	deff      	udf	#255	@ 0xff
 8010854:	68d3      	ldr	r3, [r2, #12]
 8010856:	deff      	udf	#255	@ 0xff
 8010858:	00840840 	.word	0x00840840
 801085c:	01821040 	.word	0x01821040
 8010860:	00040440 	.word	0x00040440
 8010864:	00840440 	.word	0x00840440

08010868 <forward_lite_conv2d_if32of32wf32_pool>:
 8010868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801086c:	ed2d 8b0e 	vpush	{d8-d14}
 8010870:	b0c9      	sub	sp, #292	@ 0x124
 8010872:	4696      	mov	lr, r2
 8010874:	4680      	mov	r8, r0
 8010876:	f9bd 51cc 	ldrsh.w	r5, [sp, #460]	@ 0x1cc
 801087a:	9323      	str	r3, [sp, #140]	@ 0x8c
 801087c:	f9bd 31ec 	ldrsh.w	r3, [sp, #492]	@ 0x1ec
 8010880:	9138      	str	r1, [sp, #224]	@ 0xe0
 8010882:	9239      	str	r2, [sp, #228]	@ 0xe4
 8010884:	f9bd 118c 	ldrsh.w	r1, [sp, #396]	@ 0x18c
 8010888:	fb05 f203 	mul.w	r2, r5, r3
 801088c:	f9bd 419c 	ldrsh.w	r4, [sp, #412]	@ 0x19c
 8010890:	9129      	str	r1, [sp, #164]	@ 0xa4
 8010892:	460e      	mov	r6, r1
 8010894:	fb01 f202 	mul.w	r2, r1, r2
 8010898:	f9bd 1194 	ldrsh.w	r1, [sp, #404]	@ 0x194
 801089c:	f8bd c1b0 	ldrh.w	ip, [sp, #432]	@ 0x1b0
 80108a0:	9142      	str	r1, [sp, #264]	@ 0x108
 80108a2:	f9bd 11a0 	ldrsh.w	r1, [sp, #416]	@ 0x1a0
 80108a6:	f9bd 7190 	ldrsh.w	r7, [sp, #400]	@ 0x190
 80108aa:	932d      	str	r3, [sp, #180]	@ 0xb4
 80108ac:	942a      	str	r4, [sp, #168]	@ 0xa8
 80108ae:	f9bd 3198 	ldrsh.w	r3, [sp, #408]	@ 0x198
 80108b2:	f9bd 4188 	ldrsh.w	r4, [sp, #392]	@ 0x188
 80108b6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80108b8:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 80108bc:	f8bd 11a8 	ldrh.w	r1, [sp, #424]	@ 0x1a8
 80108c0:	f8bd c1b4 	ldrh.w	ip, [sp, #436]	@ 0x1b4
 80108c4:	9041      	str	r0, [sp, #260]	@ 0x104
 80108c6:	933a      	str	r3, [sp, #232]	@ 0xe8
 80108c8:	f8bd 01ac 	ldrh.w	r0, [sp, #428]	@ 0x1ac
 80108cc:	912b      	str	r1, [sp, #172]	@ 0xac
 80108ce:	f9bd 91a4 	ldrsh.w	r9, [sp, #420]	@ 0x1a4
 80108d2:	4243      	negs	r3, r0
 80108d4:	950f      	str	r5, [sp, #60]	@ 0x3c
 80108d6:	9418      	str	r4, [sp, #96]	@ 0x60
 80108d8:	9714      	str	r7, [sp, #80]	@ 0x50
 80108da:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
 80108de:	f9bd c1b8 	ldrsh.w	ip, [sp, #440]	@ 0x1b8
 80108e2:	931e      	str	r3, [sp, #120]	@ 0x78
 80108e4:	f8cd c10c 	str.w	ip, [sp, #268]	@ 0x10c
 80108e8:	f9bd c1e8 	ldrsh.w	ip, [sp, #488]	@ 0x1e8
 80108ec:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80108ee:	f8cd c110 	str.w	ip, [sp, #272]	@ 0x110
 80108f2:	f9bd c1f0 	ldrsh.w	ip, [sp, #496]	@ 0x1f0
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	f9bd 11d0 	ldrsh.w	r1, [sp, #464]	@ 0x1d0
 80108fc:	f8cd c114 	str.w	ip, [sp, #276]	@ 0x114
 8010900:	f9bd c1f4 	ldrsh.w	ip, [sp, #500]	@ 0x1f4
 8010904:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
 8010908:	f9bd c1f8 	ldrsh.w	ip, [sp, #504]	@ 0x1f8
 801090c:	f8cd c118 	str.w	ip, [sp, #280]	@ 0x118
 8010910:	f9bd c1fc 	ldrsh.w	ip, [sp, #508]	@ 0x1fc
 8010914:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 8010918:	f340 80a9 	ble.w	8010a6e <forward_lite_conv2d_if32of32wf32_pool+0x206>
 801091c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801091e:	3901      	subs	r1, #1
 8010920:	9020      	str	r0, [sp, #128]	@ 0x80
 8010922:	fb03 f309 	mul.w	r3, r3, r9
 8010926:	fa1f fc81 	uxth.w	ip, r1
 801092a:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 801092c:	fb04 f303 	mul.w	r3, r4, r3
 8010930:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 8010a78 <forward_lite_conv2d_if32of32wf32_pool+0x210>
 8010934:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 8010938:	0099      	lsls	r1, r3, #2
 801093a:	9124      	str	r1, [sp, #144]	@ 0x90
 801093c:	4631      	mov	r1, r6
 801093e:	b2b6      	uxth	r6, r6
 8010940:	fb00 f301 	mul.w	r3, r0, r1
 8010944:	9636      	str	r6, [sp, #216]	@ 0xd8
 8010946:	00a6      	lsls	r6, r4, #2
 8010948:	fb05 f303 	mul.w	r3, r5, r3
 801094c:	fb05 f501 	mul.w	r5, r5, r1
 8010950:	0098      	lsls	r0, r3, #2
 8010952:	9616      	str	r6, [sp, #88]	@ 0x58
 8010954:	953d      	str	r5, [sp, #244]	@ 0xf4
 8010956:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 801095a:	903e      	str	r0, [sp, #248]	@ 0xf8
 801095c:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 801095e:	953b      	str	r5, [sp, #236]	@ 0xec
 8010960:	1e43      	subs	r3, r0, #1
 8010962:	b29b      	uxth	r3, r3
 8010964:	3301      	adds	r3, #1
 8010966:	0098      	lsls	r0, r3, #2
 8010968:	9035      	str	r0, [sp, #212]	@ 0xd4
 801096a:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801096c:	fb00 f307 	mul.w	r3, r0, r7
 8010970:	fb04 f303 	mul.w	r3, r4, r3
 8010974:	0098      	lsls	r0, r3, #2
 8010976:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8010978:	9034      	str	r0, [sp, #208]	@ 0xd0
 801097a:	0090      	lsls	r0, r2, #2
 801097c:	fb01 f303 	mul.w	r3, r1, r3
 8010980:	0089      	lsls	r1, r1, #2
 8010982:	9032      	str	r0, [sp, #200]	@ 0xc8
 8010984:	9860      	ldr	r0, [sp, #384]	@ 0x180
 8010986:	9112      	str	r1, [sp, #72]	@ 0x48
 8010988:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801098c:	0098      	lsls	r0, r3, #2
 801098e:	fb07 f306 	mul.w	r3, r7, r6
 8010992:	921f      	str	r2, [sp, #124]	@ 0x7c
 8010994:	903c      	str	r0, [sp, #240]	@ 0xf0
 8010996:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8010998:	fb00 8703 	mla	r7, r0, r3, r8
 801099c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801099e:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 80109a0:	9722      	str	r7, [sp, #136]	@ 0x88
 80109a2:	425f      	negs	r7, r3
 80109a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80109a6:	4241      	negs	r1, r0
 80109a8:	9731      	str	r7, [sp, #196]	@ 0xc4
 80109aa:	fb03 f304 	mul.w	r3, r3, r4
 80109ae:	9125      	str	r1, [sp, #148]	@ 0x94
 80109b0:	009c      	lsls	r4, r3, #2
 80109b2:	fb06 f107 	mul.w	r1, r6, r7
 80109b6:	9417      	str	r4, [sp, #92]	@ 0x5c
 80109b8:	2400      	movs	r4, #0
 80109ba:	9137      	str	r1, [sp, #220]	@ 0xdc
 80109bc:	9960      	ldr	r1, [sp, #384]	@ 0x180
 80109be:	9427      	str	r4, [sp, #156]	@ 0x9c
 80109c0:	911b      	str	r1, [sp, #108]	@ 0x6c
 80109c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80109c4:	9428      	str	r4, [sp, #160]	@ 0xa0
 80109c6:	9333      	str	r3, [sp, #204]	@ 0xcc
 80109c8:	9b76      	ldr	r3, [sp, #472]	@ 0x1d8
 80109ca:	932f      	str	r3, [sp, #188]	@ 0xbc
 80109cc:	1e53      	subs	r3, r2, #1
 80109ce:	9347      	str	r3, [sp, #284]	@ 0x11c
 80109d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80109d2:	3301      	adds	r3, #1
 80109d4:	b21b      	sxth	r3, r3
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	dc68      	bgt.n	8010aac <forward_lite_conv2d_if32of32wf32_pool+0x244>
 80109da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80109dc:	041b      	lsls	r3, r3, #16
 80109de:	f100 81d5 	bmi.w	8010d8c <forward_lite_conv2d_if32of32wf32_pool+0x524>
 80109e2:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80109e4:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 80109e6:	42b2      	cmp	r2, r6
 80109e8:	dc48      	bgt.n	8010a7c <forward_lite_conv2d_if32of32wf32_pool+0x214>
 80109ea:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 80109ec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80109ee:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80109f0:	3301      	adds	r3, #1
 80109f2:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 80109f4:	4420      	add	r0, r4
 80109f6:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80109f8:	b21d      	sxth	r5, r3
 80109fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80109fc:	901e      	str	r0, [sp, #120]	@ 0x78
 80109fe:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 8010a00:	1b1b      	subs	r3, r3, r4
 8010a02:	9108      	str	r1, [sp, #32]
 8010a04:	4401      	add	r1, r0
 8010a06:	9320      	str	r3, [sp, #128]	@ 0x80
 8010a08:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010a0a:	9138      	str	r1, [sp, #224]	@ 0xe0
 8010a0c:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8010a0e:	9528      	str	r5, [sp, #160]	@ 0xa0
 8010a10:	440b      	add	r3, r1
 8010a12:	9322      	str	r3, [sp, #136]	@ 0x88
 8010a14:	b293      	uxth	r3, r2
 8010a16:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8010a18:	9301      	str	r3, [sp, #4]
 8010a1a:	1a9b      	subs	r3, r3, r2
 8010a1c:	b29a      	uxth	r2, r3
 8010a1e:	b2bb      	uxth	r3, r7
 8010a20:	1af1      	subs	r1, r6, r3
 8010a22:	9305      	str	r3, [sp, #20]
 8010a24:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
 8010a26:	b20b      	sxth	r3, r1
 8010a28:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8010a2c:	931d      	str	r3, [sp, #116]	@ 0x74
 8010a2e:	b2b3      	uxth	r3, r6
 8010a30:	9303      	str	r3, [sp, #12]
 8010a32:	2301      	movs	r3, #1
 8010a34:	9307      	str	r3, [sp, #28]
 8010a36:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	@ 0xe8
 8010a3a:	9306      	str	r3, [sp, #24]
 8010a3c:	f8bd 3114 	ldrh.w	r3, [sp, #276]	@ 0x114
 8010a40:	9304      	str	r3, [sp, #16]
 8010a42:	f8bd 3118 	ldrh.w	r3, [sp, #280]	@ 0x118
 8010a46:	9302      	str	r3, [sp, #8]
 8010a48:	f8bd 3110 	ldrh.w	r3, [sp, #272]	@ 0x110
 8010a4c:	9300      	str	r3, [sp, #0]
 8010a4e:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8010a50:	9860      	ldr	r0, [sp, #384]	@ 0x180
 8010a52:	9c79      	ldr	r4, [sp, #484]	@ 0x1e4
 8010a54:	47a0      	blx	r4
 8010a56:	1bf3      	subs	r3, r6, r7
 8010a58:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010a5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010a5e:	3a01      	subs	r2, #1
 8010a60:	b21b      	sxth	r3, r3
 8010a62:	b292      	uxth	r2, r2
 8010a64:	9333      	str	r3, [sp, #204]	@ 0xcc
 8010a66:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8010a68:	9221      	str	r2, [sp, #132]	@ 0x84
 8010a6a:	42ab      	cmp	r3, r5
 8010a6c:	dcb0      	bgt.n	80109d0 <forward_lite_conv2d_if32of32wf32_pool+0x168>
 8010a6e:	b049      	add	sp, #292	@ 0x124
 8010a70:	ecbd 8b0e 	vpop	{d8-d14}
 8010a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a78:	00000000 	.word	0x00000000
 8010a7c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8010a7e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8010a80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010a82:	440a      	add	r2, r1
 8010a84:	3b01      	subs	r3, #1
 8010a86:	921e      	str	r2, [sp, #120]	@ 0x78
 8010a88:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010a8a:	b29b      	uxth	r3, r3
 8010a8c:	1a52      	subs	r2, r2, r1
 8010a8e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8010a90:	9321      	str	r3, [sp, #132]	@ 0x84
 8010a92:	9220      	str	r2, [sp, #128]	@ 0x80
 8010a94:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010a96:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8010a98:	440a      	add	r2, r1
 8010a9a:	9222      	str	r2, [sp, #136]	@ 0x88
 8010a9c:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	dde5      	ble.n	8010a6e <forward_lite_conv2d_if32of32wf32_pool+0x206>
 8010aa2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	b21b      	sxth	r3, r3
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	dd96      	ble.n	80109da <forward_lite_conv2d_if32of32wf32_pool+0x172>
 8010aac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	f2c0 82d1 	blt.w	8011056 <forward_lite_conv2d_if32of32wf32_pool+0x7ee>
 8010ab4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010ab6:	931c      	str	r3, [sp, #112]	@ 0x70
 8010ab8:	2300      	movs	r3, #0
 8010aba:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8010abc:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 8010abe:	440a      	add	r2, r1
 8010ac0:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8010ac2:	428a      	cmp	r2, r1
 8010ac4:	bfd4      	ite	le
 8010ac6:	ebc3 0b02 	rsble	fp, r3, r2
 8010aca:	ebc3 0b01 	rsbgt	fp, r3, r1
 8010ace:	9a61      	ldr	r2, [sp, #388]	@ 0x184
 8010ad0:	2a00      	cmp	r2, #0
 8010ad2:	f000 819d 	beq.w	8010e10 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 8010ad6:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8010ad8:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8010adc:	f0c0 8198 	bcc.w	8010e10 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 8010ae0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8010ae2:	2a00      	cmp	r2, #0
 8010ae4:	f340 8115 	ble.w	8010d12 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8010ae8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010aea:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8010aec:	fb02 f303 	mul.w	r3, r2, r3
 8010af0:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8010af2:	9319      	str	r3, [sp, #100]	@ 0x64
 8010af4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010af6:	189a      	adds	r2, r3, r2
 8010af8:	9326      	str	r3, [sp, #152]	@ 0x98
 8010afa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010afc:	923f      	str	r2, [sp, #252]	@ 0xfc
 8010afe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010b00:	9330      	str	r3, [sp, #192]	@ 0xc0
 8010b02:	440a      	add	r2, r1
 8010b04:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8010b06:	9240      	str	r2, [sp, #256]	@ 0x100
 8010b08:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010b0c:	9961      	ldr	r1, [sp, #388]	@ 0x184
 8010b0e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8010b10:	f001 fe4a 	bl	80127a8 <st_int8_copy>
 8010b14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	f000 8135 	beq.w	8010d86 <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 8010b1c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8010b1e:	ecf3 1a01 	vldmia	r3!, {s3}
 8010b22:	9330      	str	r3, [sp, #192]	@ 0xc0
 8010b24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	f000 80e8 	beq.w	8010cfc <forward_lite_conv2d_if32of32wf32_pool+0x494>
 8010b2c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8010b2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010b30:	189a      	adds	r2, r3, r2
 8010b32:	920c      	str	r2, [sp, #48]	@ 0x30
 8010b34:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8010b36:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 8010b3a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8010b3c:	9310      	str	r3, [sp, #64]	@ 0x40
 8010b3e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8010b40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b42:	2300      	movs	r3, #0
 8010b44:	9311      	str	r3, [sp, #68]	@ 0x44
 8010b46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	f2c0 8113 	blt.w	8010d74 <forward_lite_conv2d_if32of32wf32_pool+0x50c>
 8010b4e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010b50:	2600      	movs	r6, #0
 8010b52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010b54:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010b56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b58:	9c61      	ldr	r4, [sp, #388]	@ 0x184
 8010b5a:	4298      	cmp	r0, r3
 8010b5c:	bf94      	ite	ls
 8010b5e:	ebc6 0600 	rsbls	r6, r6, r0
 8010b62:	ebc6 0603 	rsbhi	r6, r6, r3
 8010b66:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010b68:	f1bb 0f00 	cmp.w	fp, #0
 8010b6c:	eba0 0906 	sub.w	r9, r0, r6
 8010b70:	fb02 4203 	mla	r2, r2, r3, r4
 8010b74:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8010b76:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8010b78:	eba4 0a06 	sub.w	sl, r4, r6
 8010b7c:	fb00 f606 	mul.w	r6, r0, r6
 8010b80:	f340 80fe 	ble.w	8010d80 <forward_lite_conv2d_if32of32wf32_pool+0x518>
 8010b84:	f026 070f 	bic.w	r7, r6, #15
 8010b88:	eeb0 7a61 	vmov.f32	s14, s3
 8010b8c:	fb0a fa03 	mul.w	sl, sl, r3
 8010b90:	f04f 0c00 	mov.w	ip, #0
 8010b94:	f107 38ff 	add.w	r8, r7, #4294967295
 8010b98:	fb09 f903 	mul.w	r9, r9, r3
 8010b9c:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8010ba0:	f108 0801 	add.w	r8, r8, #1
 8010ba4:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8010ba8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8010bac:	2f00      	cmp	r7, #0
 8010bae:	f340 80df 	ble.w	8010d70 <forward_lite_conv2d_if32of32wf32_pool+0x508>
 8010bb2:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 8010bb6:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8010bba:	2400      	movs	r4, #0
 8010bbc:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8010bc0:	3410      	adds	r4, #16
 8010bc2:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 8010bc6:	3340      	adds	r3, #64	@ 0x40
 8010bc8:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 8010bcc:	42bc      	cmp	r4, r7
 8010bce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010bd2:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8010bd6:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 8010bda:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 8010bde:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8010be2:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010be6:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8010bea:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 8010bee:	ed50 da1c 	vldr	s27, [r0, #-112]	@ 0xffffff90
 8010bf2:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 8010bf6:	ed50 ca1b 	vldr	s25, [r0, #-108]	@ 0xffffff94
 8010bfa:	ed13 ca1b 	vldr	s24, [r3, #-108]	@ 0xffffff94
 8010bfe:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010c02:	ed50 ba1a 	vldr	s23, [r0, #-104]	@ 0xffffff98
 8010c06:	ed13 ba1a 	vldr	s22, [r3, #-104]	@ 0xffffff98
 8010c0a:	ed50 aa19 	vldr	s21, [r0, #-100]	@ 0xffffff9c
 8010c0e:	ed13 aa19 	vldr	s20, [r3, #-100]	@ 0xffffff9c
 8010c12:	ed50 9a18 	vldr	s19, [r0, #-96]	@ 0xffffffa0
 8010c16:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 8010c1a:	eeee 7a26 	vfma.f32	s15, s28, s13
 8010c1e:	ed50 8a17 	vldr	s17, [r0, #-92]	@ 0xffffffa4
 8010c22:	ed13 0a17 	vldr	s0, [r3, #-92]	@ 0xffffffa4
 8010c26:	ed50 0a16 	vldr	s1, [r0, #-88]	@ 0xffffffa8
 8010c2a:	ed13 1a16 	vldr	s2, [r3, #-88]	@ 0xffffffa8
 8010c2e:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 8010c32:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8010c36:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8010c3a:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8010c3e:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8010c42:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 8010c46:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8010c4a:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 8010c4e:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8010c52:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8010c56:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 8010c5a:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8010c5e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8010c62:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8010c66:	eee9 7a89 	vfma.f32	s15, s19, s18
 8010c6a:	eee8 7a80 	vfma.f32	s15, s17, s0
 8010c6e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8010c72:	eee2 7a22 	vfma.f32	s15, s4, s5
 8010c76:	eee3 7a23 	vfma.f32	s15, s6, s7
 8010c7a:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010c7e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010c82:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010c86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010c8a:	db97      	blt.n	8010bbc <forward_lite_conv2d_if32of32wf32_pool+0x354>
 8010c8c:	4471      	add	r1, lr
 8010c8e:	4472      	add	r2, lr
 8010c90:	4645      	mov	r5, r8
 8010c92:	42ae      	cmp	r6, r5
 8010c94:	dd10      	ble.n	8010cb8 <forward_lite_conv2d_if32of32wf32_pool+0x450>
 8010c96:	462b      	mov	r3, r5
 8010c98:	460c      	mov	r4, r1
 8010c9a:	4610      	mov	r0, r2
 8010c9c:	3301      	adds	r3, #1
 8010c9e:	ecf0 6a01 	vldmia	r0!, {s13}
 8010ca2:	ecf4 7a01 	vldmia	r4!, {s15}
 8010ca6:	429e      	cmp	r6, r3
 8010ca8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010cac:	d1f6      	bne.n	8010c9c <forward_lite_conv2d_if32of32wf32_pool+0x434>
 8010cae:	1b75      	subs	r5, r6, r5
 8010cb0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8010cb4:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8010cb8:	f10c 0c01 	add.w	ip, ip, #1
 8010cbc:	4451      	add	r1, sl
 8010cbe:	444a      	add	r2, r9
 8010cc0:	45e3      	cmp	fp, ip
 8010cc2:	f47f af73 	bne.w	8010bac <forward_lite_conv2d_if32of32wf32_pool+0x344>
 8010cc6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010cc8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010cca:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010ccc:	4410      	add	r0, r2
 8010cce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010cd0:	ed81 7a00 	vstr	s14, [r1]
 8010cd4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010cd6:	3301      	adds	r3, #1
 8010cd8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010cda:	9311      	str	r3, [sp, #68]	@ 0x44
 8010cdc:	4401      	add	r1, r0
 8010cde:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8010ce0:	9110      	str	r1, [sp, #64]	@ 0x40
 8010ce2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010ce4:	1a89      	subs	r1, r1, r2
 8010ce6:	910e      	str	r1, [sp, #56]	@ 0x38
 8010ce8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010cea:	4401      	add	r1, r0
 8010cec:	910d      	str	r1, [sp, #52]	@ 0x34
 8010cee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010cf0:	1a8a      	subs	r2, r1, r2
 8010cf2:	920c      	str	r2, [sp, #48]	@ 0x30
 8010cf4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	f47f af25 	bne.w	8010b46 <forward_lite_conv2d_if32of32wf32_pool+0x2de>
 8010cfc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010cfe:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8010d00:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8010d02:	440a      	add	r2, r1
 8010d04:	3304      	adds	r3, #4
 8010d06:	921a      	str	r2, [sp, #104]	@ 0x68
 8010d08:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8010d0a:	9326      	str	r3, [sp, #152]	@ 0x98
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	f47f aefc 	bne.w	8010b0a <forward_lite_conv2d_if32of32wf32_pool+0x2a2>
 8010d12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	dd26      	ble.n	8010d66 <forward_lite_conv2d_if32of32wf32_pool+0x4fe>
 8010d18:	9b75      	ldr	r3, [sp, #468]	@ 0x1d4
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	f000 819f 	beq.w	801105e <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 8010d20:	4699      	mov	r9, r3
 8010d22:	2400      	movs	r4, #0
 8010d24:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 8010d26:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 8010d2a:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8010d2c:	f8dd b1e0 	ldr.w	fp, [sp, #480]	@ 0x1e0
 8010d30:	e9dd 6a76 	ldrd	r6, sl, [sp, #472]	@ 0x1d8
 8010d34:	462b      	mov	r3, r5
 8010d36:	4455      	add	r5, sl
 8010d38:	463a      	mov	r2, r7
 8010d3a:	4641      	mov	r1, r8
 8010d3c:	4640      	mov	r0, r8
 8010d3e:	3401      	adds	r4, #1
 8010d40:	47c8      	blx	r9
 8010d42:	1bab      	subs	r3, r5, r6
 8010d44:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010d46:	b224      	sxth	r4, r4
 8010d48:	455b      	cmp	r3, fp
 8010d4a:	bfa8      	it	ge
 8010d4c:	4635      	movge	r5, r6
 8010d4e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010d50:	4490      	add	r8, r2
 8010d52:	4543      	cmp	r3, r8
 8010d54:	d801      	bhi.n	8010d5a <forward_lite_conv2d_if32of32wf32_pool+0x4f2>
 8010d56:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8010d58:	4498      	add	r8, r3
 8010d5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d5c:	42a3      	cmp	r3, r4
 8010d5e:	d1e9      	bne.n	8010d34 <forward_lite_conv2d_if32of32wf32_pool+0x4cc>
 8010d60:	952f      	str	r5, [sp, #188]	@ 0xbc
 8010d62:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
 8010d66:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010d68:	3301      	adds	r3, #1
 8010d6a:	b21b      	sxth	r3, r3
 8010d6c:	931d      	str	r3, [sp, #116]	@ 0x74
 8010d6e:	e638      	b.n	80109e2 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8010d70:	2500      	movs	r5, #0
 8010d72:	e78e      	b.n	8010c92 <forward_lite_conv2d_if32of32wf32_pool+0x42a>
 8010d74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010d78:	4616      	mov	r6, r2
 8010d7a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8010d7c:	189a      	adds	r2, r3, r2
 8010d7e:	e6e9      	b.n	8010b54 <forward_lite_conv2d_if32of32wf32_pool+0x2ec>
 8010d80:	eeb0 7a61 	vmov.f32	s14, s3
 8010d84:	e79f      	b.n	8010cc6 <forward_lite_conv2d_if32of32wf32_pool+0x45e>
 8010d86:	eef0 1a48 	vmov.f32	s3, s16
 8010d8a:	e6cb      	b.n	8010b24 <forward_lite_conv2d_if32of32wf32_pool+0x2bc>
 8010d8c:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 8010d8e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010d90:	fb02 f303 	mul.w	r3, r2, r3
 8010d94:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010d96:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 8010d9a:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d901      	bls.n	8010da4 <forward_lite_conv2d_if32of32wf32_pool+0x53c>
 8010da0:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8010da2:	4413      	add	r3, r2
 8010da4:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d217      	bcs.n	8010dda <forward_lite_conv2d_if32of32wf32_pool+0x572>
 8010daa:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8010dac:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8010dae:	428a      	cmp	r2, r1
 8010db0:	d013      	beq.n	8010dda <forward_lite_conv2d_if32of32wf32_pool+0x572>
 8010db2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d910      	bls.n	8010dda <forward_lite_conv2d_if32of32wf32_pool+0x572>
 8010db8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8010dba:	461a      	mov	r2, r3
 8010dbc:	f852 0b04 	ldr.w	r0, [r2], #4
 8010dc0:	f841 0b04 	str.w	r0, [r1], #4
 8010dc4:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8010dc6:	4290      	cmp	r0, r2
 8010dc8:	d8f8      	bhi.n	8010dbc <forward_lite_conv2d_if32of32wf32_pool+0x554>
 8010dca:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8010dcc:	1ad3      	subs	r3, r2, r3
 8010dce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010dd0:	f023 0303 	bic.w	r3, r3, #3
 8010dd4:	3304      	adds	r3, #4
 8010dd6:	441a      	add	r2, r3
 8010dd8:	921b      	str	r2, [sp, #108]	@ 0x6c
 8010dda:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8010ddc:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8010dde:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 8010de2:	440a      	add	r2, r1
 8010de4:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 8010de6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8010de8:	1ad2      	subs	r2, r2, r3
 8010dea:	4401      	add	r1, r0
 8010dec:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8010dee:	b212      	sxth	r2, r2
 8010df0:	4403      	add	r3, r0
 8010df2:	911b      	str	r1, [sp, #108]	@ 0x6c
 8010df4:	9227      	str	r2, [sp, #156]	@ 0x9c
 8010df6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8010df8:	b21b      	sxth	r3, r3
 8010dfa:	428a      	cmp	r2, r1
 8010dfc:	931d      	str	r3, [sp, #116]	@ 0x74
 8010dfe:	460b      	mov	r3, r1
 8010e00:	f63f adef 	bhi.w	80109e2 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8010e04:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8010e06:	440b      	add	r3, r1
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d9fc      	bls.n	8010e06 <forward_lite_conv2d_if32of32wf32_pool+0x59e>
 8010e0c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010e0e:	e5e8      	b.n	80109e2 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8010e10:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8010e12:	2a00      	cmp	r2, #0
 8010e14:	f77f af7d 	ble.w	8010d12 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8010e18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010e1a:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8010e1c:	fb02 f303 	mul.w	r3, r2, r3
 8010e20:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8010e22:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e24:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010e26:	189a      	adds	r2, r3, r2
 8010e28:	9326      	str	r3, [sp, #152]	@ 0x98
 8010e2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010e2c:	923f      	str	r2, [sp, #252]	@ 0xfc
 8010e2e:	9330      	str	r3, [sp, #192]	@ 0xc0
 8010e30:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010e32:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8010e34:	440a      	add	r2, r1
 8010e36:	9319      	str	r3, [sp, #100]	@ 0x64
 8010e38:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010e3a:	9240      	str	r2, [sp, #256]	@ 0x100
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	f000 80fc 	beq.w	801103a <forward_lite_conv2d_if32of32wf32_pool+0x7d2>
 8010e42:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8010e44:	ecf3 1a01 	vldmia	r3!, {s3}
 8010e48:	9330      	str	r3, [sp, #192]	@ 0xc0
 8010e4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	f000 80e5 	beq.w	801101c <forward_lite_conv2d_if32of32wf32_pool+0x7b4>
 8010e52:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8010e54:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010e56:	189a      	adds	r2, r3, r2
 8010e58:	920c      	str	r2, [sp, #48]	@ 0x30
 8010e5a:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8010e5c:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 8010e60:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8010e62:	9310      	str	r3, [sp, #64]	@ 0x40
 8010e64:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8010e66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e68:	2300      	movs	r3, #0
 8010e6a:	9311      	str	r3, [sp, #68]	@ 0x44
 8010e6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	f2c0 80e8 	blt.w	8011044 <forward_lite_conv2d_if32of32wf32_pool+0x7dc>
 8010e74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010e76:	2000      	movs	r0, #0
 8010e78:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010e7a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8010e7c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010e7e:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010e80:	428c      	cmp	r4, r1
 8010e82:	bf94      	ite	ls
 8010e84:	ebc0 0004 	rsbls	r0, r0, r4
 8010e88:	ebc0 0001 	rsbhi	r0, r0, r1
 8010e8c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8010e8e:	f1bb 0f00 	cmp.w	fp, #0
 8010e92:	eba4 0900 	sub.w	r9, r4, r0
 8010e96:	fb03 5301 	mla	r3, r3, r1, r5
 8010e9a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8010e9c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010e9e:	eba5 0a00 	sub.w	sl, r5, r0
 8010ea2:	fb04 f000 	mul.w	r0, r4, r0
 8010ea6:	f340 80d3 	ble.w	8011050 <forward_lite_conv2d_if32of32wf32_pool+0x7e8>
 8010eaa:	f020 080f 	bic.w	r8, r0, #15
 8010eae:	eeb0 7a61 	vmov.f32	s14, s3
 8010eb2:	fb0a fa01 	mul.w	sl, sl, r1
 8010eb6:	2400      	movs	r4, #0
 8010eb8:	f108 37ff 	add.w	r7, r8, #4294967295
 8010ebc:	fb09 f901 	mul.w	r9, r9, r1
 8010ec0:	093f      	lsrs	r7, r7, #4
 8010ec2:	3701      	adds	r7, #1
 8010ec4:	01be      	lsls	r6, r7, #6
 8010ec6:	013f      	lsls	r7, r7, #4
 8010ec8:	f1b8 0f00 	cmp.w	r8, #0
 8010ecc:	f340 80b8 	ble.w	8011040 <forward_lite_conv2d_if32of32wf32_pool+0x7d8>
 8010ed0:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 8010ed4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8010ed8:	f04f 0c00 	mov.w	ip, #0
 8010edc:	ed51 6a0f 	vldr	s13, [r1, #-60]	@ 0xffffffc4
 8010ee0:	f10c 0c10 	add.w	ip, ip, #16
 8010ee4:	ed55 7a0f 	vldr	s15, [r5, #-60]	@ 0xffffffc4
 8010ee8:	3140      	adds	r1, #64	@ 0x40
 8010eea:	ed55 4a10 	vldr	s9, [r5, #-64]	@ 0xffffffc0
 8010eee:	45c4      	cmp	ip, r8
 8010ef0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010ef4:	ed11 5a20 	vldr	s10, [r1, #-128]	@ 0xffffff80
 8010ef8:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 8010efc:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 8010f00:	ed11 6a1e 	vldr	s12, [r1, #-120]	@ 0xffffff88
 8010f04:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010f08:	ed51 6a1d 	vldr	s13, [r1, #-116]	@ 0xffffff8c
 8010f0c:	ed15 ea1d 	vldr	s28, [r5, #-116]	@ 0xffffff8c
 8010f10:	ed55 da1c 	vldr	s27, [r5, #-112]	@ 0xffffff90
 8010f14:	ed11 da1c 	vldr	s26, [r1, #-112]	@ 0xffffff90
 8010f18:	ed55 ca1b 	vldr	s25, [r5, #-108]	@ 0xffffff94
 8010f1c:	ed11 ca1b 	vldr	s24, [r1, #-108]	@ 0xffffff94
 8010f20:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010f24:	ed55 ba1a 	vldr	s23, [r5, #-104]	@ 0xffffff98
 8010f28:	ed11 ba1a 	vldr	s22, [r1, #-104]	@ 0xffffff98
 8010f2c:	ed55 aa19 	vldr	s21, [r5, #-100]	@ 0xffffff9c
 8010f30:	ed11 aa19 	vldr	s20, [r1, #-100]	@ 0xffffff9c
 8010f34:	ed55 9a18 	vldr	s19, [r5, #-96]	@ 0xffffffa0
 8010f38:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 8010f3c:	eeee 7a26 	vfma.f32	s15, s28, s13
 8010f40:	ed55 8a17 	vldr	s17, [r5, #-92]	@ 0xffffffa4
 8010f44:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 8010f48:	ed55 0a16 	vldr	s1, [r5, #-88]	@ 0xffffffa8
 8010f4c:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 8010f50:	ed15 2a15 	vldr	s4, [r5, #-84]	@ 0xffffffac
 8010f54:	ed51 2a15 	vldr	s5, [r1, #-84]	@ 0xffffffac
 8010f58:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8010f5c:	ed15 3a14 	vldr	s6, [r5, #-80]	@ 0xffffffb0
 8010f60:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 8010f64:	ed15 4a13 	vldr	s8, [r5, #-76]	@ 0xffffffb4
 8010f68:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 8010f6c:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 8010f70:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 8010f74:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8010f78:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 8010f7c:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 8010f80:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8010f84:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8010f88:	eee9 7a89 	vfma.f32	s15, s19, s18
 8010f8c:	eee8 7a80 	vfma.f32	s15, s17, s0
 8010f90:	eee0 7a81 	vfma.f32	s15, s1, s2
 8010f94:	eee2 7a22 	vfma.f32	s15, s4, s5
 8010f98:	eee3 7a23 	vfma.f32	s15, s6, s7
 8010f9c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010fa0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010fa4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010fa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010fac:	db96      	blt.n	8010edc <forward_lite_conv2d_if32of32wf32_pool+0x674>
 8010fae:	4432      	add	r2, r6
 8010fb0:	4433      	add	r3, r6
 8010fb2:	4639      	mov	r1, r7
 8010fb4:	4288      	cmp	r0, r1
 8010fb6:	dd10      	ble.n	8010fda <forward_lite_conv2d_if32of32wf32_pool+0x772>
 8010fb8:	460d      	mov	r5, r1
 8010fba:	4696      	mov	lr, r2
 8010fbc:	469c      	mov	ip, r3
 8010fbe:	3501      	adds	r5, #1
 8010fc0:	ecfc 6a01 	vldmia	ip!, {s13}
 8010fc4:	ecfe 7a01 	vldmia	lr!, {s15}
 8010fc8:	42a8      	cmp	r0, r5
 8010fca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010fce:	d1f6      	bne.n	8010fbe <forward_lite_conv2d_if32of32wf32_pool+0x756>
 8010fd0:	1a41      	subs	r1, r0, r1
 8010fd2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8010fd6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010fda:	3401      	adds	r4, #1
 8010fdc:	4452      	add	r2, sl
 8010fde:	444b      	add	r3, r9
 8010fe0:	45a3      	cmp	fp, r4
 8010fe2:	f47f af71 	bne.w	8010ec8 <forward_lite_conv2d_if32of32wf32_pool+0x660>
 8010fe6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010fe8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010fea:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010fec:	4410      	add	r0, r2
 8010fee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010ff0:	ed81 7a00 	vstr	s14, [r1]
 8010ff4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010ff6:	3301      	adds	r3, #1
 8010ff8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010ffa:	9311      	str	r3, [sp, #68]	@ 0x44
 8010ffc:	4401      	add	r1, r0
 8010ffe:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8011000:	9110      	str	r1, [sp, #64]	@ 0x40
 8011002:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011004:	1a89      	subs	r1, r1, r2
 8011006:	910e      	str	r1, [sp, #56]	@ 0x38
 8011008:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801100a:	4401      	add	r1, r0
 801100c:	910d      	str	r1, [sp, #52]	@ 0x34
 801100e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011010:	1a8a      	subs	r2, r1, r2
 8011012:	920c      	str	r2, [sp, #48]	@ 0x30
 8011014:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011016:	429a      	cmp	r2, r3
 8011018:	f47f af28 	bne.w	8010e6c <forward_lite_conv2d_if32of32wf32_pool+0x604>
 801101c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801101e:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8011020:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011022:	440a      	add	r2, r1
 8011024:	3304      	adds	r3, #4
 8011026:	9219      	str	r2, [sp, #100]	@ 0x64
 8011028:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801102a:	9326      	str	r3, [sp, #152]	@ 0x98
 801102c:	4293      	cmp	r3, r2
 801102e:	f43f ae70 	beq.w	8010d12 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8011032:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011034:	2b00      	cmp	r3, #0
 8011036:	f47f af04 	bne.w	8010e42 <forward_lite_conv2d_if32of32wf32_pool+0x5da>
 801103a:	eef0 1a48 	vmov.f32	s3, s16
 801103e:	e704      	b.n	8010e4a <forward_lite_conv2d_if32of32wf32_pool+0x5e2>
 8011040:	2100      	movs	r1, #0
 8011042:	e7b7      	b.n	8010fb4 <forward_lite_conv2d_if32of32wf32_pool+0x74c>
 8011044:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011046:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011048:	4610      	mov	r0, r2
 801104a:	4413      	add	r3, r2
 801104c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801104e:	e714      	b.n	8010e7a <forward_lite_conv2d_if32of32wf32_pool+0x612>
 8011050:	eeb0 7a61 	vmov.f32	s14, s3
 8011054:	e7c7      	b.n	8010fe6 <forward_lite_conv2d_if32of32wf32_pool+0x77e>
 8011056:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011058:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801105a:	921c      	str	r2, [sp, #112]	@ 0x70
 801105c:	e52d      	b.n	8010aba <forward_lite_conv2d_if32of32wf32_pool+0x252>
 801105e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011060:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011062:	3301      	adds	r3, #1
 8011064:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8011066:	440a      	add	r2, r1
 8011068:	b219      	sxth	r1, r3
 801106a:	4290      	cmp	r0, r2
 801106c:	d801      	bhi.n	8011072 <forward_lite_conv2d_if32of32wf32_pool+0x80a>
 801106e:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8011070:	4402      	add	r2, r0
 8011072:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8011074:	4281      	cmp	r1, r0
 8011076:	dbf3      	blt.n	8011060 <forward_lite_conv2d_if32of32wf32_pool+0x7f8>
 8011078:	921b      	str	r2, [sp, #108]	@ 0x6c
 801107a:	e674      	b.n	8010d66 <forward_lite_conv2d_if32of32wf32_pool+0x4fe>

0801107c <forward_lite_nl_relu_generic_if32of32_kernel>:
 801107c:	edd3 6a02 	vldr	s13, [r3, #8]
 8011080:	ed93 7a00 	vldr	s14, [r3]
 8011084:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8011088:	ed93 6a01 	vldr	s12, [r3, #4]
 801108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011090:	d42b      	bmi.n	80110ea <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8011092:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011096:	4413      	add	r3, r2
 8011098:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 801109c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80110a0:	4291      	cmp	r1, r2
 80110a2:	d821      	bhi.n	80110e8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80110a4:	f10c 0104 	add.w	r1, ip, #4
 80110a8:	1d13      	adds	r3, r2, #4
 80110aa:	eba2 020c 	sub.w	r2, r2, ip
 80110ae:	4408      	add	r0, r1
 80110b0:	e00c      	b.n	80110cc <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80110b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80110b6:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80110ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110be:	db01      	blt.n	80110c4 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 80110c0:	ee65 7a86 	vmul.f32	s15, s11, s12
 80110c4:	4293      	cmp	r3, r2
 80110c6:	ed60 7a01 	vstmdb	r0!, {s15}
 80110ca:	d00c      	beq.n	80110e6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 80110cc:	ed73 7a01 	vldmdb	r3!, {s15}
 80110d0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80110d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110d8:	daeb      	bge.n	80110b2 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 80110da:	eef0 7a66 	vmov.f32	s15, s13
 80110de:	4293      	cmp	r3, r2
 80110e0:	ed60 7a01 	vstmdb	r0!, {s15}
 80110e4:	d1f2      	bne.n	80110cc <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80110e6:	4770      	bx	lr
 80110e8:	4770      	bx	lr
 80110ea:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80110ee:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80110f2:	4413      	add	r3, r2
 80110f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110f8:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 80110fc:	b500      	push	{lr}
 80110fe:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8011102:	d019      	beq.n	8011138 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8011104:	4561      	cmp	r1, ip
 8011106:	d815      	bhi.n	8011134 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8011108:	f10e 0204 	add.w	r2, lr, #4
 801110c:	f10c 0304 	add.w	r3, ip, #4
 8011110:	ebac 010e 	sub.w	r1, ip, lr
 8011114:	4402      	add	r2, r0
 8011116:	ed73 7a01 	vldmdb	r3!, {s15}
 801111a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801111e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011126:	ee66 6a86 	vmul.f32	s13, s13, s12
 801112a:	d827      	bhi.n	801117c <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 801112c:	428b      	cmp	r3, r1
 801112e:	ed62 6a01 	vstmdb	r2!, {s13}
 8011132:	d1f0      	bne.n	8011116 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8011134:	f85d fb04 	ldr.w	pc, [sp], #4
 8011138:	4561      	cmp	r1, ip
 801113a:	d8fb      	bhi.n	8011134 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 801113c:	f10e 0204 	add.w	r2, lr, #4
 8011140:	f10c 0304 	add.w	r3, ip, #4
 8011144:	ebac 010e 	sub.w	r1, ip, lr
 8011148:	f04f 0c00 	mov.w	ip, #0
 801114c:	4402      	add	r2, r0
 801114e:	ed73 7a01 	vldmdb	r3!, {s15}
 8011152:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801115a:	d40a      	bmi.n	8011172 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 801115c:	428b      	cmp	r3, r1
 801115e:	f842 cd04 	str.w	ip, [r2, #-4]!
 8011162:	d0e7      	beq.n	8011134 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8011164:	ed73 7a01 	vldmdb	r3!, {s15}
 8011168:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011170:	d5f4      	bpl.n	801115c <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8011172:	428b      	cmp	r3, r1
 8011174:	ed62 7a01 	vstmdb	r2!, {s15}
 8011178:	d1e9      	bne.n	801114e <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 801117a:	e7db      	b.n	8011134 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 801117c:	428b      	cmp	r3, r1
 801117e:	ed62 7a01 	vstmdb	r2!, {s15}
 8011182:	d1c8      	bne.n	8011116 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8011184:	e7d6      	b.n	8011134 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8011186:	bf00      	nop

08011188 <pool_func_mp_array_f32>:
 8011188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801118c:	b091      	sub	sp, #68	@ 0x44
 801118e:	468b      	mov	fp, r1
 8011190:	469c      	mov	ip, r3
 8011192:	4690      	mov	r8, r2
 8011194:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 8011198:	4681      	mov	r9, r0
 801119a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801119e:	9101      	str	r1, [sp, #4]
 80111a0:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 80111a4:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 80111a8:	9105      	str	r1, [sp, #20]
 80111aa:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80111ae:	9304      	str	r3, [sp, #16]
 80111b0:	9106      	str	r1, [sp, #24]
 80111b2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80111b6:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 80111ba:	ea52 0403 	orrs.w	r4, r2, r3
 80111be:	9102      	str	r1, [sp, #8]
 80111c0:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 80111c4:	9103      	str	r1, [sp, #12]
 80111c6:	d173      	bne.n	80112b0 <pool_func_mp_array_f32+0x128>
 80111c8:	9904      	ldr	r1, [sp, #16]
 80111ca:	9d02      	ldr	r5, [sp, #8]
 80111cc:	eba1 000b 	sub.w	r0, r1, fp
 80111d0:	9e05      	ldr	r6, [sp, #20]
 80111d2:	1e69      	subs	r1, r5, #1
 80111d4:	3801      	subs	r0, #1
 80111d6:	fb11 0106 	smlabb	r1, r1, r6, r0
 80111da:	0409      	lsls	r1, r1, #16
 80111dc:	d568      	bpl.n	80112b0 <pool_func_mp_array_f32+0x128>
 80111de:	9901      	ldr	r1, [sp, #4]
 80111e0:	9e03      	ldr	r6, [sp, #12]
 80111e2:	eba1 0008 	sub.w	r0, r1, r8
 80111e6:	9f06      	ldr	r7, [sp, #24]
 80111e8:	1e71      	subs	r1, r6, #1
 80111ea:	3801      	subs	r0, #1
 80111ec:	fb11 0107 	smlabb	r1, r1, r7, r0
 80111f0:	040f      	lsls	r7, r1, #16
 80111f2:	d55d      	bpl.n	80112b0 <pool_func_mp_array_f32+0x128>
 80111f4:	2e00      	cmp	r6, #0
 80111f6:	d058      	beq.n	80112aa <pool_func_mp_array_f32+0x122>
 80111f8:	2d00      	cmp	r5, #0
 80111fa:	d056      	beq.n	80112aa <pool_func_mp_array_f32+0x122>
 80111fc:	4663      	mov	r3, ip
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d053      	beq.n	80112aa <pool_func_mp_array_f32+0x122>
 8011202:	2b01      	cmp	r3, #1
 8011204:	f040 814a 	bne.w	801149c <pool_func_mp_array_f32+0x314>
 8011208:	46a2      	mov	sl, r4
 801120a:	4623      	mov	r3, r4
 801120c:	9407      	str	r4, [sp, #28]
 801120e:	9a02      	ldr	r2, [sp, #8]
 8011210:	2700      	movs	r7, #0
 8011212:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8011216:	fb02 f303 	mul.w	r3, r2, r3
 801121a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801121e:	46be      	mov	lr, r7
 8011220:	46bc      	mov	ip, r7
 8011222:	9308      	str	r3, [sp, #32]
 8011224:	fa0f f38a 	sxth.w	r3, sl
 8011228:	9309      	str	r3, [sp, #36]	@ 0x24
 801122a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801122c:	b23d      	sxth	r5, r7
 801122e:	9b08      	ldr	r3, [sp, #32]
 8011230:	fa0f f088 	sxth.w	r0, r8
 8011234:	42b4      	cmp	r4, r6
 8011236:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8011498 <pool_func_mp_array_f32+0x310>
 801123a:	449c      	add	ip, r3
 801123c:	da12      	bge.n	8011264 <pool_func_mp_array_f32+0xdc>
 801123e:	4285      	cmp	r5, r0
 8011240:	da0c      	bge.n	801125c <pool_func_mp_array_f32+0xd4>
 8011242:	fb04 520b 	mla	r2, r4, fp, r5
 8011246:	462b      	mov	r3, r5
 8011248:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801124c:	3301      	adds	r3, #1
 801124e:	ecb2 7a01 	vldmia	r2!, {s14}
 8011252:	b219      	sxth	r1, r3
 8011254:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8011258:	4281      	cmp	r1, r0
 801125a:	dbf7      	blt.n	801124c <pool_func_mp_array_f32+0xc4>
 801125c:	3401      	adds	r4, #1
 801125e:	b224      	sxth	r4, r4
 8011260:	42b4      	cmp	r4, r6
 8011262:	dbec      	blt.n	801123e <pool_func_mp_array_f32+0xb6>
 8011264:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011266:	f10e 0e01 	add.w	lr, lr, #1
 801126a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801126e:	9b05      	ldr	r3, [sp, #20]
 8011270:	fa0f fe8e 	sxth.w	lr, lr
 8011274:	4498      	add	r8, r3
 8011276:	441f      	add	r7, r3
 8011278:	9b02      	ldr	r3, [sp, #8]
 801127a:	edcc 7a00 	vstr	s15, [ip]
 801127e:	fa1f f888 	uxth.w	r8, r8
 8011282:	4573      	cmp	r3, lr
 8011284:	b2bf      	uxth	r7, r7
 8011286:	46f4      	mov	ip, lr
 8011288:	dccf      	bgt.n	801122a <pool_func_mp_array_f32+0xa2>
 801128a:	9a07      	ldr	r2, [sp, #28]
 801128c:	9906      	ldr	r1, [sp, #24]
 801128e:	9b01      	ldr	r3, [sp, #4]
 8011290:	3201      	adds	r2, #1
 8011292:	448a      	add	sl, r1
 8011294:	b212      	sxth	r2, r2
 8011296:	440b      	add	r3, r1
 8011298:	9903      	ldr	r1, [sp, #12]
 801129a:	fa1f fa8a 	uxth.w	sl, sl
 801129e:	b29b      	uxth	r3, r3
 80112a0:	9207      	str	r2, [sp, #28]
 80112a2:	4291      	cmp	r1, r2
 80112a4:	9301      	str	r3, [sp, #4]
 80112a6:	4613      	mov	r3, r2
 80112a8:	dcb1      	bgt.n	801120e <pool_func_mp_array_f32+0x86>
 80112aa:	b011      	add	sp, #68	@ 0x44
 80112ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112b0:	9903      	ldr	r1, [sp, #12]
 80112b2:	2900      	cmp	r1, #0
 80112b4:	d0f9      	beq.n	80112aa <pool_func_mp_array_f32+0x122>
 80112b6:	9902      	ldr	r1, [sp, #8]
 80112b8:	2900      	cmp	r1, #0
 80112ba:	d0f6      	beq.n	80112aa <pool_func_mp_array_f32+0x122>
 80112bc:	4661      	mov	r1, ip
 80112be:	2900      	cmp	r1, #0
 80112c0:	d0f3      	beq.n	80112aa <pool_func_mp_array_f32+0x122>
 80112c2:	2901      	cmp	r1, #1
 80112c4:	9901      	ldr	r1, [sp, #4]
 80112c6:	d163      	bne.n	8011390 <pool_func_mp_array_f32+0x208>
 80112c8:	1a8a      	subs	r2, r1, r2
 80112ca:	9904      	ldr	r1, [sp, #16]
 80112cc:	1ac9      	subs	r1, r1, r3
 80112ce:	425b      	negs	r3, r3
 80112d0:	b292      	uxth	r2, r2
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	9204      	str	r2, [sp, #16]
 80112d6:	b28a      	uxth	r2, r1
 80112d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80112da:	2300      	movs	r3, #0
 80112dc:	920a      	str	r2, [sp, #40]	@ 0x28
 80112de:	9307      	str	r3, [sp, #28]
 80112e0:	9a02      	ldr	r2, [sp, #8]
 80112e2:	2700      	movs	r7, #0
 80112e4:	fb02 f303 	mul.w	r3, r2, r3
 80112e8:	9a04      	ldr	r2, [sp, #16]
 80112ea:	46bc      	mov	ip, r7
 80112ec:	9308      	str	r3, [sp, #32]
 80112ee:	b216      	sxth	r6, r2
 80112f0:	9b01      	ldr	r3, [sp, #4]
 80112f2:	1ad3      	subs	r3, r2, r3
 80112f4:	e9dd ae0a 	ldrd	sl, lr, [sp, #40]	@ 0x28
 80112f8:	b21b      	sxth	r3, r3
 80112fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80112fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80112fe:	fa0f f58e 	sxth.w	r5, lr
 8011302:	9b08      	ldr	r3, [sp, #32]
 8011304:	fa0f f48a 	sxth.w	r4, sl
 8011308:	428e      	cmp	r6, r1
 801130a:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8011498 <pool_func_mp_array_f32+0x310>
 801130e:	449c      	add	ip, r3
 8011310:	dd1c      	ble.n	801134c <pool_func_mp_array_f32+0x1c4>
 8011312:	42a5      	cmp	r5, r4
 8011314:	da16      	bge.n	8011344 <pool_func_mp_array_f32+0x1bc>
 8011316:	4588      	cmp	r8, r1
 8011318:	fb01 f20b 	mul.w	r2, r1, fp
 801131c:	dd12      	ble.n	8011344 <pool_func_mp_array_f32+0x1bc>
 801131e:	442a      	add	r2, r5
 8011320:	462b      	mov	r3, r5
 8011322:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8011326:	ea41 0003 	orr.w	r0, r1, r3
 801132a:	0400      	lsls	r0, r0, #16
 801132c:	d405      	bmi.n	801133a <pool_func_mp_array_f32+0x1b2>
 801132e:	459b      	cmp	fp, r3
 8011330:	dd03      	ble.n	801133a <pool_func_mp_array_f32+0x1b2>
 8011332:	ed92 7a00 	vldr	s14, [r2]
 8011336:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801133a:	3301      	adds	r3, #1
 801133c:	3204      	adds	r2, #4
 801133e:	b218      	sxth	r0, r3
 8011340:	42a0      	cmp	r0, r4
 8011342:	dbf0      	blt.n	8011326 <pool_func_mp_array_f32+0x19e>
 8011344:	3101      	adds	r1, #1
 8011346:	b209      	sxth	r1, r1
 8011348:	42b1      	cmp	r1, r6
 801134a:	dbe2      	blt.n	8011312 <pool_func_mp_array_f32+0x18a>
 801134c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801134e:	3701      	adds	r7, #1
 8011350:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8011354:	9b05      	ldr	r3, [sp, #20]
 8011356:	b23f      	sxth	r7, r7
 8011358:	449a      	add	sl, r3
 801135a:	449e      	add	lr, r3
 801135c:	9b02      	ldr	r3, [sp, #8]
 801135e:	edcc 7a00 	vstr	s15, [ip]
 8011362:	fa1f fa8a 	uxth.w	sl, sl
 8011366:	42bb      	cmp	r3, r7
 8011368:	fa1f fe8e 	uxth.w	lr, lr
 801136c:	46bc      	mov	ip, r7
 801136e:	dcc5      	bgt.n	80112fc <pool_func_mp_array_f32+0x174>
 8011370:	9a07      	ldr	r2, [sp, #28]
 8011372:	9b04      	ldr	r3, [sp, #16]
 8011374:	9906      	ldr	r1, [sp, #24]
 8011376:	3201      	adds	r2, #1
 8011378:	440b      	add	r3, r1
 801137a:	b212      	sxth	r2, r2
 801137c:	9903      	ldr	r1, [sp, #12]
 801137e:	b29b      	uxth	r3, r3
 8011380:	9207      	str	r2, [sp, #28]
 8011382:	4291      	cmp	r1, r2
 8011384:	9304      	str	r3, [sp, #16]
 8011386:	4613      	mov	r3, r2
 8011388:	dcaa      	bgt.n	80112e0 <pool_func_mp_array_f32+0x158>
 801138a:	b011      	add	sp, #68	@ 0x44
 801138c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011390:	1a88      	subs	r0, r1, r2
 8011392:	9904      	ldr	r1, [sp, #16]
 8011394:	4252      	negs	r2, r2
 8011396:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 801139a:	1ac9      	subs	r1, r1, r3
 801139c:	425b      	negs	r3, r3
 801139e:	b292      	uxth	r2, r2
 80113a0:	46e6      	mov	lr, ip
 80113a2:	b29b      	uxth	r3, r3
 80113a4:	b280      	uxth	r0, r0
 80113a6:	9208      	str	r2, [sp, #32]
 80113a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80113aa:	b28a      	uxth	r2, r1
 80113ac:	2300      	movs	r3, #0
 80113ae:	9007      	str	r0, [sp, #28]
 80113b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80113b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80113b4:	9a02      	ldr	r2, [sp, #8]
 80113b6:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 80113ba:	fb02 f303 	mul.w	r3, r2, r3
 80113be:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80113c2:	920a      	str	r2, [sp, #40]	@ 0x28
 80113c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80113c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80113c8:	2300      	movs	r3, #0
 80113ca:	9201      	str	r2, [sp, #4]
 80113cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80113ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80113d0:	9204      	str	r2, [sp, #16]
 80113d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80113d4:	f04f 0c00 	mov.w	ip, #0
 80113d8:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 80113dc:	4413      	add	r3, r2
 80113de:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80113e2:	4667      	mov	r7, ip
 80113e4:	fb0e f303 	mul.w	r3, lr, r3
 80113e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80113ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80113ec:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8011498 <pool_func_mp_array_f32+0x310>
 80113f0:	42b1      	cmp	r1, r6
 80113f2:	da1e      	bge.n	8011432 <pool_func_mp_array_f32+0x2aa>
 80113f4:	42a5      	cmp	r5, r4
 80113f6:	da18      	bge.n	801142a <pool_func_mp_array_f32+0x2a2>
 80113f8:	4541      	cmp	r1, r8
 80113fa:	fb01 f30b 	mul.w	r3, r1, fp
 80113fe:	da14      	bge.n	801142a <pool_func_mp_array_f32+0x2a2>
 8011400:	195a      	adds	r2, r3, r5
 8011402:	462b      	mov	r3, r5
 8011404:	fb0e 7202 	mla	r2, lr, r2, r7
 8011408:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801140c:	ea41 0003 	orr.w	r0, r1, r3
 8011410:	0400      	lsls	r0, r0, #16
 8011412:	d405      	bmi.n	8011420 <pool_func_mp_array_f32+0x298>
 8011414:	459b      	cmp	fp, r3
 8011416:	dd03      	ble.n	8011420 <pool_func_mp_array_f32+0x298>
 8011418:	ed92 7a00 	vldr	s14, [r2]
 801141c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8011420:	3301      	adds	r3, #1
 8011422:	4452      	add	r2, sl
 8011424:	b218      	sxth	r0, r3
 8011426:	42a0      	cmp	r0, r4
 8011428:	dbf0      	blt.n	801140c <pool_func_mp_array_f32+0x284>
 801142a:	3101      	adds	r1, #1
 801142c:	b209      	sxth	r1, r1
 801142e:	42b1      	cmp	r1, r6
 8011430:	dbe0      	blt.n	80113f4 <pool_func_mp_array_f32+0x26c>
 8011432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011434:	f10c 0c01 	add.w	ip, ip, #1
 8011438:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801143a:	443b      	add	r3, r7
 801143c:	fa0f fc8c 	sxth.w	ip, ip
 8011440:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011444:	45f4      	cmp	ip, lr
 8011446:	4667      	mov	r7, ip
 8011448:	edc3 7a00 	vstr	s15, [r3]
 801144c:	dbcd      	blt.n	80113ea <pool_func_mp_array_f32+0x262>
 801144e:	9a01      	ldr	r2, [sp, #4]
 8011450:	9805      	ldr	r0, [sp, #20]
 8011452:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011454:	4402      	add	r2, r0
 8011456:	9b04      	ldr	r3, [sp, #16]
 8011458:	3101      	adds	r1, #1
 801145a:	b292      	uxth	r2, r2
 801145c:	4403      	add	r3, r0
 801145e:	b209      	sxth	r1, r1
 8011460:	9201      	str	r2, [sp, #4]
 8011462:	b29b      	uxth	r3, r3
 8011464:	9a02      	ldr	r2, [sp, #8]
 8011466:	9304      	str	r3, [sp, #16]
 8011468:	460b      	mov	r3, r1
 801146a:	428a      	cmp	r2, r1
 801146c:	910c      	str	r1, [sp, #48]	@ 0x30
 801146e:	dcb0      	bgt.n	80113d2 <pool_func_mp_array_f32+0x24a>
 8011470:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011472:	9b08      	ldr	r3, [sp, #32]
 8011474:	3101      	adds	r1, #1
 8011476:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 801147a:	b209      	sxth	r1, r1
 801147c:	4402      	add	r2, r0
 801147e:	4403      	add	r3, r0
 8011480:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011482:	b292      	uxth	r2, r2
 8011484:	b29b      	uxth	r3, r3
 8011486:	9207      	str	r2, [sp, #28]
 8011488:	9a03      	ldr	r2, [sp, #12]
 801148a:	9308      	str	r3, [sp, #32]
 801148c:	460b      	mov	r3, r1
 801148e:	428a      	cmp	r2, r1
 8011490:	dc90      	bgt.n	80113b4 <pool_func_mp_array_f32+0x22c>
 8011492:	b011      	add	sp, #68	@ 0x44
 8011494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011498:	cf000000 	.word	0xcf000000
 801149c:	4623      	mov	r3, r4
 801149e:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80114a2:	46e0      	mov	r8, ip
 80114a4:	9408      	str	r4, [sp, #32]
 80114a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80114a8:	9a02      	ldr	r2, [sp, #8]
 80114aa:	f04f 0c00 	mov.w	ip, #0
 80114ae:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 80114b2:	fb02 f303 	mul.w	r3, r2, r3
 80114b6:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 80114ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80114bc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80114c0:	930d      	str	r3, [sp, #52]	@ 0x34
 80114c2:	9b04      	ldr	r3, [sp, #16]
 80114c4:	9307      	str	r3, [sp, #28]
 80114c6:	4663      	mov	r3, ip
 80114c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80114ca:	f04f 0e00 	mov.w	lr, #0
 80114ce:	fa0f f58c 	sxth.w	r5, ip
 80114d2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80114d6:	4413      	add	r3, r2
 80114d8:	4676      	mov	r6, lr
 80114da:	fb08 f303 	mul.w	r3, r8, r3
 80114de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80114e0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80114e2:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 8011498 <pool_func_mp_array_f32+0x310>
 80114e6:	42bc      	cmp	r4, r7
 80114e8:	da15      	bge.n	8011516 <pool_func_mp_array_f32+0x38e>
 80114ea:	4285      	cmp	r5, r0
 80114ec:	da0f      	bge.n	801150e <pool_func_mp_array_f32+0x386>
 80114ee:	fb0b 5304 	mla	r3, fp, r4, r5
 80114f2:	462a      	mov	r2, r5
 80114f4:	fb08 6303 	mla	r3, r8, r3, r6
 80114f8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80114fc:	3201      	adds	r2, #1
 80114fe:	ed93 7a00 	vldr	s14, [r3]
 8011502:	4453      	add	r3, sl
 8011504:	b211      	sxth	r1, r2
 8011506:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801150a:	4281      	cmp	r1, r0
 801150c:	dbf6      	blt.n	80114fc <pool_func_mp_array_f32+0x374>
 801150e:	3401      	adds	r4, #1
 8011510:	b224      	sxth	r4, r4
 8011512:	42bc      	cmp	r4, r7
 8011514:	dbe9      	blt.n	80114ea <pool_func_mp_array_f32+0x362>
 8011516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011518:	f10e 0e01 	add.w	lr, lr, #1
 801151c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801151e:	4433      	add	r3, r6
 8011520:	fa0f fe8e 	sxth.w	lr, lr
 8011524:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011528:	45c6      	cmp	lr, r8
 801152a:	4676      	mov	r6, lr
 801152c:	edc3 7a00 	vstr	s15, [r3]
 8011530:	dbd6      	blt.n	80114e0 <pool_func_mp_array_f32+0x358>
 8011532:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011534:	9905      	ldr	r1, [sp, #20]
 8011536:	9b07      	ldr	r3, [sp, #28]
 8011538:	3201      	adds	r2, #1
 801153a:	448c      	add	ip, r1
 801153c:	b212      	sxth	r2, r2
 801153e:	440b      	add	r3, r1
 8011540:	9902      	ldr	r1, [sp, #8]
 8011542:	fa1f fc8c 	uxth.w	ip, ip
 8011546:	b29b      	uxth	r3, r3
 8011548:	920a      	str	r2, [sp, #40]	@ 0x28
 801154a:	4291      	cmp	r1, r2
 801154c:	9307      	str	r3, [sp, #28]
 801154e:	4613      	mov	r3, r2
 8011550:	dcba      	bgt.n	80114c8 <pool_func_mp_array_f32+0x340>
 8011552:	9a01      	ldr	r2, [sp, #4]
 8011554:	9806      	ldr	r0, [sp, #24]
 8011556:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011558:	4402      	add	r2, r0
 801155a:	9b08      	ldr	r3, [sp, #32]
 801155c:	3101      	adds	r1, #1
 801155e:	b292      	uxth	r2, r2
 8011560:	4403      	add	r3, r0
 8011562:	b209      	sxth	r1, r1
 8011564:	9201      	str	r2, [sp, #4]
 8011566:	b29b      	uxth	r3, r3
 8011568:	9a03      	ldr	r2, [sp, #12]
 801156a:	9308      	str	r3, [sp, #32]
 801156c:	460b      	mov	r3, r1
 801156e:	428a      	cmp	r2, r1
 8011570:	9109      	str	r1, [sp, #36]	@ 0x24
 8011572:	dc99      	bgt.n	80114a8 <pool_func_mp_array_f32+0x320>
 8011574:	e699      	b.n	80112aa <pool_func_mp_array_f32+0x122>
 8011576:	bf00      	nop

08011578 <forward_lite_upsample_bilinear_if32of32>:
 8011578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801157c:	ed2d 8b0a 	vpush	{d8-d12}
 8011580:	b08f      	sub	sp, #60	@ 0x3c
 8011582:	4683      	mov	fp, r0
 8011584:	9104      	str	r1, [sp, #16]
 8011586:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 801158a:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 801158e:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 8011592:	9206      	str	r2, [sp, #24]
 8011594:	2900      	cmp	r1, #0
 8011596:	f000 80a7 	beq.w	80116e8 <forward_lite_upsample_bilinear_if32of32+0x170>
 801159a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801159e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80115a2:	ee70 aae7 	vsub.f32	s21, s1, s15
 80115a6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80115aa:	ee6a aa87 	vmul.f32	s21, s21, s14
 80115ae:	ee27 9a87 	vmul.f32	s18, s15, s14
 80115b2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80115b6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80115b8:	ee87 baa0 	vdiv.f32	s22, s15, s1
 80115bc:	eec7 9a80 	vdiv.f32	s19, s15, s0
 80115c0:	2a00      	cmp	r2, #0
 80115c2:	f000 808c 	beq.w	80116de <forward_lite_upsample_bilinear_if32of32+0x166>
 80115c6:	3b01      	subs	r3, #1
 80115c8:	ea4f 068a 	mov.w	r6, sl, lsl #2
 80115cc:	eddf 8a49 	vldr	s17, [pc, #292]	@ 80116f4 <forward_lite_upsample_bilinear_if32of32+0x17c>
 80115d0:	ee07 3a90 	vmov	s15, r3
 80115d4:	9b06      	ldr	r3, [sp, #24]
 80115d6:	1e5a      	subs	r2, r3, #1
 80115d8:	fb0a f303 	mul.w	r3, sl, r3
 80115dc:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 80115e0:	ee0c 2a90 	vmov	s25, r2
 80115e4:	9305      	str	r3, [sp, #20]
 80115e6:	2300      	movs	r3, #0
 80115e8:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 80115ec:	9303      	str	r3, [sp, #12]
 80115ee:	fb06 f308 	mul.w	r3, r6, r8
 80115f2:	9307      	str	r3, [sp, #28]
 80115f4:	eddd 7a03 	vldr	s15, [sp, #12]
 80115f8:	9b05      	ldr	r3, [sp, #20]
 80115fa:	eef8 ba67 	vcvt.f32.u32	s23, s15
 80115fe:	ee7b baea 	vsub.f32	s23, s23, s21
 8011602:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8011606:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 801160a:	fecb baca 	vminnm.f32	s23, s23, s20
 801160e:	eef4 ba4a 	vcmp.f32	s23, s20
 8011612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011616:	bf14      	ite	ne
 8011618:	4699      	movne	r9, r3
 801161a:	f04f 0900 	moveq.w	r9, #0
 801161e:	f1b8 0f00 	cmp.w	r8, #0
 8011622:	d056      	beq.n	80116d2 <forward_lite_upsample_bilinear_if32of32+0x15a>
 8011624:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8011628:	9b06      	ldr	r3, [sp, #24]
 801162a:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801162e:	9d04      	ldr	r5, [sp, #16]
 8011630:	2400      	movs	r4, #0
 8011632:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8011636:	ee17 7a10 	vmov	r7, s14
 801163a:	ee38 ca6b 	vsub.f32	s24, s16, s23
 801163e:	fb03 f707 	mul.w	r7, r3, r7
 8011642:	ee7b bae7 	vsub.f32	s23, s23, s15
 8011646:	ee3c ca27 	vadd.f32	s24, s24, s15
 801164a:	ee07 4a90 	vmov	s15, r4
 801164e:	ab0a      	add	r3, sp, #40	@ 0x28
 8011650:	3401      	adds	r4, #1
 8011652:	4629      	mov	r1, r5
 8011654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011658:	9300      	str	r3, [sp, #0]
 801165a:	4652      	mov	r2, sl
 801165c:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8011660:	4435      	add	r5, r6
 8011662:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8011666:	ee67 7aa9 	vmul.f32	s15, s15, s19
 801166a:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 801166e:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8011672:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8011676:	eef4 7a6c 	vcmp.f32	s15, s25
 801167a:	ee38 7a67 	vsub.f32	s14, s16, s15
 801167e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8011682:	ee16 0a90 	vmov	r0, s13
 8011686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801168a:	4438      	add	r0, r7
 801168c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011690:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011694:	bf14      	ite	ne
 8011696:	4653      	movne	r3, sl
 8011698:	2300      	moveq	r3, #0
 801169a:	fb06 b000 	mla	r0, r6, r0, fp
 801169e:	ee67 5a0c 	vmul.f32	s11, s14, s24
 80116a2:	ee27 6a8c 	vmul.f32	s12, s15, s24
 80116a6:	9308      	str	r3, [sp, #32]
 80116a8:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80116ac:	ab08      	add	r3, sp, #32
 80116ae:	ee67 7aab 	vmul.f32	s15, s15, s23
 80116b2:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 80116b6:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 80116ba:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 80116be:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 80116c2:	f001 f9bf 	bl	8012a44 <lite_bilinear_if32of32_kernel>
 80116c6:	45a0      	cmp	r8, r4
 80116c8:	d1bf      	bne.n	801164a <forward_lite_upsample_bilinear_if32of32+0xd2>
 80116ca:	9b04      	ldr	r3, [sp, #16]
 80116cc:	9a07      	ldr	r2, [sp, #28]
 80116ce:	4413      	add	r3, r2
 80116d0:	9304      	str	r3, [sp, #16]
 80116d2:	9b03      	ldr	r3, [sp, #12]
 80116d4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80116d6:	3301      	adds	r3, #1
 80116d8:	429a      	cmp	r2, r3
 80116da:	9303      	str	r3, [sp, #12]
 80116dc:	d18a      	bne.n	80115f4 <forward_lite_upsample_bilinear_if32of32+0x7c>
 80116de:	b00f      	add	sp, #60	@ 0x3c
 80116e0:	ecbd 8b0a 	vpop	{d8-d12}
 80116e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e8:	eddf aa02 	vldr	s21, [pc, #8]	@ 80116f4 <forward_lite_upsample_bilinear_if32of32+0x17c>
 80116ec:	eeb0 9a6a 	vmov.f32	s18, s21
 80116f0:	e75f      	b.n	80115b2 <forward_lite_upsample_bilinear_if32of32+0x3a>
 80116f2:	bf00      	nop
 80116f4:	00000000 	.word	0x00000000

080116f8 <forward_lite_upsample_bilinear_is8os8>:
 80116f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116fc:	ed2d 8b0a 	vpush	{d8-d12}
 8011700:	b08f      	sub	sp, #60	@ 0x3c
 8011702:	4682      	mov	sl, r0
 8011704:	9104      	str	r1, [sp, #16]
 8011706:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 801170a:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 801170c:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8011710:	9206      	str	r2, [sp, #24]
 8011712:	2900      	cmp	r1, #0
 8011714:	f000 80aa 	beq.w	801186c <forward_lite_upsample_bilinear_is8os8+0x174>
 8011718:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801171c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011720:	ee70 aae7 	vsub.f32	s21, s1, s15
 8011724:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011728:	ee6a aa87 	vmul.f32	s21, s21, s14
 801172c:	ee27 9a87 	vmul.f32	s18, s15, s14
 8011730:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011734:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011736:	ee87 baa0 	vdiv.f32	s22, s15, s1
 801173a:	eec7 9a80 	vdiv.f32	s19, s15, s0
 801173e:	2a00      	cmp	r2, #0
 8011740:	f000 808f 	beq.w	8011862 <forward_lite_upsample_bilinear_is8os8+0x16a>
 8011744:	3b01      	subs	r3, #1
 8011746:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 8011878 <forward_lite_upsample_bilinear_is8os8+0x180>
 801174a:	ee07 3a90 	vmov	s15, r3
 801174e:	9b06      	ldr	r3, [sp, #24]
 8011750:	1e5a      	subs	r2, r3, #1
 8011752:	fb0b f303 	mul.w	r3, fp, r3
 8011756:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 801175a:	ee0c 2a90 	vmov	s25, r2
 801175e:	9305      	str	r3, [sp, #20]
 8011760:	fb07 f30b 	mul.w	r3, r7, fp
 8011764:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8011768:	9307      	str	r3, [sp, #28]
 801176a:	2300      	movs	r3, #0
 801176c:	9303      	str	r3, [sp, #12]
 801176e:	eddd 7a03 	vldr	s15, [sp, #12]
 8011772:	9b05      	ldr	r3, [sp, #20]
 8011774:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8011778:	ee7b baea 	vsub.f32	s23, s23, s21
 801177c:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8011780:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8011784:	fecb baca 	vminnm.f32	s23, s23, s20
 8011788:	eef4 ba4a 	vcmp.f32	s23, s20
 801178c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011790:	bf14      	ite	ne
 8011792:	4698      	movne	r8, r3
 8011794:	f04f 0800 	moveq.w	r8, #0
 8011798:	2f00      	cmp	r7, #0
 801179a:	d05c      	beq.n	8011856 <forward_lite_upsample_bilinear_is8os8+0x15e>
 801179c:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 80117a0:	9b06      	ldr	r3, [sp, #24]
 80117a2:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80117a6:	9722      	str	r7, [sp, #136]	@ 0x88
 80117a8:	9d04      	ldr	r5, [sp, #16]
 80117aa:	4647      	mov	r7, r8
 80117ac:	eef8 7a47 	vcvt.f32.u32	s15, s14
 80117b0:	ee17 6a10 	vmov	r6, s14
 80117b4:	ee38 ca6b 	vsub.f32	s24, s16, s23
 80117b8:	2400      	movs	r4, #0
 80117ba:	fb03 f606 	mul.w	r6, r3, r6
 80117be:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 80117c2:	ee7b bae7 	vsub.f32	s23, s23, s15
 80117c6:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 80117ca:	ee3c ca27 	vadd.f32	s24, s24, s15
 80117ce:	ee07 4a90 	vmov	s15, r4
 80117d2:	3401      	adds	r4, #1
 80117d4:	4629      	mov	r1, r5
 80117d6:	465a      	mov	r2, fp
 80117d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80117dc:	f8cd 9000 	str.w	r9, [sp]
 80117e0:	9709      	str	r7, [sp, #36]	@ 0x24
 80117e2:	445d      	add	r5, fp
 80117e4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80117e8:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80117ec:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 80117f0:	fec7 7aec 	vminnm.f32	s15, s15, s25
 80117f4:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80117f8:	eef4 7a6c 	vcmp.f32	s15, s25
 80117fc:	ee38 7a67 	vsub.f32	s14, s16, s15
 8011800:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8011804:	ee16 0a90 	vmov	r0, s13
 8011808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801180c:	4430      	add	r0, r6
 801180e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011812:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011816:	bf14      	ite	ne
 8011818:	465b      	movne	r3, fp
 801181a:	2300      	moveq	r3, #0
 801181c:	fb0b a000 	mla	r0, fp, r0, sl
 8011820:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8011824:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8011828:	9308      	str	r3, [sp, #32]
 801182a:	ee27 7a2b 	vmul.f32	s14, s14, s23
 801182e:	ab08      	add	r3, sp, #32
 8011830:	ee67 7aab 	vmul.f32	s15, s15, s23
 8011834:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8011838:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 801183c:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8011840:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8011844:	f001 f92e 	bl	8012aa4 <lite_bilinear_is8os8_kernel>
 8011848:	45a0      	cmp	r8, r4
 801184a:	d1c0      	bne.n	80117ce <forward_lite_upsample_bilinear_is8os8+0xd6>
 801184c:	9b04      	ldr	r3, [sp, #16]
 801184e:	4647      	mov	r7, r8
 8011850:	9a07      	ldr	r2, [sp, #28]
 8011852:	4413      	add	r3, r2
 8011854:	9304      	str	r3, [sp, #16]
 8011856:	9b03      	ldr	r3, [sp, #12]
 8011858:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801185a:	3301      	adds	r3, #1
 801185c:	429a      	cmp	r2, r3
 801185e:	9303      	str	r3, [sp, #12]
 8011860:	d185      	bne.n	801176e <forward_lite_upsample_bilinear_is8os8+0x76>
 8011862:	b00f      	add	sp, #60	@ 0x3c
 8011864:	ecbd 8b0a 	vpop	{d8-d12}
 8011868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801186c:	eddf aa02 	vldr	s21, [pc, #8]	@ 8011878 <forward_lite_upsample_bilinear_is8os8+0x180>
 8011870:	eeb0 9a6a 	vmov.f32	s18, s21
 8011874:	e75c      	b.n	8011730 <forward_lite_upsample_bilinear_is8os8+0x38>
 8011876:	bf00      	nop
 8011878:	00000000 	.word	0x00000000

0801187c <forward_lite_upsample_bilinear_iu8ou8>:
 801187c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011880:	ed2d 8b0a 	vpush	{d8-d12}
 8011884:	b08f      	sub	sp, #60	@ 0x3c
 8011886:	4682      	mov	sl, r0
 8011888:	9104      	str	r1, [sp, #16]
 801188a:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 801188e:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8011890:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8011894:	9206      	str	r2, [sp, #24]
 8011896:	2900      	cmp	r1, #0
 8011898:	f000 80aa 	beq.w	80119f0 <forward_lite_upsample_bilinear_iu8ou8+0x174>
 801189c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80118a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80118a4:	ee70 aae7 	vsub.f32	s21, s1, s15
 80118a8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80118ac:	ee6a aa87 	vmul.f32	s21, s21, s14
 80118b0:	ee27 9a87 	vmul.f32	s18, s15, s14
 80118b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80118b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80118ba:	ee87 baa0 	vdiv.f32	s22, s15, s1
 80118be:	eec7 9a80 	vdiv.f32	s19, s15, s0
 80118c2:	2a00      	cmp	r2, #0
 80118c4:	f000 808f 	beq.w	80119e6 <forward_lite_upsample_bilinear_iu8ou8+0x16a>
 80118c8:	3b01      	subs	r3, #1
 80118ca:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 80119fc <forward_lite_upsample_bilinear_iu8ou8+0x180>
 80118ce:	ee07 3a90 	vmov	s15, r3
 80118d2:	9b06      	ldr	r3, [sp, #24]
 80118d4:	1e5a      	subs	r2, r3, #1
 80118d6:	fb0b f303 	mul.w	r3, fp, r3
 80118da:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 80118de:	ee0c 2a90 	vmov	s25, r2
 80118e2:	9305      	str	r3, [sp, #20]
 80118e4:	fb07 f30b 	mul.w	r3, r7, fp
 80118e8:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 80118ec:	9307      	str	r3, [sp, #28]
 80118ee:	2300      	movs	r3, #0
 80118f0:	9303      	str	r3, [sp, #12]
 80118f2:	eddd 7a03 	vldr	s15, [sp, #12]
 80118f6:	9b05      	ldr	r3, [sp, #20]
 80118f8:	eef8 ba67 	vcvt.f32.u32	s23, s15
 80118fc:	ee7b baea 	vsub.f32	s23, s23, s21
 8011900:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8011904:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8011908:	fecb baca 	vminnm.f32	s23, s23, s20
 801190c:	eef4 ba4a 	vcmp.f32	s23, s20
 8011910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011914:	bf14      	ite	ne
 8011916:	4698      	movne	r8, r3
 8011918:	f04f 0800 	moveq.w	r8, #0
 801191c:	2f00      	cmp	r7, #0
 801191e:	d05c      	beq.n	80119da <forward_lite_upsample_bilinear_iu8ou8+0x15e>
 8011920:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8011924:	9b06      	ldr	r3, [sp, #24]
 8011926:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801192a:	9722      	str	r7, [sp, #136]	@ 0x88
 801192c:	9d04      	ldr	r5, [sp, #16]
 801192e:	4647      	mov	r7, r8
 8011930:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8011934:	ee17 6a10 	vmov	r6, s14
 8011938:	ee38 ca6b 	vsub.f32	s24, s16, s23
 801193c:	2400      	movs	r4, #0
 801193e:	fb03 f606 	mul.w	r6, r3, r6
 8011942:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8011946:	ee7b bae7 	vsub.f32	s23, s23, s15
 801194a:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 801194e:	ee3c ca27 	vadd.f32	s24, s24, s15
 8011952:	ee07 4a90 	vmov	s15, r4
 8011956:	3401      	adds	r4, #1
 8011958:	4629      	mov	r1, r5
 801195a:	465a      	mov	r2, fp
 801195c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011960:	f8cd 9000 	str.w	r9, [sp]
 8011964:	9709      	str	r7, [sp, #36]	@ 0x24
 8011966:	445d      	add	r5, fp
 8011968:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801196c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8011970:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8011974:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8011978:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 801197c:	eef4 7a6c 	vcmp.f32	s15, s25
 8011980:	ee38 7a67 	vsub.f32	s14, s16, s15
 8011984:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8011988:	ee16 0a90 	vmov	r0, s13
 801198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011990:	4430      	add	r0, r6
 8011992:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011996:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801199a:	bf14      	ite	ne
 801199c:	465b      	movne	r3, fp
 801199e:	2300      	moveq	r3, #0
 80119a0:	fb0b a000 	mla	r0, fp, r0, sl
 80119a4:	ee67 5a0c 	vmul.f32	s11, s14, s24
 80119a8:	ee27 6a8c 	vmul.f32	s12, s15, s24
 80119ac:	9308      	str	r3, [sp, #32]
 80119ae:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80119b2:	ab08      	add	r3, sp, #32
 80119b4:	ee67 7aab 	vmul.f32	s15, s15, s23
 80119b8:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 80119bc:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 80119c0:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 80119c4:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 80119c8:	f001 f8ca 	bl	8012b60 <lite_bilinear_iu8ou8_kernel>
 80119cc:	45a0      	cmp	r8, r4
 80119ce:	d1c0      	bne.n	8011952 <forward_lite_upsample_bilinear_iu8ou8+0xd6>
 80119d0:	9b04      	ldr	r3, [sp, #16]
 80119d2:	4647      	mov	r7, r8
 80119d4:	9a07      	ldr	r2, [sp, #28]
 80119d6:	4413      	add	r3, r2
 80119d8:	9304      	str	r3, [sp, #16]
 80119da:	9b03      	ldr	r3, [sp, #12]
 80119dc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80119de:	3301      	adds	r3, #1
 80119e0:	429a      	cmp	r2, r3
 80119e2:	9303      	str	r3, [sp, #12]
 80119e4:	d185      	bne.n	80118f2 <forward_lite_upsample_bilinear_iu8ou8+0x76>
 80119e6:	b00f      	add	sp, #60	@ 0x3c
 80119e8:	ecbd 8b0a 	vpop	{d8-d12}
 80119ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119f0:	eddf aa02 	vldr	s21, [pc, #8]	@ 80119fc <forward_lite_upsample_bilinear_iu8ou8+0x180>
 80119f4:	eeb0 9a6a 	vmov.f32	s18, s21
 80119f8:	e75c      	b.n	80118b4 <forward_lite_upsample_bilinear_iu8ou8+0x38>
 80119fa:	bf00      	nop
 80119fc:	00000000 	.word	0x00000000

08011a00 <forward_lite_upsample_bilinear_is16os16>:
 8011a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a04:	ed2d 8b0a 	vpush	{d8-d12}
 8011a08:	b08f      	sub	sp, #60	@ 0x3c
 8011a0a:	4683      	mov	fp, r0
 8011a0c:	9104      	str	r1, [sp, #16]
 8011a0e:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8011a12:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8011a16:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 8011a1a:	9206      	str	r2, [sp, #24]
 8011a1c:	2900      	cmp	r1, #0
 8011a1e:	f000 80a7 	beq.w	8011b70 <forward_lite_upsample_bilinear_is16os16+0x170>
 8011a22:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011a26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011a2a:	ee70 aae7 	vsub.f32	s21, s1, s15
 8011a2e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011a32:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011a36:	ee27 9a87 	vmul.f32	s18, s15, s14
 8011a3a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011a3e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011a40:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8011a44:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8011a48:	2a00      	cmp	r2, #0
 8011a4a:	f000 808c 	beq.w	8011b66 <forward_lite_upsample_bilinear_is16os16+0x166>
 8011a4e:	3b01      	subs	r3, #1
 8011a50:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8011a54:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8011b7c <forward_lite_upsample_bilinear_is16os16+0x17c>
 8011a58:	ee07 3a90 	vmov	s15, r3
 8011a5c:	9b06      	ldr	r3, [sp, #24]
 8011a5e:	1e5a      	subs	r2, r3, #1
 8011a60:	fb0a f303 	mul.w	r3, sl, r3
 8011a64:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8011a68:	ee0c 2a90 	vmov	s25, r2
 8011a6c:	9305      	str	r3, [sp, #20]
 8011a6e:	2300      	movs	r3, #0
 8011a70:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8011a74:	9303      	str	r3, [sp, #12]
 8011a76:	fb06 f308 	mul.w	r3, r6, r8
 8011a7a:	9307      	str	r3, [sp, #28]
 8011a7c:	eddd 7a03 	vldr	s15, [sp, #12]
 8011a80:	9b05      	ldr	r3, [sp, #20]
 8011a82:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8011a86:	ee7b baea 	vsub.f32	s23, s23, s21
 8011a8a:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8011a8e:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8011a92:	fecb baca 	vminnm.f32	s23, s23, s20
 8011a96:	eef4 ba4a 	vcmp.f32	s23, s20
 8011a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a9e:	bf14      	ite	ne
 8011aa0:	4699      	movne	r9, r3
 8011aa2:	f04f 0900 	moveq.w	r9, #0
 8011aa6:	f1b8 0f00 	cmp.w	r8, #0
 8011aaa:	d056      	beq.n	8011b5a <forward_lite_upsample_bilinear_is16os16+0x15a>
 8011aac:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8011ab0:	9b06      	ldr	r3, [sp, #24]
 8011ab2:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8011ab6:	9d04      	ldr	r5, [sp, #16]
 8011ab8:	2400      	movs	r4, #0
 8011aba:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8011abe:	ee17 7a10 	vmov	r7, s14
 8011ac2:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8011ac6:	fb03 f707 	mul.w	r7, r3, r7
 8011aca:	ee7b bae7 	vsub.f32	s23, s23, s15
 8011ace:	ee3c ca27 	vadd.f32	s24, s24, s15
 8011ad2:	ee07 4a90 	vmov	s15, r4
 8011ad6:	ab0a      	add	r3, sp, #40	@ 0x28
 8011ad8:	3401      	adds	r4, #1
 8011ada:	4629      	mov	r1, r5
 8011adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	4652      	mov	r2, sl
 8011ae4:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8011ae8:	4435      	add	r5, r6
 8011aea:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8011aee:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8011af2:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8011af6:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8011afa:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8011afe:	eef4 7a6c 	vcmp.f32	s15, s25
 8011b02:	ee38 7a67 	vsub.f32	s14, s16, s15
 8011b06:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8011b0a:	ee16 0a90 	vmov	r0, s13
 8011b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b12:	4438      	add	r0, r7
 8011b14:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011b18:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011b1c:	bf14      	ite	ne
 8011b1e:	4653      	movne	r3, sl
 8011b20:	2300      	moveq	r3, #0
 8011b22:	fb06 b000 	mla	r0, r6, r0, fp
 8011b26:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8011b2a:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8011b2e:	9308      	str	r3, [sp, #32]
 8011b30:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8011b34:	ab08      	add	r3, sp, #32
 8011b36:	ee67 7aab 	vmul.f32	s15, s15, s23
 8011b3a:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8011b3e:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8011b42:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8011b46:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8011b4a:	f001 f853 	bl	8012bf4 <lite_bilinear_is16os16_kernel>
 8011b4e:	45a0      	cmp	r8, r4
 8011b50:	d1bf      	bne.n	8011ad2 <forward_lite_upsample_bilinear_is16os16+0xd2>
 8011b52:	9b04      	ldr	r3, [sp, #16]
 8011b54:	9a07      	ldr	r2, [sp, #28]
 8011b56:	4413      	add	r3, r2
 8011b58:	9304      	str	r3, [sp, #16]
 8011b5a:	9b03      	ldr	r3, [sp, #12]
 8011b5c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011b5e:	3301      	adds	r3, #1
 8011b60:	429a      	cmp	r2, r3
 8011b62:	9303      	str	r3, [sp, #12]
 8011b64:	d18a      	bne.n	8011a7c <forward_lite_upsample_bilinear_is16os16+0x7c>
 8011b66:	b00f      	add	sp, #60	@ 0x3c
 8011b68:	ecbd 8b0a 	vpop	{d8-d12}
 8011b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b70:	eddf aa02 	vldr	s21, [pc, #8]	@ 8011b7c <forward_lite_upsample_bilinear_is16os16+0x17c>
 8011b74:	eeb0 9a6a 	vmov.f32	s18, s21
 8011b78:	e75f      	b.n	8011a3a <forward_lite_upsample_bilinear_is16os16+0x3a>
 8011b7a:	bf00      	nop
 8011b7c:	00000000 	.word	0x00000000

08011b80 <forward_lite_upsample_bilinear_iu16ou16>:
 8011b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b84:	ed2d 8b0a 	vpush	{d8-d12}
 8011b88:	b08f      	sub	sp, #60	@ 0x3c
 8011b8a:	4683      	mov	fp, r0
 8011b8c:	9104      	str	r1, [sp, #16]
 8011b8e:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8011b92:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8011b96:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 8011b9a:	9206      	str	r2, [sp, #24]
 8011b9c:	2900      	cmp	r1, #0
 8011b9e:	f000 80a7 	beq.w	8011cf0 <forward_lite_upsample_bilinear_iu16ou16+0x170>
 8011ba2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011ba6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011baa:	ee70 aae7 	vsub.f32	s21, s1, s15
 8011bae:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011bb2:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011bb6:	ee27 9a87 	vmul.f32	s18, s15, s14
 8011bba:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011bbe:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011bc0:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8011bc4:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8011bc8:	2a00      	cmp	r2, #0
 8011bca:	f000 808c 	beq.w	8011ce6 <forward_lite_upsample_bilinear_iu16ou16+0x166>
 8011bce:	3b01      	subs	r3, #1
 8011bd0:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8011bd4:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8011cfc <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 8011bd8:	ee07 3a90 	vmov	s15, r3
 8011bdc:	9b06      	ldr	r3, [sp, #24]
 8011bde:	1e5a      	subs	r2, r3, #1
 8011be0:	fb0a f303 	mul.w	r3, sl, r3
 8011be4:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8011be8:	ee0c 2a90 	vmov	s25, r2
 8011bec:	9305      	str	r3, [sp, #20]
 8011bee:	2300      	movs	r3, #0
 8011bf0:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8011bf4:	9303      	str	r3, [sp, #12]
 8011bf6:	fb06 f308 	mul.w	r3, r6, r8
 8011bfa:	9307      	str	r3, [sp, #28]
 8011bfc:	eddd 7a03 	vldr	s15, [sp, #12]
 8011c00:	9b05      	ldr	r3, [sp, #20]
 8011c02:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8011c06:	ee7b baea 	vsub.f32	s23, s23, s21
 8011c0a:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8011c0e:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8011c12:	fecb baca 	vminnm.f32	s23, s23, s20
 8011c16:	eef4 ba4a 	vcmp.f32	s23, s20
 8011c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c1e:	bf14      	ite	ne
 8011c20:	4699      	movne	r9, r3
 8011c22:	f04f 0900 	moveq.w	r9, #0
 8011c26:	f1b8 0f00 	cmp.w	r8, #0
 8011c2a:	d056      	beq.n	8011cda <forward_lite_upsample_bilinear_iu16ou16+0x15a>
 8011c2c:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8011c30:	9b06      	ldr	r3, [sp, #24]
 8011c32:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8011c36:	9d04      	ldr	r5, [sp, #16]
 8011c38:	2400      	movs	r4, #0
 8011c3a:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8011c3e:	ee17 7a10 	vmov	r7, s14
 8011c42:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8011c46:	fb03 f707 	mul.w	r7, r3, r7
 8011c4a:	ee7b bae7 	vsub.f32	s23, s23, s15
 8011c4e:	ee3c ca27 	vadd.f32	s24, s24, s15
 8011c52:	ee07 4a90 	vmov	s15, r4
 8011c56:	ab0a      	add	r3, sp, #40	@ 0x28
 8011c58:	3401      	adds	r4, #1
 8011c5a:	4629      	mov	r1, r5
 8011c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c60:	9300      	str	r3, [sp, #0]
 8011c62:	4652      	mov	r2, sl
 8011c64:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8011c68:	4435      	add	r5, r6
 8011c6a:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8011c6e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8011c72:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8011c76:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8011c7a:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8011c7e:	eef4 7a6c 	vcmp.f32	s15, s25
 8011c82:	ee38 7a67 	vsub.f32	s14, s16, s15
 8011c86:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8011c8a:	ee16 0a90 	vmov	r0, s13
 8011c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c92:	4438      	add	r0, r7
 8011c94:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011c98:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011c9c:	bf14      	ite	ne
 8011c9e:	4653      	movne	r3, sl
 8011ca0:	2300      	moveq	r3, #0
 8011ca2:	fb06 b000 	mla	r0, r6, r0, fp
 8011ca6:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8011caa:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8011cae:	9308      	str	r3, [sp, #32]
 8011cb0:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8011cb4:	ab08      	add	r3, sp, #32
 8011cb6:	ee67 7aab 	vmul.f32	s15, s15, s23
 8011cba:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8011cbe:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8011cc2:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8011cc6:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8011cca:	f000 ffe9 	bl	8012ca0 <lite_bilinear_iu16ou16_kernel>
 8011cce:	45a0      	cmp	r8, r4
 8011cd0:	d1bf      	bne.n	8011c52 <forward_lite_upsample_bilinear_iu16ou16+0xd2>
 8011cd2:	9b04      	ldr	r3, [sp, #16]
 8011cd4:	9a07      	ldr	r2, [sp, #28]
 8011cd6:	4413      	add	r3, r2
 8011cd8:	9304      	str	r3, [sp, #16]
 8011cda:	9b03      	ldr	r3, [sp, #12]
 8011cdc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011cde:	3301      	adds	r3, #1
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	9303      	str	r3, [sp, #12]
 8011ce4:	d18a      	bne.n	8011bfc <forward_lite_upsample_bilinear_iu16ou16+0x7c>
 8011ce6:	b00f      	add	sp, #60	@ 0x3c
 8011ce8:	ecbd 8b0a 	vpop	{d8-d12}
 8011cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cf0:	eddf aa02 	vldr	s21, [pc, #8]	@ 8011cfc <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 8011cf4:	eeb0 9a6a 	vmov.f32	s18, s21
 8011cf8:	e75f      	b.n	8011bba <forward_lite_upsample_bilinear_iu16ou16+0x3a>
 8011cfa:	bf00      	nop
 8011cfc:	00000000 	.word	0x00000000

08011d00 <forward_lite_dense_if32of32wf32>:
 8011d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d04:	ed2d 8b0c 	vpush	{d8-d13}
 8011d08:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8011d0c:	6801      	ldr	r1, [r0, #0]
 8011d0e:	b083      	sub	sp, #12
 8011d10:	fb02 f303 	mul.w	r3, r2, r3
 8011d14:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011d18:	9100      	str	r1, [sp, #0]
 8011d1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011d1e:	4299      	cmp	r1, r3
 8011d20:	9301      	str	r3, [sp, #4]
 8011d22:	f080 811c 	bcs.w	8011f5e <forward_lite_dense_if32of32wf32+0x25e>
 8011d26:	4607      	mov	r7, r0
 8011d28:	6904      	ldr	r4, [r0, #16]
 8011d2a:	0096      	lsls	r6, r2, #2
 8011d2c:	9b00      	ldr	r3, [sp, #0]
 8011d2e:	68bd      	ldr	r5, [r7, #8]
 8011d30:	eb03 0e06 	add.w	lr, r3, r6
 8011d34:	461e      	mov	r6, r3
 8011d36:	459e      	cmp	lr, r3
 8011d38:	f240 8103 	bls.w	8011f42 <forward_lite_dense_if32of32wf32+0x242>
 8011d3c:	f1a4 0c10 	sub.w	ip, r4, #16
 8011d40:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8011d44:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8011d48:	f10c 0c01 	add.w	ip, ip, #1
 8011d4c:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8011d50:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8011d54:	2c0f      	cmp	r4, #15
 8011d56:	f240 8107 	bls.w	8011f68 <forward_lite_dense_if32of32wf32+0x268>
 8011d5a:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 8011d5e:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8011d62:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8011fb8 <forward_lite_dense_if32of32wf32+0x2b8>
 8011d66:	4621      	mov	r1, r4
 8011d68:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8011d6c:	3910      	subs	r1, #16
 8011d6e:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8011d72:	3340      	adds	r3, #64	@ 0x40
 8011d74:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8011d78:	290f      	cmp	r1, #15
 8011d7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011d7e:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8011d82:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8011d86:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8011d8a:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8011d8e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011d92:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8011d96:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 8011d9a:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 8011d9e:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 8011da2:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 8011da6:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 8011daa:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011dae:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 8011db2:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 8011db6:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 8011dba:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 8011dbe:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 8011dc2:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 8011dc6:	eeed 7a26 	vfma.f32	s15, s26, s13
 8011dca:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 8011dce:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8011dd2:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 8011dd6:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8011dda:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 8011dde:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8011de2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8011de6:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8011dea:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8011dee:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8011df2:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8011df6:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8011dfa:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8011dfe:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8011e02:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8011e06:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8011e0a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8011e0e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8011e12:	eee8 7a88 	vfma.f32	s15, s17, s16
 8011e16:	eee0 7a20 	vfma.f32	s15, s0, s1
 8011e1a:	eee1 7a21 	vfma.f32	s15, s2, s3
 8011e1e:	eee2 7a22 	vfma.f32	s15, s4, s5
 8011e22:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011e26:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011e2a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011e2e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011e32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011e36:	d897      	bhi.n	8011d68 <forward_lite_dense_if32of32wf32+0x68>
 8011e38:	eb05 020b 	add.w	r2, r5, fp
 8011e3c:	f004 010f 	and.w	r1, r4, #15
 8011e40:	4663      	mov	r3, ip
 8011e42:	2903      	cmp	r1, #3
 8011e44:	d95f      	bls.n	8011f06 <forward_lite_dense_if32of32wf32+0x206>
 8011e46:	edd2 6a01 	vldr	s13, [r2, #4]
 8011e4a:	1f08      	subs	r0, r1, #4
 8011e4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8011e50:	ed93 4a00 	vldr	s8, [r3]
 8011e54:	2803      	cmp	r0, #3
 8011e56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011e5a:	edd2 4a00 	vldr	s9, [r2]
 8011e5e:	ed93 5a02 	vldr	s10, [r3, #8]
 8011e62:	edd2 5a02 	vldr	s11, [r2, #8]
 8011e66:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011e6a:	ed93 6a03 	vldr	s12, [r3, #12]
 8011e6e:	edd2 6a03 	vldr	s13, [r2, #12]
 8011e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011e76:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011e7a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011e7e:	eeb0 7a67 	vmov.f32	s14, s15
 8011e82:	d938      	bls.n	8011ef6 <forward_lite_dense_if32of32wf32+0x1f6>
 8011e84:	edd2 6a05 	vldr	s13, [r2, #20]
 8011e88:	f1a1 0a08 	sub.w	sl, r1, #8
 8011e8c:	edd3 7a05 	vldr	s15, [r3, #20]
 8011e90:	ed93 4a04 	vldr	s8, [r3, #16]
 8011e94:	f1ba 0f03 	cmp.w	sl, #3
 8011e98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011e9c:	edd2 4a04 	vldr	s9, [r2, #16]
 8011ea0:	ed93 5a06 	vldr	s10, [r3, #24]
 8011ea4:	edd2 5a06 	vldr	s11, [r2, #24]
 8011ea8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011eac:	ed93 6a07 	vldr	s12, [r3, #28]
 8011eb0:	edd2 6a07 	vldr	s13, [r2, #28]
 8011eb4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011eb8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011ec0:	d919      	bls.n	8011ef6 <forward_lite_dense_if32of32wf32+0x1f6>
 8011ec2:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8011ec6:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8011eca:	ed92 4a08 	vldr	s8, [r2, #32]
 8011ece:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011ed2:	edd3 4a08 	vldr	s9, [r3, #32]
 8011ed6:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8011eda:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8011ede:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011ee2:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8011ee6:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8011eea:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011eee:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011ef2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011ef6:	0880      	lsrs	r0, r0, #2
 8011ef8:	f001 0103 	and.w	r1, r1, #3
 8011efc:	3001      	adds	r0, #1
 8011efe:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8011f02:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8011f06:	b1a9      	cbz	r1, 8011f34 <forward_lite_dense_if32of32wf32+0x234>
 8011f08:	edd3 6a00 	vldr	s13, [r3]
 8011f0c:	3901      	subs	r1, #1
 8011f0e:	edd2 7a00 	vldr	s15, [r2]
 8011f12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011f16:	d00d      	beq.n	8011f34 <forward_lite_dense_if32of32wf32+0x234>
 8011f18:	edd3 6a01 	vldr	s13, [r3, #4]
 8011f1c:	2901      	cmp	r1, #1
 8011f1e:	edd2 7a01 	vldr	s15, [r2, #4]
 8011f22:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011f26:	d005      	beq.n	8011f34 <forward_lite_dense_if32of32wf32+0x234>
 8011f28:	edd2 6a02 	vldr	s13, [r2, #8]
 8011f2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011f30:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011f34:	eca6 7a01 	vstmia	r6!, {s14}
 8011f38:	45b6      	cmp	lr, r6
 8011f3a:	444d      	add	r5, r9
 8011f3c:	f63f af0a 	bhi.w	8011d54 <forward_lite_dense_if32of32wf32+0x54>
 8011f40:	697a      	ldr	r2, [r7, #20]
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	b9b3      	cbnz	r3, 8011f74 <forward_lite_dense_if32of32wf32+0x274>
 8011f46:	9b00      	ldr	r3, [sp, #0]
 8011f48:	0096      	lsls	r6, r2, #2
 8011f4a:	9901      	ldr	r1, [sp, #4]
 8011f4c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011f50:	693c      	ldr	r4, [r7, #16]
 8011f52:	4299      	cmp	r1, r3
 8011f54:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8011f58:	9300      	str	r3, [sp, #0]
 8011f5a:	f63f aee7 	bhi.w	8011d2c <forward_lite_dense_if32of32wf32+0x2c>
 8011f5e:	b003      	add	sp, #12
 8011f60:	ecbd 8b0c 	vpop	{d8-d13}
 8011f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f68:	4621      	mov	r1, r4
 8011f6a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8011fb8 <forward_lite_dense_if32of32wf32+0x2b8>
 8011f6e:	462a      	mov	r2, r5
 8011f70:	4643      	mov	r3, r8
 8011f72:	e766      	b.n	8011e42 <forward_lite_dense_if32of32wf32+0x142>
 8011f74:	2a00      	cmp	r2, #0
 8011f76:	d0e6      	beq.n	8011f46 <forward_lite_dense_if32of32wf32+0x246>
 8011f78:	9a00      	ldr	r2, [sp, #0]
 8011f7a:	ed93 7a00 	vldr	s14, [r3]
 8011f7e:	edd2 7a00 	vldr	s15, [r2]
 8011f82:	4613      	mov	r3, r2
 8011f84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011f88:	edc2 7a00 	vstr	s15, [r2]
 8011f8c:	697a      	ldr	r2, [r7, #20]
 8011f8e:	2a01      	cmp	r2, #1
 8011f90:	d9d9      	bls.n	8011f46 <forward_lite_dense_if32of32wf32+0x246>
 8011f92:	1d19      	adds	r1, r3, #4
 8011f94:	2301      	movs	r3, #1
 8011f96:	68fa      	ldr	r2, [r7, #12]
 8011f98:	ed91 7a00 	vldr	s14, [r1]
 8011f9c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	edd2 7a00 	vldr	s15, [r2]
 8011fa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011faa:	ece1 7a01 	vstmia	r1!, {s15}
 8011fae:	697a      	ldr	r2, [r7, #20]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d8f0      	bhi.n	8011f96 <forward_lite_dense_if32of32wf32+0x296>
 8011fb4:	e7c7      	b.n	8011f46 <forward_lite_dense_if32of32wf32+0x246>
 8011fb6:	bf00      	nop
 8011fb8:	00000000 	.word	0x00000000

08011fbc <forward_lite_dense_if32of32wf32_lut4>:
 8011fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc0:	b08d      	sub	sp, #52	@ 0x34
 8011fc2:	4605      	mov	r5, r0
 8011fc4:	460c      	mov	r4, r1
 8011fc6:	9005      	str	r0, [sp, #20]
 8011fc8:	4618      	mov	r0, r3
 8011fca:	920a      	str	r2, [sp, #40]	@ 0x28
 8011fcc:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8011fce:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8011fd2:	fb02 f303 	mul.w	r3, r2, r3
 8011fd6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011fda:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8011fdc:	9308      	str	r3, [sp, #32]
 8011fde:	b126      	cbz	r6, 8011fea <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8011fe0:	2240      	movs	r2, #64	@ 0x40
 8011fe2:	4631      	mov	r1, r6
 8011fe4:	f000 fbe0 	bl	80127a8 <st_int8_copy>
 8011fe8:	4630      	mov	r0, r6
 8011fea:	9b05      	ldr	r3, [sp, #20]
 8011fec:	9a08      	ldr	r2, [sp, #32]
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	f080 80f7 	bcs.w	80121e2 <forward_lite_dense_if32of32wf32_lut4+0x226>
 8011ff4:	08eb      	lsrs	r3, r5, #3
 8011ff6:	f005 0101 	and.w	r1, r5, #1
 8011ffa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011ffc:	f025 0801 	bic.w	r8, r5, #1
 8012000:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8012004:	9301      	str	r3, [sp, #4]
 8012006:	009b      	lsls	r3, r3, #2
 8012008:	9102      	str	r1, [sp, #8]
 801200a:	0092      	lsls	r2, r2, #2
 801200c:	f104 0b20 	add.w	fp, r4, #32
 8012010:	00a9      	lsls	r1, r5, #2
 8012012:	9304      	str	r3, [sp, #16]
 8012014:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8012018:	9b05      	ldr	r3, [sp, #20]
 801201a:	9207      	str	r2, [sp, #28]
 801201c:	9109      	str	r1, [sp, #36]	@ 0x24
 801201e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012020:	9a07      	ldr	r2, [sp, #28]
 8012022:	eb03 0902 	add.w	r9, r3, r2
 8012026:	f1ab 0220 	sub.w	r2, fp, #32
 801202a:	4599      	cmp	r9, r3
 801202c:	9206      	str	r2, [sp, #24]
 801202e:	f240 80db 	bls.w	80121e8 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8012032:	469e      	mov	lr, r3
 8012034:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012036:	f108 33ff 	add.w	r3, r8, #4294967295
 801203a:	9303      	str	r3, [sp, #12]
 801203c:	9b01      	ldr	r3, [sp, #4]
 801203e:	2b00      	cmp	r3, #0
 8012040:	f000 80b4 	beq.w	80121ac <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8012044:	9b04      	ldr	r3, [sp, #16]
 8012046:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 801220c <forward_lite_dense_if32of32wf32_lut4+0x250>
 801204a:	18d4      	adds	r4, r2, r3
 801204c:	465b      	mov	r3, fp
 801204e:	7816      	ldrb	r6, [r2, #0]
 8012050:	3204      	adds	r2, #4
 8012052:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8012056:	3320      	adds	r3, #32
 8012058:	f006 070f 	and.w	r7, r6, #15
 801205c:	0936      	lsrs	r6, r6, #4
 801205e:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 8012062:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8012066:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 801206a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801206e:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 8012072:	edd7 7a00 	vldr	s15, [r7]
 8012076:	ed96 3a00 	vldr	s6, [r6]
 801207a:	092e      	lsrs	r6, r5, #4
 801207c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8012080:	f005 050f 	and.w	r5, r5, #15
 8012084:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8012088:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801208c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8012090:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 8012094:	eee3 7a04 	vfma.f32	s15, s6, s8
 8012098:	ed96 3a00 	vldr	s6, [r6]
 801209c:	ed95 4a00 	vldr	s8, [r5]
 80120a0:	090d      	lsrs	r5, r1, #4
 80120a2:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 80120a6:	f001 010f 	and.w	r1, r1, #15
 80120aa:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80120ae:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 80120b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80120b6:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 80120ba:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 80120be:	eee3 7a23 	vfma.f32	s15, s6, s7
 80120c2:	eee4 7a05 	vfma.f32	s15, s8, s10
 80120c6:	ed95 4a00 	vldr	s8, [r5]
 80120ca:	ed91 5a00 	vldr	s10, [r1]
 80120ce:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80120d2:	42a2      	cmp	r2, r4
 80120d4:	ea4f 1511 	mov.w	r5, r1, lsr #4
 80120d8:	f001 010f 	and.w	r1, r1, #15
 80120dc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80120e0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80120e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80120e8:	eee5 7a06 	vfma.f32	s15, s10, s12
 80120ec:	ed95 5a00 	vldr	s10, [r5]
 80120f0:	ed91 6a00 	vldr	s12, [r1]
 80120f4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80120f8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80120fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012100:	d1a5      	bne.n	801204e <forward_lite_dense_if32of32wf32_lut4+0x92>
 8012102:	4656      	mov	r6, sl
 8012104:	4546      	cmp	r6, r8
 8012106:	d257      	bcs.n	80121b8 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8012108:	9b03      	ldr	r3, [sp, #12]
 801210a:	f106 0208 	add.w	r2, r6, #8
 801210e:	1e61      	subs	r1, r4, #1
 8012110:	1b9d      	subs	r5, r3, r6
 8012112:	08ef      	lsrs	r7, r5, #3
 8012114:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 8012118:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801211c:	3208      	adds	r2, #8
 801211e:	ed52 5a03 	vldr	s11, [r2, #-12]
 8012122:	f003 0c0f 	and.w	ip, r3, #15
 8012126:	091b      	lsrs	r3, r3, #4
 8012128:	ed52 6a04 	vldr	s13, [r2, #-16]
 801212c:	42a9      	cmp	r1, r5
 801212e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8012132:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012136:	eddc 7a00 	vldr	s15, [ip]
 801213a:	ed93 6a00 	vldr	s12, [r3]
 801213e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012142:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012146:	ee37 7a27 	vadd.f32	s14, s14, s15
 801214a:	d1e5      	bne.n	8012118 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 801214c:	3701      	adds	r7, #1
 801214e:	19e2      	adds	r2, r4, r7
 8012150:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8012154:	9b02      	ldr	r3, [sp, #8]
 8012156:	b30b      	cbz	r3, 801219c <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 8012158:	f812 3b01 	ldrb.w	r3, [r2], #1
 801215c:	edd6 7a00 	vldr	s15, [r6]
 8012160:	091b      	lsrs	r3, r3, #4
 8012162:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012166:	edd3 6a00 	vldr	s13, [r3]
 801216a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801216e:	ecae 7a01 	vstmia	lr!, {s14}
 8012172:	45f1      	cmp	r9, lr
 8012174:	f63f af62 	bhi.w	801203c <forward_lite_dense_if32of32wf32_lut4+0x80>
 8012178:	9b05      	ldr	r3, [sp, #20]
 801217a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801217c:	1899      	adds	r1, r3, r2
 801217e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012180:	b9e3      	cbnz	r3, 80121bc <forward_lite_dense_if32of32wf32_lut4+0x200>
 8012182:	9b08      	ldr	r3, [sp, #32]
 8012184:	428b      	cmp	r3, r1
 8012186:	d92c      	bls.n	80121e2 <forward_lite_dense_if32of32wf32_lut4+0x226>
 8012188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801218a:	4498      	add	r8, r3
 801218c:	449a      	add	sl, r3
 801218e:	449b      	add	fp, r3
 8012190:	9b05      	ldr	r3, [sp, #20]
 8012192:	4599      	cmp	r9, r3
 8012194:	d92a      	bls.n	80121ec <forward_lite_dense_if32of32wf32_lut4+0x230>
 8012196:	460b      	mov	r3, r1
 8012198:	9105      	str	r1, [sp, #20]
 801219a:	e741      	b.n	8012020 <forward_lite_dense_if32of32wf32_lut4+0x64>
 801219c:	ecae 7a01 	vstmia	lr!, {s14}
 80121a0:	45f1      	cmp	r9, lr
 80121a2:	d9e9      	bls.n	8012178 <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 80121a4:	9b01      	ldr	r3, [sp, #4]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	f47f af4c 	bne.w	8012044 <forward_lite_dense_if32of32wf32_lut4+0x88>
 80121ac:	9e06      	ldr	r6, [sp, #24]
 80121ae:	4614      	mov	r4, r2
 80121b0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 801220c <forward_lite_dense_if32of32wf32_lut4+0x250>
 80121b4:	4546      	cmp	r6, r8
 80121b6:	d3a7      	bcc.n	8012108 <forward_lite_dense_if32of32wf32_lut4+0x14c>
 80121b8:	4622      	mov	r2, r4
 80121ba:	e7cb      	b.n	8012154 <forward_lite_dense_if32of32wf32_lut4+0x198>
 80121bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d0df      	beq.n	8012182 <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 80121c2:	9b07      	ldr	r3, [sp, #28]
 80121c4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80121c6:	1acb      	subs	r3, r1, r3
 80121c8:	edd3 7a00 	vldr	s15, [r3]
 80121cc:	ecb2 7a01 	vldmia	r2!, {s14}
 80121d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80121d4:	ece3 7a01 	vstmia	r3!, {s15}
 80121d8:	428b      	cmp	r3, r1
 80121da:	d1f5      	bne.n	80121c8 <forward_lite_dense_if32of32wf32_lut4+0x20c>
 80121dc:	9b08      	ldr	r3, [sp, #32]
 80121de:	428b      	cmp	r3, r1
 80121e0:	d8d2      	bhi.n	8012188 <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 80121e2:	b00d      	add	sp, #52	@ 0x34
 80121e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121e8:	4619      	mov	r1, r3
 80121ea:	e7c8      	b.n	801217e <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 80121ec:	9b07      	ldr	r3, [sp, #28]
 80121ee:	1acb      	subs	r3, r1, r3
 80121f0:	461a      	mov	r2, r3
 80121f2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80121f4:	ed92 7a00 	vldr	s14, [r2]
 80121f8:	ecf0 7a01 	vldmia	r0!, {s15}
 80121fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012200:	ece2 7a01 	vstmia	r2!, {s15}
 8012204:	428a      	cmp	r2, r1
 8012206:	d1f5      	bne.n	80121f4 <forward_lite_dense_if32of32wf32_lut4+0x238>
 8012208:	e7f2      	b.n	80121f0 <forward_lite_dense_if32of32wf32_lut4+0x234>
 801220a:	bf00      	nop
 801220c:	00000000 	.word	0x00000000

08012210 <forward_lite_dense_if32of32wf32_lut8>:
 8012210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012214:	b091      	sub	sp, #68	@ 0x44
 8012216:	4699      	mov	r9, r3
 8012218:	468b      	mov	fp, r1
 801221a:	920e      	str	r2, [sp, #56]	@ 0x38
 801221c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801221e:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 8012222:	9003      	str	r0, [sp, #12]
 8012224:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 8012228:	fb02 f303 	mul.w	r3, r2, r3
 801222c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012230:	930c      	str	r3, [sp, #48]	@ 0x30
 8012232:	b134      	cbz	r4, 8012242 <forward_lite_dense_if32of32wf32_lut8+0x32>
 8012234:	4648      	mov	r0, r9
 8012236:	46a1      	mov	r9, r4
 8012238:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801223c:	4621      	mov	r1, r4
 801223e:	f000 fab3 	bl	80127a8 <st_int8_copy>
 8012242:	9b03      	ldr	r3, [sp, #12]
 8012244:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012246:	4293      	cmp	r3, r2
 8012248:	f080 8084 	bcs.w	8012354 <forward_lite_dense_if32of32wf32_lut8+0x144>
 801224c:	4bb7      	ldr	r3, [pc, #732]	@ (801252c <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 801224e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012250:	4443      	add	r3, r8
 8012252:	9d03      	ldr	r5, [sp, #12]
 8012254:	0092      	lsls	r2, r2, #2
 8012256:	eddf 3ab6 	vldr	s7, [pc, #728]	@ 8012530 <forward_lite_dense_if32of32wf32_lut8+0x320>
 801225a:	009b      	lsls	r3, r3, #2
 801225c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801225e:	f103 0120 	add.w	r1, r3, #32
 8012262:	930d      	str	r3, [sp, #52]	@ 0x34
 8012264:	445b      	add	r3, fp
 8012266:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012268:	9105      	str	r1, [sp, #20]
 801226a:	9300      	str	r3, [sp, #0]
 801226c:	eb0b 0301 	add.w	r3, fp, r1
 8012270:	469a      	mov	sl, r3
 8012272:	469e      	mov	lr, r3
 8012274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012276:	eb05 0c03 	add.w	ip, r5, r3
 801227a:	45ac      	cmp	ip, r5
 801227c:	d952      	bls.n	8012324 <forward_lite_dense_if32of32wf32_lut8+0x114>
 801227e:	9800      	ldr	r0, [sp, #0]
 8012280:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012282:	f100 011f 	add.w	r1, r0, #31
 8012286:	eba0 020b 	sub.w	r2, r0, fp
 801228a:	445b      	add	r3, fp
 801228c:	9101      	str	r1, [sp, #4]
 801228e:	eba1 010b 	sub.w	r1, r1, fp
 8012292:	0952      	lsrs	r2, r2, #5
 8012294:	9306      	str	r3, [sp, #24]
 8012296:	0889      	lsrs	r1, r1, #2
 8012298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801229a:	3101      	adds	r1, #1
 801229c:	9102      	str	r1, [sp, #8]
 801229e:	1c51      	adds	r1, r2, #1
 80122a0:	00d2      	lsls	r2, r2, #3
 80122a2:	3210      	adds	r2, #16
 80122a4:	920a      	str	r2, [sp, #40]	@ 0x28
 80122a6:	00ca      	lsls	r2, r1, #3
 80122a8:	9208      	str	r2, [sp, #32]
 80122aa:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 80122ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80122b0:	1f02      	subs	r2, r0, #4
 80122b2:	9204      	str	r2, [sp, #16]
 80122b4:	f10b 0204 	add.w	r2, fp, #4
 80122b8:	9207      	str	r2, [sp, #28]
 80122ba:	f1b8 0f07 	cmp.w	r8, #7
 80122be:	d84c      	bhi.n	801235a <forward_lite_dense_if32of32wf32_lut8+0x14a>
 80122c0:	45d3      	cmp	fp, sl
 80122c2:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8012530 <forward_lite_dense_if32of32wf32_lut8+0x320>
 80122c6:	d20f      	bcs.n	80122e8 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80122c8:	4659      	mov	r1, fp
 80122ca:	4618      	mov	r0, r3
 80122cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122d0:	ecf1 7a01 	vldmia	r1!, {s15}
 80122d4:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80122d8:	4551      	cmp	r1, sl
 80122da:	edd2 6a00 	vldr	s13, [r2]
 80122de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80122e2:	d3f3      	bcc.n	80122cc <forward_lite_dense_if32of32wf32_lut8+0xbc>
 80122e4:	9a02      	ldr	r2, [sp, #8]
 80122e6:	4413      	add	r3, r2
 80122e8:	eca5 7a01 	vstmia	r5!, {s14}
 80122ec:	45ac      	cmp	ip, r5
 80122ee:	d8e4      	bhi.n	80122ba <forward_lite_dense_if32of32wf32_lut8+0xaa>
 80122f0:	9b03      	ldr	r3, [sp, #12]
 80122f2:	46f3      	mov	fp, lr
 80122f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80122f6:	1899      	adds	r1, r3, r2
 80122f8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80122fa:	b9c3      	cbnz	r3, 801232e <forward_lite_dense_if32of32wf32_lut8+0x11e>
 80122fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80122fe:	428b      	cmp	r3, r1
 8012300:	d928      	bls.n	8012354 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8012302:	9b00      	ldr	r3, [sp, #0]
 8012304:	9a05      	ldr	r2, [sp, #20]
 8012306:	4413      	add	r3, r2
 8012308:	4492      	add	sl, r2
 801230a:	9300      	str	r3, [sp, #0]
 801230c:	9b03      	ldr	r3, [sp, #12]
 801230e:	459c      	cmp	ip, r3
 8012310:	f240 821e 	bls.w	8012750 <forward_lite_dense_if32of32wf32_lut8+0x540>
 8012314:	460d      	mov	r5, r1
 8012316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012318:	4496      	add	lr, r2
 801231a:	9103      	str	r1, [sp, #12]
 801231c:	eb05 0c03 	add.w	ip, r5, r3
 8012320:	45ac      	cmp	ip, r5
 8012322:	d8ac      	bhi.n	801227e <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8012324:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012326:	4629      	mov	r1, r5
 8012328:	46f3      	mov	fp, lr
 801232a:	2b00      	cmp	r3, #0
 801232c:	d0e6      	beq.n	80122fc <forward_lite_dense_if32of32wf32_lut8+0xec>
 801232e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012330:	2b00      	cmp	r3, #0
 8012332:	d0e3      	beq.n	80122fc <forward_lite_dense_if32of32wf32_lut8+0xec>
 8012334:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012336:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8012338:	1acb      	subs	r3, r1, r3
 801233a:	edd3 7a00 	vldr	s15, [r3]
 801233e:	ecb2 7a01 	vldmia	r2!, {s14}
 8012342:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012346:	ece3 7a01 	vstmia	r3!, {s15}
 801234a:	428b      	cmp	r3, r1
 801234c:	d1f5      	bne.n	801233a <forward_lite_dense_if32of32wf32_lut8+0x12a>
 801234e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012350:	428b      	cmp	r3, r1
 8012352:	d8d6      	bhi.n	8012302 <forward_lite_dense_if32of32wf32_lut8+0xf2>
 8012354:	b011      	add	sp, #68	@ 0x44
 8012356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801235a:	f003 0203 	and.w	r2, r3, #3
 801235e:	2a02      	cmp	r2, #2
 8012360:	f000 81ee 	beq.w	8012740 <forward_lite_dense_if32of32wf32_lut8+0x530>
 8012364:	2a03      	cmp	r2, #3
 8012366:	f000 80e5 	beq.w	8012534 <forward_lite_dense_if32of32wf32_lut8+0x324>
 801236a:	2a01      	cmp	r2, #1
 801236c:	f000 81d2 	beq.w	8012714 <forward_lite_dense_if32of32wf32_lut8+0x504>
 8012370:	9a06      	ldr	r2, [sp, #24]
 8012372:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8012530 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8012376:	4593      	cmp	fp, r2
 8012378:	f200 81e8 	bhi.w	801274c <forward_lite_dense_if32of32wf32_lut8+0x53c>
 801237c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801237e:	f103 0208 	add.w	r2, r3, #8
 8012382:	f10b 0120 	add.w	r1, fp, #32
 8012386:	18c4      	adds	r4, r0, r3
 8012388:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 801238c:	3208      	adds	r2, #8
 801238e:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 8012392:	3120      	adds	r1, #32
 8012394:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8012398:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 801239c:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 80123a0:	edd0 7a00 	vldr	s15, [r0]
 80123a4:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 80123a8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80123ac:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 80123b0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80123b4:	ed11 5a0c 	vldr	s10, [r1, #-48]	@ 0xffffffd0
 80123b8:	ed51 5a0b 	vldr	s11, [r1, #-44]	@ 0xffffffd4
 80123bc:	edd0 2a00 	vldr	s5, [r0]
 80123c0:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 80123c4:	eee2 7a83 	vfma.f32	s15, s5, s6
 80123c8:	ed11 6a0a 	vldr	s12, [r1, #-40]	@ 0xffffffd8
 80123cc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80123d0:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 80123d4:	ed90 3a00 	vldr	s6, [r0]
 80123d8:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 80123dc:	eee3 7a04 	vfma.f32	s15, s6, s8
 80123e0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80123e4:	ed90 4a00 	vldr	s8, [r0]
 80123e8:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 80123ec:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80123f0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80123f4:	edd0 4a00 	vldr	s9, [r0]
 80123f8:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 80123fc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8012400:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012404:	ed90 5a00 	vldr	s10, [r0]
 8012408:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 801240c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8012410:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012414:	edd0 5a00 	vldr	s11, [r0]
 8012418:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 801241c:	42a2      	cmp	r2, r4
 801241e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8012422:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012426:	ed90 6a00 	vldr	s12, [r0]
 801242a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801242e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012432:	d1a9      	bne.n	8012388 <forward_lite_dense_if32of32wf32_lut8+0x178>
 8012434:	9a08      	ldr	r2, [sp, #32]
 8012436:	4413      	add	r3, r2
 8012438:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801243a:	4572      	cmp	r2, lr
 801243c:	f4bf af54 	bcs.w	80122e8 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8012440:	7819      	ldrb	r1, [r3, #0]
 8012442:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012446:	edd1 7a00 	vldr	s15, [r1]
 801244a:	4611      	mov	r1, r2
 801244c:	ecf1 6a01 	vldmia	r1!, {s13}
 8012450:	458a      	cmp	sl, r1
 8012452:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012456:	d963      	bls.n	8012520 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8012458:	7859      	ldrb	r1, [r3, #1]
 801245a:	edd2 6a01 	vldr	s13, [r2, #4]
 801245e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012462:	edd1 7a00 	vldr	s15, [r1]
 8012466:	f102 0108 	add.w	r1, r2, #8
 801246a:	458a      	cmp	sl, r1
 801246c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012470:	d956      	bls.n	8012520 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8012472:	7899      	ldrb	r1, [r3, #2]
 8012474:	edd2 6a02 	vldr	s13, [r2, #8]
 8012478:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801247c:	edd1 7a00 	vldr	s15, [r1]
 8012480:	f102 010c 	add.w	r1, r2, #12
 8012484:	458a      	cmp	sl, r1
 8012486:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801248a:	d949      	bls.n	8012520 <forward_lite_dense_if32of32wf32_lut8+0x310>
 801248c:	78d9      	ldrb	r1, [r3, #3]
 801248e:	edd2 6a03 	vldr	s13, [r2, #12]
 8012492:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012496:	edd1 7a00 	vldr	s15, [r1]
 801249a:	f102 0110 	add.w	r1, r2, #16
 801249e:	458a      	cmp	sl, r1
 80124a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80124a4:	d93c      	bls.n	8012520 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80124a6:	7919      	ldrb	r1, [r3, #4]
 80124a8:	edd2 6a04 	vldr	s13, [r2, #16]
 80124ac:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80124b0:	edd1 7a00 	vldr	s15, [r1]
 80124b4:	f102 0114 	add.w	r1, r2, #20
 80124b8:	458a      	cmp	sl, r1
 80124ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80124be:	d92f      	bls.n	8012520 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80124c0:	7959      	ldrb	r1, [r3, #5]
 80124c2:	edd2 6a05 	vldr	s13, [r2, #20]
 80124c6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80124ca:	edd1 7a00 	vldr	s15, [r1]
 80124ce:	f102 0118 	add.w	r1, r2, #24
 80124d2:	458a      	cmp	sl, r1
 80124d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80124d8:	d922      	bls.n	8012520 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80124da:	7999      	ldrb	r1, [r3, #6]
 80124dc:	edd2 6a06 	vldr	s13, [r2, #24]
 80124e0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80124e4:	edd1 7a00 	vldr	s15, [r1]
 80124e8:	f102 011c 	add.w	r1, r2, #28
 80124ec:	458a      	cmp	sl, r1
 80124ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80124f2:	d915      	bls.n	8012520 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80124f4:	79d9      	ldrb	r1, [r3, #7]
 80124f6:	edd2 6a07 	vldr	s13, [r2, #28]
 80124fa:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80124fe:	edd1 7a00 	vldr	s15, [r1]
 8012502:	f102 0120 	add.w	r1, r2, #32
 8012506:	458a      	cmp	sl, r1
 8012508:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801250c:	d908      	bls.n	8012520 <forward_lite_dense_if32of32wf32_lut8+0x310>
 801250e:	7a19      	ldrb	r1, [r3, #8]
 8012510:	edd2 7a08 	vldr	s15, [r2, #32]
 8012514:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012518:	edd1 6a00 	vldr	s13, [r1]
 801251c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012520:	9901      	ldr	r1, [sp, #4]
 8012522:	1a8a      	subs	r2, r1, r2
 8012524:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 8012528:	1c53      	adds	r3, r2, #1
 801252a:	e6dd      	b.n	80122e8 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 801252c:	3ffffff8 	.word	0x3ffffff8
 8012530:	00000000 	.word	0x00000000
 8012534:	eeb0 7a63 	vmov.f32	s14, s7
 8012538:	465a      	mov	r2, fp
 801253a:	461f      	mov	r7, r3
 801253c:	4610      	mov	r0, r2
 801253e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012542:	ecf0 7a01 	vldmia	r0!, {s15}
 8012546:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801254a:	edd1 6a00 	vldr	s13, [r1]
 801254e:	9900      	ldr	r1, [sp, #0]
 8012550:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012554:	4288      	cmp	r0, r1
 8012556:	f200 80f7 	bhi.w	8012748 <forward_lite_dense_if32of32wf32_lut8+0x538>
 801255a:	9904      	ldr	r1, [sp, #16]
 801255c:	f103 0411 	add.w	r4, r3, #17
 8012560:	3309      	adds	r3, #9
 8012562:	1a8e      	subs	r6, r1, r2
 8012564:	3224      	adds	r2, #36	@ 0x24
 8012566:	0976      	lsrs	r6, r6, #5
 8012568:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801256c:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8012570:	3308      	adds	r3, #8
 8012572:	ed52 2a07 	vldr	s5, [r2, #-28]	@ 0xffffffe4
 8012576:	3220      	adds	r2, #32
 8012578:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801257c:	ed12 3a10 	vldr	s6, [r2, #-64]	@ 0xffffffc0
 8012580:	ed12 4a0e 	vldr	s8, [r2, #-56]	@ 0xffffffc8
 8012584:	edd1 7a00 	vldr	s15, [r1]
 8012588:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 801258c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8012590:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8012594:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012598:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 801259c:	ed52 5a0b 	vldr	s11, [r2, #-44]	@ 0xffffffd4
 80125a0:	edd1 2a00 	vldr	s5, [r1]
 80125a4:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 80125a8:	eee2 7a83 	vfma.f32	s15, s5, s6
 80125ac:	ed12 6a0a 	vldr	s12, [r2, #-40]	@ 0xffffffd8
 80125b0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80125b4:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 80125b8:	ed91 3a00 	vldr	s6, [r1]
 80125bc:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 80125c0:	eee3 7a04 	vfma.f32	s15, s6, s8
 80125c4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80125c8:	ed91 4a00 	vldr	s8, [r1]
 80125cc:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 80125d0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80125d4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80125d8:	edd1 4a00 	vldr	s9, [r1]
 80125dc:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 80125e0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80125e4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80125e8:	ed91 5a00 	vldr	s10, [r1]
 80125ec:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 80125f0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80125f4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80125f8:	edd1 5a00 	vldr	s11, [r1]
 80125fc:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8012600:	42a3      	cmp	r3, r4
 8012602:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012606:	eee5 7a86 	vfma.f32	s15, s11, s12
 801260a:	ed91 6a00 	vldr	s12, [r1]
 801260e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012612:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012616:	d1a9      	bne.n	801256c <forward_lite_dense_if32of32wf32_lut8+0x35c>
 8012618:	3601      	adds	r6, #1
 801261a:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 801261e:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8012622:	4550      	cmp	r0, sl
 8012624:	f4bf ae60 	bcs.w	80122e8 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8012628:	781a      	ldrb	r2, [r3, #0]
 801262a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801262e:	edd2 7a00 	vldr	s15, [r2]
 8012632:	4602      	mov	r2, r0
 8012634:	ecf2 6a01 	vldmia	r2!, {s13}
 8012638:	4592      	cmp	sl, r2
 801263a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801263e:	d963      	bls.n	8012708 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012640:	785a      	ldrb	r2, [r3, #1]
 8012642:	edd0 6a01 	vldr	s13, [r0, #4]
 8012646:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801264a:	edd2 7a00 	vldr	s15, [r2]
 801264e:	f100 0208 	add.w	r2, r0, #8
 8012652:	4592      	cmp	sl, r2
 8012654:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012658:	d956      	bls.n	8012708 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801265a:	789a      	ldrb	r2, [r3, #2]
 801265c:	edd0 6a02 	vldr	s13, [r0, #8]
 8012660:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012664:	edd2 7a00 	vldr	s15, [r2]
 8012668:	f100 020c 	add.w	r2, r0, #12
 801266c:	4592      	cmp	sl, r2
 801266e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012672:	d949      	bls.n	8012708 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012674:	78da      	ldrb	r2, [r3, #3]
 8012676:	edd0 6a03 	vldr	s13, [r0, #12]
 801267a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801267e:	edd2 7a00 	vldr	s15, [r2]
 8012682:	f100 0210 	add.w	r2, r0, #16
 8012686:	4592      	cmp	sl, r2
 8012688:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801268c:	d93c      	bls.n	8012708 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801268e:	791a      	ldrb	r2, [r3, #4]
 8012690:	edd0 6a04 	vldr	s13, [r0, #16]
 8012694:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012698:	edd2 7a00 	vldr	s15, [r2]
 801269c:	f100 0214 	add.w	r2, r0, #20
 80126a0:	4592      	cmp	sl, r2
 80126a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80126a6:	d92f      	bls.n	8012708 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80126a8:	795a      	ldrb	r2, [r3, #5]
 80126aa:	edd0 6a05 	vldr	s13, [r0, #20]
 80126ae:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80126b2:	edd2 7a00 	vldr	s15, [r2]
 80126b6:	f100 0218 	add.w	r2, r0, #24
 80126ba:	4596      	cmp	lr, r2
 80126bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80126c0:	d922      	bls.n	8012708 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80126c2:	799a      	ldrb	r2, [r3, #6]
 80126c4:	edd0 6a06 	vldr	s13, [r0, #24]
 80126c8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80126cc:	edd2 7a00 	vldr	s15, [r2]
 80126d0:	f100 021c 	add.w	r2, r0, #28
 80126d4:	4596      	cmp	lr, r2
 80126d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80126da:	d915      	bls.n	8012708 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80126dc:	79da      	ldrb	r2, [r3, #7]
 80126de:	edd0 6a07 	vldr	s13, [r0, #28]
 80126e2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80126e6:	edd2 7a00 	vldr	s15, [r2]
 80126ea:	f100 0220 	add.w	r2, r0, #32
 80126ee:	4596      	cmp	lr, r2
 80126f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80126f4:	d908      	bls.n	8012708 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80126f6:	7a1a      	ldrb	r2, [r3, #8]
 80126f8:	edd0 7a08 	vldr	s15, [r0, #32]
 80126fc:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012700:	edd2 6a00 	vldr	s13, [r2]
 8012704:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012708:	9a01      	ldr	r2, [sp, #4]
 801270a:	1a10      	subs	r0, r2, r0
 801270c:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8012710:	1c43      	adds	r3, r0, #1
 8012712:	e5e9      	b.n	80122e8 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8012714:	f813 1b01 	ldrb.w	r1, [r3], #1
 8012718:	eddb 7a00 	vldr	s15, [fp]
 801271c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012720:	9a07      	ldr	r2, [sp, #28]
 8012722:	ed91 7a00 	vldr	s14, [r1]
 8012726:	ee27 7a27 	vmul.f32	s14, s14, s15
 801272a:	f813 1b01 	ldrb.w	r1, [r3], #1
 801272e:	ecf2 7a01 	vldmia	r2!, {s15}
 8012732:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012736:	edd1 6a00 	vldr	s13, [r1]
 801273a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801273e:	e6fc      	b.n	801253a <forward_lite_dense_if32of32wf32_lut8+0x32a>
 8012740:	eeb0 7a63 	vmov.f32	s14, s7
 8012744:	465a      	mov	r2, fp
 8012746:	e7f0      	b.n	801272a <forward_lite_dense_if32of32wf32_lut8+0x51a>
 8012748:	463b      	mov	r3, r7
 801274a:	e76a      	b.n	8012622 <forward_lite_dense_if32of32wf32_lut8+0x412>
 801274c:	465a      	mov	r2, fp
 801274e:	e674      	b.n	801243a <forward_lite_dense_if32of32wf32_lut8+0x22a>
 8012750:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012752:	1acb      	subs	r3, r1, r3
 8012754:	461a      	mov	r2, r3
 8012756:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8012758:	ed92 7a00 	vldr	s14, [r2]
 801275c:	ecf0 7a01 	vldmia	r0!, {s15}
 8012760:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012764:	ece2 7a01 	vstmia	r2!, {s15}
 8012768:	4291      	cmp	r1, r2
 801276a:	d1f5      	bne.n	8012758 <forward_lite_dense_if32of32wf32_lut8+0x548>
 801276c:	e7f2      	b.n	8012754 <forward_lite_dense_if32of32wf32_lut8+0x544>
 801276e:	bf00      	nop

08012770 <forward_lite_nl_relu_if32of32>:
 8012770:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8012774:	4413      	add	r3, r2
 8012776:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 801277a:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801277e:	4291      	cmp	r1, r2
 8012780:	d80f      	bhi.n	80127a2 <forward_lite_nl_relu_if32of32+0x32>
 8012782:	f10c 0104 	add.w	r1, ip, #4
 8012786:	1d13      	adds	r3, r2, #4
 8012788:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80127a4 <forward_lite_nl_relu_if32of32+0x34>
 801278c:	eba2 020c 	sub.w	r2, r2, ip
 8012790:	4408      	add	r0, r1
 8012792:	ed73 7a01 	vldmdb	r3!, {s15}
 8012796:	4293      	cmp	r3, r2
 8012798:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801279c:	ed60 7a01 	vstmdb	r0!, {s15}
 80127a0:	d1f7      	bne.n	8012792 <forward_lite_nl_relu_if32of32+0x22>
 80127a2:	4770      	bx	lr
 80127a4:	00000000 	.word	0x00000000

080127a8 <st_int8_copy>:
 80127a8:	4288      	cmp	r0, r1
 80127aa:	d010      	beq.n	80127ce <st_int8_copy+0x26>
 80127ac:	b17a      	cbz	r2, 80127ce <st_int8_copy+0x26>
 80127ae:	4288      	cmp	r0, r1
 80127b0:	eb00 0302 	add.w	r3, r0, r2
 80127b4:	d20c      	bcs.n	80127d0 <st_int8_copy+0x28>
 80127b6:	428b      	cmp	r3, r1
 80127b8:	d90a      	bls.n	80127d0 <st_int8_copy+0x28>
 80127ba:	4283      	cmp	r3, r0
 80127bc:	440a      	add	r2, r1
 80127be:	d906      	bls.n	80127ce <st_int8_copy+0x26>
 80127c0:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80127c4:	4283      	cmp	r3, r0
 80127c6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80127ca:	d1f9      	bne.n	80127c0 <st_int8_copy+0x18>
 80127cc:	4770      	bx	lr
 80127ce:	4770      	bx	lr
 80127d0:	078b      	lsls	r3, r1, #30
 80127d2:	d102      	bne.n	80127da <st_int8_copy+0x32>
 80127d4:	e008      	b.n	80127e8 <st_int8_copy+0x40>
 80127d6:	2a00      	cmp	r2, #0
 80127d8:	d04c      	beq.n	8012874 <st_int8_copy+0xcc>
 80127da:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80127de:	3a01      	subs	r2, #1
 80127e0:	f801 3b01 	strb.w	r3, [r1], #1
 80127e4:	078b      	lsls	r3, r1, #30
 80127e6:	d1f6      	bne.n	80127d6 <st_int8_copy+0x2e>
 80127e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127ec:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80127f0:	d05d      	beq.n	80128ae <st_int8_copy+0x106>
 80127f2:	ea41 0300 	orr.w	r3, r1, r0
 80127f6:	075b      	lsls	r3, r3, #29
 80127f8:	d13d      	bne.n	8012876 <st_int8_copy+0xce>
 80127fa:	f1be 0f01 	cmp.w	lr, #1
 80127fe:	d03a      	beq.n	8012876 <st_int8_copy+0xce>
 8012800:	f100 0310 	add.w	r3, r0, #16
 8012804:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8012808:	f101 0c10 	add.w	ip, r1, #16
 801280c:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8012810:	3310      	adds	r3, #16
 8012812:	f10c 0c10 	add.w	ip, ip, #16
 8012816:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 801281a:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 801281e:	4573      	cmp	r3, lr
 8012820:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 8012824:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 8012828:	d1f2      	bne.n	8012810 <st_int8_copy+0x68>
 801282a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 801282e:	4421      	add	r1, r4
 8012830:	4420      	add	r0, r4
 8012832:	f002 0203 	and.w	r2, r2, #3
 8012836:	b16b      	cbz	r3, 8012854 <st_int8_copy+0xac>
 8012838:	6804      	ldr	r4, [r0, #0]
 801283a:	600c      	str	r4, [r1, #0]
 801283c:	1e5c      	subs	r4, r3, #1
 801283e:	d005      	beq.n	801284c <st_int8_copy+0xa4>
 8012840:	6845      	ldr	r5, [r0, #4]
 8012842:	2c01      	cmp	r4, #1
 8012844:	604d      	str	r5, [r1, #4]
 8012846:	d001      	beq.n	801284c <st_int8_copy+0xa4>
 8012848:	6884      	ldr	r4, [r0, #8]
 801284a:	608c      	str	r4, [r1, #8]
 801284c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8012850:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012854:	b162      	cbz	r2, 8012870 <st_int8_copy+0xc8>
 8012856:	f990 3000 	ldrsb.w	r3, [r0]
 801285a:	3a01      	subs	r2, #1
 801285c:	700b      	strb	r3, [r1, #0]
 801285e:	d007      	beq.n	8012870 <st_int8_copy+0xc8>
 8012860:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012864:	2a01      	cmp	r2, #1
 8012866:	704b      	strb	r3, [r1, #1]
 8012868:	d002      	beq.n	8012870 <st_int8_copy+0xc8>
 801286a:	f990 3002 	ldrsb.w	r3, [r0, #2]
 801286e:	708b      	strb	r3, [r1, #2]
 8012870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012874:	4770      	bx	lr
 8012876:	ea4f 140e 	mov.w	r4, lr, lsl #4
 801287a:	460b      	mov	r3, r1
 801287c:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8012880:	4684      	mov	ip, r0
 8012882:	f8dc 8000 	ldr.w	r8, [ip]
 8012886:	3310      	adds	r3, #16
 8012888:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801288c:	f10c 0c10 	add.w	ip, ip, #16
 8012890:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8012894:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8012898:	f843 8c10 	str.w	r8, [r3, #-16]
 801289c:	f843 7c0c 	str.w	r7, [r3, #-12]
 80128a0:	f843 6c08 	str.w	r6, [r3, #-8]
 80128a4:	f843 5c04 	str.w	r5, [r3, #-4]
 80128a8:	459e      	cmp	lr, r3
 80128aa:	d1ea      	bne.n	8012882 <st_int8_copy+0xda>
 80128ac:	e7bd      	b.n	801282a <st_int8_copy+0x82>
 80128ae:	0893      	lsrs	r3, r2, #2
 80128b0:	f002 0203 	and.w	r2, r2, #3
 80128b4:	e7bf      	b.n	8012836 <st_int8_copy+0x8e>
 80128b6:	bf00      	nop

080128b8 <ai_array_to_buffer_fmt>:
 80128b8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80128bc:	2b02      	cmp	r3, #2
 80128be:	d053      	beq.n	8012968 <ai_array_to_buffer_fmt+0xb0>
 80128c0:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 80128c4:	4a2b      	ldr	r2, [pc, #172]	@ (8012974 <ai_array_to_buffer_fmt+0xbc>)
 80128c6:	4293      	cmp	r3, r2
 80128c8:	d010      	beq.n	80128ec <ai_array_to_buffer_fmt+0x34>
 80128ca:	dc21      	bgt.n	8012910 <ai_array_to_buffer_fmt+0x58>
 80128cc:	4a2a      	ldr	r2, [pc, #168]	@ (8012978 <ai_array_to_buffer_fmt+0xc0>)
 80128ce:	4293      	cmp	r3, r2
 80128d0:	d00c      	beq.n	80128ec <ai_array_to_buffer_fmt+0x34>
 80128d2:	dd0f      	ble.n	80128f4 <ai_array_to_buffer_fmt+0x3c>
 80128d4:	4a29      	ldr	r2, [pc, #164]	@ (801297c <ai_array_to_buffer_fmt+0xc4>)
 80128d6:	4293      	cmp	r3, r2
 80128d8:	d008      	beq.n	80128ec <ai_array_to_buffer_fmt+0x34>
 80128da:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 80128de:	4293      	cmp	r3, r2
 80128e0:	d004      	beq.n	80128ec <ai_array_to_buffer_fmt+0x34>
 80128e2:	4a27      	ldr	r2, [pc, #156]	@ (8012980 <ai_array_to_buffer_fmt+0xc8>)
 80128e4:	4293      	cmp	r3, r2
 80128e6:	bf0c      	ite	eq
 80128e8:	4613      	moveq	r3, r2
 80128ea:	2340      	movne	r3, #64	@ 0x40
 80128ec:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80128f0:	4318      	orrs	r0, r3
 80128f2:	4770      	bx	lr
 80128f4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d0f7      	beq.n	80128ec <ai_array_to_buffer_fmt+0x34>
 80128fc:	dd2a      	ble.n	8012954 <ai_array_to_buffer_fmt+0x9c>
 80128fe:	4a21      	ldr	r2, [pc, #132]	@ (8012984 <ai_array_to_buffer_fmt+0xcc>)
 8012900:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8012904:	4293      	cmp	r3, r2
 8012906:	bf0c      	ite	eq
 8012908:	4613      	moveq	r3, r2
 801290a:	2340      	movne	r3, #64	@ 0x40
 801290c:	4318      	orrs	r0, r3
 801290e:	4770      	bx	lr
 8012910:	4a1d      	ldr	r2, [pc, #116]	@ (8012988 <ai_array_to_buffer_fmt+0xd0>)
 8012912:	4293      	cmp	r3, r2
 8012914:	d0ea      	beq.n	80128ec <ai_array_to_buffer_fmt+0x34>
 8012916:	dd0f      	ble.n	8012938 <ai_array_to_buffer_fmt+0x80>
 8012918:	4a1c      	ldr	r2, [pc, #112]	@ (801298c <ai_array_to_buffer_fmt+0xd4>)
 801291a:	4293      	cmp	r3, r2
 801291c:	d0e6      	beq.n	80128ec <ai_array_to_buffer_fmt+0x34>
 801291e:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 8012922:	4293      	cmp	r3, r2
 8012924:	d0e2      	beq.n	80128ec <ai_array_to_buffer_fmt+0x34>
 8012926:	4a1a      	ldr	r2, [pc, #104]	@ (8012990 <ai_array_to_buffer_fmt+0xd8>)
 8012928:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801292c:	4293      	cmp	r3, r2
 801292e:	bf0c      	ite	eq
 8012930:	4613      	moveq	r3, r2
 8012932:	2340      	movne	r3, #64	@ 0x40
 8012934:	4318      	orrs	r0, r3
 8012936:	4770      	bx	lr
 8012938:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801293c:	4293      	cmp	r3, r2
 801293e:	d0d5      	beq.n	80128ec <ai_array_to_buffer_fmt+0x34>
 8012940:	3207      	adds	r2, #7
 8012942:	4293      	cmp	r3, r2
 8012944:	d0d2      	beq.n	80128ec <ai_array_to_buffer_fmt+0x34>
 8012946:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 801294a:	4293      	cmp	r3, r2
 801294c:	bf0c      	ite	eq
 801294e:	4613      	moveq	r3, r2
 8012950:	2340      	movne	r3, #64	@ 0x40
 8012952:	e7cb      	b.n	80128ec <ai_array_to_buffer_fmt+0x34>
 8012954:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8012958:	4293      	cmp	r3, r2
 801295a:	d0c7      	beq.n	80128ec <ai_array_to_buffer_fmt+0x34>
 801295c:	3280      	adds	r2, #128	@ 0x80
 801295e:	4293      	cmp	r3, r2
 8012960:	bf0c      	ite	eq
 8012962:	4613      	moveq	r3, r2
 8012964:	2340      	movne	r3, #64	@ 0x40
 8012966:	e7c1      	b.n	80128ec <ai_array_to_buffer_fmt+0x34>
 8012968:	4b0a      	ldr	r3, [pc, #40]	@ (8012994 <ai_array_to_buffer_fmt+0xdc>)
 801296a:	4003      	ands	r3, r0
 801296c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012970:	e7bc      	b.n	80128ec <ai_array_to_buffer_fmt+0x34>
 8012972:	bf00      	nop
 8012974:	00840040 	.word	0x00840040
 8012978:	00040840 	.word	0x00040840
 801297c:	00041040 	.word	0x00041040
 8012980:	0004084f 	.word	0x0004084f
 8012984:	00040447 	.word	0x00040447
 8012988:	00840840 	.word	0x00840840
 801298c:	00841040 	.word	0x00841040
 8012990:	0084084f 	.word	0x0084084f
 8012994:	00803fff 	.word	0x00803fff

08012998 <ai_array_get_byte_size>:
 8012998:	b319      	cbz	r1, 80129e2 <ai_array_get_byte_size+0x4a>
 801299a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801299e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80129a2:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 80129a6:	11c0      	asrs	r0, r0, #7
 80129a8:	fb01 f303 	mul.w	r3, r1, r3
 80129ac:	2a04      	cmp	r2, #4
 80129ae:	f103 0307 	add.w	r3, r3, #7
 80129b2:	f023 0307 	bic.w	r3, r3, #7
 80129b6:	fa23 f10c 	lsr.w	r1, r3, ip
 80129ba:	d00b      	beq.n	80129d4 <ai_array_get_byte_size+0x3c>
 80129bc:	2a08      	cmp	r2, #8
 80129be:	d002      	beq.n	80129c6 <ai_array_get_byte_size+0x2e>
 80129c0:	3107      	adds	r1, #7
 80129c2:	08c8      	lsrs	r0, r1, #3
 80129c4:	4770      	bx	lr
 80129c6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80129ca:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80129ce:	3107      	adds	r1, #7
 80129d0:	08c8      	lsrs	r0, r1, #3
 80129d2:	4770      	bx	lr
 80129d4:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80129d8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80129dc:	3107      	adds	r1, #7
 80129de:	08c8      	lsrs	r0, r1, #3
 80129e0:	4770      	bx	lr
 80129e2:	4608      	mov	r0, r1
 80129e4:	4770      	bx	lr
 80129e6:	bf00      	nop

080129e8 <ai_array_get_data_byte_size>:
 80129e8:	b169      	cbz	r1, 8012a06 <ai_array_get_data_byte_size+0x1e>
 80129ea:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80129ee:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80129f2:	fb03 f101 	mul.w	r1, r3, r1
 80129f6:	1dcb      	adds	r3, r1, #7
 80129f8:	f023 0307 	bic.w	r3, r3, #7
 80129fc:	fa23 f000 	lsr.w	r0, r3, r0
 8012a00:	3007      	adds	r0, #7
 8012a02:	08c0      	lsrs	r0, r0, #3
 8012a04:	4770      	bx	lr
 8012a06:	4608      	mov	r0, r1
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop

08012a0c <ai_version_get>:
 8012a0c:	0212      	lsls	r2, r2, #8
 8012a0e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8012a12:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8012a16:	4770      	bx	lr

08012a18 <get_tensor_byte_size>:
 8012a18:	b430      	push	{r4, r5}
 8012a1a:	6985      	ldr	r5, [r0, #24]
 8012a1c:	68c4      	ldr	r4, [r0, #12]
 8012a1e:	6941      	ldr	r1, [r0, #20]
 8012a20:	4b06      	ldr	r3, [pc, #24]	@ (8012a3c <get_tensor_byte_size+0x24>)
 8012a22:	6828      	ldr	r0, [r5, #0]
 8012a24:	4a06      	ldr	r2, [pc, #24]	@ (8012a40 <get_tensor_byte_size+0x28>)
 8012a26:	4003      	ands	r3, r0
 8012a28:	68c9      	ldr	r1, [r1, #12]
 8012a2a:	68e0      	ldr	r0, [r4, #12]
 8012a2c:	4293      	cmp	r3, r2
 8012a2e:	fb01 f000 	mul.w	r0, r1, r0
 8012a32:	d101      	bne.n	8012a38 <get_tensor_byte_size+0x20>
 8012a34:	3007      	adds	r0, #7
 8012a36:	08c0      	lsrs	r0, r0, #3
 8012a38:	bc30      	pop	{r4, r5}
 8012a3a:	4770      	bx	lr
 8012a3c:	017fffff 	.word	0x017fffff
 8012a40:	000400c0 	.word	0x000400c0

08012a44 <lite_bilinear_if32of32_kernel>:
 8012a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a46:	9d05      	ldr	r5, [sp, #20]
 8012a48:	b352      	cbz	r2, 8012aa0 <lite_bilinear_if32of32_kernel+0x5c>
 8012a4a:	f04f 0c00 	mov.w	ip, #0
 8012a4e:	edd5 4a02 	vldr	s9, [r5, #8]
 8012a52:	f10c 0c01 	add.w	ip, ip, #1
 8012a56:	ed95 5a01 	vldr	s10, [r5, #4]
 8012a5a:	ed90 6a00 	vldr	s12, [r0]
 8012a5e:	4562      	cmp	r2, ip
 8012a60:	edd5 5a00 	vldr	s11, [r5]
 8012a64:	edd5 6a03 	vldr	s13, [r5, #12]
 8012a68:	e9d3 4600 	ldrd	r4, r6, [r3]
 8012a6c:	eb00 0786 	add.w	r7, r0, r6, lsl #2
 8012a70:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 8012a74:	4434      	add	r4, r6
 8012a76:	edd7 7a00 	vldr	s15, [r7]
 8012a7a:	ed9e 7a00 	vldr	s14, [lr]
 8012a7e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8012a82:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012a86:	f100 0004 	add.w	r0, r0, #4
 8012a8a:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012a8e:	ed94 7a00 	vldr	s14, [r4]
 8012a92:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012a96:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012a9a:	ece1 7a01 	vstmia	r1!, {s15}
 8012a9e:	d1d6      	bne.n	8012a4e <lite_bilinear_if32of32_kernel+0xa>
 8012aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012aa2:	bf00      	nop

08012aa4 <lite_bilinear_is8os8_kernel>:
 8012aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012aa8:	9c07      	ldr	r4, [sp, #28]
 8012aaa:	2a00      	cmp	r2, #0
 8012aac:	d04b      	beq.n	8012b46 <lite_bilinear_is8os8_kernel+0xa2>
 8012aae:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8012ab2:	eb01 0e02 	add.w	lr, r1, r2
 8012ab6:	f100 3cff 	add.w	ip, r0, #4294967295
 8012aba:	f1c0 0501 	rsb	r5, r0, #1
 8012abe:	685f      	ldr	r7, [r3, #4]
 8012ac0:	eb05 060c 	add.w	r6, r5, ip
 8012ac4:	681a      	ldr	r2, [r3, #0]
 8012ac6:	eb00 0807 	add.w	r8, r0, r7
 8012aca:	edd4 3a02 	vldr	s7, [r4, #8]
 8012ace:	4402      	add	r2, r0
 8012ad0:	ed94 4a01 	vldr	s8, [r4, #4]
 8012ad4:	f918 8006 	ldrsb.w	r8, [r8, r6]
 8012ad8:	f91c 9f01 	ldrsb.w	r9, [ip, #1]!
 8012adc:	ee07 8a90 	vmov	s15, r8
 8012ae0:	f912 8006 	ldrsb.w	r8, [r2, r6]
 8012ae4:	ee06 9a90 	vmov	s13, r9
 8012ae8:	443a      	add	r2, r7
 8012aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012aee:	ee06 8a10 	vmov	s12, r8
 8012af2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012af6:	edd4 4a00 	vldr	s9, [r4]
 8012afa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012afe:	5792      	ldrsb	r2, [r2, r6]
 8012b00:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8012b04:	ed94 5a03 	vldr	s10, [r4, #12]
 8012b08:	ee07 2a10 	vmov	s14, r2
 8012b0c:	eee4 7a06 	vfma.f32	s15, s8, s12
 8012b10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012b14:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8012b18:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012b1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b20:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8012b24:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8012b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b2c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8012b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b34:	dd09      	ble.n	8012b4a <lite_bilinear_is8os8_kernel+0xa6>
 8012b36:	ee17 2a10 	vmov	r2, s14
 8012b3a:	f302 0207 	ssat	r2, #8, r2
 8012b3e:	f801 2b01 	strb.w	r2, [r1], #1
 8012b42:	4571      	cmp	r1, lr
 8012b44:	d1bb      	bne.n	8012abe <lite_bilinear_is8os8_kernel+0x1a>
 8012b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b4a:	ee17 2a90 	vmov	r2, s15
 8012b4e:	f302 0207 	ssat	r2, #8, r2
 8012b52:	f801 2b01 	strb.w	r2, [r1], #1
 8012b56:	4571      	cmp	r1, lr
 8012b58:	d1b1      	bne.n	8012abe <lite_bilinear_is8os8_kernel+0x1a>
 8012b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b5e:	bf00      	nop

08012b60 <lite_bilinear_iu8ou8_kernel>:
 8012b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b64:	9c07      	ldr	r4, [sp, #28]
 8012b66:	2a00      	cmp	r2, #0
 8012b68:	d042      	beq.n	8012bf0 <lite_bilinear_iu8ou8_kernel+0x90>
 8012b6a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8012b6e:	eb01 0e02 	add.w	lr, r1, r2
 8012b72:	f100 3cff 	add.w	ip, r0, #4294967295
 8012b76:	f1c0 0501 	rsb	r5, r0, #1
 8012b7a:	eb05 060c 	add.w	r6, r5, ip
 8012b7e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8012b82:	eef0 7a44 	vmov.f32	s15, s8
 8012b86:	edd4 6a00 	vldr	s13, [r4]
 8012b8a:	ee07 2a10 	vmov	s14, r2
 8012b8e:	681a      	ldr	r2, [r3, #0]
 8012b90:	685f      	ldr	r7, [r3, #4]
 8012b92:	4402      	add	r2, r0
 8012b94:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012b98:	eb00 0807 	add.w	r8, r0, r7
 8012b9c:	edd4 4a01 	vldr	s9, [r4, #4]
 8012ba0:	f812 9006 	ldrb.w	r9, [r2, r6]
 8012ba4:	443a      	add	r2, r7
 8012ba6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012baa:	f818 8006 	ldrb.w	r8, [r8, r6]
 8012bae:	ee06 9a10 	vmov	s12, r9
 8012bb2:	ed94 5a02 	vldr	s10, [r4, #8]
 8012bb6:	ee06 8a90 	vmov	s13, r8
 8012bba:	5d92      	ldrb	r2, [r2, r6]
 8012bbc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012bc0:	edd4 5a03 	vldr	s11, [r4, #12]
 8012bc4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012bc8:	ee07 2a10 	vmov	s14, r2
 8012bcc:	eee4 7a86 	vfma.f32	s15, s9, s12
 8012bd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012bd4:	eee5 7a26 	vfma.f32	s15, s10, s13
 8012bd8:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012be0:	ee17 2a90 	vmov	r2, s15
 8012be4:	f382 0208 	usat	r2, #8, r2
 8012be8:	f801 2b01 	strb.w	r2, [r1], #1
 8012bec:	4571      	cmp	r1, lr
 8012bee:	d1c4      	bne.n	8012b7a <lite_bilinear_iu8ou8_kernel+0x1a>
 8012bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012bf4 <lite_bilinear_is16os16_kernel>:
 8012bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bf8:	9d07      	ldr	r5, [sp, #28]
 8012bfa:	2a00      	cmp	r2, #0
 8012bfc:	d04e      	beq.n	8012c9c <lite_bilinear_is16os16_kernel+0xa8>
 8012bfe:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8012c02:	f1a0 0e02 	sub.w	lr, r0, #2
 8012c06:	f04f 0c00 	mov.w	ip, #0
 8012c0a:	ed95 7a02 	vldr	s14, [r5, #8]
 8012c0e:	ed95 4a01 	vldr	s8, [r5, #4]
 8012c12:	f93e 9f02 	ldrsh.w	r9, [lr, #2]!
 8012c16:	edd5 4a00 	vldr	s9, [r5]
 8012c1a:	ee06 9a90 	vmov	s13, r9
 8012c1e:	ed95 5a03 	vldr	s10, [r5, #12]
 8012c22:	e9d3 4600 	ldrd	r4, r6, [r3]
 8012c26:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012c2a:	eb06 080c 	add.w	r8, r6, ip
 8012c2e:	eb04 070c 	add.w	r7, r4, ip
 8012c32:	4434      	add	r4, r6
 8012c34:	f930 6018 	ldrsh.w	r6, [r0, r8, lsl #1]
 8012c38:	4464      	add	r4, ip
 8012c3a:	ee07 6a90 	vmov	s15, r6
 8012c3e:	f930 6017 	ldrsh.w	r6, [r0, r7, lsl #1]
 8012c42:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 8012c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c4a:	ee06 6a10 	vmov	s12, r6
 8012c4e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012c56:	ee07 4a10 	vmov	s14, r4
 8012c5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c5e:	eee4 7a06 	vfma.f32	s15, s8, s12
 8012c62:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8012c66:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012c6a:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8012c6e:	ee77 6ae5 	vsub.f32	s13, s15, s11
 8012c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012c76:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8012c7a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8012c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c82:	bfcc      	ite	gt
 8012c84:	ee17 4a10 	vmovgt	r4, s14
 8012c88:	ee16 4a90 	vmovle	r4, s13
 8012c8c:	f304 040f 	ssat	r4, #16, r4
 8012c90:	f10c 0c01 	add.w	ip, ip, #1
 8012c94:	f821 4b02 	strh.w	r4, [r1], #2
 8012c98:	4562      	cmp	r2, ip
 8012c9a:	d1b6      	bne.n	8012c0a <lite_bilinear_is16os16_kernel+0x16>
 8012c9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012ca0 <lite_bilinear_iu16ou16_kernel>:
 8012ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ca4:	9d06      	ldr	r5, [sp, #24]
 8012ca6:	2a00      	cmp	r2, #0
 8012ca8:	d042      	beq.n	8012d30 <lite_bilinear_iu16ou16_kernel+0x90>
 8012caa:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8012cae:	1e86      	subs	r6, r0, #2
 8012cb0:	f04f 0e00 	mov.w	lr, #0
 8012cb4:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 8012cb8:	eef0 7a44 	vmov.f32	s15, s8
 8012cbc:	edd5 6a00 	vldr	s13, [r5]
 8012cc0:	ee07 4a10 	vmov	s14, r4
 8012cc4:	681c      	ldr	r4, [r3, #0]
 8012cc6:	685f      	ldr	r7, [r3, #4]
 8012cc8:	eb04 080e 	add.w	r8, r4, lr
 8012ccc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012cd0:	eb07 0c0e 	add.w	ip, r7, lr
 8012cd4:	edd5 4a01 	vldr	s9, [r5, #4]
 8012cd8:	f830 8018 	ldrh.w	r8, [r0, r8, lsl #1]
 8012cdc:	443c      	add	r4, r7
 8012cde:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012ce2:	f830 701c 	ldrh.w	r7, [r0, ip, lsl #1]
 8012ce6:	ee06 8a10 	vmov	s12, r8
 8012cea:	4474      	add	r4, lr
 8012cec:	ee06 7a90 	vmov	s13, r7
 8012cf0:	ed95 5a02 	vldr	s10, [r5, #8]
 8012cf4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012cf8:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 8012cfc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012d00:	edd5 5a03 	vldr	s11, [r5, #12]
 8012d04:	ee07 4a10 	vmov	s14, r4
 8012d08:	eee4 7a86 	vfma.f32	s15, s9, s12
 8012d0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012d10:	eee5 7a26 	vfma.f32	s15, s10, s13
 8012d14:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012d18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d1c:	ee17 ca90 	vmov	ip, s15
 8012d20:	f38c 0c10 	usat	ip, #16, ip
 8012d24:	f10e 0e01 	add.w	lr, lr, #1
 8012d28:	f821 cb02 	strh.w	ip, [r1], #2
 8012d2c:	4572      	cmp	r2, lr
 8012d2e:	d1c1      	bne.n	8012cb4 <lite_bilinear_iu16ou16_kernel+0x14>
 8012d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d34 <malloc>:
 8012d34:	4b02      	ldr	r3, [pc, #8]	@ (8012d40 <malloc+0xc>)
 8012d36:	4601      	mov	r1, r0
 8012d38:	6818      	ldr	r0, [r3, #0]
 8012d3a:	f000 b825 	b.w	8012d88 <_malloc_r>
 8012d3e:	bf00      	nop
 8012d40:	20000818 	.word	0x20000818

08012d44 <sbrk_aligned>:
 8012d44:	b570      	push	{r4, r5, r6, lr}
 8012d46:	4e0f      	ldr	r6, [pc, #60]	@ (8012d84 <sbrk_aligned+0x40>)
 8012d48:	460c      	mov	r4, r1
 8012d4a:	6831      	ldr	r1, [r6, #0]
 8012d4c:	4605      	mov	r5, r0
 8012d4e:	b911      	cbnz	r1, 8012d56 <sbrk_aligned+0x12>
 8012d50:	f000 ff48 	bl	8013be4 <_sbrk_r>
 8012d54:	6030      	str	r0, [r6, #0]
 8012d56:	4621      	mov	r1, r4
 8012d58:	4628      	mov	r0, r5
 8012d5a:	f000 ff43 	bl	8013be4 <_sbrk_r>
 8012d5e:	1c43      	adds	r3, r0, #1
 8012d60:	d103      	bne.n	8012d6a <sbrk_aligned+0x26>
 8012d62:	f04f 34ff 	mov.w	r4, #4294967295
 8012d66:	4620      	mov	r0, r4
 8012d68:	bd70      	pop	{r4, r5, r6, pc}
 8012d6a:	1cc4      	adds	r4, r0, #3
 8012d6c:	f024 0403 	bic.w	r4, r4, #3
 8012d70:	42a0      	cmp	r0, r4
 8012d72:	d0f8      	beq.n	8012d66 <sbrk_aligned+0x22>
 8012d74:	1a21      	subs	r1, r4, r0
 8012d76:	4628      	mov	r0, r5
 8012d78:	f000 ff34 	bl	8013be4 <_sbrk_r>
 8012d7c:	3001      	adds	r0, #1
 8012d7e:	d1f2      	bne.n	8012d66 <sbrk_aligned+0x22>
 8012d80:	e7ef      	b.n	8012d62 <sbrk_aligned+0x1e>
 8012d82:	bf00      	nop
 8012d84:	20005cb0 	.word	0x20005cb0

08012d88 <_malloc_r>:
 8012d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d8c:	1ccd      	adds	r5, r1, #3
 8012d8e:	f025 0503 	bic.w	r5, r5, #3
 8012d92:	3508      	adds	r5, #8
 8012d94:	2d0c      	cmp	r5, #12
 8012d96:	bf38      	it	cc
 8012d98:	250c      	movcc	r5, #12
 8012d9a:	2d00      	cmp	r5, #0
 8012d9c:	4606      	mov	r6, r0
 8012d9e:	db01      	blt.n	8012da4 <_malloc_r+0x1c>
 8012da0:	42a9      	cmp	r1, r5
 8012da2:	d904      	bls.n	8012dae <_malloc_r+0x26>
 8012da4:	230c      	movs	r3, #12
 8012da6:	6033      	str	r3, [r6, #0]
 8012da8:	2000      	movs	r0, #0
 8012daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012e84 <_malloc_r+0xfc>
 8012db2:	f000 f869 	bl	8012e88 <__malloc_lock>
 8012db6:	f8d8 3000 	ldr.w	r3, [r8]
 8012dba:	461c      	mov	r4, r3
 8012dbc:	bb44      	cbnz	r4, 8012e10 <_malloc_r+0x88>
 8012dbe:	4629      	mov	r1, r5
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	f7ff ffbf 	bl	8012d44 <sbrk_aligned>
 8012dc6:	1c43      	adds	r3, r0, #1
 8012dc8:	4604      	mov	r4, r0
 8012dca:	d158      	bne.n	8012e7e <_malloc_r+0xf6>
 8012dcc:	f8d8 4000 	ldr.w	r4, [r8]
 8012dd0:	4627      	mov	r7, r4
 8012dd2:	2f00      	cmp	r7, #0
 8012dd4:	d143      	bne.n	8012e5e <_malloc_r+0xd6>
 8012dd6:	2c00      	cmp	r4, #0
 8012dd8:	d04b      	beq.n	8012e72 <_malloc_r+0xea>
 8012dda:	6823      	ldr	r3, [r4, #0]
 8012ddc:	4639      	mov	r1, r7
 8012dde:	4630      	mov	r0, r6
 8012de0:	eb04 0903 	add.w	r9, r4, r3
 8012de4:	f000 fefe 	bl	8013be4 <_sbrk_r>
 8012de8:	4581      	cmp	r9, r0
 8012dea:	d142      	bne.n	8012e72 <_malloc_r+0xea>
 8012dec:	6821      	ldr	r1, [r4, #0]
 8012dee:	1a6d      	subs	r5, r5, r1
 8012df0:	4629      	mov	r1, r5
 8012df2:	4630      	mov	r0, r6
 8012df4:	f7ff ffa6 	bl	8012d44 <sbrk_aligned>
 8012df8:	3001      	adds	r0, #1
 8012dfa:	d03a      	beq.n	8012e72 <_malloc_r+0xea>
 8012dfc:	6823      	ldr	r3, [r4, #0]
 8012dfe:	442b      	add	r3, r5
 8012e00:	6023      	str	r3, [r4, #0]
 8012e02:	f8d8 3000 	ldr.w	r3, [r8]
 8012e06:	685a      	ldr	r2, [r3, #4]
 8012e08:	bb62      	cbnz	r2, 8012e64 <_malloc_r+0xdc>
 8012e0a:	f8c8 7000 	str.w	r7, [r8]
 8012e0e:	e00f      	b.n	8012e30 <_malloc_r+0xa8>
 8012e10:	6822      	ldr	r2, [r4, #0]
 8012e12:	1b52      	subs	r2, r2, r5
 8012e14:	d420      	bmi.n	8012e58 <_malloc_r+0xd0>
 8012e16:	2a0b      	cmp	r2, #11
 8012e18:	d917      	bls.n	8012e4a <_malloc_r+0xc2>
 8012e1a:	1961      	adds	r1, r4, r5
 8012e1c:	42a3      	cmp	r3, r4
 8012e1e:	6025      	str	r5, [r4, #0]
 8012e20:	bf18      	it	ne
 8012e22:	6059      	strne	r1, [r3, #4]
 8012e24:	6863      	ldr	r3, [r4, #4]
 8012e26:	bf08      	it	eq
 8012e28:	f8c8 1000 	streq.w	r1, [r8]
 8012e2c:	5162      	str	r2, [r4, r5]
 8012e2e:	604b      	str	r3, [r1, #4]
 8012e30:	4630      	mov	r0, r6
 8012e32:	f000 f82f 	bl	8012e94 <__malloc_unlock>
 8012e36:	f104 000b 	add.w	r0, r4, #11
 8012e3a:	1d23      	adds	r3, r4, #4
 8012e3c:	f020 0007 	bic.w	r0, r0, #7
 8012e40:	1ac2      	subs	r2, r0, r3
 8012e42:	bf1c      	itt	ne
 8012e44:	1a1b      	subne	r3, r3, r0
 8012e46:	50a3      	strne	r3, [r4, r2]
 8012e48:	e7af      	b.n	8012daa <_malloc_r+0x22>
 8012e4a:	6862      	ldr	r2, [r4, #4]
 8012e4c:	42a3      	cmp	r3, r4
 8012e4e:	bf0c      	ite	eq
 8012e50:	f8c8 2000 	streq.w	r2, [r8]
 8012e54:	605a      	strne	r2, [r3, #4]
 8012e56:	e7eb      	b.n	8012e30 <_malloc_r+0xa8>
 8012e58:	4623      	mov	r3, r4
 8012e5a:	6864      	ldr	r4, [r4, #4]
 8012e5c:	e7ae      	b.n	8012dbc <_malloc_r+0x34>
 8012e5e:	463c      	mov	r4, r7
 8012e60:	687f      	ldr	r7, [r7, #4]
 8012e62:	e7b6      	b.n	8012dd2 <_malloc_r+0x4a>
 8012e64:	461a      	mov	r2, r3
 8012e66:	685b      	ldr	r3, [r3, #4]
 8012e68:	42a3      	cmp	r3, r4
 8012e6a:	d1fb      	bne.n	8012e64 <_malloc_r+0xdc>
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	6053      	str	r3, [r2, #4]
 8012e70:	e7de      	b.n	8012e30 <_malloc_r+0xa8>
 8012e72:	230c      	movs	r3, #12
 8012e74:	6033      	str	r3, [r6, #0]
 8012e76:	4630      	mov	r0, r6
 8012e78:	f000 f80c 	bl	8012e94 <__malloc_unlock>
 8012e7c:	e794      	b.n	8012da8 <_malloc_r+0x20>
 8012e7e:	6005      	str	r5, [r0, #0]
 8012e80:	e7d6      	b.n	8012e30 <_malloc_r+0xa8>
 8012e82:	bf00      	nop
 8012e84:	20005cb4 	.word	0x20005cb4

08012e88 <__malloc_lock>:
 8012e88:	4801      	ldr	r0, [pc, #4]	@ (8012e90 <__malloc_lock+0x8>)
 8012e8a:	f000 bef8 	b.w	8013c7e <__retarget_lock_acquire_recursive>
 8012e8e:	bf00      	nop
 8012e90:	20005df8 	.word	0x20005df8

08012e94 <__malloc_unlock>:
 8012e94:	4801      	ldr	r0, [pc, #4]	@ (8012e9c <__malloc_unlock+0x8>)
 8012e96:	f000 bef3 	b.w	8013c80 <__retarget_lock_release_recursive>
 8012e9a:	bf00      	nop
 8012e9c:	20005df8 	.word	0x20005df8

08012ea0 <__cvt>:
 8012ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ea4:	ec57 6b10 	vmov	r6, r7, d0
 8012ea8:	2f00      	cmp	r7, #0
 8012eaa:	460c      	mov	r4, r1
 8012eac:	4619      	mov	r1, r3
 8012eae:	463b      	mov	r3, r7
 8012eb0:	bfbb      	ittet	lt
 8012eb2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012eb6:	461f      	movlt	r7, r3
 8012eb8:	2300      	movge	r3, #0
 8012eba:	232d      	movlt	r3, #45	@ 0x2d
 8012ebc:	700b      	strb	r3, [r1, #0]
 8012ebe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012ec0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012ec4:	4691      	mov	r9, r2
 8012ec6:	f023 0820 	bic.w	r8, r3, #32
 8012eca:	bfbc      	itt	lt
 8012ecc:	4632      	movlt	r2, r6
 8012ece:	4616      	movlt	r6, r2
 8012ed0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012ed4:	d005      	beq.n	8012ee2 <__cvt+0x42>
 8012ed6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012eda:	d100      	bne.n	8012ede <__cvt+0x3e>
 8012edc:	3401      	adds	r4, #1
 8012ede:	2102      	movs	r1, #2
 8012ee0:	e000      	b.n	8012ee4 <__cvt+0x44>
 8012ee2:	2103      	movs	r1, #3
 8012ee4:	ab03      	add	r3, sp, #12
 8012ee6:	9301      	str	r3, [sp, #4]
 8012ee8:	ab02      	add	r3, sp, #8
 8012eea:	9300      	str	r3, [sp, #0]
 8012eec:	ec47 6b10 	vmov	d0, r6, r7
 8012ef0:	4653      	mov	r3, sl
 8012ef2:	4622      	mov	r2, r4
 8012ef4:	f000 ff5c 	bl	8013db0 <_dtoa_r>
 8012ef8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012efc:	4605      	mov	r5, r0
 8012efe:	d119      	bne.n	8012f34 <__cvt+0x94>
 8012f00:	f019 0f01 	tst.w	r9, #1
 8012f04:	d00e      	beq.n	8012f24 <__cvt+0x84>
 8012f06:	eb00 0904 	add.w	r9, r0, r4
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	4630      	mov	r0, r6
 8012f10:	4639      	mov	r1, r7
 8012f12:	f7ed fe59 	bl	8000bc8 <__aeabi_dcmpeq>
 8012f16:	b108      	cbz	r0, 8012f1c <__cvt+0x7c>
 8012f18:	f8cd 900c 	str.w	r9, [sp, #12]
 8012f1c:	2230      	movs	r2, #48	@ 0x30
 8012f1e:	9b03      	ldr	r3, [sp, #12]
 8012f20:	454b      	cmp	r3, r9
 8012f22:	d31e      	bcc.n	8012f62 <__cvt+0xc2>
 8012f24:	9b03      	ldr	r3, [sp, #12]
 8012f26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f28:	1b5b      	subs	r3, r3, r5
 8012f2a:	4628      	mov	r0, r5
 8012f2c:	6013      	str	r3, [r2, #0]
 8012f2e:	b004      	add	sp, #16
 8012f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012f38:	eb00 0904 	add.w	r9, r0, r4
 8012f3c:	d1e5      	bne.n	8012f0a <__cvt+0x6a>
 8012f3e:	7803      	ldrb	r3, [r0, #0]
 8012f40:	2b30      	cmp	r3, #48	@ 0x30
 8012f42:	d10a      	bne.n	8012f5a <__cvt+0xba>
 8012f44:	2200      	movs	r2, #0
 8012f46:	2300      	movs	r3, #0
 8012f48:	4630      	mov	r0, r6
 8012f4a:	4639      	mov	r1, r7
 8012f4c:	f7ed fe3c 	bl	8000bc8 <__aeabi_dcmpeq>
 8012f50:	b918      	cbnz	r0, 8012f5a <__cvt+0xba>
 8012f52:	f1c4 0401 	rsb	r4, r4, #1
 8012f56:	f8ca 4000 	str.w	r4, [sl]
 8012f5a:	f8da 3000 	ldr.w	r3, [sl]
 8012f5e:	4499      	add	r9, r3
 8012f60:	e7d3      	b.n	8012f0a <__cvt+0x6a>
 8012f62:	1c59      	adds	r1, r3, #1
 8012f64:	9103      	str	r1, [sp, #12]
 8012f66:	701a      	strb	r2, [r3, #0]
 8012f68:	e7d9      	b.n	8012f1e <__cvt+0x7e>

08012f6a <__exponent>:
 8012f6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012f6c:	2900      	cmp	r1, #0
 8012f6e:	bfba      	itte	lt
 8012f70:	4249      	neglt	r1, r1
 8012f72:	232d      	movlt	r3, #45	@ 0x2d
 8012f74:	232b      	movge	r3, #43	@ 0x2b
 8012f76:	2909      	cmp	r1, #9
 8012f78:	7002      	strb	r2, [r0, #0]
 8012f7a:	7043      	strb	r3, [r0, #1]
 8012f7c:	dd29      	ble.n	8012fd2 <__exponent+0x68>
 8012f7e:	f10d 0307 	add.w	r3, sp, #7
 8012f82:	461d      	mov	r5, r3
 8012f84:	270a      	movs	r7, #10
 8012f86:	461a      	mov	r2, r3
 8012f88:	fbb1 f6f7 	udiv	r6, r1, r7
 8012f8c:	fb07 1416 	mls	r4, r7, r6, r1
 8012f90:	3430      	adds	r4, #48	@ 0x30
 8012f92:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012f96:	460c      	mov	r4, r1
 8012f98:	2c63      	cmp	r4, #99	@ 0x63
 8012f9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8012f9e:	4631      	mov	r1, r6
 8012fa0:	dcf1      	bgt.n	8012f86 <__exponent+0x1c>
 8012fa2:	3130      	adds	r1, #48	@ 0x30
 8012fa4:	1e94      	subs	r4, r2, #2
 8012fa6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012faa:	1c41      	adds	r1, r0, #1
 8012fac:	4623      	mov	r3, r4
 8012fae:	42ab      	cmp	r3, r5
 8012fb0:	d30a      	bcc.n	8012fc8 <__exponent+0x5e>
 8012fb2:	f10d 0309 	add.w	r3, sp, #9
 8012fb6:	1a9b      	subs	r3, r3, r2
 8012fb8:	42ac      	cmp	r4, r5
 8012fba:	bf88      	it	hi
 8012fbc:	2300      	movhi	r3, #0
 8012fbe:	3302      	adds	r3, #2
 8012fc0:	4403      	add	r3, r0
 8012fc2:	1a18      	subs	r0, r3, r0
 8012fc4:	b003      	add	sp, #12
 8012fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fc8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012fcc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012fd0:	e7ed      	b.n	8012fae <__exponent+0x44>
 8012fd2:	2330      	movs	r3, #48	@ 0x30
 8012fd4:	3130      	adds	r1, #48	@ 0x30
 8012fd6:	7083      	strb	r3, [r0, #2]
 8012fd8:	70c1      	strb	r1, [r0, #3]
 8012fda:	1d03      	adds	r3, r0, #4
 8012fdc:	e7f1      	b.n	8012fc2 <__exponent+0x58>
	...

08012fe0 <_printf_float>:
 8012fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe4:	b08d      	sub	sp, #52	@ 0x34
 8012fe6:	460c      	mov	r4, r1
 8012fe8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012fec:	4616      	mov	r6, r2
 8012fee:	461f      	mov	r7, r3
 8012ff0:	4605      	mov	r5, r0
 8012ff2:	f000 fdbf 	bl	8013b74 <_localeconv_r>
 8012ff6:	6803      	ldr	r3, [r0, #0]
 8012ff8:	9304      	str	r3, [sp, #16]
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7ed f9b8 	bl	8000370 <strlen>
 8013000:	2300      	movs	r3, #0
 8013002:	930a      	str	r3, [sp, #40]	@ 0x28
 8013004:	f8d8 3000 	ldr.w	r3, [r8]
 8013008:	9005      	str	r0, [sp, #20]
 801300a:	3307      	adds	r3, #7
 801300c:	f023 0307 	bic.w	r3, r3, #7
 8013010:	f103 0208 	add.w	r2, r3, #8
 8013014:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013018:	f8d4 b000 	ldr.w	fp, [r4]
 801301c:	f8c8 2000 	str.w	r2, [r8]
 8013020:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013024:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013028:	9307      	str	r3, [sp, #28]
 801302a:	f8cd 8018 	str.w	r8, [sp, #24]
 801302e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013036:	4b9c      	ldr	r3, [pc, #624]	@ (80132a8 <_printf_float+0x2c8>)
 8013038:	f04f 32ff 	mov.w	r2, #4294967295
 801303c:	f7ed fdf6 	bl	8000c2c <__aeabi_dcmpun>
 8013040:	bb70      	cbnz	r0, 80130a0 <_printf_float+0xc0>
 8013042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013046:	4b98      	ldr	r3, [pc, #608]	@ (80132a8 <_printf_float+0x2c8>)
 8013048:	f04f 32ff 	mov.w	r2, #4294967295
 801304c:	f7ed fdd0 	bl	8000bf0 <__aeabi_dcmple>
 8013050:	bb30      	cbnz	r0, 80130a0 <_printf_float+0xc0>
 8013052:	2200      	movs	r2, #0
 8013054:	2300      	movs	r3, #0
 8013056:	4640      	mov	r0, r8
 8013058:	4649      	mov	r1, r9
 801305a:	f7ed fdbf 	bl	8000bdc <__aeabi_dcmplt>
 801305e:	b110      	cbz	r0, 8013066 <_printf_float+0x86>
 8013060:	232d      	movs	r3, #45	@ 0x2d
 8013062:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013066:	4a91      	ldr	r2, [pc, #580]	@ (80132ac <_printf_float+0x2cc>)
 8013068:	4b91      	ldr	r3, [pc, #580]	@ (80132b0 <_printf_float+0x2d0>)
 801306a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801306e:	bf94      	ite	ls
 8013070:	4690      	movls	r8, r2
 8013072:	4698      	movhi	r8, r3
 8013074:	2303      	movs	r3, #3
 8013076:	6123      	str	r3, [r4, #16]
 8013078:	f02b 0304 	bic.w	r3, fp, #4
 801307c:	6023      	str	r3, [r4, #0]
 801307e:	f04f 0900 	mov.w	r9, #0
 8013082:	9700      	str	r7, [sp, #0]
 8013084:	4633      	mov	r3, r6
 8013086:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013088:	4621      	mov	r1, r4
 801308a:	4628      	mov	r0, r5
 801308c:	f000 f9d2 	bl	8013434 <_printf_common>
 8013090:	3001      	adds	r0, #1
 8013092:	f040 808d 	bne.w	80131b0 <_printf_float+0x1d0>
 8013096:	f04f 30ff 	mov.w	r0, #4294967295
 801309a:	b00d      	add	sp, #52	@ 0x34
 801309c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130a0:	4642      	mov	r2, r8
 80130a2:	464b      	mov	r3, r9
 80130a4:	4640      	mov	r0, r8
 80130a6:	4649      	mov	r1, r9
 80130a8:	f7ed fdc0 	bl	8000c2c <__aeabi_dcmpun>
 80130ac:	b140      	cbz	r0, 80130c0 <_printf_float+0xe0>
 80130ae:	464b      	mov	r3, r9
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	bfbc      	itt	lt
 80130b4:	232d      	movlt	r3, #45	@ 0x2d
 80130b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80130ba:	4a7e      	ldr	r2, [pc, #504]	@ (80132b4 <_printf_float+0x2d4>)
 80130bc:	4b7e      	ldr	r3, [pc, #504]	@ (80132b8 <_printf_float+0x2d8>)
 80130be:	e7d4      	b.n	801306a <_printf_float+0x8a>
 80130c0:	6863      	ldr	r3, [r4, #4]
 80130c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80130c6:	9206      	str	r2, [sp, #24]
 80130c8:	1c5a      	adds	r2, r3, #1
 80130ca:	d13b      	bne.n	8013144 <_printf_float+0x164>
 80130cc:	2306      	movs	r3, #6
 80130ce:	6063      	str	r3, [r4, #4]
 80130d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80130d4:	2300      	movs	r3, #0
 80130d6:	6022      	str	r2, [r4, #0]
 80130d8:	9303      	str	r3, [sp, #12]
 80130da:	ab0a      	add	r3, sp, #40	@ 0x28
 80130dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80130e0:	ab09      	add	r3, sp, #36	@ 0x24
 80130e2:	9300      	str	r3, [sp, #0]
 80130e4:	6861      	ldr	r1, [r4, #4]
 80130e6:	ec49 8b10 	vmov	d0, r8, r9
 80130ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80130ee:	4628      	mov	r0, r5
 80130f0:	f7ff fed6 	bl	8012ea0 <__cvt>
 80130f4:	9b06      	ldr	r3, [sp, #24]
 80130f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80130f8:	2b47      	cmp	r3, #71	@ 0x47
 80130fa:	4680      	mov	r8, r0
 80130fc:	d129      	bne.n	8013152 <_printf_float+0x172>
 80130fe:	1cc8      	adds	r0, r1, #3
 8013100:	db02      	blt.n	8013108 <_printf_float+0x128>
 8013102:	6863      	ldr	r3, [r4, #4]
 8013104:	4299      	cmp	r1, r3
 8013106:	dd41      	ble.n	801318c <_printf_float+0x1ac>
 8013108:	f1aa 0a02 	sub.w	sl, sl, #2
 801310c:	fa5f fa8a 	uxtb.w	sl, sl
 8013110:	3901      	subs	r1, #1
 8013112:	4652      	mov	r2, sl
 8013114:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013118:	9109      	str	r1, [sp, #36]	@ 0x24
 801311a:	f7ff ff26 	bl	8012f6a <__exponent>
 801311e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013120:	1813      	adds	r3, r2, r0
 8013122:	2a01      	cmp	r2, #1
 8013124:	4681      	mov	r9, r0
 8013126:	6123      	str	r3, [r4, #16]
 8013128:	dc02      	bgt.n	8013130 <_printf_float+0x150>
 801312a:	6822      	ldr	r2, [r4, #0]
 801312c:	07d2      	lsls	r2, r2, #31
 801312e:	d501      	bpl.n	8013134 <_printf_float+0x154>
 8013130:	3301      	adds	r3, #1
 8013132:	6123      	str	r3, [r4, #16]
 8013134:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013138:	2b00      	cmp	r3, #0
 801313a:	d0a2      	beq.n	8013082 <_printf_float+0xa2>
 801313c:	232d      	movs	r3, #45	@ 0x2d
 801313e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013142:	e79e      	b.n	8013082 <_printf_float+0xa2>
 8013144:	9a06      	ldr	r2, [sp, #24]
 8013146:	2a47      	cmp	r2, #71	@ 0x47
 8013148:	d1c2      	bne.n	80130d0 <_printf_float+0xf0>
 801314a:	2b00      	cmp	r3, #0
 801314c:	d1c0      	bne.n	80130d0 <_printf_float+0xf0>
 801314e:	2301      	movs	r3, #1
 8013150:	e7bd      	b.n	80130ce <_printf_float+0xee>
 8013152:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013156:	d9db      	bls.n	8013110 <_printf_float+0x130>
 8013158:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801315c:	d118      	bne.n	8013190 <_printf_float+0x1b0>
 801315e:	2900      	cmp	r1, #0
 8013160:	6863      	ldr	r3, [r4, #4]
 8013162:	dd0b      	ble.n	801317c <_printf_float+0x19c>
 8013164:	6121      	str	r1, [r4, #16]
 8013166:	b913      	cbnz	r3, 801316e <_printf_float+0x18e>
 8013168:	6822      	ldr	r2, [r4, #0]
 801316a:	07d0      	lsls	r0, r2, #31
 801316c:	d502      	bpl.n	8013174 <_printf_float+0x194>
 801316e:	3301      	adds	r3, #1
 8013170:	440b      	add	r3, r1
 8013172:	6123      	str	r3, [r4, #16]
 8013174:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013176:	f04f 0900 	mov.w	r9, #0
 801317a:	e7db      	b.n	8013134 <_printf_float+0x154>
 801317c:	b913      	cbnz	r3, 8013184 <_printf_float+0x1a4>
 801317e:	6822      	ldr	r2, [r4, #0]
 8013180:	07d2      	lsls	r2, r2, #31
 8013182:	d501      	bpl.n	8013188 <_printf_float+0x1a8>
 8013184:	3302      	adds	r3, #2
 8013186:	e7f4      	b.n	8013172 <_printf_float+0x192>
 8013188:	2301      	movs	r3, #1
 801318a:	e7f2      	b.n	8013172 <_printf_float+0x192>
 801318c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013190:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013192:	4299      	cmp	r1, r3
 8013194:	db05      	blt.n	80131a2 <_printf_float+0x1c2>
 8013196:	6823      	ldr	r3, [r4, #0]
 8013198:	6121      	str	r1, [r4, #16]
 801319a:	07d8      	lsls	r0, r3, #31
 801319c:	d5ea      	bpl.n	8013174 <_printf_float+0x194>
 801319e:	1c4b      	adds	r3, r1, #1
 80131a0:	e7e7      	b.n	8013172 <_printf_float+0x192>
 80131a2:	2900      	cmp	r1, #0
 80131a4:	bfd4      	ite	le
 80131a6:	f1c1 0202 	rsble	r2, r1, #2
 80131aa:	2201      	movgt	r2, #1
 80131ac:	4413      	add	r3, r2
 80131ae:	e7e0      	b.n	8013172 <_printf_float+0x192>
 80131b0:	6823      	ldr	r3, [r4, #0]
 80131b2:	055a      	lsls	r2, r3, #21
 80131b4:	d407      	bmi.n	80131c6 <_printf_float+0x1e6>
 80131b6:	6923      	ldr	r3, [r4, #16]
 80131b8:	4642      	mov	r2, r8
 80131ba:	4631      	mov	r1, r6
 80131bc:	4628      	mov	r0, r5
 80131be:	47b8      	blx	r7
 80131c0:	3001      	adds	r0, #1
 80131c2:	d12b      	bne.n	801321c <_printf_float+0x23c>
 80131c4:	e767      	b.n	8013096 <_printf_float+0xb6>
 80131c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80131ca:	f240 80dd 	bls.w	8013388 <_printf_float+0x3a8>
 80131ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80131d2:	2200      	movs	r2, #0
 80131d4:	2300      	movs	r3, #0
 80131d6:	f7ed fcf7 	bl	8000bc8 <__aeabi_dcmpeq>
 80131da:	2800      	cmp	r0, #0
 80131dc:	d033      	beq.n	8013246 <_printf_float+0x266>
 80131de:	4a37      	ldr	r2, [pc, #220]	@ (80132bc <_printf_float+0x2dc>)
 80131e0:	2301      	movs	r3, #1
 80131e2:	4631      	mov	r1, r6
 80131e4:	4628      	mov	r0, r5
 80131e6:	47b8      	blx	r7
 80131e8:	3001      	adds	r0, #1
 80131ea:	f43f af54 	beq.w	8013096 <_printf_float+0xb6>
 80131ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80131f2:	4543      	cmp	r3, r8
 80131f4:	db02      	blt.n	80131fc <_printf_float+0x21c>
 80131f6:	6823      	ldr	r3, [r4, #0]
 80131f8:	07d8      	lsls	r0, r3, #31
 80131fa:	d50f      	bpl.n	801321c <_printf_float+0x23c>
 80131fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013200:	4631      	mov	r1, r6
 8013202:	4628      	mov	r0, r5
 8013204:	47b8      	blx	r7
 8013206:	3001      	adds	r0, #1
 8013208:	f43f af45 	beq.w	8013096 <_printf_float+0xb6>
 801320c:	f04f 0900 	mov.w	r9, #0
 8013210:	f108 38ff 	add.w	r8, r8, #4294967295
 8013214:	f104 0a1a 	add.w	sl, r4, #26
 8013218:	45c8      	cmp	r8, r9
 801321a:	dc09      	bgt.n	8013230 <_printf_float+0x250>
 801321c:	6823      	ldr	r3, [r4, #0]
 801321e:	079b      	lsls	r3, r3, #30
 8013220:	f100 8103 	bmi.w	801342a <_printf_float+0x44a>
 8013224:	68e0      	ldr	r0, [r4, #12]
 8013226:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013228:	4298      	cmp	r0, r3
 801322a:	bfb8      	it	lt
 801322c:	4618      	movlt	r0, r3
 801322e:	e734      	b.n	801309a <_printf_float+0xba>
 8013230:	2301      	movs	r3, #1
 8013232:	4652      	mov	r2, sl
 8013234:	4631      	mov	r1, r6
 8013236:	4628      	mov	r0, r5
 8013238:	47b8      	blx	r7
 801323a:	3001      	adds	r0, #1
 801323c:	f43f af2b 	beq.w	8013096 <_printf_float+0xb6>
 8013240:	f109 0901 	add.w	r9, r9, #1
 8013244:	e7e8      	b.n	8013218 <_printf_float+0x238>
 8013246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013248:	2b00      	cmp	r3, #0
 801324a:	dc39      	bgt.n	80132c0 <_printf_float+0x2e0>
 801324c:	4a1b      	ldr	r2, [pc, #108]	@ (80132bc <_printf_float+0x2dc>)
 801324e:	2301      	movs	r3, #1
 8013250:	4631      	mov	r1, r6
 8013252:	4628      	mov	r0, r5
 8013254:	47b8      	blx	r7
 8013256:	3001      	adds	r0, #1
 8013258:	f43f af1d 	beq.w	8013096 <_printf_float+0xb6>
 801325c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013260:	ea59 0303 	orrs.w	r3, r9, r3
 8013264:	d102      	bne.n	801326c <_printf_float+0x28c>
 8013266:	6823      	ldr	r3, [r4, #0]
 8013268:	07d9      	lsls	r1, r3, #31
 801326a:	d5d7      	bpl.n	801321c <_printf_float+0x23c>
 801326c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013270:	4631      	mov	r1, r6
 8013272:	4628      	mov	r0, r5
 8013274:	47b8      	blx	r7
 8013276:	3001      	adds	r0, #1
 8013278:	f43f af0d 	beq.w	8013096 <_printf_float+0xb6>
 801327c:	f04f 0a00 	mov.w	sl, #0
 8013280:	f104 0b1a 	add.w	fp, r4, #26
 8013284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013286:	425b      	negs	r3, r3
 8013288:	4553      	cmp	r3, sl
 801328a:	dc01      	bgt.n	8013290 <_printf_float+0x2b0>
 801328c:	464b      	mov	r3, r9
 801328e:	e793      	b.n	80131b8 <_printf_float+0x1d8>
 8013290:	2301      	movs	r3, #1
 8013292:	465a      	mov	r2, fp
 8013294:	4631      	mov	r1, r6
 8013296:	4628      	mov	r0, r5
 8013298:	47b8      	blx	r7
 801329a:	3001      	adds	r0, #1
 801329c:	f43f aefb 	beq.w	8013096 <_printf_float+0xb6>
 80132a0:	f10a 0a01 	add.w	sl, sl, #1
 80132a4:	e7ee      	b.n	8013284 <_printf_float+0x2a4>
 80132a6:	bf00      	nop
 80132a8:	7fefffff 	.word	0x7fefffff
 80132ac:	080d2c90 	.word	0x080d2c90
 80132b0:	080d2c94 	.word	0x080d2c94
 80132b4:	080d2c98 	.word	0x080d2c98
 80132b8:	080d2c9c 	.word	0x080d2c9c
 80132bc:	080d2ca0 	.word	0x080d2ca0
 80132c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80132c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80132c6:	4553      	cmp	r3, sl
 80132c8:	bfa8      	it	ge
 80132ca:	4653      	movge	r3, sl
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	4699      	mov	r9, r3
 80132d0:	dc36      	bgt.n	8013340 <_printf_float+0x360>
 80132d2:	f04f 0b00 	mov.w	fp, #0
 80132d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80132da:	f104 021a 	add.w	r2, r4, #26
 80132de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80132e0:	9306      	str	r3, [sp, #24]
 80132e2:	eba3 0309 	sub.w	r3, r3, r9
 80132e6:	455b      	cmp	r3, fp
 80132e8:	dc31      	bgt.n	801334e <_printf_float+0x36e>
 80132ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132ec:	459a      	cmp	sl, r3
 80132ee:	dc3a      	bgt.n	8013366 <_printf_float+0x386>
 80132f0:	6823      	ldr	r3, [r4, #0]
 80132f2:	07da      	lsls	r2, r3, #31
 80132f4:	d437      	bmi.n	8013366 <_printf_float+0x386>
 80132f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132f8:	ebaa 0903 	sub.w	r9, sl, r3
 80132fc:	9b06      	ldr	r3, [sp, #24]
 80132fe:	ebaa 0303 	sub.w	r3, sl, r3
 8013302:	4599      	cmp	r9, r3
 8013304:	bfa8      	it	ge
 8013306:	4699      	movge	r9, r3
 8013308:	f1b9 0f00 	cmp.w	r9, #0
 801330c:	dc33      	bgt.n	8013376 <_printf_float+0x396>
 801330e:	f04f 0800 	mov.w	r8, #0
 8013312:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013316:	f104 0b1a 	add.w	fp, r4, #26
 801331a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801331c:	ebaa 0303 	sub.w	r3, sl, r3
 8013320:	eba3 0309 	sub.w	r3, r3, r9
 8013324:	4543      	cmp	r3, r8
 8013326:	f77f af79 	ble.w	801321c <_printf_float+0x23c>
 801332a:	2301      	movs	r3, #1
 801332c:	465a      	mov	r2, fp
 801332e:	4631      	mov	r1, r6
 8013330:	4628      	mov	r0, r5
 8013332:	47b8      	blx	r7
 8013334:	3001      	adds	r0, #1
 8013336:	f43f aeae 	beq.w	8013096 <_printf_float+0xb6>
 801333a:	f108 0801 	add.w	r8, r8, #1
 801333e:	e7ec      	b.n	801331a <_printf_float+0x33a>
 8013340:	4642      	mov	r2, r8
 8013342:	4631      	mov	r1, r6
 8013344:	4628      	mov	r0, r5
 8013346:	47b8      	blx	r7
 8013348:	3001      	adds	r0, #1
 801334a:	d1c2      	bne.n	80132d2 <_printf_float+0x2f2>
 801334c:	e6a3      	b.n	8013096 <_printf_float+0xb6>
 801334e:	2301      	movs	r3, #1
 8013350:	4631      	mov	r1, r6
 8013352:	4628      	mov	r0, r5
 8013354:	9206      	str	r2, [sp, #24]
 8013356:	47b8      	blx	r7
 8013358:	3001      	adds	r0, #1
 801335a:	f43f ae9c 	beq.w	8013096 <_printf_float+0xb6>
 801335e:	9a06      	ldr	r2, [sp, #24]
 8013360:	f10b 0b01 	add.w	fp, fp, #1
 8013364:	e7bb      	b.n	80132de <_printf_float+0x2fe>
 8013366:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801336a:	4631      	mov	r1, r6
 801336c:	4628      	mov	r0, r5
 801336e:	47b8      	blx	r7
 8013370:	3001      	adds	r0, #1
 8013372:	d1c0      	bne.n	80132f6 <_printf_float+0x316>
 8013374:	e68f      	b.n	8013096 <_printf_float+0xb6>
 8013376:	9a06      	ldr	r2, [sp, #24]
 8013378:	464b      	mov	r3, r9
 801337a:	4442      	add	r2, r8
 801337c:	4631      	mov	r1, r6
 801337e:	4628      	mov	r0, r5
 8013380:	47b8      	blx	r7
 8013382:	3001      	adds	r0, #1
 8013384:	d1c3      	bne.n	801330e <_printf_float+0x32e>
 8013386:	e686      	b.n	8013096 <_printf_float+0xb6>
 8013388:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801338c:	f1ba 0f01 	cmp.w	sl, #1
 8013390:	dc01      	bgt.n	8013396 <_printf_float+0x3b6>
 8013392:	07db      	lsls	r3, r3, #31
 8013394:	d536      	bpl.n	8013404 <_printf_float+0x424>
 8013396:	2301      	movs	r3, #1
 8013398:	4642      	mov	r2, r8
 801339a:	4631      	mov	r1, r6
 801339c:	4628      	mov	r0, r5
 801339e:	47b8      	blx	r7
 80133a0:	3001      	adds	r0, #1
 80133a2:	f43f ae78 	beq.w	8013096 <_printf_float+0xb6>
 80133a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80133aa:	4631      	mov	r1, r6
 80133ac:	4628      	mov	r0, r5
 80133ae:	47b8      	blx	r7
 80133b0:	3001      	adds	r0, #1
 80133b2:	f43f ae70 	beq.w	8013096 <_printf_float+0xb6>
 80133b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80133ba:	2200      	movs	r2, #0
 80133bc:	2300      	movs	r3, #0
 80133be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80133c2:	f7ed fc01 	bl	8000bc8 <__aeabi_dcmpeq>
 80133c6:	b9c0      	cbnz	r0, 80133fa <_printf_float+0x41a>
 80133c8:	4653      	mov	r3, sl
 80133ca:	f108 0201 	add.w	r2, r8, #1
 80133ce:	4631      	mov	r1, r6
 80133d0:	4628      	mov	r0, r5
 80133d2:	47b8      	blx	r7
 80133d4:	3001      	adds	r0, #1
 80133d6:	d10c      	bne.n	80133f2 <_printf_float+0x412>
 80133d8:	e65d      	b.n	8013096 <_printf_float+0xb6>
 80133da:	2301      	movs	r3, #1
 80133dc:	465a      	mov	r2, fp
 80133de:	4631      	mov	r1, r6
 80133e0:	4628      	mov	r0, r5
 80133e2:	47b8      	blx	r7
 80133e4:	3001      	adds	r0, #1
 80133e6:	f43f ae56 	beq.w	8013096 <_printf_float+0xb6>
 80133ea:	f108 0801 	add.w	r8, r8, #1
 80133ee:	45d0      	cmp	r8, sl
 80133f0:	dbf3      	blt.n	80133da <_printf_float+0x3fa>
 80133f2:	464b      	mov	r3, r9
 80133f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80133f8:	e6df      	b.n	80131ba <_printf_float+0x1da>
 80133fa:	f04f 0800 	mov.w	r8, #0
 80133fe:	f104 0b1a 	add.w	fp, r4, #26
 8013402:	e7f4      	b.n	80133ee <_printf_float+0x40e>
 8013404:	2301      	movs	r3, #1
 8013406:	4642      	mov	r2, r8
 8013408:	e7e1      	b.n	80133ce <_printf_float+0x3ee>
 801340a:	2301      	movs	r3, #1
 801340c:	464a      	mov	r2, r9
 801340e:	4631      	mov	r1, r6
 8013410:	4628      	mov	r0, r5
 8013412:	47b8      	blx	r7
 8013414:	3001      	adds	r0, #1
 8013416:	f43f ae3e 	beq.w	8013096 <_printf_float+0xb6>
 801341a:	f108 0801 	add.w	r8, r8, #1
 801341e:	68e3      	ldr	r3, [r4, #12]
 8013420:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013422:	1a5b      	subs	r3, r3, r1
 8013424:	4543      	cmp	r3, r8
 8013426:	dcf0      	bgt.n	801340a <_printf_float+0x42a>
 8013428:	e6fc      	b.n	8013224 <_printf_float+0x244>
 801342a:	f04f 0800 	mov.w	r8, #0
 801342e:	f104 0919 	add.w	r9, r4, #25
 8013432:	e7f4      	b.n	801341e <_printf_float+0x43e>

08013434 <_printf_common>:
 8013434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013438:	4616      	mov	r6, r2
 801343a:	4698      	mov	r8, r3
 801343c:	688a      	ldr	r2, [r1, #8]
 801343e:	690b      	ldr	r3, [r1, #16]
 8013440:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013444:	4293      	cmp	r3, r2
 8013446:	bfb8      	it	lt
 8013448:	4613      	movlt	r3, r2
 801344a:	6033      	str	r3, [r6, #0]
 801344c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013450:	4607      	mov	r7, r0
 8013452:	460c      	mov	r4, r1
 8013454:	b10a      	cbz	r2, 801345a <_printf_common+0x26>
 8013456:	3301      	adds	r3, #1
 8013458:	6033      	str	r3, [r6, #0]
 801345a:	6823      	ldr	r3, [r4, #0]
 801345c:	0699      	lsls	r1, r3, #26
 801345e:	bf42      	ittt	mi
 8013460:	6833      	ldrmi	r3, [r6, #0]
 8013462:	3302      	addmi	r3, #2
 8013464:	6033      	strmi	r3, [r6, #0]
 8013466:	6825      	ldr	r5, [r4, #0]
 8013468:	f015 0506 	ands.w	r5, r5, #6
 801346c:	d106      	bne.n	801347c <_printf_common+0x48>
 801346e:	f104 0a19 	add.w	sl, r4, #25
 8013472:	68e3      	ldr	r3, [r4, #12]
 8013474:	6832      	ldr	r2, [r6, #0]
 8013476:	1a9b      	subs	r3, r3, r2
 8013478:	42ab      	cmp	r3, r5
 801347a:	dc26      	bgt.n	80134ca <_printf_common+0x96>
 801347c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013480:	6822      	ldr	r2, [r4, #0]
 8013482:	3b00      	subs	r3, #0
 8013484:	bf18      	it	ne
 8013486:	2301      	movne	r3, #1
 8013488:	0692      	lsls	r2, r2, #26
 801348a:	d42b      	bmi.n	80134e4 <_printf_common+0xb0>
 801348c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013490:	4641      	mov	r1, r8
 8013492:	4638      	mov	r0, r7
 8013494:	47c8      	blx	r9
 8013496:	3001      	adds	r0, #1
 8013498:	d01e      	beq.n	80134d8 <_printf_common+0xa4>
 801349a:	6823      	ldr	r3, [r4, #0]
 801349c:	6922      	ldr	r2, [r4, #16]
 801349e:	f003 0306 	and.w	r3, r3, #6
 80134a2:	2b04      	cmp	r3, #4
 80134a4:	bf02      	ittt	eq
 80134a6:	68e5      	ldreq	r5, [r4, #12]
 80134a8:	6833      	ldreq	r3, [r6, #0]
 80134aa:	1aed      	subeq	r5, r5, r3
 80134ac:	68a3      	ldr	r3, [r4, #8]
 80134ae:	bf0c      	ite	eq
 80134b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80134b4:	2500      	movne	r5, #0
 80134b6:	4293      	cmp	r3, r2
 80134b8:	bfc4      	itt	gt
 80134ba:	1a9b      	subgt	r3, r3, r2
 80134bc:	18ed      	addgt	r5, r5, r3
 80134be:	2600      	movs	r6, #0
 80134c0:	341a      	adds	r4, #26
 80134c2:	42b5      	cmp	r5, r6
 80134c4:	d11a      	bne.n	80134fc <_printf_common+0xc8>
 80134c6:	2000      	movs	r0, #0
 80134c8:	e008      	b.n	80134dc <_printf_common+0xa8>
 80134ca:	2301      	movs	r3, #1
 80134cc:	4652      	mov	r2, sl
 80134ce:	4641      	mov	r1, r8
 80134d0:	4638      	mov	r0, r7
 80134d2:	47c8      	blx	r9
 80134d4:	3001      	adds	r0, #1
 80134d6:	d103      	bne.n	80134e0 <_printf_common+0xac>
 80134d8:	f04f 30ff 	mov.w	r0, #4294967295
 80134dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134e0:	3501      	adds	r5, #1
 80134e2:	e7c6      	b.n	8013472 <_printf_common+0x3e>
 80134e4:	18e1      	adds	r1, r4, r3
 80134e6:	1c5a      	adds	r2, r3, #1
 80134e8:	2030      	movs	r0, #48	@ 0x30
 80134ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80134ee:	4422      	add	r2, r4
 80134f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80134f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80134f8:	3302      	adds	r3, #2
 80134fa:	e7c7      	b.n	801348c <_printf_common+0x58>
 80134fc:	2301      	movs	r3, #1
 80134fe:	4622      	mov	r2, r4
 8013500:	4641      	mov	r1, r8
 8013502:	4638      	mov	r0, r7
 8013504:	47c8      	blx	r9
 8013506:	3001      	adds	r0, #1
 8013508:	d0e6      	beq.n	80134d8 <_printf_common+0xa4>
 801350a:	3601      	adds	r6, #1
 801350c:	e7d9      	b.n	80134c2 <_printf_common+0x8e>
	...

08013510 <_printf_i>:
 8013510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013514:	7e0f      	ldrb	r7, [r1, #24]
 8013516:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013518:	2f78      	cmp	r7, #120	@ 0x78
 801351a:	4691      	mov	r9, r2
 801351c:	4680      	mov	r8, r0
 801351e:	460c      	mov	r4, r1
 8013520:	469a      	mov	sl, r3
 8013522:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013526:	d807      	bhi.n	8013538 <_printf_i+0x28>
 8013528:	2f62      	cmp	r7, #98	@ 0x62
 801352a:	d80a      	bhi.n	8013542 <_printf_i+0x32>
 801352c:	2f00      	cmp	r7, #0
 801352e:	f000 80d2 	beq.w	80136d6 <_printf_i+0x1c6>
 8013532:	2f58      	cmp	r7, #88	@ 0x58
 8013534:	f000 80b9 	beq.w	80136aa <_printf_i+0x19a>
 8013538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801353c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013540:	e03a      	b.n	80135b8 <_printf_i+0xa8>
 8013542:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013546:	2b15      	cmp	r3, #21
 8013548:	d8f6      	bhi.n	8013538 <_printf_i+0x28>
 801354a:	a101      	add	r1, pc, #4	@ (adr r1, 8013550 <_printf_i+0x40>)
 801354c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013550:	080135a9 	.word	0x080135a9
 8013554:	080135bd 	.word	0x080135bd
 8013558:	08013539 	.word	0x08013539
 801355c:	08013539 	.word	0x08013539
 8013560:	08013539 	.word	0x08013539
 8013564:	08013539 	.word	0x08013539
 8013568:	080135bd 	.word	0x080135bd
 801356c:	08013539 	.word	0x08013539
 8013570:	08013539 	.word	0x08013539
 8013574:	08013539 	.word	0x08013539
 8013578:	08013539 	.word	0x08013539
 801357c:	080136bd 	.word	0x080136bd
 8013580:	080135e7 	.word	0x080135e7
 8013584:	08013677 	.word	0x08013677
 8013588:	08013539 	.word	0x08013539
 801358c:	08013539 	.word	0x08013539
 8013590:	080136df 	.word	0x080136df
 8013594:	08013539 	.word	0x08013539
 8013598:	080135e7 	.word	0x080135e7
 801359c:	08013539 	.word	0x08013539
 80135a0:	08013539 	.word	0x08013539
 80135a4:	0801367f 	.word	0x0801367f
 80135a8:	6833      	ldr	r3, [r6, #0]
 80135aa:	1d1a      	adds	r2, r3, #4
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	6032      	str	r2, [r6, #0]
 80135b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80135b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80135b8:	2301      	movs	r3, #1
 80135ba:	e09d      	b.n	80136f8 <_printf_i+0x1e8>
 80135bc:	6833      	ldr	r3, [r6, #0]
 80135be:	6820      	ldr	r0, [r4, #0]
 80135c0:	1d19      	adds	r1, r3, #4
 80135c2:	6031      	str	r1, [r6, #0]
 80135c4:	0606      	lsls	r6, r0, #24
 80135c6:	d501      	bpl.n	80135cc <_printf_i+0xbc>
 80135c8:	681d      	ldr	r5, [r3, #0]
 80135ca:	e003      	b.n	80135d4 <_printf_i+0xc4>
 80135cc:	0645      	lsls	r5, r0, #25
 80135ce:	d5fb      	bpl.n	80135c8 <_printf_i+0xb8>
 80135d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80135d4:	2d00      	cmp	r5, #0
 80135d6:	da03      	bge.n	80135e0 <_printf_i+0xd0>
 80135d8:	232d      	movs	r3, #45	@ 0x2d
 80135da:	426d      	negs	r5, r5
 80135dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80135e0:	4859      	ldr	r0, [pc, #356]	@ (8013748 <_printf_i+0x238>)
 80135e2:	230a      	movs	r3, #10
 80135e4:	e011      	b.n	801360a <_printf_i+0xfa>
 80135e6:	6821      	ldr	r1, [r4, #0]
 80135e8:	6833      	ldr	r3, [r6, #0]
 80135ea:	0608      	lsls	r0, r1, #24
 80135ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80135f0:	d402      	bmi.n	80135f8 <_printf_i+0xe8>
 80135f2:	0649      	lsls	r1, r1, #25
 80135f4:	bf48      	it	mi
 80135f6:	b2ad      	uxthmi	r5, r5
 80135f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80135fa:	4853      	ldr	r0, [pc, #332]	@ (8013748 <_printf_i+0x238>)
 80135fc:	6033      	str	r3, [r6, #0]
 80135fe:	bf14      	ite	ne
 8013600:	230a      	movne	r3, #10
 8013602:	2308      	moveq	r3, #8
 8013604:	2100      	movs	r1, #0
 8013606:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801360a:	6866      	ldr	r6, [r4, #4]
 801360c:	60a6      	str	r6, [r4, #8]
 801360e:	2e00      	cmp	r6, #0
 8013610:	bfa2      	ittt	ge
 8013612:	6821      	ldrge	r1, [r4, #0]
 8013614:	f021 0104 	bicge.w	r1, r1, #4
 8013618:	6021      	strge	r1, [r4, #0]
 801361a:	b90d      	cbnz	r5, 8013620 <_printf_i+0x110>
 801361c:	2e00      	cmp	r6, #0
 801361e:	d04b      	beq.n	80136b8 <_printf_i+0x1a8>
 8013620:	4616      	mov	r6, r2
 8013622:	fbb5 f1f3 	udiv	r1, r5, r3
 8013626:	fb03 5711 	mls	r7, r3, r1, r5
 801362a:	5dc7      	ldrb	r7, [r0, r7]
 801362c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013630:	462f      	mov	r7, r5
 8013632:	42bb      	cmp	r3, r7
 8013634:	460d      	mov	r5, r1
 8013636:	d9f4      	bls.n	8013622 <_printf_i+0x112>
 8013638:	2b08      	cmp	r3, #8
 801363a:	d10b      	bne.n	8013654 <_printf_i+0x144>
 801363c:	6823      	ldr	r3, [r4, #0]
 801363e:	07df      	lsls	r7, r3, #31
 8013640:	d508      	bpl.n	8013654 <_printf_i+0x144>
 8013642:	6923      	ldr	r3, [r4, #16]
 8013644:	6861      	ldr	r1, [r4, #4]
 8013646:	4299      	cmp	r1, r3
 8013648:	bfde      	ittt	le
 801364a:	2330      	movle	r3, #48	@ 0x30
 801364c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013650:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013654:	1b92      	subs	r2, r2, r6
 8013656:	6122      	str	r2, [r4, #16]
 8013658:	f8cd a000 	str.w	sl, [sp]
 801365c:	464b      	mov	r3, r9
 801365e:	aa03      	add	r2, sp, #12
 8013660:	4621      	mov	r1, r4
 8013662:	4640      	mov	r0, r8
 8013664:	f7ff fee6 	bl	8013434 <_printf_common>
 8013668:	3001      	adds	r0, #1
 801366a:	d14a      	bne.n	8013702 <_printf_i+0x1f2>
 801366c:	f04f 30ff 	mov.w	r0, #4294967295
 8013670:	b004      	add	sp, #16
 8013672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013676:	6823      	ldr	r3, [r4, #0]
 8013678:	f043 0320 	orr.w	r3, r3, #32
 801367c:	6023      	str	r3, [r4, #0]
 801367e:	4833      	ldr	r0, [pc, #204]	@ (801374c <_printf_i+0x23c>)
 8013680:	2778      	movs	r7, #120	@ 0x78
 8013682:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013686:	6823      	ldr	r3, [r4, #0]
 8013688:	6831      	ldr	r1, [r6, #0]
 801368a:	061f      	lsls	r7, r3, #24
 801368c:	f851 5b04 	ldr.w	r5, [r1], #4
 8013690:	d402      	bmi.n	8013698 <_printf_i+0x188>
 8013692:	065f      	lsls	r7, r3, #25
 8013694:	bf48      	it	mi
 8013696:	b2ad      	uxthmi	r5, r5
 8013698:	6031      	str	r1, [r6, #0]
 801369a:	07d9      	lsls	r1, r3, #31
 801369c:	bf44      	itt	mi
 801369e:	f043 0320 	orrmi.w	r3, r3, #32
 80136a2:	6023      	strmi	r3, [r4, #0]
 80136a4:	b11d      	cbz	r5, 80136ae <_printf_i+0x19e>
 80136a6:	2310      	movs	r3, #16
 80136a8:	e7ac      	b.n	8013604 <_printf_i+0xf4>
 80136aa:	4827      	ldr	r0, [pc, #156]	@ (8013748 <_printf_i+0x238>)
 80136ac:	e7e9      	b.n	8013682 <_printf_i+0x172>
 80136ae:	6823      	ldr	r3, [r4, #0]
 80136b0:	f023 0320 	bic.w	r3, r3, #32
 80136b4:	6023      	str	r3, [r4, #0]
 80136b6:	e7f6      	b.n	80136a6 <_printf_i+0x196>
 80136b8:	4616      	mov	r6, r2
 80136ba:	e7bd      	b.n	8013638 <_printf_i+0x128>
 80136bc:	6833      	ldr	r3, [r6, #0]
 80136be:	6825      	ldr	r5, [r4, #0]
 80136c0:	6961      	ldr	r1, [r4, #20]
 80136c2:	1d18      	adds	r0, r3, #4
 80136c4:	6030      	str	r0, [r6, #0]
 80136c6:	062e      	lsls	r6, r5, #24
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	d501      	bpl.n	80136d0 <_printf_i+0x1c0>
 80136cc:	6019      	str	r1, [r3, #0]
 80136ce:	e002      	b.n	80136d6 <_printf_i+0x1c6>
 80136d0:	0668      	lsls	r0, r5, #25
 80136d2:	d5fb      	bpl.n	80136cc <_printf_i+0x1bc>
 80136d4:	8019      	strh	r1, [r3, #0]
 80136d6:	2300      	movs	r3, #0
 80136d8:	6123      	str	r3, [r4, #16]
 80136da:	4616      	mov	r6, r2
 80136dc:	e7bc      	b.n	8013658 <_printf_i+0x148>
 80136de:	6833      	ldr	r3, [r6, #0]
 80136e0:	1d1a      	adds	r2, r3, #4
 80136e2:	6032      	str	r2, [r6, #0]
 80136e4:	681e      	ldr	r6, [r3, #0]
 80136e6:	6862      	ldr	r2, [r4, #4]
 80136e8:	2100      	movs	r1, #0
 80136ea:	4630      	mov	r0, r6
 80136ec:	f7ec fdf0 	bl	80002d0 <memchr>
 80136f0:	b108      	cbz	r0, 80136f6 <_printf_i+0x1e6>
 80136f2:	1b80      	subs	r0, r0, r6
 80136f4:	6060      	str	r0, [r4, #4]
 80136f6:	6863      	ldr	r3, [r4, #4]
 80136f8:	6123      	str	r3, [r4, #16]
 80136fa:	2300      	movs	r3, #0
 80136fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013700:	e7aa      	b.n	8013658 <_printf_i+0x148>
 8013702:	6923      	ldr	r3, [r4, #16]
 8013704:	4632      	mov	r2, r6
 8013706:	4649      	mov	r1, r9
 8013708:	4640      	mov	r0, r8
 801370a:	47d0      	blx	sl
 801370c:	3001      	adds	r0, #1
 801370e:	d0ad      	beq.n	801366c <_printf_i+0x15c>
 8013710:	6823      	ldr	r3, [r4, #0]
 8013712:	079b      	lsls	r3, r3, #30
 8013714:	d413      	bmi.n	801373e <_printf_i+0x22e>
 8013716:	68e0      	ldr	r0, [r4, #12]
 8013718:	9b03      	ldr	r3, [sp, #12]
 801371a:	4298      	cmp	r0, r3
 801371c:	bfb8      	it	lt
 801371e:	4618      	movlt	r0, r3
 8013720:	e7a6      	b.n	8013670 <_printf_i+0x160>
 8013722:	2301      	movs	r3, #1
 8013724:	4632      	mov	r2, r6
 8013726:	4649      	mov	r1, r9
 8013728:	4640      	mov	r0, r8
 801372a:	47d0      	blx	sl
 801372c:	3001      	adds	r0, #1
 801372e:	d09d      	beq.n	801366c <_printf_i+0x15c>
 8013730:	3501      	adds	r5, #1
 8013732:	68e3      	ldr	r3, [r4, #12]
 8013734:	9903      	ldr	r1, [sp, #12]
 8013736:	1a5b      	subs	r3, r3, r1
 8013738:	42ab      	cmp	r3, r5
 801373a:	dcf2      	bgt.n	8013722 <_printf_i+0x212>
 801373c:	e7eb      	b.n	8013716 <_printf_i+0x206>
 801373e:	2500      	movs	r5, #0
 8013740:	f104 0619 	add.w	r6, r4, #25
 8013744:	e7f5      	b.n	8013732 <_printf_i+0x222>
 8013746:	bf00      	nop
 8013748:	080d2ca2 	.word	0x080d2ca2
 801374c:	080d2cb3 	.word	0x080d2cb3

08013750 <std>:
 8013750:	2300      	movs	r3, #0
 8013752:	b510      	push	{r4, lr}
 8013754:	4604      	mov	r4, r0
 8013756:	e9c0 3300 	strd	r3, r3, [r0]
 801375a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801375e:	6083      	str	r3, [r0, #8]
 8013760:	8181      	strh	r1, [r0, #12]
 8013762:	6643      	str	r3, [r0, #100]	@ 0x64
 8013764:	81c2      	strh	r2, [r0, #14]
 8013766:	6183      	str	r3, [r0, #24]
 8013768:	4619      	mov	r1, r3
 801376a:	2208      	movs	r2, #8
 801376c:	305c      	adds	r0, #92	@ 0x5c
 801376e:	f000 f9f9 	bl	8013b64 <memset>
 8013772:	4b0d      	ldr	r3, [pc, #52]	@ (80137a8 <std+0x58>)
 8013774:	6263      	str	r3, [r4, #36]	@ 0x24
 8013776:	4b0d      	ldr	r3, [pc, #52]	@ (80137ac <std+0x5c>)
 8013778:	62a3      	str	r3, [r4, #40]	@ 0x28
 801377a:	4b0d      	ldr	r3, [pc, #52]	@ (80137b0 <std+0x60>)
 801377c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801377e:	4b0d      	ldr	r3, [pc, #52]	@ (80137b4 <std+0x64>)
 8013780:	6323      	str	r3, [r4, #48]	@ 0x30
 8013782:	4b0d      	ldr	r3, [pc, #52]	@ (80137b8 <std+0x68>)
 8013784:	6224      	str	r4, [r4, #32]
 8013786:	429c      	cmp	r4, r3
 8013788:	d006      	beq.n	8013798 <std+0x48>
 801378a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801378e:	4294      	cmp	r4, r2
 8013790:	d002      	beq.n	8013798 <std+0x48>
 8013792:	33d0      	adds	r3, #208	@ 0xd0
 8013794:	429c      	cmp	r4, r3
 8013796:	d105      	bne.n	80137a4 <std+0x54>
 8013798:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801379c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137a0:	f000 ba6c 	b.w	8013c7c <__retarget_lock_init_recursive>
 80137a4:	bd10      	pop	{r4, pc}
 80137a6:	bf00      	nop
 80137a8:	080139b5 	.word	0x080139b5
 80137ac:	080139d7 	.word	0x080139d7
 80137b0:	08013a0f 	.word	0x08013a0f
 80137b4:	08013a33 	.word	0x08013a33
 80137b8:	20005cb8 	.word	0x20005cb8

080137bc <stdio_exit_handler>:
 80137bc:	4a02      	ldr	r2, [pc, #8]	@ (80137c8 <stdio_exit_handler+0xc>)
 80137be:	4903      	ldr	r1, [pc, #12]	@ (80137cc <stdio_exit_handler+0x10>)
 80137c0:	4803      	ldr	r0, [pc, #12]	@ (80137d0 <stdio_exit_handler+0x14>)
 80137c2:	f000 b869 	b.w	8013898 <_fwalk_sglue>
 80137c6:	bf00      	nop
 80137c8:	2000080c 	.word	0x2000080c
 80137cc:	0801545d 	.word	0x0801545d
 80137d0:	2000081c 	.word	0x2000081c

080137d4 <cleanup_stdio>:
 80137d4:	6841      	ldr	r1, [r0, #4]
 80137d6:	4b0c      	ldr	r3, [pc, #48]	@ (8013808 <cleanup_stdio+0x34>)
 80137d8:	4299      	cmp	r1, r3
 80137da:	b510      	push	{r4, lr}
 80137dc:	4604      	mov	r4, r0
 80137de:	d001      	beq.n	80137e4 <cleanup_stdio+0x10>
 80137e0:	f001 fe3c 	bl	801545c <_fflush_r>
 80137e4:	68a1      	ldr	r1, [r4, #8]
 80137e6:	4b09      	ldr	r3, [pc, #36]	@ (801380c <cleanup_stdio+0x38>)
 80137e8:	4299      	cmp	r1, r3
 80137ea:	d002      	beq.n	80137f2 <cleanup_stdio+0x1e>
 80137ec:	4620      	mov	r0, r4
 80137ee:	f001 fe35 	bl	801545c <_fflush_r>
 80137f2:	68e1      	ldr	r1, [r4, #12]
 80137f4:	4b06      	ldr	r3, [pc, #24]	@ (8013810 <cleanup_stdio+0x3c>)
 80137f6:	4299      	cmp	r1, r3
 80137f8:	d004      	beq.n	8013804 <cleanup_stdio+0x30>
 80137fa:	4620      	mov	r0, r4
 80137fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013800:	f001 be2c 	b.w	801545c <_fflush_r>
 8013804:	bd10      	pop	{r4, pc}
 8013806:	bf00      	nop
 8013808:	20005cb8 	.word	0x20005cb8
 801380c:	20005d20 	.word	0x20005d20
 8013810:	20005d88 	.word	0x20005d88

08013814 <global_stdio_init.part.0>:
 8013814:	b510      	push	{r4, lr}
 8013816:	4b0b      	ldr	r3, [pc, #44]	@ (8013844 <global_stdio_init.part.0+0x30>)
 8013818:	4c0b      	ldr	r4, [pc, #44]	@ (8013848 <global_stdio_init.part.0+0x34>)
 801381a:	4a0c      	ldr	r2, [pc, #48]	@ (801384c <global_stdio_init.part.0+0x38>)
 801381c:	601a      	str	r2, [r3, #0]
 801381e:	4620      	mov	r0, r4
 8013820:	2200      	movs	r2, #0
 8013822:	2104      	movs	r1, #4
 8013824:	f7ff ff94 	bl	8013750 <std>
 8013828:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801382c:	2201      	movs	r2, #1
 801382e:	2109      	movs	r1, #9
 8013830:	f7ff ff8e 	bl	8013750 <std>
 8013834:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013838:	2202      	movs	r2, #2
 801383a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801383e:	2112      	movs	r1, #18
 8013840:	f7ff bf86 	b.w	8013750 <std>
 8013844:	20005df0 	.word	0x20005df0
 8013848:	20005cb8 	.word	0x20005cb8
 801384c:	080137bd 	.word	0x080137bd

08013850 <__sfp_lock_acquire>:
 8013850:	4801      	ldr	r0, [pc, #4]	@ (8013858 <__sfp_lock_acquire+0x8>)
 8013852:	f000 ba14 	b.w	8013c7e <__retarget_lock_acquire_recursive>
 8013856:	bf00      	nop
 8013858:	20005df9 	.word	0x20005df9

0801385c <__sfp_lock_release>:
 801385c:	4801      	ldr	r0, [pc, #4]	@ (8013864 <__sfp_lock_release+0x8>)
 801385e:	f000 ba0f 	b.w	8013c80 <__retarget_lock_release_recursive>
 8013862:	bf00      	nop
 8013864:	20005df9 	.word	0x20005df9

08013868 <__sinit>:
 8013868:	b510      	push	{r4, lr}
 801386a:	4604      	mov	r4, r0
 801386c:	f7ff fff0 	bl	8013850 <__sfp_lock_acquire>
 8013870:	6a23      	ldr	r3, [r4, #32]
 8013872:	b11b      	cbz	r3, 801387c <__sinit+0x14>
 8013874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013878:	f7ff bff0 	b.w	801385c <__sfp_lock_release>
 801387c:	4b04      	ldr	r3, [pc, #16]	@ (8013890 <__sinit+0x28>)
 801387e:	6223      	str	r3, [r4, #32]
 8013880:	4b04      	ldr	r3, [pc, #16]	@ (8013894 <__sinit+0x2c>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d1f5      	bne.n	8013874 <__sinit+0xc>
 8013888:	f7ff ffc4 	bl	8013814 <global_stdio_init.part.0>
 801388c:	e7f2      	b.n	8013874 <__sinit+0xc>
 801388e:	bf00      	nop
 8013890:	080137d5 	.word	0x080137d5
 8013894:	20005df0 	.word	0x20005df0

08013898 <_fwalk_sglue>:
 8013898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801389c:	4607      	mov	r7, r0
 801389e:	4688      	mov	r8, r1
 80138a0:	4614      	mov	r4, r2
 80138a2:	2600      	movs	r6, #0
 80138a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80138a8:	f1b9 0901 	subs.w	r9, r9, #1
 80138ac:	d505      	bpl.n	80138ba <_fwalk_sglue+0x22>
 80138ae:	6824      	ldr	r4, [r4, #0]
 80138b0:	2c00      	cmp	r4, #0
 80138b2:	d1f7      	bne.n	80138a4 <_fwalk_sglue+0xc>
 80138b4:	4630      	mov	r0, r6
 80138b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138ba:	89ab      	ldrh	r3, [r5, #12]
 80138bc:	2b01      	cmp	r3, #1
 80138be:	d907      	bls.n	80138d0 <_fwalk_sglue+0x38>
 80138c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80138c4:	3301      	adds	r3, #1
 80138c6:	d003      	beq.n	80138d0 <_fwalk_sglue+0x38>
 80138c8:	4629      	mov	r1, r5
 80138ca:	4638      	mov	r0, r7
 80138cc:	47c0      	blx	r8
 80138ce:	4306      	orrs	r6, r0
 80138d0:	3568      	adds	r5, #104	@ 0x68
 80138d2:	e7e9      	b.n	80138a8 <_fwalk_sglue+0x10>

080138d4 <iprintf>:
 80138d4:	b40f      	push	{r0, r1, r2, r3}
 80138d6:	b507      	push	{r0, r1, r2, lr}
 80138d8:	4906      	ldr	r1, [pc, #24]	@ (80138f4 <iprintf+0x20>)
 80138da:	ab04      	add	r3, sp, #16
 80138dc:	6808      	ldr	r0, [r1, #0]
 80138de:	f853 2b04 	ldr.w	r2, [r3], #4
 80138e2:	6881      	ldr	r1, [r0, #8]
 80138e4:	9301      	str	r3, [sp, #4]
 80138e6:	f001 fc1d 	bl	8015124 <_vfiprintf_r>
 80138ea:	b003      	add	sp, #12
 80138ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80138f0:	b004      	add	sp, #16
 80138f2:	4770      	bx	lr
 80138f4:	20000818 	.word	0x20000818

080138f8 <_puts_r>:
 80138f8:	6a03      	ldr	r3, [r0, #32]
 80138fa:	b570      	push	{r4, r5, r6, lr}
 80138fc:	6884      	ldr	r4, [r0, #8]
 80138fe:	4605      	mov	r5, r0
 8013900:	460e      	mov	r6, r1
 8013902:	b90b      	cbnz	r3, 8013908 <_puts_r+0x10>
 8013904:	f7ff ffb0 	bl	8013868 <__sinit>
 8013908:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801390a:	07db      	lsls	r3, r3, #31
 801390c:	d405      	bmi.n	801391a <_puts_r+0x22>
 801390e:	89a3      	ldrh	r3, [r4, #12]
 8013910:	0598      	lsls	r0, r3, #22
 8013912:	d402      	bmi.n	801391a <_puts_r+0x22>
 8013914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013916:	f000 f9b2 	bl	8013c7e <__retarget_lock_acquire_recursive>
 801391a:	89a3      	ldrh	r3, [r4, #12]
 801391c:	0719      	lsls	r1, r3, #28
 801391e:	d502      	bpl.n	8013926 <_puts_r+0x2e>
 8013920:	6923      	ldr	r3, [r4, #16]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d135      	bne.n	8013992 <_puts_r+0x9a>
 8013926:	4621      	mov	r1, r4
 8013928:	4628      	mov	r0, r5
 801392a:	f000 f8c5 	bl	8013ab8 <__swsetup_r>
 801392e:	b380      	cbz	r0, 8013992 <_puts_r+0x9a>
 8013930:	f04f 35ff 	mov.w	r5, #4294967295
 8013934:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013936:	07da      	lsls	r2, r3, #31
 8013938:	d405      	bmi.n	8013946 <_puts_r+0x4e>
 801393a:	89a3      	ldrh	r3, [r4, #12]
 801393c:	059b      	lsls	r3, r3, #22
 801393e:	d402      	bmi.n	8013946 <_puts_r+0x4e>
 8013940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013942:	f000 f99d 	bl	8013c80 <__retarget_lock_release_recursive>
 8013946:	4628      	mov	r0, r5
 8013948:	bd70      	pop	{r4, r5, r6, pc}
 801394a:	2b00      	cmp	r3, #0
 801394c:	da04      	bge.n	8013958 <_puts_r+0x60>
 801394e:	69a2      	ldr	r2, [r4, #24]
 8013950:	429a      	cmp	r2, r3
 8013952:	dc17      	bgt.n	8013984 <_puts_r+0x8c>
 8013954:	290a      	cmp	r1, #10
 8013956:	d015      	beq.n	8013984 <_puts_r+0x8c>
 8013958:	6823      	ldr	r3, [r4, #0]
 801395a:	1c5a      	adds	r2, r3, #1
 801395c:	6022      	str	r2, [r4, #0]
 801395e:	7019      	strb	r1, [r3, #0]
 8013960:	68a3      	ldr	r3, [r4, #8]
 8013962:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013966:	3b01      	subs	r3, #1
 8013968:	60a3      	str	r3, [r4, #8]
 801396a:	2900      	cmp	r1, #0
 801396c:	d1ed      	bne.n	801394a <_puts_r+0x52>
 801396e:	2b00      	cmp	r3, #0
 8013970:	da11      	bge.n	8013996 <_puts_r+0x9e>
 8013972:	4622      	mov	r2, r4
 8013974:	210a      	movs	r1, #10
 8013976:	4628      	mov	r0, r5
 8013978:	f000 f85f 	bl	8013a3a <__swbuf_r>
 801397c:	3001      	adds	r0, #1
 801397e:	d0d7      	beq.n	8013930 <_puts_r+0x38>
 8013980:	250a      	movs	r5, #10
 8013982:	e7d7      	b.n	8013934 <_puts_r+0x3c>
 8013984:	4622      	mov	r2, r4
 8013986:	4628      	mov	r0, r5
 8013988:	f000 f857 	bl	8013a3a <__swbuf_r>
 801398c:	3001      	adds	r0, #1
 801398e:	d1e7      	bne.n	8013960 <_puts_r+0x68>
 8013990:	e7ce      	b.n	8013930 <_puts_r+0x38>
 8013992:	3e01      	subs	r6, #1
 8013994:	e7e4      	b.n	8013960 <_puts_r+0x68>
 8013996:	6823      	ldr	r3, [r4, #0]
 8013998:	1c5a      	adds	r2, r3, #1
 801399a:	6022      	str	r2, [r4, #0]
 801399c:	220a      	movs	r2, #10
 801399e:	701a      	strb	r2, [r3, #0]
 80139a0:	e7ee      	b.n	8013980 <_puts_r+0x88>
	...

080139a4 <puts>:
 80139a4:	4b02      	ldr	r3, [pc, #8]	@ (80139b0 <puts+0xc>)
 80139a6:	4601      	mov	r1, r0
 80139a8:	6818      	ldr	r0, [r3, #0]
 80139aa:	f7ff bfa5 	b.w	80138f8 <_puts_r>
 80139ae:	bf00      	nop
 80139b0:	20000818 	.word	0x20000818

080139b4 <__sread>:
 80139b4:	b510      	push	{r4, lr}
 80139b6:	460c      	mov	r4, r1
 80139b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139bc:	f000 f900 	bl	8013bc0 <_read_r>
 80139c0:	2800      	cmp	r0, #0
 80139c2:	bfab      	itete	ge
 80139c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80139c6:	89a3      	ldrhlt	r3, [r4, #12]
 80139c8:	181b      	addge	r3, r3, r0
 80139ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80139ce:	bfac      	ite	ge
 80139d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80139d2:	81a3      	strhlt	r3, [r4, #12]
 80139d4:	bd10      	pop	{r4, pc}

080139d6 <__swrite>:
 80139d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139da:	461f      	mov	r7, r3
 80139dc:	898b      	ldrh	r3, [r1, #12]
 80139de:	05db      	lsls	r3, r3, #23
 80139e0:	4605      	mov	r5, r0
 80139e2:	460c      	mov	r4, r1
 80139e4:	4616      	mov	r6, r2
 80139e6:	d505      	bpl.n	80139f4 <__swrite+0x1e>
 80139e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139ec:	2302      	movs	r3, #2
 80139ee:	2200      	movs	r2, #0
 80139f0:	f000 f8d4 	bl	8013b9c <_lseek_r>
 80139f4:	89a3      	ldrh	r3, [r4, #12]
 80139f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80139fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80139fe:	81a3      	strh	r3, [r4, #12]
 8013a00:	4632      	mov	r2, r6
 8013a02:	463b      	mov	r3, r7
 8013a04:	4628      	mov	r0, r5
 8013a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a0a:	f000 b8fb 	b.w	8013c04 <_write_r>

08013a0e <__sseek>:
 8013a0e:	b510      	push	{r4, lr}
 8013a10:	460c      	mov	r4, r1
 8013a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a16:	f000 f8c1 	bl	8013b9c <_lseek_r>
 8013a1a:	1c43      	adds	r3, r0, #1
 8013a1c:	89a3      	ldrh	r3, [r4, #12]
 8013a1e:	bf15      	itete	ne
 8013a20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013a22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013a26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013a2a:	81a3      	strheq	r3, [r4, #12]
 8013a2c:	bf18      	it	ne
 8013a2e:	81a3      	strhne	r3, [r4, #12]
 8013a30:	bd10      	pop	{r4, pc}

08013a32 <__sclose>:
 8013a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a36:	f000 b8a1 	b.w	8013b7c <_close_r>

08013a3a <__swbuf_r>:
 8013a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a3c:	460e      	mov	r6, r1
 8013a3e:	4614      	mov	r4, r2
 8013a40:	4605      	mov	r5, r0
 8013a42:	b118      	cbz	r0, 8013a4c <__swbuf_r+0x12>
 8013a44:	6a03      	ldr	r3, [r0, #32]
 8013a46:	b90b      	cbnz	r3, 8013a4c <__swbuf_r+0x12>
 8013a48:	f7ff ff0e 	bl	8013868 <__sinit>
 8013a4c:	69a3      	ldr	r3, [r4, #24]
 8013a4e:	60a3      	str	r3, [r4, #8]
 8013a50:	89a3      	ldrh	r3, [r4, #12]
 8013a52:	071a      	lsls	r2, r3, #28
 8013a54:	d501      	bpl.n	8013a5a <__swbuf_r+0x20>
 8013a56:	6923      	ldr	r3, [r4, #16]
 8013a58:	b943      	cbnz	r3, 8013a6c <__swbuf_r+0x32>
 8013a5a:	4621      	mov	r1, r4
 8013a5c:	4628      	mov	r0, r5
 8013a5e:	f000 f82b 	bl	8013ab8 <__swsetup_r>
 8013a62:	b118      	cbz	r0, 8013a6c <__swbuf_r+0x32>
 8013a64:	f04f 37ff 	mov.w	r7, #4294967295
 8013a68:	4638      	mov	r0, r7
 8013a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a6c:	6823      	ldr	r3, [r4, #0]
 8013a6e:	6922      	ldr	r2, [r4, #16]
 8013a70:	1a98      	subs	r0, r3, r2
 8013a72:	6963      	ldr	r3, [r4, #20]
 8013a74:	b2f6      	uxtb	r6, r6
 8013a76:	4283      	cmp	r3, r0
 8013a78:	4637      	mov	r7, r6
 8013a7a:	dc05      	bgt.n	8013a88 <__swbuf_r+0x4e>
 8013a7c:	4621      	mov	r1, r4
 8013a7e:	4628      	mov	r0, r5
 8013a80:	f001 fcec 	bl	801545c <_fflush_r>
 8013a84:	2800      	cmp	r0, #0
 8013a86:	d1ed      	bne.n	8013a64 <__swbuf_r+0x2a>
 8013a88:	68a3      	ldr	r3, [r4, #8]
 8013a8a:	3b01      	subs	r3, #1
 8013a8c:	60a3      	str	r3, [r4, #8]
 8013a8e:	6823      	ldr	r3, [r4, #0]
 8013a90:	1c5a      	adds	r2, r3, #1
 8013a92:	6022      	str	r2, [r4, #0]
 8013a94:	701e      	strb	r6, [r3, #0]
 8013a96:	6962      	ldr	r2, [r4, #20]
 8013a98:	1c43      	adds	r3, r0, #1
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d004      	beq.n	8013aa8 <__swbuf_r+0x6e>
 8013a9e:	89a3      	ldrh	r3, [r4, #12]
 8013aa0:	07db      	lsls	r3, r3, #31
 8013aa2:	d5e1      	bpl.n	8013a68 <__swbuf_r+0x2e>
 8013aa4:	2e0a      	cmp	r6, #10
 8013aa6:	d1df      	bne.n	8013a68 <__swbuf_r+0x2e>
 8013aa8:	4621      	mov	r1, r4
 8013aaa:	4628      	mov	r0, r5
 8013aac:	f001 fcd6 	bl	801545c <_fflush_r>
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	d0d9      	beq.n	8013a68 <__swbuf_r+0x2e>
 8013ab4:	e7d6      	b.n	8013a64 <__swbuf_r+0x2a>
	...

08013ab8 <__swsetup_r>:
 8013ab8:	b538      	push	{r3, r4, r5, lr}
 8013aba:	4b29      	ldr	r3, [pc, #164]	@ (8013b60 <__swsetup_r+0xa8>)
 8013abc:	4605      	mov	r5, r0
 8013abe:	6818      	ldr	r0, [r3, #0]
 8013ac0:	460c      	mov	r4, r1
 8013ac2:	b118      	cbz	r0, 8013acc <__swsetup_r+0x14>
 8013ac4:	6a03      	ldr	r3, [r0, #32]
 8013ac6:	b90b      	cbnz	r3, 8013acc <__swsetup_r+0x14>
 8013ac8:	f7ff fece 	bl	8013868 <__sinit>
 8013acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ad0:	0719      	lsls	r1, r3, #28
 8013ad2:	d422      	bmi.n	8013b1a <__swsetup_r+0x62>
 8013ad4:	06da      	lsls	r2, r3, #27
 8013ad6:	d407      	bmi.n	8013ae8 <__swsetup_r+0x30>
 8013ad8:	2209      	movs	r2, #9
 8013ada:	602a      	str	r2, [r5, #0]
 8013adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ae0:	81a3      	strh	r3, [r4, #12]
 8013ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ae6:	e033      	b.n	8013b50 <__swsetup_r+0x98>
 8013ae8:	0758      	lsls	r0, r3, #29
 8013aea:	d512      	bpl.n	8013b12 <__swsetup_r+0x5a>
 8013aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013aee:	b141      	cbz	r1, 8013b02 <__swsetup_r+0x4a>
 8013af0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013af4:	4299      	cmp	r1, r3
 8013af6:	d002      	beq.n	8013afe <__swsetup_r+0x46>
 8013af8:	4628      	mov	r0, r5
 8013afa:	f000 ff1d 	bl	8014938 <_free_r>
 8013afe:	2300      	movs	r3, #0
 8013b00:	6363      	str	r3, [r4, #52]	@ 0x34
 8013b02:	89a3      	ldrh	r3, [r4, #12]
 8013b04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013b08:	81a3      	strh	r3, [r4, #12]
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	6063      	str	r3, [r4, #4]
 8013b0e:	6923      	ldr	r3, [r4, #16]
 8013b10:	6023      	str	r3, [r4, #0]
 8013b12:	89a3      	ldrh	r3, [r4, #12]
 8013b14:	f043 0308 	orr.w	r3, r3, #8
 8013b18:	81a3      	strh	r3, [r4, #12]
 8013b1a:	6923      	ldr	r3, [r4, #16]
 8013b1c:	b94b      	cbnz	r3, 8013b32 <__swsetup_r+0x7a>
 8013b1e:	89a3      	ldrh	r3, [r4, #12]
 8013b20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013b28:	d003      	beq.n	8013b32 <__swsetup_r+0x7a>
 8013b2a:	4621      	mov	r1, r4
 8013b2c:	4628      	mov	r0, r5
 8013b2e:	f001 fce3 	bl	80154f8 <__smakebuf_r>
 8013b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b36:	f013 0201 	ands.w	r2, r3, #1
 8013b3a:	d00a      	beq.n	8013b52 <__swsetup_r+0x9a>
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	60a2      	str	r2, [r4, #8]
 8013b40:	6962      	ldr	r2, [r4, #20]
 8013b42:	4252      	negs	r2, r2
 8013b44:	61a2      	str	r2, [r4, #24]
 8013b46:	6922      	ldr	r2, [r4, #16]
 8013b48:	b942      	cbnz	r2, 8013b5c <__swsetup_r+0xa4>
 8013b4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013b4e:	d1c5      	bne.n	8013adc <__swsetup_r+0x24>
 8013b50:	bd38      	pop	{r3, r4, r5, pc}
 8013b52:	0799      	lsls	r1, r3, #30
 8013b54:	bf58      	it	pl
 8013b56:	6962      	ldrpl	r2, [r4, #20]
 8013b58:	60a2      	str	r2, [r4, #8]
 8013b5a:	e7f4      	b.n	8013b46 <__swsetup_r+0x8e>
 8013b5c:	2000      	movs	r0, #0
 8013b5e:	e7f7      	b.n	8013b50 <__swsetup_r+0x98>
 8013b60:	20000818 	.word	0x20000818

08013b64 <memset>:
 8013b64:	4402      	add	r2, r0
 8013b66:	4603      	mov	r3, r0
 8013b68:	4293      	cmp	r3, r2
 8013b6a:	d100      	bne.n	8013b6e <memset+0xa>
 8013b6c:	4770      	bx	lr
 8013b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8013b72:	e7f9      	b.n	8013b68 <memset+0x4>

08013b74 <_localeconv_r>:
 8013b74:	4800      	ldr	r0, [pc, #0]	@ (8013b78 <_localeconv_r+0x4>)
 8013b76:	4770      	bx	lr
 8013b78:	20000958 	.word	0x20000958

08013b7c <_close_r>:
 8013b7c:	b538      	push	{r3, r4, r5, lr}
 8013b7e:	4d06      	ldr	r5, [pc, #24]	@ (8013b98 <_close_r+0x1c>)
 8013b80:	2300      	movs	r3, #0
 8013b82:	4604      	mov	r4, r0
 8013b84:	4608      	mov	r0, r1
 8013b86:	602b      	str	r3, [r5, #0]
 8013b88:	f7ee fc66 	bl	8002458 <_close>
 8013b8c:	1c43      	adds	r3, r0, #1
 8013b8e:	d102      	bne.n	8013b96 <_close_r+0x1a>
 8013b90:	682b      	ldr	r3, [r5, #0]
 8013b92:	b103      	cbz	r3, 8013b96 <_close_r+0x1a>
 8013b94:	6023      	str	r3, [r4, #0]
 8013b96:	bd38      	pop	{r3, r4, r5, pc}
 8013b98:	20005df4 	.word	0x20005df4

08013b9c <_lseek_r>:
 8013b9c:	b538      	push	{r3, r4, r5, lr}
 8013b9e:	4d07      	ldr	r5, [pc, #28]	@ (8013bbc <_lseek_r+0x20>)
 8013ba0:	4604      	mov	r4, r0
 8013ba2:	4608      	mov	r0, r1
 8013ba4:	4611      	mov	r1, r2
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	602a      	str	r2, [r5, #0]
 8013baa:	461a      	mov	r2, r3
 8013bac:	f7ee fc7b 	bl	80024a6 <_lseek>
 8013bb0:	1c43      	adds	r3, r0, #1
 8013bb2:	d102      	bne.n	8013bba <_lseek_r+0x1e>
 8013bb4:	682b      	ldr	r3, [r5, #0]
 8013bb6:	b103      	cbz	r3, 8013bba <_lseek_r+0x1e>
 8013bb8:	6023      	str	r3, [r4, #0]
 8013bba:	bd38      	pop	{r3, r4, r5, pc}
 8013bbc:	20005df4 	.word	0x20005df4

08013bc0 <_read_r>:
 8013bc0:	b538      	push	{r3, r4, r5, lr}
 8013bc2:	4d07      	ldr	r5, [pc, #28]	@ (8013be0 <_read_r+0x20>)
 8013bc4:	4604      	mov	r4, r0
 8013bc6:	4608      	mov	r0, r1
 8013bc8:	4611      	mov	r1, r2
 8013bca:	2200      	movs	r2, #0
 8013bcc:	602a      	str	r2, [r5, #0]
 8013bce:	461a      	mov	r2, r3
 8013bd0:	f7ee fc09 	bl	80023e6 <_read>
 8013bd4:	1c43      	adds	r3, r0, #1
 8013bd6:	d102      	bne.n	8013bde <_read_r+0x1e>
 8013bd8:	682b      	ldr	r3, [r5, #0]
 8013bda:	b103      	cbz	r3, 8013bde <_read_r+0x1e>
 8013bdc:	6023      	str	r3, [r4, #0]
 8013bde:	bd38      	pop	{r3, r4, r5, pc}
 8013be0:	20005df4 	.word	0x20005df4

08013be4 <_sbrk_r>:
 8013be4:	b538      	push	{r3, r4, r5, lr}
 8013be6:	4d06      	ldr	r5, [pc, #24]	@ (8013c00 <_sbrk_r+0x1c>)
 8013be8:	2300      	movs	r3, #0
 8013bea:	4604      	mov	r4, r0
 8013bec:	4608      	mov	r0, r1
 8013bee:	602b      	str	r3, [r5, #0]
 8013bf0:	f7ee fc66 	bl	80024c0 <_sbrk>
 8013bf4:	1c43      	adds	r3, r0, #1
 8013bf6:	d102      	bne.n	8013bfe <_sbrk_r+0x1a>
 8013bf8:	682b      	ldr	r3, [r5, #0]
 8013bfa:	b103      	cbz	r3, 8013bfe <_sbrk_r+0x1a>
 8013bfc:	6023      	str	r3, [r4, #0]
 8013bfe:	bd38      	pop	{r3, r4, r5, pc}
 8013c00:	20005df4 	.word	0x20005df4

08013c04 <_write_r>:
 8013c04:	b538      	push	{r3, r4, r5, lr}
 8013c06:	4d07      	ldr	r5, [pc, #28]	@ (8013c24 <_write_r+0x20>)
 8013c08:	4604      	mov	r4, r0
 8013c0a:	4608      	mov	r0, r1
 8013c0c:	4611      	mov	r1, r2
 8013c0e:	2200      	movs	r2, #0
 8013c10:	602a      	str	r2, [r5, #0]
 8013c12:	461a      	mov	r2, r3
 8013c14:	f7ee fc04 	bl	8002420 <_write>
 8013c18:	1c43      	adds	r3, r0, #1
 8013c1a:	d102      	bne.n	8013c22 <_write_r+0x1e>
 8013c1c:	682b      	ldr	r3, [r5, #0]
 8013c1e:	b103      	cbz	r3, 8013c22 <_write_r+0x1e>
 8013c20:	6023      	str	r3, [r4, #0]
 8013c22:	bd38      	pop	{r3, r4, r5, pc}
 8013c24:	20005df4 	.word	0x20005df4

08013c28 <__errno>:
 8013c28:	4b01      	ldr	r3, [pc, #4]	@ (8013c30 <__errno+0x8>)
 8013c2a:	6818      	ldr	r0, [r3, #0]
 8013c2c:	4770      	bx	lr
 8013c2e:	bf00      	nop
 8013c30:	20000818 	.word	0x20000818

08013c34 <__libc_init_array>:
 8013c34:	b570      	push	{r4, r5, r6, lr}
 8013c36:	4d0d      	ldr	r5, [pc, #52]	@ (8013c6c <__libc_init_array+0x38>)
 8013c38:	4c0d      	ldr	r4, [pc, #52]	@ (8013c70 <__libc_init_array+0x3c>)
 8013c3a:	1b64      	subs	r4, r4, r5
 8013c3c:	10a4      	asrs	r4, r4, #2
 8013c3e:	2600      	movs	r6, #0
 8013c40:	42a6      	cmp	r6, r4
 8013c42:	d109      	bne.n	8013c58 <__libc_init_array+0x24>
 8013c44:	4d0b      	ldr	r5, [pc, #44]	@ (8013c74 <__libc_init_array+0x40>)
 8013c46:	4c0c      	ldr	r4, [pc, #48]	@ (8013c78 <__libc_init_array+0x44>)
 8013c48:	f001 fd86 	bl	8015758 <_init>
 8013c4c:	1b64      	subs	r4, r4, r5
 8013c4e:	10a4      	asrs	r4, r4, #2
 8013c50:	2600      	movs	r6, #0
 8013c52:	42a6      	cmp	r6, r4
 8013c54:	d105      	bne.n	8013c62 <__libc_init_array+0x2e>
 8013c56:	bd70      	pop	{r4, r5, r6, pc}
 8013c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c5c:	4798      	blx	r3
 8013c5e:	3601      	adds	r6, #1
 8013c60:	e7ee      	b.n	8013c40 <__libc_init_array+0xc>
 8013c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c66:	4798      	blx	r3
 8013c68:	3601      	adds	r6, #1
 8013c6a:	e7f2      	b.n	8013c52 <__libc_init_array+0x1e>
 8013c6c:	080d3008 	.word	0x080d3008
 8013c70:	080d3008 	.word	0x080d3008
 8013c74:	080d3008 	.word	0x080d3008
 8013c78:	080d300c 	.word	0x080d300c

08013c7c <__retarget_lock_init_recursive>:
 8013c7c:	4770      	bx	lr

08013c7e <__retarget_lock_acquire_recursive>:
 8013c7e:	4770      	bx	lr

08013c80 <__retarget_lock_release_recursive>:
 8013c80:	4770      	bx	lr

08013c82 <memcpy>:
 8013c82:	440a      	add	r2, r1
 8013c84:	4291      	cmp	r1, r2
 8013c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8013c8a:	d100      	bne.n	8013c8e <memcpy+0xc>
 8013c8c:	4770      	bx	lr
 8013c8e:	b510      	push	{r4, lr}
 8013c90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c98:	4291      	cmp	r1, r2
 8013c9a:	d1f9      	bne.n	8013c90 <memcpy+0xe>
 8013c9c:	bd10      	pop	{r4, pc}

08013c9e <quorem>:
 8013c9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ca2:	6903      	ldr	r3, [r0, #16]
 8013ca4:	690c      	ldr	r4, [r1, #16]
 8013ca6:	42a3      	cmp	r3, r4
 8013ca8:	4607      	mov	r7, r0
 8013caa:	db7e      	blt.n	8013daa <quorem+0x10c>
 8013cac:	3c01      	subs	r4, #1
 8013cae:	f101 0814 	add.w	r8, r1, #20
 8013cb2:	00a3      	lsls	r3, r4, #2
 8013cb4:	f100 0514 	add.w	r5, r0, #20
 8013cb8:	9300      	str	r3, [sp, #0]
 8013cba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013cbe:	9301      	str	r3, [sp, #4]
 8013cc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013cc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013cc8:	3301      	adds	r3, #1
 8013cca:	429a      	cmp	r2, r3
 8013ccc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013cd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8013cd4:	d32e      	bcc.n	8013d34 <quorem+0x96>
 8013cd6:	f04f 0a00 	mov.w	sl, #0
 8013cda:	46c4      	mov	ip, r8
 8013cdc:	46ae      	mov	lr, r5
 8013cde:	46d3      	mov	fp, sl
 8013ce0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013ce4:	b298      	uxth	r0, r3
 8013ce6:	fb06 a000 	mla	r0, r6, r0, sl
 8013cea:	0c02      	lsrs	r2, r0, #16
 8013cec:	0c1b      	lsrs	r3, r3, #16
 8013cee:	fb06 2303 	mla	r3, r6, r3, r2
 8013cf2:	f8de 2000 	ldr.w	r2, [lr]
 8013cf6:	b280      	uxth	r0, r0
 8013cf8:	b292      	uxth	r2, r2
 8013cfa:	1a12      	subs	r2, r2, r0
 8013cfc:	445a      	add	r2, fp
 8013cfe:	f8de 0000 	ldr.w	r0, [lr]
 8013d02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013d06:	b29b      	uxth	r3, r3
 8013d08:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013d0c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013d10:	b292      	uxth	r2, r2
 8013d12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013d16:	45e1      	cmp	r9, ip
 8013d18:	f84e 2b04 	str.w	r2, [lr], #4
 8013d1c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013d20:	d2de      	bcs.n	8013ce0 <quorem+0x42>
 8013d22:	9b00      	ldr	r3, [sp, #0]
 8013d24:	58eb      	ldr	r3, [r5, r3]
 8013d26:	b92b      	cbnz	r3, 8013d34 <quorem+0x96>
 8013d28:	9b01      	ldr	r3, [sp, #4]
 8013d2a:	3b04      	subs	r3, #4
 8013d2c:	429d      	cmp	r5, r3
 8013d2e:	461a      	mov	r2, r3
 8013d30:	d32f      	bcc.n	8013d92 <quorem+0xf4>
 8013d32:	613c      	str	r4, [r7, #16]
 8013d34:	4638      	mov	r0, r7
 8013d36:	f001 f8c3 	bl	8014ec0 <__mcmp>
 8013d3a:	2800      	cmp	r0, #0
 8013d3c:	db25      	blt.n	8013d8a <quorem+0xec>
 8013d3e:	4629      	mov	r1, r5
 8013d40:	2000      	movs	r0, #0
 8013d42:	f858 2b04 	ldr.w	r2, [r8], #4
 8013d46:	f8d1 c000 	ldr.w	ip, [r1]
 8013d4a:	fa1f fe82 	uxth.w	lr, r2
 8013d4e:	fa1f f38c 	uxth.w	r3, ip
 8013d52:	eba3 030e 	sub.w	r3, r3, lr
 8013d56:	4403      	add	r3, r0
 8013d58:	0c12      	lsrs	r2, r2, #16
 8013d5a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013d5e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013d62:	b29b      	uxth	r3, r3
 8013d64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013d68:	45c1      	cmp	r9, r8
 8013d6a:	f841 3b04 	str.w	r3, [r1], #4
 8013d6e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013d72:	d2e6      	bcs.n	8013d42 <quorem+0xa4>
 8013d74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013d78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013d7c:	b922      	cbnz	r2, 8013d88 <quorem+0xea>
 8013d7e:	3b04      	subs	r3, #4
 8013d80:	429d      	cmp	r5, r3
 8013d82:	461a      	mov	r2, r3
 8013d84:	d30b      	bcc.n	8013d9e <quorem+0x100>
 8013d86:	613c      	str	r4, [r7, #16]
 8013d88:	3601      	adds	r6, #1
 8013d8a:	4630      	mov	r0, r6
 8013d8c:	b003      	add	sp, #12
 8013d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d92:	6812      	ldr	r2, [r2, #0]
 8013d94:	3b04      	subs	r3, #4
 8013d96:	2a00      	cmp	r2, #0
 8013d98:	d1cb      	bne.n	8013d32 <quorem+0x94>
 8013d9a:	3c01      	subs	r4, #1
 8013d9c:	e7c6      	b.n	8013d2c <quorem+0x8e>
 8013d9e:	6812      	ldr	r2, [r2, #0]
 8013da0:	3b04      	subs	r3, #4
 8013da2:	2a00      	cmp	r2, #0
 8013da4:	d1ef      	bne.n	8013d86 <quorem+0xe8>
 8013da6:	3c01      	subs	r4, #1
 8013da8:	e7ea      	b.n	8013d80 <quorem+0xe2>
 8013daa:	2000      	movs	r0, #0
 8013dac:	e7ee      	b.n	8013d8c <quorem+0xee>
	...

08013db0 <_dtoa_r>:
 8013db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013db4:	69c7      	ldr	r7, [r0, #28]
 8013db6:	b099      	sub	sp, #100	@ 0x64
 8013db8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013dbc:	ec55 4b10 	vmov	r4, r5, d0
 8013dc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8013dc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8013dc4:	4683      	mov	fp, r0
 8013dc6:	920e      	str	r2, [sp, #56]	@ 0x38
 8013dc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013dca:	b97f      	cbnz	r7, 8013dec <_dtoa_r+0x3c>
 8013dcc:	2010      	movs	r0, #16
 8013dce:	f7fe ffb1 	bl	8012d34 <malloc>
 8013dd2:	4602      	mov	r2, r0
 8013dd4:	f8cb 001c 	str.w	r0, [fp, #28]
 8013dd8:	b920      	cbnz	r0, 8013de4 <_dtoa_r+0x34>
 8013dda:	4ba7      	ldr	r3, [pc, #668]	@ (8014078 <_dtoa_r+0x2c8>)
 8013ddc:	21ef      	movs	r1, #239	@ 0xef
 8013dde:	48a7      	ldr	r0, [pc, #668]	@ (801407c <_dtoa_r+0x2cc>)
 8013de0:	f001 fbe8 	bl	80155b4 <__assert_func>
 8013de4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013de8:	6007      	str	r7, [r0, #0]
 8013dea:	60c7      	str	r7, [r0, #12]
 8013dec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013df0:	6819      	ldr	r1, [r3, #0]
 8013df2:	b159      	cbz	r1, 8013e0c <_dtoa_r+0x5c>
 8013df4:	685a      	ldr	r2, [r3, #4]
 8013df6:	604a      	str	r2, [r1, #4]
 8013df8:	2301      	movs	r3, #1
 8013dfa:	4093      	lsls	r3, r2
 8013dfc:	608b      	str	r3, [r1, #8]
 8013dfe:	4658      	mov	r0, fp
 8013e00:	f000 fe24 	bl	8014a4c <_Bfree>
 8013e04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013e08:	2200      	movs	r2, #0
 8013e0a:	601a      	str	r2, [r3, #0]
 8013e0c:	1e2b      	subs	r3, r5, #0
 8013e0e:	bfb9      	ittee	lt
 8013e10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013e14:	9303      	strlt	r3, [sp, #12]
 8013e16:	2300      	movge	r3, #0
 8013e18:	6033      	strge	r3, [r6, #0]
 8013e1a:	9f03      	ldr	r7, [sp, #12]
 8013e1c:	4b98      	ldr	r3, [pc, #608]	@ (8014080 <_dtoa_r+0x2d0>)
 8013e1e:	bfbc      	itt	lt
 8013e20:	2201      	movlt	r2, #1
 8013e22:	6032      	strlt	r2, [r6, #0]
 8013e24:	43bb      	bics	r3, r7
 8013e26:	d112      	bne.n	8013e4e <_dtoa_r+0x9e>
 8013e28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013e2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013e2e:	6013      	str	r3, [r2, #0]
 8013e30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013e34:	4323      	orrs	r3, r4
 8013e36:	f000 854d 	beq.w	80148d4 <_dtoa_r+0xb24>
 8013e3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013e3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8014094 <_dtoa_r+0x2e4>
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	f000 854f 	beq.w	80148e4 <_dtoa_r+0xb34>
 8013e46:	f10a 0303 	add.w	r3, sl, #3
 8013e4a:	f000 bd49 	b.w	80148e0 <_dtoa_r+0xb30>
 8013e4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013e52:	2200      	movs	r2, #0
 8013e54:	ec51 0b17 	vmov	r0, r1, d7
 8013e58:	2300      	movs	r3, #0
 8013e5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8013e5e:	f7ec feb3 	bl	8000bc8 <__aeabi_dcmpeq>
 8013e62:	4680      	mov	r8, r0
 8013e64:	b158      	cbz	r0, 8013e7e <_dtoa_r+0xce>
 8013e66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013e68:	2301      	movs	r3, #1
 8013e6a:	6013      	str	r3, [r2, #0]
 8013e6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013e6e:	b113      	cbz	r3, 8013e76 <_dtoa_r+0xc6>
 8013e70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013e72:	4b84      	ldr	r3, [pc, #528]	@ (8014084 <_dtoa_r+0x2d4>)
 8013e74:	6013      	str	r3, [r2, #0]
 8013e76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8014098 <_dtoa_r+0x2e8>
 8013e7a:	f000 bd33 	b.w	80148e4 <_dtoa_r+0xb34>
 8013e7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013e82:	aa16      	add	r2, sp, #88	@ 0x58
 8013e84:	a917      	add	r1, sp, #92	@ 0x5c
 8013e86:	4658      	mov	r0, fp
 8013e88:	f001 f8ca 	bl	8015020 <__d2b>
 8013e8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013e90:	4681      	mov	r9, r0
 8013e92:	2e00      	cmp	r6, #0
 8013e94:	d077      	beq.n	8013f86 <_dtoa_r+0x1d6>
 8013e96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013e98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8013e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013ea4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013ea8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013eac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013eb0:	4619      	mov	r1, r3
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	4b74      	ldr	r3, [pc, #464]	@ (8014088 <_dtoa_r+0x2d8>)
 8013eb6:	f7ec fa67 	bl	8000388 <__aeabi_dsub>
 8013eba:	a369      	add	r3, pc, #420	@ (adr r3, 8014060 <_dtoa_r+0x2b0>)
 8013ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec0:	f7ec fc1a 	bl	80006f8 <__aeabi_dmul>
 8013ec4:	a368      	add	r3, pc, #416	@ (adr r3, 8014068 <_dtoa_r+0x2b8>)
 8013ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eca:	f7ec fa5f 	bl	800038c <__adddf3>
 8013ece:	4604      	mov	r4, r0
 8013ed0:	4630      	mov	r0, r6
 8013ed2:	460d      	mov	r5, r1
 8013ed4:	f7ec fba6 	bl	8000624 <__aeabi_i2d>
 8013ed8:	a365      	add	r3, pc, #404	@ (adr r3, 8014070 <_dtoa_r+0x2c0>)
 8013eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ede:	f7ec fc0b 	bl	80006f8 <__aeabi_dmul>
 8013ee2:	4602      	mov	r2, r0
 8013ee4:	460b      	mov	r3, r1
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	4629      	mov	r1, r5
 8013eea:	f7ec fa4f 	bl	800038c <__adddf3>
 8013eee:	4604      	mov	r4, r0
 8013ef0:	460d      	mov	r5, r1
 8013ef2:	f7ec feb1 	bl	8000c58 <__aeabi_d2iz>
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	4607      	mov	r7, r0
 8013efa:	2300      	movs	r3, #0
 8013efc:	4620      	mov	r0, r4
 8013efe:	4629      	mov	r1, r5
 8013f00:	f7ec fe6c 	bl	8000bdc <__aeabi_dcmplt>
 8013f04:	b140      	cbz	r0, 8013f18 <_dtoa_r+0x168>
 8013f06:	4638      	mov	r0, r7
 8013f08:	f7ec fb8c 	bl	8000624 <__aeabi_i2d>
 8013f0c:	4622      	mov	r2, r4
 8013f0e:	462b      	mov	r3, r5
 8013f10:	f7ec fe5a 	bl	8000bc8 <__aeabi_dcmpeq>
 8013f14:	b900      	cbnz	r0, 8013f18 <_dtoa_r+0x168>
 8013f16:	3f01      	subs	r7, #1
 8013f18:	2f16      	cmp	r7, #22
 8013f1a:	d851      	bhi.n	8013fc0 <_dtoa_r+0x210>
 8013f1c:	4b5b      	ldr	r3, [pc, #364]	@ (801408c <_dtoa_r+0x2dc>)
 8013f1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013f2a:	f7ec fe57 	bl	8000bdc <__aeabi_dcmplt>
 8013f2e:	2800      	cmp	r0, #0
 8013f30:	d048      	beq.n	8013fc4 <_dtoa_r+0x214>
 8013f32:	3f01      	subs	r7, #1
 8013f34:	2300      	movs	r3, #0
 8013f36:	9312      	str	r3, [sp, #72]	@ 0x48
 8013f38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013f3a:	1b9b      	subs	r3, r3, r6
 8013f3c:	1e5a      	subs	r2, r3, #1
 8013f3e:	bf44      	itt	mi
 8013f40:	f1c3 0801 	rsbmi	r8, r3, #1
 8013f44:	2300      	movmi	r3, #0
 8013f46:	9208      	str	r2, [sp, #32]
 8013f48:	bf54      	ite	pl
 8013f4a:	f04f 0800 	movpl.w	r8, #0
 8013f4e:	9308      	strmi	r3, [sp, #32]
 8013f50:	2f00      	cmp	r7, #0
 8013f52:	db39      	blt.n	8013fc8 <_dtoa_r+0x218>
 8013f54:	9b08      	ldr	r3, [sp, #32]
 8013f56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013f58:	443b      	add	r3, r7
 8013f5a:	9308      	str	r3, [sp, #32]
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f62:	2b09      	cmp	r3, #9
 8013f64:	d864      	bhi.n	8014030 <_dtoa_r+0x280>
 8013f66:	2b05      	cmp	r3, #5
 8013f68:	bfc4      	itt	gt
 8013f6a:	3b04      	subgt	r3, #4
 8013f6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8013f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f70:	f1a3 0302 	sub.w	r3, r3, #2
 8013f74:	bfcc      	ite	gt
 8013f76:	2400      	movgt	r4, #0
 8013f78:	2401      	movle	r4, #1
 8013f7a:	2b03      	cmp	r3, #3
 8013f7c:	d863      	bhi.n	8014046 <_dtoa_r+0x296>
 8013f7e:	e8df f003 	tbb	[pc, r3]
 8013f82:	372a      	.short	0x372a
 8013f84:	5535      	.short	0x5535
 8013f86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8013f8a:	441e      	add	r6, r3
 8013f8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013f90:	2b20      	cmp	r3, #32
 8013f92:	bfc1      	itttt	gt
 8013f94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013f98:	409f      	lslgt	r7, r3
 8013f9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013f9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013fa2:	bfd6      	itet	le
 8013fa4:	f1c3 0320 	rsble	r3, r3, #32
 8013fa8:	ea47 0003 	orrgt.w	r0, r7, r3
 8013fac:	fa04 f003 	lslle.w	r0, r4, r3
 8013fb0:	f7ec fb28 	bl	8000604 <__aeabi_ui2d>
 8013fb4:	2201      	movs	r2, #1
 8013fb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013fba:	3e01      	subs	r6, #1
 8013fbc:	9214      	str	r2, [sp, #80]	@ 0x50
 8013fbe:	e777      	b.n	8013eb0 <_dtoa_r+0x100>
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	e7b8      	b.n	8013f36 <_dtoa_r+0x186>
 8013fc4:	9012      	str	r0, [sp, #72]	@ 0x48
 8013fc6:	e7b7      	b.n	8013f38 <_dtoa_r+0x188>
 8013fc8:	427b      	negs	r3, r7
 8013fca:	930a      	str	r3, [sp, #40]	@ 0x28
 8013fcc:	2300      	movs	r3, #0
 8013fce:	eba8 0807 	sub.w	r8, r8, r7
 8013fd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013fd4:	e7c4      	b.n	8013f60 <_dtoa_r+0x1b0>
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013fda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	dc35      	bgt.n	801404c <_dtoa_r+0x29c>
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	9300      	str	r3, [sp, #0]
 8013fe4:	9307      	str	r3, [sp, #28]
 8013fe6:	461a      	mov	r2, r3
 8013fe8:	920e      	str	r2, [sp, #56]	@ 0x38
 8013fea:	e00b      	b.n	8014004 <_dtoa_r+0x254>
 8013fec:	2301      	movs	r3, #1
 8013fee:	e7f3      	b.n	8013fd8 <_dtoa_r+0x228>
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ff6:	18fb      	adds	r3, r7, r3
 8013ff8:	9300      	str	r3, [sp, #0]
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	2b01      	cmp	r3, #1
 8013ffe:	9307      	str	r3, [sp, #28]
 8014000:	bfb8      	it	lt
 8014002:	2301      	movlt	r3, #1
 8014004:	f8db 001c 	ldr.w	r0, [fp, #28]
 8014008:	2100      	movs	r1, #0
 801400a:	2204      	movs	r2, #4
 801400c:	f102 0514 	add.w	r5, r2, #20
 8014010:	429d      	cmp	r5, r3
 8014012:	d91f      	bls.n	8014054 <_dtoa_r+0x2a4>
 8014014:	6041      	str	r1, [r0, #4]
 8014016:	4658      	mov	r0, fp
 8014018:	f000 fcd8 	bl	80149cc <_Balloc>
 801401c:	4682      	mov	sl, r0
 801401e:	2800      	cmp	r0, #0
 8014020:	d13c      	bne.n	801409c <_dtoa_r+0x2ec>
 8014022:	4b1b      	ldr	r3, [pc, #108]	@ (8014090 <_dtoa_r+0x2e0>)
 8014024:	4602      	mov	r2, r0
 8014026:	f240 11af 	movw	r1, #431	@ 0x1af
 801402a:	e6d8      	b.n	8013dde <_dtoa_r+0x2e>
 801402c:	2301      	movs	r3, #1
 801402e:	e7e0      	b.n	8013ff2 <_dtoa_r+0x242>
 8014030:	2401      	movs	r4, #1
 8014032:	2300      	movs	r3, #0
 8014034:	9309      	str	r3, [sp, #36]	@ 0x24
 8014036:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014038:	f04f 33ff 	mov.w	r3, #4294967295
 801403c:	9300      	str	r3, [sp, #0]
 801403e:	9307      	str	r3, [sp, #28]
 8014040:	2200      	movs	r2, #0
 8014042:	2312      	movs	r3, #18
 8014044:	e7d0      	b.n	8013fe8 <_dtoa_r+0x238>
 8014046:	2301      	movs	r3, #1
 8014048:	930b      	str	r3, [sp, #44]	@ 0x2c
 801404a:	e7f5      	b.n	8014038 <_dtoa_r+0x288>
 801404c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801404e:	9300      	str	r3, [sp, #0]
 8014050:	9307      	str	r3, [sp, #28]
 8014052:	e7d7      	b.n	8014004 <_dtoa_r+0x254>
 8014054:	3101      	adds	r1, #1
 8014056:	0052      	lsls	r2, r2, #1
 8014058:	e7d8      	b.n	801400c <_dtoa_r+0x25c>
 801405a:	bf00      	nop
 801405c:	f3af 8000 	nop.w
 8014060:	636f4361 	.word	0x636f4361
 8014064:	3fd287a7 	.word	0x3fd287a7
 8014068:	8b60c8b3 	.word	0x8b60c8b3
 801406c:	3fc68a28 	.word	0x3fc68a28
 8014070:	509f79fb 	.word	0x509f79fb
 8014074:	3fd34413 	.word	0x3fd34413
 8014078:	080d2cd1 	.word	0x080d2cd1
 801407c:	080d2ce8 	.word	0x080d2ce8
 8014080:	7ff00000 	.word	0x7ff00000
 8014084:	080d2ca1 	.word	0x080d2ca1
 8014088:	3ff80000 	.word	0x3ff80000
 801408c:	080d2de0 	.word	0x080d2de0
 8014090:	080d2d40 	.word	0x080d2d40
 8014094:	080d2ccd 	.word	0x080d2ccd
 8014098:	080d2ca0 	.word	0x080d2ca0
 801409c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80140a0:	6018      	str	r0, [r3, #0]
 80140a2:	9b07      	ldr	r3, [sp, #28]
 80140a4:	2b0e      	cmp	r3, #14
 80140a6:	f200 80a4 	bhi.w	80141f2 <_dtoa_r+0x442>
 80140aa:	2c00      	cmp	r4, #0
 80140ac:	f000 80a1 	beq.w	80141f2 <_dtoa_r+0x442>
 80140b0:	2f00      	cmp	r7, #0
 80140b2:	dd33      	ble.n	801411c <_dtoa_r+0x36c>
 80140b4:	4bad      	ldr	r3, [pc, #692]	@ (801436c <_dtoa_r+0x5bc>)
 80140b6:	f007 020f 	and.w	r2, r7, #15
 80140ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80140be:	ed93 7b00 	vldr	d7, [r3]
 80140c2:	05f8      	lsls	r0, r7, #23
 80140c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80140c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80140cc:	d516      	bpl.n	80140fc <_dtoa_r+0x34c>
 80140ce:	4ba8      	ldr	r3, [pc, #672]	@ (8014370 <_dtoa_r+0x5c0>)
 80140d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80140d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80140d8:	f7ec fc38 	bl	800094c <__aeabi_ddiv>
 80140dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80140e0:	f004 040f 	and.w	r4, r4, #15
 80140e4:	2603      	movs	r6, #3
 80140e6:	4da2      	ldr	r5, [pc, #648]	@ (8014370 <_dtoa_r+0x5c0>)
 80140e8:	b954      	cbnz	r4, 8014100 <_dtoa_r+0x350>
 80140ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80140ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140f2:	f7ec fc2b 	bl	800094c <__aeabi_ddiv>
 80140f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80140fa:	e028      	b.n	801414e <_dtoa_r+0x39e>
 80140fc:	2602      	movs	r6, #2
 80140fe:	e7f2      	b.n	80140e6 <_dtoa_r+0x336>
 8014100:	07e1      	lsls	r1, r4, #31
 8014102:	d508      	bpl.n	8014116 <_dtoa_r+0x366>
 8014104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014108:	e9d5 2300 	ldrd	r2, r3, [r5]
 801410c:	f7ec faf4 	bl	80006f8 <__aeabi_dmul>
 8014110:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014114:	3601      	adds	r6, #1
 8014116:	1064      	asrs	r4, r4, #1
 8014118:	3508      	adds	r5, #8
 801411a:	e7e5      	b.n	80140e8 <_dtoa_r+0x338>
 801411c:	f000 80d2 	beq.w	80142c4 <_dtoa_r+0x514>
 8014120:	427c      	negs	r4, r7
 8014122:	4b92      	ldr	r3, [pc, #584]	@ (801436c <_dtoa_r+0x5bc>)
 8014124:	4d92      	ldr	r5, [pc, #584]	@ (8014370 <_dtoa_r+0x5c0>)
 8014126:	f004 020f 	and.w	r2, r4, #15
 801412a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014132:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014136:	f7ec fadf 	bl	80006f8 <__aeabi_dmul>
 801413a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801413e:	1124      	asrs	r4, r4, #4
 8014140:	2300      	movs	r3, #0
 8014142:	2602      	movs	r6, #2
 8014144:	2c00      	cmp	r4, #0
 8014146:	f040 80b2 	bne.w	80142ae <_dtoa_r+0x4fe>
 801414a:	2b00      	cmp	r3, #0
 801414c:	d1d3      	bne.n	80140f6 <_dtoa_r+0x346>
 801414e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014150:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014154:	2b00      	cmp	r3, #0
 8014156:	f000 80b7 	beq.w	80142c8 <_dtoa_r+0x518>
 801415a:	4b86      	ldr	r3, [pc, #536]	@ (8014374 <_dtoa_r+0x5c4>)
 801415c:	2200      	movs	r2, #0
 801415e:	4620      	mov	r0, r4
 8014160:	4629      	mov	r1, r5
 8014162:	f7ec fd3b 	bl	8000bdc <__aeabi_dcmplt>
 8014166:	2800      	cmp	r0, #0
 8014168:	f000 80ae 	beq.w	80142c8 <_dtoa_r+0x518>
 801416c:	9b07      	ldr	r3, [sp, #28]
 801416e:	2b00      	cmp	r3, #0
 8014170:	f000 80aa 	beq.w	80142c8 <_dtoa_r+0x518>
 8014174:	9b00      	ldr	r3, [sp, #0]
 8014176:	2b00      	cmp	r3, #0
 8014178:	dd37      	ble.n	80141ea <_dtoa_r+0x43a>
 801417a:	1e7b      	subs	r3, r7, #1
 801417c:	9304      	str	r3, [sp, #16]
 801417e:	4620      	mov	r0, r4
 8014180:	4b7d      	ldr	r3, [pc, #500]	@ (8014378 <_dtoa_r+0x5c8>)
 8014182:	2200      	movs	r2, #0
 8014184:	4629      	mov	r1, r5
 8014186:	f7ec fab7 	bl	80006f8 <__aeabi_dmul>
 801418a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801418e:	9c00      	ldr	r4, [sp, #0]
 8014190:	3601      	adds	r6, #1
 8014192:	4630      	mov	r0, r6
 8014194:	f7ec fa46 	bl	8000624 <__aeabi_i2d>
 8014198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801419c:	f7ec faac 	bl	80006f8 <__aeabi_dmul>
 80141a0:	4b76      	ldr	r3, [pc, #472]	@ (801437c <_dtoa_r+0x5cc>)
 80141a2:	2200      	movs	r2, #0
 80141a4:	f7ec f8f2 	bl	800038c <__adddf3>
 80141a8:	4605      	mov	r5, r0
 80141aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80141ae:	2c00      	cmp	r4, #0
 80141b0:	f040 808d 	bne.w	80142ce <_dtoa_r+0x51e>
 80141b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141b8:	4b71      	ldr	r3, [pc, #452]	@ (8014380 <_dtoa_r+0x5d0>)
 80141ba:	2200      	movs	r2, #0
 80141bc:	f7ec f8e4 	bl	8000388 <__aeabi_dsub>
 80141c0:	4602      	mov	r2, r0
 80141c2:	460b      	mov	r3, r1
 80141c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80141c8:	462a      	mov	r2, r5
 80141ca:	4633      	mov	r3, r6
 80141cc:	f7ec fd24 	bl	8000c18 <__aeabi_dcmpgt>
 80141d0:	2800      	cmp	r0, #0
 80141d2:	f040 828b 	bne.w	80146ec <_dtoa_r+0x93c>
 80141d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141da:	462a      	mov	r2, r5
 80141dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80141e0:	f7ec fcfc 	bl	8000bdc <__aeabi_dcmplt>
 80141e4:	2800      	cmp	r0, #0
 80141e6:	f040 8128 	bne.w	801443a <_dtoa_r+0x68a>
 80141ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80141ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80141f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	f2c0 815a 	blt.w	80144ae <_dtoa_r+0x6fe>
 80141fa:	2f0e      	cmp	r7, #14
 80141fc:	f300 8157 	bgt.w	80144ae <_dtoa_r+0x6fe>
 8014200:	4b5a      	ldr	r3, [pc, #360]	@ (801436c <_dtoa_r+0x5bc>)
 8014202:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014206:	ed93 7b00 	vldr	d7, [r3]
 801420a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801420c:	2b00      	cmp	r3, #0
 801420e:	ed8d 7b00 	vstr	d7, [sp]
 8014212:	da03      	bge.n	801421c <_dtoa_r+0x46c>
 8014214:	9b07      	ldr	r3, [sp, #28]
 8014216:	2b00      	cmp	r3, #0
 8014218:	f340 8101 	ble.w	801441e <_dtoa_r+0x66e>
 801421c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014220:	4656      	mov	r6, sl
 8014222:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014226:	4620      	mov	r0, r4
 8014228:	4629      	mov	r1, r5
 801422a:	f7ec fb8f 	bl	800094c <__aeabi_ddiv>
 801422e:	f7ec fd13 	bl	8000c58 <__aeabi_d2iz>
 8014232:	4680      	mov	r8, r0
 8014234:	f7ec f9f6 	bl	8000624 <__aeabi_i2d>
 8014238:	e9dd 2300 	ldrd	r2, r3, [sp]
 801423c:	f7ec fa5c 	bl	80006f8 <__aeabi_dmul>
 8014240:	4602      	mov	r2, r0
 8014242:	460b      	mov	r3, r1
 8014244:	4620      	mov	r0, r4
 8014246:	4629      	mov	r1, r5
 8014248:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801424c:	f7ec f89c 	bl	8000388 <__aeabi_dsub>
 8014250:	f806 4b01 	strb.w	r4, [r6], #1
 8014254:	9d07      	ldr	r5, [sp, #28]
 8014256:	eba6 040a 	sub.w	r4, r6, sl
 801425a:	42a5      	cmp	r5, r4
 801425c:	4602      	mov	r2, r0
 801425e:	460b      	mov	r3, r1
 8014260:	f040 8117 	bne.w	8014492 <_dtoa_r+0x6e2>
 8014264:	f7ec f892 	bl	800038c <__adddf3>
 8014268:	e9dd 2300 	ldrd	r2, r3, [sp]
 801426c:	4604      	mov	r4, r0
 801426e:	460d      	mov	r5, r1
 8014270:	f7ec fcd2 	bl	8000c18 <__aeabi_dcmpgt>
 8014274:	2800      	cmp	r0, #0
 8014276:	f040 80f9 	bne.w	801446c <_dtoa_r+0x6bc>
 801427a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801427e:	4620      	mov	r0, r4
 8014280:	4629      	mov	r1, r5
 8014282:	f7ec fca1 	bl	8000bc8 <__aeabi_dcmpeq>
 8014286:	b118      	cbz	r0, 8014290 <_dtoa_r+0x4e0>
 8014288:	f018 0f01 	tst.w	r8, #1
 801428c:	f040 80ee 	bne.w	801446c <_dtoa_r+0x6bc>
 8014290:	4649      	mov	r1, r9
 8014292:	4658      	mov	r0, fp
 8014294:	f000 fbda 	bl	8014a4c <_Bfree>
 8014298:	2300      	movs	r3, #0
 801429a:	7033      	strb	r3, [r6, #0]
 801429c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801429e:	3701      	adds	r7, #1
 80142a0:	601f      	str	r7, [r3, #0]
 80142a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	f000 831d 	beq.w	80148e4 <_dtoa_r+0xb34>
 80142aa:	601e      	str	r6, [r3, #0]
 80142ac:	e31a      	b.n	80148e4 <_dtoa_r+0xb34>
 80142ae:	07e2      	lsls	r2, r4, #31
 80142b0:	d505      	bpl.n	80142be <_dtoa_r+0x50e>
 80142b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80142b6:	f7ec fa1f 	bl	80006f8 <__aeabi_dmul>
 80142ba:	3601      	adds	r6, #1
 80142bc:	2301      	movs	r3, #1
 80142be:	1064      	asrs	r4, r4, #1
 80142c0:	3508      	adds	r5, #8
 80142c2:	e73f      	b.n	8014144 <_dtoa_r+0x394>
 80142c4:	2602      	movs	r6, #2
 80142c6:	e742      	b.n	801414e <_dtoa_r+0x39e>
 80142c8:	9c07      	ldr	r4, [sp, #28]
 80142ca:	9704      	str	r7, [sp, #16]
 80142cc:	e761      	b.n	8014192 <_dtoa_r+0x3e2>
 80142ce:	4b27      	ldr	r3, [pc, #156]	@ (801436c <_dtoa_r+0x5bc>)
 80142d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80142d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80142d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80142da:	4454      	add	r4, sl
 80142dc:	2900      	cmp	r1, #0
 80142de:	d053      	beq.n	8014388 <_dtoa_r+0x5d8>
 80142e0:	4928      	ldr	r1, [pc, #160]	@ (8014384 <_dtoa_r+0x5d4>)
 80142e2:	2000      	movs	r0, #0
 80142e4:	f7ec fb32 	bl	800094c <__aeabi_ddiv>
 80142e8:	4633      	mov	r3, r6
 80142ea:	462a      	mov	r2, r5
 80142ec:	f7ec f84c 	bl	8000388 <__aeabi_dsub>
 80142f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80142f4:	4656      	mov	r6, sl
 80142f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142fa:	f7ec fcad 	bl	8000c58 <__aeabi_d2iz>
 80142fe:	4605      	mov	r5, r0
 8014300:	f7ec f990 	bl	8000624 <__aeabi_i2d>
 8014304:	4602      	mov	r2, r0
 8014306:	460b      	mov	r3, r1
 8014308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801430c:	f7ec f83c 	bl	8000388 <__aeabi_dsub>
 8014310:	3530      	adds	r5, #48	@ 0x30
 8014312:	4602      	mov	r2, r0
 8014314:	460b      	mov	r3, r1
 8014316:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801431a:	f806 5b01 	strb.w	r5, [r6], #1
 801431e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014322:	f7ec fc5b 	bl	8000bdc <__aeabi_dcmplt>
 8014326:	2800      	cmp	r0, #0
 8014328:	d171      	bne.n	801440e <_dtoa_r+0x65e>
 801432a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801432e:	4911      	ldr	r1, [pc, #68]	@ (8014374 <_dtoa_r+0x5c4>)
 8014330:	2000      	movs	r0, #0
 8014332:	f7ec f829 	bl	8000388 <__aeabi_dsub>
 8014336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801433a:	f7ec fc4f 	bl	8000bdc <__aeabi_dcmplt>
 801433e:	2800      	cmp	r0, #0
 8014340:	f040 8095 	bne.w	801446e <_dtoa_r+0x6be>
 8014344:	42a6      	cmp	r6, r4
 8014346:	f43f af50 	beq.w	80141ea <_dtoa_r+0x43a>
 801434a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801434e:	4b0a      	ldr	r3, [pc, #40]	@ (8014378 <_dtoa_r+0x5c8>)
 8014350:	2200      	movs	r2, #0
 8014352:	f7ec f9d1 	bl	80006f8 <__aeabi_dmul>
 8014356:	4b08      	ldr	r3, [pc, #32]	@ (8014378 <_dtoa_r+0x5c8>)
 8014358:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801435c:	2200      	movs	r2, #0
 801435e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014362:	f7ec f9c9 	bl	80006f8 <__aeabi_dmul>
 8014366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801436a:	e7c4      	b.n	80142f6 <_dtoa_r+0x546>
 801436c:	080d2de0 	.word	0x080d2de0
 8014370:	080d2db8 	.word	0x080d2db8
 8014374:	3ff00000 	.word	0x3ff00000
 8014378:	40240000 	.word	0x40240000
 801437c:	401c0000 	.word	0x401c0000
 8014380:	40140000 	.word	0x40140000
 8014384:	3fe00000 	.word	0x3fe00000
 8014388:	4631      	mov	r1, r6
 801438a:	4628      	mov	r0, r5
 801438c:	f7ec f9b4 	bl	80006f8 <__aeabi_dmul>
 8014390:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014394:	9415      	str	r4, [sp, #84]	@ 0x54
 8014396:	4656      	mov	r6, sl
 8014398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801439c:	f7ec fc5c 	bl	8000c58 <__aeabi_d2iz>
 80143a0:	4605      	mov	r5, r0
 80143a2:	f7ec f93f 	bl	8000624 <__aeabi_i2d>
 80143a6:	4602      	mov	r2, r0
 80143a8:	460b      	mov	r3, r1
 80143aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143ae:	f7eb ffeb 	bl	8000388 <__aeabi_dsub>
 80143b2:	3530      	adds	r5, #48	@ 0x30
 80143b4:	f806 5b01 	strb.w	r5, [r6], #1
 80143b8:	4602      	mov	r2, r0
 80143ba:	460b      	mov	r3, r1
 80143bc:	42a6      	cmp	r6, r4
 80143be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80143c2:	f04f 0200 	mov.w	r2, #0
 80143c6:	d124      	bne.n	8014412 <_dtoa_r+0x662>
 80143c8:	4bac      	ldr	r3, [pc, #688]	@ (801467c <_dtoa_r+0x8cc>)
 80143ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80143ce:	f7eb ffdd 	bl	800038c <__adddf3>
 80143d2:	4602      	mov	r2, r0
 80143d4:	460b      	mov	r3, r1
 80143d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143da:	f7ec fc1d 	bl	8000c18 <__aeabi_dcmpgt>
 80143de:	2800      	cmp	r0, #0
 80143e0:	d145      	bne.n	801446e <_dtoa_r+0x6be>
 80143e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80143e6:	49a5      	ldr	r1, [pc, #660]	@ (801467c <_dtoa_r+0x8cc>)
 80143e8:	2000      	movs	r0, #0
 80143ea:	f7eb ffcd 	bl	8000388 <__aeabi_dsub>
 80143ee:	4602      	mov	r2, r0
 80143f0:	460b      	mov	r3, r1
 80143f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143f6:	f7ec fbf1 	bl	8000bdc <__aeabi_dcmplt>
 80143fa:	2800      	cmp	r0, #0
 80143fc:	f43f aef5 	beq.w	80141ea <_dtoa_r+0x43a>
 8014400:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8014402:	1e73      	subs	r3, r6, #1
 8014404:	9315      	str	r3, [sp, #84]	@ 0x54
 8014406:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801440a:	2b30      	cmp	r3, #48	@ 0x30
 801440c:	d0f8      	beq.n	8014400 <_dtoa_r+0x650>
 801440e:	9f04      	ldr	r7, [sp, #16]
 8014410:	e73e      	b.n	8014290 <_dtoa_r+0x4e0>
 8014412:	4b9b      	ldr	r3, [pc, #620]	@ (8014680 <_dtoa_r+0x8d0>)
 8014414:	f7ec f970 	bl	80006f8 <__aeabi_dmul>
 8014418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801441c:	e7bc      	b.n	8014398 <_dtoa_r+0x5e8>
 801441e:	d10c      	bne.n	801443a <_dtoa_r+0x68a>
 8014420:	4b98      	ldr	r3, [pc, #608]	@ (8014684 <_dtoa_r+0x8d4>)
 8014422:	2200      	movs	r2, #0
 8014424:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014428:	f7ec f966 	bl	80006f8 <__aeabi_dmul>
 801442c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014430:	f7ec fbe8 	bl	8000c04 <__aeabi_dcmpge>
 8014434:	2800      	cmp	r0, #0
 8014436:	f000 8157 	beq.w	80146e8 <_dtoa_r+0x938>
 801443a:	2400      	movs	r4, #0
 801443c:	4625      	mov	r5, r4
 801443e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014440:	43db      	mvns	r3, r3
 8014442:	9304      	str	r3, [sp, #16]
 8014444:	4656      	mov	r6, sl
 8014446:	2700      	movs	r7, #0
 8014448:	4621      	mov	r1, r4
 801444a:	4658      	mov	r0, fp
 801444c:	f000 fafe 	bl	8014a4c <_Bfree>
 8014450:	2d00      	cmp	r5, #0
 8014452:	d0dc      	beq.n	801440e <_dtoa_r+0x65e>
 8014454:	b12f      	cbz	r7, 8014462 <_dtoa_r+0x6b2>
 8014456:	42af      	cmp	r7, r5
 8014458:	d003      	beq.n	8014462 <_dtoa_r+0x6b2>
 801445a:	4639      	mov	r1, r7
 801445c:	4658      	mov	r0, fp
 801445e:	f000 faf5 	bl	8014a4c <_Bfree>
 8014462:	4629      	mov	r1, r5
 8014464:	4658      	mov	r0, fp
 8014466:	f000 faf1 	bl	8014a4c <_Bfree>
 801446a:	e7d0      	b.n	801440e <_dtoa_r+0x65e>
 801446c:	9704      	str	r7, [sp, #16]
 801446e:	4633      	mov	r3, r6
 8014470:	461e      	mov	r6, r3
 8014472:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014476:	2a39      	cmp	r2, #57	@ 0x39
 8014478:	d107      	bne.n	801448a <_dtoa_r+0x6da>
 801447a:	459a      	cmp	sl, r3
 801447c:	d1f8      	bne.n	8014470 <_dtoa_r+0x6c0>
 801447e:	9a04      	ldr	r2, [sp, #16]
 8014480:	3201      	adds	r2, #1
 8014482:	9204      	str	r2, [sp, #16]
 8014484:	2230      	movs	r2, #48	@ 0x30
 8014486:	f88a 2000 	strb.w	r2, [sl]
 801448a:	781a      	ldrb	r2, [r3, #0]
 801448c:	3201      	adds	r2, #1
 801448e:	701a      	strb	r2, [r3, #0]
 8014490:	e7bd      	b.n	801440e <_dtoa_r+0x65e>
 8014492:	4b7b      	ldr	r3, [pc, #492]	@ (8014680 <_dtoa_r+0x8d0>)
 8014494:	2200      	movs	r2, #0
 8014496:	f7ec f92f 	bl	80006f8 <__aeabi_dmul>
 801449a:	2200      	movs	r2, #0
 801449c:	2300      	movs	r3, #0
 801449e:	4604      	mov	r4, r0
 80144a0:	460d      	mov	r5, r1
 80144a2:	f7ec fb91 	bl	8000bc8 <__aeabi_dcmpeq>
 80144a6:	2800      	cmp	r0, #0
 80144a8:	f43f aebb 	beq.w	8014222 <_dtoa_r+0x472>
 80144ac:	e6f0      	b.n	8014290 <_dtoa_r+0x4e0>
 80144ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80144b0:	2a00      	cmp	r2, #0
 80144b2:	f000 80db 	beq.w	801466c <_dtoa_r+0x8bc>
 80144b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80144b8:	2a01      	cmp	r2, #1
 80144ba:	f300 80bf 	bgt.w	801463c <_dtoa_r+0x88c>
 80144be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80144c0:	2a00      	cmp	r2, #0
 80144c2:	f000 80b7 	beq.w	8014634 <_dtoa_r+0x884>
 80144c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80144ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80144cc:	4646      	mov	r6, r8
 80144ce:	9a08      	ldr	r2, [sp, #32]
 80144d0:	2101      	movs	r1, #1
 80144d2:	441a      	add	r2, r3
 80144d4:	4658      	mov	r0, fp
 80144d6:	4498      	add	r8, r3
 80144d8:	9208      	str	r2, [sp, #32]
 80144da:	f000 fb6b 	bl	8014bb4 <__i2b>
 80144de:	4605      	mov	r5, r0
 80144e0:	b15e      	cbz	r6, 80144fa <_dtoa_r+0x74a>
 80144e2:	9b08      	ldr	r3, [sp, #32]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	dd08      	ble.n	80144fa <_dtoa_r+0x74a>
 80144e8:	42b3      	cmp	r3, r6
 80144ea:	9a08      	ldr	r2, [sp, #32]
 80144ec:	bfa8      	it	ge
 80144ee:	4633      	movge	r3, r6
 80144f0:	eba8 0803 	sub.w	r8, r8, r3
 80144f4:	1af6      	subs	r6, r6, r3
 80144f6:	1ad3      	subs	r3, r2, r3
 80144f8:	9308      	str	r3, [sp, #32]
 80144fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80144fc:	b1f3      	cbz	r3, 801453c <_dtoa_r+0x78c>
 80144fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014500:	2b00      	cmp	r3, #0
 8014502:	f000 80b7 	beq.w	8014674 <_dtoa_r+0x8c4>
 8014506:	b18c      	cbz	r4, 801452c <_dtoa_r+0x77c>
 8014508:	4629      	mov	r1, r5
 801450a:	4622      	mov	r2, r4
 801450c:	4658      	mov	r0, fp
 801450e:	f000 fc11 	bl	8014d34 <__pow5mult>
 8014512:	464a      	mov	r2, r9
 8014514:	4601      	mov	r1, r0
 8014516:	4605      	mov	r5, r0
 8014518:	4658      	mov	r0, fp
 801451a:	f000 fb61 	bl	8014be0 <__multiply>
 801451e:	4649      	mov	r1, r9
 8014520:	9004      	str	r0, [sp, #16]
 8014522:	4658      	mov	r0, fp
 8014524:	f000 fa92 	bl	8014a4c <_Bfree>
 8014528:	9b04      	ldr	r3, [sp, #16]
 801452a:	4699      	mov	r9, r3
 801452c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801452e:	1b1a      	subs	r2, r3, r4
 8014530:	d004      	beq.n	801453c <_dtoa_r+0x78c>
 8014532:	4649      	mov	r1, r9
 8014534:	4658      	mov	r0, fp
 8014536:	f000 fbfd 	bl	8014d34 <__pow5mult>
 801453a:	4681      	mov	r9, r0
 801453c:	2101      	movs	r1, #1
 801453e:	4658      	mov	r0, fp
 8014540:	f000 fb38 	bl	8014bb4 <__i2b>
 8014544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014546:	4604      	mov	r4, r0
 8014548:	2b00      	cmp	r3, #0
 801454a:	f000 81cf 	beq.w	80148ec <_dtoa_r+0xb3c>
 801454e:	461a      	mov	r2, r3
 8014550:	4601      	mov	r1, r0
 8014552:	4658      	mov	r0, fp
 8014554:	f000 fbee 	bl	8014d34 <__pow5mult>
 8014558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801455a:	2b01      	cmp	r3, #1
 801455c:	4604      	mov	r4, r0
 801455e:	f300 8095 	bgt.w	801468c <_dtoa_r+0x8dc>
 8014562:	9b02      	ldr	r3, [sp, #8]
 8014564:	2b00      	cmp	r3, #0
 8014566:	f040 8087 	bne.w	8014678 <_dtoa_r+0x8c8>
 801456a:	9b03      	ldr	r3, [sp, #12]
 801456c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014570:	2b00      	cmp	r3, #0
 8014572:	f040 8089 	bne.w	8014688 <_dtoa_r+0x8d8>
 8014576:	9b03      	ldr	r3, [sp, #12]
 8014578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801457c:	0d1b      	lsrs	r3, r3, #20
 801457e:	051b      	lsls	r3, r3, #20
 8014580:	b12b      	cbz	r3, 801458e <_dtoa_r+0x7de>
 8014582:	9b08      	ldr	r3, [sp, #32]
 8014584:	3301      	adds	r3, #1
 8014586:	9308      	str	r3, [sp, #32]
 8014588:	f108 0801 	add.w	r8, r8, #1
 801458c:	2301      	movs	r3, #1
 801458e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014592:	2b00      	cmp	r3, #0
 8014594:	f000 81b0 	beq.w	80148f8 <_dtoa_r+0xb48>
 8014598:	6923      	ldr	r3, [r4, #16]
 801459a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801459e:	6918      	ldr	r0, [r3, #16]
 80145a0:	f000 fabc 	bl	8014b1c <__hi0bits>
 80145a4:	f1c0 0020 	rsb	r0, r0, #32
 80145a8:	9b08      	ldr	r3, [sp, #32]
 80145aa:	4418      	add	r0, r3
 80145ac:	f010 001f 	ands.w	r0, r0, #31
 80145b0:	d077      	beq.n	80146a2 <_dtoa_r+0x8f2>
 80145b2:	f1c0 0320 	rsb	r3, r0, #32
 80145b6:	2b04      	cmp	r3, #4
 80145b8:	dd6b      	ble.n	8014692 <_dtoa_r+0x8e2>
 80145ba:	9b08      	ldr	r3, [sp, #32]
 80145bc:	f1c0 001c 	rsb	r0, r0, #28
 80145c0:	4403      	add	r3, r0
 80145c2:	4480      	add	r8, r0
 80145c4:	4406      	add	r6, r0
 80145c6:	9308      	str	r3, [sp, #32]
 80145c8:	f1b8 0f00 	cmp.w	r8, #0
 80145cc:	dd05      	ble.n	80145da <_dtoa_r+0x82a>
 80145ce:	4649      	mov	r1, r9
 80145d0:	4642      	mov	r2, r8
 80145d2:	4658      	mov	r0, fp
 80145d4:	f000 fc08 	bl	8014de8 <__lshift>
 80145d8:	4681      	mov	r9, r0
 80145da:	9b08      	ldr	r3, [sp, #32]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	dd05      	ble.n	80145ec <_dtoa_r+0x83c>
 80145e0:	4621      	mov	r1, r4
 80145e2:	461a      	mov	r2, r3
 80145e4:	4658      	mov	r0, fp
 80145e6:	f000 fbff 	bl	8014de8 <__lshift>
 80145ea:	4604      	mov	r4, r0
 80145ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d059      	beq.n	80146a6 <_dtoa_r+0x8f6>
 80145f2:	4621      	mov	r1, r4
 80145f4:	4648      	mov	r0, r9
 80145f6:	f000 fc63 	bl	8014ec0 <__mcmp>
 80145fa:	2800      	cmp	r0, #0
 80145fc:	da53      	bge.n	80146a6 <_dtoa_r+0x8f6>
 80145fe:	1e7b      	subs	r3, r7, #1
 8014600:	9304      	str	r3, [sp, #16]
 8014602:	4649      	mov	r1, r9
 8014604:	2300      	movs	r3, #0
 8014606:	220a      	movs	r2, #10
 8014608:	4658      	mov	r0, fp
 801460a:	f000 fa41 	bl	8014a90 <__multadd>
 801460e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014610:	4681      	mov	r9, r0
 8014612:	2b00      	cmp	r3, #0
 8014614:	f000 8172 	beq.w	80148fc <_dtoa_r+0xb4c>
 8014618:	2300      	movs	r3, #0
 801461a:	4629      	mov	r1, r5
 801461c:	220a      	movs	r2, #10
 801461e:	4658      	mov	r0, fp
 8014620:	f000 fa36 	bl	8014a90 <__multadd>
 8014624:	9b00      	ldr	r3, [sp, #0]
 8014626:	2b00      	cmp	r3, #0
 8014628:	4605      	mov	r5, r0
 801462a:	dc67      	bgt.n	80146fc <_dtoa_r+0x94c>
 801462c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801462e:	2b02      	cmp	r3, #2
 8014630:	dc41      	bgt.n	80146b6 <_dtoa_r+0x906>
 8014632:	e063      	b.n	80146fc <_dtoa_r+0x94c>
 8014634:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014636:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801463a:	e746      	b.n	80144ca <_dtoa_r+0x71a>
 801463c:	9b07      	ldr	r3, [sp, #28]
 801463e:	1e5c      	subs	r4, r3, #1
 8014640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014642:	42a3      	cmp	r3, r4
 8014644:	bfbf      	itttt	lt
 8014646:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8014648:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801464a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801464c:	1ae3      	sublt	r3, r4, r3
 801464e:	bfb4      	ite	lt
 8014650:	18d2      	addlt	r2, r2, r3
 8014652:	1b1c      	subge	r4, r3, r4
 8014654:	9b07      	ldr	r3, [sp, #28]
 8014656:	bfbc      	itt	lt
 8014658:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801465a:	2400      	movlt	r4, #0
 801465c:	2b00      	cmp	r3, #0
 801465e:	bfb5      	itete	lt
 8014660:	eba8 0603 	sublt.w	r6, r8, r3
 8014664:	9b07      	ldrge	r3, [sp, #28]
 8014666:	2300      	movlt	r3, #0
 8014668:	4646      	movge	r6, r8
 801466a:	e730      	b.n	80144ce <_dtoa_r+0x71e>
 801466c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801466e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8014670:	4646      	mov	r6, r8
 8014672:	e735      	b.n	80144e0 <_dtoa_r+0x730>
 8014674:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014676:	e75c      	b.n	8014532 <_dtoa_r+0x782>
 8014678:	2300      	movs	r3, #0
 801467a:	e788      	b.n	801458e <_dtoa_r+0x7de>
 801467c:	3fe00000 	.word	0x3fe00000
 8014680:	40240000 	.word	0x40240000
 8014684:	40140000 	.word	0x40140000
 8014688:	9b02      	ldr	r3, [sp, #8]
 801468a:	e780      	b.n	801458e <_dtoa_r+0x7de>
 801468c:	2300      	movs	r3, #0
 801468e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014690:	e782      	b.n	8014598 <_dtoa_r+0x7e8>
 8014692:	d099      	beq.n	80145c8 <_dtoa_r+0x818>
 8014694:	9a08      	ldr	r2, [sp, #32]
 8014696:	331c      	adds	r3, #28
 8014698:	441a      	add	r2, r3
 801469a:	4498      	add	r8, r3
 801469c:	441e      	add	r6, r3
 801469e:	9208      	str	r2, [sp, #32]
 80146a0:	e792      	b.n	80145c8 <_dtoa_r+0x818>
 80146a2:	4603      	mov	r3, r0
 80146a4:	e7f6      	b.n	8014694 <_dtoa_r+0x8e4>
 80146a6:	9b07      	ldr	r3, [sp, #28]
 80146a8:	9704      	str	r7, [sp, #16]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	dc20      	bgt.n	80146f0 <_dtoa_r+0x940>
 80146ae:	9300      	str	r3, [sp, #0]
 80146b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146b2:	2b02      	cmp	r3, #2
 80146b4:	dd1e      	ble.n	80146f4 <_dtoa_r+0x944>
 80146b6:	9b00      	ldr	r3, [sp, #0]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	f47f aec0 	bne.w	801443e <_dtoa_r+0x68e>
 80146be:	4621      	mov	r1, r4
 80146c0:	2205      	movs	r2, #5
 80146c2:	4658      	mov	r0, fp
 80146c4:	f000 f9e4 	bl	8014a90 <__multadd>
 80146c8:	4601      	mov	r1, r0
 80146ca:	4604      	mov	r4, r0
 80146cc:	4648      	mov	r0, r9
 80146ce:	f000 fbf7 	bl	8014ec0 <__mcmp>
 80146d2:	2800      	cmp	r0, #0
 80146d4:	f77f aeb3 	ble.w	801443e <_dtoa_r+0x68e>
 80146d8:	4656      	mov	r6, sl
 80146da:	2331      	movs	r3, #49	@ 0x31
 80146dc:	f806 3b01 	strb.w	r3, [r6], #1
 80146e0:	9b04      	ldr	r3, [sp, #16]
 80146e2:	3301      	adds	r3, #1
 80146e4:	9304      	str	r3, [sp, #16]
 80146e6:	e6ae      	b.n	8014446 <_dtoa_r+0x696>
 80146e8:	9c07      	ldr	r4, [sp, #28]
 80146ea:	9704      	str	r7, [sp, #16]
 80146ec:	4625      	mov	r5, r4
 80146ee:	e7f3      	b.n	80146d8 <_dtoa_r+0x928>
 80146f0:	9b07      	ldr	r3, [sp, #28]
 80146f2:	9300      	str	r3, [sp, #0]
 80146f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	f000 8104 	beq.w	8014904 <_dtoa_r+0xb54>
 80146fc:	2e00      	cmp	r6, #0
 80146fe:	dd05      	ble.n	801470c <_dtoa_r+0x95c>
 8014700:	4629      	mov	r1, r5
 8014702:	4632      	mov	r2, r6
 8014704:	4658      	mov	r0, fp
 8014706:	f000 fb6f 	bl	8014de8 <__lshift>
 801470a:	4605      	mov	r5, r0
 801470c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801470e:	2b00      	cmp	r3, #0
 8014710:	d05a      	beq.n	80147c8 <_dtoa_r+0xa18>
 8014712:	6869      	ldr	r1, [r5, #4]
 8014714:	4658      	mov	r0, fp
 8014716:	f000 f959 	bl	80149cc <_Balloc>
 801471a:	4606      	mov	r6, r0
 801471c:	b928      	cbnz	r0, 801472a <_dtoa_r+0x97a>
 801471e:	4b84      	ldr	r3, [pc, #528]	@ (8014930 <_dtoa_r+0xb80>)
 8014720:	4602      	mov	r2, r0
 8014722:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014726:	f7ff bb5a 	b.w	8013dde <_dtoa_r+0x2e>
 801472a:	692a      	ldr	r2, [r5, #16]
 801472c:	3202      	adds	r2, #2
 801472e:	0092      	lsls	r2, r2, #2
 8014730:	f105 010c 	add.w	r1, r5, #12
 8014734:	300c      	adds	r0, #12
 8014736:	f7ff faa4 	bl	8013c82 <memcpy>
 801473a:	2201      	movs	r2, #1
 801473c:	4631      	mov	r1, r6
 801473e:	4658      	mov	r0, fp
 8014740:	f000 fb52 	bl	8014de8 <__lshift>
 8014744:	f10a 0301 	add.w	r3, sl, #1
 8014748:	9307      	str	r3, [sp, #28]
 801474a:	9b00      	ldr	r3, [sp, #0]
 801474c:	4453      	add	r3, sl
 801474e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014750:	9b02      	ldr	r3, [sp, #8]
 8014752:	f003 0301 	and.w	r3, r3, #1
 8014756:	462f      	mov	r7, r5
 8014758:	930a      	str	r3, [sp, #40]	@ 0x28
 801475a:	4605      	mov	r5, r0
 801475c:	9b07      	ldr	r3, [sp, #28]
 801475e:	4621      	mov	r1, r4
 8014760:	3b01      	subs	r3, #1
 8014762:	4648      	mov	r0, r9
 8014764:	9300      	str	r3, [sp, #0]
 8014766:	f7ff fa9a 	bl	8013c9e <quorem>
 801476a:	4639      	mov	r1, r7
 801476c:	9002      	str	r0, [sp, #8]
 801476e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014772:	4648      	mov	r0, r9
 8014774:	f000 fba4 	bl	8014ec0 <__mcmp>
 8014778:	462a      	mov	r2, r5
 801477a:	9008      	str	r0, [sp, #32]
 801477c:	4621      	mov	r1, r4
 801477e:	4658      	mov	r0, fp
 8014780:	f000 fbba 	bl	8014ef8 <__mdiff>
 8014784:	68c2      	ldr	r2, [r0, #12]
 8014786:	4606      	mov	r6, r0
 8014788:	bb02      	cbnz	r2, 80147cc <_dtoa_r+0xa1c>
 801478a:	4601      	mov	r1, r0
 801478c:	4648      	mov	r0, r9
 801478e:	f000 fb97 	bl	8014ec0 <__mcmp>
 8014792:	4602      	mov	r2, r0
 8014794:	4631      	mov	r1, r6
 8014796:	4658      	mov	r0, fp
 8014798:	920e      	str	r2, [sp, #56]	@ 0x38
 801479a:	f000 f957 	bl	8014a4c <_Bfree>
 801479e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80147a2:	9e07      	ldr	r6, [sp, #28]
 80147a4:	ea43 0102 	orr.w	r1, r3, r2
 80147a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80147aa:	4319      	orrs	r1, r3
 80147ac:	d110      	bne.n	80147d0 <_dtoa_r+0xa20>
 80147ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80147b2:	d029      	beq.n	8014808 <_dtoa_r+0xa58>
 80147b4:	9b08      	ldr	r3, [sp, #32]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	dd02      	ble.n	80147c0 <_dtoa_r+0xa10>
 80147ba:	9b02      	ldr	r3, [sp, #8]
 80147bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80147c0:	9b00      	ldr	r3, [sp, #0]
 80147c2:	f883 8000 	strb.w	r8, [r3]
 80147c6:	e63f      	b.n	8014448 <_dtoa_r+0x698>
 80147c8:	4628      	mov	r0, r5
 80147ca:	e7bb      	b.n	8014744 <_dtoa_r+0x994>
 80147cc:	2201      	movs	r2, #1
 80147ce:	e7e1      	b.n	8014794 <_dtoa_r+0x9e4>
 80147d0:	9b08      	ldr	r3, [sp, #32]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	db04      	blt.n	80147e0 <_dtoa_r+0xa30>
 80147d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80147d8:	430b      	orrs	r3, r1
 80147da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80147dc:	430b      	orrs	r3, r1
 80147de:	d120      	bne.n	8014822 <_dtoa_r+0xa72>
 80147e0:	2a00      	cmp	r2, #0
 80147e2:	dded      	ble.n	80147c0 <_dtoa_r+0xa10>
 80147e4:	4649      	mov	r1, r9
 80147e6:	2201      	movs	r2, #1
 80147e8:	4658      	mov	r0, fp
 80147ea:	f000 fafd 	bl	8014de8 <__lshift>
 80147ee:	4621      	mov	r1, r4
 80147f0:	4681      	mov	r9, r0
 80147f2:	f000 fb65 	bl	8014ec0 <__mcmp>
 80147f6:	2800      	cmp	r0, #0
 80147f8:	dc03      	bgt.n	8014802 <_dtoa_r+0xa52>
 80147fa:	d1e1      	bne.n	80147c0 <_dtoa_r+0xa10>
 80147fc:	f018 0f01 	tst.w	r8, #1
 8014800:	d0de      	beq.n	80147c0 <_dtoa_r+0xa10>
 8014802:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014806:	d1d8      	bne.n	80147ba <_dtoa_r+0xa0a>
 8014808:	9a00      	ldr	r2, [sp, #0]
 801480a:	2339      	movs	r3, #57	@ 0x39
 801480c:	7013      	strb	r3, [r2, #0]
 801480e:	4633      	mov	r3, r6
 8014810:	461e      	mov	r6, r3
 8014812:	3b01      	subs	r3, #1
 8014814:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014818:	2a39      	cmp	r2, #57	@ 0x39
 801481a:	d052      	beq.n	80148c2 <_dtoa_r+0xb12>
 801481c:	3201      	adds	r2, #1
 801481e:	701a      	strb	r2, [r3, #0]
 8014820:	e612      	b.n	8014448 <_dtoa_r+0x698>
 8014822:	2a00      	cmp	r2, #0
 8014824:	dd07      	ble.n	8014836 <_dtoa_r+0xa86>
 8014826:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801482a:	d0ed      	beq.n	8014808 <_dtoa_r+0xa58>
 801482c:	9a00      	ldr	r2, [sp, #0]
 801482e:	f108 0301 	add.w	r3, r8, #1
 8014832:	7013      	strb	r3, [r2, #0]
 8014834:	e608      	b.n	8014448 <_dtoa_r+0x698>
 8014836:	9b07      	ldr	r3, [sp, #28]
 8014838:	9a07      	ldr	r2, [sp, #28]
 801483a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801483e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014840:	4293      	cmp	r3, r2
 8014842:	d028      	beq.n	8014896 <_dtoa_r+0xae6>
 8014844:	4649      	mov	r1, r9
 8014846:	2300      	movs	r3, #0
 8014848:	220a      	movs	r2, #10
 801484a:	4658      	mov	r0, fp
 801484c:	f000 f920 	bl	8014a90 <__multadd>
 8014850:	42af      	cmp	r7, r5
 8014852:	4681      	mov	r9, r0
 8014854:	f04f 0300 	mov.w	r3, #0
 8014858:	f04f 020a 	mov.w	r2, #10
 801485c:	4639      	mov	r1, r7
 801485e:	4658      	mov	r0, fp
 8014860:	d107      	bne.n	8014872 <_dtoa_r+0xac2>
 8014862:	f000 f915 	bl	8014a90 <__multadd>
 8014866:	4607      	mov	r7, r0
 8014868:	4605      	mov	r5, r0
 801486a:	9b07      	ldr	r3, [sp, #28]
 801486c:	3301      	adds	r3, #1
 801486e:	9307      	str	r3, [sp, #28]
 8014870:	e774      	b.n	801475c <_dtoa_r+0x9ac>
 8014872:	f000 f90d 	bl	8014a90 <__multadd>
 8014876:	4629      	mov	r1, r5
 8014878:	4607      	mov	r7, r0
 801487a:	2300      	movs	r3, #0
 801487c:	220a      	movs	r2, #10
 801487e:	4658      	mov	r0, fp
 8014880:	f000 f906 	bl	8014a90 <__multadd>
 8014884:	4605      	mov	r5, r0
 8014886:	e7f0      	b.n	801486a <_dtoa_r+0xaba>
 8014888:	9b00      	ldr	r3, [sp, #0]
 801488a:	2b00      	cmp	r3, #0
 801488c:	bfcc      	ite	gt
 801488e:	461e      	movgt	r6, r3
 8014890:	2601      	movle	r6, #1
 8014892:	4456      	add	r6, sl
 8014894:	2700      	movs	r7, #0
 8014896:	4649      	mov	r1, r9
 8014898:	2201      	movs	r2, #1
 801489a:	4658      	mov	r0, fp
 801489c:	f000 faa4 	bl	8014de8 <__lshift>
 80148a0:	4621      	mov	r1, r4
 80148a2:	4681      	mov	r9, r0
 80148a4:	f000 fb0c 	bl	8014ec0 <__mcmp>
 80148a8:	2800      	cmp	r0, #0
 80148aa:	dcb0      	bgt.n	801480e <_dtoa_r+0xa5e>
 80148ac:	d102      	bne.n	80148b4 <_dtoa_r+0xb04>
 80148ae:	f018 0f01 	tst.w	r8, #1
 80148b2:	d1ac      	bne.n	801480e <_dtoa_r+0xa5e>
 80148b4:	4633      	mov	r3, r6
 80148b6:	461e      	mov	r6, r3
 80148b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80148bc:	2a30      	cmp	r2, #48	@ 0x30
 80148be:	d0fa      	beq.n	80148b6 <_dtoa_r+0xb06>
 80148c0:	e5c2      	b.n	8014448 <_dtoa_r+0x698>
 80148c2:	459a      	cmp	sl, r3
 80148c4:	d1a4      	bne.n	8014810 <_dtoa_r+0xa60>
 80148c6:	9b04      	ldr	r3, [sp, #16]
 80148c8:	3301      	adds	r3, #1
 80148ca:	9304      	str	r3, [sp, #16]
 80148cc:	2331      	movs	r3, #49	@ 0x31
 80148ce:	f88a 3000 	strb.w	r3, [sl]
 80148d2:	e5b9      	b.n	8014448 <_dtoa_r+0x698>
 80148d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80148d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8014934 <_dtoa_r+0xb84>
 80148da:	b11b      	cbz	r3, 80148e4 <_dtoa_r+0xb34>
 80148dc:	f10a 0308 	add.w	r3, sl, #8
 80148e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80148e2:	6013      	str	r3, [r2, #0]
 80148e4:	4650      	mov	r0, sl
 80148e6:	b019      	add	sp, #100	@ 0x64
 80148e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148ee:	2b01      	cmp	r3, #1
 80148f0:	f77f ae37 	ble.w	8014562 <_dtoa_r+0x7b2>
 80148f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80148f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80148f8:	2001      	movs	r0, #1
 80148fa:	e655      	b.n	80145a8 <_dtoa_r+0x7f8>
 80148fc:	9b00      	ldr	r3, [sp, #0]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	f77f aed6 	ble.w	80146b0 <_dtoa_r+0x900>
 8014904:	4656      	mov	r6, sl
 8014906:	4621      	mov	r1, r4
 8014908:	4648      	mov	r0, r9
 801490a:	f7ff f9c8 	bl	8013c9e <quorem>
 801490e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014912:	f806 8b01 	strb.w	r8, [r6], #1
 8014916:	9b00      	ldr	r3, [sp, #0]
 8014918:	eba6 020a 	sub.w	r2, r6, sl
 801491c:	4293      	cmp	r3, r2
 801491e:	ddb3      	ble.n	8014888 <_dtoa_r+0xad8>
 8014920:	4649      	mov	r1, r9
 8014922:	2300      	movs	r3, #0
 8014924:	220a      	movs	r2, #10
 8014926:	4658      	mov	r0, fp
 8014928:	f000 f8b2 	bl	8014a90 <__multadd>
 801492c:	4681      	mov	r9, r0
 801492e:	e7ea      	b.n	8014906 <_dtoa_r+0xb56>
 8014930:	080d2d40 	.word	0x080d2d40
 8014934:	080d2cc4 	.word	0x080d2cc4

08014938 <_free_r>:
 8014938:	b538      	push	{r3, r4, r5, lr}
 801493a:	4605      	mov	r5, r0
 801493c:	2900      	cmp	r1, #0
 801493e:	d041      	beq.n	80149c4 <_free_r+0x8c>
 8014940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014944:	1f0c      	subs	r4, r1, #4
 8014946:	2b00      	cmp	r3, #0
 8014948:	bfb8      	it	lt
 801494a:	18e4      	addlt	r4, r4, r3
 801494c:	f7fe fa9c 	bl	8012e88 <__malloc_lock>
 8014950:	4a1d      	ldr	r2, [pc, #116]	@ (80149c8 <_free_r+0x90>)
 8014952:	6813      	ldr	r3, [r2, #0]
 8014954:	b933      	cbnz	r3, 8014964 <_free_r+0x2c>
 8014956:	6063      	str	r3, [r4, #4]
 8014958:	6014      	str	r4, [r2, #0]
 801495a:	4628      	mov	r0, r5
 801495c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014960:	f7fe ba98 	b.w	8012e94 <__malloc_unlock>
 8014964:	42a3      	cmp	r3, r4
 8014966:	d908      	bls.n	801497a <_free_r+0x42>
 8014968:	6820      	ldr	r0, [r4, #0]
 801496a:	1821      	adds	r1, r4, r0
 801496c:	428b      	cmp	r3, r1
 801496e:	bf01      	itttt	eq
 8014970:	6819      	ldreq	r1, [r3, #0]
 8014972:	685b      	ldreq	r3, [r3, #4]
 8014974:	1809      	addeq	r1, r1, r0
 8014976:	6021      	streq	r1, [r4, #0]
 8014978:	e7ed      	b.n	8014956 <_free_r+0x1e>
 801497a:	461a      	mov	r2, r3
 801497c:	685b      	ldr	r3, [r3, #4]
 801497e:	b10b      	cbz	r3, 8014984 <_free_r+0x4c>
 8014980:	42a3      	cmp	r3, r4
 8014982:	d9fa      	bls.n	801497a <_free_r+0x42>
 8014984:	6811      	ldr	r1, [r2, #0]
 8014986:	1850      	adds	r0, r2, r1
 8014988:	42a0      	cmp	r0, r4
 801498a:	d10b      	bne.n	80149a4 <_free_r+0x6c>
 801498c:	6820      	ldr	r0, [r4, #0]
 801498e:	4401      	add	r1, r0
 8014990:	1850      	adds	r0, r2, r1
 8014992:	4283      	cmp	r3, r0
 8014994:	6011      	str	r1, [r2, #0]
 8014996:	d1e0      	bne.n	801495a <_free_r+0x22>
 8014998:	6818      	ldr	r0, [r3, #0]
 801499a:	685b      	ldr	r3, [r3, #4]
 801499c:	6053      	str	r3, [r2, #4]
 801499e:	4408      	add	r0, r1
 80149a0:	6010      	str	r0, [r2, #0]
 80149a2:	e7da      	b.n	801495a <_free_r+0x22>
 80149a4:	d902      	bls.n	80149ac <_free_r+0x74>
 80149a6:	230c      	movs	r3, #12
 80149a8:	602b      	str	r3, [r5, #0]
 80149aa:	e7d6      	b.n	801495a <_free_r+0x22>
 80149ac:	6820      	ldr	r0, [r4, #0]
 80149ae:	1821      	adds	r1, r4, r0
 80149b0:	428b      	cmp	r3, r1
 80149b2:	bf04      	itt	eq
 80149b4:	6819      	ldreq	r1, [r3, #0]
 80149b6:	685b      	ldreq	r3, [r3, #4]
 80149b8:	6063      	str	r3, [r4, #4]
 80149ba:	bf04      	itt	eq
 80149bc:	1809      	addeq	r1, r1, r0
 80149be:	6021      	streq	r1, [r4, #0]
 80149c0:	6054      	str	r4, [r2, #4]
 80149c2:	e7ca      	b.n	801495a <_free_r+0x22>
 80149c4:	bd38      	pop	{r3, r4, r5, pc}
 80149c6:	bf00      	nop
 80149c8:	20005cb4 	.word	0x20005cb4

080149cc <_Balloc>:
 80149cc:	b570      	push	{r4, r5, r6, lr}
 80149ce:	69c6      	ldr	r6, [r0, #28]
 80149d0:	4604      	mov	r4, r0
 80149d2:	460d      	mov	r5, r1
 80149d4:	b976      	cbnz	r6, 80149f4 <_Balloc+0x28>
 80149d6:	2010      	movs	r0, #16
 80149d8:	f7fe f9ac 	bl	8012d34 <malloc>
 80149dc:	4602      	mov	r2, r0
 80149de:	61e0      	str	r0, [r4, #28]
 80149e0:	b920      	cbnz	r0, 80149ec <_Balloc+0x20>
 80149e2:	4b18      	ldr	r3, [pc, #96]	@ (8014a44 <_Balloc+0x78>)
 80149e4:	4818      	ldr	r0, [pc, #96]	@ (8014a48 <_Balloc+0x7c>)
 80149e6:	216b      	movs	r1, #107	@ 0x6b
 80149e8:	f000 fde4 	bl	80155b4 <__assert_func>
 80149ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80149f0:	6006      	str	r6, [r0, #0]
 80149f2:	60c6      	str	r6, [r0, #12]
 80149f4:	69e6      	ldr	r6, [r4, #28]
 80149f6:	68f3      	ldr	r3, [r6, #12]
 80149f8:	b183      	cbz	r3, 8014a1c <_Balloc+0x50>
 80149fa:	69e3      	ldr	r3, [r4, #28]
 80149fc:	68db      	ldr	r3, [r3, #12]
 80149fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014a02:	b9b8      	cbnz	r0, 8014a34 <_Balloc+0x68>
 8014a04:	2101      	movs	r1, #1
 8014a06:	fa01 f605 	lsl.w	r6, r1, r5
 8014a0a:	1d72      	adds	r2, r6, #5
 8014a0c:	0092      	lsls	r2, r2, #2
 8014a0e:	4620      	mov	r0, r4
 8014a10:	f000 fdee 	bl	80155f0 <_calloc_r>
 8014a14:	b160      	cbz	r0, 8014a30 <_Balloc+0x64>
 8014a16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014a1a:	e00e      	b.n	8014a3a <_Balloc+0x6e>
 8014a1c:	2221      	movs	r2, #33	@ 0x21
 8014a1e:	2104      	movs	r1, #4
 8014a20:	4620      	mov	r0, r4
 8014a22:	f000 fde5 	bl	80155f0 <_calloc_r>
 8014a26:	69e3      	ldr	r3, [r4, #28]
 8014a28:	60f0      	str	r0, [r6, #12]
 8014a2a:	68db      	ldr	r3, [r3, #12]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d1e4      	bne.n	80149fa <_Balloc+0x2e>
 8014a30:	2000      	movs	r0, #0
 8014a32:	bd70      	pop	{r4, r5, r6, pc}
 8014a34:	6802      	ldr	r2, [r0, #0]
 8014a36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014a40:	e7f7      	b.n	8014a32 <_Balloc+0x66>
 8014a42:	bf00      	nop
 8014a44:	080d2cd1 	.word	0x080d2cd1
 8014a48:	080d2d51 	.word	0x080d2d51

08014a4c <_Bfree>:
 8014a4c:	b570      	push	{r4, r5, r6, lr}
 8014a4e:	69c6      	ldr	r6, [r0, #28]
 8014a50:	4605      	mov	r5, r0
 8014a52:	460c      	mov	r4, r1
 8014a54:	b976      	cbnz	r6, 8014a74 <_Bfree+0x28>
 8014a56:	2010      	movs	r0, #16
 8014a58:	f7fe f96c 	bl	8012d34 <malloc>
 8014a5c:	4602      	mov	r2, r0
 8014a5e:	61e8      	str	r0, [r5, #28]
 8014a60:	b920      	cbnz	r0, 8014a6c <_Bfree+0x20>
 8014a62:	4b09      	ldr	r3, [pc, #36]	@ (8014a88 <_Bfree+0x3c>)
 8014a64:	4809      	ldr	r0, [pc, #36]	@ (8014a8c <_Bfree+0x40>)
 8014a66:	218f      	movs	r1, #143	@ 0x8f
 8014a68:	f000 fda4 	bl	80155b4 <__assert_func>
 8014a6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014a70:	6006      	str	r6, [r0, #0]
 8014a72:	60c6      	str	r6, [r0, #12]
 8014a74:	b13c      	cbz	r4, 8014a86 <_Bfree+0x3a>
 8014a76:	69eb      	ldr	r3, [r5, #28]
 8014a78:	6862      	ldr	r2, [r4, #4]
 8014a7a:	68db      	ldr	r3, [r3, #12]
 8014a7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014a80:	6021      	str	r1, [r4, #0]
 8014a82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014a86:	bd70      	pop	{r4, r5, r6, pc}
 8014a88:	080d2cd1 	.word	0x080d2cd1
 8014a8c:	080d2d51 	.word	0x080d2d51

08014a90 <__multadd>:
 8014a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a94:	690d      	ldr	r5, [r1, #16]
 8014a96:	4607      	mov	r7, r0
 8014a98:	460c      	mov	r4, r1
 8014a9a:	461e      	mov	r6, r3
 8014a9c:	f101 0c14 	add.w	ip, r1, #20
 8014aa0:	2000      	movs	r0, #0
 8014aa2:	f8dc 3000 	ldr.w	r3, [ip]
 8014aa6:	b299      	uxth	r1, r3
 8014aa8:	fb02 6101 	mla	r1, r2, r1, r6
 8014aac:	0c1e      	lsrs	r6, r3, #16
 8014aae:	0c0b      	lsrs	r3, r1, #16
 8014ab0:	fb02 3306 	mla	r3, r2, r6, r3
 8014ab4:	b289      	uxth	r1, r1
 8014ab6:	3001      	adds	r0, #1
 8014ab8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014abc:	4285      	cmp	r5, r0
 8014abe:	f84c 1b04 	str.w	r1, [ip], #4
 8014ac2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014ac6:	dcec      	bgt.n	8014aa2 <__multadd+0x12>
 8014ac8:	b30e      	cbz	r6, 8014b0e <__multadd+0x7e>
 8014aca:	68a3      	ldr	r3, [r4, #8]
 8014acc:	42ab      	cmp	r3, r5
 8014ace:	dc19      	bgt.n	8014b04 <__multadd+0x74>
 8014ad0:	6861      	ldr	r1, [r4, #4]
 8014ad2:	4638      	mov	r0, r7
 8014ad4:	3101      	adds	r1, #1
 8014ad6:	f7ff ff79 	bl	80149cc <_Balloc>
 8014ada:	4680      	mov	r8, r0
 8014adc:	b928      	cbnz	r0, 8014aea <__multadd+0x5a>
 8014ade:	4602      	mov	r2, r0
 8014ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8014b14 <__multadd+0x84>)
 8014ae2:	480d      	ldr	r0, [pc, #52]	@ (8014b18 <__multadd+0x88>)
 8014ae4:	21ba      	movs	r1, #186	@ 0xba
 8014ae6:	f000 fd65 	bl	80155b4 <__assert_func>
 8014aea:	6922      	ldr	r2, [r4, #16]
 8014aec:	3202      	adds	r2, #2
 8014aee:	f104 010c 	add.w	r1, r4, #12
 8014af2:	0092      	lsls	r2, r2, #2
 8014af4:	300c      	adds	r0, #12
 8014af6:	f7ff f8c4 	bl	8013c82 <memcpy>
 8014afa:	4621      	mov	r1, r4
 8014afc:	4638      	mov	r0, r7
 8014afe:	f7ff ffa5 	bl	8014a4c <_Bfree>
 8014b02:	4644      	mov	r4, r8
 8014b04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014b08:	3501      	adds	r5, #1
 8014b0a:	615e      	str	r6, [r3, #20]
 8014b0c:	6125      	str	r5, [r4, #16]
 8014b0e:	4620      	mov	r0, r4
 8014b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b14:	080d2d40 	.word	0x080d2d40
 8014b18:	080d2d51 	.word	0x080d2d51

08014b1c <__hi0bits>:
 8014b1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014b20:	4603      	mov	r3, r0
 8014b22:	bf36      	itet	cc
 8014b24:	0403      	lslcc	r3, r0, #16
 8014b26:	2000      	movcs	r0, #0
 8014b28:	2010      	movcc	r0, #16
 8014b2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014b2e:	bf3c      	itt	cc
 8014b30:	021b      	lslcc	r3, r3, #8
 8014b32:	3008      	addcc	r0, #8
 8014b34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014b38:	bf3c      	itt	cc
 8014b3a:	011b      	lslcc	r3, r3, #4
 8014b3c:	3004      	addcc	r0, #4
 8014b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014b42:	bf3c      	itt	cc
 8014b44:	009b      	lslcc	r3, r3, #2
 8014b46:	3002      	addcc	r0, #2
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	db05      	blt.n	8014b58 <__hi0bits+0x3c>
 8014b4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014b50:	f100 0001 	add.w	r0, r0, #1
 8014b54:	bf08      	it	eq
 8014b56:	2020      	moveq	r0, #32
 8014b58:	4770      	bx	lr

08014b5a <__lo0bits>:
 8014b5a:	6803      	ldr	r3, [r0, #0]
 8014b5c:	4602      	mov	r2, r0
 8014b5e:	f013 0007 	ands.w	r0, r3, #7
 8014b62:	d00b      	beq.n	8014b7c <__lo0bits+0x22>
 8014b64:	07d9      	lsls	r1, r3, #31
 8014b66:	d421      	bmi.n	8014bac <__lo0bits+0x52>
 8014b68:	0798      	lsls	r0, r3, #30
 8014b6a:	bf49      	itett	mi
 8014b6c:	085b      	lsrmi	r3, r3, #1
 8014b6e:	089b      	lsrpl	r3, r3, #2
 8014b70:	2001      	movmi	r0, #1
 8014b72:	6013      	strmi	r3, [r2, #0]
 8014b74:	bf5c      	itt	pl
 8014b76:	6013      	strpl	r3, [r2, #0]
 8014b78:	2002      	movpl	r0, #2
 8014b7a:	4770      	bx	lr
 8014b7c:	b299      	uxth	r1, r3
 8014b7e:	b909      	cbnz	r1, 8014b84 <__lo0bits+0x2a>
 8014b80:	0c1b      	lsrs	r3, r3, #16
 8014b82:	2010      	movs	r0, #16
 8014b84:	b2d9      	uxtb	r1, r3
 8014b86:	b909      	cbnz	r1, 8014b8c <__lo0bits+0x32>
 8014b88:	3008      	adds	r0, #8
 8014b8a:	0a1b      	lsrs	r3, r3, #8
 8014b8c:	0719      	lsls	r1, r3, #28
 8014b8e:	bf04      	itt	eq
 8014b90:	091b      	lsreq	r3, r3, #4
 8014b92:	3004      	addeq	r0, #4
 8014b94:	0799      	lsls	r1, r3, #30
 8014b96:	bf04      	itt	eq
 8014b98:	089b      	lsreq	r3, r3, #2
 8014b9a:	3002      	addeq	r0, #2
 8014b9c:	07d9      	lsls	r1, r3, #31
 8014b9e:	d403      	bmi.n	8014ba8 <__lo0bits+0x4e>
 8014ba0:	085b      	lsrs	r3, r3, #1
 8014ba2:	f100 0001 	add.w	r0, r0, #1
 8014ba6:	d003      	beq.n	8014bb0 <__lo0bits+0x56>
 8014ba8:	6013      	str	r3, [r2, #0]
 8014baa:	4770      	bx	lr
 8014bac:	2000      	movs	r0, #0
 8014bae:	4770      	bx	lr
 8014bb0:	2020      	movs	r0, #32
 8014bb2:	4770      	bx	lr

08014bb4 <__i2b>:
 8014bb4:	b510      	push	{r4, lr}
 8014bb6:	460c      	mov	r4, r1
 8014bb8:	2101      	movs	r1, #1
 8014bba:	f7ff ff07 	bl	80149cc <_Balloc>
 8014bbe:	4602      	mov	r2, r0
 8014bc0:	b928      	cbnz	r0, 8014bce <__i2b+0x1a>
 8014bc2:	4b05      	ldr	r3, [pc, #20]	@ (8014bd8 <__i2b+0x24>)
 8014bc4:	4805      	ldr	r0, [pc, #20]	@ (8014bdc <__i2b+0x28>)
 8014bc6:	f240 1145 	movw	r1, #325	@ 0x145
 8014bca:	f000 fcf3 	bl	80155b4 <__assert_func>
 8014bce:	2301      	movs	r3, #1
 8014bd0:	6144      	str	r4, [r0, #20]
 8014bd2:	6103      	str	r3, [r0, #16]
 8014bd4:	bd10      	pop	{r4, pc}
 8014bd6:	bf00      	nop
 8014bd8:	080d2d40 	.word	0x080d2d40
 8014bdc:	080d2d51 	.word	0x080d2d51

08014be0 <__multiply>:
 8014be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014be4:	4614      	mov	r4, r2
 8014be6:	690a      	ldr	r2, [r1, #16]
 8014be8:	6923      	ldr	r3, [r4, #16]
 8014bea:	429a      	cmp	r2, r3
 8014bec:	bfa8      	it	ge
 8014bee:	4623      	movge	r3, r4
 8014bf0:	460f      	mov	r7, r1
 8014bf2:	bfa4      	itt	ge
 8014bf4:	460c      	movge	r4, r1
 8014bf6:	461f      	movge	r7, r3
 8014bf8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014bfc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014c00:	68a3      	ldr	r3, [r4, #8]
 8014c02:	6861      	ldr	r1, [r4, #4]
 8014c04:	eb0a 0609 	add.w	r6, sl, r9
 8014c08:	42b3      	cmp	r3, r6
 8014c0a:	b085      	sub	sp, #20
 8014c0c:	bfb8      	it	lt
 8014c0e:	3101      	addlt	r1, #1
 8014c10:	f7ff fedc 	bl	80149cc <_Balloc>
 8014c14:	b930      	cbnz	r0, 8014c24 <__multiply+0x44>
 8014c16:	4602      	mov	r2, r0
 8014c18:	4b44      	ldr	r3, [pc, #272]	@ (8014d2c <__multiply+0x14c>)
 8014c1a:	4845      	ldr	r0, [pc, #276]	@ (8014d30 <__multiply+0x150>)
 8014c1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014c20:	f000 fcc8 	bl	80155b4 <__assert_func>
 8014c24:	f100 0514 	add.w	r5, r0, #20
 8014c28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014c2c:	462b      	mov	r3, r5
 8014c2e:	2200      	movs	r2, #0
 8014c30:	4543      	cmp	r3, r8
 8014c32:	d321      	bcc.n	8014c78 <__multiply+0x98>
 8014c34:	f107 0114 	add.w	r1, r7, #20
 8014c38:	f104 0214 	add.w	r2, r4, #20
 8014c3c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014c40:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014c44:	9302      	str	r3, [sp, #8]
 8014c46:	1b13      	subs	r3, r2, r4
 8014c48:	3b15      	subs	r3, #21
 8014c4a:	f023 0303 	bic.w	r3, r3, #3
 8014c4e:	3304      	adds	r3, #4
 8014c50:	f104 0715 	add.w	r7, r4, #21
 8014c54:	42ba      	cmp	r2, r7
 8014c56:	bf38      	it	cc
 8014c58:	2304      	movcc	r3, #4
 8014c5a:	9301      	str	r3, [sp, #4]
 8014c5c:	9b02      	ldr	r3, [sp, #8]
 8014c5e:	9103      	str	r1, [sp, #12]
 8014c60:	428b      	cmp	r3, r1
 8014c62:	d80c      	bhi.n	8014c7e <__multiply+0x9e>
 8014c64:	2e00      	cmp	r6, #0
 8014c66:	dd03      	ble.n	8014c70 <__multiply+0x90>
 8014c68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d05b      	beq.n	8014d28 <__multiply+0x148>
 8014c70:	6106      	str	r6, [r0, #16]
 8014c72:	b005      	add	sp, #20
 8014c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c78:	f843 2b04 	str.w	r2, [r3], #4
 8014c7c:	e7d8      	b.n	8014c30 <__multiply+0x50>
 8014c7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8014c82:	f1ba 0f00 	cmp.w	sl, #0
 8014c86:	d024      	beq.n	8014cd2 <__multiply+0xf2>
 8014c88:	f104 0e14 	add.w	lr, r4, #20
 8014c8c:	46a9      	mov	r9, r5
 8014c8e:	f04f 0c00 	mov.w	ip, #0
 8014c92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014c96:	f8d9 3000 	ldr.w	r3, [r9]
 8014c9a:	fa1f fb87 	uxth.w	fp, r7
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	fb0a 330b 	mla	r3, sl, fp, r3
 8014ca4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014ca8:	f8d9 7000 	ldr.w	r7, [r9]
 8014cac:	4463      	add	r3, ip
 8014cae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014cb2:	fb0a c70b 	mla	r7, sl, fp, ip
 8014cb6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014cba:	b29b      	uxth	r3, r3
 8014cbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014cc0:	4572      	cmp	r2, lr
 8014cc2:	f849 3b04 	str.w	r3, [r9], #4
 8014cc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014cca:	d8e2      	bhi.n	8014c92 <__multiply+0xb2>
 8014ccc:	9b01      	ldr	r3, [sp, #4]
 8014cce:	f845 c003 	str.w	ip, [r5, r3]
 8014cd2:	9b03      	ldr	r3, [sp, #12]
 8014cd4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014cd8:	3104      	adds	r1, #4
 8014cda:	f1b9 0f00 	cmp.w	r9, #0
 8014cde:	d021      	beq.n	8014d24 <__multiply+0x144>
 8014ce0:	682b      	ldr	r3, [r5, #0]
 8014ce2:	f104 0c14 	add.w	ip, r4, #20
 8014ce6:	46ae      	mov	lr, r5
 8014ce8:	f04f 0a00 	mov.w	sl, #0
 8014cec:	f8bc b000 	ldrh.w	fp, [ip]
 8014cf0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014cf4:	fb09 770b 	mla	r7, r9, fp, r7
 8014cf8:	4457      	add	r7, sl
 8014cfa:	b29b      	uxth	r3, r3
 8014cfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014d00:	f84e 3b04 	str.w	r3, [lr], #4
 8014d04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014d08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014d0c:	f8be 3000 	ldrh.w	r3, [lr]
 8014d10:	fb09 330a 	mla	r3, r9, sl, r3
 8014d14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014d18:	4562      	cmp	r2, ip
 8014d1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014d1e:	d8e5      	bhi.n	8014cec <__multiply+0x10c>
 8014d20:	9f01      	ldr	r7, [sp, #4]
 8014d22:	51eb      	str	r3, [r5, r7]
 8014d24:	3504      	adds	r5, #4
 8014d26:	e799      	b.n	8014c5c <__multiply+0x7c>
 8014d28:	3e01      	subs	r6, #1
 8014d2a:	e79b      	b.n	8014c64 <__multiply+0x84>
 8014d2c:	080d2d40 	.word	0x080d2d40
 8014d30:	080d2d51 	.word	0x080d2d51

08014d34 <__pow5mult>:
 8014d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d38:	4615      	mov	r5, r2
 8014d3a:	f012 0203 	ands.w	r2, r2, #3
 8014d3e:	4607      	mov	r7, r0
 8014d40:	460e      	mov	r6, r1
 8014d42:	d007      	beq.n	8014d54 <__pow5mult+0x20>
 8014d44:	4c25      	ldr	r4, [pc, #148]	@ (8014ddc <__pow5mult+0xa8>)
 8014d46:	3a01      	subs	r2, #1
 8014d48:	2300      	movs	r3, #0
 8014d4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014d4e:	f7ff fe9f 	bl	8014a90 <__multadd>
 8014d52:	4606      	mov	r6, r0
 8014d54:	10ad      	asrs	r5, r5, #2
 8014d56:	d03d      	beq.n	8014dd4 <__pow5mult+0xa0>
 8014d58:	69fc      	ldr	r4, [r7, #28]
 8014d5a:	b97c      	cbnz	r4, 8014d7c <__pow5mult+0x48>
 8014d5c:	2010      	movs	r0, #16
 8014d5e:	f7fd ffe9 	bl	8012d34 <malloc>
 8014d62:	4602      	mov	r2, r0
 8014d64:	61f8      	str	r0, [r7, #28]
 8014d66:	b928      	cbnz	r0, 8014d74 <__pow5mult+0x40>
 8014d68:	4b1d      	ldr	r3, [pc, #116]	@ (8014de0 <__pow5mult+0xac>)
 8014d6a:	481e      	ldr	r0, [pc, #120]	@ (8014de4 <__pow5mult+0xb0>)
 8014d6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014d70:	f000 fc20 	bl	80155b4 <__assert_func>
 8014d74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014d78:	6004      	str	r4, [r0, #0]
 8014d7a:	60c4      	str	r4, [r0, #12]
 8014d7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014d80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014d84:	b94c      	cbnz	r4, 8014d9a <__pow5mult+0x66>
 8014d86:	f240 2171 	movw	r1, #625	@ 0x271
 8014d8a:	4638      	mov	r0, r7
 8014d8c:	f7ff ff12 	bl	8014bb4 <__i2b>
 8014d90:	2300      	movs	r3, #0
 8014d92:	f8c8 0008 	str.w	r0, [r8, #8]
 8014d96:	4604      	mov	r4, r0
 8014d98:	6003      	str	r3, [r0, #0]
 8014d9a:	f04f 0900 	mov.w	r9, #0
 8014d9e:	07eb      	lsls	r3, r5, #31
 8014da0:	d50a      	bpl.n	8014db8 <__pow5mult+0x84>
 8014da2:	4631      	mov	r1, r6
 8014da4:	4622      	mov	r2, r4
 8014da6:	4638      	mov	r0, r7
 8014da8:	f7ff ff1a 	bl	8014be0 <__multiply>
 8014dac:	4631      	mov	r1, r6
 8014dae:	4680      	mov	r8, r0
 8014db0:	4638      	mov	r0, r7
 8014db2:	f7ff fe4b 	bl	8014a4c <_Bfree>
 8014db6:	4646      	mov	r6, r8
 8014db8:	106d      	asrs	r5, r5, #1
 8014dba:	d00b      	beq.n	8014dd4 <__pow5mult+0xa0>
 8014dbc:	6820      	ldr	r0, [r4, #0]
 8014dbe:	b938      	cbnz	r0, 8014dd0 <__pow5mult+0x9c>
 8014dc0:	4622      	mov	r2, r4
 8014dc2:	4621      	mov	r1, r4
 8014dc4:	4638      	mov	r0, r7
 8014dc6:	f7ff ff0b 	bl	8014be0 <__multiply>
 8014dca:	6020      	str	r0, [r4, #0]
 8014dcc:	f8c0 9000 	str.w	r9, [r0]
 8014dd0:	4604      	mov	r4, r0
 8014dd2:	e7e4      	b.n	8014d9e <__pow5mult+0x6a>
 8014dd4:	4630      	mov	r0, r6
 8014dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014dda:	bf00      	nop
 8014ddc:	080d2dac 	.word	0x080d2dac
 8014de0:	080d2cd1 	.word	0x080d2cd1
 8014de4:	080d2d51 	.word	0x080d2d51

08014de8 <__lshift>:
 8014de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014dec:	460c      	mov	r4, r1
 8014dee:	6849      	ldr	r1, [r1, #4]
 8014df0:	6923      	ldr	r3, [r4, #16]
 8014df2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014df6:	68a3      	ldr	r3, [r4, #8]
 8014df8:	4607      	mov	r7, r0
 8014dfa:	4691      	mov	r9, r2
 8014dfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014e00:	f108 0601 	add.w	r6, r8, #1
 8014e04:	42b3      	cmp	r3, r6
 8014e06:	db0b      	blt.n	8014e20 <__lshift+0x38>
 8014e08:	4638      	mov	r0, r7
 8014e0a:	f7ff fddf 	bl	80149cc <_Balloc>
 8014e0e:	4605      	mov	r5, r0
 8014e10:	b948      	cbnz	r0, 8014e26 <__lshift+0x3e>
 8014e12:	4602      	mov	r2, r0
 8014e14:	4b28      	ldr	r3, [pc, #160]	@ (8014eb8 <__lshift+0xd0>)
 8014e16:	4829      	ldr	r0, [pc, #164]	@ (8014ebc <__lshift+0xd4>)
 8014e18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014e1c:	f000 fbca 	bl	80155b4 <__assert_func>
 8014e20:	3101      	adds	r1, #1
 8014e22:	005b      	lsls	r3, r3, #1
 8014e24:	e7ee      	b.n	8014e04 <__lshift+0x1c>
 8014e26:	2300      	movs	r3, #0
 8014e28:	f100 0114 	add.w	r1, r0, #20
 8014e2c:	f100 0210 	add.w	r2, r0, #16
 8014e30:	4618      	mov	r0, r3
 8014e32:	4553      	cmp	r3, sl
 8014e34:	db33      	blt.n	8014e9e <__lshift+0xb6>
 8014e36:	6920      	ldr	r0, [r4, #16]
 8014e38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014e3c:	f104 0314 	add.w	r3, r4, #20
 8014e40:	f019 091f 	ands.w	r9, r9, #31
 8014e44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014e48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014e4c:	d02b      	beq.n	8014ea6 <__lshift+0xbe>
 8014e4e:	f1c9 0e20 	rsb	lr, r9, #32
 8014e52:	468a      	mov	sl, r1
 8014e54:	2200      	movs	r2, #0
 8014e56:	6818      	ldr	r0, [r3, #0]
 8014e58:	fa00 f009 	lsl.w	r0, r0, r9
 8014e5c:	4310      	orrs	r0, r2
 8014e5e:	f84a 0b04 	str.w	r0, [sl], #4
 8014e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e66:	459c      	cmp	ip, r3
 8014e68:	fa22 f20e 	lsr.w	r2, r2, lr
 8014e6c:	d8f3      	bhi.n	8014e56 <__lshift+0x6e>
 8014e6e:	ebac 0304 	sub.w	r3, ip, r4
 8014e72:	3b15      	subs	r3, #21
 8014e74:	f023 0303 	bic.w	r3, r3, #3
 8014e78:	3304      	adds	r3, #4
 8014e7a:	f104 0015 	add.w	r0, r4, #21
 8014e7e:	4584      	cmp	ip, r0
 8014e80:	bf38      	it	cc
 8014e82:	2304      	movcc	r3, #4
 8014e84:	50ca      	str	r2, [r1, r3]
 8014e86:	b10a      	cbz	r2, 8014e8c <__lshift+0xa4>
 8014e88:	f108 0602 	add.w	r6, r8, #2
 8014e8c:	3e01      	subs	r6, #1
 8014e8e:	4638      	mov	r0, r7
 8014e90:	612e      	str	r6, [r5, #16]
 8014e92:	4621      	mov	r1, r4
 8014e94:	f7ff fdda 	bl	8014a4c <_Bfree>
 8014e98:	4628      	mov	r0, r5
 8014e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	e7c5      	b.n	8014e32 <__lshift+0x4a>
 8014ea6:	3904      	subs	r1, #4
 8014ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014eac:	f841 2f04 	str.w	r2, [r1, #4]!
 8014eb0:	459c      	cmp	ip, r3
 8014eb2:	d8f9      	bhi.n	8014ea8 <__lshift+0xc0>
 8014eb4:	e7ea      	b.n	8014e8c <__lshift+0xa4>
 8014eb6:	bf00      	nop
 8014eb8:	080d2d40 	.word	0x080d2d40
 8014ebc:	080d2d51 	.word	0x080d2d51

08014ec0 <__mcmp>:
 8014ec0:	690a      	ldr	r2, [r1, #16]
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	6900      	ldr	r0, [r0, #16]
 8014ec6:	1a80      	subs	r0, r0, r2
 8014ec8:	b530      	push	{r4, r5, lr}
 8014eca:	d10e      	bne.n	8014eea <__mcmp+0x2a>
 8014ecc:	3314      	adds	r3, #20
 8014ece:	3114      	adds	r1, #20
 8014ed0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014ed4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014ed8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014edc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014ee0:	4295      	cmp	r5, r2
 8014ee2:	d003      	beq.n	8014eec <__mcmp+0x2c>
 8014ee4:	d205      	bcs.n	8014ef2 <__mcmp+0x32>
 8014ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8014eea:	bd30      	pop	{r4, r5, pc}
 8014eec:	42a3      	cmp	r3, r4
 8014eee:	d3f3      	bcc.n	8014ed8 <__mcmp+0x18>
 8014ef0:	e7fb      	b.n	8014eea <__mcmp+0x2a>
 8014ef2:	2001      	movs	r0, #1
 8014ef4:	e7f9      	b.n	8014eea <__mcmp+0x2a>
	...

08014ef8 <__mdiff>:
 8014ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014efc:	4689      	mov	r9, r1
 8014efe:	4606      	mov	r6, r0
 8014f00:	4611      	mov	r1, r2
 8014f02:	4648      	mov	r0, r9
 8014f04:	4614      	mov	r4, r2
 8014f06:	f7ff ffdb 	bl	8014ec0 <__mcmp>
 8014f0a:	1e05      	subs	r5, r0, #0
 8014f0c:	d112      	bne.n	8014f34 <__mdiff+0x3c>
 8014f0e:	4629      	mov	r1, r5
 8014f10:	4630      	mov	r0, r6
 8014f12:	f7ff fd5b 	bl	80149cc <_Balloc>
 8014f16:	4602      	mov	r2, r0
 8014f18:	b928      	cbnz	r0, 8014f26 <__mdiff+0x2e>
 8014f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8015018 <__mdiff+0x120>)
 8014f1c:	f240 2137 	movw	r1, #567	@ 0x237
 8014f20:	483e      	ldr	r0, [pc, #248]	@ (801501c <__mdiff+0x124>)
 8014f22:	f000 fb47 	bl	80155b4 <__assert_func>
 8014f26:	2301      	movs	r3, #1
 8014f28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014f2c:	4610      	mov	r0, r2
 8014f2e:	b003      	add	sp, #12
 8014f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f34:	bfbc      	itt	lt
 8014f36:	464b      	movlt	r3, r9
 8014f38:	46a1      	movlt	r9, r4
 8014f3a:	4630      	mov	r0, r6
 8014f3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014f40:	bfba      	itte	lt
 8014f42:	461c      	movlt	r4, r3
 8014f44:	2501      	movlt	r5, #1
 8014f46:	2500      	movge	r5, #0
 8014f48:	f7ff fd40 	bl	80149cc <_Balloc>
 8014f4c:	4602      	mov	r2, r0
 8014f4e:	b918      	cbnz	r0, 8014f58 <__mdiff+0x60>
 8014f50:	4b31      	ldr	r3, [pc, #196]	@ (8015018 <__mdiff+0x120>)
 8014f52:	f240 2145 	movw	r1, #581	@ 0x245
 8014f56:	e7e3      	b.n	8014f20 <__mdiff+0x28>
 8014f58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014f5c:	6926      	ldr	r6, [r4, #16]
 8014f5e:	60c5      	str	r5, [r0, #12]
 8014f60:	f109 0310 	add.w	r3, r9, #16
 8014f64:	f109 0514 	add.w	r5, r9, #20
 8014f68:	f104 0e14 	add.w	lr, r4, #20
 8014f6c:	f100 0b14 	add.w	fp, r0, #20
 8014f70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014f74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014f78:	9301      	str	r3, [sp, #4]
 8014f7a:	46d9      	mov	r9, fp
 8014f7c:	f04f 0c00 	mov.w	ip, #0
 8014f80:	9b01      	ldr	r3, [sp, #4]
 8014f82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014f86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014f8a:	9301      	str	r3, [sp, #4]
 8014f8c:	fa1f f38a 	uxth.w	r3, sl
 8014f90:	4619      	mov	r1, r3
 8014f92:	b283      	uxth	r3, r0
 8014f94:	1acb      	subs	r3, r1, r3
 8014f96:	0c00      	lsrs	r0, r0, #16
 8014f98:	4463      	add	r3, ip
 8014f9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014f9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014fa2:	b29b      	uxth	r3, r3
 8014fa4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014fa8:	4576      	cmp	r6, lr
 8014faa:	f849 3b04 	str.w	r3, [r9], #4
 8014fae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014fb2:	d8e5      	bhi.n	8014f80 <__mdiff+0x88>
 8014fb4:	1b33      	subs	r3, r6, r4
 8014fb6:	3b15      	subs	r3, #21
 8014fb8:	f023 0303 	bic.w	r3, r3, #3
 8014fbc:	3415      	adds	r4, #21
 8014fbe:	3304      	adds	r3, #4
 8014fc0:	42a6      	cmp	r6, r4
 8014fc2:	bf38      	it	cc
 8014fc4:	2304      	movcc	r3, #4
 8014fc6:	441d      	add	r5, r3
 8014fc8:	445b      	add	r3, fp
 8014fca:	461e      	mov	r6, r3
 8014fcc:	462c      	mov	r4, r5
 8014fce:	4544      	cmp	r4, r8
 8014fd0:	d30e      	bcc.n	8014ff0 <__mdiff+0xf8>
 8014fd2:	f108 0103 	add.w	r1, r8, #3
 8014fd6:	1b49      	subs	r1, r1, r5
 8014fd8:	f021 0103 	bic.w	r1, r1, #3
 8014fdc:	3d03      	subs	r5, #3
 8014fde:	45a8      	cmp	r8, r5
 8014fe0:	bf38      	it	cc
 8014fe2:	2100      	movcc	r1, #0
 8014fe4:	440b      	add	r3, r1
 8014fe6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014fea:	b191      	cbz	r1, 8015012 <__mdiff+0x11a>
 8014fec:	6117      	str	r7, [r2, #16]
 8014fee:	e79d      	b.n	8014f2c <__mdiff+0x34>
 8014ff0:	f854 1b04 	ldr.w	r1, [r4], #4
 8014ff4:	46e6      	mov	lr, ip
 8014ff6:	0c08      	lsrs	r0, r1, #16
 8014ff8:	fa1c fc81 	uxtah	ip, ip, r1
 8014ffc:	4471      	add	r1, lr
 8014ffe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015002:	b289      	uxth	r1, r1
 8015004:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015008:	f846 1b04 	str.w	r1, [r6], #4
 801500c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015010:	e7dd      	b.n	8014fce <__mdiff+0xd6>
 8015012:	3f01      	subs	r7, #1
 8015014:	e7e7      	b.n	8014fe6 <__mdiff+0xee>
 8015016:	bf00      	nop
 8015018:	080d2d40 	.word	0x080d2d40
 801501c:	080d2d51 	.word	0x080d2d51

08015020 <__d2b>:
 8015020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015024:	460f      	mov	r7, r1
 8015026:	2101      	movs	r1, #1
 8015028:	ec59 8b10 	vmov	r8, r9, d0
 801502c:	4616      	mov	r6, r2
 801502e:	f7ff fccd 	bl	80149cc <_Balloc>
 8015032:	4604      	mov	r4, r0
 8015034:	b930      	cbnz	r0, 8015044 <__d2b+0x24>
 8015036:	4602      	mov	r2, r0
 8015038:	4b23      	ldr	r3, [pc, #140]	@ (80150c8 <__d2b+0xa8>)
 801503a:	4824      	ldr	r0, [pc, #144]	@ (80150cc <__d2b+0xac>)
 801503c:	f240 310f 	movw	r1, #783	@ 0x30f
 8015040:	f000 fab8 	bl	80155b4 <__assert_func>
 8015044:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015048:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801504c:	b10d      	cbz	r5, 8015052 <__d2b+0x32>
 801504e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015052:	9301      	str	r3, [sp, #4]
 8015054:	f1b8 0300 	subs.w	r3, r8, #0
 8015058:	d023      	beq.n	80150a2 <__d2b+0x82>
 801505a:	4668      	mov	r0, sp
 801505c:	9300      	str	r3, [sp, #0]
 801505e:	f7ff fd7c 	bl	8014b5a <__lo0bits>
 8015062:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015066:	b1d0      	cbz	r0, 801509e <__d2b+0x7e>
 8015068:	f1c0 0320 	rsb	r3, r0, #32
 801506c:	fa02 f303 	lsl.w	r3, r2, r3
 8015070:	430b      	orrs	r3, r1
 8015072:	40c2      	lsrs	r2, r0
 8015074:	6163      	str	r3, [r4, #20]
 8015076:	9201      	str	r2, [sp, #4]
 8015078:	9b01      	ldr	r3, [sp, #4]
 801507a:	61a3      	str	r3, [r4, #24]
 801507c:	2b00      	cmp	r3, #0
 801507e:	bf0c      	ite	eq
 8015080:	2201      	moveq	r2, #1
 8015082:	2202      	movne	r2, #2
 8015084:	6122      	str	r2, [r4, #16]
 8015086:	b1a5      	cbz	r5, 80150b2 <__d2b+0x92>
 8015088:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801508c:	4405      	add	r5, r0
 801508e:	603d      	str	r5, [r7, #0]
 8015090:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015094:	6030      	str	r0, [r6, #0]
 8015096:	4620      	mov	r0, r4
 8015098:	b003      	add	sp, #12
 801509a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801509e:	6161      	str	r1, [r4, #20]
 80150a0:	e7ea      	b.n	8015078 <__d2b+0x58>
 80150a2:	a801      	add	r0, sp, #4
 80150a4:	f7ff fd59 	bl	8014b5a <__lo0bits>
 80150a8:	9b01      	ldr	r3, [sp, #4]
 80150aa:	6163      	str	r3, [r4, #20]
 80150ac:	3020      	adds	r0, #32
 80150ae:	2201      	movs	r2, #1
 80150b0:	e7e8      	b.n	8015084 <__d2b+0x64>
 80150b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80150b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80150ba:	6038      	str	r0, [r7, #0]
 80150bc:	6918      	ldr	r0, [r3, #16]
 80150be:	f7ff fd2d 	bl	8014b1c <__hi0bits>
 80150c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80150c6:	e7e5      	b.n	8015094 <__d2b+0x74>
 80150c8:	080d2d40 	.word	0x080d2d40
 80150cc:	080d2d51 	.word	0x080d2d51

080150d0 <__sfputc_r>:
 80150d0:	6893      	ldr	r3, [r2, #8]
 80150d2:	3b01      	subs	r3, #1
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	b410      	push	{r4}
 80150d8:	6093      	str	r3, [r2, #8]
 80150da:	da08      	bge.n	80150ee <__sfputc_r+0x1e>
 80150dc:	6994      	ldr	r4, [r2, #24]
 80150de:	42a3      	cmp	r3, r4
 80150e0:	db01      	blt.n	80150e6 <__sfputc_r+0x16>
 80150e2:	290a      	cmp	r1, #10
 80150e4:	d103      	bne.n	80150ee <__sfputc_r+0x1e>
 80150e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150ea:	f7fe bca6 	b.w	8013a3a <__swbuf_r>
 80150ee:	6813      	ldr	r3, [r2, #0]
 80150f0:	1c58      	adds	r0, r3, #1
 80150f2:	6010      	str	r0, [r2, #0]
 80150f4:	7019      	strb	r1, [r3, #0]
 80150f6:	4608      	mov	r0, r1
 80150f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150fc:	4770      	bx	lr

080150fe <__sfputs_r>:
 80150fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015100:	4606      	mov	r6, r0
 8015102:	460f      	mov	r7, r1
 8015104:	4614      	mov	r4, r2
 8015106:	18d5      	adds	r5, r2, r3
 8015108:	42ac      	cmp	r4, r5
 801510a:	d101      	bne.n	8015110 <__sfputs_r+0x12>
 801510c:	2000      	movs	r0, #0
 801510e:	e007      	b.n	8015120 <__sfputs_r+0x22>
 8015110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015114:	463a      	mov	r2, r7
 8015116:	4630      	mov	r0, r6
 8015118:	f7ff ffda 	bl	80150d0 <__sfputc_r>
 801511c:	1c43      	adds	r3, r0, #1
 801511e:	d1f3      	bne.n	8015108 <__sfputs_r+0xa>
 8015120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015124 <_vfiprintf_r>:
 8015124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015128:	460d      	mov	r5, r1
 801512a:	b09d      	sub	sp, #116	@ 0x74
 801512c:	4614      	mov	r4, r2
 801512e:	4698      	mov	r8, r3
 8015130:	4606      	mov	r6, r0
 8015132:	b118      	cbz	r0, 801513c <_vfiprintf_r+0x18>
 8015134:	6a03      	ldr	r3, [r0, #32]
 8015136:	b90b      	cbnz	r3, 801513c <_vfiprintf_r+0x18>
 8015138:	f7fe fb96 	bl	8013868 <__sinit>
 801513c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801513e:	07d9      	lsls	r1, r3, #31
 8015140:	d405      	bmi.n	801514e <_vfiprintf_r+0x2a>
 8015142:	89ab      	ldrh	r3, [r5, #12]
 8015144:	059a      	lsls	r2, r3, #22
 8015146:	d402      	bmi.n	801514e <_vfiprintf_r+0x2a>
 8015148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801514a:	f7fe fd98 	bl	8013c7e <__retarget_lock_acquire_recursive>
 801514e:	89ab      	ldrh	r3, [r5, #12]
 8015150:	071b      	lsls	r3, r3, #28
 8015152:	d501      	bpl.n	8015158 <_vfiprintf_r+0x34>
 8015154:	692b      	ldr	r3, [r5, #16]
 8015156:	b99b      	cbnz	r3, 8015180 <_vfiprintf_r+0x5c>
 8015158:	4629      	mov	r1, r5
 801515a:	4630      	mov	r0, r6
 801515c:	f7fe fcac 	bl	8013ab8 <__swsetup_r>
 8015160:	b170      	cbz	r0, 8015180 <_vfiprintf_r+0x5c>
 8015162:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015164:	07dc      	lsls	r4, r3, #31
 8015166:	d504      	bpl.n	8015172 <_vfiprintf_r+0x4e>
 8015168:	f04f 30ff 	mov.w	r0, #4294967295
 801516c:	b01d      	add	sp, #116	@ 0x74
 801516e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015172:	89ab      	ldrh	r3, [r5, #12]
 8015174:	0598      	lsls	r0, r3, #22
 8015176:	d4f7      	bmi.n	8015168 <_vfiprintf_r+0x44>
 8015178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801517a:	f7fe fd81 	bl	8013c80 <__retarget_lock_release_recursive>
 801517e:	e7f3      	b.n	8015168 <_vfiprintf_r+0x44>
 8015180:	2300      	movs	r3, #0
 8015182:	9309      	str	r3, [sp, #36]	@ 0x24
 8015184:	2320      	movs	r3, #32
 8015186:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801518a:	f8cd 800c 	str.w	r8, [sp, #12]
 801518e:	2330      	movs	r3, #48	@ 0x30
 8015190:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015340 <_vfiprintf_r+0x21c>
 8015194:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015198:	f04f 0901 	mov.w	r9, #1
 801519c:	4623      	mov	r3, r4
 801519e:	469a      	mov	sl, r3
 80151a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151a4:	b10a      	cbz	r2, 80151aa <_vfiprintf_r+0x86>
 80151a6:	2a25      	cmp	r2, #37	@ 0x25
 80151a8:	d1f9      	bne.n	801519e <_vfiprintf_r+0x7a>
 80151aa:	ebba 0b04 	subs.w	fp, sl, r4
 80151ae:	d00b      	beq.n	80151c8 <_vfiprintf_r+0xa4>
 80151b0:	465b      	mov	r3, fp
 80151b2:	4622      	mov	r2, r4
 80151b4:	4629      	mov	r1, r5
 80151b6:	4630      	mov	r0, r6
 80151b8:	f7ff ffa1 	bl	80150fe <__sfputs_r>
 80151bc:	3001      	adds	r0, #1
 80151be:	f000 80a7 	beq.w	8015310 <_vfiprintf_r+0x1ec>
 80151c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80151c4:	445a      	add	r2, fp
 80151c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80151c8:	f89a 3000 	ldrb.w	r3, [sl]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	f000 809f 	beq.w	8015310 <_vfiprintf_r+0x1ec>
 80151d2:	2300      	movs	r3, #0
 80151d4:	f04f 32ff 	mov.w	r2, #4294967295
 80151d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151dc:	f10a 0a01 	add.w	sl, sl, #1
 80151e0:	9304      	str	r3, [sp, #16]
 80151e2:	9307      	str	r3, [sp, #28]
 80151e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80151e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80151ea:	4654      	mov	r4, sl
 80151ec:	2205      	movs	r2, #5
 80151ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151f2:	4853      	ldr	r0, [pc, #332]	@ (8015340 <_vfiprintf_r+0x21c>)
 80151f4:	f7eb f86c 	bl	80002d0 <memchr>
 80151f8:	9a04      	ldr	r2, [sp, #16]
 80151fa:	b9d8      	cbnz	r0, 8015234 <_vfiprintf_r+0x110>
 80151fc:	06d1      	lsls	r1, r2, #27
 80151fe:	bf44      	itt	mi
 8015200:	2320      	movmi	r3, #32
 8015202:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015206:	0713      	lsls	r3, r2, #28
 8015208:	bf44      	itt	mi
 801520a:	232b      	movmi	r3, #43	@ 0x2b
 801520c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015210:	f89a 3000 	ldrb.w	r3, [sl]
 8015214:	2b2a      	cmp	r3, #42	@ 0x2a
 8015216:	d015      	beq.n	8015244 <_vfiprintf_r+0x120>
 8015218:	9a07      	ldr	r2, [sp, #28]
 801521a:	4654      	mov	r4, sl
 801521c:	2000      	movs	r0, #0
 801521e:	f04f 0c0a 	mov.w	ip, #10
 8015222:	4621      	mov	r1, r4
 8015224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015228:	3b30      	subs	r3, #48	@ 0x30
 801522a:	2b09      	cmp	r3, #9
 801522c:	d94b      	bls.n	80152c6 <_vfiprintf_r+0x1a2>
 801522e:	b1b0      	cbz	r0, 801525e <_vfiprintf_r+0x13a>
 8015230:	9207      	str	r2, [sp, #28]
 8015232:	e014      	b.n	801525e <_vfiprintf_r+0x13a>
 8015234:	eba0 0308 	sub.w	r3, r0, r8
 8015238:	fa09 f303 	lsl.w	r3, r9, r3
 801523c:	4313      	orrs	r3, r2
 801523e:	9304      	str	r3, [sp, #16]
 8015240:	46a2      	mov	sl, r4
 8015242:	e7d2      	b.n	80151ea <_vfiprintf_r+0xc6>
 8015244:	9b03      	ldr	r3, [sp, #12]
 8015246:	1d19      	adds	r1, r3, #4
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	9103      	str	r1, [sp, #12]
 801524c:	2b00      	cmp	r3, #0
 801524e:	bfbb      	ittet	lt
 8015250:	425b      	neglt	r3, r3
 8015252:	f042 0202 	orrlt.w	r2, r2, #2
 8015256:	9307      	strge	r3, [sp, #28]
 8015258:	9307      	strlt	r3, [sp, #28]
 801525a:	bfb8      	it	lt
 801525c:	9204      	strlt	r2, [sp, #16]
 801525e:	7823      	ldrb	r3, [r4, #0]
 8015260:	2b2e      	cmp	r3, #46	@ 0x2e
 8015262:	d10a      	bne.n	801527a <_vfiprintf_r+0x156>
 8015264:	7863      	ldrb	r3, [r4, #1]
 8015266:	2b2a      	cmp	r3, #42	@ 0x2a
 8015268:	d132      	bne.n	80152d0 <_vfiprintf_r+0x1ac>
 801526a:	9b03      	ldr	r3, [sp, #12]
 801526c:	1d1a      	adds	r2, r3, #4
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	9203      	str	r2, [sp, #12]
 8015272:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015276:	3402      	adds	r4, #2
 8015278:	9305      	str	r3, [sp, #20]
 801527a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015350 <_vfiprintf_r+0x22c>
 801527e:	7821      	ldrb	r1, [r4, #0]
 8015280:	2203      	movs	r2, #3
 8015282:	4650      	mov	r0, sl
 8015284:	f7eb f824 	bl	80002d0 <memchr>
 8015288:	b138      	cbz	r0, 801529a <_vfiprintf_r+0x176>
 801528a:	9b04      	ldr	r3, [sp, #16]
 801528c:	eba0 000a 	sub.w	r0, r0, sl
 8015290:	2240      	movs	r2, #64	@ 0x40
 8015292:	4082      	lsls	r2, r0
 8015294:	4313      	orrs	r3, r2
 8015296:	3401      	adds	r4, #1
 8015298:	9304      	str	r3, [sp, #16]
 801529a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801529e:	4829      	ldr	r0, [pc, #164]	@ (8015344 <_vfiprintf_r+0x220>)
 80152a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80152a4:	2206      	movs	r2, #6
 80152a6:	f7eb f813 	bl	80002d0 <memchr>
 80152aa:	2800      	cmp	r0, #0
 80152ac:	d03f      	beq.n	801532e <_vfiprintf_r+0x20a>
 80152ae:	4b26      	ldr	r3, [pc, #152]	@ (8015348 <_vfiprintf_r+0x224>)
 80152b0:	bb1b      	cbnz	r3, 80152fa <_vfiprintf_r+0x1d6>
 80152b2:	9b03      	ldr	r3, [sp, #12]
 80152b4:	3307      	adds	r3, #7
 80152b6:	f023 0307 	bic.w	r3, r3, #7
 80152ba:	3308      	adds	r3, #8
 80152bc:	9303      	str	r3, [sp, #12]
 80152be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152c0:	443b      	add	r3, r7
 80152c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80152c4:	e76a      	b.n	801519c <_vfiprintf_r+0x78>
 80152c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80152ca:	460c      	mov	r4, r1
 80152cc:	2001      	movs	r0, #1
 80152ce:	e7a8      	b.n	8015222 <_vfiprintf_r+0xfe>
 80152d0:	2300      	movs	r3, #0
 80152d2:	3401      	adds	r4, #1
 80152d4:	9305      	str	r3, [sp, #20]
 80152d6:	4619      	mov	r1, r3
 80152d8:	f04f 0c0a 	mov.w	ip, #10
 80152dc:	4620      	mov	r0, r4
 80152de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152e2:	3a30      	subs	r2, #48	@ 0x30
 80152e4:	2a09      	cmp	r2, #9
 80152e6:	d903      	bls.n	80152f0 <_vfiprintf_r+0x1cc>
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d0c6      	beq.n	801527a <_vfiprintf_r+0x156>
 80152ec:	9105      	str	r1, [sp, #20]
 80152ee:	e7c4      	b.n	801527a <_vfiprintf_r+0x156>
 80152f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80152f4:	4604      	mov	r4, r0
 80152f6:	2301      	movs	r3, #1
 80152f8:	e7f0      	b.n	80152dc <_vfiprintf_r+0x1b8>
 80152fa:	ab03      	add	r3, sp, #12
 80152fc:	9300      	str	r3, [sp, #0]
 80152fe:	462a      	mov	r2, r5
 8015300:	4b12      	ldr	r3, [pc, #72]	@ (801534c <_vfiprintf_r+0x228>)
 8015302:	a904      	add	r1, sp, #16
 8015304:	4630      	mov	r0, r6
 8015306:	f7fd fe6b 	bl	8012fe0 <_printf_float>
 801530a:	4607      	mov	r7, r0
 801530c:	1c78      	adds	r0, r7, #1
 801530e:	d1d6      	bne.n	80152be <_vfiprintf_r+0x19a>
 8015310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015312:	07d9      	lsls	r1, r3, #31
 8015314:	d405      	bmi.n	8015322 <_vfiprintf_r+0x1fe>
 8015316:	89ab      	ldrh	r3, [r5, #12]
 8015318:	059a      	lsls	r2, r3, #22
 801531a:	d402      	bmi.n	8015322 <_vfiprintf_r+0x1fe>
 801531c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801531e:	f7fe fcaf 	bl	8013c80 <__retarget_lock_release_recursive>
 8015322:	89ab      	ldrh	r3, [r5, #12]
 8015324:	065b      	lsls	r3, r3, #25
 8015326:	f53f af1f 	bmi.w	8015168 <_vfiprintf_r+0x44>
 801532a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801532c:	e71e      	b.n	801516c <_vfiprintf_r+0x48>
 801532e:	ab03      	add	r3, sp, #12
 8015330:	9300      	str	r3, [sp, #0]
 8015332:	462a      	mov	r2, r5
 8015334:	4b05      	ldr	r3, [pc, #20]	@ (801534c <_vfiprintf_r+0x228>)
 8015336:	a904      	add	r1, sp, #16
 8015338:	4630      	mov	r0, r6
 801533a:	f7fe f8e9 	bl	8013510 <_printf_i>
 801533e:	e7e4      	b.n	801530a <_vfiprintf_r+0x1e6>
 8015340:	080d2ea8 	.word	0x080d2ea8
 8015344:	080d2eb2 	.word	0x080d2eb2
 8015348:	08012fe1 	.word	0x08012fe1
 801534c:	080150ff 	.word	0x080150ff
 8015350:	080d2eae 	.word	0x080d2eae

08015354 <__sflush_r>:
 8015354:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801535c:	0716      	lsls	r6, r2, #28
 801535e:	4605      	mov	r5, r0
 8015360:	460c      	mov	r4, r1
 8015362:	d454      	bmi.n	801540e <__sflush_r+0xba>
 8015364:	684b      	ldr	r3, [r1, #4]
 8015366:	2b00      	cmp	r3, #0
 8015368:	dc02      	bgt.n	8015370 <__sflush_r+0x1c>
 801536a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801536c:	2b00      	cmp	r3, #0
 801536e:	dd48      	ble.n	8015402 <__sflush_r+0xae>
 8015370:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015372:	2e00      	cmp	r6, #0
 8015374:	d045      	beq.n	8015402 <__sflush_r+0xae>
 8015376:	2300      	movs	r3, #0
 8015378:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801537c:	682f      	ldr	r7, [r5, #0]
 801537e:	6a21      	ldr	r1, [r4, #32]
 8015380:	602b      	str	r3, [r5, #0]
 8015382:	d030      	beq.n	80153e6 <__sflush_r+0x92>
 8015384:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015386:	89a3      	ldrh	r3, [r4, #12]
 8015388:	0759      	lsls	r1, r3, #29
 801538a:	d505      	bpl.n	8015398 <__sflush_r+0x44>
 801538c:	6863      	ldr	r3, [r4, #4]
 801538e:	1ad2      	subs	r2, r2, r3
 8015390:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015392:	b10b      	cbz	r3, 8015398 <__sflush_r+0x44>
 8015394:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015396:	1ad2      	subs	r2, r2, r3
 8015398:	2300      	movs	r3, #0
 801539a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801539c:	6a21      	ldr	r1, [r4, #32]
 801539e:	4628      	mov	r0, r5
 80153a0:	47b0      	blx	r6
 80153a2:	1c43      	adds	r3, r0, #1
 80153a4:	89a3      	ldrh	r3, [r4, #12]
 80153a6:	d106      	bne.n	80153b6 <__sflush_r+0x62>
 80153a8:	6829      	ldr	r1, [r5, #0]
 80153aa:	291d      	cmp	r1, #29
 80153ac:	d82b      	bhi.n	8015406 <__sflush_r+0xb2>
 80153ae:	4a2a      	ldr	r2, [pc, #168]	@ (8015458 <__sflush_r+0x104>)
 80153b0:	410a      	asrs	r2, r1
 80153b2:	07d6      	lsls	r6, r2, #31
 80153b4:	d427      	bmi.n	8015406 <__sflush_r+0xb2>
 80153b6:	2200      	movs	r2, #0
 80153b8:	6062      	str	r2, [r4, #4]
 80153ba:	04d9      	lsls	r1, r3, #19
 80153bc:	6922      	ldr	r2, [r4, #16]
 80153be:	6022      	str	r2, [r4, #0]
 80153c0:	d504      	bpl.n	80153cc <__sflush_r+0x78>
 80153c2:	1c42      	adds	r2, r0, #1
 80153c4:	d101      	bne.n	80153ca <__sflush_r+0x76>
 80153c6:	682b      	ldr	r3, [r5, #0]
 80153c8:	b903      	cbnz	r3, 80153cc <__sflush_r+0x78>
 80153ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80153cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80153ce:	602f      	str	r7, [r5, #0]
 80153d0:	b1b9      	cbz	r1, 8015402 <__sflush_r+0xae>
 80153d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80153d6:	4299      	cmp	r1, r3
 80153d8:	d002      	beq.n	80153e0 <__sflush_r+0x8c>
 80153da:	4628      	mov	r0, r5
 80153dc:	f7ff faac 	bl	8014938 <_free_r>
 80153e0:	2300      	movs	r3, #0
 80153e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80153e4:	e00d      	b.n	8015402 <__sflush_r+0xae>
 80153e6:	2301      	movs	r3, #1
 80153e8:	4628      	mov	r0, r5
 80153ea:	47b0      	blx	r6
 80153ec:	4602      	mov	r2, r0
 80153ee:	1c50      	adds	r0, r2, #1
 80153f0:	d1c9      	bne.n	8015386 <__sflush_r+0x32>
 80153f2:	682b      	ldr	r3, [r5, #0]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d0c6      	beq.n	8015386 <__sflush_r+0x32>
 80153f8:	2b1d      	cmp	r3, #29
 80153fa:	d001      	beq.n	8015400 <__sflush_r+0xac>
 80153fc:	2b16      	cmp	r3, #22
 80153fe:	d11e      	bne.n	801543e <__sflush_r+0xea>
 8015400:	602f      	str	r7, [r5, #0]
 8015402:	2000      	movs	r0, #0
 8015404:	e022      	b.n	801544c <__sflush_r+0xf8>
 8015406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801540a:	b21b      	sxth	r3, r3
 801540c:	e01b      	b.n	8015446 <__sflush_r+0xf2>
 801540e:	690f      	ldr	r7, [r1, #16]
 8015410:	2f00      	cmp	r7, #0
 8015412:	d0f6      	beq.n	8015402 <__sflush_r+0xae>
 8015414:	0793      	lsls	r3, r2, #30
 8015416:	680e      	ldr	r6, [r1, #0]
 8015418:	bf08      	it	eq
 801541a:	694b      	ldreq	r3, [r1, #20]
 801541c:	600f      	str	r7, [r1, #0]
 801541e:	bf18      	it	ne
 8015420:	2300      	movne	r3, #0
 8015422:	eba6 0807 	sub.w	r8, r6, r7
 8015426:	608b      	str	r3, [r1, #8]
 8015428:	f1b8 0f00 	cmp.w	r8, #0
 801542c:	dde9      	ble.n	8015402 <__sflush_r+0xae>
 801542e:	6a21      	ldr	r1, [r4, #32]
 8015430:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015432:	4643      	mov	r3, r8
 8015434:	463a      	mov	r2, r7
 8015436:	4628      	mov	r0, r5
 8015438:	47b0      	blx	r6
 801543a:	2800      	cmp	r0, #0
 801543c:	dc08      	bgt.n	8015450 <__sflush_r+0xfc>
 801543e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015446:	81a3      	strh	r3, [r4, #12]
 8015448:	f04f 30ff 	mov.w	r0, #4294967295
 801544c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015450:	4407      	add	r7, r0
 8015452:	eba8 0800 	sub.w	r8, r8, r0
 8015456:	e7e7      	b.n	8015428 <__sflush_r+0xd4>
 8015458:	dfbffffe 	.word	0xdfbffffe

0801545c <_fflush_r>:
 801545c:	b538      	push	{r3, r4, r5, lr}
 801545e:	690b      	ldr	r3, [r1, #16]
 8015460:	4605      	mov	r5, r0
 8015462:	460c      	mov	r4, r1
 8015464:	b913      	cbnz	r3, 801546c <_fflush_r+0x10>
 8015466:	2500      	movs	r5, #0
 8015468:	4628      	mov	r0, r5
 801546a:	bd38      	pop	{r3, r4, r5, pc}
 801546c:	b118      	cbz	r0, 8015476 <_fflush_r+0x1a>
 801546e:	6a03      	ldr	r3, [r0, #32]
 8015470:	b90b      	cbnz	r3, 8015476 <_fflush_r+0x1a>
 8015472:	f7fe f9f9 	bl	8013868 <__sinit>
 8015476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d0f3      	beq.n	8015466 <_fflush_r+0xa>
 801547e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015480:	07d0      	lsls	r0, r2, #31
 8015482:	d404      	bmi.n	801548e <_fflush_r+0x32>
 8015484:	0599      	lsls	r1, r3, #22
 8015486:	d402      	bmi.n	801548e <_fflush_r+0x32>
 8015488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801548a:	f7fe fbf8 	bl	8013c7e <__retarget_lock_acquire_recursive>
 801548e:	4628      	mov	r0, r5
 8015490:	4621      	mov	r1, r4
 8015492:	f7ff ff5f 	bl	8015354 <__sflush_r>
 8015496:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015498:	07da      	lsls	r2, r3, #31
 801549a:	4605      	mov	r5, r0
 801549c:	d4e4      	bmi.n	8015468 <_fflush_r+0xc>
 801549e:	89a3      	ldrh	r3, [r4, #12]
 80154a0:	059b      	lsls	r3, r3, #22
 80154a2:	d4e1      	bmi.n	8015468 <_fflush_r+0xc>
 80154a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80154a6:	f7fe fbeb 	bl	8013c80 <__retarget_lock_release_recursive>
 80154aa:	e7dd      	b.n	8015468 <_fflush_r+0xc>

080154ac <__swhatbuf_r>:
 80154ac:	b570      	push	{r4, r5, r6, lr}
 80154ae:	460c      	mov	r4, r1
 80154b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154b4:	2900      	cmp	r1, #0
 80154b6:	b096      	sub	sp, #88	@ 0x58
 80154b8:	4615      	mov	r5, r2
 80154ba:	461e      	mov	r6, r3
 80154bc:	da0d      	bge.n	80154da <__swhatbuf_r+0x2e>
 80154be:	89a3      	ldrh	r3, [r4, #12]
 80154c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80154c4:	f04f 0100 	mov.w	r1, #0
 80154c8:	bf14      	ite	ne
 80154ca:	2340      	movne	r3, #64	@ 0x40
 80154cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80154d0:	2000      	movs	r0, #0
 80154d2:	6031      	str	r1, [r6, #0]
 80154d4:	602b      	str	r3, [r5, #0]
 80154d6:	b016      	add	sp, #88	@ 0x58
 80154d8:	bd70      	pop	{r4, r5, r6, pc}
 80154da:	466a      	mov	r2, sp
 80154dc:	f000 f848 	bl	8015570 <_fstat_r>
 80154e0:	2800      	cmp	r0, #0
 80154e2:	dbec      	blt.n	80154be <__swhatbuf_r+0x12>
 80154e4:	9901      	ldr	r1, [sp, #4]
 80154e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80154ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80154ee:	4259      	negs	r1, r3
 80154f0:	4159      	adcs	r1, r3
 80154f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80154f6:	e7eb      	b.n	80154d0 <__swhatbuf_r+0x24>

080154f8 <__smakebuf_r>:
 80154f8:	898b      	ldrh	r3, [r1, #12]
 80154fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80154fc:	079d      	lsls	r5, r3, #30
 80154fe:	4606      	mov	r6, r0
 8015500:	460c      	mov	r4, r1
 8015502:	d507      	bpl.n	8015514 <__smakebuf_r+0x1c>
 8015504:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015508:	6023      	str	r3, [r4, #0]
 801550a:	6123      	str	r3, [r4, #16]
 801550c:	2301      	movs	r3, #1
 801550e:	6163      	str	r3, [r4, #20]
 8015510:	b003      	add	sp, #12
 8015512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015514:	ab01      	add	r3, sp, #4
 8015516:	466a      	mov	r2, sp
 8015518:	f7ff ffc8 	bl	80154ac <__swhatbuf_r>
 801551c:	9f00      	ldr	r7, [sp, #0]
 801551e:	4605      	mov	r5, r0
 8015520:	4639      	mov	r1, r7
 8015522:	4630      	mov	r0, r6
 8015524:	f7fd fc30 	bl	8012d88 <_malloc_r>
 8015528:	b948      	cbnz	r0, 801553e <__smakebuf_r+0x46>
 801552a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801552e:	059a      	lsls	r2, r3, #22
 8015530:	d4ee      	bmi.n	8015510 <__smakebuf_r+0x18>
 8015532:	f023 0303 	bic.w	r3, r3, #3
 8015536:	f043 0302 	orr.w	r3, r3, #2
 801553a:	81a3      	strh	r3, [r4, #12]
 801553c:	e7e2      	b.n	8015504 <__smakebuf_r+0xc>
 801553e:	89a3      	ldrh	r3, [r4, #12]
 8015540:	6020      	str	r0, [r4, #0]
 8015542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015546:	81a3      	strh	r3, [r4, #12]
 8015548:	9b01      	ldr	r3, [sp, #4]
 801554a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801554e:	b15b      	cbz	r3, 8015568 <__smakebuf_r+0x70>
 8015550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015554:	4630      	mov	r0, r6
 8015556:	f000 f81d 	bl	8015594 <_isatty_r>
 801555a:	b128      	cbz	r0, 8015568 <__smakebuf_r+0x70>
 801555c:	89a3      	ldrh	r3, [r4, #12]
 801555e:	f023 0303 	bic.w	r3, r3, #3
 8015562:	f043 0301 	orr.w	r3, r3, #1
 8015566:	81a3      	strh	r3, [r4, #12]
 8015568:	89a3      	ldrh	r3, [r4, #12]
 801556a:	431d      	orrs	r5, r3
 801556c:	81a5      	strh	r5, [r4, #12]
 801556e:	e7cf      	b.n	8015510 <__smakebuf_r+0x18>

08015570 <_fstat_r>:
 8015570:	b538      	push	{r3, r4, r5, lr}
 8015572:	4d07      	ldr	r5, [pc, #28]	@ (8015590 <_fstat_r+0x20>)
 8015574:	2300      	movs	r3, #0
 8015576:	4604      	mov	r4, r0
 8015578:	4608      	mov	r0, r1
 801557a:	4611      	mov	r1, r2
 801557c:	602b      	str	r3, [r5, #0]
 801557e:	f7ec ff77 	bl	8002470 <_fstat>
 8015582:	1c43      	adds	r3, r0, #1
 8015584:	d102      	bne.n	801558c <_fstat_r+0x1c>
 8015586:	682b      	ldr	r3, [r5, #0]
 8015588:	b103      	cbz	r3, 801558c <_fstat_r+0x1c>
 801558a:	6023      	str	r3, [r4, #0]
 801558c:	bd38      	pop	{r3, r4, r5, pc}
 801558e:	bf00      	nop
 8015590:	20005df4 	.word	0x20005df4

08015594 <_isatty_r>:
 8015594:	b538      	push	{r3, r4, r5, lr}
 8015596:	4d06      	ldr	r5, [pc, #24]	@ (80155b0 <_isatty_r+0x1c>)
 8015598:	2300      	movs	r3, #0
 801559a:	4604      	mov	r4, r0
 801559c:	4608      	mov	r0, r1
 801559e:	602b      	str	r3, [r5, #0]
 80155a0:	f7ec ff76 	bl	8002490 <_isatty>
 80155a4:	1c43      	adds	r3, r0, #1
 80155a6:	d102      	bne.n	80155ae <_isatty_r+0x1a>
 80155a8:	682b      	ldr	r3, [r5, #0]
 80155aa:	b103      	cbz	r3, 80155ae <_isatty_r+0x1a>
 80155ac:	6023      	str	r3, [r4, #0]
 80155ae:	bd38      	pop	{r3, r4, r5, pc}
 80155b0:	20005df4 	.word	0x20005df4

080155b4 <__assert_func>:
 80155b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80155b6:	4614      	mov	r4, r2
 80155b8:	461a      	mov	r2, r3
 80155ba:	4b09      	ldr	r3, [pc, #36]	@ (80155e0 <__assert_func+0x2c>)
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	4605      	mov	r5, r0
 80155c0:	68d8      	ldr	r0, [r3, #12]
 80155c2:	b954      	cbnz	r4, 80155da <__assert_func+0x26>
 80155c4:	4b07      	ldr	r3, [pc, #28]	@ (80155e4 <__assert_func+0x30>)
 80155c6:	461c      	mov	r4, r3
 80155c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80155cc:	9100      	str	r1, [sp, #0]
 80155ce:	462b      	mov	r3, r5
 80155d0:	4905      	ldr	r1, [pc, #20]	@ (80155e8 <__assert_func+0x34>)
 80155d2:	f000 f841 	bl	8015658 <fiprintf>
 80155d6:	f000 f851 	bl	801567c <abort>
 80155da:	4b04      	ldr	r3, [pc, #16]	@ (80155ec <__assert_func+0x38>)
 80155dc:	e7f4      	b.n	80155c8 <__assert_func+0x14>
 80155de:	bf00      	nop
 80155e0:	20000818 	.word	0x20000818
 80155e4:	080d2efe 	.word	0x080d2efe
 80155e8:	080d2ed0 	.word	0x080d2ed0
 80155ec:	080d2ec3 	.word	0x080d2ec3

080155f0 <_calloc_r>:
 80155f0:	b570      	push	{r4, r5, r6, lr}
 80155f2:	fba1 5402 	umull	r5, r4, r1, r2
 80155f6:	b93c      	cbnz	r4, 8015608 <_calloc_r+0x18>
 80155f8:	4629      	mov	r1, r5
 80155fa:	f7fd fbc5 	bl	8012d88 <_malloc_r>
 80155fe:	4606      	mov	r6, r0
 8015600:	b928      	cbnz	r0, 801560e <_calloc_r+0x1e>
 8015602:	2600      	movs	r6, #0
 8015604:	4630      	mov	r0, r6
 8015606:	bd70      	pop	{r4, r5, r6, pc}
 8015608:	220c      	movs	r2, #12
 801560a:	6002      	str	r2, [r0, #0]
 801560c:	e7f9      	b.n	8015602 <_calloc_r+0x12>
 801560e:	462a      	mov	r2, r5
 8015610:	4621      	mov	r1, r4
 8015612:	f7fe faa7 	bl	8013b64 <memset>
 8015616:	e7f5      	b.n	8015604 <_calloc_r+0x14>

08015618 <__ascii_mbtowc>:
 8015618:	b082      	sub	sp, #8
 801561a:	b901      	cbnz	r1, 801561e <__ascii_mbtowc+0x6>
 801561c:	a901      	add	r1, sp, #4
 801561e:	b142      	cbz	r2, 8015632 <__ascii_mbtowc+0x1a>
 8015620:	b14b      	cbz	r3, 8015636 <__ascii_mbtowc+0x1e>
 8015622:	7813      	ldrb	r3, [r2, #0]
 8015624:	600b      	str	r3, [r1, #0]
 8015626:	7812      	ldrb	r2, [r2, #0]
 8015628:	1e10      	subs	r0, r2, #0
 801562a:	bf18      	it	ne
 801562c:	2001      	movne	r0, #1
 801562e:	b002      	add	sp, #8
 8015630:	4770      	bx	lr
 8015632:	4610      	mov	r0, r2
 8015634:	e7fb      	b.n	801562e <__ascii_mbtowc+0x16>
 8015636:	f06f 0001 	mvn.w	r0, #1
 801563a:	e7f8      	b.n	801562e <__ascii_mbtowc+0x16>

0801563c <__ascii_wctomb>:
 801563c:	4603      	mov	r3, r0
 801563e:	4608      	mov	r0, r1
 8015640:	b141      	cbz	r1, 8015654 <__ascii_wctomb+0x18>
 8015642:	2aff      	cmp	r2, #255	@ 0xff
 8015644:	d904      	bls.n	8015650 <__ascii_wctomb+0x14>
 8015646:	228a      	movs	r2, #138	@ 0x8a
 8015648:	601a      	str	r2, [r3, #0]
 801564a:	f04f 30ff 	mov.w	r0, #4294967295
 801564e:	4770      	bx	lr
 8015650:	700a      	strb	r2, [r1, #0]
 8015652:	2001      	movs	r0, #1
 8015654:	4770      	bx	lr
	...

08015658 <fiprintf>:
 8015658:	b40e      	push	{r1, r2, r3}
 801565a:	b503      	push	{r0, r1, lr}
 801565c:	4601      	mov	r1, r0
 801565e:	ab03      	add	r3, sp, #12
 8015660:	4805      	ldr	r0, [pc, #20]	@ (8015678 <fiprintf+0x20>)
 8015662:	f853 2b04 	ldr.w	r2, [r3], #4
 8015666:	6800      	ldr	r0, [r0, #0]
 8015668:	9301      	str	r3, [sp, #4]
 801566a:	f7ff fd5b 	bl	8015124 <_vfiprintf_r>
 801566e:	b002      	add	sp, #8
 8015670:	f85d eb04 	ldr.w	lr, [sp], #4
 8015674:	b003      	add	sp, #12
 8015676:	4770      	bx	lr
 8015678:	20000818 	.word	0x20000818

0801567c <abort>:
 801567c:	b508      	push	{r3, lr}
 801567e:	2006      	movs	r0, #6
 8015680:	f000 f82c 	bl	80156dc <raise>
 8015684:	2001      	movs	r0, #1
 8015686:	f7ec fea3 	bl	80023d0 <_exit>

0801568a <_raise_r>:
 801568a:	291f      	cmp	r1, #31
 801568c:	b538      	push	{r3, r4, r5, lr}
 801568e:	4605      	mov	r5, r0
 8015690:	460c      	mov	r4, r1
 8015692:	d904      	bls.n	801569e <_raise_r+0x14>
 8015694:	2316      	movs	r3, #22
 8015696:	6003      	str	r3, [r0, #0]
 8015698:	f04f 30ff 	mov.w	r0, #4294967295
 801569c:	bd38      	pop	{r3, r4, r5, pc}
 801569e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80156a0:	b112      	cbz	r2, 80156a8 <_raise_r+0x1e>
 80156a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80156a6:	b94b      	cbnz	r3, 80156bc <_raise_r+0x32>
 80156a8:	4628      	mov	r0, r5
 80156aa:	f000 f831 	bl	8015710 <_getpid_r>
 80156ae:	4622      	mov	r2, r4
 80156b0:	4601      	mov	r1, r0
 80156b2:	4628      	mov	r0, r5
 80156b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156b8:	f000 b818 	b.w	80156ec <_kill_r>
 80156bc:	2b01      	cmp	r3, #1
 80156be:	d00a      	beq.n	80156d6 <_raise_r+0x4c>
 80156c0:	1c59      	adds	r1, r3, #1
 80156c2:	d103      	bne.n	80156cc <_raise_r+0x42>
 80156c4:	2316      	movs	r3, #22
 80156c6:	6003      	str	r3, [r0, #0]
 80156c8:	2001      	movs	r0, #1
 80156ca:	e7e7      	b.n	801569c <_raise_r+0x12>
 80156cc:	2100      	movs	r1, #0
 80156ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80156d2:	4620      	mov	r0, r4
 80156d4:	4798      	blx	r3
 80156d6:	2000      	movs	r0, #0
 80156d8:	e7e0      	b.n	801569c <_raise_r+0x12>
	...

080156dc <raise>:
 80156dc:	4b02      	ldr	r3, [pc, #8]	@ (80156e8 <raise+0xc>)
 80156de:	4601      	mov	r1, r0
 80156e0:	6818      	ldr	r0, [r3, #0]
 80156e2:	f7ff bfd2 	b.w	801568a <_raise_r>
 80156e6:	bf00      	nop
 80156e8:	20000818 	.word	0x20000818

080156ec <_kill_r>:
 80156ec:	b538      	push	{r3, r4, r5, lr}
 80156ee:	4d07      	ldr	r5, [pc, #28]	@ (801570c <_kill_r+0x20>)
 80156f0:	2300      	movs	r3, #0
 80156f2:	4604      	mov	r4, r0
 80156f4:	4608      	mov	r0, r1
 80156f6:	4611      	mov	r1, r2
 80156f8:	602b      	str	r3, [r5, #0]
 80156fa:	f7ec fe59 	bl	80023b0 <_kill>
 80156fe:	1c43      	adds	r3, r0, #1
 8015700:	d102      	bne.n	8015708 <_kill_r+0x1c>
 8015702:	682b      	ldr	r3, [r5, #0]
 8015704:	b103      	cbz	r3, 8015708 <_kill_r+0x1c>
 8015706:	6023      	str	r3, [r4, #0]
 8015708:	bd38      	pop	{r3, r4, r5, pc}
 801570a:	bf00      	nop
 801570c:	20005df4 	.word	0x20005df4

08015710 <_getpid_r>:
 8015710:	f7ec be46 	b.w	80023a0 <_getpid>

08015714 <sqrtf>:
 8015714:	b508      	push	{r3, lr}
 8015716:	ed2d 8b02 	vpush	{d8}
 801571a:	eeb0 8a40 	vmov.f32	s16, s0
 801571e:	f000 f817 	bl	8015750 <__ieee754_sqrtf>
 8015722:	eeb4 8a48 	vcmp.f32	s16, s16
 8015726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801572a:	d60c      	bvs.n	8015746 <sqrtf+0x32>
 801572c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801574c <sqrtf+0x38>
 8015730:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015738:	d505      	bpl.n	8015746 <sqrtf+0x32>
 801573a:	f7fe fa75 	bl	8013c28 <__errno>
 801573e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8015742:	2321      	movs	r3, #33	@ 0x21
 8015744:	6003      	str	r3, [r0, #0]
 8015746:	ecbd 8b02 	vpop	{d8}
 801574a:	bd08      	pop	{r3, pc}
 801574c:	00000000 	.word	0x00000000

08015750 <__ieee754_sqrtf>:
 8015750:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015754:	4770      	bx	lr
	...

08015758 <_init>:
 8015758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801575a:	bf00      	nop
 801575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801575e:	bc08      	pop	{r3}
 8015760:	469e      	mov	lr, r3
 8015762:	4770      	bx	lr

08015764 <_fini>:
 8015764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015766:	bf00      	nop
 8015768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801576a:	bc08      	pop	{r3}
 801576c:	469e      	mov	lr, r3
 801576e:	4770      	bx	lr
