
Microphone_wav_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017fb0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000bdda8  08018180  08018180  00019180  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080d5f28  080d5f28  000ff0f0  2**0
                  CONTENTS
  4 .ARM          00000008  080d5f28  080d5f28  000d6f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080d5f30  080d5f30  000ff0f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080d5f30  080d5f30  000d6f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080d5f34  080d5f34  000d6f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000009e0  20000000  080d5f38  000d7000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000357b8  200009e0  080d6918  000d79e0  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20036198  080d6918  000d8198  2**0
                  ALLOC
 11 .sdram        000270f0  c0000000  c0000000  000d8000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 00000030  00000000  00000000  000ff0f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026387  00000000  00000000  000ff120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006077  00000000  00000000  001254a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cf8  00000000  00000000  0012b520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001562  00000000  00000000  0012d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002eea4  00000000  00000000  0012e77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a7b8  00000000  00000000  0015d61e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109b1e  00000000  00000000  00187dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000f4  00000000  00000000  002918f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000087bc  00000000  00000000  002919e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0029a1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00003a35  00000000  00000000  0029a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000128  00000000  00000000  0029dc41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009e0 	.word	0x200009e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018168 	.word	0x08018168

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009e4 	.word	0x200009e4
 800020c:	08018168 	.word	0x08018168

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd8 <MX_CRC_Init+0x40>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000fc2:	f004 fb85 	bl	80056d0 <HAL_CRC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000fcc:	f001 fb03 	bl	80025d6 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200009fc 	.word	0x200009fc
 8000fd8:	40023000 	.word	0x40023000

08000fdc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <HAL_CRC_MspInit+0x38>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10b      	bne.n	8001006 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <HAL_CRC_MspInit+0x3c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a09      	ldr	r2, [pc, #36]	@ (8001018 <HAL_CRC_MspInit+0x3c>)
 8000ff4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <HAL_CRC_MspInit+0x3c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023000 	.word	0x40023000
 8001018:	40023800 	.word	0x40023800

0800101c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001022:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <MX_DMA_Init+0x58>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a13      	ldr	r2, [pc, #76]	@ (8001074 <MX_DMA_Init+0x58>)
 8001028:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <MX_DMA_Init+0x58>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2039      	movs	r0, #57	@ 0x39
 8001040:	f004 fb0f 	bl	8005662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001044:	2039      	movs	r0, #57	@ 0x39
 8001046:	f004 fb28 	bl	800569a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2102      	movs	r1, #2
 800104e:	203b      	movs	r0, #59	@ 0x3b
 8001050:	f004 fb07 	bl	8005662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001054:	203b      	movs	r0, #59	@ 0x3b
 8001056:	f004 fb20 	bl	800569a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 2, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2102      	movs	r1, #2
 800105e:	2045      	movs	r0, #69	@ 0x45
 8001060:	f004 faff 	bl	8005662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001064:	2045      	movs	r0, #69	@ 0x45
 8001066:	f004 fb18 	bl	800569a <HAL_NVIC_EnableIRQ>

}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800

08001078 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001090:	4b1f      	ldr	r3, [pc, #124]	@ (8001110 <MX_FMC_Init+0x98>)
 8001092:	4a20      	ldr	r2, [pc, #128]	@ (8001114 <MX_FMC_Init+0x9c>)
 8001094:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001096:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <MX_FMC_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800109c:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <MX_FMC_Init+0x98>)
 800109e:	2201      	movs	r2, #1
 80010a0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <MX_FMC_Init+0x98>)
 80010a4:	2208      	movs	r2, #8
 80010a6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010a8:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <MX_FMC_Init+0x98>)
 80010aa:	2210      	movs	r2, #16
 80010ac:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010ae:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <MX_FMC_Init+0x98>)
 80010b0:	2240      	movs	r2, #64	@ 0x40
 80010b2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010b4:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <MX_FMC_Init+0x98>)
 80010b6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80010ba:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80010bc:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <MX_FMC_Init+0x98>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80010c2:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <MX_FMC_Init+0x98>)
 80010c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010c8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_FMC_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <MX_FMC_Init+0x98>)
 80010d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010d6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80010d8:	2302      	movs	r3, #2
 80010da:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80010dc:	2306      	movs	r3, #6
 80010de:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80010e0:	2304      	movs	r3, #4
 80010e2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80010e4:	2306      	movs	r3, #6
 80010e6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_FMC_Init+0x98>)
 80010fa:	f009 f929 	bl	800a350 <HAL_SDRAM_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001104:	f001 fa67 	bl	80025d6 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000a20 	.word	0x20000a20
 8001114:	a0000140 	.word	0xa0000140

08001118 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800112c:	4b33      	ldr	r3, [pc, #204]	@ (80011fc <HAL_FMC_MspInit+0xe4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d15e      	bne.n	80011f2 <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 8001134:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <HAL_FMC_MspInit+0xe4>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800113a:	4b31      	ldr	r3, [pc, #196]	@ (8001200 <HAL_FMC_MspInit+0xe8>)
 800113c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800113e:	4a30      	ldr	r2, [pc, #192]	@ (8001200 <HAL_FMC_MspInit+0xe8>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6393      	str	r3, [r2, #56]	@ 0x38
 8001146:	4b2e      	ldr	r3, [pc, #184]	@ (8001200 <HAL_FMC_MspInit+0xe8>)
 8001148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2
 8001152:	f248 1337 	movw	r3, #33079	@ 0x8137
 8001156:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001164:	230c      	movs	r3, #12
 8001166:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4825      	ldr	r0, [pc, #148]	@ (8001204 <HAL_FMC_MspInit+0xec>)
 800116e:	f005 f815 	bl	800619c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001172:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001176:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001184:	230c      	movs	r3, #12
 8001186:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4619      	mov	r1, r3
 800118c:	481e      	ldr	r0, [pc, #120]	@ (8001208 <HAL_FMC_MspInit+0xf0>)
 800118e:	f005 f805 	bl	800619c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001192:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001196:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011a4:	230c      	movs	r3, #12
 80011a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4817      	ldr	r0, [pc, #92]	@ (800120c <HAL_FMC_MspInit+0xf4>)
 80011ae:	f004 fff5 	bl	800619c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 80011b2:	232c      	movs	r3, #44	@ 0x2c
 80011b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c2:	230c      	movs	r3, #12
 80011c4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4811      	ldr	r0, [pc, #68]	@ (8001210 <HAL_FMC_MspInit+0xf8>)
 80011cc:	f004 ffe6 	bl	800619c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 80011d0:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80011d4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011e2:	230c      	movs	r3, #12
 80011e4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	480a      	ldr	r0, [pc, #40]	@ (8001214 <HAL_FMC_MspInit+0xfc>)
 80011ec:	f004 ffd6 	bl	800619c <HAL_GPIO_Init>
 80011f0:	e000      	b.n	80011f4 <HAL_FMC_MspInit+0xdc>
    return;
 80011f2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000a54 	.word	0x20000a54
 8001200:	40023800 	.word	0x40023800
 8001204:	40021800 	.word	0x40021800
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40021400 	.word	0x40021400
 8001210:	40021c00 	.word	0x40021c00
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001220:	f7ff ff7a 	bl	8001118 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b090      	sub	sp, #64	@ 0x40
 8001230:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001242:	4ba5      	ldr	r3, [pc, #660]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4aa4      	ldr	r2, [pc, #656]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001248:	f043 0310 	orr.w	r3, r3, #16
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4ba2      	ldr	r3, [pc, #648]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800125a:	4b9f      	ldr	r3, [pc, #636]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a9e      	ldr	r2, [pc, #632]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b9c      	ldr	r3, [pc, #624]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	4b99      	ldr	r3, [pc, #612]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a98      	ldr	r2, [pc, #608]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b96      	ldr	r3, [pc, #600]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	623b      	str	r3, [r7, #32]
 8001288:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128a:	4b93      	ldr	r3, [pc, #588]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a92      	ldr	r2, [pc, #584]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b90      	ldr	r3, [pc, #576]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	4b8d      	ldr	r3, [pc, #564]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a8c      	ldr	r2, [pc, #560]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b8a      	ldr	r3, [pc, #552]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b87      	ldr	r3, [pc, #540]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a86      	ldr	r2, [pc, #536]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b84      	ldr	r3, [pc, #528]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012d2:	4b81      	ldr	r3, [pc, #516]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a80      	ldr	r2, [pc, #512]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b7e      	ldr	r3, [pc, #504]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80012ea:	4b7b      	ldr	r3, [pc, #492]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a7a      	ldr	r2, [pc, #488]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b78      	ldr	r3, [pc, #480]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001302:	4b75      	ldr	r3, [pc, #468]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a74      	ldr	r2, [pc, #464]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001308:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b72      	ldr	r3, [pc, #456]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800131a:	4b6f      	ldr	r3, [pc, #444]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a6e      	ldr	r2, [pc, #440]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001320:	f043 0320 	orr.w	r3, r3, #32
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b6c      	ldr	r3, [pc, #432]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0320 	and.w	r3, r3, #32
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001332:	4b69      	ldr	r3, [pc, #420]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a68      	ldr	r2, [pc, #416]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b66      	ldr	r3, [pc, #408]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2102      	movs	r1, #2
 800134e:	4863      	ldr	r0, [pc, #396]	@ (80014dc <MX_GPIO_Init+0x2b0>)
 8001350:	f005 f9f4 	bl	800673c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001354:	230f      	movs	r3, #15
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001358:	2303      	movs	r3, #3
 800135a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001360:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001364:	4619      	mov	r1, r3
 8001366:	485e      	ldr	r0, [pc, #376]	@ (80014e0 <MX_GPIO_Init+0x2b4>)
 8001368:	f004 ff18 	bl	800619c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG11 PG12
                           PG10 PG9 PG7 PG6
                           PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12
 800136c:	f647 63c8 	movw	r3, #32456	@ 0x7ec8
 8001370:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001372:	2303      	movs	r3, #3
 8001374:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800137a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800137e:	4619      	mov	r1, r3
 8001380:	4858      	ldr	r0, [pc, #352]	@ (80014e4 <MX_GPIO_Init+0x2b8>)
 8001382:	f004 ff0b 	bl	800619c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001386:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138c:	2303      	movs	r3, #3
 800138e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001394:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001398:	4619      	mov	r1, r3
 800139a:	4853      	ldr	r0, [pc, #332]	@ (80014e8 <MX_GPIO_Init+0x2bc>)
 800139c:	f004 fefe 	bl	800619c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD3
                           PD4 PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 80013a0:	f643 03f8 	movw	r3, #14584	@ 0x38f8
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a6:	2303      	movs	r3, #3
 80013a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013b2:	4619      	mov	r1, r3
 80013b4:	484d      	ldr	r0, [pc, #308]	@ (80014ec <MX_GPIO_Init+0x2c0>)
 80013b6:	f004 fef1 	bl	800619c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 80013ba:	f649 53ff 	movw	r3, #40447	@ 0x9dff
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c0:	2303      	movs	r3, #3
 80013c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013cc:	4619      	mov	r1, r3
 80013ce:	4848      	ldr	r0, [pc, #288]	@ (80014f0 <MX_GPIO_Init+0x2c4>)
 80013d0:	f004 fee4 	bl	800619c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80013d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013da:	2303      	movs	r3, #3
 80013dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013e6:	4619      	mov	r1, r3
 80013e8:	4842      	ldr	r0, [pc, #264]	@ (80014f4 <MX_GPIO_Init+0x2c8>)
 80013ea:	f004 fed7 	bl	800619c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC9 PC7 PC6 PC3
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 80013ee:	f64c 63ff 	movw	r3, #52991	@ 0xceff
 80013f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f4:	2303      	movs	r3, #3
 80013f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001400:	4619      	mov	r1, r3
 8001402:	483d      	ldr	r0, [pc, #244]	@ (80014f8 <MX_GPIO_Init+0x2cc>)
 8001404:	f004 feca 	bl	800619c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI12 PI9 PI0 PI13
                           PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001408:	f24f 73fd 	movw	r3, #63485	@ 0xf7fd
 800140c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_13
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140e:	2303      	movs	r3, #3
 8001410:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001416:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800141a:	4619      	mov	r1, r3
 800141c:	482f      	ldr	r0, [pc, #188]	@ (80014dc <MX_GPIO_Init+0x2b0>)
 800141e:	f004 febd 	bl	800619c <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001422:	23ff      	movs	r3, #255	@ 0xff
 8001424:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001426:	2303      	movs	r3, #3
 8001428:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800142e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001432:	4619      	mov	r1, r3
 8001434:	4831      	ldr	r0, [pc, #196]	@ (80014fc <MX_GPIO_Init+0x2d0>)
 8001436:	f004 feb1 	bl	800619c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800143a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001440:	2300      	movs	r3, #0
 8001442:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800144c:	4619      	mov	r1, r3
 800144e:	482a      	ldr	r0, [pc, #168]	@ (80014f8 <MX_GPIO_Init+0x2cc>)
 8001450:	f004 fea4 	bl	800619c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH12 PH7 PH9 PH11
                           PH6 PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8001454:	f64f 73d0 	movw	r3, #65488	@ 0xffd0
 8001458:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145a:	2303      	movs	r3, #3
 800145c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001462:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001466:	4619      	mov	r1, r3
 8001468:	4825      	ldr	r0, [pc, #148]	@ (8001500 <MX_GPIO_Init+0x2d4>)
 800146a:	f004 fe97 	bl	800619c <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 800146e:	2302      	movs	r3, #2
 8001470:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001482:	4619      	mov	r1, r3
 8001484:	4815      	ldr	r0, [pc, #84]	@ (80014dc <MX_GPIO_Init+0x2b0>)
 8001486:	f004 fe89 	bl	800619c <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 800148a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001490:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001494:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800149e:	4619      	mov	r1, r3
 80014a0:	480e      	ldr	r0, [pc, #56]	@ (80014dc <MX_GPIO_Init+0x2b0>)
 80014a2:	f004 fe7b 	bl	800619c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 80014a6:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80014aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ac:	2303      	movs	r3, #3
 80014ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b8:	4619      	mov	r1, r3
 80014ba:	4812      	ldr	r0, [pc, #72]	@ (8001504 <MX_GPIO_Init+0x2d8>)
 80014bc:	f004 fe6e 	bl	800619c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	2028      	movs	r0, #40	@ 0x28
 80014c6:	f004 f8cc 	bl	8005662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014ca:	2028      	movs	r0, #40	@ 0x28
 80014cc:	f004 f8e5 	bl	800569a <HAL_NVIC_EnableIRQ>

}
 80014d0:	bf00      	nop
 80014d2:	3740      	adds	r7, #64	@ 0x40
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40022000 	.word	0x40022000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40021800 	.word	0x40021800
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020c00 	.word	0x40020c00
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40022400 	.word	0x40022400
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40022800 	.word	0x40022800
 8001500:	40021c00 	.word	0x40021c00
 8001504:	40021400 	.word	0x40021400

08001508 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800150c:	f3bf 8f4f 	dsb	sy
}
 8001510:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001512:	f3bf 8f6f 	isb	sy
}
 8001516:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001518:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <SCB_EnableICache+0x48>)
 800151a:	2200      	movs	r2, #0
 800151c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001520:	f3bf 8f4f 	dsb	sy
}
 8001524:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001526:	f3bf 8f6f 	isb	sy
}
 800152a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <SCB_EnableICache+0x48>)
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	4a07      	ldr	r2, [pc, #28]	@ (8001550 <SCB_EnableICache+0x48>)
 8001532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001536:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001538:	f3bf 8f4f 	dsb	sy
}
 800153c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800153e:	f3bf 8f6f 	isb	sy
}
 8001542:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <SCB_DisableICache>:
/**
  \brief   Disable I-Cache
  \details Turns off I-Cache
  */
__STATIC_INLINE void SCB_DisableICache (void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001558:	f3bf 8f4f 	dsb	sy
}
 800155c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800155e:	f3bf 8f6f 	isb	sy
}
 8001562:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001564:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <SCB_DisableICache+0x3c>)
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <SCB_DisableICache+0x3c>)
 800156a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800156e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001570:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <SCB_DisableICache+0x3c>)
 8001572:	2200      	movs	r2, #0
 8001574:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001578:	f3bf 8f4f 	dsb	sy
}
 800157c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800157e:	f3bf 8f6f 	isb	sy
}
 8001582:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800159a:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <SCB_EnableDCache+0x84>)
 800159c:	2200      	movs	r2, #0
 800159e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015a2:	f3bf 8f4f 	dsb	sy
}
 80015a6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <SCB_EnableDCache+0x84>)
 80015aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015ae:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	0b5b      	lsrs	r3, r3, #13
 80015b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015b8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80015cc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015d2:	4911      	ldr	r1, [pc, #68]	@ (8001618 <SCB_EnableDCache+0x84>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	60ba      	str	r2, [r7, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ef      	bne.n	80015c4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	1e5a      	subs	r2, r3, #1
 80015e8:	60fa      	str	r2, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1e5      	bne.n	80015ba <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <SCB_EnableDCache+0x84>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	4a07      	ldr	r2, [pc, #28]	@ (8001618 <SCB_EnableDCache+0x84>)
 80015fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001600:	f3bf 8f4f 	dsb	sy
}
 8001604:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001606:	f3bf 8f6f 	isb	sy
}
 800160a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <SCB_DisableDCache>:
/**
  \brief   Disable D-Cache
  \details Turns off D-Cache
  */
__STATIC_INLINE void SCB_DisableDCache (void)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001622:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <SCB_DisableDCache+0x84>)
 8001624:	2200      	movs	r2, #0
 8001626:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800162a:	f3bf 8f4f 	dsb	sy
}
 800162e:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <SCB_DisableDCache+0x84>)
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	4a1a      	ldr	r2, [pc, #104]	@ (80016a0 <SCB_DisableDCache+0x84>)
 8001636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800163a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800163c:	f3bf 8f4f 	dsb	sy
}
 8001640:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001642:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <SCB_DisableDCache+0x84>)
 8001644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001648:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	0b5b      	lsrs	r3, r3, #13
 800164e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001652:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	08db      	lsrs	r3, r3, #3
 8001658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800165c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001666:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800166c:	490c      	ldr	r1, [pc, #48]	@ (80016a0 <SCB_DisableDCache+0x84>)
 800166e:	4313      	orrs	r3, r2
 8001670:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	1e5a      	subs	r2, r3, #1
 8001678:	60ba      	str	r2, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1ef      	bne.n	800165e <SCB_DisableDCache+0x42>
    } while(sets-- != 0U);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1e5a      	subs	r2, r3, #1
 8001682:	60fa      	str	r2, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1e5      	bne.n	8001654 <SCB_DisableDCache+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8001688:	f3bf 8f4f 	dsb	sy
}
 800168c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800168e:	f3bf 8f6f 	isb	sy
}
 8001692:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a4:	b5b0      	push	{r4, r5, r7, lr}
 80016a6:	f6ad 2d88 	subw	sp, sp, #2696	@ 0xa88
 80016aa:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80016ac:	f7ff ff2c 	bl	8001508 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80016b0:	f7ff ff70 	bl	8001594 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b4:	f003 fe78 	bl	80053a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b8:	f000 fce2 	bl	8002080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016bc:	f7ff fdb6 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 80016c0:	f7ff fcac 	bl	800101c <MX_DMA_Init>
  MX_SAI1_Init();
 80016c4:	f000 ff8e 	bl	80025e4 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 80016c8:	f001 fb46 	bl	8002d58 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80016cc:	f00a fd76 	bl	800c1bc <MX_FATFS_Init>
  MX_SDMMC1_SD_Init();
 80016d0:	f001 f8ac 	bl	800282c <MX_SDMMC1_SD_Init>
  MX_CRC_Init();
 80016d4:	f7ff fc60 	bl	8000f98 <MX_CRC_Init>
  MX_FMC_Init();
 80016d8:	f7ff fcce 	bl	8001078 <MX_FMC_Init>

  /* USER CODE BEGIN 2 */

  /* We format the SD card */
  printf("SD card init...\r\n");
 80016dc:	48c2      	ldr	r0, [pc, #776]	@ (80019e8 <main+0x344>)
 80016de:	f013 fe63 	bl	80153a8 <puts>
  SDCard_InitAndFormat();
 80016e2:	f000 fd7b 	bl	80021dc <SDCard_InitAndFormat>
  BSP_SDRAM_Init();
 80016e6:	f003 fca9 	bl	800503c <BSP_SDRAM_Init>
  AI_Init();
 80016ea:	f000 fe61 	bl	80023b0 <AI_Init>

  memset(waveform, 0, sizeof(waveform));
 80016ee:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80016f2:	2100      	movs	r1, #0
 80016f4:	48bd      	ldr	r0, [pc, #756]	@ (80019ec <main+0x348>)
 80016f6:	f013 ff57 	bl	80155a8 <memset>
  memset(stereo_waveform, 0, sizeof(stereo_waveform));
 80016fa:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 80016fe:	2100      	movs	r1, #0
 8001700:	48bb      	ldr	r0, [pc, #748]	@ (80019f0 <main+0x34c>)
 8001702:	f013 ff51 	bl	80155a8 <memset>
  memset(float_waveform, 0, sizeof(float_waveform));
 8001706:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 800170a:	2100      	movs	r1, #0
 800170c:	48b9      	ldr	r0, [pc, #740]	@ (80019f4 <main+0x350>)
 800170e:	f013 ff4b 	bl	80155a8 <memset>
  memset(spectrogram, 0, sizeof(spectrogram));
 8001712:	f64f 12f0 	movw	r2, #63984	@ 0xf9f0
 8001716:	2100      	movs	r1, #0
 8001718:	48b7      	ldr	r0, [pc, #732]	@ (80019f8 <main+0x354>)
 800171a:	f013 ff45 	bl	80155a8 <memset>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	uint32_t write_index = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 3a10 	str.w	r3, [r7, #2576]	@ 0xa10
    while (1)
    {
        check_button_release();
 8001724:	f000 fd46 	bl	80021b4 <check_button_release>
        printf("Waiting for input to record...\r\n");
 8001728:	48b4      	ldr	r0, [pc, #720]	@ (80019fc <main+0x358>)
 800172a:	f013 fe3d 	bl	80153a8 <puts>
        HAL_Delay(1000);
 800172e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001732:	f003 fe97 	bl	8005464 <HAL_Delay>

        SCB_DisableDCache();
 8001736:	f7ff ff71 	bl	800161c <SCB_DisableDCache>
        SCB_DisableICache();
 800173a:	f7ff ff0b 	bl	8001554 <SCB_DisableICache>

        if (button_pressed == 1)
 800173e:	4bb0      	ldr	r3, [pc, #704]	@ (8001a00 <main+0x35c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b01      	cmp	r3, #1
 8001746:	f040 845e 	bne.w	8002006 <main+0x962>
        {
            /* Toggle the green led to visually show action */
            HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 800174a:	2102      	movs	r1, #2
 800174c:	48ad      	ldr	r0, [pc, #692]	@ (8001a04 <main+0x360>)
 800174e:	f005 f80e 	bl	800676e <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 8001752:	2064      	movs	r0, #100	@ 0x64
 8001754:	f003 fe86 	bl	8005464 <HAL_Delay>
            HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8001758:	2102      	movs	r1, #2
 800175a:	48aa      	ldr	r0, [pc, #680]	@ (8001a04 <main+0x360>)
 800175c:	f005 f807 	bl	800676e <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 8001760:	2064      	movs	r0, #100	@ 0x64
 8001762:	f003 fe7f 	bl	8005464 <HAL_Delay>

            /* If the program is not already recording... */
            if (AudioState == AUDIO_STATE_IDLE)
 8001766:	4ba8      	ldr	r3, [pc, #672]	@ (8001a08 <main+0x364>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d108      	bne.n	8001780 <main+0xdc>
            {
                /* Configure the audio recorder: sampling frequency, bits-depth, number of channels */
                AUDIO_REC_Start();
 800176e:	f00a f9b9 	bl	800bae4 <AUDIO_REC_Start>
            }

            /* While recording, we loop the recording process */
            while (AudioState == AUDIO_STATE_RECORD)
 8001772:	e005      	b.n	8001780 <main+0xdc>
            {
                status = AUDIO_REC_Process();
 8001774:	f00a fa3c 	bl	800bbf0 <AUDIO_REC_Process>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	4ba3      	ldr	r3, [pc, #652]	@ (8001a0c <main+0x368>)
 800177e:	701a      	strb	r2, [r3, #0]
            while (AudioState == AUDIO_STATE_RECORD)
 8001780:	4ba1      	ldr	r3, [pc, #644]	@ (8001a08 <main+0x364>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b05      	cmp	r3, #5
 8001786:	d0f5      	beq.n	8001774 <main+0xd0>
            }

            /* Once we stop recording, we correctly close the .WAV */
            if (AudioState == AUDIO_STATE_STOP)
 8001788:	4b9f      	ldr	r3, [pc, #636]	@ (8001a08 <main+0x364>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b0a      	cmp	r3, #10
 800178e:	d108      	bne.n	80017a2 <main+0xfe>
            {
                status = AUDIO_REC_Process();
 8001790:	f00a fa2e 	bl	800bbf0 <AUDIO_REC_Process>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	4b9c      	ldr	r3, [pc, #624]	@ (8001a0c <main+0x368>)
 800179a:	701a      	strb	r2, [r3, #0]
                printf("Recording stopped.\r\n");
 800179c:	489c      	ldr	r0, [pc, #624]	@ (8001a10 <main+0x36c>)
 800179e:	f013 fe03 	bl	80153a8 <puts>
//            //Début traitement

				// We read the contents of the file, save the info in the "audio_buffer" variable
				// Charger le fichier WAV et vérifier mono/stéréo
				// Charger le fichier WAV et vérifier mono/stéréo
				if (read_wav_file("WAVE.WAV", stereo_waveform) != 0) {
 80017a2:	4993      	ldr	r1, [pc, #588]	@ (80019f0 <main+0x34c>)
 80017a4:	489b      	ldr	r0, [pc, #620]	@ (8001a14 <main+0x370>)
 80017a6:	f000 fd69 	bl	800227c <read_wav_file>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <main+0x116>
					printf("Erreur : Impossible de lire le fichier WAV\r\n");
 80017b0:	4899      	ldr	r0, [pc, #612]	@ (8001a18 <main+0x374>)
 80017b2:	f013 fdf9 	bl	80153a8 <puts>
					return;
 80017b6:	f000 bc2b 	b.w	8002010 <main+0x96c>
				}

				// Si le fichier est stéréo, on le convertit en mono en moyennant les canaux

				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 3a7c 	str.w	r3, [r7, #2684]	@ 0xa7c
 80017c0:	e01d      	b.n	80017fe <main+0x15a>
					waveform[i] = (stereo_waveform[2 * i] + stereo_waveform[2 * i + 1]) / 2;  // Moyenne des deux canaux
 80017c2:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	@ 0xa7c
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4a89      	ldr	r2, [pc, #548]	@ (80019f0 <main+0x34c>)
 80017ca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017ce:	4619      	mov	r1, r3
 80017d0:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	@ 0xa7c
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	3301      	adds	r3, #1
 80017d8:	4a85      	ldr	r2, [pc, #532]	@ (80019f0 <main+0x34c>)
 80017da:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017de:	440b      	add	r3, r1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	da00      	bge.n	80017e6 <main+0x142>
 80017e4:	3301      	adds	r3, #1
 80017e6:	105b      	asrs	r3, r3, #1
 80017e8:	b219      	sxth	r1, r3
 80017ea:	4a80      	ldr	r2, [pc, #512]	@ (80019ec <main+0x348>)
 80017ec:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	@ 0xa7c
 80017f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 80017f4:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	@ 0xa7c
 80017f8:	3301      	adds	r3, #1
 80017fa:	f8c7 3a7c 	str.w	r3, [r7, #2684]	@ 0xa7c
 80017fe:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	@ 0xa7c
 8001802:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001806:	d3dc      	bcc.n	80017c2 <main+0x11e>
				}


				// -------------------- NORMALISATION --------------------
				printf("Normalisation de l'audio...\r\n");
 8001808:	4884      	ldr	r0, [pc, #528]	@ (8001a1c <main+0x378>)
 800180a:	f013 fdcd 	bl	80153a8 <puts>

				// Trouver le min et le max
				float min_val = 32767.0f;
 800180e:	4b84      	ldr	r3, [pc, #528]	@ (8001a20 <main+0x37c>)
 8001810:	f607 2278 	addw	r2, r7, #2680	@ 0xa78
 8001814:	6013      	str	r3, [r2, #0]
				float max_val = -32768.0f;
 8001816:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 800181a:	f607 2274 	addw	r2, r7, #2676	@ 0xa74
 800181e:	6013      	str	r3, [r2, #0]

				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 3a70 	str.w	r3, [r7, #2672]	@ 0xa70
 8001826:	e042      	b.n	80018ae <main+0x20a>
					if (waveform[i] < min_val) min_val = waveform[i];
 8001828:	4a70      	ldr	r2, [pc, #448]	@ (80019ec <main+0x348>)
 800182a:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	@ 0xa70
 800182e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183a:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 800183e:	ed93 7a00 	vldr	s14, [r3]
 8001842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	dd0c      	ble.n	8001866 <main+0x1c2>
 800184c:	4a67      	ldr	r2, [pc, #412]	@ (80019ec <main+0x348>)
 800184e:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	@ 0xa70
 8001852:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185e:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8001862:	edc3 7a00 	vstr	s15, [r3]
					if (waveform[i] > max_val) max_val = waveform[i];
 8001866:	4a61      	ldr	r2, [pc, #388]	@ (80019ec <main+0x348>)
 8001868:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	@ 0xa70
 800186c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001878:	f607 2374 	addw	r3, r7, #2676	@ 0xa74
 800187c:	ed93 7a00 	vldr	s14, [r3]
 8001880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	d50c      	bpl.n	80018a4 <main+0x200>
 800188a:	4a58      	ldr	r2, [pc, #352]	@ (80019ec <main+0x348>)
 800188c:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	@ 0xa70
 8001890:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189c:	f607 2374 	addw	r3, r7, #2676	@ 0xa74
 80018a0:	edc3 7a00 	vstr	s15, [r3]
				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 80018a4:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	@ 0xa70
 80018a8:	3301      	adds	r3, #1
 80018aa:	f8c7 3a70 	str.w	r3, [r7, #2672]	@ 0xa70
 80018ae:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	@ 0xa70
 80018b2:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80018b6:	d3b7      	bcc.n	8001828 <main+0x184>
				}

				// Vérifier que les valeurs sont valides
				printf("Min: %.2f, Max: %.2f\n", min_val, max_val);
 80018b8:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	f7fe fec3 	bl	8000648 <__aeabi_f2d>
 80018c2:	4604      	mov	r4, r0
 80018c4:	460d      	mov	r5, r1
 80018c6:	f607 2374 	addw	r3, r7, #2676	@ 0xa74
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	f7fe febc 	bl	8000648 <__aeabi_f2d>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	e9cd 2300 	strd	r2, r3, [sp]
 80018d8:	4622      	mov	r2, r4
 80018da:	462b      	mov	r3, r5
 80018dc:	4851      	ldr	r0, [pc, #324]	@ (8001a24 <main+0x380>)
 80018de:	f013 fcfb 	bl	80152d8 <iprintf>

				// Calcul de la normalisation
				float range = max_val - min_val;
 80018e2:	f607 2374 	addw	r3, r7, #2676	@ 0xa74
 80018e6:	ed93 7a00 	vldr	s14, [r3]
 80018ea:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f6:	f607 236c 	addw	r3, r7, #2668	@ 0xa6c
 80018fa:	edc3 7a00 	vstr	s15, [r3]
				if (range == 0) range = 1.0f;  // Éviter division par zéro
 80018fe:	f607 236c 	addw	r3, r7, #2668	@ 0xa6c
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	eef5 7a40 	vcmp.f32	s15, #0.0
 800190a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190e:	d104      	bne.n	800191a <main+0x276>
 8001910:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001914:	f607 226c 	addw	r2, r7, #2668	@ 0xa6c
 8001918:	6013      	str	r3, [r2, #0]

				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 3a68 	str.w	r3, [r7, #2664]	@ 0xa68
 8001920:	e026      	b.n	8001970 <main+0x2cc>
					float_waveform[i] = 2.0f * (waveform[i] - min_val) / range - 1.0f; // Normalisation [-1,1]
 8001922:	4a32      	ldr	r2, [pc, #200]	@ (80019ec <main+0x348>)
 8001924:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	@ 0xa68
 8001928:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001934:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001940:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001944:	f607 236c 	addw	r3, r7, #2668	@ 0xa6c
 8001948:	ed93 7a00 	vldr	s14, [r3]
 800194c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001950:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001954:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001958:	4a26      	ldr	r2, [pc, #152]	@ (80019f4 <main+0x350>)
 800195a:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	@ 0xa68
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	edc3 7a00 	vstr	s15, [r3]
				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001966:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	@ 0xa68
 800196a:	3301      	adds	r3, #1
 800196c:	f8c7 3a68 	str.w	r3, [r7, #2664]	@ 0xa68
 8001970:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	@ 0xa68
 8001974:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001978:	d3d3      	bcc.n	8001922 <main+0x27e>
				}

				// Vérification des valeurs normalisées
				printf("Premières valeurs normalisées : ");
 800197a:	482b      	ldr	r0, [pc, #172]	@ (8001a28 <main+0x384>)
 800197c:	f013 fcac 	bl	80152d8 <iprintf>
				for (uint32_t i = 0; i < 10; i++) {
 8001980:	2300      	movs	r3, #0
 8001982:	f8c7 3a64 	str.w	r3, [r7, #2660]	@ 0xa64
 8001986:	e012      	b.n	80019ae <main+0x30a>
					printf("%.6f ", float_waveform[i]);
 8001988:	4a1a      	ldr	r2, [pc, #104]	@ (80019f4 <main+0x350>)
 800198a:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	@ 0xa64
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fe57 	bl	8000648 <__aeabi_f2d>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4823      	ldr	r0, [pc, #140]	@ (8001a2c <main+0x388>)
 80019a0:	f013 fc9a 	bl	80152d8 <iprintf>
				for (uint32_t i = 0; i < 10; i++) {
 80019a4:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	@ 0xa64
 80019a8:	3301      	adds	r3, #1
 80019aa:	f8c7 3a64 	str.w	r3, [r7, #2660]	@ 0xa64
 80019ae:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	@ 0xa64
 80019b2:	2b09      	cmp	r3, #9
 80019b4:	d9e8      	bls.n	8001988 <main+0x2e4>
				}
				printf("\r\n");
 80019b6:	481e      	ldr	r0, [pc, #120]	@ (8001a30 <main+0x38c>)
 80019b8:	f013 fcf6 	bl	80153a8 <puts>

				// -------------------- APPLICATION HANNING & FFT --------------------

				// Création de la fenêtre de Hanning
				static float32_t hanning_window[FFT_SIZE];
				arm_hanning_f32(hanning_window, FFT_SIZE);
 80019bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c0:	481c      	ldr	r0, [pc, #112]	@ (8001a34 <main+0x390>)
 80019c2:	f000 fcaf 	bl	8002324 <arm_hanning_f32>

				printf("Application de la fenêtre de Hanning et calcul FFT...;\r\n");
 80019c6:	481c      	ldr	r0, [pc, #112]	@ (8001a38 <main+0x394>)
 80019c8:	f013 fcee 	bl	80153a8 <puts>

				for (uint32_t idx = 0; idx < 124; idx++) {
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 3a60 	str.w	r3, [r7, #2656]	@ 0xa60
 80019d2:	e0e6      	b.n	8001ba2 <main+0x4fe>
					float frame[FFT_SIZE];
					float mag[FFT_SIZE / 2 + 1]; // Magnitude des valeurs complexes
					float sum = 0.0f;
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	f607 225c 	addw	r2, r7, #2652	@ 0xa5c
 80019dc:	6013      	str	r3, [r2, #0]

					// Extraction et application de Hanning
					for (uint32_t i = 0; i < FFT_SIZE; i++) {
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 3a58 	str.w	r3, [r7, #2648]	@ 0xa58
 80019e4:	e063      	b.n	8001aae <main+0x40a>
 80019e6:	bf00      	nop
 80019e8:	080181a8 	.word	0x080181a8
 80019ec:	c0000000 	.word	0xc0000000
 80019f0:	20020ed8 	.word	0x20020ed8
 80019f4:	c0007d00 	.word	0xc0007d00
 80019f8:	c0017700 	.word	0xc0017700
 80019fc:	080181bc 	.word	0x080181bc
 8001a00:	200308f0 	.word	0x200308f0
 8001a04:	40022000 	.word	0x40022000
 8001a08:	20000a58 	.word	0x20000a58
 8001a0c:	20000a59 	.word	0x20000a59
 8001a10:	080181dc 	.word	0x080181dc
 8001a14:	080181f0 	.word	0x080181f0
 8001a18:	080181fc 	.word	0x080181fc
 8001a1c:	08018228 	.word	0x08018228
 8001a20:	46fffe00 	.word	0x46fffe00
 8001a24:	08018248 	.word	0x08018248
 8001a28:	08018260 	.word	0x08018260
 8001a2c:	08018284 	.word	0x08018284
 8001a30:	0801828c 	.word	0x0801828c
 8001a34:	200308f4 	.word	0x200308f4
 8001a38:	08018290 	.word	0x08018290
						frame[i] = float_waveform[idx * frame_step + i] * hanning_window[i];
 8001a3c:	2280      	movs	r2, #128	@ 0x80
 8001a3e:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	@ 0xa60
 8001a42:	fb03 f202 	mul.w	r2, r3, r2
 8001a46:	f8d7 3a58 	ldr.w	r3, [r7, #2648]	@ 0xa58
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4ac0      	ldr	r2, [pc, #768]	@ (8001d50 <main+0x6ac>)
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	ed93 7a00 	vldr	s14, [r3]
 8001a56:	4abf      	ldr	r2, [pc, #764]	@ (8001d54 <main+0x6b0>)
 8001a58:	f8d7 3a58 	ldr.w	r3, [r7, #2648]	@ 0xa58
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a68:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8001a6c:	f6a3 0278 	subw	r2, r3, #2168	@ 0x878
 8001a70:	f8d7 3a58 	ldr.w	r3, [r7, #2648]	@ 0xa58
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	edc3 7a00 	vstr	s15, [r3]
						sum += frame[i];
 8001a7c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8001a80:	f6a3 0278 	subw	r2, r3, #2168	@ 0x878
 8001a84:	f8d7 3a58 	ldr.w	r3, [r7, #2648]	@ 0xa58
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	f607 235c 	addw	r3, r7, #2652	@ 0xa5c
 8001a94:	ed93 7a00 	vldr	s14, [r3]
 8001a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9c:	f607 235c 	addw	r3, r7, #2652	@ 0xa5c
 8001aa0:	edc3 7a00 	vstr	s15, [r3]
					for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001aa4:	f8d7 3a58 	ldr.w	r3, [r7, #2648]	@ 0xa58
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	f8c7 3a58 	str.w	r3, [r7, #2648]	@ 0xa58
 8001aae:	f8d7 3a58 	ldr.w	r3, [r7, #2648]	@ 0xa58
 8001ab2:	2bff      	cmp	r3, #255	@ 0xff
 8001ab4:	d9c2      	bls.n	8001a3c <main+0x398>
					}

					// Suppression du biais DC
					float mean = sum / FFT_SIZE;
 8001ab6:	f607 235c 	addw	r3, r7, #2652	@ 0xa5c
 8001aba:	ed93 7a00 	vldr	s14, [r3]
 8001abe:	eddf 6aa6 	vldr	s13, [pc, #664]	@ 8001d58 <main+0x6b4>
 8001ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac6:	f607 2308 	addw	r3, r7, #2568	@ 0xa08
 8001aca:	edc3 7a00 	vstr	s15, [r3]
					for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 8001ad4:	e01e      	b.n	8001b14 <main+0x470>
						frame[i] -= mean;
 8001ad6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8001ada:	f6a3 0278 	subw	r2, r3, #2168	@ 0x878
 8001ade:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	ed93 7a00 	vldr	s14, [r3]
 8001aea:	f607 2308 	addw	r3, r7, #2568	@ 0xa08
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8001afa:	f6a3 0278 	subw	r2, r3, #2168	@ 0x878
 8001afe:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	edc3 7a00 	vstr	s15, [r3]
					for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001b0a:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 8001b14:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 8001b18:	2bff      	cmp	r3, #255	@ 0xff
 8001b1a:	d9dc      	bls.n	8001ad6 <main+0x432>
					}


					if (arm_rfft_fast_init_f32(&fft, FFT_SIZE) != ARM_MATH_SUCCESS) {
 8001b1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b20:	488e      	ldr	r0, [pc, #568]	@ (8001d5c <main+0x6b8>)
 8001b22:	f00e f921 	bl	800fd68 <arm_rfft_fast_init_f32>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <main+0x492>
						printf("Erreur : Échec de l'initialisation de la FFT !\r\n");
 8001b2c:	488c      	ldr	r0, [pc, #560]	@ (8001d60 <main+0x6bc>)
 8001b2e:	f013 fc3b 	bl	80153a8 <puts>
						Error_Handler();
 8001b32:	f000 fd50 	bl	80025d6 <Error_Handler>
					}


					// Calcul FFT
					float dst[FFT_SIZE];
					arm_rfft_fast_f32(&fft, frame, dst, 0);
 8001b36:	f507 62c1 	add.w	r2, r7, #1544	@ 0x608
 8001b3a:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 8001b3e:	2300      	movs	r3, #0
 8001b40:	4886      	ldr	r0, [pc, #536]	@ (8001d5c <main+0x6b8>)
 8001b42:	f00e f9c5 	bl	800fed0 <arm_rfft_fast_f32>

					// Calcul de la magnitude des valeurs complexes
					arm_cmplx_mag_f32(dst, mag, FFT_SIZE / 2 + 1);
 8001b46:	1d39      	adds	r1, r7, #4
 8001b48:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8001b4c:	2281      	movs	r2, #129	@ 0x81
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00e fe22 	bl	8010798 <arm_cmplx_mag_f32>

					// Stockage dans le spectrogramme
					for (uint32_t i = 0; i < FFT_SIZE / 2 + 1; i++) {
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 3a50 	str.w	r3, [r7, #2640]	@ 0xa50
 8001b5a:	e019      	b.n	8001b90 <main+0x4ec>
						spectrogram[idx][i] = mag[i];
 8001b5c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8001b60:	f6a3 227c 	subw	r2, r3, #2684	@ 0xa7c
 8001b64:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	6819      	ldr	r1, [r3, #0]
 8001b6e:	487d      	ldr	r0, [pc, #500]	@ (8001d64 <main+0x6c0>)
 8001b70:	f8d7 2a60 	ldr.w	r2, [r7, #2656]	@ 0xa60
 8001b74:	4613      	mov	r3, r2
 8001b76:	01db      	lsls	r3, r3, #7
 8001b78:	4413      	add	r3, r2
 8001b7a:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	@ 0xa50
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4403      	add	r3, r0
 8001b84:	6019      	str	r1, [r3, #0]
					for (uint32_t i = 0; i < FFT_SIZE / 2 + 1; i++) {
 8001b86:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f8c7 3a50 	str.w	r3, [r7, #2640]	@ 0xa50
 8001b90:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 8001b94:	2b80      	cmp	r3, #128	@ 0x80
 8001b96:	d9e1      	bls.n	8001b5c <main+0x4b8>
				for (uint32_t idx = 0; idx < 124; idx++) {
 8001b98:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	@ 0xa60
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f8c7 3a60 	str.w	r3, [r7, #2656]	@ 0xa60
 8001ba2:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	@ 0xa60
 8001ba6:	2b7b      	cmp	r3, #123	@ 0x7b
 8001ba8:	f67f af14 	bls.w	80019d4 <main+0x330>
					}
				}

				// -------------------- NORMALISATION DU SPECTROGRAMME --------------------

				printf("Normalisation du spectrogramme...\r\n");
 8001bac:	486e      	ldr	r0, [pc, #440]	@ (8001d68 <main+0x6c4>)
 8001bae:	f013 fbfb 	bl	80153a8 <puts>
				float min_spec = 1e6, max_spec = -1e6;
 8001bb2:	4b6e      	ldr	r3, [pc, #440]	@ (8001d6c <main+0x6c8>)
 8001bb4:	f607 224c 	addw	r2, r7, #2636	@ 0xa4c
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b6d      	ldr	r3, [pc, #436]	@ (8001d70 <main+0x6cc>)
 8001bbc:	f607 2248 	addw	r2, r7, #2632	@ 0xa48
 8001bc0:	6013      	str	r3, [r2, #0]

				// Trouver min et max du spectrogramme
				for (uint32_t i = 0; i < 124; i++) {
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c7 3a44 	str.w	r3, [r7, #2628]	@ 0xa44
 8001bc8:	e05b      	b.n	8001c82 <main+0x5de>
					for (uint32_t j = 0; j < FFT_SIZE / 2 + 1; j++) {
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 3a40 	str.w	r3, [r7, #2624]	@ 0xa40
 8001bd0:	e04e      	b.n	8001c70 <main+0x5cc>
						if (spectrogram[i][j] < min_spec) min_spec = spectrogram[i][j];
 8001bd2:	4964      	ldr	r1, [pc, #400]	@ (8001d64 <main+0x6c0>)
 8001bd4:	f8d7 2a44 	ldr.w	r2, [r7, #2628]	@ 0xa44
 8001bd8:	4613      	mov	r3, r2
 8001bda:	01db      	lsls	r3, r3, #7
 8001bdc:	4413      	add	r3, r2
 8001bde:	f8d7 2a40 	ldr.w	r2, [r7, #2624]	@ 0xa40
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	edd3 7a00 	vldr	s15, [r3]
 8001bec:	f607 234c 	addw	r3, r7, #2636	@ 0xa4c
 8001bf0:	ed93 7a00 	vldr	s14, [r3]
 8001bf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfc:	dd0e      	ble.n	8001c1c <main+0x578>
 8001bfe:	4959      	ldr	r1, [pc, #356]	@ (8001d64 <main+0x6c0>)
 8001c00:	f8d7 2a44 	ldr.w	r2, [r7, #2628]	@ 0xa44
 8001c04:	4613      	mov	r3, r2
 8001c06:	01db      	lsls	r3, r3, #7
 8001c08:	4413      	add	r3, r2
 8001c0a:	f8d7 2a40 	ldr.w	r2, [r7, #2624]	@ 0xa40
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f607 224c 	addw	r2, r7, #2636	@ 0xa4c
 8001c1a:	6013      	str	r3, [r2, #0]
						if (spectrogram[i][j] > max_spec) max_spec = spectrogram[i][j];
 8001c1c:	4951      	ldr	r1, [pc, #324]	@ (8001d64 <main+0x6c0>)
 8001c1e:	f8d7 2a44 	ldr.w	r2, [r7, #2628]	@ 0xa44
 8001c22:	4613      	mov	r3, r2
 8001c24:	01db      	lsls	r3, r3, #7
 8001c26:	4413      	add	r3, r2
 8001c28:	f8d7 2a40 	ldr.w	r2, [r7, #2624]	@ 0xa40
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	edd3 7a00 	vldr	s15, [r3]
 8001c36:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8001c3a:	ed93 7a00 	vldr	s14, [r3]
 8001c3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	d50e      	bpl.n	8001c66 <main+0x5c2>
 8001c48:	4946      	ldr	r1, [pc, #280]	@ (8001d64 <main+0x6c0>)
 8001c4a:	f8d7 2a44 	ldr.w	r2, [r7, #2628]	@ 0xa44
 8001c4e:	4613      	mov	r3, r2
 8001c50:	01db      	lsls	r3, r3, #7
 8001c52:	4413      	add	r3, r2
 8001c54:	f8d7 2a40 	ldr.w	r2, [r7, #2624]	@ 0xa40
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f607 2248 	addw	r2, r7, #2632	@ 0xa48
 8001c64:	6013      	str	r3, [r2, #0]
					for (uint32_t j = 0; j < FFT_SIZE / 2 + 1; j++) {
 8001c66:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f8c7 3a40 	str.w	r3, [r7, #2624]	@ 0xa40
 8001c70:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 8001c74:	2b80      	cmp	r3, #128	@ 0x80
 8001c76:	d9ac      	bls.n	8001bd2 <main+0x52e>
				for (uint32_t i = 0; i < 124; i++) {
 8001c78:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	@ 0xa44
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f8c7 3a44 	str.w	r3, [r7, #2628]	@ 0xa44
 8001c82:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	@ 0xa44
 8001c86:	2b7b      	cmp	r3, #123	@ 0x7b
 8001c88:	d99f      	bls.n	8001bca <main+0x526>
					}
				}

				float spec_range = max_spec - min_spec;
 8001c8a:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8001c8e:	ed93 7a00 	vldr	s14, [r3]
 8001c92:	f607 234c 	addw	r3, r7, #2636	@ 0xa4c
 8001c96:	edd3 7a00 	vldr	s15, [r3]
 8001c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9e:	f607 233c 	addw	r3, r7, #2620	@ 0xa3c
 8001ca2:	edc3 7a00 	vstr	s15, [r3]
				if (spec_range == 0) spec_range = 1.0f;
 8001ca6:	f607 233c 	addw	r3, r7, #2620	@ 0xa3c
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	d104      	bne.n	8001cc2 <main+0x61e>
 8001cb8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001cbc:	f607 223c 	addw	r2, r7, #2620	@ 0xa3c
 8001cc0:	6013      	str	r3, [r2, #0]

				// Appliquer la normalisation
				for (uint32_t i = 0; i < 124; i++) {
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8c7 3a38 	str.w	r3, [r7, #2616]	@ 0xa38
 8001cc8:	e037      	b.n	8001d3a <main+0x696>
					for (uint32_t j = 0; j < FFT_SIZE / 2 + 1; j++) {
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 3a34 	str.w	r3, [r7, #2612]	@ 0xa34
 8001cd0:	e02a      	b.n	8001d28 <main+0x684>
						spectrogram[i][j] = (spectrogram[i][j] - min_spec) / spec_range;
 8001cd2:	4924      	ldr	r1, [pc, #144]	@ (8001d64 <main+0x6c0>)
 8001cd4:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	@ 0xa38
 8001cd8:	4613      	mov	r3, r2
 8001cda:	01db      	lsls	r3, r3, #7
 8001cdc:	4413      	add	r3, r2
 8001cde:	f8d7 2a34 	ldr.w	r2, [r7, #2612]	@ 0xa34
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	ed93 7a00 	vldr	s14, [r3]
 8001cec:	f607 234c 	addw	r3, r7, #2636	@ 0xa4c
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cf8:	f607 233c 	addw	r3, r7, #2620	@ 0xa3c
 8001cfc:	ed93 7a00 	vldr	s14, [r3]
 8001d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d04:	4917      	ldr	r1, [pc, #92]	@ (8001d64 <main+0x6c0>)
 8001d06:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	@ 0xa38
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	01db      	lsls	r3, r3, #7
 8001d0e:	4413      	add	r3, r2
 8001d10:	f8d7 2a34 	ldr.w	r2, [r7, #2612]	@ 0xa34
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	edc3 7a00 	vstr	s15, [r3]
					for (uint32_t j = 0; j < FFT_SIZE / 2 + 1; j++) {
 8001d1e:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	@ 0xa34
 8001d22:	3301      	adds	r3, #1
 8001d24:	f8c7 3a34 	str.w	r3, [r7, #2612]	@ 0xa34
 8001d28:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	@ 0xa34
 8001d2c:	2b80      	cmp	r3, #128	@ 0x80
 8001d2e:	d9d0      	bls.n	8001cd2 <main+0x62e>
				for (uint32_t i = 0; i < 124; i++) {
 8001d30:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	@ 0xa38
 8001d34:	3301      	adds	r3, #1
 8001d36:	f8c7 3a38 	str.w	r3, [r7, #2616]	@ 0xa38
 8001d3a:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	@ 0xa38
 8001d3e:	2b7b      	cmp	r3, #123	@ 0x7b
 8001d40:	d9c3      	bls.n	8001cca <main+0x626>
					}
				}

				// Vérification des valeurs normalisées
				printf("Premières valeurs normalisées du spectrogramme : ");
 8001d42:	480c      	ldr	r0, [pc, #48]	@ (8001d74 <main+0x6d0>)
 8001d44:	f013 fac8 	bl	80152d8 <iprintf>
				for (uint32_t i = 0; i < 10; i++) {
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 3a30 	str.w	r3, [r7, #2608]	@ 0xa30
 8001d4e:	e026      	b.n	8001d9e <main+0x6fa>
 8001d50:	c0007d00 	.word	0xc0007d00
 8001d54:	200308f4 	.word	0x200308f4
 8001d58:	43800000 	.word	0x43800000
 8001d5c:	200308d8 	.word	0x200308d8
 8001d60:	080182cc 	.word	0x080182cc
 8001d64:	c0017700 	.word	0xc0017700
 8001d68:	08018300 	.word	0x08018300
 8001d6c:	49742400 	.word	0x49742400
 8001d70:	c9742400 	.word	0xc9742400
 8001d74:	08018324 	.word	0x08018324
					printf("%.6f ", spectrogram[0][i]);
 8001d78:	4aa8      	ldr	r2, [pc, #672]	@ (800201c <main+0x978>)
 8001d7a:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	@ 0xa30
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fc5f 	bl	8000648 <__aeabi_f2d>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	48a4      	ldr	r0, [pc, #656]	@ (8002020 <main+0x97c>)
 8001d90:	f013 faa2 	bl	80152d8 <iprintf>
				for (uint32_t i = 0; i < 10; i++) {
 8001d94:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	@ 0xa30
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f8c7 3a30 	str.w	r3, [r7, #2608]	@ 0xa30
 8001d9e:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	@ 0xa30
 8001da2:	2b09      	cmp	r3, #9
 8001da4:	d9e8      	bls.n	8001d78 <main+0x6d4>
				}
				printf("\r\n");
 8001da6:	489f      	ldr	r0, [pc, #636]	@ (8002024 <main+0x980>)
 8001da8:	f013 fafe 	bl	80153a8 <puts>

				// -------------------- SAUVEGARDE SUR SD --------------------

				printf("Sauvegarde du spectrogramme...\r\n");
 8001dac:	489e      	ldr	r0, [pc, #632]	@ (8002028 <main+0x984>)
 8001dae:	f013 fafb 	bl	80153a8 <puts>

				res = f_open(&file, "data.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8001db2:	220a      	movs	r2, #10
 8001db4:	499d      	ldr	r1, [pc, #628]	@ (800202c <main+0x988>)
 8001db6:	489e      	ldr	r0, [pc, #632]	@ (8002030 <main+0x98c>)
 8001db8:	f00c f9d4 	bl	800e164 <f_open>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4b9c      	ldr	r3, [pc, #624]	@ (8002034 <main+0x990>)
 8001dc2:	701a      	strb	r2, [r3, #0]
				if (res == FR_OK) {
 8001dc4:	4b9b      	ldr	r3, [pc, #620]	@ (8002034 <main+0x990>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d16e      	bne.n	8001eaa <main+0x806>
				    f_write(&file, "[\n", 2, &bw);
 8001dcc:	4b9a      	ldr	r3, [pc, #616]	@ (8002038 <main+0x994>)
 8001dce:	2202      	movs	r2, #2
 8001dd0:	499a      	ldr	r1, [pc, #616]	@ (800203c <main+0x998>)
 8001dd2:	4897      	ldr	r0, [pc, #604]	@ (8002030 <main+0x98c>)
 8001dd4:	f00c fcbf 	bl	800e756 <f_write>
				    char buffer[32];

				    for (uint32_t i = 0; i < 124; i++) {
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 3a2c 	str.w	r3, [r7, #2604]	@ 0xa2c
 8001dde:	e053      	b.n	8001e88 <main+0x7e4>
				        f_write(&file, " [", 2, &bw);
 8001de0:	4b95      	ldr	r3, [pc, #596]	@ (8002038 <main+0x994>)
 8001de2:	2202      	movs	r2, #2
 8001de4:	4996      	ldr	r1, [pc, #600]	@ (8002040 <main+0x99c>)
 8001de6:	4892      	ldr	r0, [pc, #584]	@ (8002030 <main+0x98c>)
 8001de8:	f00c fcb5 	bl	800e756 <f_write>
				        for (uint32_t j = 0; j < 129; j++) {
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 3a28 	str.w	r3, [r7, #2600]	@ 0xa28
 8001df2:	e030      	b.n	8001e56 <main+0x7b2>
				            sprintf(buffer, "%.8f", spectrogram[i][j]);
 8001df4:	4989      	ldr	r1, [pc, #548]	@ (800201c <main+0x978>)
 8001df6:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	@ 0xa2c
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	01db      	lsls	r3, r3, #7
 8001dfe:	4413      	add	r3, r2
 8001e00:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	@ 0xa28
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fc1b 	bl	8000648 <__aeabi_f2d>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	f507 60c1 	add.w	r0, r7, #1544	@ 0x608
 8001e1a:	498a      	ldr	r1, [pc, #552]	@ (8002044 <main+0x9a0>)
 8001e1c:	f013 facc 	bl	80153b8 <siprintf>
				            f_write(&file, buffer, strlen(buffer), &bw);
 8001e20:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe faa3 	bl	8000370 <strlen>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	f507 61c1 	add.w	r1, r7, #1544	@ 0x608
 8001e30:	4b81      	ldr	r3, [pc, #516]	@ (8002038 <main+0x994>)
 8001e32:	487f      	ldr	r0, [pc, #508]	@ (8002030 <main+0x98c>)
 8001e34:	f00c fc8f 	bl	800e756 <f_write>

				            if (j < 128) {  // Add space between values but no comma
 8001e38:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	@ 0xa28
 8001e3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e3e:	d805      	bhi.n	8001e4c <main+0x7a8>
				                f_write(&file, " ", 1, &bw);
 8001e40:	4b7d      	ldr	r3, [pc, #500]	@ (8002038 <main+0x994>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	4980      	ldr	r1, [pc, #512]	@ (8002048 <main+0x9a4>)
 8001e46:	487a      	ldr	r0, [pc, #488]	@ (8002030 <main+0x98c>)
 8001e48:	f00c fc85 	bl	800e756 <f_write>
				        for (uint32_t j = 0; j < 129; j++) {
 8001e4c:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	@ 0xa28
 8001e50:	3301      	adds	r3, #1
 8001e52:	f8c7 3a28 	str.w	r3, [r7, #2600]	@ 0xa28
 8001e56:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	@ 0xa28
 8001e5a:	2b80      	cmp	r3, #128	@ 0x80
 8001e5c:	d9ca      	bls.n	8001df4 <main+0x750>
				            }
				        }
				        f_write(&file, "]", 1, &bw);
 8001e5e:	4b76      	ldr	r3, [pc, #472]	@ (8002038 <main+0x994>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	497a      	ldr	r1, [pc, #488]	@ (800204c <main+0x9a8>)
 8001e64:	4872      	ldr	r0, [pc, #456]	@ (8002030 <main+0x98c>)
 8001e66:	f00c fc76 	bl	800e756 <f_write>

				        if (i < 123) { // New line for the next row except the last one
 8001e6a:	f8d7 3a2c 	ldr.w	r3, [r7, #2604]	@ 0xa2c
 8001e6e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001e70:	d805      	bhi.n	8001e7e <main+0x7da>
				            f_write(&file, "\n", 1, &bw);
 8001e72:	4b71      	ldr	r3, [pc, #452]	@ (8002038 <main+0x994>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	4976      	ldr	r1, [pc, #472]	@ (8002050 <main+0x9ac>)
 8001e78:	486d      	ldr	r0, [pc, #436]	@ (8002030 <main+0x98c>)
 8001e7a:	f00c fc6c 	bl	800e756 <f_write>
				    for (uint32_t i = 0; i < 124; i++) {
 8001e7e:	f8d7 3a2c 	ldr.w	r3, [r7, #2604]	@ 0xa2c
 8001e82:	3301      	adds	r3, #1
 8001e84:	f8c7 3a2c 	str.w	r3, [r7, #2604]	@ 0xa2c
 8001e88:	f8d7 3a2c 	ldr.w	r3, [r7, #2604]	@ 0xa2c
 8001e8c:	2b7b      	cmp	r3, #123	@ 0x7b
 8001e8e:	d9a7      	bls.n	8001de0 <main+0x73c>
				        }
				    }

				    f_write(&file, "\n]", 2, &bw);
 8001e90:	4b69      	ldr	r3, [pc, #420]	@ (8002038 <main+0x994>)
 8001e92:	2202      	movs	r2, #2
 8001e94:	496f      	ldr	r1, [pc, #444]	@ (8002054 <main+0x9b0>)
 8001e96:	4866      	ldr	r0, [pc, #408]	@ (8002030 <main+0x98c>)
 8001e98:	f00c fc5d 	bl	800e756 <f_write>
				    f_close(&file);
 8001e9c:	4864      	ldr	r0, [pc, #400]	@ (8002030 <main+0x98c>)
 8001e9e:	f00c fe4d 	bl	800eb3c <f_close>
				    printf("Sauvegarde réussie !\r\n");
 8001ea2:	486d      	ldr	r0, [pc, #436]	@ (8002058 <main+0x9b4>)
 8001ea4:	f013 fa80 	bl	80153a8 <puts>
 8001ea8:	e002      	b.n	8001eb0 <main+0x80c>
				} else {
				    printf("Échec de la sauvegarde du spectrogramme !\r\n");
 8001eaa:	486c      	ldr	r0, [pc, #432]	@ (800205c <main+0x9b8>)
 8001eac:	f013 fa7c 	bl	80153a8 <puts>
				}

				// -------------------- PRÉPARATION POUR L'IA --------------------

				// Mise à plat du spectrogramme dans aiInData
				for (uint32_t i = 0; i < 124; i++) {
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 3a24 	str.w	r3, [r7, #2596]	@ 0xa24
 8001eb6:	e029      	b.n	8001f0c <main+0x868>
					for (uint32_t j = 0; j < FFT_SIZE / 2 + 1; j++) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 3a20 	str.w	r3, [r7, #2592]	@ 0xa20
 8001ebe:	e01c      	b.n	8001efa <main+0x856>
						aiInData[i * (FFT_SIZE / 2 + 1) + j] = spectrogram[i][j];
 8001ec0:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	@ 0xa24
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	01db      	lsls	r3, r3, #7
 8001ec8:	441a      	add	r2, r3
 8001eca:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	@ 0xa20
 8001ece:	18d1      	adds	r1, r2, r3
 8001ed0:	4852      	ldr	r0, [pc, #328]	@ (800201c <main+0x978>)
 8001ed2:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	@ 0xa24
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	01db      	lsls	r3, r3, #7
 8001eda:	4413      	add	r3, r2
 8001edc:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	@ 0xa20
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4403      	add	r3, r0
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	485d      	ldr	r0, [pc, #372]	@ (8002060 <main+0x9bc>)
 8001eea:	008b      	lsls	r3, r1, #2
 8001eec:	4403      	add	r3, r0
 8001eee:	601a      	str	r2, [r3, #0]
					for (uint32_t j = 0; j < FFT_SIZE / 2 + 1; j++) {
 8001ef0:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	@ 0xa20
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f8c7 3a20 	str.w	r3, [r7, #2592]	@ 0xa20
 8001efa:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	@ 0xa20
 8001efe:	2b80      	cmp	r3, #128	@ 0x80
 8001f00:	d9de      	bls.n	8001ec0 <main+0x81c>
				for (uint32_t i = 0; i < 124; i++) {
 8001f02:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	@ 0xa24
 8001f06:	3301      	adds	r3, #1
 8001f08:	f8c7 3a24 	str.w	r3, [r7, #2596]	@ 0xa24
 8001f0c:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	@ 0xa24
 8001f10:	2b7b      	cmp	r3, #123	@ 0x7b
 8001f12:	d9d1      	bls.n	8001eb8 <main+0x814>
					}
				}

				// Vérification avant passage au modèle
				printf("Premières valeurs envoyées au modèle : ");
 8001f14:	4853      	ldr	r0, [pc, #332]	@ (8002064 <main+0x9c0>)
 8001f16:	f013 f9df 	bl	80152d8 <iprintf>
				for (uint32_t i = 0; i < 10; i++) {
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 3a1c 	str.w	r3, [r7, #2588]	@ 0xa1c
 8001f20:	e012      	b.n	8001f48 <main+0x8a4>
					printf("%.6f ", aiInData[i]);
 8001f22:	4a4f      	ldr	r2, [pc, #316]	@ (8002060 <main+0x9bc>)
 8001f24:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	@ 0xa1c
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fb8a 	bl	8000648 <__aeabi_f2d>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4839      	ldr	r0, [pc, #228]	@ (8002020 <main+0x97c>)
 8001f3a:	f013 f9cd 	bl	80152d8 <iprintf>
				for (uint32_t i = 0; i < 10; i++) {
 8001f3e:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	@ 0xa1c
 8001f42:	3301      	adds	r3, #1
 8001f44:	f8c7 3a1c 	str.w	r3, [r7, #2588]	@ 0xa1c
 8001f48:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	@ 0xa1c
 8001f4c:	2b09      	cmp	r3, #9
 8001f4e:	d9e8      	bls.n	8001f22 <main+0x87e>
				}
				printf("\r\n");
 8001f50:	4834      	ldr	r0, [pc, #208]	@ (8002024 <main+0x980>)
 8001f52:	f013 fa29 	bl	80153a8 <puts>

				// -------------------- INFÉRENCE AVEC IA --------------------
				printf("Exécution de l'inférence...\r\n");
 8001f56:	4844      	ldr	r0, [pc, #272]	@ (8002068 <main+0x9c4>)
 8001f58:	f013 fa26 	bl	80153a8 <puts>
				AI_Run(aiInData, aiOutData);
 8001f5c:	4943      	ldr	r1, [pc, #268]	@ (800206c <main+0x9c8>)
 8001f5e:	4840      	ldr	r0, [pc, #256]	@ (8002060 <main+0x9bc>)
 8001f60:	f000 fa62 	bl	8002428 <AI_Run>

				// -------------------- SOFTMAX ET PRÉDICTION --------------------
				softmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8001f64:	2106      	movs	r1, #6
 8001f66:	4841      	ldr	r0, [pc, #260]	@ (800206c <main+0x9c8>)
 8001f68:	f000 fac6 	bl	80024f8 <softmax>

				// Vérifier la somme des probabilités
				float sum_softmax = 0;
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	f607 2218 	addw	r2, r7, #2584	@ 0xa18
 8001f74:	6013      	str	r3, [r2, #0]
				for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 3a14 	str.w	r3, [r7, #2580]	@ 0xa14
 8001f7c:	e015      	b.n	8001faa <main+0x906>
					sum_softmax += aiOutData[i];
 8001f7e:	4a3b      	ldr	r2, [pc, #236]	@ (800206c <main+0x9c8>)
 8001f80:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8001f90:	ed93 7a00 	vldr	s14, [r3]
 8001f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f98:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8001f9c:	edc3 7a00 	vstr	s15, [r3]
				for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8001fa0:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	f8c7 3a14 	str.w	r3, [r7, #2580]	@ 0xa14
 8001faa:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d9e5      	bls.n	8001f7e <main+0x8da>
				}
				printf("Somme des probabilités Softmax : %f\r\n", sum_softmax);
 8001fb2:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	f7fe fb46 	bl	8000648 <__aeabi_f2d>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	482b      	ldr	r0, [pc, #172]	@ (8002070 <main+0x9cc>)
 8001fc2:	f013 f989 	bl	80152d8 <iprintf>

				// Trouver la classe avec la probabilité max
				uint32_t class_idx = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8001fc6:	2106      	movs	r1, #6
 8001fc8:	4828      	ldr	r0, [pc, #160]	@ (800206c <main+0x9c8>)
 8001fca:	f000 fa65 	bl	8002498 <argmax>
 8001fce:	f8c7 0a0c 	str.w	r0, [r7, #2572]	@ 0xa0c
				printf("Mot détecté : %s (Confiance : %.2f%%)\r\n", activities[class_idx], aiOutData[class_idx] * 100);
 8001fd2:	4a28      	ldr	r2, [pc, #160]	@ (8002074 <main+0x9d0>)
 8001fd4:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8001fd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001fdc:	4a23      	ldr	r2, [pc, #140]	@ (800206c <main+0x9c8>)
 8001fde:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	edd3 7a00 	vldr	s15, [r3]
 8001fea:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002078 <main+0x9d4>
 8001fee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff2:	ee17 0a90 	vmov	r0, s15
 8001ff6:	f7fe fb27 	bl	8000648 <__aeabi_f2d>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4621      	mov	r1, r4
 8002000:	481e      	ldr	r0, [pc, #120]	@ (800207c <main+0x9d8>)
 8002002:	f013 f969 	bl	80152d8 <iprintf>
        }

        HAL_Delay(100);  // Small delay for stability
 8002006:	2064      	movs	r0, #100	@ 0x64
 8002008:	f003 fa2c 	bl	8005464 <HAL_Delay>
    {
 800200c:	f7ff bb8a 	b.w	8001724 <main+0x80>
					return;
 8002010:	bf00      	nop
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
}
 8002012:	4618      	mov	r0, r3
 8002014:	f507 6728 	add.w	r7, r7, #2688	@ 0xa80
 8002018:	46bd      	mov	sp, r7
 800201a:	bdb0      	pop	{r4, r5, r7, pc}
 800201c:	c0017700 	.word	0xc0017700
 8002020:	08018284 	.word	0x08018284
 8002024:	0801828c 	.word	0x0801828c
 8002028:	08018358 	.word	0x08018358
 800202c:	08018378 	.word	0x08018378
 8002030:	20000c64 	.word	0x20000c64
 8002034:	20000c5c 	.word	0x20000c5c
 8002038:	20000c60 	.word	0x20000c60
 800203c:	08018384 	.word	0x08018384
 8002040:	08018388 	.word	0x08018388
 8002044:	0801838c 	.word	0x0801838c
 8002048:	08018394 	.word	0x08018394
 800204c:	08018398 	.word	0x08018398
 8002050:	0801839c 	.word	0x0801839c
 8002054:	080183a0 	.word	0x080183a0
 8002058:	080183a4 	.word	0x080183a4
 800205c:	080183bc 	.word	0x080183bc
 8002060:	20000e98 	.word	0x20000e98
 8002064:	080183e8 	.word	0x080183e8
 8002068:	08018414 	.word	0x08018414
 800206c:	20010888 	.word	0x20010888
 8002070:	08018434 	.word	0x08018434
 8002074:	20000000 	.word	0x20000000
 8002078:	42c80000 	.word	0x42c80000
 800207c:	0801845c 	.word	0x0801845c

08002080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b094      	sub	sp, #80	@ 0x50
 8002084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002086:	f107 0320 	add.w	r3, r7, #32
 800208a:	2230      	movs	r2, #48	@ 0x30
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f013 fa8a 	bl	80155a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002150 <SystemClock_Config+0xd0>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	4a29      	ldr	r2, [pc, #164]	@ (8002150 <SystemClock_Config+0xd0>)
 80020aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b0:	4b27      	ldr	r3, [pc, #156]	@ (8002150 <SystemClock_Config+0xd0>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020bc:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <SystemClock_Config+0xd4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a24      	ldr	r2, [pc, #144]	@ (8002154 <SystemClock_Config+0xd4>)
 80020c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b22      	ldr	r3, [pc, #136]	@ (8002154 <SystemClock_Config+0xd4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020d4:	2302      	movs	r3, #2
 80020d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020d8:	2301      	movs	r3, #1
 80020da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020dc:	2310      	movs	r3, #16
 80020de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020e0:	2302      	movs	r3, #2
 80020e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020e4:	2300      	movs	r3, #0
 80020e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020e8:	2308      	movs	r3, #8
 80020ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80020ec:	23c8      	movs	r3, #200	@ 0xc8
 80020ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020f0:	2302      	movs	r3, #2
 80020f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80020f4:	2308      	movs	r3, #8
 80020f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f8:	f107 0320 	add.w	r3, r7, #32
 80020fc:	4618      	mov	r0, r3
 80020fe:	f005 f997 	bl	8007430 <HAL_RCC_OscConfig>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002108:	f000 fa65 	bl	80025d6 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800210c:	f005 f940 	bl	8007390 <HAL_PWREx_EnableOverDrive>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002116:	f000 fa5e 	bl	80025d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800211a:	230f      	movs	r3, #15
 800211c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800211e:	2302      	movs	r3, #2
 8002120:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002126:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800212a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800212c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002130:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	2106      	movs	r1, #6
 8002138:	4618      	mov	r0, r3
 800213a:	f005 fc1d 	bl	8007978 <HAL_RCC_ClockConfig>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002144:	f000 fa47 	bl	80025d6 <Error_Handler>
  }
}
 8002148:	bf00      	nop
 800214a:	3750      	adds	r7, #80	@ 0x50
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800
 8002154:	40007000 	.word	0x40007000

08002158 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* Needed to send messages easier to terminal for debugging */
PUTCHAR_PROTOTYPE
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8002160:	1d39      	adds	r1, r7, #4
 8002162:	2364      	movs	r3, #100	@ 0x64
 8002164:	2201      	movs	r2, #1
 8002166:	4804      	ldr	r0, [pc, #16]	@ (8002178 <__io_putchar+0x20>)
 8002168:	f008 f9d1 	bl	800a50e <HAL_UART_Transmit>
return ch;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20030f24 	.word	0x20030f24

0800217c <HAL_GPIO_EXTI_Callback>:
/* ======================================================== */


/* User button interruption and variable change */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if (GPIO_Pin == USR_BTN_Pin && button_pressed == 0)
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800218c:	d10a      	bne.n	80021a4 <HAL_GPIO_EXTI_Callback+0x28>
 800218e:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <HAL_GPIO_EXTI_Callback+0x30>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <HAL_GPIO_EXTI_Callback+0x28>
      {
	  	  button_pressed = 1;
 8002198:	4b04      	ldr	r3, [pc, #16]	@ (80021ac <HAL_GPIO_EXTI_Callback+0x30>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
	  	  printf("Button pressed...\r\n");
 800219e:	4804      	ldr	r0, [pc, #16]	@ (80021b0 <HAL_GPIO_EXTI_Callback+0x34>)
 80021a0:	f013 f902 	bl	80153a8 <puts>
      }
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	200308f0 	.word	0x200308f0
 80021b0:	08018488 	.word	0x08018488

080021b4 <check_button_release>:
/* ======================================================== */


/* Used to verify the state of the button */
void check_button_release()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOI, USR_BTN_Pin) == GPIO_PIN_RESET) button_pressed = 0;
 80021b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021bc:	4805      	ldr	r0, [pc, #20]	@ (80021d4 <check_button_release+0x20>)
 80021be:	f004 faa5 	bl	800670c <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <check_button_release+0x1a>
 80021c8:	4b03      	ldr	r3, [pc, #12]	@ (80021d8 <check_button_release+0x24>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40022000 	.word	0x40022000
 80021d8:	200308f0 	.word	0x200308f0

080021dc <SDCard_InitAndFormat>:
/* ======================================================== */


/* Used to initialize the SD card */
void SDCard_InitAndFormat(void) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af02      	add	r7, sp, #8
    FRESULT res;

    // Mount the file system
    res = f_mount(&SDFatFS, (TCHAR const *)SDPath, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	491e      	ldr	r1, [pc, #120]	@ (8002260 <SDCard_InitAndFormat+0x84>)
 80021e6:	481f      	ldr	r0, [pc, #124]	@ (8002264 <SDCard_InitAndFormat+0x88>)
 80021e8:	f00b ff76 	bl	800e0d8 <f_mount>
 80021ec:	4603      	mov	r3, r0
 80021ee:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <SDCard_InitAndFormat+0x28>
        printf("Error: Failed to mount SD card (Code: %d).\r\n", res);
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	4619      	mov	r1, r3
 80021fa:	481b      	ldr	r0, [pc, #108]	@ (8002268 <SDCard_InitAndFormat+0x8c>)
 80021fc:	f013 f86c 	bl	80152d8 <iprintf>
        Error_Handler();
 8002200:	f000 f9e9 	bl	80025d6 <Error_Handler>
    }

    // Format the SD card
    res = f_mkfs((TCHAR const *)SDPath, FM_ANY, 0, workBuffer_init, sizeof(workBuffer_init));
 8002204:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	4b18      	ldr	r3, [pc, #96]	@ (800226c <SDCard_InitAndFormat+0x90>)
 800220c:	2200      	movs	r2, #0
 800220e:	2107      	movs	r1, #7
 8002210:	4813      	ldr	r0, [pc, #76]	@ (8002260 <SDCard_InitAndFormat+0x84>)
 8002212:	f00c fec7 	bl	800efa4 <f_mkfs>
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <SDCard_InitAndFormat+0x52>
        printf("Error: Failed to format SD card (Code: %d).\r\n", res);
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	4619      	mov	r1, r3
 8002224:	4812      	ldr	r0, [pc, #72]	@ (8002270 <SDCard_InitAndFormat+0x94>)
 8002226:	f013 f857 	bl	80152d8 <iprintf>
        Error_Handler();
 800222a:	f000 f9d4 	bl	80025d6 <Error_Handler>
    }

    // Unmount the file system to complete formatting
    res = f_mount(NULL, (TCHAR const *)SDPath, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	490b      	ldr	r1, [pc, #44]	@ (8002260 <SDCard_InitAndFormat+0x84>)
 8002232:	2000      	movs	r0, #0
 8002234:	f00b ff50 	bl	800e0d8 <f_mount>
 8002238:	4603      	mov	r3, r0
 800223a:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <SDCard_InitAndFormat+0x74>
        printf("Error: Failed to unmount SD card after formatting (Code: %d).\r\n", res);
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	4619      	mov	r1, r3
 8002246:	480b      	ldr	r0, [pc, #44]	@ (8002274 <SDCard_InitAndFormat+0x98>)
 8002248:	f013 f846 	bl	80152d8 <iprintf>
        Error_Handler();
 800224c:	f000 f9c3 	bl	80025d6 <Error_Handler>
    }

    printf("SD card initialized and formatted successfully.\r\n");
 8002250:	4809      	ldr	r0, [pc, #36]	@ (8002278 <SDCard_InitAndFormat+0x9c>)
 8002252:	f013 f8a9 	bl	80153a8 <puts>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20035d34 	.word	0x20035d34
 8002264:	20035d38 	.word	0x20035d38
 8002268:	0801849c 	.word	0x0801849c
 800226c:	20000a5c 	.word	0x20000a5c
 8002270:	080184cc 	.word	0x080184cc
 8002274:	080184fc 	.word	0x080184fc
 8002278:	0801853c 	.word	0x0801853c

0800227c <read_wav_file>:
    // Close the file
    f_close(&file);
}
/* ======================================================== */

int read_wav_file(const char *filename, int16_t *buffer) {
 800227c:	b580      	push	{r7, lr}
 800227e:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 8002282:	af00      	add	r7, sp, #0
 8002284:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002288:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800228c:	6018      	str	r0, [r3, #0]
 800228e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002292:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002296:	6019      	str	r1, [r3, #0]
    FIL file;
    UINT bytes_read;
    FRESULT result = f_open(&file, filename, FA_READ);
 8002298:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800229c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80022a0:	f107 000c 	add.w	r0, r7, #12
 80022a4:	2201      	movs	r2, #1
 80022a6:	6819      	ldr	r1, [r3, #0]
 80022a8:	f00b ff5c 	bl	800e164 <f_open>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

    if (result != FR_OK) {
 80022b2:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <read_wav_file+0x44>
        return -1;  // File open error
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	e02a      	b.n	8002316 <read_wav_file+0x9a>
    }

    // Skip WAV header (44 bytes)
    f_lseek(&file, 44);
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	212c      	movs	r1, #44	@ 0x2c
 80022c6:	4618      	mov	r0, r3
 80022c8:	f00c fc62 	bl	800eb90 <f_lseek>

    // Read audio samples into the buffer
    result = f_read(&file, buffer, (BUFFER_SIZE*2) * sizeof(int16_t), &bytes_read);
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 80022d4:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 80022d8:	f107 000c 	add.w	r0, r7, #12
 80022dc:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 80022e0:	6809      	ldr	r1, [r1, #0]
 80022e2:	f00c f8f9 	bl	800e4d8 <f_read>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

    if (result != FR_OK) {
 80022ec:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <read_wav_file+0x88>
        f_close(&file);
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	4618      	mov	r0, r3
 80022fa:	f00c fc1f 	bl	800eb3c <f_close>
        return -1;  // Read error
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	e008      	b.n	8002316 <read_wav_file+0x9a>
    }

    f_close(&file);
 8002304:	f107 030c 	add.w	r3, r7, #12
 8002308:	4618      	mov	r0, r3
 800230a:	f00c fc17 	bl	800eb3c <f_close>
    printf("file successfully read! \r\n");
 800230e:	4804      	ldr	r0, [pc, #16]	@ (8002320 <read_wav_file+0xa4>)
 8002310:	f013 f84a 	bl	80153a8 <puts>
    return 0;  // Success
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	f507 7710 	add.w	r7, r7, #576	@ 0x240
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	080186e0 	.word	0x080186e0

08002324 <arm_hanning_f32>:


void arm_hanning_f32(float32_t * pDst, uint32_t blockSize) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
   float32_t k = 2.0f / ((float32_t) blockSize);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002338:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800233c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002340:	edc7 7a04 	vstr	s15, [r7, #16]
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	e027      	b.n	800239a <arm_hanning_f32+0x76>
   {
     w = PI * i * k;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002354:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80023ac <arm_hanning_f32+0x88>
 8002358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800235c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002364:	edc7 7a03 	vstr	s15, [r7, #12]
     w = 0.5f * (1.0f - cosf (w));
 8002368:	ed97 0a03 	vldr	s0, [r7, #12]
 800236c:	f015 f8c4 	bl	80174f8 <cosf>
 8002370:	eef0 7a40 	vmov.f32	s15, s0
 8002374:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002384:	edc7 7a03 	vstr	s15, [r7, #12]
     pDst[i] = w;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	4413      	add	r3, r2
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	601a      	str	r2, [r3, #0]
   for(uint32_t i=0;i<blockSize;i++)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3301      	adds	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d3d3      	bcc.n	800234a <arm_hanning_f32+0x26>
   }
}
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40490fdb 	.word	0x40490fdb

080023b0 <AI_Init>:

static void AI_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 80023b6:	4b17      	ldr	r3, [pc, #92]	@ (8002414 <AI_Init+0x64>)
 80023b8:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 80023ba:	463b      	mov	r3, r7
 80023bc:	2200      	movs	r2, #0
 80023be:	4619      	mov	r1, r3
 80023c0:	4815      	ldr	r0, [pc, #84]	@ (8002418 <AI_Init+0x68>)
 80023c2:	f00d fbab 	bl	800fb1c <ai_network_create_and_init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 80023ca:	793b      	ldrb	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00a      	beq.n	80023e6 <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 80023d0:	793b      	ldrb	r3, [r7, #4]
 80023d2:	4619      	mov	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80023da:	461a      	mov	r2, r3
 80023dc:	480f      	ldr	r0, [pc, #60]	@ (800241c <AI_Init+0x6c>)
 80023de:	f012 ff7b 	bl	80152d8 <iprintf>
    Error_Handler();
 80023e2:	f000 f8f8 	bl	80025d6 <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 80023e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <AI_Init+0x68>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f00d fc13 	bl	800fc18 <ai_network_inputs_get>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <AI_Init+0x70>)
 80023f6:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80023f8:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <AI_Init+0x68>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f00d fc24 	bl	800fc4c <ai_network_outputs_get>
 8002404:	4603      	mov	r3, r0
 8002406:	4a07      	ldr	r2, [pc, #28]	@ (8002424 <AI_Init+0x74>)
 8002408:	6013      	str	r3, [r2, #0]
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200108a0 	.word	0x200108a0
 8002418:	20000e94 	.word	0x20000e94
 800241c:	080186fc 	.word	0x080186fc
 8002420:	20020ed0 	.word	0x20020ed0
 8002424:	20020ed4 	.word	0x20020ed4

08002428 <AI_Run>:


static void AI_Run(float *pIn, float *pOut)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 8002432:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <AI_Run+0x60>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 800243a:	4b14      	ldr	r3, [pc, #80]	@ (800248c <AI_Run+0x64>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 8002442:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <AI_Run+0x68>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a10      	ldr	r2, [pc, #64]	@ (8002488 <AI_Run+0x60>)
 8002448:	6811      	ldr	r1, [r2, #0]
 800244a:	4a10      	ldr	r2, [pc, #64]	@ (800248c <AI_Run+0x64>)
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f00d fc52 	bl	800fcf8 <ai_network_run>
 8002454:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d011      	beq.n	8002480 <AI_Run+0x58>
    err = ai_network_get_error(network);
 800245c:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <AI_Run+0x68>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f00d fb39 	bl	800fad8 <ai_network_get_error>
 8002466:	4603      	mov	r3, r0
 8002468:	60bb      	str	r3, [r7, #8]
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 800246a:	7a3b      	ldrb	r3, [r7, #8]
 800246c:	4619      	mov	r1, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8002474:	461a      	mov	r2, r3
 8002476:	4807      	ldr	r0, [pc, #28]	@ (8002494 <AI_Run+0x6c>)
 8002478:	f012 ff2e 	bl	80152d8 <iprintf>
    Error_Handler();
 800247c:	f000 f8ab 	bl	80025d6 <Error_Handler>
  }
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20020ed0 	.word	0x20020ed0
 800248c:	20020ed4 	.word	0x20020ed4
 8002490:	20000e94 	.word	0x20000e94
 8002494:	08018728 	.word	0x08018728

08002498 <argmax>:

static uint32_t argmax(const float * values, uint32_t len)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 80024ac:	2301      	movs	r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e017      	b.n	80024e2 <argmax+0x4a>
    if (values[i] > max_value) {
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	ed97 7a05 	vldr	s14, [r7, #20]
 80024c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ca:	d507      	bpl.n	80024dc <argmax+0x44>
      max_value = values[i];
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	617b      	str	r3, [r7, #20]
      max_index = i;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	3301      	adds	r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d3e3      	bcc.n	80024b2 <argmax+0x1a>
    }
  }
  return max_index;
 80024ea:	693b      	ldr	r3, [r7, #16]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <softmax>:

void softmax(float *values, uint32_t len) {
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b089      	sub	sp, #36	@ 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
    // Find the maximum value in the logits for numerical stability
    float max_val = values[0];
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 1; i < len; i++) {
 8002508:	2301      	movs	r3, #1
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	e015      	b.n	800253a <softmax+0x42>
        if (values[i] > max_val) {
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	edd3 7a00 	vldr	s15, [r3]
 800251a:	ed97 7a07 	vldr	s14, [r7, #28]
 800251e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002526:	d505      	bpl.n	8002534 <softmax+0x3c>
            max_val = values[i];
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 1; i < len; i++) {
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	3301      	adds	r3, #1
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d3e5      	bcc.n	800250e <softmax+0x16>
        }
    }

    // Subtract the max value from all logits to prevent overflow/underflow
    for (uint32_t i = 0; i < len; i++) {
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	e012      	b.n	800256e <softmax+0x76>
        values[i] -= max_val;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	ed93 7a00 	vldr	s14, [r3]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002564:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < len; i++) {
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3301      	adds	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d3e8      	bcc.n	8002548 <softmax+0x50>
    }

    // Compute the sum of exponentiated values
    float sum = 0.0f;
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < len; i++) {
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e020      	b.n	80025c4 <softmax+0xcc>
        values[i] = expf(values[i]);  // Exponentiate each value
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	edd3 7a00 	vldr	s15, [r3]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	18d4      	adds	r4, r2, r3
 8002596:	eeb0 0a67 	vmov.f32	s0, s15
 800259a:	f014 ff59 	bl	8017450 <expf>
 800259e:	eef0 7a40 	vmov.f32	s15, s0
 80025a2:	edc4 7a00 	vstr	s15, [r4]
        sum += values[i];             // Sum the exponentiated values
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80025b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ba:	edc7 7a04 	vstr	s15, [r7, #16]
    for (uint32_t i = 0; i < len; i++) {
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3301      	adds	r3, #1
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d3da      	bcc.n	8002582 <softmax+0x8a>

//    // Normalize by dividing each value by the sum to get probabilities
//    for (uint32_t i = 0; i < len; i++) {
//        values[i] /= sum;
//    }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3724      	adds	r7, #36	@ 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd90      	pop	{r4, r7, pc}

080025d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025da:	b672      	cpsid	i
}
 80025dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025de:	bf00      	nop
 80025e0:	e7fd      	b.n	80025de <Error_Handler+0x8>
	...

080025e4 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80025e8:	4b27      	ldr	r3, [pc, #156]	@ (8002688 <MX_SAI1_Init+0xa4>)
 80025ea:	4a28      	ldr	r2, [pc, #160]	@ (800268c <MX_SAI1_Init+0xa8>)
 80025ec:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80025ee:	4b26      	ldr	r3, [pc, #152]	@ (8002688 <MX_SAI1_Init+0xa4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 80025f4:	4b24      	ldr	r3, [pc, #144]	@ (8002688 <MX_SAI1_Init+0xa4>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 80025fa:	4b23      	ldr	r3, [pc, #140]	@ (8002688 <MX_SAI1_Init+0xa4>)
 80025fc:	2280      	movs	r2, #128	@ 0x80
 80025fe:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002600:	4b21      	ldr	r3, [pc, #132]	@ (8002688 <MX_SAI1_Init+0xa4>)
 8002602:	2200      	movs	r2, #0
 8002604:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002606:	4b20      	ldr	r3, [pc, #128]	@ (8002688 <MX_SAI1_Init+0xa4>)
 8002608:	2200      	movs	r2, #0
 800260a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800260c:	4b1e      	ldr	r3, [pc, #120]	@ (8002688 <MX_SAI1_Init+0xa4>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002612:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <MX_SAI1_Init+0xa4>)
 8002614:	2200      	movs	r2, #0
 8002616:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002618:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <MX_SAI1_Init+0xa4>)
 800261a:	2200      	movs	r2, #0
 800261c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800261e:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <MX_SAI1_Init+0xa4>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8002624:	4b18      	ldr	r3, [pc, #96]	@ (8002688 <MX_SAI1_Init+0xa4>)
 8002626:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800262a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800262c:	4b16      	ldr	r3, [pc, #88]	@ (8002688 <MX_SAI1_Init+0xa4>)
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <MX_SAI1_Init+0xa4>)
 8002634:	2200      	movs	r2, #0
 8002636:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002638:	4b13      	ldr	r3, [pc, #76]	@ (8002688 <MX_SAI1_Init+0xa4>)
 800263a:	2200      	movs	r2, #0
 800263c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 16;
 800263e:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <MX_SAI1_Init+0xa4>)
 8002640:	2210      	movs	r2, #16
 8002642:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002644:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <MX_SAI1_Init+0xa4>)
 8002646:	2201      	movs	r2, #1
 8002648:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800264a:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <MX_SAI1_Init+0xa4>)
 800264c:	2200      	movs	r2, #0
 800264e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002650:	4b0d      	ldr	r3, [pc, #52]	@ (8002688 <MX_SAI1_Init+0xa4>)
 8002652:	2200      	movs	r2, #0
 8002654:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002656:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <MX_SAI1_Init+0xa4>)
 8002658:	2200      	movs	r2, #0
 800265a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800265c:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <MX_SAI1_Init+0xa4>)
 800265e:	2200      	movs	r2, #0
 8002660:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002662:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <MX_SAI1_Init+0xa4>)
 8002664:	2200      	movs	r2, #0
 8002666:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8002668:	4b07      	ldr	r3, [pc, #28]	@ (8002688 <MX_SAI1_Init+0xa4>)
 800266a:	2201      	movs	r2, #1
 800266c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800266e:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <MX_SAI1_Init+0xa4>)
 8002670:	2200      	movs	r2, #0
 8002672:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002674:	4804      	ldr	r0, [pc, #16]	@ (8002688 <MX_SAI1_Init+0xa4>)
 8002676:	f006 f9a1 	bl	80089bc <HAL_SAI_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_SAI1_Init+0xa0>
  {
    Error_Handler();
 8002680:	f7ff ffa9 	bl	80025d6 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20030cf4 	.word	0x20030cf4
 800268c:	40015804 	.word	0x40015804

08002690 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b0aa      	sub	sp, #168	@ 0xa8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002698:	f107 0310 	add.w	r3, r7, #16
 800269c:	2284      	movs	r2, #132	@ 0x84
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f012 ff81 	bl	80155a8 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a41      	ldr	r2, [pc, #260]	@ (80027b0 <HAL_SAI_MspInit+0x120>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d17b      	bne.n	80027a8 <HAL_SAI_MspInit+0x118>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80026b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80026b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80026b6:	2332      	movs	r3, #50	@ 0x32
 80026b8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80026ba:	2302      	movs	r3, #2
 80026bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80026be:	2302      	movs	r3, #2
 80026c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80026c2:	2300      	movs	r3, #0
 80026c4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80026c6:	2301      	movs	r3, #1
 80026c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80026ca:	2300      	movs	r3, #0
 80026cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80026ce:	2300      	movs	r3, #0
 80026d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d2:	f107 0310 	add.w	r3, r7, #16
 80026d6:	4618      	mov	r0, r3
 80026d8:	f005 fb34 	bl	8007d44 <HAL_RCCEx_PeriphCLKConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_SAI_MspInit+0x56>
    {
      Error_Handler();
 80026e2:	f7ff ff78 	bl	80025d6 <Error_Handler>
    }

    if (SAI1_client == 0)
 80026e6:	4b33      	ldr	r3, [pc, #204]	@ (80027b4 <HAL_SAI_MspInit+0x124>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10b      	bne.n	8002706 <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80026ee:	4b32      	ldr	r3, [pc, #200]	@ (80027b8 <HAL_SAI_MspInit+0x128>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	4a31      	ldr	r2, [pc, #196]	@ (80027b8 <HAL_SAI_MspInit+0x128>)
 80026f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026fa:	4b2f      	ldr	r3, [pc, #188]	@ (80027b8 <HAL_SAI_MspInit+0x128>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8002706:	4b2b      	ldr	r3, [pc, #172]	@ (80027b4 <HAL_SAI_MspInit+0x124>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	4a29      	ldr	r2, [pc, #164]	@ (80027b4 <HAL_SAI_MspInit+0x124>)
 800270e:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002710:	2370      	movs	r3, #112	@ 0x70
 8002712:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002728:	2306      	movs	r3, #6
 800272a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800272e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002732:	4619      	mov	r1, r3
 8002734:	4821      	ldr	r0, [pc, #132]	@ (80027bc <HAL_SAI_MspInit+0x12c>)
 8002736:	f003 fd31 	bl	800619c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 800273a:	4b21      	ldr	r3, [pc, #132]	@ (80027c0 <HAL_SAI_MspInit+0x130>)
 800273c:	4a21      	ldr	r2, [pc, #132]	@ (80027c4 <HAL_SAI_MspInit+0x134>)
 800273e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8002740:	4b1f      	ldr	r3, [pc, #124]	@ (80027c0 <HAL_SAI_MspInit+0x130>)
 8002742:	2200      	movs	r2, #0
 8002744:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002746:	4b1e      	ldr	r3, [pc, #120]	@ (80027c0 <HAL_SAI_MspInit+0x130>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800274c:	4b1c      	ldr	r3, [pc, #112]	@ (80027c0 <HAL_SAI_MspInit+0x130>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002752:	4b1b      	ldr	r3, [pc, #108]	@ (80027c0 <HAL_SAI_MspInit+0x130>)
 8002754:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002758:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800275a:	4b19      	ldr	r3, [pc, #100]	@ (80027c0 <HAL_SAI_MspInit+0x130>)
 800275c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002760:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002762:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <HAL_SAI_MspInit+0x130>)
 8002764:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002768:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800276a:	4b15      	ldr	r3, [pc, #84]	@ (80027c0 <HAL_SAI_MspInit+0x130>)
 800276c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002770:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8002772:	4b13      	ldr	r3, [pc, #76]	@ (80027c0 <HAL_SAI_MspInit+0x130>)
 8002774:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002778:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800277a:	4b11      	ldr	r3, [pc, #68]	@ (80027c0 <HAL_SAI_MspInit+0x130>)
 800277c:	2200      	movs	r2, #0
 800277e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002780:	480f      	ldr	r0, [pc, #60]	@ (80027c0 <HAL_SAI_MspInit+0x130>)
 8002782:	f003 f897 	bl	80058b4 <HAL_DMA_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 800278c:	f7ff ff23 	bl	80025d6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a0b      	ldr	r2, [pc, #44]	@ (80027c0 <HAL_SAI_MspInit+0x130>)
 8002794:	671a      	str	r2, [r3, #112]	@ 0x70
 8002796:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <HAL_SAI_MspInit+0x130>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a08      	ldr	r2, [pc, #32]	@ (80027c0 <HAL_SAI_MspInit+0x130>)
 80027a0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80027a2:	4a07      	ldr	r2, [pc, #28]	@ (80027c0 <HAL_SAI_MspInit+0x130>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 80027a8:	bf00      	nop
 80027aa:	37a8      	adds	r7, #168	@ 0xa8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40015804 	.word	0x40015804
 80027b4:	20030dd8 	.word	0x20030dd8
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40021000 	.word	0x40021000
 80027c0:	20030d78 	.word	0x20030d78
 80027c4:	40026428 	.word	0x40026428

080027c8 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a11      	ldr	r2, [pc, #68]	@ (800281c <HAL_SAI_MspDeInit+0x54>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d11c      	bne.n	8002814 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI1_client --;
 80027da:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <HAL_SAI_MspDeInit+0x58>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	3b01      	subs	r3, #1
 80027e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002820 <HAL_SAI_MspDeInit+0x58>)
 80027e2:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 80027e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002820 <HAL_SAI_MspDeInit+0x58>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 80027ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002824 <HAL_SAI_MspDeInit+0x5c>)
 80027ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002824 <HAL_SAI_MspDeInit+0x5c>)
 80027f2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80027f6:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 80027f8:	2170      	movs	r1, #112	@ 0x70
 80027fa:	480b      	ldr	r0, [pc, #44]	@ (8002828 <HAL_SAI_MspDeInit+0x60>)
 80027fc:	f003 fe7a 	bl	80064f4 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002804:	4618      	mov	r0, r3
 8002806:	f003 f903 	bl	8005a10 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800280e:	4618      	mov	r0, r3
 8002810:	f003 f8fe 	bl	8005a10 <HAL_DMA_DeInit>
    }
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40015804 	.word	0x40015804
 8002820:	20030dd8 	.word	0x20030dd8
 8002824:	40023800 	.word	0x40023800
 8002828:	40021000 	.word	0x40021000

0800282c <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002830:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <MX_SDMMC1_SD_Init+0x38>)
 8002832:	4a0d      	ldr	r2, [pc, #52]	@ (8002868 <MX_SDMMC1_SD_Init+0x3c>)
 8002834:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002836:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <MX_SDMMC1_SD_Init+0x38>)
 8002838:	2200      	movs	r2, #0
 800283a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800283c:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <MX_SDMMC1_SD_Init+0x38>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002842:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <MX_SDMMC1_SD_Init+0x38>)
 8002844:	2200      	movs	r2, #0
 8002846:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002848:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <MX_SDMMC1_SD_Init+0x38>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800284e:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <MX_SDMMC1_SD_Init+0x38>)
 8002850:	2200      	movs	r2, #0
 8002852:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002854:	4b03      	ldr	r3, [pc, #12]	@ (8002864 <MX_SDMMC1_SD_Init+0x38>)
 8002856:	2200      	movs	r2, #0
 8002858:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	20030ddc 	.word	0x20030ddc
 8002868:	40012c00 	.word	0x40012c00

0800286c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b0ac      	sub	sp, #176	@ 0xb0
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002874:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002884:	f107 0318 	add.w	r3, r7, #24
 8002888:	2284      	movs	r2, #132	@ 0x84
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f012 fe8b 	bl	80155a8 <memset>
  if(sdHandle->Instance==SDMMC1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a74      	ldr	r2, [pc, #464]	@ (8002a68 <HAL_SD_MspInit+0x1fc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	f040 80e0 	bne.w	8002a5e <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800289e:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 80028a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028b0:	f107 0318 	add.w	r3, r7, #24
 80028b4:	4618      	mov	r0, r3
 80028b6:	f005 fa45 	bl	8007d44 <HAL_RCCEx_PeriphCLKConfig>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80028c0:	f7ff fe89 	bl	80025d6 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80028c4:	4b69      	ldr	r3, [pc, #420]	@ (8002a6c <HAL_SD_MspInit+0x200>)
 80028c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c8:	4a68      	ldr	r2, [pc, #416]	@ (8002a6c <HAL_SD_MspInit+0x200>)
 80028ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80028d0:	4b66      	ldr	r3, [pc, #408]	@ (8002a6c <HAL_SD_MspInit+0x200>)
 80028d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028dc:	4b63      	ldr	r3, [pc, #396]	@ (8002a6c <HAL_SD_MspInit+0x200>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e0:	4a62      	ldr	r2, [pc, #392]	@ (8002a6c <HAL_SD_MspInit+0x200>)
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e8:	4b60      	ldr	r3, [pc, #384]	@ (8002a6c <HAL_SD_MspInit+0x200>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f4:	4b5d      	ldr	r3, [pc, #372]	@ (8002a6c <HAL_SD_MspInit+0x200>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f8:	4a5c      	ldr	r2, [pc, #368]	@ (8002a6c <HAL_SD_MspInit+0x200>)
 80028fa:	f043 0308 	orr.w	r3, r3, #8
 80028fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002900:	4b5a      	ldr	r3, [pc, #360]	@ (8002a6c <HAL_SD_MspInit+0x200>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 800290c:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8002910:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002920:	2303      	movs	r3, #3
 8002922:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002926:	230c      	movs	r3, #12
 8002928:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800292c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002930:	4619      	mov	r1, r3
 8002932:	484f      	ldr	r0, [pc, #316]	@ (8002a70 <HAL_SD_MspInit+0x204>)
 8002934:	f003 fc32 	bl	800619c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002938:	2304      	movs	r3, #4
 800293a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293e:	2302      	movs	r3, #2
 8002940:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294a:	2303      	movs	r3, #3
 800294c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002950:	230c      	movs	r3, #12
 8002952:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002956:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800295a:	4619      	mov	r1, r3
 800295c:	4845      	ldr	r0, [pc, #276]	@ (8002a74 <HAL_SD_MspInit+0x208>)
 800295e:	f003 fc1d 	bl	800619c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8002962:	4b45      	ldr	r3, [pc, #276]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 8002964:	4a45      	ldr	r2, [pc, #276]	@ (8002a7c <HAL_SD_MspInit+0x210>)
 8002966:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8002968:	4b43      	ldr	r3, [pc, #268]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 800296a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800296e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002970:	4b41      	ldr	r3, [pc, #260]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002976:	4b40      	ldr	r3, [pc, #256]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 8002978:	2200      	movs	r2, #0
 800297a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800297c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 800297e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002982:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002984:	4b3c      	ldr	r3, [pc, #240]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 8002986:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800298a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800298c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 800298e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002992:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8002994:	4b38      	ldr	r3, [pc, #224]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 8002996:	2220      	movs	r2, #32
 8002998:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800299a:	4b37      	ldr	r3, [pc, #220]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 800299c:	2200      	movs	r2, #0
 800299e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80029a0:	4b35      	ldr	r3, [pc, #212]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 80029a2:	2204      	movs	r2, #4
 80029a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80029a6:	4b34      	ldr	r3, [pc, #208]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 80029a8:	2203      	movs	r2, #3
 80029aa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80029ac:	4b32      	ldr	r3, [pc, #200]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 80029ae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80029b4:	4b30      	ldr	r3, [pc, #192]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 80029b6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80029ba:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80029bc:	482e      	ldr	r0, [pc, #184]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 80029be:	f002 ff79 	bl	80058b4 <HAL_DMA_Init>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 80029c8:	f7ff fe05 	bl	80025d6 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 80029d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80029d2:	4a29      	ldr	r2, [pc, #164]	@ (8002a78 <HAL_SD_MspInit+0x20c>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80029d8:	4b29      	ldr	r3, [pc, #164]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 80029da:	4a2a      	ldr	r2, [pc, #168]	@ (8002a84 <HAL_SD_MspInit+0x218>)
 80029dc:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80029de:	4b28      	ldr	r3, [pc, #160]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 80029e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029e4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029e6:	4b26      	ldr	r3, [pc, #152]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 80029e8:	2240      	movs	r2, #64	@ 0x40
 80029ea:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ec:	4b24      	ldr	r3, [pc, #144]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029f2:	4b23      	ldr	r3, [pc, #140]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 80029f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029f8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029fa:	4b21      	ldr	r3, [pc, #132]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 80029fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a00:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a02:	4b1f      	ldr	r3, [pc, #124]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 8002a04:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a08:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8002a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a10:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a16:	4b1a      	ldr	r3, [pc, #104]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 8002a18:	2204      	movs	r2, #4
 8002a1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a1c:	4b18      	ldr	r3, [pc, #96]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 8002a1e:	2203      	movs	r2, #3
 8002a20:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002a22:	4b17      	ldr	r3, [pc, #92]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 8002a24:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a28:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002a2a:	4b15      	ldr	r3, [pc, #84]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 8002a2c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002a30:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8002a32:	4813      	ldr	r0, [pc, #76]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 8002a34:	f002 ff3e 	bl	80058b4 <HAL_DMA_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8002a3e:	f7ff fdca 	bl	80025d6 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a0e      	ldr	r2, [pc, #56]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 8002a46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a48:	4a0d      	ldr	r2, [pc, #52]	@ (8002a80 <HAL_SD_MspInit+0x214>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 1, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2101      	movs	r1, #1
 8002a52:	2031      	movs	r0, #49	@ 0x31
 8002a54:	f002 fe05 	bl	8005662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002a58:	2031      	movs	r0, #49	@ 0x31
 8002a5a:	f002 fe1e 	bl	800569a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002a5e:	bf00      	nop
 8002a60:	37b0      	adds	r7, #176	@ 0xb0
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40012c00 	.word	0x40012c00
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020c00 	.word	0x40020c00
 8002a78:	20030e60 	.word	0x20030e60
 8002a7c:	40026458 	.word	0x40026458
 8002a80:	20030ec0 	.word	0x20030ec0
 8002a84:	400264a0 	.word	0x400264a0

08002a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <HAL_MspInit+0x44>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	4a0e      	ldr	r2, [pc, #56]	@ (8002acc <HAL_MspInit+0x44>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <HAL_MspInit+0x44>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa6:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <HAL_MspInit+0x44>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	4a08      	ldr	r2, [pc, #32]	@ (8002acc <HAL_MspInit+0x44>)
 8002aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ab2:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <HAL_MspInit+0x44>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800

08002ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <NMI_Handler+0x4>

08002ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <HardFault_Handler+0x4>

08002ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <MemManage_Handler+0x4>

08002ae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aec:	bf00      	nop
 8002aee:	e7fd      	b.n	8002aec <BusFault_Handler+0x4>

08002af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af4:	bf00      	nop
 8002af6:	e7fd      	b.n	8002af4 <UsageFault_Handler+0x4>

08002af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b26:	f002 fc7d 	bl	8005424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8002b32:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002b36:	f003 fe35 	bl	80067a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002b44:	4802      	ldr	r0, [pc, #8]	@ (8002b50 <SDMMC1_IRQHandler+0x10>)
 8002b46:	f006 fd5b 	bl	8009600 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20030ddc 	.word	0x20030ddc

08002b54 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002b58:	4802      	ldr	r0, [pc, #8]	@ (8002b64 <DMA2_Stream1_IRQHandler+0x10>)
 8002b5a:	f003 f8a9 	bl	8005cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20030d78 	.word	0x20030d78

08002b68 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8002b6c:	4802      	ldr	r0, [pc, #8]	@ (8002b78 <DMA2_Stream3_IRQHandler+0x10>)
 8002b6e:	f003 f89f 	bl	8005cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20030e60 	.word	0x20030e60

08002b7c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002b80:	4802      	ldr	r0, [pc, #8]	@ (8002b8c <DMA2_Stream6_IRQHandler+0x10>)
 8002b82:	f003 f895 	bl	8005cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20030ec0 	.word	0x20030ec0

08002b90 <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 Stream 7 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
	//extern SAI_HandleTypeDef haudio_in_sai;
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8002b94:	4b03      	ldr	r3, [pc, #12]	@ (8002ba4 <DMA2_Stream7_IRQHandler+0x14>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f003 f889 	bl	8005cb0 <HAL_DMA_IRQHandler>
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20031090 	.word	0x20031090

08002ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return 1;
 8002bac:	2301      	movs	r3, #1
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <_kill>:

int _kill(int pid, int sig)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bc2:	f012 fd53 	bl	801566c <__errno>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2216      	movs	r2, #22
 8002bca:	601a      	str	r2, [r3, #0]
  return -1;
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_exit>:

void _exit (int status)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002be0:	f04f 31ff 	mov.w	r1, #4294967295
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ffe7 	bl	8002bb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bea:	bf00      	nop
 8002bec:	e7fd      	b.n	8002bea <_exit+0x12>

08002bee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e00a      	b.n	8002c16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c00:	f3af 8000 	nop.w
 8002c04:	4601      	mov	r1, r0
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	60ba      	str	r2, [r7, #8]
 8002c0c:	b2ca      	uxtb	r2, r1
 8002c0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3301      	adds	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	dbf0      	blt.n	8002c00 <_read+0x12>
  }

  return len;
 8002c1e:	687b      	ldr	r3, [r7, #4]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e009      	b.n	8002c4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	60ba      	str	r2, [r7, #8]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff fa88 	bl	8002158 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	dbf1      	blt.n	8002c3a <_write+0x12>
  }
  return len;
 8002c56:	687b      	ldr	r3, [r7, #4]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_close>:

int _close(int file)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c88:	605a      	str	r2, [r3, #4]
  return 0;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_isatty>:

int _isatty(int file)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ca0:	2301      	movs	r3, #1
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cd0:	4a14      	ldr	r2, [pc, #80]	@ (8002d24 <_sbrk+0x5c>)
 8002cd2:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <_sbrk+0x60>)
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cdc:	4b13      	ldr	r3, [pc, #76]	@ (8002d2c <_sbrk+0x64>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <_sbrk+0x64>)
 8002ce6:	4a12      	ldr	r2, [pc, #72]	@ (8002d30 <_sbrk+0x68>)
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cea:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <_sbrk+0x64>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d207      	bcs.n	8002d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cf8:	f012 fcb8 	bl	801566c <__errno>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	220c      	movs	r2, #12
 8002d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	e009      	b.n	8002d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d08:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <_sbrk+0x64>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d0e:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <_sbrk+0x64>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	4a05      	ldr	r2, [pc, #20]	@ (8002d2c <_sbrk+0x64>)
 8002d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20050000 	.word	0x20050000
 8002d28:	00002000 	.word	0x00002000
 8002d2c:	20030f20 	.word	0x20030f20
 8002d30:	20036198 	.word	0x20036198

08002d34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d38:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <SystemInit+0x20>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3e:	4a05      	ldr	r2, [pc, #20]	@ (8002d54 <SystemInit+0x20>)
 8002d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d5c:	4b14      	ldr	r3, [pc, #80]	@ (8002db0 <MX_USART1_UART_Init+0x58>)
 8002d5e:	4a15      	ldr	r2, [pc, #84]	@ (8002db4 <MX_USART1_UART_Init+0x5c>)
 8002d60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d62:	4b13      	ldr	r3, [pc, #76]	@ (8002db0 <MX_USART1_UART_Init+0x58>)
 8002d64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d6a:	4b11      	ldr	r3, [pc, #68]	@ (8002db0 <MX_USART1_UART_Init+0x58>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d70:	4b0f      	ldr	r3, [pc, #60]	@ (8002db0 <MX_USART1_UART_Init+0x58>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d76:	4b0e      	ldr	r3, [pc, #56]	@ (8002db0 <MX_USART1_UART_Init+0x58>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002db0 <MX_USART1_UART_Init+0x58>)
 8002d7e:	220c      	movs	r2, #12
 8002d80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d82:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <MX_USART1_UART_Init+0x58>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d88:	4b09      	ldr	r3, [pc, #36]	@ (8002db0 <MX_USART1_UART_Init+0x58>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d8e:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <MX_USART1_UART_Init+0x58>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d94:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <MX_USART1_UART_Init+0x58>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d9a:	4805      	ldr	r0, [pc, #20]	@ (8002db0 <MX_USART1_UART_Init+0x58>)
 8002d9c:	f007 fb69 	bl	800a472 <HAL_UART_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002da6:	f7ff fc16 	bl	80025d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20030f24 	.word	0x20030f24
 8002db4:	40011000 	.word	0x40011000

08002db8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b0ac      	sub	sp, #176	@ 0xb0
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dd0:	f107 0318 	add.w	r3, r7, #24
 8002dd4:	2284      	movs	r2, #132	@ 0x84
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f012 fbe5 	bl	80155a8 <memset>
  if(uartHandle->Instance==USART1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a32      	ldr	r2, [pc, #200]	@ (8002eac <HAL_UART_MspInit+0xf4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d15c      	bne.n	8002ea2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002de8:	2340      	movs	r3, #64	@ 0x40
 8002dea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002dec:	2300      	movs	r3, #0
 8002dee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002df0:	f107 0318 	add.w	r3, r7, #24
 8002df4:	4618      	mov	r0, r3
 8002df6:	f004 ffa5 	bl	8007d44 <HAL_RCCEx_PeriphCLKConfig>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e00:	f7ff fbe9 	bl	80025d6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e04:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb0 <HAL_UART_MspInit+0xf8>)
 8002e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e08:	4a29      	ldr	r2, [pc, #164]	@ (8002eb0 <HAL_UART_MspInit+0xf8>)
 8002e0a:	f043 0310 	orr.w	r3, r3, #16
 8002e0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e10:	4b27      	ldr	r3, [pc, #156]	@ (8002eb0 <HAL_UART_MspInit+0xf8>)
 8002e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1c:	4b24      	ldr	r3, [pc, #144]	@ (8002eb0 <HAL_UART_MspInit+0xf8>)
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e20:	4a23      	ldr	r2, [pc, #140]	@ (8002eb0 <HAL_UART_MspInit+0xf8>)
 8002e22:	f043 0302 	orr.w	r3, r3, #2
 8002e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e28:	4b21      	ldr	r3, [pc, #132]	@ (8002eb0 <HAL_UART_MspInit+0xf8>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e34:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb0 <HAL_UART_MspInit+0xf8>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e38:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb0 <HAL_UART_MspInit+0xf8>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e40:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb0 <HAL_UART_MspInit+0xf8>)
 8002e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e4c:	2380      	movs	r3, #128	@ 0x80
 8002e4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e64:	2307      	movs	r3, #7
 8002e66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e6a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4810      	ldr	r0, [pc, #64]	@ (8002eb4 <HAL_UART_MspInit+0xfc>)
 8002e72:	f003 f993 	bl	800619c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e90:	2307      	movs	r3, #7
 8002e92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e96:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4806      	ldr	r0, [pc, #24]	@ (8002eb8 <HAL_UART_MspInit+0x100>)
 8002e9e:	f003 f97d 	bl	800619c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	37b0      	adds	r7, #176	@ 0xb0
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40011000 	.word	0x40011000
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40020400 	.word	0x40020400
 8002eb8:	40020000 	.word	0x40020000

08002ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ebc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ef4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ec0:	f7ff ff38 	bl	8002d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ec4:	480c      	ldr	r0, [pc, #48]	@ (8002ef8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ec6:	490d      	ldr	r1, [pc, #52]	@ (8002efc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ecc:	e002      	b.n	8002ed4 <LoopCopyDataInit>

08002ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ed2:	3304      	adds	r3, #4

08002ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed8:	d3f9      	bcc.n	8002ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eda:	4a0a      	ldr	r2, [pc, #40]	@ (8002f04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002edc:	4c0a      	ldr	r4, [pc, #40]	@ (8002f08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee0:	e001      	b.n	8002ee6 <LoopFillZerobss>

08002ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee4:	3204      	adds	r2, #4

08002ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee8:	d3fb      	bcc.n	8002ee2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002eea:	f012 fbc5 	bl	8015678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eee:	f7fe fbd9 	bl	80016a4 <main>
  bx  lr    
 8002ef2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ef4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002efc:	200009e0 	.word	0x200009e0
  ldr r2, =_sidata
 8002f00:	080d5f38 	.word	0x080d5f38
  ldr r2, =_sbss
 8002f04:	200009e0 	.word	0x200009e0
  ldr r4, =_ebss
 8002f08:	20036198 	.word	0x20036198

08002f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f0c:	e7fe      	b.n	8002f0c <ADC_IRQHandler>
	...

08002f10 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	4603      	mov	r3, r0
 8002f1a:	81fb      	strh	r3, [r7, #14]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	81bb      	strh	r3, [r7, #12]
 8002f20:	4613      	mov	r3, r2
 8002f22:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8002f28:	89bb      	ldrh	r3, [r7, #12]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8002f2e:	89bb      	ldrh	r3, [r7, #12]
 8002f30:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f34:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002f3a:	f001 fc71 	bl	8004820 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8002f3e:	89fb      	ldrh	r3, [r7, #14]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2203      	movs	r2, #3
 8002f44:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 fafb 	bl	8004544 <CODEC_IO_Write>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	461a      	mov	r2, r3
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8002f58:	89fb      	ldrh	r3, [r7, #14]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f640 0117 	movw	r1, #2071	@ 0x817
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 faee 	bl	8004544 <CODEC_IO_Write>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	4413      	add	r3, r2
 8002f70:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8002f72:	89fb      	ldrh	r3, [r7, #14]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2200      	movs	r2, #0
 8002f78:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f001 fae1 	bl	8004544 <CODEC_IO_Write>
 8002f82:	4603      	mov	r3, r0
 8002f84:	461a      	mov	r2, r3
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4413      	add	r3, r2
 8002f8a:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8002f8c:	89fb      	ldrh	r3, [r7, #14]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	226c      	movs	r2, #108	@ 0x6c
 8002f92:	2139      	movs	r1, #57	@ 0x39
 8002f94:	4618      	mov	r0, r3
 8002f96:	f001 fad5 	bl	8004544 <CODEC_IO_Write>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8002fa4:	8afb      	ldrh	r3, [r7, #22]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00c      	beq.n	8002fc4 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8002faa:	89fb      	ldrh	r3, [r7, #14]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2213      	movs	r2, #19
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f001 fac6 	bl	8004544 <CODEC_IO_Write>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e00b      	b.n	8002fdc <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8002fc4:	89fb      	ldrh	r3, [r7, #14]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2203      	movs	r2, #3
 8002fca:	2101      	movs	r1, #1
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f001 fab9 	bl	8004544 <CODEC_IO_Write>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	4413      	add	r3, r2
 8002fda:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002fdc:	2032      	movs	r0, #50	@ 0x32
 8002fde:	f001 fc87 	bl	80048f0 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8002fe2:	8b3b      	ldrh	r3, [r7, #24]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 815f 	beq.w	80032a8 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8002fea:	4bae      	ldr	r3, [pc, #696]	@ (80032a4 <wm8994_Init+0x394>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002ff0:	8b3b      	ldrh	r3, [r7, #24]
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	f000 808c 	beq.w	8003110 <wm8994_Init+0x200>
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	f300 8111 	bgt.w	8003220 <wm8994_Init+0x310>
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d002      	beq.n	8003008 <wm8994_Init+0xf8>
 8003002:	2b02      	cmp	r3, #2
 8003004:	d042      	beq.n	800308c <wm8994_Init+0x17c>
 8003006:	e10b      	b.n	8003220 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8003008:	89fb      	ldrh	r3, [r7, #14]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8003010:	2105      	movs	r1, #5
 8003012:	4618      	mov	r0, r3
 8003014:	f001 fa96 	bl	8004544 <CODEC_IO_Write>
 8003018:	4603      	mov	r3, r0
 800301a:	461a      	mov	r2, r3
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	4413      	add	r3, r2
 8003020:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003022:	89fb      	ldrh	r3, [r7, #14]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2200      	movs	r2, #0
 8003028:	f240 6101 	movw	r1, #1537	@ 0x601
 800302c:	4618      	mov	r0, r3
 800302e:	f001 fa89 	bl	8004544 <CODEC_IO_Write>
 8003032:	4603      	mov	r3, r0
 8003034:	461a      	mov	r2, r3
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	4413      	add	r3, r2
 800303a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800303c:	89fb      	ldrh	r3, [r7, #14]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2200      	movs	r2, #0
 8003042:	f240 6102 	movw	r1, #1538	@ 0x602
 8003046:	4618      	mov	r0, r3
 8003048:	f001 fa7c 	bl	8004544 <CODEC_IO_Write>
 800304c:	4603      	mov	r3, r0
 800304e:	461a      	mov	r2, r3
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	4413      	add	r3, r2
 8003054:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003056:	89fb      	ldrh	r3, [r7, #14]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2202      	movs	r2, #2
 800305c:	f240 6104 	movw	r1, #1540	@ 0x604
 8003060:	4618      	mov	r0, r3
 8003062:	f001 fa6f 	bl	8004544 <CODEC_IO_Write>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	4413      	add	r3, r2
 800306e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003070:	89fb      	ldrh	r3, [r7, #14]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2202      	movs	r2, #2
 8003076:	f240 6105 	movw	r1, #1541	@ 0x605
 800307a:	4618      	mov	r0, r3
 800307c:	f001 fa62 	bl	8004544 <CODEC_IO_Write>
 8003080:	4603      	mov	r3, r0
 8003082:	461a      	mov	r2, r3
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	4413      	add	r3, r2
 8003088:	61fb      	str	r3, [r7, #28]
      break;
 800308a:	e110      	b.n	80032ae <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800308c:	89fb      	ldrh	r3, [r7, #14]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f240 3203 	movw	r2, #771	@ 0x303
 8003094:	2105      	movs	r1, #5
 8003096:	4618      	mov	r0, r3
 8003098:	f001 fa54 	bl	8004544 <CODEC_IO_Write>
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	4413      	add	r3, r2
 80030a4:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80030a6:	89fb      	ldrh	r3, [r7, #14]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2201      	movs	r2, #1
 80030ac:	f240 6101 	movw	r1, #1537	@ 0x601
 80030b0:	4618      	mov	r0, r3
 80030b2:	f001 fa47 	bl	8004544 <CODEC_IO_Write>
 80030b6:	4603      	mov	r3, r0
 80030b8:	461a      	mov	r2, r3
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80030c0:	89fb      	ldrh	r3, [r7, #14]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2201      	movs	r2, #1
 80030c6:	f240 6102 	movw	r1, #1538	@ 0x602
 80030ca:	4618      	mov	r0, r3
 80030cc:	f001 fa3a 	bl	8004544 <CODEC_IO_Write>
 80030d0:	4603      	mov	r3, r0
 80030d2:	461a      	mov	r2, r3
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	4413      	add	r3, r2
 80030d8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80030da:	89fb      	ldrh	r3, [r7, #14]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2200      	movs	r2, #0
 80030e0:	f240 6104 	movw	r1, #1540	@ 0x604
 80030e4:	4618      	mov	r0, r3
 80030e6:	f001 fa2d 	bl	8004544 <CODEC_IO_Write>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461a      	mov	r2, r3
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80030f4:	89fb      	ldrh	r3, [r7, #14]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2200      	movs	r2, #0
 80030fa:	f240 6105 	movw	r1, #1541	@ 0x605
 80030fe:	4618      	mov	r0, r3
 8003100:	f001 fa20 	bl	8004544 <CODEC_IO_Write>
 8003104:	4603      	mov	r3, r0
 8003106:	461a      	mov	r2, r3
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	4413      	add	r3, r2
 800310c:	61fb      	str	r3, [r7, #28]
      break;
 800310e:	e0ce      	b.n	80032ae <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003110:	8afb      	ldrh	r3, [r7, #22]
 8003112:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003116:	d141      	bne.n	800319c <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003118:	89fb      	ldrh	r3, [r7, #14]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8003120:	2105      	movs	r1, #5
 8003122:	4618      	mov	r0, r3
 8003124:	f001 fa0e 	bl	8004544 <CODEC_IO_Write>
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	4413      	add	r3, r2
 8003130:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8003132:	89fb      	ldrh	r3, [r7, #14]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2203      	movs	r2, #3
 8003138:	f240 6101 	movw	r1, #1537	@ 0x601
 800313c:	4618      	mov	r0, r3
 800313e:	f001 fa01 	bl	8004544 <CODEC_IO_Write>
 8003142:	4603      	mov	r3, r0
 8003144:	461a      	mov	r2, r3
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	4413      	add	r3, r2
 800314a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 800314c:	89fb      	ldrh	r3, [r7, #14]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2203      	movs	r2, #3
 8003152:	f240 6102 	movw	r1, #1538	@ 0x602
 8003156:	4618      	mov	r0, r3
 8003158:	f001 f9f4 	bl	8004544 <CODEC_IO_Write>
 800315c:	4603      	mov	r3, r0
 800315e:	461a      	mov	r2, r3
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	4413      	add	r3, r2
 8003164:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8003166:	89fb      	ldrh	r3, [r7, #14]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2203      	movs	r2, #3
 800316c:	f240 6104 	movw	r1, #1540	@ 0x604
 8003170:	4618      	mov	r0, r3
 8003172:	f001 f9e7 	bl	8004544 <CODEC_IO_Write>
 8003176:	4603      	mov	r3, r0
 8003178:	461a      	mov	r2, r3
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	4413      	add	r3, r2
 800317e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8003180:	89fb      	ldrh	r3, [r7, #14]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2203      	movs	r2, #3
 8003186:	f240 6105 	movw	r1, #1541	@ 0x605
 800318a:	4618      	mov	r0, r3
 800318c:	f001 f9da 	bl	8004544 <CODEC_IO_Write>
 8003190:	4603      	mov	r3, r0
 8003192:	461a      	mov	r2, r3
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	4413      	add	r3, r2
 8003198:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 800319a:	e088      	b.n	80032ae <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800319c:	89fb      	ldrh	r3, [r7, #14]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80031a4:	2105      	movs	r1, #5
 80031a6:	4618      	mov	r0, r3
 80031a8:	f001 f9cc 	bl	8004544 <CODEC_IO_Write>
 80031ac:	4603      	mov	r3, r0
 80031ae:	461a      	mov	r2, r3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	4413      	add	r3, r2
 80031b4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80031b6:	89fb      	ldrh	r3, [r7, #14]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2201      	movs	r2, #1
 80031bc:	f240 6101 	movw	r1, #1537	@ 0x601
 80031c0:	4618      	mov	r0, r3
 80031c2:	f001 f9bf 	bl	8004544 <CODEC_IO_Write>
 80031c6:	4603      	mov	r3, r0
 80031c8:	461a      	mov	r2, r3
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	4413      	add	r3, r2
 80031ce:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80031d0:	89fb      	ldrh	r3, [r7, #14]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2201      	movs	r2, #1
 80031d6:	f240 6102 	movw	r1, #1538	@ 0x602
 80031da:	4618      	mov	r0, r3
 80031dc:	f001 f9b2 	bl	8004544 <CODEC_IO_Write>
 80031e0:	4603      	mov	r3, r0
 80031e2:	461a      	mov	r2, r3
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80031ea:	89fb      	ldrh	r3, [r7, #14]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2202      	movs	r2, #2
 80031f0:	f240 6104 	movw	r1, #1540	@ 0x604
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 f9a5 	bl	8004544 <CODEC_IO_Write>
 80031fa:	4603      	mov	r3, r0
 80031fc:	461a      	mov	r2, r3
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8003204:	89fb      	ldrh	r3, [r7, #14]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2202      	movs	r2, #2
 800320a:	f240 6105 	movw	r1, #1541	@ 0x605
 800320e:	4618      	mov	r0, r3
 8003210:	f001 f998 	bl	8004544 <CODEC_IO_Write>
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	4413      	add	r3, r2
 800321c:	61fb      	str	r3, [r7, #28]
      break;
 800321e:	e046      	b.n	80032ae <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003220:	89fb      	ldrh	r3, [r7, #14]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f240 3203 	movw	r2, #771	@ 0x303
 8003228:	2105      	movs	r1, #5
 800322a:	4618      	mov	r0, r3
 800322c:	f001 f98a 	bl	8004544 <CODEC_IO_Write>
 8003230:	4603      	mov	r3, r0
 8003232:	461a      	mov	r2, r3
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	4413      	add	r3, r2
 8003238:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800323a:	89fb      	ldrh	r3, [r7, #14]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2201      	movs	r2, #1
 8003240:	f240 6101 	movw	r1, #1537	@ 0x601
 8003244:	4618      	mov	r0, r3
 8003246:	f001 f97d 	bl	8004544 <CODEC_IO_Write>
 800324a:	4603      	mov	r3, r0
 800324c:	461a      	mov	r2, r3
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	4413      	add	r3, r2
 8003252:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003254:	89fb      	ldrh	r3, [r7, #14]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2201      	movs	r2, #1
 800325a:	f240 6102 	movw	r1, #1538	@ 0x602
 800325e:	4618      	mov	r0, r3
 8003260:	f001 f970 	bl	8004544 <CODEC_IO_Write>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	4413      	add	r3, r2
 800326c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800326e:	89fb      	ldrh	r3, [r7, #14]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2200      	movs	r2, #0
 8003274:	f240 6104 	movw	r1, #1540	@ 0x604
 8003278:	4618      	mov	r0, r3
 800327a:	f001 f963 	bl	8004544 <CODEC_IO_Write>
 800327e:	4603      	mov	r3, r0
 8003280:	461a      	mov	r2, r3
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	4413      	add	r3, r2
 8003286:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003288:	89fb      	ldrh	r3, [r7, #14]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2200      	movs	r2, #0
 800328e:	f240 6105 	movw	r1, #1541	@ 0x605
 8003292:	4618      	mov	r0, r3
 8003294:	f001 f956 	bl	8004544 <CODEC_IO_Write>
 8003298:	4603      	mov	r3, r0
 800329a:	461a      	mov	r2, r3
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	4413      	add	r3, r2
 80032a0:	61fb      	str	r3, [r7, #28]
      break;
 80032a2:	e004      	b.n	80032ae <wm8994_Init+0x39e>
 80032a4:	20030fac 	.word	0x20030fac
    }
  }
  else
  {
    outputEnabled = 0;
 80032a8:	4b99      	ldr	r3, [pc, #612]	@ (8003510 <wm8994_Init+0x600>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80032ae:	8afb      	ldrh	r3, [r7, #22]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 81ab 	beq.w	800360c <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 80032b6:	4b97      	ldr	r3, [pc, #604]	@ (8003514 <wm8994_Init+0x604>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80032bc:	8afb      	ldrh	r3, [r7, #22]
 80032be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032c2:	f000 8129 	beq.w	8003518 <wm8994_Init+0x608>
 80032c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032ca:	f300 819b 	bgt.w	8003604 <wm8994_Init+0x6f4>
 80032ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032d2:	d05a      	beq.n	800338a <wm8994_Init+0x47a>
 80032d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032d8:	f300 8194 	bgt.w	8003604 <wm8994_Init+0x6f4>
 80032dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032e0:	f000 80c6 	beq.w	8003470 <wm8994_Init+0x560>
 80032e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032e8:	f040 818c 	bne.w	8003604 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80032ec:	89fb      	ldrh	r3, [r7, #14]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 80032f4:	2104      	movs	r1, #4
 80032f6:	4618      	mov	r0, r3
 80032f8:	f001 f924 	bl	8004544 <CODEC_IO_Write>
 80032fc:	4603      	mov	r3, r0
 80032fe:	461a      	mov	r2, r3
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	4413      	add	r3, r2
 8003304:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003306:	89fb      	ldrh	r3, [r7, #14]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	22db      	movs	r2, #219	@ 0xdb
 800330c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8003310:	4618      	mov	r0, r3
 8003312:	f001 f917 	bl	8004544 <CODEC_IO_Write>
 8003316:	4603      	mov	r3, r0
 8003318:	461a      	mov	r2, r3
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	4413      	add	r3, r2
 800331e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8003320:	89fb      	ldrh	r3, [r7, #14]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8003328:	2102      	movs	r1, #2
 800332a:	4618      	mov	r0, r3
 800332c:	f001 f90a 	bl	8004544 <CODEC_IO_Write>
 8003330:	4603      	mov	r3, r0
 8003332:	461a      	mov	r2, r3
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	4413      	add	r3, r2
 8003338:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800333a:	89fb      	ldrh	r3, [r7, #14]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2202      	movs	r2, #2
 8003340:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8003344:	4618      	mov	r0, r3
 8003346:	f001 f8fd 	bl	8004544 <CODEC_IO_Write>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4413      	add	r3, r2
 8003352:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8003354:	89fb      	ldrh	r3, [r7, #14]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2202      	movs	r2, #2
 800335a:	f240 6109 	movw	r1, #1545	@ 0x609
 800335e:	4618      	mov	r0, r3
 8003360:	f001 f8f0 	bl	8004544 <CODEC_IO_Write>
 8003364:	4603      	mov	r3, r0
 8003366:	461a      	mov	r2, r3
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	4413      	add	r3, r2
 800336c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800336e:	89fb      	ldrh	r3, [r7, #14]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	220e      	movs	r2, #14
 8003374:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8003378:	4618      	mov	r0, r3
 800337a:	f001 f8e3 	bl	8004544 <CODEC_IO_Write>
 800337e:	4603      	mov	r3, r0
 8003380:	461a      	mov	r2, r3
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	61fb      	str	r3, [r7, #28]
      break;
 8003388:	e143      	b.n	8003612 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800338a:	89fb      	ldrh	r3, [r7, #14]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2211      	movs	r2, #17
 8003390:	2128      	movs	r1, #40	@ 0x28
 8003392:	4618      	mov	r0, r3
 8003394:	f001 f8d6 	bl	8004544 <CODEC_IO_Write>
 8003398:	4603      	mov	r3, r0
 800339a:	461a      	mov	r2, r3
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	4413      	add	r3, r2
 80033a0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 80033a2:	89fb      	ldrh	r3, [r7, #14]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2235      	movs	r2, #53	@ 0x35
 80033a8:	2129      	movs	r1, #41	@ 0x29
 80033aa:	4618      	mov	r0, r3
 80033ac:	f001 f8ca 	bl	8004544 <CODEC_IO_Write>
 80033b0:	4603      	mov	r3, r0
 80033b2:	461a      	mov	r2, r3
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	4413      	add	r3, r2
 80033b8:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80033ba:	89fb      	ldrh	r3, [r7, #14]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2235      	movs	r2, #53	@ 0x35
 80033c0:	212a      	movs	r1, #42	@ 0x2a
 80033c2:	4618      	mov	r0, r3
 80033c4:	f001 f8be 	bl	8004544 <CODEC_IO_Write>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	4413      	add	r3, r2
 80033d0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80033d2:	89fb      	ldrh	r3, [r7, #14]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f240 3203 	movw	r2, #771	@ 0x303
 80033da:	2104      	movs	r1, #4
 80033dc:	4618      	mov	r0, r3
 80033de:	f001 f8b1 	bl	8004544 <CODEC_IO_Write>
 80033e2:	4603      	mov	r3, r0
 80033e4:	461a      	mov	r2, r3
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	4413      	add	r3, r2
 80033ea:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80033ec:	89fb      	ldrh	r3, [r7, #14]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	22db      	movs	r2, #219	@ 0xdb
 80033f2:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 f8a4 	bl	8004544 <CODEC_IO_Write>
 80033fc:	4603      	mov	r3, r0
 80033fe:	461a      	mov	r2, r3
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	4413      	add	r3, r2
 8003404:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8003406:	89fb      	ldrh	r3, [r7, #14]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f246 3250 	movw	r2, #25424	@ 0x6350
 800340e:	2102      	movs	r1, #2
 8003410:	4618      	mov	r0, r3
 8003412:	f001 f897 	bl	8004544 <CODEC_IO_Write>
 8003416:	4603      	mov	r3, r0
 8003418:	461a      	mov	r2, r3
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003420:	89fb      	ldrh	r3, [r7, #14]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2202      	movs	r2, #2
 8003426:	f240 6106 	movw	r1, #1542	@ 0x606
 800342a:	4618      	mov	r0, r3
 800342c:	f001 f88a 	bl	8004544 <CODEC_IO_Write>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	4413      	add	r3, r2
 8003438:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800343a:	89fb      	ldrh	r3, [r7, #14]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2202      	movs	r2, #2
 8003440:	f240 6107 	movw	r1, #1543	@ 0x607
 8003444:	4618      	mov	r0, r3
 8003446:	f001 f87d 	bl	8004544 <CODEC_IO_Write>
 800344a:	4603      	mov	r3, r0
 800344c:	461a      	mov	r2, r3
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	4413      	add	r3, r2
 8003452:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8003454:	89fb      	ldrh	r3, [r7, #14]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	220d      	movs	r2, #13
 800345a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800345e:	4618      	mov	r0, r3
 8003460:	f001 f870 	bl	8004544 <CODEC_IO_Write>
 8003464:	4603      	mov	r3, r0
 8003466:	461a      	mov	r2, r3
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	4413      	add	r3, r2
 800346c:	61fb      	str	r3, [r7, #28]
      break;
 800346e:	e0d0      	b.n	8003612 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8003470:	89fb      	ldrh	r3, [r7, #14]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8003478:	2104      	movs	r1, #4
 800347a:	4618      	mov	r0, r3
 800347c:	f001 f862 	bl	8004544 <CODEC_IO_Write>
 8003480:	4603      	mov	r3, r0
 8003482:	461a      	mov	r2, r3
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	4413      	add	r3, r2
 8003488:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800348a:	89fb      	ldrh	r3, [r7, #14]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	22db      	movs	r2, #219	@ 0xdb
 8003490:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8003494:	4618      	mov	r0, r3
 8003496:	f001 f855 	bl	8004544 <CODEC_IO_Write>
 800349a:	4603      	mov	r3, r0
 800349c:	461a      	mov	r2, r3
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80034a4:	89fb      	ldrh	r3, [r7, #14]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f246 3250 	movw	r2, #25424	@ 0x6350
 80034ac:	2102      	movs	r1, #2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 f848 	bl	8004544 <CODEC_IO_Write>
 80034b4:	4603      	mov	r3, r0
 80034b6:	461a      	mov	r2, r3
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80034be:	89fb      	ldrh	r3, [r7, #14]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2202      	movs	r2, #2
 80034c4:	f240 6106 	movw	r1, #1542	@ 0x606
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 f83b 	bl	8004544 <CODEC_IO_Write>
 80034ce:	4603      	mov	r3, r0
 80034d0:	461a      	mov	r2, r3
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4413      	add	r3, r2
 80034d6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80034d8:	89fb      	ldrh	r3, [r7, #14]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2202      	movs	r2, #2
 80034de:	f240 6107 	movw	r1, #1543	@ 0x607
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 f82e 	bl	8004544 <CODEC_IO_Write>
 80034e8:	4603      	mov	r3, r0
 80034ea:	461a      	mov	r2, r3
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	4413      	add	r3, r2
 80034f0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80034f2:	89fb      	ldrh	r3, [r7, #14]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	220d      	movs	r2, #13
 80034f8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 f821 	bl	8004544 <CODEC_IO_Write>
 8003502:	4603      	mov	r3, r0
 8003504:	461a      	mov	r2, r3
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4413      	add	r3, r2
 800350a:	61fb      	str	r3, [r7, #28]
      break; 
 800350c:	e081      	b.n	8003612 <wm8994_Init+0x702>
 800350e:	bf00      	nop
 8003510:	20030fac 	.word	0x20030fac
 8003514:	20030fb0 	.word	0x20030fb0
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8003518:	89fb      	ldrh	r3, [r7, #14]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8003520:	2104      	movs	r1, #4
 8003522:	4618      	mov	r0, r3
 8003524:	f001 f80e 	bl	8004544 <CODEC_IO_Write>
 8003528:	4603      	mov	r3, r0
 800352a:	461a      	mov	r2, r3
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	4413      	add	r3, r2
 8003530:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003532:	89fb      	ldrh	r3, [r7, #14]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	22db      	movs	r2, #219	@ 0xdb
 8003538:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800353c:	4618      	mov	r0, r3
 800353e:	f001 f801 	bl	8004544 <CODEC_IO_Write>
 8003542:	4603      	mov	r3, r0
 8003544:	461a      	mov	r2, r3
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	4413      	add	r3, r2
 800354a:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800354c:	89fb      	ldrh	r3, [r7, #14]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	22db      	movs	r2, #219	@ 0xdb
 8003552:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fff4 	bl	8004544 <CODEC_IO_Write>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	4413      	add	r3, r2
 8003564:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8003566:	89fb      	ldrh	r3, [r7, #14]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 800356e:	2102      	movs	r1, #2
 8003570:	4618      	mov	r0, r3
 8003572:	f000 ffe7 	bl	8004544 <CODEC_IO_Write>
 8003576:	4603      	mov	r3, r0
 8003578:	461a      	mov	r2, r3
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003580:	89fb      	ldrh	r3, [r7, #14]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2202      	movs	r2, #2
 8003586:	f240 6106 	movw	r1, #1542	@ 0x606
 800358a:	4618      	mov	r0, r3
 800358c:	f000 ffda 	bl	8004544 <CODEC_IO_Write>
 8003590:	4603      	mov	r3, r0
 8003592:	461a      	mov	r2, r3
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	4413      	add	r3, r2
 8003598:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800359a:	89fb      	ldrh	r3, [r7, #14]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2202      	movs	r2, #2
 80035a0:	f240 6107 	movw	r1, #1543	@ 0x607
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 ffcd 	bl	8004544 <CODEC_IO_Write>
 80035aa:	4603      	mov	r3, r0
 80035ac:	461a      	mov	r2, r3
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	4413      	add	r3, r2
 80035b2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80035b4:	89fb      	ldrh	r3, [r7, #14]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2202      	movs	r2, #2
 80035ba:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 ffc0 	bl	8004544 <CODEC_IO_Write>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	4413      	add	r3, r2
 80035cc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80035ce:	89fb      	ldrh	r3, [r7, #14]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2202      	movs	r2, #2
 80035d4:	f240 6109 	movw	r1, #1545	@ 0x609
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 ffb3 	bl	8004544 <CODEC_IO_Write>
 80035de:	4603      	mov	r3, r0
 80035e0:	461a      	mov	r2, r3
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80035e8:	89fb      	ldrh	r3, [r7, #14]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	220d      	movs	r2, #13
 80035ee:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 ffa6 	bl	8004544 <CODEC_IO_Write>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	4413      	add	r3, r2
 8003600:	61fb      	str	r3, [r7, #28]
      break;    
 8003602:	e006      	b.n	8003612 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	3301      	adds	r3, #1
 8003608:	61fb      	str	r3, [r7, #28]
      break;
 800360a:	e002      	b.n	8003612 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 800360c:	4ba4      	ldr	r3, [pc, #656]	@ (80038a0 <wm8994_Init+0x990>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4aa3      	ldr	r2, [pc, #652]	@ (80038a4 <wm8994_Init+0x994>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d079      	beq.n	800370e <wm8994_Init+0x7fe>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4aa1      	ldr	r2, [pc, #644]	@ (80038a4 <wm8994_Init+0x994>)
 800361e:	4293      	cmp	r3, r2
 8003620:	f200 80ad 	bhi.w	800377e <wm8994_Init+0x86e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800362a:	4293      	cmp	r3, r2
 800362c:	d061      	beq.n	80036f2 <wm8994_Init+0x7e2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003634:	4293      	cmp	r3, r2
 8003636:	f200 80a2 	bhi.w	800377e <wm8994_Init+0x86e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003640:	4293      	cmp	r3, r2
 8003642:	f000 808e 	beq.w	8003762 <wm8994_Init+0x852>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800364c:	4293      	cmp	r3, r2
 800364e:	f200 8096 	bhi.w	800377e <wm8994_Init+0x86e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003658:	d03d      	beq.n	80036d6 <wm8994_Init+0x7c6>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003660:	f200 808d 	bhi.w	800377e <wm8994_Init+0x86e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f245 6222 	movw	r2, #22050	@ 0x5622
 800366a:	4293      	cmp	r3, r2
 800366c:	d06b      	beq.n	8003746 <wm8994_Init+0x836>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003674:	4293      	cmp	r3, r2
 8003676:	f200 8082 	bhi.w	800377e <wm8994_Init+0x86e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003680:	d01b      	beq.n	80036ba <wm8994_Init+0x7aa>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003688:	d879      	bhi.n	800377e <wm8994_Init+0x86e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003690:	d005      	beq.n	800369e <wm8994_Init+0x78e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003698:	4293      	cmp	r3, r2
 800369a:	d046      	beq.n	800372a <wm8994_Init+0x81a>
 800369c:	e06f      	b.n	800377e <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800369e:	89fb      	ldrh	r3, [r7, #14]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2203      	movs	r2, #3
 80036a4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 ff4b 	bl	8004544 <CODEC_IO_Write>
 80036ae:	4603      	mov	r3, r0
 80036b0:	461a      	mov	r2, r3
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	4413      	add	r3, r2
 80036b6:	61fb      	str	r3, [r7, #28]
    break;
 80036b8:	e06f      	b.n	800379a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80036ba:	89fb      	ldrh	r3, [r7, #14]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2233      	movs	r2, #51	@ 0x33
 80036c0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 ff3d 	bl	8004544 <CODEC_IO_Write>
 80036ca:	4603      	mov	r3, r0
 80036cc:	461a      	mov	r2, r3
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	61fb      	str	r3, [r7, #28]
    break;
 80036d4:	e061      	b.n	800379a <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80036d6:	89fb      	ldrh	r3, [r7, #14]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2263      	movs	r2, #99	@ 0x63
 80036dc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 ff2f 	bl	8004544 <CODEC_IO_Write>
 80036e6:	4603      	mov	r3, r0
 80036e8:	461a      	mov	r2, r3
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4413      	add	r3, r2
 80036ee:	61fb      	str	r3, [r7, #28]
    break;
 80036f0:	e053      	b.n	800379a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80036f2:	89fb      	ldrh	r3, [r7, #14]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2283      	movs	r2, #131	@ 0x83
 80036f8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 ff21 	bl	8004544 <CODEC_IO_Write>
 8003702:	4603      	mov	r3, r0
 8003704:	461a      	mov	r2, r3
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	61fb      	str	r3, [r7, #28]
    break;
 800370c:	e045      	b.n	800379a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800370e:	89fb      	ldrh	r3, [r7, #14]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	22a3      	movs	r2, #163	@ 0xa3
 8003714:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003718:	4618      	mov	r0, r3
 800371a:	f000 ff13 	bl	8004544 <CODEC_IO_Write>
 800371e:	4603      	mov	r3, r0
 8003720:	461a      	mov	r2, r3
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	61fb      	str	r3, [r7, #28]
    break;
 8003728:	e037      	b.n	800379a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800372a:	89fb      	ldrh	r3, [r7, #14]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2213      	movs	r2, #19
 8003730:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003734:	4618      	mov	r0, r3
 8003736:	f000 ff05 	bl	8004544 <CODEC_IO_Write>
 800373a:	4603      	mov	r3, r0
 800373c:	461a      	mov	r2, r3
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	4413      	add	r3, r2
 8003742:	61fb      	str	r3, [r7, #28]
    break;
 8003744:	e029      	b.n	800379a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003746:	89fb      	ldrh	r3, [r7, #14]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2243      	movs	r2, #67	@ 0x43
 800374c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003750:	4618      	mov	r0, r3
 8003752:	f000 fef7 	bl	8004544 <CODEC_IO_Write>
 8003756:	4603      	mov	r3, r0
 8003758:	461a      	mov	r2, r3
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	61fb      	str	r3, [r7, #28]
    break;
 8003760:	e01b      	b.n	800379a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003762:	89fb      	ldrh	r3, [r7, #14]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2273      	movs	r2, #115	@ 0x73
 8003768:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fee9 	bl	8004544 <CODEC_IO_Write>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	4413      	add	r3, r2
 800377a:	61fb      	str	r3, [r7, #28]
    break; 
 800377c:	e00d      	b.n	800379a <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800377e:	89fb      	ldrh	r3, [r7, #14]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2283      	movs	r2, #131	@ 0x83
 8003784:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fedb 	bl	8004544 <CODEC_IO_Write>
 800378e:	4603      	mov	r3, r0
 8003790:	461a      	mov	r2, r3
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	61fb      	str	r3, [r7, #28]
    break; 
 8003798:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800379a:	8afb      	ldrh	r3, [r7, #22]
 800379c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037a0:	d10e      	bne.n	80037c0 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80037a2:	89fb      	ldrh	r3, [r7, #14]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	f244 0218 	movw	r2, #16408	@ 0x4018
 80037aa:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fec8 	bl	8004544 <CODEC_IO_Write>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	4413      	add	r3, r2
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	e00d      	b.n	80037dc <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80037c0:	89fb      	ldrh	r3, [r7, #14]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f244 0210 	movw	r2, #16400	@ 0x4010
 80037c8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 feb9 	bl	8004544 <CODEC_IO_Write>
 80037d2:	4603      	mov	r3, r0
 80037d4:	461a      	mov	r2, r3
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80037dc:	89fb      	ldrh	r3, [r7, #14]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2200      	movs	r2, #0
 80037e2:	f240 3102 	movw	r1, #770	@ 0x302
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 feac 	bl	8004544 <CODEC_IO_Write>
 80037ec:	4603      	mov	r3, r0
 80037ee:	461a      	mov	r2, r3
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	4413      	add	r3, r2
 80037f4:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80037f6:	89fb      	ldrh	r3, [r7, #14]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	220a      	movs	r2, #10
 80037fc:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fe9f 	bl	8004544 <CODEC_IO_Write>
 8003806:	4603      	mov	r3, r0
 8003808:	461a      	mov	r2, r3
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	4413      	add	r3, r2
 800380e:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8003810:	89fb      	ldrh	r3, [r7, #14]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2201      	movs	r2, #1
 8003816:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fe92 	bl	8004544 <CODEC_IO_Write>
 8003820:	4603      	mov	r3, r0
 8003822:	461a      	mov	r2, r3
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	4413      	add	r3, r2
 8003828:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800382a:	8b3b      	ldrh	r3, [r7, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 817b 	beq.w	8003b28 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8003832:	8b3b      	ldrh	r3, [r7, #24]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d157      	bne.n	80038e8 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8003838:	89fb      	ldrh	r3, [r7, #14]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003840:	212d      	movs	r1, #45	@ 0x2d
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fe7e 	bl	8004544 <CODEC_IO_Write>
 8003848:	4603      	mov	r3, r0
 800384a:	461a      	mov	r2, r3
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	4413      	add	r3, r2
 8003850:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8003852:	89fb      	ldrh	r3, [r7, #14]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800385a:	212e      	movs	r1, #46	@ 0x2e
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fe71 	bl	8004544 <CODEC_IO_Write>
 8003862:	4603      	mov	r3, r0
 8003864:	461a      	mov	r2, r3
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 800386c:	4b0e      	ldr	r3, [pc, #56]	@ (80038a8 <wm8994_Init+0x998>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01b      	beq.n	80038ac <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8003874:	89fb      	ldrh	r3, [r7, #14]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 800387c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fe5f 	bl	8004544 <CODEC_IO_Write>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4413      	add	r3, r2
 800388e:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8003890:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <wm8994_Init+0x998>)
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8003896:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800389a:	f001 f829 	bl	80048f0 <AUDIO_IO_Delay>
 800389e:	e016      	b.n	80038ce <wm8994_Init+0x9be>
 80038a0:	20030fb0 	.word	0x20030fb0
 80038a4:	00017700 	.word	0x00017700
 80038a8:	2000004c 	.word	0x2000004c
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80038ac:	89fb      	ldrh	r3, [r7, #14]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f248 1208 	movw	r2, #33032	@ 0x8108
 80038b4:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fe43 	bl	8004544 <CODEC_IO_Write>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	4413      	add	r3, r2
 80038c6:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80038c8:	2032      	movs	r0, #50	@ 0x32
 80038ca:	f001 f811 	bl	80048f0 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80038ce:	89fb      	ldrh	r3, [r7, #14]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2200      	movs	r2, #0
 80038d4:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fe33 	bl	8004544 <CODEC_IO_Write>
 80038de:	4603      	mov	r3, r0
 80038e0:	461a      	mov	r2, r3
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	4413      	add	r3, r2
 80038e6:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80038e8:	89fb      	ldrh	r3, [r7, #14]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80038f0:	2103      	movs	r1, #3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fe26 	bl	8004544 <CODEC_IO_Write>
 80038f8:	4603      	mov	r3, r0
 80038fa:	461a      	mov	r2, r3
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	4413      	add	r3, r2
 8003900:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8003902:	89fb      	ldrh	r3, [r7, #14]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2200      	movs	r2, #0
 8003908:	2122      	movs	r1, #34	@ 0x22
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fe1a 	bl	8004544 <CODEC_IO_Write>
 8003910:	4603      	mov	r3, r0
 8003912:	461a      	mov	r2, r3
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 800391a:	89fb      	ldrh	r3, [r7, #14]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2200      	movs	r2, #0
 8003920:	2123      	movs	r1, #35	@ 0x23
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fe0e 	bl	8004544 <CODEC_IO_Write>
 8003928:	4603      	mov	r3, r0
 800392a:	461a      	mov	r2, r3
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	4413      	add	r3, r2
 8003930:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8003932:	89fb      	ldrh	r3, [r7, #14]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800393a:	2136      	movs	r1, #54	@ 0x36
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fe01 	bl	8004544 <CODEC_IO_Write>
 8003942:	4603      	mov	r3, r0
 8003944:	461a      	mov	r2, r3
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 800394c:	89fb      	ldrh	r3, [r7, #14]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f243 0203 	movw	r2, #12291	@ 0x3003
 8003954:	2101      	movs	r1, #1
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fdf4 	bl	8004544 <CODEC_IO_Write>
 800395c:	4603      	mov	r3, r0
 800395e:	461a      	mov	r2, r3
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003966:	8afb      	ldrh	r3, [r7, #22]
 8003968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800396c:	d10d      	bne.n	800398a <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 800396e:	89fb      	ldrh	r3, [r7, #14]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f240 2205 	movw	r2, #517	@ 0x205
 8003976:	2151      	movs	r1, #81	@ 0x51
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fde3 	bl	8004544 <CODEC_IO_Write>
 800397e:	4603      	mov	r3, r0
 8003980:	461a      	mov	r2, r3
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	e00b      	b.n	80039a2 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 800398a:	89fb      	ldrh	r3, [r7, #14]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2205      	movs	r2, #5
 8003990:	2151      	movs	r1, #81	@ 0x51
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fdd6 	bl	8004544 <CODEC_IO_Write>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4413      	add	r3, r2
 80039a0:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80039a2:	8b7b      	ldrh	r3, [r7, #26]
 80039a4:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 80039a8:	f043 0303 	orr.w	r3, r3, #3
 80039ac:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80039ae:	89fb      	ldrh	r3, [r7, #14]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	8b7a      	ldrh	r2, [r7, #26]
 80039b4:	2101      	movs	r1, #1
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fdc4 	bl	8004544 <CODEC_IO_Write>
 80039bc:	4603      	mov	r3, r0
 80039be:	461a      	mov	r2, r3
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	4413      	add	r3, r2
 80039c4:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80039c6:	89fb      	ldrh	r3, [r7, #14]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2222      	movs	r2, #34	@ 0x22
 80039cc:	2160      	movs	r1, #96	@ 0x60
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fdb8 	bl	8004544 <CODEC_IO_Write>
 80039d4:	4603      	mov	r3, r0
 80039d6:	461a      	mov	r2, r3
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4413      	add	r3, r2
 80039dc:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80039de:	89fb      	ldrh	r3, [r7, #14]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f649 7225 	movw	r2, #40741	@ 0x9f25
 80039e6:	214c      	movs	r1, #76	@ 0x4c
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fdab 	bl	8004544 <CODEC_IO_Write>
 80039ee:	4603      	mov	r3, r0
 80039f0:	461a      	mov	r2, r3
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	4413      	add	r3, r2
 80039f6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80039f8:	200f      	movs	r0, #15
 80039fa:	f000 ff79 	bl	80048f0 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80039fe:	89fb      	ldrh	r3, [r7, #14]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2201      	movs	r2, #1
 8003a04:	212d      	movs	r1, #45	@ 0x2d
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fd9c 	bl	8004544 <CODEC_IO_Write>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	461a      	mov	r2, r3
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	4413      	add	r3, r2
 8003a14:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8003a16:	89fb      	ldrh	r3, [r7, #14]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	212e      	movs	r1, #46	@ 0x2e
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fd90 	bl	8004544 <CODEC_IO_Write>
 8003a24:	4603      	mov	r3, r0
 8003a26:	461a      	mov	r2, r3
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8003a2e:	89fb      	ldrh	r3, [r7, #14]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8003a36:	2103      	movs	r1, #3
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fd83 	bl	8004544 <CODEC_IO_Write>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	461a      	mov	r2, r3
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8003a48:	89fb      	ldrh	r3, [r7, #14]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2233      	movs	r2, #51	@ 0x33
 8003a4e:	2154      	movs	r1, #84	@ 0x54
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fd77 	bl	8004544 <CODEC_IO_Write>
 8003a56:	4603      	mov	r3, r0
 8003a58:	461a      	mov	r2, r3
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8003a60:	f240 1001 	movw	r0, #257	@ 0x101
 8003a64:	f000 ff44 	bl	80048f0 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8003a68:	89fb      	ldrh	r3, [r7, #14]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	22ee      	movs	r2, #238	@ 0xee
 8003a6e:	2160      	movs	r1, #96	@ 0x60
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fd67 	bl	8004544 <CODEC_IO_Write>
 8003a76:	4603      	mov	r3, r0
 8003a78:	461a      	mov	r2, r3
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8003a80:	89fb      	ldrh	r3, [r7, #14]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	22c0      	movs	r2, #192	@ 0xc0
 8003a86:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fd5a 	bl	8004544 <CODEC_IO_Write>
 8003a90:	4603      	mov	r3, r0
 8003a92:	461a      	mov	r2, r3
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8003a9a:	89fb      	ldrh	r3, [r7, #14]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	22c0      	movs	r2, #192	@ 0xc0
 8003aa0:	f240 6111 	movw	r1, #1553	@ 0x611
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fd4d 	bl	8004544 <CODEC_IO_Write>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	461a      	mov	r2, r3
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003ab4:	89fb      	ldrh	r3, [r7, #14]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2210      	movs	r2, #16
 8003aba:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fd40 	bl	8004544 <CODEC_IO_Write>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8003ace:	89fb      	ldrh	r3, [r7, #14]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	22c0      	movs	r2, #192	@ 0xc0
 8003ad4:	f240 6112 	movw	r1, #1554	@ 0x612
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fd33 	bl	8004544 <CODEC_IO_Write>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8003ae8:	89fb      	ldrh	r3, [r7, #14]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	22c0      	movs	r2, #192	@ 0xc0
 8003aee:	f240 6113 	movw	r1, #1555	@ 0x613
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fd26 	bl	8004544 <CODEC_IO_Write>
 8003af8:	4603      	mov	r3, r0
 8003afa:	461a      	mov	r2, r3
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	4413      	add	r3, r2
 8003b00:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003b02:	89fb      	ldrh	r3, [r7, #14]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2210      	movs	r2, #16
 8003b08:	f240 4122 	movw	r1, #1058	@ 0x422
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fd19 	bl	8004544 <CODEC_IO_Write>
 8003b12:	4603      	mov	r3, r0
 8003b14:	461a      	mov	r2, r3
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003b1c:	7afa      	ldrb	r2, [r7, #11]
 8003b1e:	89fb      	ldrh	r3, [r7, #14]
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f984 	bl	8003e30 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8003b28:	8afb      	ldrh	r3, [r7, #22]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 80a6 	beq.w	8003c7c <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8003b30:	8afb      	ldrh	r3, [r7, #22]
 8003b32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b36:	d003      	beq.n	8003b40 <wm8994_Init+0xc30>
 8003b38:	8afb      	ldrh	r3, [r7, #22]
 8003b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b3e:	d12b      	bne.n	8003b98 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003b40:	8b7b      	ldrh	r3, [r7, #26]
 8003b42:	f043 0313 	orr.w	r3, r3, #19
 8003b46:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003b48:	89fb      	ldrh	r3, [r7, #14]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	8b7a      	ldrh	r2, [r7, #26]
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fcf7 	bl	8004544 <CODEC_IO_Write>
 8003b56:	4603      	mov	r3, r0
 8003b58:	461a      	mov	r2, r3
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003b60:	89fb      	ldrh	r3, [r7, #14]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2202      	movs	r2, #2
 8003b66:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fcea 	bl	8004544 <CODEC_IO_Write>
 8003b70:	4603      	mov	r3, r0
 8003b72:	461a      	mov	r2, r3
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	4413      	add	r3, r2
 8003b78:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8003b7a:	89fb      	ldrh	r3, [r7, #14]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003b82:	f240 4111 	movw	r1, #1041	@ 0x411
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fcdc 	bl	8004544 <CODEC_IO_Write>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	461a      	mov	r2, r3
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	e06b      	b.n	8003c70 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003b98:	8afb      	ldrh	r3, [r7, #22]
 8003b9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b9e:	d139      	bne.n	8003c14 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003ba0:	8b7b      	ldrh	r3, [r7, #26]
 8003ba2:	f043 0313 	orr.w	r3, r3, #19
 8003ba6:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003ba8:	89fb      	ldrh	r3, [r7, #14]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	8b7a      	ldrh	r2, [r7, #26]
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fcc7 	bl	8004544 <CODEC_IO_Write>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003bc0:	89fb      	ldrh	r3, [r7, #14]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fcba 	bl	8004544 <CODEC_IO_Write>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003bda:	89fb      	ldrh	r3, [r7, #14]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003be2:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fcac 	bl	8004544 <CODEC_IO_Write>
 8003bec:	4603      	mov	r3, r0
 8003bee:	461a      	mov	r2, r3
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8003bf6:	89fb      	ldrh	r3, [r7, #14]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003bfe:	f240 4111 	movw	r1, #1041	@ 0x411
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fc9e 	bl	8004544 <CODEC_IO_Write>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	e02d      	b.n	8003c70 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8003c14:	8afb      	ldrh	r3, [r7, #22]
 8003c16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c1a:	d003      	beq.n	8003c24 <wm8994_Init+0xd14>
 8003c1c:	8afb      	ldrh	r3, [r7, #22]
 8003c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c22:	d125      	bne.n	8003c70 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8003c24:	89fb      	ldrh	r3, [r7, #14]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	220b      	movs	r2, #11
 8003c2a:	2118      	movs	r1, #24
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fc89 	bl	8004544 <CODEC_IO_Write>
 8003c32:	4603      	mov	r3, r0
 8003c34:	461a      	mov	r2, r3
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	4413      	add	r3, r2
 8003c3a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8003c3c:	89fb      	ldrh	r3, [r7, #14]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	220b      	movs	r2, #11
 8003c42:	211a      	movs	r1, #26
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fc7d 	bl	8004544 <CODEC_IO_Write>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003c54:	89fb      	ldrh	r3, [r7, #14]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003c5c:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 fc6f 	bl	8004544 <CODEC_IO_Write>
 8003c66:	4603      	mov	r3, r0
 8003c68:	461a      	mov	r2, r3
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003c70:	7afa      	ldrb	r2, [r7, #11]
 8003c72:	89fb      	ldrh	r3, [r7, #14]
 8003c74:	4611      	mov	r1, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f8da 	bl	8003e30 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8003c7c:	69fb      	ldr	r3, [r7, #28]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3720      	adds	r7, #32
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop

08003c88 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8003c8c:	f000 fdd2 	bl	8004834 <AUDIO_IO_DeInit>
}
 8003c90:	bf00      	nop
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8003c9e:	f000 fdbf 	bl	8004820 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fdf5 	bl	8004898 <AUDIO_IO_Read>
 8003cae:	4603      	mov	r3, r0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	6039      	str	r1, [r7, #0]
 8003cc2:	80fb      	strh	r3, [r7, #6]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 f9d1 	bl	8004078 <wm8994_SetMute>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4413      	add	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003cde:	68fb      	ldr	r3, [r7, #12]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f9bc 	bl	8004078 <wm8994_SetMute>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4413      	add	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	2102      	movs	r1, #2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fc17 	bl	8004544 <CODEC_IO_Write>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8003d20:	68fb      	ldr	r3, [r7, #12]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	4603      	mov	r3, r0
 8003d32:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 f99b 	bl	8004078 <wm8994_SetMute>
 8003d42:	4602      	mov	r2, r0
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	6039      	str	r1, [r7, #0]
 8003d5e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8003d64:	4b31      	ldr	r3, [pc, #196]	@ (8003e2c <wm8994_Stop+0xd8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d05a      	beq.n	8003e22 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	2101      	movs	r1, #1
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 f981 	bl	8004078 <wm8994_SetMute>
 8003d76:	4602      	mov	r2, r0
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d04e      	beq.n	8003e22 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d8c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fbd7 	bl	8004544 <CODEC_IO_Write>
 8003d96:	4603      	mov	r3, r0
 8003d98:	461a      	mov	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003da8:	f240 4122 	movw	r1, #1058	@ 0x422
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fbc9 	bl	8004544 <CODEC_IO_Write>
 8003db2:	4603      	mov	r3, r0
 8003db4:	461a      	mov	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4413      	add	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	212d      	movs	r1, #45	@ 0x2d
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fbbd 	bl	8004544 <CODEC_IO_Write>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8003dd4:	88fb      	ldrh	r3, [r7, #6]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2200      	movs	r2, #0
 8003dda:	212e      	movs	r1, #46	@ 0x2e
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fbb1 	bl	8004544 <CODEC_IO_Write>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4413      	add	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8003dec:	88fb      	ldrh	r3, [r7, #6]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2200      	movs	r2, #0
 8003df2:	2105      	movs	r1, #5
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fba5 	bl	8004544 <CODEC_IO_Write>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4413      	add	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fb99 	bl	8004544 <CODEC_IO_Write>
 8003e12:	4603      	mov	r3, r0
 8003e14:	461a      	mov	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4413      	add	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8003e1c:	4b03      	ldr	r3, [pc, #12]	@ (8003e2c <wm8994_Stop+0xd8>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8003e22:	68fb      	ldr	r3, [r7, #12]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20030fac 	.word	0x20030fac

08003e30 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	460a      	mov	r2, r1
 8003e3a:	80fb      	strh	r3, [r7, #6]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8003e44:	797b      	ldrb	r3, [r7, #5]
 8003e46:	2b64      	cmp	r3, #100	@ 0x64
 8003e48:	d80b      	bhi.n	8003e62 <wm8994_SetVolume+0x32>
 8003e4a:	797a      	ldrb	r2, [r7, #5]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	019b      	lsls	r3, r3, #6
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	4a86      	ldr	r2, [pc, #536]	@ (800406c <wm8994_SetVolume+0x23c>)
 8003e54:	fb82 1203 	smull	r1, r2, r2, r3
 8003e58:	1152      	asrs	r2, r2, #5
 8003e5a:	17db      	asrs	r3, r3, #31
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	e000      	b.n	8003e64 <wm8994_SetVolume+0x34>
 8003e62:	2364      	movs	r3, #100	@ 0x64
 8003e64:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8003e66:	4b82      	ldr	r3, [pc, #520]	@ (8004070 <wm8994_SetVolume+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 809b 	beq.w	8003fa6 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8003e70:	7afb      	ldrb	r3, [r7, #11]
 8003e72:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e74:	d93d      	bls.n	8003ef2 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003e76:	88fb      	ldrh	r3, [r7, #6]
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f8fc 	bl	8004078 <wm8994_SetMute>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4413      	add	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f240 127f 	movw	r2, #383	@ 0x17f
 8003e90:	211c      	movs	r1, #28
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fb56 	bl	8004544 <CODEC_IO_Write>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	f240 127f 	movw	r2, #383	@ 0x17f
 8003eaa:	211d      	movs	r1, #29
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fb49 	bl	8004544 <CODEC_IO_Write>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f240 127f 	movw	r2, #383	@ 0x17f
 8003ec4:	2126      	movs	r1, #38	@ 0x26
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fb3c 	bl	8004544 <CODEC_IO_Write>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8003ed6:	88fb      	ldrh	r3, [r7, #6]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f240 127f 	movw	r2, #383	@ 0x17f
 8003ede:	2127      	movs	r1, #39	@ 0x27
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fb2f 	bl	8004544 <CODEC_IO_Write>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	461a      	mov	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4413      	add	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	e059      	b.n	8003fa6 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8003ef2:	797b      	ldrb	r3, [r7, #5]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d109      	bne.n	8003f0c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	2101      	movs	r1, #1
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f8bb 	bl	8004078 <wm8994_SetMute>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	e04c      	b.n	8003fa6 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 f8b1 	bl	8004078 <wm8994_SetMute>
 8003f16:	4602      	mov	r2, r0
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	b2d8      	uxtb	r0, r3
 8003f22:	7afb      	ldrb	r3, [r7, #11]
 8003f24:	b21b      	sxth	r3, r3
 8003f26:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003f2a:	b21b      	sxth	r3, r3
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	211c      	movs	r1, #28
 8003f32:	f000 fb07 	bl	8004544 <CODEC_IO_Write>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	b2d8      	uxtb	r0, r3
 8003f44:	7afb      	ldrb	r3, [r7, #11]
 8003f46:	b21b      	sxth	r3, r3
 8003f48:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003f4c:	b21b      	sxth	r3, r3
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	211d      	movs	r1, #29
 8003f54:	f000 faf6 	bl	8004544 <CODEC_IO_Write>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	b2d8      	uxtb	r0, r3
 8003f66:	7afb      	ldrb	r3, [r7, #11]
 8003f68:	b21b      	sxth	r3, r3
 8003f6a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003f6e:	b21b      	sxth	r3, r3
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	2126      	movs	r1, #38	@ 0x26
 8003f76:	f000 fae5 	bl	8004544 <CODEC_IO_Write>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4413      	add	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	b2d8      	uxtb	r0, r3
 8003f88:	7afb      	ldrb	r3, [r7, #11]
 8003f8a:	b21b      	sxth	r3, r3
 8003f8c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003f90:	b21b      	sxth	r3, r3
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	2127      	movs	r1, #39	@ 0x27
 8003f98:	f000 fad4 	bl	8004544 <CODEC_IO_Write>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8003fa6:	4b33      	ldr	r3, [pc, #204]	@ (8004074 <wm8994_SetVolume+0x244>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d059      	beq.n	8004062 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8003fae:	797b      	ldrb	r3, [r7, #5]
 8003fb0:	2b63      	cmp	r3, #99	@ 0x63
 8003fb2:	d80c      	bhi.n	8003fce <wm8994_SetVolume+0x19e>
 8003fb4:	797a      	ldrb	r2, [r7, #5]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	4a2b      	ldr	r2, [pc, #172]	@ (800406c <wm8994_SetVolume+0x23c>)
 8003fc0:	fb82 1203 	smull	r1, r2, r2, r3
 8003fc4:	1152      	asrs	r2, r2, #5
 8003fc6:	17db      	asrs	r3, r3, #31
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	e000      	b.n	8003fd0 <wm8994_SetVolume+0x1a0>
 8003fce:	23ef      	movs	r3, #239	@ 0xef
 8003fd0:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	b2d8      	uxtb	r0, r3
 8003fd6:	7afb      	ldrb	r3, [r7, #11]
 8003fd8:	b21b      	sxth	r3, r3
 8003fda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fde:	b21b      	sxth	r3, r3
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003fe8:	f000 faac 	bl	8004544 <CODEC_IO_Write>
 8003fec:	4603      	mov	r3, r0
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8003ff6:	88fb      	ldrh	r3, [r7, #6]
 8003ff8:	b2d8      	uxtb	r0, r3
 8003ffa:	7afb      	ldrb	r3, [r7, #11]
 8003ffc:	b21b      	sxth	r3, r3
 8003ffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004002:	b21b      	sxth	r3, r3
 8004004:	b29b      	uxth	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	f240 4101 	movw	r1, #1025	@ 0x401
 800400c:	f000 fa9a 	bl	8004544 <CODEC_IO_Write>
 8004010:	4603      	mov	r3, r0
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	b2d8      	uxtb	r0, r3
 800401e:	7afb      	ldrb	r3, [r7, #11]
 8004020:	b21b      	sxth	r3, r3
 8004022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004026:	b21b      	sxth	r3, r3
 8004028:	b29b      	uxth	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	f240 4104 	movw	r1, #1028	@ 0x404
 8004030:	f000 fa88 	bl	8004544 <CODEC_IO_Write>
 8004034:	4603      	mov	r3, r0
 8004036:	461a      	mov	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	b2d8      	uxtb	r0, r3
 8004042:	7afb      	ldrb	r3, [r7, #11]
 8004044:	b21b      	sxth	r3, r3
 8004046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404a:	b21b      	sxth	r3, r3
 800404c:	b29b      	uxth	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	f240 4105 	movw	r1, #1029	@ 0x405
 8004054:	f000 fa76 	bl	8004544 <CODEC_IO_Write>
 8004058:	4603      	mov	r3, r0
 800405a:	461a      	mov	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8004062:	68fb      	ldr	r3, [r7, #12]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	51eb851f 	.word	0x51eb851f
 8004070:	20030fac 	.word	0x20030fac
 8004074:	20030fb0 	.word	0x20030fb0

08004078 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	6039      	str	r1, [r7, #0]
 8004082:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8004088:	4b21      	ldr	r3, [pc, #132]	@ (8004110 <wm8994_SetMute+0x98>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d039      	beq.n	8004104 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d11c      	bne.n	80040d0 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004096:	88fb      	ldrh	r3, [r7, #6]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800409e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fa4e 	bl	8004544 <CODEC_IO_Write>
 80040a8:	4603      	mov	r3, r0
 80040aa:	461a      	mov	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040ba:	f240 4122 	movw	r1, #1058	@ 0x422
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fa40 	bl	8004544 <CODEC_IO_Write>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461a      	mov	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	e019      	b.n	8004104 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2210      	movs	r2, #16
 80040d6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fa32 	bl	8004544 <CODEC_IO_Write>
 80040e0:	4603      	mov	r3, r0
 80040e2:	461a      	mov	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2210      	movs	r2, #16
 80040f0:	f240 4122 	movw	r1, #1058	@ 0x422
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fa25 	bl	8004544 <CODEC_IO_Write>
 80040fa:	4603      	mov	r3, r0
 80040fc:	461a      	mov	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4413      	add	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8004104:	68fb      	ldr	r3, [r7, #12]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20030fac 	.word	0x20030fac

08004114 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	460a      	mov	r2, r1
 800411e:	80fb      	strh	r3, [r7, #6]
 8004120:	4613      	mov	r3, r2
 8004122:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8004128:	797b      	ldrb	r3, [r7, #5]
 800412a:	2b03      	cmp	r3, #3
 800412c:	f000 808c 	beq.w	8004248 <wm8994_SetOutputMode+0x134>
 8004130:	2b03      	cmp	r3, #3
 8004132:	f300 80cb 	bgt.w	80042cc <wm8994_SetOutputMode+0x1b8>
 8004136:	2b01      	cmp	r3, #1
 8004138:	d002      	beq.n	8004140 <wm8994_SetOutputMode+0x2c>
 800413a:	2b02      	cmp	r3, #2
 800413c:	d042      	beq.n	80041c4 <wm8994_SetOutputMode+0xb0>
 800413e:	e0c5      	b.n	80042cc <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8004140:	88fb      	ldrh	r3, [r7, #6]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8004148:	2105      	movs	r1, #5
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f9fa 	bl	8004544 <CODEC_IO_Write>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2200      	movs	r2, #0
 8004160:	f240 6101 	movw	r1, #1537	@ 0x601
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f9ed 	bl	8004544 <CODEC_IO_Write>
 800416a:	4603      	mov	r3, r0
 800416c:	461a      	mov	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4413      	add	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2200      	movs	r2, #0
 800417a:	f240 6102 	movw	r1, #1538	@ 0x602
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f9e0 	bl	8004544 <CODEC_IO_Write>
 8004184:	4603      	mov	r3, r0
 8004186:	461a      	mov	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2202      	movs	r2, #2
 8004194:	f240 6104 	movw	r1, #1540	@ 0x604
 8004198:	4618      	mov	r0, r3
 800419a:	f000 f9d3 	bl	8004544 <CODEC_IO_Write>
 800419e:	4603      	mov	r3, r0
 80041a0:	461a      	mov	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4413      	add	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2202      	movs	r2, #2
 80041ae:	f240 6105 	movw	r1, #1541	@ 0x605
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f9c6 	bl	8004544 <CODEC_IO_Write>
 80041b8:	4603      	mov	r3, r0
 80041ba:	461a      	mov	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4413      	add	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
    break;
 80041c2:	e0c5      	b.n	8004350 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f240 3203 	movw	r2, #771	@ 0x303
 80041cc:	2105      	movs	r1, #5
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f9b8 	bl	8004544 <CODEC_IO_Write>
 80041d4:	4603      	mov	r3, r0
 80041d6:	461a      	mov	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80041de:	88fb      	ldrh	r3, [r7, #6]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2201      	movs	r2, #1
 80041e4:	f240 6101 	movw	r1, #1537	@ 0x601
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 f9ab 	bl	8004544 <CODEC_IO_Write>
 80041ee:	4603      	mov	r3, r0
 80041f0:	461a      	mov	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4413      	add	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2201      	movs	r2, #1
 80041fe:	f240 6102 	movw	r1, #1538	@ 0x602
 8004202:	4618      	mov	r0, r3
 8004204:	f000 f99e 	bl	8004544 <CODEC_IO_Write>
 8004208:	4603      	mov	r3, r0
 800420a:	461a      	mov	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4413      	add	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2200      	movs	r2, #0
 8004218:	f240 6104 	movw	r1, #1540	@ 0x604
 800421c:	4618      	mov	r0, r3
 800421e:	f000 f991 	bl	8004544 <CODEC_IO_Write>
 8004222:	4603      	mov	r3, r0
 8004224:	461a      	mov	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2200      	movs	r2, #0
 8004232:	f240 6105 	movw	r1, #1541	@ 0x605
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f984 	bl	8004544 <CODEC_IO_Write>
 800423c:	4603      	mov	r3, r0
 800423e:	461a      	mov	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
    break;
 8004246:	e083      	b.n	8004350 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8004250:	2105      	movs	r1, #5
 8004252:	4618      	mov	r0, r3
 8004254:	f000 f976 	bl	8004544 <CODEC_IO_Write>
 8004258:	4603      	mov	r3, r0
 800425a:	461a      	mov	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4413      	add	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2201      	movs	r2, #1
 8004268:	f240 6101 	movw	r1, #1537	@ 0x601
 800426c:	4618      	mov	r0, r3
 800426e:	f000 f969 	bl	8004544 <CODEC_IO_Write>
 8004272:	4603      	mov	r3, r0
 8004274:	461a      	mov	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4413      	add	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2201      	movs	r2, #1
 8004282:	f240 6102 	movw	r1, #1538	@ 0x602
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f95c 	bl	8004544 <CODEC_IO_Write>
 800428c:	4603      	mov	r3, r0
 800428e:	461a      	mov	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4413      	add	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004296:	88fb      	ldrh	r3, [r7, #6]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2202      	movs	r2, #2
 800429c:	f240 6104 	movw	r1, #1540	@ 0x604
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 f94f 	bl	8004544 <CODEC_IO_Write>
 80042a6:	4603      	mov	r3, r0
 80042a8:	461a      	mov	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4413      	add	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2202      	movs	r2, #2
 80042b6:	f240 6105 	movw	r1, #1541	@ 0x605
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 f942 	bl	8004544 <CODEC_IO_Write>
 80042c0:	4603      	mov	r3, r0
 80042c2:	461a      	mov	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
    break;
 80042ca:	e041      	b.n	8004350 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f240 3203 	movw	r2, #771	@ 0x303
 80042d4:	2105      	movs	r1, #5
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f934 	bl	8004544 <CODEC_IO_Write>
 80042dc:	4603      	mov	r3, r0
 80042de:	461a      	mov	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2201      	movs	r2, #1
 80042ec:	f240 6101 	movw	r1, #1537	@ 0x601
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 f927 	bl	8004544 <CODEC_IO_Write>
 80042f6:	4603      	mov	r3, r0
 80042f8:	461a      	mov	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4413      	add	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2201      	movs	r2, #1
 8004306:	f240 6102 	movw	r1, #1538	@ 0x602
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f91a 	bl	8004544 <CODEC_IO_Write>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2200      	movs	r2, #0
 8004320:	f240 6104 	movw	r1, #1540	@ 0x604
 8004324:	4618      	mov	r0, r3
 8004326:	f000 f90d 	bl	8004544 <CODEC_IO_Write>
 800432a:	4603      	mov	r3, r0
 800432c:	461a      	mov	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4413      	add	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004334:	88fb      	ldrh	r3, [r7, #6]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2200      	movs	r2, #0
 800433a:	f240 6105 	movw	r1, #1541	@ 0x605
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f900 	bl	8004544 <CODEC_IO_Write>
 8004344:	4603      	mov	r3, r0
 8004346:	461a      	mov	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
    break;    
 800434e:	bf00      	nop
  }  
  return counter;
 8004350:	68fb      	ldr	r3, [r7, #12]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	6039      	str	r1, [r7, #0]
 8004366:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	4a64      	ldr	r2, [pc, #400]	@ (8004500 <wm8994_SetFrequency+0x1a4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d079      	beq.n	8004468 <wm8994_SetFrequency+0x10c>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	4a62      	ldr	r2, [pc, #392]	@ (8004500 <wm8994_SetFrequency+0x1a4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	f200 80ad 	bhi.w	80044d8 <wm8994_SetFrequency+0x17c>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8004384:	4293      	cmp	r3, r2
 8004386:	d061      	beq.n	800444c <wm8994_SetFrequency+0xf0>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800438e:	4293      	cmp	r3, r2
 8004390:	f200 80a2 	bhi.w	80044d8 <wm8994_SetFrequency+0x17c>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800439a:	4293      	cmp	r3, r2
 800439c:	f000 808e 	beq.w	80044bc <wm8994_SetFrequency+0x160>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80043a6:	4293      	cmp	r3, r2
 80043a8:	f200 8096 	bhi.w	80044d8 <wm8994_SetFrequency+0x17c>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80043b2:	d03d      	beq.n	8004430 <wm8994_SetFrequency+0xd4>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80043ba:	f200 808d 	bhi.w	80044d8 <wm8994_SetFrequency+0x17c>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f245 6222 	movw	r2, #22050	@ 0x5622
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d06b      	beq.n	80044a0 <wm8994_SetFrequency+0x144>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	f245 6222 	movw	r2, #22050	@ 0x5622
 80043ce:	4293      	cmp	r3, r2
 80043d0:	f200 8082 	bhi.w	80044d8 <wm8994_SetFrequency+0x17c>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80043da:	d01b      	beq.n	8004414 <wm8994_SetFrequency+0xb8>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80043e2:	d879      	bhi.n	80044d8 <wm8994_SetFrequency+0x17c>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80043ea:	d005      	beq.n	80043f8 <wm8994_SetFrequency+0x9c>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d046      	beq.n	8004484 <wm8994_SetFrequency+0x128>
 80043f6:	e06f      	b.n	80044d8 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2203      	movs	r2, #3
 80043fe:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8004402:	4618      	mov	r0, r3
 8004404:	f000 f89e 	bl	8004544 <CODEC_IO_Write>
 8004408:	4603      	mov	r3, r0
 800440a:	461a      	mov	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
    break;
 8004412:	e06f      	b.n	80044f4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2233      	movs	r2, #51	@ 0x33
 800441a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800441e:	4618      	mov	r0, r3
 8004420:	f000 f890 	bl	8004544 <CODEC_IO_Write>
 8004424:	4603      	mov	r3, r0
 8004426:	461a      	mov	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
    break;
 800442e:	e061      	b.n	80044f4 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2263      	movs	r2, #99	@ 0x63
 8004436:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800443a:	4618      	mov	r0, r3
 800443c:	f000 f882 	bl	8004544 <CODEC_IO_Write>
 8004440:	4603      	mov	r3, r0
 8004442:	461a      	mov	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
    break;
 800444a:	e053      	b.n	80044f4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2283      	movs	r2, #131	@ 0x83
 8004452:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8004456:	4618      	mov	r0, r3
 8004458:	f000 f874 	bl	8004544 <CODEC_IO_Write>
 800445c:	4603      	mov	r3, r0
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
    break;
 8004466:	e045      	b.n	80044f4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	22a3      	movs	r2, #163	@ 0xa3
 800446e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8004472:	4618      	mov	r0, r3
 8004474:	f000 f866 	bl	8004544 <CODEC_IO_Write>
 8004478:	4603      	mov	r3, r0
 800447a:	461a      	mov	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
    break;
 8004482:	e037      	b.n	80044f4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2213      	movs	r2, #19
 800448a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f858 	bl	8004544 <CODEC_IO_Write>
 8004494:	4603      	mov	r3, r0
 8004496:	461a      	mov	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
    break;
 800449e:	e029      	b.n	80044f4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80044a0:	88fb      	ldrh	r3, [r7, #6]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2243      	movs	r2, #67	@ 0x43
 80044a6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 f84a 	bl	8004544 <CODEC_IO_Write>
 80044b0:	4603      	mov	r3, r0
 80044b2:	461a      	mov	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
    break;
 80044ba:	e01b      	b.n	80044f4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2273      	movs	r2, #115	@ 0x73
 80044c2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f83c 	bl	8004544 <CODEC_IO_Write>
 80044cc:	4603      	mov	r3, r0
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
    break; 
 80044d6:	e00d      	b.n	80044f4 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2283      	movs	r2, #131	@ 0x83
 80044de:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f82e 	bl	8004544 <CODEC_IO_Write>
 80044e8:	4603      	mov	r3, r0
 80044ea:	461a      	mov	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
    break; 
 80044f2:	bf00      	nop
  }
  return counter;
 80044f4:	68fb      	ldr	r3, [r7, #12]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	00017700 	.word	0x00017700

08004504 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2200      	movs	r2, #0
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f000 f812 	bl	8004544 <CODEC_IO_Write>
 8004520:	4603      	mov	r3, r0
 8004522:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8004524:	4b05      	ldr	r3, [pc, #20]	@ (800453c <wm8994_Reset+0x38>)
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800452a:	4b05      	ldr	r3, [pc, #20]	@ (8004540 <wm8994_Reset+0x3c>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]

  return counter;
 8004530:	68fb      	ldr	r3, [r7, #12]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20030fac 	.word	0x20030fac
 8004540:	20030fb0 	.word	0x20030fb0

08004544 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
 800454e:	460b      	mov	r3, r1
 8004550:	80bb      	strh	r3, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	88b9      	ldrh	r1, [r7, #4]
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 f96f 	bl	8004844 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	b2db      	uxtb	r3, r3
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08c      	sub	sp, #48	@ 0x30
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a51      	ldr	r2, [pc, #324]	@ (80046c4 <I2Cx_MspInit+0x150>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d14d      	bne.n	8004620 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004584:	4b50      	ldr	r3, [pc, #320]	@ (80046c8 <I2Cx_MspInit+0x154>)
 8004586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004588:	4a4f      	ldr	r2, [pc, #316]	@ (80046c8 <I2Cx_MspInit+0x154>)
 800458a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800458e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004590:	4b4d      	ldr	r3, [pc, #308]	@ (80046c8 <I2Cx_MspInit+0x154>)
 8004592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800459c:	2380      	movs	r3, #128	@ 0x80
 800459e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80045a0:	2312      	movs	r3, #18
 80045a2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80045a8:	2302      	movs	r3, #2
 80045aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80045ac:	2304      	movs	r3, #4
 80045ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80045b0:	f107 031c 	add.w	r3, r7, #28
 80045b4:	4619      	mov	r1, r3
 80045b6:	4845      	ldr	r0, [pc, #276]	@ (80046cc <I2Cx_MspInit+0x158>)
 80045b8:	f001 fdf0 	bl	800619c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80045bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80045c2:	f107 031c 	add.w	r3, r7, #28
 80045c6:	4619      	mov	r1, r3
 80045c8:	4840      	ldr	r0, [pc, #256]	@ (80046cc <I2Cx_MspInit+0x158>)
 80045ca:	f001 fde7 	bl	800619c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80045ce:	4b3e      	ldr	r3, [pc, #248]	@ (80046c8 <I2Cx_MspInit+0x154>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	4a3d      	ldr	r2, [pc, #244]	@ (80046c8 <I2Cx_MspInit+0x154>)
 80045d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045da:	4b3b      	ldr	r3, [pc, #236]	@ (80046c8 <I2Cx_MspInit+0x154>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80045e6:	4b38      	ldr	r3, [pc, #224]	@ (80046c8 <I2Cx_MspInit+0x154>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	4a37      	ldr	r2, [pc, #220]	@ (80046c8 <I2Cx_MspInit+0x154>)
 80045ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045f0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80045f2:	4b35      	ldr	r3, [pc, #212]	@ (80046c8 <I2Cx_MspInit+0x154>)
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	4a34      	ldr	r2, [pc, #208]	@ (80046c8 <I2Cx_MspInit+0x154>)
 80045f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045fc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80045fe:	2200      	movs	r2, #0
 8004600:	210f      	movs	r1, #15
 8004602:	2048      	movs	r0, #72	@ 0x48
 8004604:	f001 f82d 	bl	8005662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8004608:	2048      	movs	r0, #72	@ 0x48
 800460a:	f001 f846 	bl	800569a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800460e:	2200      	movs	r2, #0
 8004610:	210f      	movs	r1, #15
 8004612:	2049      	movs	r0, #73	@ 0x49
 8004614:	f001 f825 	bl	8005662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8004618:	2049      	movs	r0, #73	@ 0x49
 800461a:	f001 f83e 	bl	800569a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800461e:	e04d      	b.n	80046bc <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004620:	4b29      	ldr	r3, [pc, #164]	@ (80046c8 <I2Cx_MspInit+0x154>)
 8004622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004624:	4a28      	ldr	r2, [pc, #160]	@ (80046c8 <I2Cx_MspInit+0x154>)
 8004626:	f043 0302 	orr.w	r3, r3, #2
 800462a:	6313      	str	r3, [r2, #48]	@ 0x30
 800462c:	4b26      	ldr	r3, [pc, #152]	@ (80046c8 <I2Cx_MspInit+0x154>)
 800462e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8004638:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800463c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800463e:	2312      	movs	r3, #18
 8004640:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004642:	2300      	movs	r3, #0
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004646:	2302      	movs	r3, #2
 8004648:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800464a:	2304      	movs	r3, #4
 800464c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800464e:	f107 031c 	add.w	r3, r7, #28
 8004652:	4619      	mov	r1, r3
 8004654:	481e      	ldr	r0, [pc, #120]	@ (80046d0 <I2Cx_MspInit+0x15c>)
 8004656:	f001 fda1 	bl	800619c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800465a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800465e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004660:	f107 031c 	add.w	r3, r7, #28
 8004664:	4619      	mov	r1, r3
 8004666:	481a      	ldr	r0, [pc, #104]	@ (80046d0 <I2Cx_MspInit+0x15c>)
 8004668:	f001 fd98 	bl	800619c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800466c:	4b16      	ldr	r3, [pc, #88]	@ (80046c8 <I2Cx_MspInit+0x154>)
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	4a15      	ldr	r2, [pc, #84]	@ (80046c8 <I2Cx_MspInit+0x154>)
 8004672:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004676:	6413      	str	r3, [r2, #64]	@ 0x40
 8004678:	4b13      	ldr	r3, [pc, #76]	@ (80046c8 <I2Cx_MspInit+0x154>)
 800467a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8004684:	4b10      	ldr	r3, [pc, #64]	@ (80046c8 <I2Cx_MspInit+0x154>)
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	4a0f      	ldr	r2, [pc, #60]	@ (80046c8 <I2Cx_MspInit+0x154>)
 800468a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800468e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004690:	4b0d      	ldr	r3, [pc, #52]	@ (80046c8 <I2Cx_MspInit+0x154>)
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	4a0c      	ldr	r2, [pc, #48]	@ (80046c8 <I2Cx_MspInit+0x154>)
 8004696:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800469a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800469c:	2200      	movs	r2, #0
 800469e:	210f      	movs	r1, #15
 80046a0:	201f      	movs	r0, #31
 80046a2:	f000 ffde 	bl	8005662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80046a6:	201f      	movs	r0, #31
 80046a8:	f000 fff7 	bl	800569a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80046ac:	2200      	movs	r2, #0
 80046ae:	210f      	movs	r1, #15
 80046b0:	2020      	movs	r0, #32
 80046b2:	f000 ffd6 	bl	8005662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80046b6:	2020      	movs	r0, #32
 80046b8:	f000 ffef 	bl	800569a <HAL_NVIC_EnableIRQ>
}
 80046bc:	bf00      	nop
 80046be:	3730      	adds	r7, #48	@ 0x30
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20030fb4 	.word	0x20030fb4
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40021c00 	.word	0x40021c00
 80046d0:	40020400 	.word	0x40020400

080046d4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f002 fb87 	bl	8006df0 <HAL_I2C_GetState>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d125      	bne.n	8004734 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a14      	ldr	r2, [pc, #80]	@ (800473c <I2Cx_Init+0x68>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d103      	bne.n	80046f8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a13      	ldr	r2, [pc, #76]	@ (8004740 <I2Cx_Init+0x6c>)
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	e002      	b.n	80046fe <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a12      	ldr	r2, [pc, #72]	@ (8004744 <I2Cx_Init+0x70>)
 80046fc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a11      	ldr	r2, [pc, #68]	@ (8004748 <I2Cx_Init+0x74>)
 8004702:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff ff23 	bl	8004574 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f002 f850 	bl	80067d4 <HAL_I2C_Init>
  }
}
 8004734:	bf00      	nop
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20030fb4 	.word	0x20030fb4
 8004740:	40005c00 	.word	0x40005c00
 8004744:	40005400 	.word	0x40005400
 8004748:	40912732 	.word	0x40912732

0800474c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	@ 0x28
 8004750:	af04      	add	r7, sp, #16
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	4608      	mov	r0, r1
 8004756:	4611      	mov	r1, r2
 8004758:	461a      	mov	r2, r3
 800475a:	4603      	mov	r3, r0
 800475c:	72fb      	strb	r3, [r7, #11]
 800475e:	460b      	mov	r3, r1
 8004760:	813b      	strh	r3, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800476a:	7afb      	ldrb	r3, [r7, #11]
 800476c:	b299      	uxth	r1, r3
 800476e:	88f8      	ldrh	r0, [r7, #6]
 8004770:	893a      	ldrh	r2, [r7, #8]
 8004772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004776:	9302      	str	r3, [sp, #8]
 8004778:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800477a:	9301      	str	r3, [sp, #4]
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	4603      	mov	r3, r0
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f002 fa1a 	bl	8006bbc <HAL_I2C_Mem_Read>
 8004788:	4603      	mov	r3, r0
 800478a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d004      	beq.n	800479c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004792:	7afb      	ldrb	r3, [r7, #11]
 8004794:	4619      	mov	r1, r3
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f832 	bl	8004800 <I2Cx_Error>
  }
  return status;    
 800479c:	7dfb      	ldrb	r3, [r7, #23]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b08a      	sub	sp, #40	@ 0x28
 80047aa:	af04      	add	r7, sp, #16
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	4608      	mov	r0, r1
 80047b0:	4611      	mov	r1, r2
 80047b2:	461a      	mov	r2, r3
 80047b4:	4603      	mov	r3, r0
 80047b6:	72fb      	strb	r3, [r7, #11]
 80047b8:	460b      	mov	r3, r1
 80047ba:	813b      	strh	r3, [r7, #8]
 80047bc:	4613      	mov	r3, r2
 80047be:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80047c4:	7afb      	ldrb	r3, [r7, #11]
 80047c6:	b299      	uxth	r1, r3
 80047c8:	88f8      	ldrh	r0, [r7, #6]
 80047ca:	893a      	ldrh	r2, [r7, #8]
 80047cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047d0:	9302      	str	r3, [sp, #8]
 80047d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	4603      	mov	r3, r0
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f002 f8d9 	bl	8006994 <HAL_I2C_Mem_Write>
 80047e2:	4603      	mov	r3, r0
 80047e4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d004      	beq.n	80047f6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80047ec:	7afb      	ldrb	r3, [r7, #11]
 80047ee:	4619      	mov	r1, r3
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f805 	bl	8004800 <I2Cx_Error>
  }
  return status;
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f002 f87d 	bl	800690c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff ff5e 	bl	80046d4 <I2Cx_Init>
}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8004824:	4802      	ldr	r0, [pc, #8]	@ (8004830 <AUDIO_IO_Init+0x10>)
 8004826:	f7ff ff55 	bl	80046d4 <I2Cx_Init>
}
 800482a:	bf00      	nop
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20030fb4 	.word	0x20030fb4

08004834 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
}
 8004838:	bf00      	nop
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af02      	add	r7, sp, #8
 800484a:	4603      	mov	r3, r0
 800484c:	71fb      	strb	r3, [r7, #7]
 800484e:	460b      	mov	r3, r1
 8004850:	80bb      	strh	r3, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8004856:	887b      	ldrh	r3, [r7, #2]
 8004858:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800485a:	89fb      	ldrh	r3, [r7, #14]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	b29b      	uxth	r3, r3
 8004860:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8004862:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	b21a      	sxth	r2, r3
 800486a:	887b      	ldrh	r3, [r7, #2]
 800486c:	b21b      	sxth	r3, r3
 800486e:	4313      	orrs	r3, r2
 8004870:	b21b      	sxth	r3, r3
 8004872:	b29b      	uxth	r3, r3
 8004874:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8004876:	88ba      	ldrh	r2, [r7, #4]
 8004878:	79f9      	ldrb	r1, [r7, #7]
 800487a:	2302      	movs	r3, #2
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	1cbb      	adds	r3, r7, #2
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	2302      	movs	r3, #2
 8004884:	4803      	ldr	r0, [pc, #12]	@ (8004894 <AUDIO_IO_Write+0x50>)
 8004886:	f7ff ff8e 	bl	80047a6 <I2Cx_WriteMultiple>
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20030fb4 	.word	0x20030fb4

08004898 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	4603      	mov	r3, r0
 80048a0:	460a      	mov	r2, r1
 80048a2:	71fb      	strb	r3, [r7, #7]
 80048a4:	4613      	mov	r3, r2
 80048a6:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	81bb      	strh	r3, [r7, #12]
 80048ac:	2300      	movs	r3, #0
 80048ae:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80048b0:	88ba      	ldrh	r2, [r7, #4]
 80048b2:	79f9      	ldrb	r1, [r7, #7]
 80048b4:	2302      	movs	r3, #2
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	f107 030c 	add.w	r3, r7, #12
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	2302      	movs	r3, #2
 80048c0:	480a      	ldr	r0, [pc, #40]	@ (80048ec <AUDIO_IO_Read+0x54>)
 80048c2:	f7ff ff43 	bl	800474c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80048c6:	89bb      	ldrh	r3, [r7, #12]
 80048c8:	0a1b      	lsrs	r3, r3, #8
 80048ca:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80048cc:	89bb      	ldrh	r3, [r7, #12]
 80048ce:	b21b      	sxth	r3, r3
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	b21a      	sxth	r2, r3
 80048d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048d8:	4313      	orrs	r3, r2
 80048da:	b21b      	sxth	r3, r3
 80048dc:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80048de:	89fb      	ldrh	r3, [r7, #14]
 80048e0:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80048e2:	89bb      	ldrh	r3, [r7, #12]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20030fb4 	.word	0x20030fb4

080048f0 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fdb3 	bl	8005464 <HAL_Delay>
}
 80048fe:	bf00      	nop
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8004910:	480e      	ldr	r0, [pc, #56]	@ (800494c <HAL_SAI_ErrorCallback+0x44>)
 8004912:	f004 fb07 	bl	8008f24 <HAL_SAI_GetState>
 8004916:	4603      	mov	r3, r0
 8004918:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 800491a:	480d      	ldr	r0, [pc, #52]	@ (8004950 <HAL_SAI_ErrorCallback+0x48>)
 800491c:	f004 fb02 	bl	8008f24 <HAL_SAI_GetState>
 8004920:	4603      	mov	r3, r0
 8004922:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d002      	beq.n	8004930 <HAL_SAI_ErrorCallback+0x28>
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	2b12      	cmp	r3, #18
 800492e:	d101      	bne.n	8004934 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8004930:	f000 f810 	bl	8004954 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8004934:	7bbb      	ldrb	r3, [r7, #14]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d002      	beq.n	8004940 <HAL_SAI_ErrorCallback+0x38>
 800493a:	7bbb      	ldrb	r3, [r7, #14]
 800493c:	2b22      	cmp	r3, #34	@ 0x22
 800493e:	d101      	bne.n	8004944 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8004940:	f000 f9f6 	bl	8004d30 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	2003100c 	.word	0x2003100c
 8004950:	20031090 	.word	0x20031090

08004954 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
}
 8004958:	bf00      	nop
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
	...

08004964 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8004964:	b580      	push	{r7, lr}
 8004966:	b08c      	sub	sp, #48	@ 0x30
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800496e:	4b63      	ldr	r3, [pc, #396]	@ (8004afc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004972:	4a62      	ldr	r2, [pc, #392]	@ (8004afc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004974:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004978:	6453      	str	r3, [r2, #68]	@ 0x44
 800497a:	4b60      	ldr	r3, [pc, #384]	@ (8004afc <BSP_AUDIO_OUT_MspInit+0x198>)
 800497c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8004986:	4b5d      	ldr	r3, [pc, #372]	@ (8004afc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498a:	4a5c      	ldr	r2, [pc, #368]	@ (8004afc <BSP_AUDIO_OUT_MspInit+0x198>)
 800498c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004990:	6313      	str	r3, [r2, #48]	@ 0x30
 8004992:	4b5a      	ldr	r3, [pc, #360]	@ (8004afc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 800499e:	4b57      	ldr	r3, [pc, #348]	@ (8004afc <BSP_AUDIO_OUT_MspInit+0x198>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a2:	4a56      	ldr	r2, [pc, #344]	@ (8004afc <BSP_AUDIO_OUT_MspInit+0x198>)
 80049a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80049aa:	4b54      	ldr	r3, [pc, #336]	@ (8004afc <BSP_AUDIO_OUT_MspInit+0x198>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 80049b6:	4b51      	ldr	r3, [pc, #324]	@ (8004afc <BSP_AUDIO_OUT_MspInit+0x198>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ba:	4a50      	ldr	r2, [pc, #320]	@ (8004afc <BSP_AUDIO_OUT_MspInit+0x198>)
 80049bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80049c2:	4b4e      	ldr	r3, [pc, #312]	@ (8004afc <BSP_AUDIO_OUT_MspInit+0x198>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 80049ce:	2380      	movs	r3, #128	@ 0x80
 80049d0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80049d2:	2302      	movs	r3, #2
 80049d4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80049da:	2303      	movs	r3, #3
 80049dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80049de:	230a      	movs	r3, #10
 80049e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80049e2:	f107 031c 	add.w	r3, r7, #28
 80049e6:	4619      	mov	r1, r3
 80049e8:	4845      	ldr	r0, [pc, #276]	@ (8004b00 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80049ea:	f001 fbd7 	bl	800619c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80049ee:	2320      	movs	r3, #32
 80049f0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80049f2:	2302      	movs	r3, #2
 80049f4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80049fa:	2303      	movs	r3, #3
 80049fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80049fe:	230a      	movs	r3, #10
 8004a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8004a02:	f107 031c 	add.w	r3, r7, #28
 8004a06:	4619      	mov	r1, r3
 8004a08:	483d      	ldr	r0, [pc, #244]	@ (8004b00 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004a0a:	f001 fbc7 	bl	800619c <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8004a0e:	2340      	movs	r3, #64	@ 0x40
 8004a10:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004a12:	2302      	movs	r3, #2
 8004a14:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004a1e:	230a      	movs	r3, #10
 8004a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8004a22:	f107 031c 	add.w	r3, r7, #28
 8004a26:	4619      	mov	r1, r3
 8004a28:	4835      	ldr	r0, [pc, #212]	@ (8004b00 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004a2a:	f001 fbb7 	bl	800619c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8004a2e:	2310      	movs	r3, #16
 8004a30:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004a32:	2302      	movs	r3, #2
 8004a34:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004a3e:	230a      	movs	r3, #10
 8004a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8004a42:	f107 031c 	add.w	r3, r7, #28
 8004a46:	4619      	mov	r1, r3
 8004a48:	482d      	ldr	r0, [pc, #180]	@ (8004b00 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004a4a:	f001 fba7 	bl	800619c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8004a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8004afc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a52:	4a2a      	ldr	r2, [pc, #168]	@ (8004afc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004a54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a5a:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a62:	60bb      	str	r3, [r7, #8]
 8004a64:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a26      	ldr	r2, [pc, #152]	@ (8004b04 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d138      	bne.n	8004ae2 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8004a70:	4b25      	ldr	r3, [pc, #148]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004a72:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8004a76:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004a78:	4b23      	ldr	r3, [pc, #140]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004a7a:	2240      	movs	r2, #64	@ 0x40
 8004a7c:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004a7e:	4b22      	ldr	r3, [pc, #136]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004a84:	4b20      	ldr	r3, [pc, #128]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004a86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a8a:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8004a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004a8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a92:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8004a94:	4b1c      	ldr	r3, [pc, #112]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004a96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a9a:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8004a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004a9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004aa2:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004aa4:	4b18      	ldr	r3, [pc, #96]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004aa6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004aaa:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8004aac:	4b16      	ldr	r3, [pc, #88]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004aae:	2204      	movs	r2, #4
 8004ab0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004ab2:	4b15      	ldr	r3, [pc, #84]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004ab8:	4b13      	ldr	r3, [pc, #76]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004abe:	4b12      	ldr	r3, [pc, #72]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8004ac4:	4b10      	ldr	r3, [pc, #64]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004ac6:	4a11      	ldr	r2, [pc, #68]	@ (8004b0c <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8004ac8:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a0e      	ldr	r2, [pc, #56]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004ace:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8004ad6:	480c      	ldr	r0, [pc, #48]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004ad8:	f000 ff9a 	bl	8005a10 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8004adc:	480a      	ldr	r0, [pc, #40]	@ (8004b08 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004ade:	f000 fee9 	bl	80058b4 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	210e      	movs	r1, #14
 8004ae6:	203c      	movs	r0, #60	@ 0x3c
 8004ae8:	f000 fdbb 	bl	8005662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8004aec:	203c      	movs	r0, #60	@ 0x3c
 8004aee:	f000 fdd4 	bl	800569a <HAL_NVIC_EnableIRQ>
}
 8004af2:	bf00      	nop
 8004af4:	3730      	adds	r7, #48	@ 0x30
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40022000 	.word	0x40022000
 8004b04:	40015c04 	.word	0x40015c04
 8004b08:	20031114 	.word	0x20031114
 8004b0c:	40026470 	.word	0x40026470

08004b10 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b0a6      	sub	sp, #152	@ 0x98
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004b1c:	f107 0314 	add.w	r3, r7, #20
 8004b20:	4618      	mov	r0, r3
 8004b22:	f003 fcff 	bl	8008524 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d009      	beq.n	8004b44 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f245 6222 	movw	r2, #22050	@ 0x5622
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d112      	bne.n	8004b6a <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004b44:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b48:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004b4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004b4e:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8004b50:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8004b54:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8004b56:	2302      	movs	r3, #2
 8004b58:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8004b5a:	2313      	movs	r3, #19
 8004b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004b5e:	f107 0314 	add.w	r3, r7, #20
 8004b62:	4618      	mov	r0, r3
 8004b64:	f003 f8ee 	bl	8007d44 <HAL_RCCEx_PeriphCLKConfig>
 8004b68:	e012      	b.n	8004b90 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004b6a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b6e:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004b70:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004b74:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8004b76:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8004b7a:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8004b7c:	2307      	movs	r3, #7
 8004b7e:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8004b80:	2301      	movs	r3, #1
 8004b82:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004b84:	f107 0314 	add.w	r3, r7, #20
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f003 f8db 	bl	8007d44 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8004b8e:	bf00      	nop
 8004b90:	bf00      	nop
 8004b92:	3798      	adds	r7, #152	@ 0x98
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); // MICROPHONE_1 for mono, 2 for stereo
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	68f9      	ldr	r1, [r7, #12]
 8004baa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004bae:	f000 f805 	bl	8004bbc <BSP_AUDIO_IN_InitEx>
 8004bb2:	4603      	mov	r3, r0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8004bbc:	b590      	push	{r4, r7, lr}
 8004bbe:	b089      	sub	sp, #36	@ 0x24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	4603      	mov	r3, r0
 8004bca:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8004bd4:	89fb      	ldrh	r3, [r7, #14]
 8004bd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bda:	d006      	beq.n	8004bea <BSP_AUDIO_IN_InitEx+0x2e>
 8004bdc:	89fb      	ldrh	r3, [r7, #14]
 8004bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004be2:	d002      	beq.n	8004bea <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e046      	b.n	8004c78 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8004bea:	f000 fa11 	bl	8005010 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8004bee:	2200      	movs	r2, #0
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	4824      	ldr	r0, [pc, #144]	@ (8004c84 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004bf4:	f7ff ff8c 	bl	8004b10 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004bf8:	4b22      	ldr	r3, [pc, #136]	@ (8004c84 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004bfa:	4a23      	ldr	r2, [pc, #140]	@ (8004c88 <BSP_AUDIO_IN_InitEx+0xcc>)
 8004bfc:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8004bfe:	4821      	ldr	r0, [pc, #132]	@ (8004c84 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004c00:	f004 f990 	bl	8008f24 <HAL_SAI_GetState>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d107      	bne.n	8004c1a <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	481d      	ldr	r0, [pc, #116]	@ (8004c84 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004c0e:	f7ff fea9 	bl	8004964 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8004c12:	2100      	movs	r1, #0
 8004c14:	481b      	ldr	r0, [pc, #108]	@ (8004c84 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004c16:	f000 f893 	bl	8004d40 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8004c1a:	89fb      	ldrh	r3, [r7, #14]
 8004c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c20:	d102      	bne.n	8004c28 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8004c22:	230a      	movs	r3, #10
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	e001      	b.n	8004c2c <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8004c28:	2305      	movs	r3, #5
 8004c2a:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	69b9      	ldr	r1, [r7, #24]
 8004c30:	2001      	movs	r0, #1
 8004c32:	f000 f937 	bl	8004ea4 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8004c36:	4b15      	ldr	r3, [pc, #84]	@ (8004c8c <BSP_AUDIO_IN_InitEx+0xd0>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2034      	movs	r0, #52	@ 0x34
 8004c3c:	4798      	blx	r3
 8004c3e:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f648 1294 	movw	r2, #35220	@ 0x8994
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d109      	bne.n	8004c5e <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8004c4a:	4b10      	ldr	r3, [pc, #64]	@ (8004c8c <BSP_AUDIO_IN_InitEx+0xd0>)
 8004c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4e:	2034      	movs	r0, #52	@ 0x34
 8004c50:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8004c52:	4b0f      	ldr	r3, [pc, #60]	@ (8004c90 <BSP_AUDIO_IN_InitEx+0xd4>)
 8004c54:	4a0d      	ldr	r2, [pc, #52]	@ (8004c8c <BSP_AUDIO_IN_InitEx+0xd0>)
 8004c56:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	77fb      	strb	r3, [r7, #31]
 8004c5c:	e001      	b.n	8004c62 <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8004c62:	7ffb      	ldrb	r3, [r7, #31]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d107      	bne.n	8004c78 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8004c68:	4b09      	ldr	r3, [pc, #36]	@ (8004c90 <BSP_AUDIO_IN_InitEx+0xd4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681c      	ldr	r4, [r3, #0]
 8004c6e:	89f9      	ldrh	r1, [r7, #14]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2264      	movs	r2, #100	@ 0x64
 8004c74:	2034      	movs	r0, #52	@ 0x34
 8004c76:	47a0      	blx	r4
    }
  }
  return ret;
 8004c78:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3724      	adds	r7, #36	@ 0x24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd90      	pop	{r4, r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20031090 	.word	0x20031090
 8004c88:	40015c24 	.word	0x40015c24
 8004c8c:	2000001c 	.word	0x2000001c
 8004c90:	20031008 	.word	0x20031008

08004c94 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4805      	ldr	r0, [pc, #20]	@ (8004cc0 <BSP_AUDIO_IN_Record+0x2c>)
 8004cac:	f004 f8ac 	bl	8008e08 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	b2db      	uxtb	r3, r3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20031090 	.word	0x20031090

08004cc4 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8004ccc:	480c      	ldr	r0, [pc, #48]	@ (8004d00 <BSP_AUDIO_IN_Stop+0x3c>)
 8004cce:	f004 f828 	bl	8008d22 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8004cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8004d04 <BSP_AUDIO_IN_Stop+0x40>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	2034      	movs	r0, #52	@ 0x34
 8004cdc:	4798      	blx	r3
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e006      	b.n	8004cf6 <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d102      	bne.n	8004cf4 <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 8004cee:	2001      	movs	r0, #1
 8004cf0:	f000 fbb8 	bl	8005464 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8004cf4:	2300      	movs	r3, #0
  }
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20031090 	.word	0x20031090
 8004d04:	20031008 	.word	0x20031008

08004d08 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8004d10:	f007 f844 	bl	800bd9c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004d14:	bf00      	nop
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8004d24:	f007 f882 	bl	800be2c <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8004d28:	bf00      	nop
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
	...

08004d40 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08c      	sub	sp, #48	@ 0x30
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8004d4a:	4b50      	ldr	r3, [pc, #320]	@ (8004e8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4e:	4a4f      	ldr	r2, [pc, #316]	@ (8004e8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004d50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d56:	4b4d      	ldr	r3, [pc, #308]	@ (8004e8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d5e:	61bb      	str	r3, [r7, #24]
 8004d60:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8004d62:	4b4a      	ldr	r3, [pc, #296]	@ (8004e8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d66:	4a49      	ldr	r2, [pc, #292]	@ (8004e8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004d68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d6e:	4b47      	ldr	r3, [pc, #284]	@ (8004e8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8004d7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d7e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004d80:	2302      	movs	r3, #2
 8004d82:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004d84:	2300      	movs	r3, #0
 8004d86:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8004d8c:	230a      	movs	r3, #10
 8004d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8004d90:	f107 031c 	add.w	r3, r7, #28
 8004d94:	4619      	mov	r1, r3
 8004d96:	483e      	ldr	r0, [pc, #248]	@ (8004e90 <BSP_AUDIO_IN_MspInit+0x150>)
 8004d98:	f001 fa00 	bl	800619c <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8004d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da0:	4a3a      	ldr	r2, [pc, #232]	@ (8004e8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da6:	6313      	str	r3, [r2, #48]	@ 0x30
 8004da8:	4b38      	ldr	r3, [pc, #224]	@ (8004e8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8004db4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004db8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8004dc6:	f107 031c 	add.w	r3, r7, #28
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4831      	ldr	r0, [pc, #196]	@ (8004e94 <BSP_AUDIO_IN_MspInit+0x154>)
 8004dce:	f001 f9e5 	bl	800619c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8004dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8004e8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd6:	4a2d      	ldr	r2, [pc, #180]	@ (8004e8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004dd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dde:	4b2b      	ldr	r3, [pc, #172]	@ (8004e8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a2a      	ldr	r2, [pc, #168]	@ (8004e98 <BSP_AUDIO_IN_MspInit+0x158>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d137      	bne.n	8004e64 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004df4:	4b29      	ldr	r3, [pc, #164]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004dfa:	4b28      	ldr	r3, [pc, #160]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004e00:	4b26      	ldr	r3, [pc, #152]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8004e06:	4b25      	ldr	r3, [pc, #148]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004e08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e0c:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8004e0e:	4b23      	ldr	r3, [pc, #140]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004e10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e14:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8004e16:	4b21      	ldr	r3, [pc, #132]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004e18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004e1c:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8004e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004e20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e24:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004e26:	4b1d      	ldr	r3, [pc, #116]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004e28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004e2c:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004e34:	4b19      	ldr	r3, [pc, #100]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004e36:	2203      	movs	r2, #3
 8004e38:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004e3a:	4b18      	ldr	r3, [pc, #96]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8004e40:	4b16      	ldr	r3, [pc, #88]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8004e46:	4b15      	ldr	r3, [pc, #84]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004e48:	4a15      	ldr	r2, [pc, #84]	@ (8004ea0 <BSP_AUDIO_IN_MspInit+0x160>)
 8004e4a:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a13      	ldr	r2, [pc, #76]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004e50:	671a      	str	r2, [r3, #112]	@ 0x70
 8004e52:	4a12      	ldr	r2, [pc, #72]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8004e58:	4810      	ldr	r0, [pc, #64]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004e5a:	f000 fdd9 	bl	8005a10 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8004e5e:	480f      	ldr	r0, [pc, #60]	@ (8004e9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004e60:	f000 fd28 	bl	80058b4 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004e64:	2200      	movs	r2, #0
 8004e66:	210f      	movs	r1, #15
 8004e68:	2046      	movs	r0, #70	@ 0x46
 8004e6a:	f000 fbfa 	bl	8005662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8004e6e:	2046      	movs	r0, #70	@ 0x46
 8004e70:	f000 fc13 	bl	800569a <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004e74:	2200      	movs	r2, #0
 8004e76:	210f      	movs	r1, #15
 8004e78:	2028      	movs	r0, #40	@ 0x28
 8004e7a:	f000 fbf2 	bl	8005662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8004e7e:	2028      	movs	r0, #40	@ 0x28
 8004e80:	f000 fc0b 	bl	800569a <HAL_NVIC_EnableIRQ>
}
 8004e84:	bf00      	nop
 8004e86:	3730      	adds	r7, #48	@ 0x30
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	40021800 	.word	0x40021800
 8004e94:	40021c00 	.word	0x40021c00
 8004e98:	40015c24 	.word	0x40015c24
 8004e9c:	20031174 	.word	0x20031174
 8004ea0:	400264b8 	.word	0x400264b8

08004ea4 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004eb0:	4b53      	ldr	r3, [pc, #332]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004eb2:	4a54      	ldr	r2, [pc, #336]	@ (8005004 <SAIx_In_Init+0x160>)
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8004eb6:	4b52      	ldr	r3, [pc, #328]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	4b50      	ldr	r3, [pc, #320]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004ec4:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8004ec6:	4a4e      	ldr	r2, [pc, #312]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8004ecc:	4a4c      	ldr	r2, [pc, #304]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004ed2:	4b4b      	ldr	r3, [pc, #300]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004ed8:	4b49      	ldr	r3, [pc, #292]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8004ede:	4b48      	ldr	r3, [pc, #288]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004ee0:	2280      	movs	r2, #128	@ 0x80
 8004ee2:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004ee4:	4b46      	ldr	r3, [pc, #280]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004eea:	4b45      	ldr	r3, [pc, #276]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8004ef0:	4b43      	ldr	r3, [pc, #268]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8004ef6:	4b42      	ldr	r3, [pc, #264]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004ef8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004efc:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004efe:	4b40      	ldr	r3, [pc, #256]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8004f04:	4b3e      	ldr	r3, [pc, #248]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004f06:	2240      	movs	r2, #64	@ 0x40
 8004f08:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8004f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004f10:	4b3b      	ldr	r3, [pc, #236]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004f12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004f16:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004f18:	4b39      	ldr	r3, [pc, #228]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004f1e:	4b38      	ldr	r3, [pc, #224]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004f20:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004f24:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8004f26:	4b36      	ldr	r3, [pc, #216]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004f2c:	4b34      	ldr	r3, [pc, #208]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8004f32:	4b33      	ldr	r3, [pc, #204]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004f34:	2204      	movs	r2, #4
 8004f36:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8004f38:	4a31      	ldr	r2, [pc, #196]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8004f3e:	4830      	ldr	r0, [pc, #192]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004f40:	f003 fd3c 	bl	80089bc <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004f44:	4b30      	ldr	r3, [pc, #192]	@ (8005008 <SAIx_In_Init+0x164>)
 8004f46:	4a31      	ldr	r2, [pc, #196]	@ (800500c <SAIx_In_Init+0x168>)
 8004f48:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005008 <SAIx_In_Init+0x164>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4b2d      	ldr	r3, [pc, #180]	@ (8005008 <SAIx_In_Init+0x164>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004f58:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8004f5a:	4a2b      	ldr	r2, [pc, #172]	@ (8005008 <SAIx_In_Init+0x164>)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8004f60:	4b29      	ldr	r3, [pc, #164]	@ (8005008 <SAIx_In_Init+0x164>)
 8004f62:	2203      	movs	r2, #3
 8004f64:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004f66:	4b28      	ldr	r3, [pc, #160]	@ (8005008 <SAIx_In_Init+0x164>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004f6c:	4b26      	ldr	r3, [pc, #152]	@ (8005008 <SAIx_In_Init+0x164>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8004f72:	4b25      	ldr	r3, [pc, #148]	@ (8005008 <SAIx_In_Init+0x164>)
 8004f74:	2280      	movs	r2, #128	@ 0x80
 8004f76:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004f78:	4b23      	ldr	r3, [pc, #140]	@ (8005008 <SAIx_In_Init+0x164>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004f7e:	4b22      	ldr	r3, [pc, #136]	@ (8005008 <SAIx_In_Init+0x164>)
 8004f80:	2201      	movs	r2, #1
 8004f82:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8004f84:	4b20      	ldr	r3, [pc, #128]	@ (8005008 <SAIx_In_Init+0x164>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8004f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8005008 <SAIx_In_Init+0x164>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004f90:	4b1d      	ldr	r3, [pc, #116]	@ (8005008 <SAIx_In_Init+0x164>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8004f96:	4b1c      	ldr	r3, [pc, #112]	@ (8005008 <SAIx_In_Init+0x164>)
 8004f98:	2240      	movs	r2, #64	@ 0x40
 8004f9a:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8004f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005008 <SAIx_In_Init+0x164>)
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004fa2:	4b19      	ldr	r3, [pc, #100]	@ (8005008 <SAIx_In_Init+0x164>)
 8004fa4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004fa8:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004faa:	4b17      	ldr	r3, [pc, #92]	@ (8005008 <SAIx_In_Init+0x164>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004fb0:	4b15      	ldr	r3, [pc, #84]	@ (8005008 <SAIx_In_Init+0x164>)
 8004fb2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004fb6:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8004fb8:	4b13      	ldr	r3, [pc, #76]	@ (8005008 <SAIx_In_Init+0x164>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004fbe:	4b12      	ldr	r3, [pc, #72]	@ (8005008 <SAIx_In_Init+0x164>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8004fc4:	4b10      	ldr	r3, [pc, #64]	@ (8005008 <SAIx_In_Init+0x164>)
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8004fca:	4a0f      	ldr	r2, [pc, #60]	@ (8005008 <SAIx_In_Init+0x164>)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8004fd0:	480d      	ldr	r0, [pc, #52]	@ (8005008 <SAIx_In_Init+0x164>)
 8004fd2:	f003 fcf3 	bl	80089bc <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8004fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	4b08      	ldr	r3, [pc, #32]	@ (8005000 <SAIx_In_Init+0x15c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004fe4:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8004fe6:	4b08      	ldr	r3, [pc, #32]	@ (8005008 <SAIx_In_Init+0x164>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	4b06      	ldr	r3, [pc, #24]	@ (8005008 <SAIx_In_Init+0x164>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004ff4:	601a      	str	r2, [r3, #0]
}
 8004ff6:	bf00      	nop
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	2003100c 	.word	0x2003100c
 8005004:	40015c04 	.word	0x40015c04
 8005008:	20031090 	.word	0x20031090
 800500c:	40015c24 	.word	0x40015c24

08005010 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005014:	4b07      	ldr	r3, [pc, #28]	@ (8005034 <SAIx_In_DeInit+0x24>)
 8005016:	4a08      	ldr	r2, [pc, #32]	@ (8005038 <SAIx_In_DeInit+0x28>)
 8005018:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800501a:	4b06      	ldr	r3, [pc, #24]	@ (8005034 <SAIx_In_DeInit+0x24>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4b04      	ldr	r3, [pc, #16]	@ (8005034 <SAIx_In_DeInit+0x24>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005028:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 800502a:	4802      	ldr	r0, [pc, #8]	@ (8005034 <SAIx_In_DeInit+0x24>)
 800502c:	f003 fe44 	bl	8008cb8 <HAL_SAI_DeInit>
}
 8005030:	bf00      	nop
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20031090 	.word	0x20031090
 8005038:	40015c24 	.word	0x40015c24

0800503c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005040:	4b29      	ldr	r3, [pc, #164]	@ (80050e8 <BSP_SDRAM_Init+0xac>)
 8005042:	4a2a      	ldr	r2, [pc, #168]	@ (80050ec <BSP_SDRAM_Init+0xb0>)
 8005044:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8005046:	4b2a      	ldr	r3, [pc, #168]	@ (80050f0 <BSP_SDRAM_Init+0xb4>)
 8005048:	2202      	movs	r2, #2
 800504a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800504c:	4b28      	ldr	r3, [pc, #160]	@ (80050f0 <BSP_SDRAM_Init+0xb4>)
 800504e:	2207      	movs	r2, #7
 8005050:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8005052:	4b27      	ldr	r3, [pc, #156]	@ (80050f0 <BSP_SDRAM_Init+0xb4>)
 8005054:	2204      	movs	r2, #4
 8005056:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8005058:	4b25      	ldr	r3, [pc, #148]	@ (80050f0 <BSP_SDRAM_Init+0xb4>)
 800505a:	2207      	movs	r2, #7
 800505c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800505e:	4b24      	ldr	r3, [pc, #144]	@ (80050f0 <BSP_SDRAM_Init+0xb4>)
 8005060:	2202      	movs	r2, #2
 8005062:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8005064:	4b22      	ldr	r3, [pc, #136]	@ (80050f0 <BSP_SDRAM_Init+0xb4>)
 8005066:	2202      	movs	r2, #2
 8005068:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800506a:	4b21      	ldr	r3, [pc, #132]	@ (80050f0 <BSP_SDRAM_Init+0xb4>)
 800506c:	2202      	movs	r2, #2
 800506e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8005070:	4b1d      	ldr	r3, [pc, #116]	@ (80050e8 <BSP_SDRAM_Init+0xac>)
 8005072:	2200      	movs	r2, #0
 8005074:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005076:	4b1c      	ldr	r3, [pc, #112]	@ (80050e8 <BSP_SDRAM_Init+0xac>)
 8005078:	2200      	movs	r2, #0
 800507a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800507c:	4b1a      	ldr	r3, [pc, #104]	@ (80050e8 <BSP_SDRAM_Init+0xac>)
 800507e:	2204      	movs	r2, #4
 8005080:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8005082:	4b19      	ldr	r3, [pc, #100]	@ (80050e8 <BSP_SDRAM_Init+0xac>)
 8005084:	2210      	movs	r2, #16
 8005086:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005088:	4b17      	ldr	r3, [pc, #92]	@ (80050e8 <BSP_SDRAM_Init+0xac>)
 800508a:	2240      	movs	r2, #64	@ 0x40
 800508c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800508e:	4b16      	ldr	r3, [pc, #88]	@ (80050e8 <BSP_SDRAM_Init+0xac>)
 8005090:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005094:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005096:	4b14      	ldr	r3, [pc, #80]	@ (80050e8 <BSP_SDRAM_Init+0xac>)
 8005098:	2200      	movs	r2, #0
 800509a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800509c:	4b12      	ldr	r3, [pc, #72]	@ (80050e8 <BSP_SDRAM_Init+0xac>)
 800509e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050a2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80050a4:	4b10      	ldr	r3, [pc, #64]	@ (80050e8 <BSP_SDRAM_Init+0xac>)
 80050a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80050aa:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80050ac:	4b0e      	ldr	r3, [pc, #56]	@ (80050e8 <BSP_SDRAM_Init+0xac>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80050b2:	2100      	movs	r1, #0
 80050b4:	480c      	ldr	r0, [pc, #48]	@ (80050e8 <BSP_SDRAM_Init+0xac>)
 80050b6:	f000 f87f 	bl	80051b8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80050ba:	490d      	ldr	r1, [pc, #52]	@ (80050f0 <BSP_SDRAM_Init+0xb4>)
 80050bc:	480a      	ldr	r0, [pc, #40]	@ (80050e8 <BSP_SDRAM_Init+0xac>)
 80050be:	f005 f947 	bl	800a350 <HAL_SDRAM_Init>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80050c8:	4b0a      	ldr	r3, [pc, #40]	@ (80050f4 <BSP_SDRAM_Init+0xb8>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	e002      	b.n	80050d6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80050d0:	4b08      	ldr	r3, [pc, #32]	@ (80050f4 <BSP_SDRAM_Init+0xb8>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80050d6:	f240 6003 	movw	r0, #1539	@ 0x603
 80050da:	f000 f80d 	bl	80050f8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80050de:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <BSP_SDRAM_Init+0xb8>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	200311d4 	.word	0x200311d4
 80050ec:	a0000140 	.word	0xa0000140
 80050f0:	20031208 	.word	0x20031208
 80050f4:	2000004d 	.word	0x2000004d

080050f8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005104:	4b2a      	ldr	r3, [pc, #168]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005106:	2201      	movs	r2, #1
 8005108:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800510a:	4b29      	ldr	r3, [pc, #164]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800510c:	2210      	movs	r2, #16
 800510e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005110:	4b27      	ldr	r3, [pc, #156]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005112:	2201      	movs	r2, #1
 8005114:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005116:	4b26      	ldr	r3, [pc, #152]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005118:	2200      	movs	r2, #0
 800511a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800511c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005120:	4923      	ldr	r1, [pc, #140]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005122:	4824      	ldr	r0, [pc, #144]	@ (80051b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005124:	f005 f948 	bl	800a3b8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005128:	2001      	movs	r0, #1
 800512a:	f000 f99b 	bl	8005464 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800512e:	4b20      	ldr	r3, [pc, #128]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005130:	2202      	movs	r2, #2
 8005132:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005134:	4b1e      	ldr	r3, [pc, #120]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005136:	2210      	movs	r2, #16
 8005138:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800513a:	4b1d      	ldr	r3, [pc, #116]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800513c:	2201      	movs	r2, #1
 800513e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005140:	4b1b      	ldr	r3, [pc, #108]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005142:	2200      	movs	r2, #0
 8005144:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8005146:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800514a:	4919      	ldr	r1, [pc, #100]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800514c:	4819      	ldr	r0, [pc, #100]	@ (80051b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800514e:	f005 f933 	bl	800a3b8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005152:	4b17      	ldr	r3, [pc, #92]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005154:	2203      	movs	r2, #3
 8005156:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005158:	4b15      	ldr	r3, [pc, #84]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800515a:	2210      	movs	r2, #16
 800515c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800515e:	4b14      	ldr	r3, [pc, #80]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005160:	2208      	movs	r2, #8
 8005162:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005164:	4b12      	ldr	r3, [pc, #72]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005166:	2200      	movs	r2, #0
 8005168:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800516a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800516e:	4910      	ldr	r1, [pc, #64]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005170:	4810      	ldr	r0, [pc, #64]	@ (80051b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005172:	f005 f921 	bl	800a3b8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005176:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800517a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800517c:	4b0c      	ldr	r3, [pc, #48]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800517e:	2204      	movs	r2, #4
 8005180:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005182:	4b0b      	ldr	r3, [pc, #44]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005184:	2210      	movs	r2, #16
 8005186:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005188:	4b09      	ldr	r3, [pc, #36]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800518a:	2201      	movs	r2, #1
 800518c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a07      	ldr	r2, [pc, #28]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005192:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005194:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005198:	4905      	ldr	r1, [pc, #20]	@ (80051b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800519a:	4806      	ldr	r0, [pc, #24]	@ (80051b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800519c:	f005 f90c 	bl	800a3b8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	4804      	ldr	r0, [pc, #16]	@ (80051b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80051a4:	f005 f93d 	bl	800a422 <HAL_SDRAM_ProgramRefreshRate>
}
 80051a8:	bf00      	nop
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20031224 	.word	0x20031224
 80051b4:	200311d4 	.word	0x200311d4

080051b8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b090      	sub	sp, #64	@ 0x40
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80051c2:	4b70      	ldr	r3, [pc, #448]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 80051c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c6:	4a6f      	ldr	r2, [pc, #444]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	6393      	str	r3, [r2, #56]	@ 0x38
 80051ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 80051d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80051da:	4b6a      	ldr	r3, [pc, #424]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 80051dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051de:	4a69      	ldr	r2, [pc, #420]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 80051e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80051e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80051e6:	4b67      	ldr	r3, [pc, #412]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80051f2:	4b64      	ldr	r3, [pc, #400]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 80051f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f6:	4a63      	ldr	r2, [pc, #396]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 80051f8:	f043 0304 	orr.w	r3, r3, #4
 80051fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80051fe:	4b61      	ldr	r3, [pc, #388]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	623b      	str	r3, [r7, #32]
 8005208:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800520a:	4b5e      	ldr	r3, [pc, #376]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520e:	4a5d      	ldr	r2, [pc, #372]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 8005210:	f043 0308 	orr.w	r3, r3, #8
 8005214:	6313      	str	r3, [r2, #48]	@ 0x30
 8005216:	4b5b      	ldr	r3, [pc, #364]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	61fb      	str	r3, [r7, #28]
 8005220:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005222:	4b58      	ldr	r3, [pc, #352]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	4a57      	ldr	r2, [pc, #348]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 8005228:	f043 0310 	orr.w	r3, r3, #16
 800522c:	6313      	str	r3, [r2, #48]	@ 0x30
 800522e:	4b55      	ldr	r3, [pc, #340]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 8005230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005232:	f003 0310 	and.w	r3, r3, #16
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800523a:	4b52      	ldr	r3, [pc, #328]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 800523c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523e:	4a51      	ldr	r2, [pc, #324]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 8005240:	f043 0320 	orr.w	r3, r3, #32
 8005244:	6313      	str	r3, [r2, #48]	@ 0x30
 8005246:	4b4f      	ldr	r3, [pc, #316]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 8005248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005252:	4b4c      	ldr	r3, [pc, #304]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 8005254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005256:	4a4b      	ldr	r2, [pc, #300]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 8005258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800525c:	6313      	str	r3, [r2, #48]	@ 0x30
 800525e:	4b49      	ldr	r3, [pc, #292]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800526a:	4b46      	ldr	r3, [pc, #280]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 800526c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526e:	4a45      	ldr	r2, [pc, #276]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 8005270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005274:	6313      	str	r3, [r2, #48]	@ 0x30
 8005276:	4b43      	ldr	r3, [pc, #268]	@ (8005384 <BSP_SDRAM_MspInit+0x1cc>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005282:	2302      	movs	r3, #2
 8005284:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005286:	2301      	movs	r3, #1
 8005288:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800528a:	2302      	movs	r3, #2
 800528c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800528e:	230c      	movs	r3, #12
 8005290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8005292:	2308      	movs	r3, #8
 8005294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8005296:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800529a:	4619      	mov	r1, r3
 800529c:	483a      	ldr	r0, [pc, #232]	@ (8005388 <BSP_SDRAM_MspInit+0x1d0>)
 800529e:	f000 ff7d 	bl	800619c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80052a2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80052a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80052a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80052ac:	4619      	mov	r1, r3
 80052ae:	4837      	ldr	r0, [pc, #220]	@ (800538c <BSP_SDRAM_MspInit+0x1d4>)
 80052b0:	f000 ff74 	bl	800619c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80052b4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80052b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80052ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80052be:	4619      	mov	r1, r3
 80052c0:	4833      	ldr	r0, [pc, #204]	@ (8005390 <BSP_SDRAM_MspInit+0x1d8>)
 80052c2:	f000 ff6b 	bl	800619c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80052c6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80052ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80052cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80052d0:	4619      	mov	r1, r3
 80052d2:	4830      	ldr	r0, [pc, #192]	@ (8005394 <BSP_SDRAM_MspInit+0x1dc>)
 80052d4:	f000 ff62 	bl	800619c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80052d8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80052dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80052de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80052e2:	4619      	mov	r1, r3
 80052e4:	482c      	ldr	r0, [pc, #176]	@ (8005398 <BSP_SDRAM_MspInit+0x1e0>)
 80052e6:	f000 ff59 	bl	800619c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80052ea:	2328      	movs	r3, #40	@ 0x28
 80052ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80052ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80052f2:	4619      	mov	r1, r3
 80052f4:	4829      	ldr	r0, [pc, #164]	@ (800539c <BSP_SDRAM_MspInit+0x1e4>)
 80052f6:	f000 ff51 	bl	800619c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80052fa:	4b29      	ldr	r3, [pc, #164]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005300:	4b27      	ldr	r3, [pc, #156]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 8005302:	2280      	movs	r2, #128	@ 0x80
 8005304:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005306:	4b26      	ldr	r3, [pc, #152]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 8005308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800530c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800530e:	4b24      	ldr	r3, [pc, #144]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 8005310:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005314:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005316:	4b22      	ldr	r3, [pc, #136]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 8005318:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800531c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800531e:	4b20      	ldr	r3, [pc, #128]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 8005320:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005324:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8005326:	4b1e      	ldr	r3, [pc, #120]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 8005328:	2200      	movs	r2, #0
 800532a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800532c:	4b1c      	ldr	r3, [pc, #112]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 800532e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005332:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005334:	4b1a      	ldr	r3, [pc, #104]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 8005336:	2200      	movs	r2, #0
 8005338:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800533a:	4b19      	ldr	r3, [pc, #100]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 800533c:	2203      	movs	r2, #3
 800533e:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005340:	4b17      	ldr	r3, [pc, #92]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 8005342:	2200      	movs	r2, #0
 8005344:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005346:	4b16      	ldr	r3, [pc, #88]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 8005348:	2200      	movs	r2, #0
 800534a:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800534c:	4b14      	ldr	r3, [pc, #80]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 800534e:	4a15      	ldr	r2, [pc, #84]	@ (80053a4 <BSP_SDRAM_MspInit+0x1ec>)
 8005350:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a12      	ldr	r2, [pc, #72]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 8005356:	631a      	str	r2, [r3, #48]	@ 0x30
 8005358:	4a11      	ldr	r2, [pc, #68]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800535e:	4810      	ldr	r0, [pc, #64]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 8005360:	f000 fb56 	bl	8005a10 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8005364:	480e      	ldr	r0, [pc, #56]	@ (80053a0 <BSP_SDRAM_MspInit+0x1e8>)
 8005366:	f000 faa5 	bl	80058b4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800536a:	2200      	movs	r2, #0
 800536c:	210f      	movs	r1, #15
 800536e:	2038      	movs	r0, #56	@ 0x38
 8005370:	f000 f977 	bl	8005662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005374:	2038      	movs	r0, #56	@ 0x38
 8005376:	f000 f990 	bl	800569a <HAL_NVIC_EnableIRQ>
}
 800537a:	bf00      	nop
 800537c:	3740      	adds	r7, #64	@ 0x40
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40023800 	.word	0x40023800
 8005388:	40020800 	.word	0x40020800
 800538c:	40020c00 	.word	0x40020c00
 8005390:	40021000 	.word	0x40021000
 8005394:	40021400 	.word	0x40021400
 8005398:	40021800 	.word	0x40021800
 800539c:	40021c00 	.word	0x40021c00
 80053a0:	20031234 	.word	0x20031234
 80053a4:	40026410 	.word	0x40026410

080053a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053ac:	2003      	movs	r0, #3
 80053ae:	f000 f94d 	bl	800564c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053b2:	2000      	movs	r0, #0
 80053b4:	f000 f806 	bl	80053c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053b8:	f7fd fb66 	bl	8002a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053cc:	4b12      	ldr	r3, [pc, #72]	@ (8005418 <HAL_InitTick+0x54>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	4b12      	ldr	r3, [pc, #72]	@ (800541c <HAL_InitTick+0x58>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	4619      	mov	r1, r3
 80053d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80053da:	fbb3 f3f1 	udiv	r3, r3, r1
 80053de:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 f967 	bl	80056b6 <HAL_SYSTICK_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e00e      	b.n	8005410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b0f      	cmp	r3, #15
 80053f6:	d80a      	bhi.n	800540e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053f8:	2200      	movs	r2, #0
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005400:	f000 f92f 	bl	8005662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005404:	4a06      	ldr	r2, [pc, #24]	@ (8005420 <HAL_InitTick+0x5c>)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	e000      	b.n	8005410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	20000018 	.word	0x20000018
 800541c:	20000054 	.word	0x20000054
 8005420:	20000050 	.word	0x20000050

08005424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005428:	4b06      	ldr	r3, [pc, #24]	@ (8005444 <HAL_IncTick+0x20>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	4b06      	ldr	r3, [pc, #24]	@ (8005448 <HAL_IncTick+0x24>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4413      	add	r3, r2
 8005434:	4a04      	ldr	r2, [pc, #16]	@ (8005448 <HAL_IncTick+0x24>)
 8005436:	6013      	str	r3, [r2, #0]
}
 8005438:	bf00      	nop
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	20000054 	.word	0x20000054
 8005448:	20031294 	.word	0x20031294

0800544c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return uwTick;
 8005450:	4b03      	ldr	r3, [pc, #12]	@ (8005460 <HAL_GetTick+0x14>)
 8005452:	681b      	ldr	r3, [r3, #0]
}
 8005454:	4618      	mov	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	20031294 	.word	0x20031294

08005464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800546c:	f7ff ffee 	bl	800544c <HAL_GetTick>
 8005470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547c:	d005      	beq.n	800548a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800547e:	4b0a      	ldr	r3, [pc, #40]	@ (80054a8 <HAL_Delay+0x44>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800548a:	bf00      	nop
 800548c:	f7ff ffde 	bl	800544c <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	429a      	cmp	r2, r3
 800549a:	d8f7      	bhi.n	800548c <HAL_Delay+0x28>
  {
  }
}
 800549c:	bf00      	nop
 800549e:	bf00      	nop
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20000054 	.word	0x20000054

080054ac <__NVIC_SetPriorityGrouping>:
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054bc:	4b0b      	ldr	r3, [pc, #44]	@ (80054ec <__NVIC_SetPriorityGrouping+0x40>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054c8:	4013      	ands	r3, r2
 80054ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80054d4:	4b06      	ldr	r3, [pc, #24]	@ (80054f0 <__NVIC_SetPriorityGrouping+0x44>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054da:	4a04      	ldr	r2, [pc, #16]	@ (80054ec <__NVIC_SetPriorityGrouping+0x40>)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	60d3      	str	r3, [r2, #12]
}
 80054e0:	bf00      	nop
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	e000ed00 	.word	0xe000ed00
 80054f0:	05fa0000 	.word	0x05fa0000

080054f4 <__NVIC_GetPriorityGrouping>:
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054f8:	4b04      	ldr	r3, [pc, #16]	@ (800550c <__NVIC_GetPriorityGrouping+0x18>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	0a1b      	lsrs	r3, r3, #8
 80054fe:	f003 0307 	and.w	r3, r3, #7
}
 8005502:	4618      	mov	r0, r3
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	e000ed00 	.word	0xe000ed00

08005510 <__NVIC_EnableIRQ>:
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800551a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800551e:	2b00      	cmp	r3, #0
 8005520:	db0b      	blt.n	800553a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	f003 021f 	and.w	r2, r3, #31
 8005528:	4907      	ldr	r1, [pc, #28]	@ (8005548 <__NVIC_EnableIRQ+0x38>)
 800552a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	2001      	movs	r0, #1
 8005532:	fa00 f202 	lsl.w	r2, r0, r2
 8005536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	e000e100 	.word	0xe000e100

0800554c <__NVIC_SetPriority>:
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	6039      	str	r1, [r7, #0]
 8005556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800555c:	2b00      	cmp	r3, #0
 800555e:	db0a      	blt.n	8005576 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	b2da      	uxtb	r2, r3
 8005564:	490c      	ldr	r1, [pc, #48]	@ (8005598 <__NVIC_SetPriority+0x4c>)
 8005566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556a:	0112      	lsls	r2, r2, #4
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	440b      	add	r3, r1
 8005570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005574:	e00a      	b.n	800558c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	b2da      	uxtb	r2, r3
 800557a:	4908      	ldr	r1, [pc, #32]	@ (800559c <__NVIC_SetPriority+0x50>)
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	3b04      	subs	r3, #4
 8005584:	0112      	lsls	r2, r2, #4
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	440b      	add	r3, r1
 800558a:	761a      	strb	r2, [r3, #24]
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	e000e100 	.word	0xe000e100
 800559c:	e000ed00 	.word	0xe000ed00

080055a0 <NVIC_EncodePriority>:
{
 80055a0:	b480      	push	{r7}
 80055a2:	b089      	sub	sp, #36	@ 0x24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f1c3 0307 	rsb	r3, r3, #7
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	bf28      	it	cs
 80055be:	2304      	movcs	r3, #4
 80055c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3304      	adds	r3, #4
 80055c6:	2b06      	cmp	r3, #6
 80055c8:	d902      	bls.n	80055d0 <NVIC_EncodePriority+0x30>
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	3b03      	subs	r3, #3
 80055ce:	e000      	b.n	80055d2 <NVIC_EncodePriority+0x32>
 80055d0:	2300      	movs	r3, #0
 80055d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055d4:	f04f 32ff 	mov.w	r2, #4294967295
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	43da      	mvns	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	401a      	ands	r2, r3
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055e8:	f04f 31ff 	mov.w	r1, #4294967295
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	fa01 f303 	lsl.w	r3, r1, r3
 80055f2:	43d9      	mvns	r1, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055f8:	4313      	orrs	r3, r2
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3724      	adds	r7, #36	@ 0x24
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
	...

08005608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3b01      	subs	r3, #1
 8005614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005618:	d301      	bcc.n	800561e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800561a:	2301      	movs	r3, #1
 800561c:	e00f      	b.n	800563e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800561e:	4a0a      	ldr	r2, [pc, #40]	@ (8005648 <SysTick_Config+0x40>)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3b01      	subs	r3, #1
 8005624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005626:	210f      	movs	r1, #15
 8005628:	f04f 30ff 	mov.w	r0, #4294967295
 800562c:	f7ff ff8e 	bl	800554c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005630:	4b05      	ldr	r3, [pc, #20]	@ (8005648 <SysTick_Config+0x40>)
 8005632:	2200      	movs	r2, #0
 8005634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005636:	4b04      	ldr	r3, [pc, #16]	@ (8005648 <SysTick_Config+0x40>)
 8005638:	2207      	movs	r2, #7
 800563a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	e000e010 	.word	0xe000e010

0800564c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff ff29 	bl	80054ac <__NVIC_SetPriorityGrouping>
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005662:	b580      	push	{r7, lr}
 8005664:	b086      	sub	sp, #24
 8005666:	af00      	add	r7, sp, #0
 8005668:	4603      	mov	r3, r0
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
 800566e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005674:	f7ff ff3e 	bl	80054f4 <__NVIC_GetPriorityGrouping>
 8005678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	6978      	ldr	r0, [r7, #20]
 8005680:	f7ff ff8e 	bl	80055a0 <NVIC_EncodePriority>
 8005684:	4602      	mov	r2, r0
 8005686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800568a:	4611      	mov	r1, r2
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff ff5d 	bl	800554c <__NVIC_SetPriority>
}
 8005692:	bf00      	nop
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	4603      	mov	r3, r0
 80056a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff ff31 	bl	8005510 <__NVIC_EnableIRQ>
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff ffa2 	bl	8005608 <SysTick_Config>
 80056c4:	4603      	mov	r3, r0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e054      	b.n	800578c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	7f5b      	ldrb	r3, [r3, #29]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d105      	bne.n	80056f8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fb fc72 	bl	8000fdc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	791b      	ldrb	r3, [r3, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10c      	bne.n	8005720 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a22      	ldr	r2, [pc, #136]	@ (8005794 <HAL_CRC_Init+0xc4>)
 800570c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0218 	bic.w	r2, r2, #24
 800571c:	609a      	str	r2, [r3, #8]
 800571e:	e00c      	b.n	800573a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6899      	ldr	r1, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	461a      	mov	r2, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f834 	bl	8005798 <HAL_CRCEx_Polynomial_Set>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e028      	b.n	800578c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	795b      	ldrb	r3, [r3, #5]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d105      	bne.n	800574e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f04f 32ff 	mov.w	r2, #4294967295
 800574a:	611a      	str	r2, [r3, #16]
 800574c:	e004      	b.n	8005758 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6912      	ldr	r2, [r2, #16]
 8005756:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695a      	ldr	r2, [r3, #20]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	04c11db7 	.word	0x04c11db7

08005798 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80057a8:	231f      	movs	r3, #31
 80057aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d102      	bne.n	80057bc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	75fb      	strb	r3, [r7, #23]
 80057ba:	e063      	b.n	8005884 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80057bc:	bf00      	nop
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1e5a      	subs	r2, r3, #1
 80057c2:	613a      	str	r2, [r7, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d009      	beq.n	80057dc <HAL_CRCEx_Polynomial_Set+0x44>
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f003 031f 	and.w	r3, r3, #31
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0f0      	beq.n	80057be <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b18      	cmp	r3, #24
 80057e0:	d846      	bhi.n	8005870 <HAL_CRCEx_Polynomial_Set+0xd8>
 80057e2:	a201      	add	r2, pc, #4	@ (adr r2, 80057e8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	08005877 	.word	0x08005877
 80057ec:	08005871 	.word	0x08005871
 80057f0:	08005871 	.word	0x08005871
 80057f4:	08005871 	.word	0x08005871
 80057f8:	08005871 	.word	0x08005871
 80057fc:	08005871 	.word	0x08005871
 8005800:	08005871 	.word	0x08005871
 8005804:	08005871 	.word	0x08005871
 8005808:	08005865 	.word	0x08005865
 800580c:	08005871 	.word	0x08005871
 8005810:	08005871 	.word	0x08005871
 8005814:	08005871 	.word	0x08005871
 8005818:	08005871 	.word	0x08005871
 800581c:	08005871 	.word	0x08005871
 8005820:	08005871 	.word	0x08005871
 8005824:	08005871 	.word	0x08005871
 8005828:	08005859 	.word	0x08005859
 800582c:	08005871 	.word	0x08005871
 8005830:	08005871 	.word	0x08005871
 8005834:	08005871 	.word	0x08005871
 8005838:	08005871 	.word	0x08005871
 800583c:	08005871 	.word	0x08005871
 8005840:	08005871 	.word	0x08005871
 8005844:	08005871 	.word	0x08005871
 8005848:	0800584d 	.word	0x0800584d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2b06      	cmp	r3, #6
 8005850:	d913      	bls.n	800587a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005856:	e010      	b.n	800587a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	2b07      	cmp	r3, #7
 800585c:	d90f      	bls.n	800587e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005862:	e00c      	b.n	800587e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b0f      	cmp	r3, #15
 8005868:	d90b      	bls.n	8005882 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800586e:	e008      	b.n	8005882 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	75fb      	strb	r3, [r7, #23]
        break;
 8005874:	e006      	b.n	8005884 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005876:	bf00      	nop
 8005878:	e004      	b.n	8005884 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800587a:	bf00      	nop
 800587c:	e002      	b.n	8005884 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800587e:	bf00      	nop
 8005880:	e000      	b.n	8005884 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005882:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10d      	bne.n	80058a6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f023 0118 	bic.w	r1, r3, #24
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80058a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	371c      	adds	r7, #28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80058c0:	f7ff fdc4 	bl	800544c <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e099      	b.n	8005a04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0201 	bic.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058f0:	e00f      	b.n	8005912 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058f2:	f7ff fdab 	bl	800544c <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b05      	cmp	r3, #5
 80058fe:	d908      	bls.n	8005912 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2203      	movs	r2, #3
 800590a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e078      	b.n	8005a04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e8      	bne.n	80058f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4b38      	ldr	r3, [pc, #224]	@ (8005a0c <HAL_DMA_Init+0x158>)
 800592c:	4013      	ands	r3, r2
 800592e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800593e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800594a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005956:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005968:	2b04      	cmp	r3, #4
 800596a:	d107      	bne.n	800597c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005974:	4313      	orrs	r3, r2
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f023 0307 	bic.w	r3, r3, #7
 8005992:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d117      	bne.n	80059d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00e      	beq.n	80059d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fb73 	bl	80060a4 <DMA_CheckFifoParam>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2240      	movs	r2, #64	@ 0x40
 80059c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80059d2:	2301      	movs	r3, #1
 80059d4:	e016      	b.n	8005a04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fb2a 	bl	8006038 <DMA_CalcBaseAndBitshift>
 80059e4:	4603      	mov	r3, r0
 80059e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ec:	223f      	movs	r2, #63	@ 0x3f
 80059ee:	409a      	lsls	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	f010803f 	.word	0xf010803f

08005a10 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e050      	b.n	8005ac4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d101      	bne.n	8005a32 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e048      	b.n	8005ac4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0201 	bic.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2200      	movs	r2, #0
 8005a58:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2200      	movs	r2, #0
 8005a68:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2221      	movs	r2, #33	@ 0x21
 8005a70:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fae0 	bl	8006038 <DMA_CalcBaseAndBitshift>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a80:	223f      	movs	r2, #63	@ 0x3f
 8005a82:	409a      	lsls	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_DMA_Start_IT+0x26>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e048      	b.n	8005b84 <HAL_DMA_Start_IT+0xb8>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d137      	bne.n	8005b76 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 fa5e 	bl	8005fdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b24:	223f      	movs	r2, #63	@ 0x3f
 8005b26:	409a      	lsls	r2, r3
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0216 	orr.w	r2, r2, #22
 8005b3a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b4a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0208 	orr.w	r2, r2, #8
 8005b62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	e005      	b.n	8005b82 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b7e:	2302      	movs	r3, #2
 8005b80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b9a:	f7ff fc57 	bl	800544c <HAL_GetTick>
 8005b9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d008      	beq.n	8005bbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2280      	movs	r2, #128	@ 0x80
 8005bb0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e052      	b.n	8005c64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0216 	bic.w	r2, r2, #22
 8005bcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695a      	ldr	r2, [r3, #20]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bdc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d103      	bne.n	8005bee <HAL_DMA_Abort+0x62>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d007      	beq.n	8005bfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0208 	bic.w	r2, r2, #8
 8005bfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0201 	bic.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c0e:	e013      	b.n	8005c38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c10:	f7ff fc1c 	bl	800544c <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b05      	cmp	r3, #5
 8005c1c:	d90c      	bls.n	8005c38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2203      	movs	r2, #3
 8005c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e015      	b.n	8005c64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e4      	bne.n	8005c10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c4a:	223f      	movs	r2, #63	@ 0x3f
 8005c4c:	409a      	lsls	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d004      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2280      	movs	r2, #128	@ 0x80
 8005c84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e00c      	b.n	8005ca4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2205      	movs	r2, #5
 8005c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005cbc:	4b8e      	ldr	r3, [pc, #568]	@ (8005ef8 <HAL_DMA_IRQHandler+0x248>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a8e      	ldr	r2, [pc, #568]	@ (8005efc <HAL_DMA_IRQHandler+0x24c>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	0a9b      	lsrs	r3, r3, #10
 8005cc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cda:	2208      	movs	r2, #8
 8005cdc:	409a      	lsls	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d01a      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d013      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0204 	bic.w	r2, r2, #4
 8005d02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d08:	2208      	movs	r2, #8
 8005d0a:	409a      	lsls	r2, r3
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d14:	f043 0201 	orr.w	r2, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d20:	2201      	movs	r2, #1
 8005d22:	409a      	lsls	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d012      	beq.n	8005d52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00b      	beq.n	8005d52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d3e:	2201      	movs	r2, #1
 8005d40:	409a      	lsls	r2, r3
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4a:	f043 0202 	orr.w	r2, r3, #2
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d56:	2204      	movs	r2, #4
 8005d58:	409a      	lsls	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d012      	beq.n	8005d88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00b      	beq.n	8005d88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d74:	2204      	movs	r2, #4
 8005d76:	409a      	lsls	r2, r3
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d80:	f043 0204 	orr.w	r2, r3, #4
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d8c:	2210      	movs	r2, #16
 8005d8e:	409a      	lsls	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4013      	ands	r3, r2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d043      	beq.n	8005e20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d03c      	beq.n	8005e20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005daa:	2210      	movs	r2, #16
 8005dac:	409a      	lsls	r2, r3
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d018      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d108      	bne.n	8005de0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d024      	beq.n	8005e20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
 8005dde:	e01f      	b.n	8005e20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01b      	beq.n	8005e20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	4798      	blx	r3
 8005df0:	e016      	b.n	8005e20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d107      	bne.n	8005e10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0208 	bic.w	r2, r2, #8
 8005e0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e24:	2220      	movs	r2, #32
 8005e26:	409a      	lsls	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 808f 	beq.w	8005f50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0310 	and.w	r3, r3, #16
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8087 	beq.w	8005f50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e46:	2220      	movs	r2, #32
 8005e48:	409a      	lsls	r2, r3
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b05      	cmp	r3, #5
 8005e58:	d136      	bne.n	8005ec8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0216 	bic.w	r2, r2, #22
 8005e68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	695a      	ldr	r2, [r3, #20]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d103      	bne.n	8005e8a <HAL_DMA_IRQHandler+0x1da>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d007      	beq.n	8005e9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0208 	bic.w	r2, r2, #8
 8005e98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e9e:	223f      	movs	r2, #63	@ 0x3f
 8005ea0:	409a      	lsls	r2, r3
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d07e      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	4798      	blx	r3
        }
        return;
 8005ec6:	e079      	b.n	8005fbc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01d      	beq.n	8005f12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10d      	bne.n	8005f00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d031      	beq.n	8005f50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	4798      	blx	r3
 8005ef4:	e02c      	b.n	8005f50 <HAL_DMA_IRQHandler+0x2a0>
 8005ef6:	bf00      	nop
 8005ef8:	20000018 	.word	0x20000018
 8005efc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d023      	beq.n	8005f50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	4798      	blx	r3
 8005f10:	e01e      	b.n	8005f50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10f      	bne.n	8005f40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0210 	bic.w	r2, r2, #16
 8005f2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d032      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d022      	beq.n	8005faa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2205      	movs	r2, #5
 8005f68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0201 	bic.w	r2, r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d307      	bcc.n	8005f98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f2      	bne.n	8005f7c <HAL_DMA_IRQHandler+0x2cc>
 8005f96:	e000      	b.n	8005f9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005f98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	4798      	blx	r3
 8005fba:	e000      	b.n	8005fbe <HAL_DMA_IRQHandler+0x30e>
        return;
 8005fbc:	bf00      	nop
    }
  }
}
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005ff8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2b40      	cmp	r3, #64	@ 0x40
 8006008:	d108      	bne.n	800601c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800601a:	e007      	b.n	800602c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	60da      	str	r2, [r3, #12]
}
 800602c:	bf00      	nop
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	3b10      	subs	r3, #16
 8006048:	4a13      	ldr	r2, [pc, #76]	@ (8006098 <DMA_CalcBaseAndBitshift+0x60>)
 800604a:	fba2 2303 	umull	r2, r3, r2, r3
 800604e:	091b      	lsrs	r3, r3, #4
 8006050:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006052:	4a12      	ldr	r2, [pc, #72]	@ (800609c <DMA_CalcBaseAndBitshift+0x64>)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b03      	cmp	r3, #3
 8006064:	d908      	bls.n	8006078 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	4b0c      	ldr	r3, [pc, #48]	@ (80060a0 <DMA_CalcBaseAndBitshift+0x68>)
 800606e:	4013      	ands	r3, r2
 8006070:	1d1a      	adds	r2, r3, #4
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	659a      	str	r2, [r3, #88]	@ 0x58
 8006076:	e006      	b.n	8006086 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	4b08      	ldr	r3, [pc, #32]	@ (80060a0 <DMA_CalcBaseAndBitshift+0x68>)
 8006080:	4013      	ands	r3, r2
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	aaaaaaab 	.word	0xaaaaaaab
 800609c:	080188d8 	.word	0x080188d8
 80060a0:	fffffc00 	.word	0xfffffc00

080060a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d11f      	bne.n	80060fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b03      	cmp	r3, #3
 80060c2:	d856      	bhi.n	8006172 <DMA_CheckFifoParam+0xce>
 80060c4:	a201      	add	r2, pc, #4	@ (adr r2, 80060cc <DMA_CheckFifoParam+0x28>)
 80060c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ca:	bf00      	nop
 80060cc:	080060dd 	.word	0x080060dd
 80060d0:	080060ef 	.word	0x080060ef
 80060d4:	080060dd 	.word	0x080060dd
 80060d8:	08006173 	.word	0x08006173
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d046      	beq.n	8006176 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060ec:	e043      	b.n	8006176 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80060f6:	d140      	bne.n	800617a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060fc:	e03d      	b.n	800617a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006106:	d121      	bne.n	800614c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b03      	cmp	r3, #3
 800610c:	d837      	bhi.n	800617e <DMA_CheckFifoParam+0xda>
 800610e:	a201      	add	r2, pc, #4	@ (adr r2, 8006114 <DMA_CheckFifoParam+0x70>)
 8006110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006114:	08006125 	.word	0x08006125
 8006118:	0800612b 	.word	0x0800612b
 800611c:	08006125 	.word	0x08006125
 8006120:	0800613d 	.word	0x0800613d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	73fb      	strb	r3, [r7, #15]
      break;
 8006128:	e030      	b.n	800618c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d025      	beq.n	8006182 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800613a:	e022      	b.n	8006182 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006140:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006144:	d11f      	bne.n	8006186 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800614a:	e01c      	b.n	8006186 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2b02      	cmp	r3, #2
 8006150:	d903      	bls.n	800615a <DMA_CheckFifoParam+0xb6>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b03      	cmp	r3, #3
 8006156:	d003      	beq.n	8006160 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006158:	e018      	b.n	800618c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	73fb      	strb	r3, [r7, #15]
      break;
 800615e:	e015      	b.n	800618c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006164:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00e      	beq.n	800618a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	73fb      	strb	r3, [r7, #15]
      break;
 8006170:	e00b      	b.n	800618a <DMA_CheckFifoParam+0xe6>
      break;
 8006172:	bf00      	nop
 8006174:	e00a      	b.n	800618c <DMA_CheckFifoParam+0xe8>
      break;
 8006176:	bf00      	nop
 8006178:	e008      	b.n	800618c <DMA_CheckFifoParam+0xe8>
      break;
 800617a:	bf00      	nop
 800617c:	e006      	b.n	800618c <DMA_CheckFifoParam+0xe8>
      break;
 800617e:	bf00      	nop
 8006180:	e004      	b.n	800618c <DMA_CheckFifoParam+0xe8>
      break;
 8006182:	bf00      	nop
 8006184:	e002      	b.n	800618c <DMA_CheckFifoParam+0xe8>
      break;   
 8006186:	bf00      	nop
 8006188:	e000      	b.n	800618c <DMA_CheckFifoParam+0xe8>
      break;
 800618a:	bf00      	nop
    }
  } 
  
  return status; 
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop

0800619c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800619c:	b480      	push	{r7}
 800619e:	b089      	sub	sp, #36	@ 0x24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80061aa:	2300      	movs	r3, #0
 80061ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80061ae:	2300      	movs	r3, #0
 80061b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80061b2:	2300      	movs	r3, #0
 80061b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80061b6:	2300      	movs	r3, #0
 80061b8:	61fb      	str	r3, [r7, #28]
 80061ba:	e175      	b.n	80064a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80061bc:	2201      	movs	r2, #1
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4013      	ands	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	f040 8164 	bne.w	80064a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d005      	beq.n	80061f2 <HAL_GPIO_Init+0x56>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d130      	bne.n	8006254 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	2203      	movs	r2, #3
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	43db      	mvns	r3, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	4013      	ands	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	4313      	orrs	r3, r2
 800621a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006228:	2201      	movs	r2, #1
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	fa02 f303 	lsl.w	r3, r2, r3
 8006230:	43db      	mvns	r3, r3
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	4013      	ands	r3, r2
 8006236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	091b      	lsrs	r3, r3, #4
 800623e:	f003 0201 	and.w	r2, r3, #1
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	4313      	orrs	r3, r2
 800624c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f003 0303 	and.w	r3, r3, #3
 800625c:	2b03      	cmp	r3, #3
 800625e:	d017      	beq.n	8006290 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	2203      	movs	r2, #3
 800626c:	fa02 f303 	lsl.w	r3, r2, r3
 8006270:	43db      	mvns	r3, r3
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	4013      	ands	r3, r2
 8006276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	fa02 f303 	lsl.w	r3, r2, r3
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	4313      	orrs	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f003 0303 	and.w	r3, r3, #3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d123      	bne.n	80062e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	08da      	lsrs	r2, r3, #3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3208      	adds	r2, #8
 80062a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	220f      	movs	r2, #15
 80062b4:	fa02 f303 	lsl.w	r3, r2, r3
 80062b8:	43db      	mvns	r3, r3
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	4013      	ands	r3, r2
 80062be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	fa02 f303 	lsl.w	r3, r2, r3
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	08da      	lsrs	r2, r3, #3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3208      	adds	r2, #8
 80062de:	69b9      	ldr	r1, [r7, #24]
 80062e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	2203      	movs	r2, #3
 80062f0:	fa02 f303 	lsl.w	r3, r2, r3
 80062f4:	43db      	mvns	r3, r3
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	4013      	ands	r3, r2
 80062fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f003 0203 	and.w	r2, r3, #3
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	4313      	orrs	r3, r2
 8006310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 80be 	beq.w	80064a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006326:	4b66      	ldr	r3, [pc, #408]	@ (80064c0 <HAL_GPIO_Init+0x324>)
 8006328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800632a:	4a65      	ldr	r2, [pc, #404]	@ (80064c0 <HAL_GPIO_Init+0x324>)
 800632c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006330:	6453      	str	r3, [r2, #68]	@ 0x44
 8006332:	4b63      	ldr	r3, [pc, #396]	@ (80064c0 <HAL_GPIO_Init+0x324>)
 8006334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800633e:	4a61      	ldr	r2, [pc, #388]	@ (80064c4 <HAL_GPIO_Init+0x328>)
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	089b      	lsrs	r3, r3, #2
 8006344:	3302      	adds	r3, #2
 8006346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800634a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	f003 0303 	and.w	r3, r3, #3
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	220f      	movs	r2, #15
 8006356:	fa02 f303 	lsl.w	r3, r2, r3
 800635a:	43db      	mvns	r3, r3
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	4013      	ands	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a58      	ldr	r2, [pc, #352]	@ (80064c8 <HAL_GPIO_Init+0x32c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d037      	beq.n	80063da <HAL_GPIO_Init+0x23e>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a57      	ldr	r2, [pc, #348]	@ (80064cc <HAL_GPIO_Init+0x330>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d031      	beq.n	80063d6 <HAL_GPIO_Init+0x23a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a56      	ldr	r2, [pc, #344]	@ (80064d0 <HAL_GPIO_Init+0x334>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d02b      	beq.n	80063d2 <HAL_GPIO_Init+0x236>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a55      	ldr	r2, [pc, #340]	@ (80064d4 <HAL_GPIO_Init+0x338>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d025      	beq.n	80063ce <HAL_GPIO_Init+0x232>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a54      	ldr	r2, [pc, #336]	@ (80064d8 <HAL_GPIO_Init+0x33c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01f      	beq.n	80063ca <HAL_GPIO_Init+0x22e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a53      	ldr	r2, [pc, #332]	@ (80064dc <HAL_GPIO_Init+0x340>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d019      	beq.n	80063c6 <HAL_GPIO_Init+0x22a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a52      	ldr	r2, [pc, #328]	@ (80064e0 <HAL_GPIO_Init+0x344>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d013      	beq.n	80063c2 <HAL_GPIO_Init+0x226>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a51      	ldr	r2, [pc, #324]	@ (80064e4 <HAL_GPIO_Init+0x348>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00d      	beq.n	80063be <HAL_GPIO_Init+0x222>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a50      	ldr	r2, [pc, #320]	@ (80064e8 <HAL_GPIO_Init+0x34c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d007      	beq.n	80063ba <HAL_GPIO_Init+0x21e>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a4f      	ldr	r2, [pc, #316]	@ (80064ec <HAL_GPIO_Init+0x350>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d101      	bne.n	80063b6 <HAL_GPIO_Init+0x21a>
 80063b2:	2309      	movs	r3, #9
 80063b4:	e012      	b.n	80063dc <HAL_GPIO_Init+0x240>
 80063b6:	230a      	movs	r3, #10
 80063b8:	e010      	b.n	80063dc <HAL_GPIO_Init+0x240>
 80063ba:	2308      	movs	r3, #8
 80063bc:	e00e      	b.n	80063dc <HAL_GPIO_Init+0x240>
 80063be:	2307      	movs	r3, #7
 80063c0:	e00c      	b.n	80063dc <HAL_GPIO_Init+0x240>
 80063c2:	2306      	movs	r3, #6
 80063c4:	e00a      	b.n	80063dc <HAL_GPIO_Init+0x240>
 80063c6:	2305      	movs	r3, #5
 80063c8:	e008      	b.n	80063dc <HAL_GPIO_Init+0x240>
 80063ca:	2304      	movs	r3, #4
 80063cc:	e006      	b.n	80063dc <HAL_GPIO_Init+0x240>
 80063ce:	2303      	movs	r3, #3
 80063d0:	e004      	b.n	80063dc <HAL_GPIO_Init+0x240>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e002      	b.n	80063dc <HAL_GPIO_Init+0x240>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <HAL_GPIO_Init+0x240>
 80063da:	2300      	movs	r3, #0
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	f002 0203 	and.w	r2, r2, #3
 80063e2:	0092      	lsls	r2, r2, #2
 80063e4:	4093      	lsls	r3, r2
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80063ec:	4935      	ldr	r1, [pc, #212]	@ (80064c4 <HAL_GPIO_Init+0x328>)
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	089b      	lsrs	r3, r3, #2
 80063f2:	3302      	adds	r3, #2
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80063fa:	4b3d      	ldr	r3, [pc, #244]	@ (80064f0 <HAL_GPIO_Init+0x354>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	43db      	mvns	r3, r3
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	4013      	ands	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800641e:	4a34      	ldr	r2, [pc, #208]	@ (80064f0 <HAL_GPIO_Init+0x354>)
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006424:	4b32      	ldr	r3, [pc, #200]	@ (80064f0 <HAL_GPIO_Init+0x354>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	43db      	mvns	r3, r3
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	4013      	ands	r3, r2
 8006432:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006448:	4a29      	ldr	r2, [pc, #164]	@ (80064f0 <HAL_GPIO_Init+0x354>)
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800644e:	4b28      	ldr	r3, [pc, #160]	@ (80064f0 <HAL_GPIO_Init+0x354>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	43db      	mvns	r3, r3
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	4013      	ands	r3, r2
 800645c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006472:	4a1f      	ldr	r2, [pc, #124]	@ (80064f0 <HAL_GPIO_Init+0x354>)
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006478:	4b1d      	ldr	r3, [pc, #116]	@ (80064f0 <HAL_GPIO_Init+0x354>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	43db      	mvns	r3, r3
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	4013      	ands	r3, r2
 8006486:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800649c:	4a14      	ldr	r2, [pc, #80]	@ (80064f0 <HAL_GPIO_Init+0x354>)
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	3301      	adds	r3, #1
 80064a6:	61fb      	str	r3, [r7, #28]
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	2b0f      	cmp	r3, #15
 80064ac:	f67f ae86 	bls.w	80061bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	3724      	adds	r7, #36	@ 0x24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40023800 	.word	0x40023800
 80064c4:	40013800 	.word	0x40013800
 80064c8:	40020000 	.word	0x40020000
 80064cc:	40020400 	.word	0x40020400
 80064d0:	40020800 	.word	0x40020800
 80064d4:	40020c00 	.word	0x40020c00
 80064d8:	40021000 	.word	0x40021000
 80064dc:	40021400 	.word	0x40021400
 80064e0:	40021800 	.word	0x40021800
 80064e4:	40021c00 	.word	0x40021c00
 80064e8:	40022000 	.word	0x40022000
 80064ec:	40022400 	.word	0x40022400
 80064f0:	40013c00 	.word	0x40013c00

080064f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80064fe:	2300      	movs	r3, #0
 8006500:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006506:	2300      	movs	r3, #0
 8006508:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800650a:	2300      	movs	r3, #0
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	e0d9      	b.n	80066c4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006510:	2201      	movs	r2, #1
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	4013      	ands	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	429a      	cmp	r2, r3
 8006528:	f040 80c9 	bne.w	80066be <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800652c:	4a6b      	ldr	r2, [pc, #428]	@ (80066dc <HAL_GPIO_DeInit+0x1e8>)
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	089b      	lsrs	r3, r3, #2
 8006532:	3302      	adds	r3, #2
 8006534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006538:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f003 0303 	and.w	r3, r3, #3
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	220f      	movs	r2, #15
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	4013      	ands	r3, r2
 800654c:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a63      	ldr	r2, [pc, #396]	@ (80066e0 <HAL_GPIO_DeInit+0x1ec>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d037      	beq.n	80065c6 <HAL_GPIO_DeInit+0xd2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a62      	ldr	r2, [pc, #392]	@ (80066e4 <HAL_GPIO_DeInit+0x1f0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d031      	beq.n	80065c2 <HAL_GPIO_DeInit+0xce>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a61      	ldr	r2, [pc, #388]	@ (80066e8 <HAL_GPIO_DeInit+0x1f4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d02b      	beq.n	80065be <HAL_GPIO_DeInit+0xca>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a60      	ldr	r2, [pc, #384]	@ (80066ec <HAL_GPIO_DeInit+0x1f8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d025      	beq.n	80065ba <HAL_GPIO_DeInit+0xc6>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a5f      	ldr	r2, [pc, #380]	@ (80066f0 <HAL_GPIO_DeInit+0x1fc>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d01f      	beq.n	80065b6 <HAL_GPIO_DeInit+0xc2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a5e      	ldr	r2, [pc, #376]	@ (80066f4 <HAL_GPIO_DeInit+0x200>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d019      	beq.n	80065b2 <HAL_GPIO_DeInit+0xbe>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a5d      	ldr	r2, [pc, #372]	@ (80066f8 <HAL_GPIO_DeInit+0x204>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <HAL_GPIO_DeInit+0xba>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a5c      	ldr	r2, [pc, #368]	@ (80066fc <HAL_GPIO_DeInit+0x208>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00d      	beq.n	80065aa <HAL_GPIO_DeInit+0xb6>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a5b      	ldr	r2, [pc, #364]	@ (8006700 <HAL_GPIO_DeInit+0x20c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d007      	beq.n	80065a6 <HAL_GPIO_DeInit+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a5a      	ldr	r2, [pc, #360]	@ (8006704 <HAL_GPIO_DeInit+0x210>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d101      	bne.n	80065a2 <HAL_GPIO_DeInit+0xae>
 800659e:	2309      	movs	r3, #9
 80065a0:	e012      	b.n	80065c8 <HAL_GPIO_DeInit+0xd4>
 80065a2:	230a      	movs	r3, #10
 80065a4:	e010      	b.n	80065c8 <HAL_GPIO_DeInit+0xd4>
 80065a6:	2308      	movs	r3, #8
 80065a8:	e00e      	b.n	80065c8 <HAL_GPIO_DeInit+0xd4>
 80065aa:	2307      	movs	r3, #7
 80065ac:	e00c      	b.n	80065c8 <HAL_GPIO_DeInit+0xd4>
 80065ae:	2306      	movs	r3, #6
 80065b0:	e00a      	b.n	80065c8 <HAL_GPIO_DeInit+0xd4>
 80065b2:	2305      	movs	r3, #5
 80065b4:	e008      	b.n	80065c8 <HAL_GPIO_DeInit+0xd4>
 80065b6:	2304      	movs	r3, #4
 80065b8:	e006      	b.n	80065c8 <HAL_GPIO_DeInit+0xd4>
 80065ba:	2303      	movs	r3, #3
 80065bc:	e004      	b.n	80065c8 <HAL_GPIO_DeInit+0xd4>
 80065be:	2302      	movs	r3, #2
 80065c0:	e002      	b.n	80065c8 <HAL_GPIO_DeInit+0xd4>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <HAL_GPIO_DeInit+0xd4>
 80065c6:	2300      	movs	r3, #0
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	f002 0203 	and.w	r2, r2, #3
 80065ce:	0092      	lsls	r2, r2, #2
 80065d0:	4093      	lsls	r3, r2
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d132      	bne.n	800663e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80065d8:	4b4b      	ldr	r3, [pc, #300]	@ (8006708 <HAL_GPIO_DeInit+0x214>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	43db      	mvns	r3, r3
 80065e0:	4949      	ldr	r1, [pc, #292]	@ (8006708 <HAL_GPIO_DeInit+0x214>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80065e6:	4b48      	ldr	r3, [pc, #288]	@ (8006708 <HAL_GPIO_DeInit+0x214>)
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	43db      	mvns	r3, r3
 80065ee:	4946      	ldr	r1, [pc, #280]	@ (8006708 <HAL_GPIO_DeInit+0x214>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80065f4:	4b44      	ldr	r3, [pc, #272]	@ (8006708 <HAL_GPIO_DeInit+0x214>)
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	43db      	mvns	r3, r3
 80065fc:	4942      	ldr	r1, [pc, #264]	@ (8006708 <HAL_GPIO_DeInit+0x214>)
 80065fe:	4013      	ands	r3, r2
 8006600:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006602:	4b41      	ldr	r3, [pc, #260]	@ (8006708 <HAL_GPIO_DeInit+0x214>)
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	43db      	mvns	r3, r3
 800660a:	493f      	ldr	r1, [pc, #252]	@ (8006708 <HAL_GPIO_DeInit+0x214>)
 800660c:	4013      	ands	r3, r2
 800660e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	220f      	movs	r2, #15
 800661a:	fa02 f303 	lsl.w	r3, r2, r3
 800661e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006620:	4a2e      	ldr	r2, [pc, #184]	@ (80066dc <HAL_GPIO_DeInit+0x1e8>)
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	089b      	lsrs	r3, r3, #2
 8006626:	3302      	adds	r3, #2
 8006628:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	43da      	mvns	r2, r3
 8006630:	482a      	ldr	r0, [pc, #168]	@ (80066dc <HAL_GPIO_DeInit+0x1e8>)
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	089b      	lsrs	r3, r3, #2
 8006636:	400a      	ands	r2, r1
 8006638:	3302      	adds	r3, #2
 800663a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	2103      	movs	r1, #3
 8006648:	fa01 f303 	lsl.w	r3, r1, r3
 800664c:	43db      	mvns	r3, r3
 800664e:	401a      	ands	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	08da      	lsrs	r2, r3, #3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3208      	adds	r2, #8
 800665c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f003 0307 	and.w	r3, r3, #7
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	220f      	movs	r2, #15
 800666a:	fa02 f303 	lsl.w	r3, r2, r3
 800666e:	43db      	mvns	r3, r3
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	08d2      	lsrs	r2, r2, #3
 8006674:	4019      	ands	r1, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3208      	adds	r2, #8
 800667a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	2103      	movs	r1, #3
 8006688:	fa01 f303 	lsl.w	r3, r1, r3
 800668c:	43db      	mvns	r3, r3
 800668e:	401a      	ands	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	2101      	movs	r1, #1
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	fa01 f303 	lsl.w	r3, r1, r3
 80066a0:	43db      	mvns	r3, r3
 80066a2:	401a      	ands	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	2103      	movs	r1, #3
 80066b2:	fa01 f303 	lsl.w	r3, r1, r3
 80066b6:	43db      	mvns	r3, r3
 80066b8:	401a      	ands	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	3301      	adds	r3, #1
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2b0f      	cmp	r3, #15
 80066c8:	f67f af22 	bls.w	8006510 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80066cc:	bf00      	nop
 80066ce:	bf00      	nop
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	40013800 	.word	0x40013800
 80066e0:	40020000 	.word	0x40020000
 80066e4:	40020400 	.word	0x40020400
 80066e8:	40020800 	.word	0x40020800
 80066ec:	40020c00 	.word	0x40020c00
 80066f0:	40021000 	.word	0x40021000
 80066f4:	40021400 	.word	0x40021400
 80066f8:	40021800 	.word	0x40021800
 80066fc:	40021c00 	.word	0x40021c00
 8006700:	40022000 	.word	0x40022000
 8006704:	40022400 	.word	0x40022400
 8006708:	40013c00 	.word	0x40013c00

0800670c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691a      	ldr	r2, [r3, #16]
 800671c:	887b      	ldrh	r3, [r7, #2]
 800671e:	4013      	ands	r3, r2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006724:	2301      	movs	r3, #1
 8006726:	73fb      	strb	r3, [r7, #15]
 8006728:	e001      	b.n	800672e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800672a:	2300      	movs	r3, #0
 800672c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800672e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	807b      	strh	r3, [r7, #2]
 8006748:	4613      	mov	r3, r2
 800674a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800674c:	787b      	ldrb	r3, [r7, #1]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006752:	887a      	ldrh	r2, [r7, #2]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006758:	e003      	b.n	8006762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800675a:	887b      	ldrh	r3, [r7, #2]
 800675c:	041a      	lsls	r2, r3, #16
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	619a      	str	r2, [r3, #24]
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	460b      	mov	r3, r1
 8006778:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006780:	887a      	ldrh	r2, [r7, #2]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4013      	ands	r3, r2
 8006786:	041a      	lsls	r2, r3, #16
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	43d9      	mvns	r1, r3
 800678c:	887b      	ldrh	r3, [r7, #2]
 800678e:	400b      	ands	r3, r1
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	619a      	str	r2, [r3, #24]
}
 8006796:	bf00      	nop
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
	...

080067a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067ae:	4b08      	ldr	r3, [pc, #32]	@ (80067d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067b0:	695a      	ldr	r2, [r3, #20]
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	4013      	ands	r3, r2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d006      	beq.n	80067c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067ba:	4a05      	ldr	r2, [pc, #20]	@ (80067d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067bc:	88fb      	ldrh	r3, [r7, #6]
 80067be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fb fcda 	bl	800217c <HAL_GPIO_EXTI_Callback>
  }
}
 80067c8:	bf00      	nop
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	40013c00 	.word	0x40013c00

080067d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e08b      	b.n	80068fe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d106      	bne.n	8006800 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f8b5 	bl	800696a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2224      	movs	r2, #36	@ 0x24
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 0201 	bic.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006824:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006834:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d107      	bne.n	800684e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800684a:	609a      	str	r2, [r3, #8]
 800684c:	e006      	b.n	800685c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689a      	ldr	r2, [r3, #8]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800685a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d108      	bne.n	8006876 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006872:	605a      	str	r2, [r3, #4]
 8006874:	e007      	b.n	8006886 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006884:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6859      	ldr	r1, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	4b1d      	ldr	r3, [pc, #116]	@ (8006908 <HAL_I2C_Init+0x134>)
 8006892:	430b      	orrs	r3, r1
 8006894:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68da      	ldr	r2, [r3, #12]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80068a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691a      	ldr	r2, [r3, #16]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	69d9      	ldr	r1, [r3, #28]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a1a      	ldr	r2, [r3, #32]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	02008000 	.word	0x02008000

0800690c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e021      	b.n	8006962 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2224      	movs	r2, #36	@ 0x24
 8006922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0201 	bic.w	r2, r2, #1
 8006934:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f821 	bl	800697e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
	...

08006994 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af02      	add	r7, sp, #8
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	4608      	mov	r0, r1
 800699e:	4611      	mov	r1, r2
 80069a0:	461a      	mov	r2, r3
 80069a2:	4603      	mov	r3, r0
 80069a4:	817b      	strh	r3, [r7, #10]
 80069a6:	460b      	mov	r3, r1
 80069a8:	813b      	strh	r3, [r7, #8]
 80069aa:	4613      	mov	r3, r2
 80069ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	f040 80f9 	bne.w	8006bae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <HAL_I2C_Mem_Write+0x34>
 80069c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d105      	bne.n	80069d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e0ed      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d101      	bne.n	80069e2 <HAL_I2C_Mem_Write+0x4e>
 80069de:	2302      	movs	r3, #2
 80069e0:	e0e6      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80069ea:	f7fe fd2f 	bl	800544c <HAL_GetTick>
 80069ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	2319      	movs	r3, #25
 80069f6:	2201      	movs	r2, #1
 80069f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 fad1 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e0d1      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2221      	movs	r2, #33	@ 0x21
 8006a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2240      	movs	r2, #64	@ 0x40
 8006a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a3a      	ldr	r2, [r7, #32]
 8006a26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a34:	88f8      	ldrh	r0, [r7, #6]
 8006a36:	893a      	ldrh	r2, [r7, #8]
 8006a38:	8979      	ldrh	r1, [r7, #10]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	4603      	mov	r3, r0
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f9e1 	bl	8006e0c <I2C_RequestMemoryWrite>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d005      	beq.n	8006a5c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0a9      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2bff      	cmp	r3, #255	@ 0xff
 8006a64:	d90e      	bls.n	8006a84 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	22ff      	movs	r2, #255	@ 0xff
 8006a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	8979      	ldrh	r1, [r7, #10]
 8006a74:	2300      	movs	r3, #0
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fc55 	bl	800732c <I2C_TransferConfig>
 8006a82:	e00f      	b.n	8006aa4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	8979      	ldrh	r1, [r7, #10]
 8006a96:	2300      	movs	r3, #0
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fc44 	bl	800732c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fad4 	bl	8007056 <I2C_WaitOnTXISFlagUntilTimeout>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e07b      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006abc:	781a      	ldrb	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d034      	beq.n	8006b5c <HAL_I2C_Mem_Write+0x1c8>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d130      	bne.n	8006b5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b00:	2200      	movs	r2, #0
 8006b02:	2180      	movs	r1, #128	@ 0x80
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 fa4d 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e04d      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2bff      	cmp	r3, #255	@ 0xff
 8006b1c:	d90e      	bls.n	8006b3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	22ff      	movs	r2, #255	@ 0xff
 8006b22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	8979      	ldrh	r1, [r7, #10]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 fbf9 	bl	800732c <I2C_TransferConfig>
 8006b3a:	e00f      	b.n	8006b5c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	8979      	ldrh	r1, [r7, #10]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 fbe8 	bl	800732c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d19e      	bne.n	8006aa4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 faba 	bl	80070e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e01a      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6859      	ldr	r1, [r3, #4]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb8 <HAL_I2C_Mem_Write+0x224>)
 8006b8e:	400b      	ands	r3, r1
 8006b90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	e000      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006bae:	2302      	movs	r3, #2
  }
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	fe00e800 	.word	0xfe00e800

08006bbc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4603      	mov	r3, r0
 8006bcc:	817b      	strh	r3, [r7, #10]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	813b      	strh	r3, [r7, #8]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	f040 80fd 	bne.w	8006dde <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <HAL_I2C_Mem_Read+0x34>
 8006bea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d105      	bne.n	8006bfc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bf6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e0f1      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d101      	bne.n	8006c0a <HAL_I2C_Mem_Read+0x4e>
 8006c06:	2302      	movs	r3, #2
 8006c08:	e0ea      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c12:	f7fe fc1b 	bl	800544c <HAL_GetTick>
 8006c16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	2319      	movs	r3, #25
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f9bd 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e0d5      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2222      	movs	r2, #34	@ 0x22
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2240      	movs	r2, #64	@ 0x40
 8006c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a3a      	ldr	r2, [r7, #32]
 8006c4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c5c:	88f8      	ldrh	r0, [r7, #6]
 8006c5e:	893a      	ldrh	r2, [r7, #8]
 8006c60:	8979      	ldrh	r1, [r7, #10]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 f921 	bl	8006eb4 <I2C_RequestMemoryRead>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e0ad      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2bff      	cmp	r3, #255	@ 0xff
 8006c8c:	d90e      	bls.n	8006cac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2201      	movs	r2, #1
 8006c92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	8979      	ldrh	r1, [r7, #10]
 8006c9c:	4b52      	ldr	r3, [pc, #328]	@ (8006de8 <HAL_I2C_Mem_Read+0x22c>)
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 fb41 	bl	800732c <I2C_TransferConfig>
 8006caa:	e00f      	b.n	8006ccc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	8979      	ldrh	r1, [r7, #10]
 8006cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8006de8 <HAL_I2C_Mem_Read+0x22c>)
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 fb30 	bl	800732c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2104      	movs	r1, #4
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 f964 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e07c      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d02:	3b01      	subs	r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	3b01      	subs	r3, #1
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d034      	beq.n	8006d8c <HAL_I2C_Mem_Read+0x1d0>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d130      	bne.n	8006d8c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d30:	2200      	movs	r2, #0
 8006d32:	2180      	movs	r1, #128	@ 0x80
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 f935 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e04d      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	2bff      	cmp	r3, #255	@ 0xff
 8006d4c:	d90e      	bls.n	8006d6c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2201      	movs	r2, #1
 8006d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	8979      	ldrh	r1, [r7, #10]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 fae1 	bl	800732c <I2C_TransferConfig>
 8006d6a:	e00f      	b.n	8006d8c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	8979      	ldrh	r1, [r7, #10]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 fad0 	bl	800732c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d19a      	bne.n	8006ccc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 f9a2 	bl	80070e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e01a      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2220      	movs	r2, #32
 8006db0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6859      	ldr	r1, [r3, #4]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8006dec <HAL_I2C_Mem_Read+0x230>)
 8006dbe:	400b      	ands	r3, r1
 8006dc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e000      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006dde:	2302      	movs	r3, #2
  }
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	80002400 	.word	0x80002400
 8006dec:	fe00e800 	.word	0xfe00e800

08006df0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dfe:	b2db      	uxtb	r3, r3
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	4608      	mov	r0, r1
 8006e16:	4611      	mov	r1, r2
 8006e18:	461a      	mov	r2, r3
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	817b      	strh	r3, [r7, #10]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	813b      	strh	r3, [r7, #8]
 8006e22:	4613      	mov	r3, r2
 8006e24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	8979      	ldrh	r1, [r7, #10]
 8006e2c:	4b20      	ldr	r3, [pc, #128]	@ (8006eb0 <I2C_RequestMemoryWrite+0xa4>)
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 fa79 	bl	800732c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	69b9      	ldr	r1, [r7, #24]
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 f909 	bl	8007056 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e02c      	b.n	8006ea8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d105      	bne.n	8006e60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e54:	893b      	ldrh	r3, [r7, #8]
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e5e:	e015      	b.n	8006e8c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e60:	893b      	ldrh	r3, [r7, #8]
 8006e62:	0a1b      	lsrs	r3, r3, #8
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	69b9      	ldr	r1, [r7, #24]
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 f8ef 	bl	8007056 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e012      	b.n	8006ea8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e82:	893b      	ldrh	r3, [r7, #8]
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2200      	movs	r2, #0
 8006e94:	2180      	movs	r1, #128	@ 0x80
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 f884 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	80002000 	.word	0x80002000

08006eb4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af02      	add	r7, sp, #8
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	817b      	strh	r3, [r7, #10]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	813b      	strh	r3, [r7, #8]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006ece:	88fb      	ldrh	r3, [r7, #6]
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	8979      	ldrh	r1, [r7, #10]
 8006ed4:	4b20      	ldr	r3, [pc, #128]	@ (8006f58 <I2C_RequestMemoryRead+0xa4>)
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 fa26 	bl	800732c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ee0:	69fa      	ldr	r2, [r7, #28]
 8006ee2:	69b9      	ldr	r1, [r7, #24]
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 f8b6 	bl	8007056 <I2C_WaitOnTXISFlagUntilTimeout>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e02c      	b.n	8006f4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ef4:	88fb      	ldrh	r3, [r7, #6]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d105      	bne.n	8006f06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006efa:	893b      	ldrh	r3, [r7, #8]
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f04:	e015      	b.n	8006f32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f06:	893b      	ldrh	r3, [r7, #8]
 8006f08:	0a1b      	lsrs	r3, r3, #8
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f14:	69fa      	ldr	r2, [r7, #28]
 8006f16:	69b9      	ldr	r1, [r7, #24]
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f89c 	bl	8007056 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e012      	b.n	8006f4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f28:	893b      	ldrh	r3, [r7, #8]
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2140      	movs	r1, #64	@ 0x40
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f831 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	80002000 	.word	0x80002000

08006f5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d103      	bne.n	8006f7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2200      	movs	r2, #0
 8006f78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d007      	beq.n	8006f98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0201 	orr.w	r2, r2, #1
 8006f96:	619a      	str	r2, [r3, #24]
  }
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fb4:	e03b      	b.n	800702e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 f8d6 	bl	800716c <I2C_IsErrorOccurred>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e041      	b.n	800704e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd0:	d02d      	beq.n	800702e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd2:	f7fe fa3b 	bl	800544c <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d302      	bcc.n	8006fe8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d122      	bne.n	800702e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	bf0c      	ite	eq
 8006ff8:	2301      	moveq	r3, #1
 8006ffa:	2300      	movne	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	429a      	cmp	r2, r3
 8007004:	d113      	bne.n	800702e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800700a:	f043 0220 	orr.w	r2, r3, #32
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2220      	movs	r2, #32
 8007016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e00f      	b.n	800704e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	699a      	ldr	r2, [r3, #24]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4013      	ands	r3, r2
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	429a      	cmp	r2, r3
 800703c:	bf0c      	ite	eq
 800703e:	2301      	moveq	r3, #1
 8007040:	2300      	movne	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	429a      	cmp	r2, r3
 800704a:	d0b4      	beq.n	8006fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007062:	e033      	b.n	80070cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f87f 	bl	800716c <I2C_IsErrorOccurred>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e031      	b.n	80070dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707e:	d025      	beq.n	80070cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007080:	f7fe f9e4 	bl	800544c <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	429a      	cmp	r2, r3
 800708e:	d302      	bcc.n	8007096 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d11a      	bne.n	80070cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d013      	beq.n	80070cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a8:	f043 0220 	orr.w	r2, r3, #32
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e007      	b.n	80070dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d1c4      	bne.n	8007064 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070f0:	e02f      	b.n	8007152 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f838 	bl	800716c <I2C_IsErrorOccurred>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e02d      	b.n	8007162 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007106:	f7fe f9a1 	bl	800544c <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	429a      	cmp	r2, r3
 8007114:	d302      	bcc.n	800711c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d11a      	bne.n	8007152 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b20      	cmp	r3, #32
 8007128:	d013      	beq.n	8007152 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800712e:	f043 0220 	orr.w	r2, r3, #32
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2220      	movs	r2, #32
 800713a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e007      	b.n	8007162 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	f003 0320 	and.w	r3, r3, #32
 800715c:	2b20      	cmp	r3, #32
 800715e:	d1c8      	bne.n	80070f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08a      	sub	sp, #40	@ 0x28
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	f003 0310 	and.w	r3, r3, #16
 8007194:	2b00      	cmp	r3, #0
 8007196:	d068      	beq.n	800726a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2210      	movs	r2, #16
 800719e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80071a0:	e049      	b.n	8007236 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a8:	d045      	beq.n	8007236 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80071aa:	f7fe f94f 	bl	800544c <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d302      	bcc.n	80071c0 <I2C_IsErrorOccurred+0x54>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d13a      	bne.n	8007236 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071e2:	d121      	bne.n	8007228 <I2C_IsErrorOccurred+0xbc>
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071ea:	d01d      	beq.n	8007228 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80071ec:	7cfb      	ldrb	r3, [r7, #19]
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	d01a      	beq.n	8007228 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007200:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007202:	f7fe f923 	bl	800544c <HAL_GetTick>
 8007206:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007208:	e00e      	b.n	8007228 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800720a:	f7fe f91f 	bl	800544c <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	2b19      	cmp	r3, #25
 8007216:	d907      	bls.n	8007228 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007218:	6a3b      	ldr	r3, [r7, #32]
 800721a:	f043 0320 	orr.w	r3, r3, #32
 800721e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007226:	e006      	b.n	8007236 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b20      	cmp	r3, #32
 8007234:	d1e9      	bne.n	800720a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b20      	cmp	r3, #32
 8007242:	d003      	beq.n	800724c <I2C_IsErrorOccurred+0xe0>
 8007244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0aa      	beq.n	80071a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800724c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007250:	2b00      	cmp	r3, #0
 8007252:	d103      	bne.n	800725c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2220      	movs	r2, #32
 800725a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	f043 0304 	orr.w	r3, r3, #4
 8007262:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00b      	beq.n	8007294 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	f043 0301 	orr.w	r3, r3, #1
 8007282:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800728c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00b      	beq.n	80072b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	f043 0308 	orr.w	r3, r3, #8
 80072a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80072ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	f043 0302 	orr.w	r3, r3, #2
 80072c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80072d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01c      	beq.n	800731a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f7ff fe3b 	bl	8006f5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6859      	ldr	r1, [r3, #4]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007328 <I2C_IsErrorOccurred+0x1bc>)
 80072f2:	400b      	ands	r3, r1
 80072f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	431a      	orrs	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2220      	movs	r2, #32
 8007306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800731a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800731e:	4618      	mov	r0, r3
 8007320:	3728      	adds	r7, #40	@ 0x28
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	fe00e800 	.word	0xfe00e800

0800732c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	607b      	str	r3, [r7, #4]
 8007336:	460b      	mov	r3, r1
 8007338:	817b      	strh	r3, [r7, #10]
 800733a:	4613      	mov	r3, r2
 800733c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800733e:	897b      	ldrh	r3, [r7, #10]
 8007340:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007344:	7a7b      	ldrb	r3, [r7, #9]
 8007346:	041b      	lsls	r3, r3, #16
 8007348:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800734c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	4313      	orrs	r3, r2
 8007356:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800735a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	0d5b      	lsrs	r3, r3, #21
 8007366:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800736a:	4b08      	ldr	r3, [pc, #32]	@ (800738c <I2C_TransferConfig+0x60>)
 800736c:	430b      	orrs	r3, r1
 800736e:	43db      	mvns	r3, r3
 8007370:	ea02 0103 	and.w	r1, r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	430a      	orrs	r2, r1
 800737c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800737e:	bf00      	nop
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	03ff63ff 	.word	0x03ff63ff

08007390 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800739a:	4b23      	ldr	r3, [pc, #140]	@ (8007428 <HAL_PWREx_EnableOverDrive+0x98>)
 800739c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739e:	4a22      	ldr	r2, [pc, #136]	@ (8007428 <HAL_PWREx_EnableOverDrive+0x98>)
 80073a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80073a6:	4b20      	ldr	r3, [pc, #128]	@ (8007428 <HAL_PWREx_EnableOverDrive+0x98>)
 80073a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073ae:	603b      	str	r3, [r7, #0]
 80073b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80073b2:	4b1e      	ldr	r3, [pc, #120]	@ (800742c <HAL_PWREx_EnableOverDrive+0x9c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1d      	ldr	r2, [pc, #116]	@ (800742c <HAL_PWREx_EnableOverDrive+0x9c>)
 80073b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073be:	f7fe f845 	bl	800544c <HAL_GetTick>
 80073c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80073c4:	e009      	b.n	80073da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80073c6:	f7fe f841 	bl	800544c <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80073d4:	d901      	bls.n	80073da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e022      	b.n	8007420 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80073da:	4b14      	ldr	r3, [pc, #80]	@ (800742c <HAL_PWREx_EnableOverDrive+0x9c>)
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073e6:	d1ee      	bne.n	80073c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80073e8:	4b10      	ldr	r3, [pc, #64]	@ (800742c <HAL_PWREx_EnableOverDrive+0x9c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a0f      	ldr	r2, [pc, #60]	@ (800742c <HAL_PWREx_EnableOverDrive+0x9c>)
 80073ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073f4:	f7fe f82a 	bl	800544c <HAL_GetTick>
 80073f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073fa:	e009      	b.n	8007410 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80073fc:	f7fe f826 	bl	800544c <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800740a:	d901      	bls.n	8007410 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e007      	b.n	8007420 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007410:	4b06      	ldr	r3, [pc, #24]	@ (800742c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800741c:	d1ee      	bne.n	80073fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40023800 	.word	0x40023800
 800742c:	40007000 	.word	0x40007000

08007430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007438:	2300      	movs	r3, #0
 800743a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e291      	b.n	800796a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 8087 	beq.w	8007562 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007454:	4b96      	ldr	r3, [pc, #600]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f003 030c 	and.w	r3, r3, #12
 800745c:	2b04      	cmp	r3, #4
 800745e:	d00c      	beq.n	800747a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007460:	4b93      	ldr	r3, [pc, #588]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f003 030c 	and.w	r3, r3, #12
 8007468:	2b08      	cmp	r3, #8
 800746a:	d112      	bne.n	8007492 <HAL_RCC_OscConfig+0x62>
 800746c:	4b90      	ldr	r3, [pc, #576]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007474:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007478:	d10b      	bne.n	8007492 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800747a:	4b8d      	ldr	r3, [pc, #564]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d06c      	beq.n	8007560 <HAL_RCC_OscConfig+0x130>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d168      	bne.n	8007560 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e26b      	b.n	800796a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800749a:	d106      	bne.n	80074aa <HAL_RCC_OscConfig+0x7a>
 800749c:	4b84      	ldr	r3, [pc, #528]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a83      	ldr	r2, [pc, #524]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80074a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074a6:	6013      	str	r3, [r2, #0]
 80074a8:	e02e      	b.n	8007508 <HAL_RCC_OscConfig+0xd8>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10c      	bne.n	80074cc <HAL_RCC_OscConfig+0x9c>
 80074b2:	4b7f      	ldr	r3, [pc, #508]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a7e      	ldr	r2, [pc, #504]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80074b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	4b7c      	ldr	r3, [pc, #496]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a7b      	ldr	r2, [pc, #492]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80074c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	e01d      	b.n	8007508 <HAL_RCC_OscConfig+0xd8>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074d4:	d10c      	bne.n	80074f0 <HAL_RCC_OscConfig+0xc0>
 80074d6:	4b76      	ldr	r3, [pc, #472]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a75      	ldr	r2, [pc, #468]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80074dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	4b73      	ldr	r3, [pc, #460]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a72      	ldr	r2, [pc, #456]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80074e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	e00b      	b.n	8007508 <HAL_RCC_OscConfig+0xd8>
 80074f0:	4b6f      	ldr	r3, [pc, #444]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a6e      	ldr	r2, [pc, #440]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80074f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074fa:	6013      	str	r3, [r2, #0]
 80074fc:	4b6c      	ldr	r3, [pc, #432]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a6b      	ldr	r2, [pc, #428]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 8007502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d013      	beq.n	8007538 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007510:	f7fd ff9c 	bl	800544c <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007516:	e008      	b.n	800752a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007518:	f7fd ff98 	bl	800544c <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b64      	cmp	r3, #100	@ 0x64
 8007524:	d901      	bls.n	800752a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e21f      	b.n	800796a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800752a:	4b61      	ldr	r3, [pc, #388]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0f0      	beq.n	8007518 <HAL_RCC_OscConfig+0xe8>
 8007536:	e014      	b.n	8007562 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007538:	f7fd ff88 	bl	800544c <HAL_GetTick>
 800753c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800753e:	e008      	b.n	8007552 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007540:	f7fd ff84 	bl	800544c <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b64      	cmp	r3, #100	@ 0x64
 800754c:	d901      	bls.n	8007552 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e20b      	b.n	800796a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007552:	4b57      	ldr	r3, [pc, #348]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f0      	bne.n	8007540 <HAL_RCC_OscConfig+0x110>
 800755e:	e000      	b.n	8007562 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0302 	and.w	r3, r3, #2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d069      	beq.n	8007642 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800756e:	4b50      	ldr	r3, [pc, #320]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 030c 	and.w	r3, r3, #12
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00b      	beq.n	8007592 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800757a:	4b4d      	ldr	r3, [pc, #308]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 030c 	and.w	r3, r3, #12
 8007582:	2b08      	cmp	r3, #8
 8007584:	d11c      	bne.n	80075c0 <HAL_RCC_OscConfig+0x190>
 8007586:	4b4a      	ldr	r3, [pc, #296]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d116      	bne.n	80075c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007592:	4b47      	ldr	r3, [pc, #284]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d005      	beq.n	80075aa <HAL_RCC_OscConfig+0x17a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d001      	beq.n	80075aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e1df      	b.n	800796a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075aa:	4b41      	ldr	r3, [pc, #260]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	493d      	ldr	r1, [pc, #244]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075be:	e040      	b.n	8007642 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d023      	beq.n	8007610 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075c8:	4b39      	ldr	r3, [pc, #228]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a38      	ldr	r2, [pc, #224]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80075ce:	f043 0301 	orr.w	r3, r3, #1
 80075d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d4:	f7fd ff3a 	bl	800544c <HAL_GetTick>
 80075d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075da:	e008      	b.n	80075ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075dc:	f7fd ff36 	bl	800544c <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d901      	bls.n	80075ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e1bd      	b.n	800796a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075ee:	4b30      	ldr	r3, [pc, #192]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0f0      	beq.n	80075dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075fa:	4b2d      	ldr	r3, [pc, #180]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	4929      	ldr	r1, [pc, #164]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 800760a:	4313      	orrs	r3, r2
 800760c:	600b      	str	r3, [r1, #0]
 800760e:	e018      	b.n	8007642 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007610:	4b27      	ldr	r3, [pc, #156]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a26      	ldr	r2, [pc, #152]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 8007616:	f023 0301 	bic.w	r3, r3, #1
 800761a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800761c:	f7fd ff16 	bl	800544c <HAL_GetTick>
 8007620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007622:	e008      	b.n	8007636 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007624:	f7fd ff12 	bl	800544c <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b02      	cmp	r3, #2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e199      	b.n	800796a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007636:	4b1e      	ldr	r3, [pc, #120]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1f0      	bne.n	8007624 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0308 	and.w	r3, r3, #8
 800764a:	2b00      	cmp	r3, #0
 800764c:	d038      	beq.n	80076c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d019      	beq.n	800768a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007656:	4b16      	ldr	r3, [pc, #88]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 8007658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800765a:	4a15      	ldr	r2, [pc, #84]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 800765c:	f043 0301 	orr.w	r3, r3, #1
 8007660:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007662:	f7fd fef3 	bl	800544c <HAL_GetTick>
 8007666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007668:	e008      	b.n	800767c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800766a:	f7fd feef 	bl	800544c <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	2b02      	cmp	r3, #2
 8007676:	d901      	bls.n	800767c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e176      	b.n	800796a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800767c:	4b0c      	ldr	r3, [pc, #48]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 800767e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0f0      	beq.n	800766a <HAL_RCC_OscConfig+0x23a>
 8007688:	e01a      	b.n	80076c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800768a:	4b09      	ldr	r3, [pc, #36]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 800768c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800768e:	4a08      	ldr	r2, [pc, #32]	@ (80076b0 <HAL_RCC_OscConfig+0x280>)
 8007690:	f023 0301 	bic.w	r3, r3, #1
 8007694:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007696:	f7fd fed9 	bl	800544c <HAL_GetTick>
 800769a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800769c:	e00a      	b.n	80076b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800769e:	f7fd fed5 	bl	800544c <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d903      	bls.n	80076b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e15c      	b.n	800796a <HAL_RCC_OscConfig+0x53a>
 80076b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076b4:	4b91      	ldr	r3, [pc, #580]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 80076b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1ee      	bne.n	800769e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 80a4 	beq.w	8007816 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076ce:	4b8b      	ldr	r3, [pc, #556]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 80076d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10d      	bne.n	80076f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80076da:	4b88      	ldr	r3, [pc, #544]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 80076dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076de:	4a87      	ldr	r2, [pc, #540]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 80076e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80076e6:	4b85      	ldr	r3, [pc, #532]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 80076e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076ee:	60bb      	str	r3, [r7, #8]
 80076f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076f2:	2301      	movs	r3, #1
 80076f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076f6:	4b82      	ldr	r3, [pc, #520]	@ (8007900 <HAL_RCC_OscConfig+0x4d0>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d118      	bne.n	8007734 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007702:	4b7f      	ldr	r3, [pc, #508]	@ (8007900 <HAL_RCC_OscConfig+0x4d0>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a7e      	ldr	r2, [pc, #504]	@ (8007900 <HAL_RCC_OscConfig+0x4d0>)
 8007708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800770c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800770e:	f7fd fe9d 	bl	800544c <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007714:	e008      	b.n	8007728 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007716:	f7fd fe99 	bl	800544c <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b64      	cmp	r3, #100	@ 0x64
 8007722:	d901      	bls.n	8007728 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e120      	b.n	800796a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007728:	4b75      	ldr	r3, [pc, #468]	@ (8007900 <HAL_RCC_OscConfig+0x4d0>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0f0      	beq.n	8007716 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d106      	bne.n	800774a <HAL_RCC_OscConfig+0x31a>
 800773c:	4b6f      	ldr	r3, [pc, #444]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 800773e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007740:	4a6e      	ldr	r2, [pc, #440]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 8007742:	f043 0301 	orr.w	r3, r3, #1
 8007746:	6713      	str	r3, [r2, #112]	@ 0x70
 8007748:	e02d      	b.n	80077a6 <HAL_RCC_OscConfig+0x376>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10c      	bne.n	800776c <HAL_RCC_OscConfig+0x33c>
 8007752:	4b6a      	ldr	r3, [pc, #424]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 8007754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007756:	4a69      	ldr	r2, [pc, #420]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 8007758:	f023 0301 	bic.w	r3, r3, #1
 800775c:	6713      	str	r3, [r2, #112]	@ 0x70
 800775e:	4b67      	ldr	r3, [pc, #412]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 8007760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007762:	4a66      	ldr	r2, [pc, #408]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 8007764:	f023 0304 	bic.w	r3, r3, #4
 8007768:	6713      	str	r3, [r2, #112]	@ 0x70
 800776a:	e01c      	b.n	80077a6 <HAL_RCC_OscConfig+0x376>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	2b05      	cmp	r3, #5
 8007772:	d10c      	bne.n	800778e <HAL_RCC_OscConfig+0x35e>
 8007774:	4b61      	ldr	r3, [pc, #388]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 8007776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007778:	4a60      	ldr	r2, [pc, #384]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 800777a:	f043 0304 	orr.w	r3, r3, #4
 800777e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007780:	4b5e      	ldr	r3, [pc, #376]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 8007782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007784:	4a5d      	ldr	r2, [pc, #372]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 8007786:	f043 0301 	orr.w	r3, r3, #1
 800778a:	6713      	str	r3, [r2, #112]	@ 0x70
 800778c:	e00b      	b.n	80077a6 <HAL_RCC_OscConfig+0x376>
 800778e:	4b5b      	ldr	r3, [pc, #364]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 8007790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007792:	4a5a      	ldr	r2, [pc, #360]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 8007794:	f023 0301 	bic.w	r3, r3, #1
 8007798:	6713      	str	r3, [r2, #112]	@ 0x70
 800779a:	4b58      	ldr	r3, [pc, #352]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 800779c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800779e:	4a57      	ldr	r2, [pc, #348]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 80077a0:	f023 0304 	bic.w	r3, r3, #4
 80077a4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d015      	beq.n	80077da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ae:	f7fd fe4d 	bl	800544c <HAL_GetTick>
 80077b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077b4:	e00a      	b.n	80077cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077b6:	f7fd fe49 	bl	800544c <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d901      	bls.n	80077cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e0ce      	b.n	800796a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077cc:	4b4b      	ldr	r3, [pc, #300]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 80077ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d0ee      	beq.n	80077b6 <HAL_RCC_OscConfig+0x386>
 80077d8:	e014      	b.n	8007804 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077da:	f7fd fe37 	bl	800544c <HAL_GetTick>
 80077de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077e0:	e00a      	b.n	80077f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077e2:	f7fd fe33 	bl	800544c <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d901      	bls.n	80077f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e0b8      	b.n	800796a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077f8:	4b40      	ldr	r3, [pc, #256]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 80077fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1ee      	bne.n	80077e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d105      	bne.n	8007816 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800780a:	4b3c      	ldr	r3, [pc, #240]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 800780c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780e:	4a3b      	ldr	r2, [pc, #236]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 8007810:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007814:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 80a4 	beq.w	8007968 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007820:	4b36      	ldr	r3, [pc, #216]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f003 030c 	and.w	r3, r3, #12
 8007828:	2b08      	cmp	r3, #8
 800782a:	d06b      	beq.n	8007904 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	2b02      	cmp	r3, #2
 8007832:	d149      	bne.n	80078c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007834:	4b31      	ldr	r3, [pc, #196]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a30      	ldr	r2, [pc, #192]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 800783a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800783e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007840:	f7fd fe04 	bl	800544c <HAL_GetTick>
 8007844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007846:	e008      	b.n	800785a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007848:	f7fd fe00 	bl	800544c <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	2b02      	cmp	r3, #2
 8007854:	d901      	bls.n	800785a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e087      	b.n	800796a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800785a:	4b28      	ldr	r3, [pc, #160]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1f0      	bne.n	8007848 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	69da      	ldr	r2, [r3, #28]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007874:	019b      	lsls	r3, r3, #6
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787c:	085b      	lsrs	r3, r3, #1
 800787e:	3b01      	subs	r3, #1
 8007880:	041b      	lsls	r3, r3, #16
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007888:	061b      	lsls	r3, r3, #24
 800788a:	4313      	orrs	r3, r2
 800788c:	4a1b      	ldr	r2, [pc, #108]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 800788e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007892:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007894:	4b19      	ldr	r3, [pc, #100]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a18      	ldr	r2, [pc, #96]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 800789a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800789e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a0:	f7fd fdd4 	bl	800544c <HAL_GetTick>
 80078a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078a6:	e008      	b.n	80078ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078a8:	f7fd fdd0 	bl	800544c <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d901      	bls.n	80078ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e057      	b.n	800796a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078ba:	4b10      	ldr	r3, [pc, #64]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0f0      	beq.n	80078a8 <HAL_RCC_OscConfig+0x478>
 80078c6:	e04f      	b.n	8007968 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078c8:	4b0c      	ldr	r3, [pc, #48]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a0b      	ldr	r2, [pc, #44]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 80078ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d4:	f7fd fdba 	bl	800544c <HAL_GetTick>
 80078d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078da:	e008      	b.n	80078ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078dc:	f7fd fdb6 	bl	800544c <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e03d      	b.n	800796a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ee:	4b03      	ldr	r3, [pc, #12]	@ (80078fc <HAL_RCC_OscConfig+0x4cc>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1f0      	bne.n	80078dc <HAL_RCC_OscConfig+0x4ac>
 80078fa:	e035      	b.n	8007968 <HAL_RCC_OscConfig+0x538>
 80078fc:	40023800 	.word	0x40023800
 8007900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007904:	4b1b      	ldr	r3, [pc, #108]	@ (8007974 <HAL_RCC_OscConfig+0x544>)
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d028      	beq.n	8007964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800791c:	429a      	cmp	r2, r3
 800791e:	d121      	bne.n	8007964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800792a:	429a      	cmp	r2, r3
 800792c:	d11a      	bne.n	8007964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007934:	4013      	ands	r3, r2
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800793a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800793c:	4293      	cmp	r3, r2
 800793e:	d111      	bne.n	8007964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794a:	085b      	lsrs	r3, r3, #1
 800794c:	3b01      	subs	r3, #1
 800794e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007950:	429a      	cmp	r2, r3
 8007952:	d107      	bne.n	8007964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007960:	429a      	cmp	r2, r3
 8007962:	d001      	beq.n	8007968 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e000      	b.n	800796a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	40023800 	.word	0x40023800

08007978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e0d0      	b.n	8007b32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007990:	4b6a      	ldr	r3, [pc, #424]	@ (8007b3c <HAL_RCC_ClockConfig+0x1c4>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	429a      	cmp	r2, r3
 800799c:	d910      	bls.n	80079c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800799e:	4b67      	ldr	r3, [pc, #412]	@ (8007b3c <HAL_RCC_ClockConfig+0x1c4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f023 020f 	bic.w	r2, r3, #15
 80079a6:	4965      	ldr	r1, [pc, #404]	@ (8007b3c <HAL_RCC_ClockConfig+0x1c4>)
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ae:	4b63      	ldr	r3, [pc, #396]	@ (8007b3c <HAL_RCC_ClockConfig+0x1c4>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 030f 	and.w	r3, r3, #15
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d001      	beq.n	80079c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e0b8      	b.n	8007b32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d020      	beq.n	8007a0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d005      	beq.n	80079e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079d8:	4b59      	ldr	r3, [pc, #356]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	4a58      	ldr	r2, [pc, #352]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 80079de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80079e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0308 	and.w	r3, r3, #8
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079f0:	4b53      	ldr	r3, [pc, #332]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	4a52      	ldr	r2, [pc, #328]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 80079f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80079fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079fc:	4b50      	ldr	r3, [pc, #320]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	494d      	ldr	r1, [pc, #308]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d040      	beq.n	8007a9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d107      	bne.n	8007a32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a22:	4b47      	ldr	r3, [pc, #284]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d115      	bne.n	8007a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e07f      	b.n	8007b32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d107      	bne.n	8007a4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a3a:	4b41      	ldr	r3, [pc, #260]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d109      	bne.n	8007a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e073      	b.n	8007b32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0302 	and.w	r3, r3, #2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e06b      	b.n	8007b32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a5a:	4b39      	ldr	r3, [pc, #228]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f023 0203 	bic.w	r2, r3, #3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	4936      	ldr	r1, [pc, #216]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a6c:	f7fd fcee 	bl	800544c <HAL_GetTick>
 8007a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a72:	e00a      	b.n	8007a8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a74:	f7fd fcea 	bl	800544c <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d901      	bls.n	8007a8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e053      	b.n	8007b32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f003 020c 	and.w	r2, r3, #12
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d1eb      	bne.n	8007a74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a9c:	4b27      	ldr	r3, [pc, #156]	@ (8007b3c <HAL_RCC_ClockConfig+0x1c4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 030f 	and.w	r3, r3, #15
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d210      	bcs.n	8007acc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aaa:	4b24      	ldr	r3, [pc, #144]	@ (8007b3c <HAL_RCC_ClockConfig+0x1c4>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f023 020f 	bic.w	r2, r3, #15
 8007ab2:	4922      	ldr	r1, [pc, #136]	@ (8007b3c <HAL_RCC_ClockConfig+0x1c4>)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aba:	4b20      	ldr	r3, [pc, #128]	@ (8007b3c <HAL_RCC_ClockConfig+0x1c4>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d001      	beq.n	8007acc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e032      	b.n	8007b32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d008      	beq.n	8007aea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ad8:	4b19      	ldr	r3, [pc, #100]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	4916      	ldr	r1, [pc, #88]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0308 	and.w	r3, r3, #8
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d009      	beq.n	8007b0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007af6:	4b12      	ldr	r3, [pc, #72]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	490e      	ldr	r1, [pc, #56]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b0a:	f000 f821 	bl	8007b50 <HAL_RCC_GetSysClockFreq>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	4b0b      	ldr	r3, [pc, #44]	@ (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	091b      	lsrs	r3, r3, #4
 8007b16:	f003 030f 	and.w	r3, r3, #15
 8007b1a:	490a      	ldr	r1, [pc, #40]	@ (8007b44 <HAL_RCC_ClockConfig+0x1cc>)
 8007b1c:	5ccb      	ldrb	r3, [r1, r3]
 8007b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b22:	4a09      	ldr	r2, [pc, #36]	@ (8007b48 <HAL_RCC_ClockConfig+0x1d0>)
 8007b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007b26:	4b09      	ldr	r3, [pc, #36]	@ (8007b4c <HAL_RCC_ClockConfig+0x1d4>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fd fc4a 	bl	80053c4 <HAL_InitTick>

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	40023c00 	.word	0x40023c00
 8007b40:	40023800 	.word	0x40023800
 8007b44:	080188c0 	.word	0x080188c0
 8007b48:	20000018 	.word	0x20000018
 8007b4c:	20000050 	.word	0x20000050

08007b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b54:	b090      	sub	sp, #64	@ 0x40
 8007b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b60:	2300      	movs	r3, #0
 8007b62:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b68:	4b59      	ldr	r3, [pc, #356]	@ (8007cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f003 030c 	and.w	r3, r3, #12
 8007b70:	2b08      	cmp	r3, #8
 8007b72:	d00d      	beq.n	8007b90 <HAL_RCC_GetSysClockFreq+0x40>
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	f200 80a1 	bhi.w	8007cbc <HAL_RCC_GetSysClockFreq+0x16c>
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <HAL_RCC_GetSysClockFreq+0x34>
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d003      	beq.n	8007b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8007b82:	e09b      	b.n	8007cbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b84:	4b53      	ldr	r3, [pc, #332]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007b88:	e09b      	b.n	8007cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b8a:	4b53      	ldr	r3, [pc, #332]	@ (8007cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007b8e:	e098      	b.n	8007cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b90:	4b4f      	ldr	r3, [pc, #316]	@ (8007cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b98:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8007cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d028      	beq.n	8007bf8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8007cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	099b      	lsrs	r3, r3, #6
 8007bac:	2200      	movs	r2, #0
 8007bae:	623b      	str	r3, [r7, #32]
 8007bb0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4b47      	ldr	r3, [pc, #284]	@ (8007cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007bbc:	fb03 f201 	mul.w	r2, r3, r1
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	fb00 f303 	mul.w	r3, r0, r3
 8007bc6:	4413      	add	r3, r2
 8007bc8:	4a43      	ldr	r2, [pc, #268]	@ (8007cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007bca:	fba0 1202 	umull	r1, r2, r0, r2
 8007bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bd0:	460a      	mov	r2, r1
 8007bd2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007bd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bd6:	4413      	add	r3, r2
 8007bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bdc:	2200      	movs	r2, #0
 8007bde:	61bb      	str	r3, [r7, #24]
 8007be0:	61fa      	str	r2, [r7, #28]
 8007be2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007be6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007bea:	f7f9 f85d 	bl	8000ca8 <__aeabi_uldivmod>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bf6:	e053      	b.n	8007ca0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bf8:	4b35      	ldr	r3, [pc, #212]	@ (8007cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	099b      	lsrs	r3, r3, #6
 8007bfe:	2200      	movs	r2, #0
 8007c00:	613b      	str	r3, [r7, #16]
 8007c02:	617a      	str	r2, [r7, #20]
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007c0a:	f04f 0b00 	mov.w	fp, #0
 8007c0e:	4652      	mov	r2, sl
 8007c10:	465b      	mov	r3, fp
 8007c12:	f04f 0000 	mov.w	r0, #0
 8007c16:	f04f 0100 	mov.w	r1, #0
 8007c1a:	0159      	lsls	r1, r3, #5
 8007c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c20:	0150      	lsls	r0, r2, #5
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	ebb2 080a 	subs.w	r8, r2, sl
 8007c2a:	eb63 090b 	sbc.w	r9, r3, fp
 8007c2e:	f04f 0200 	mov.w	r2, #0
 8007c32:	f04f 0300 	mov.w	r3, #0
 8007c36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007c3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007c3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007c42:	ebb2 0408 	subs.w	r4, r2, r8
 8007c46:	eb63 0509 	sbc.w	r5, r3, r9
 8007c4a:	f04f 0200 	mov.w	r2, #0
 8007c4e:	f04f 0300 	mov.w	r3, #0
 8007c52:	00eb      	lsls	r3, r5, #3
 8007c54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c58:	00e2      	lsls	r2, r4, #3
 8007c5a:	4614      	mov	r4, r2
 8007c5c:	461d      	mov	r5, r3
 8007c5e:	eb14 030a 	adds.w	r3, r4, sl
 8007c62:	603b      	str	r3, [r7, #0]
 8007c64:	eb45 030b 	adc.w	r3, r5, fp
 8007c68:	607b      	str	r3, [r7, #4]
 8007c6a:	f04f 0200 	mov.w	r2, #0
 8007c6e:	f04f 0300 	mov.w	r3, #0
 8007c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c76:	4629      	mov	r1, r5
 8007c78:	028b      	lsls	r3, r1, #10
 8007c7a:	4621      	mov	r1, r4
 8007c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c80:	4621      	mov	r1, r4
 8007c82:	028a      	lsls	r2, r1, #10
 8007c84:	4610      	mov	r0, r2
 8007c86:	4619      	mov	r1, r3
 8007c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	60bb      	str	r3, [r7, #8]
 8007c8e:	60fa      	str	r2, [r7, #12]
 8007c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c94:	f7f9 f808 	bl	8000ca8 <__aeabi_uldivmod>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	0c1b      	lsrs	r3, r3, #16
 8007ca6:	f003 0303 	and.w	r3, r3, #3
 8007caa:	3301      	adds	r3, #1
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007cb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007cba:	e002      	b.n	8007cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007cbc:	4b05      	ldr	r3, [pc, #20]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3740      	adds	r7, #64	@ 0x40
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cce:	bf00      	nop
 8007cd0:	40023800 	.word	0x40023800
 8007cd4:	00f42400 	.word	0x00f42400
 8007cd8:	017d7840 	.word	0x017d7840

08007cdc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ce0:	4b03      	ldr	r3, [pc, #12]	@ (8007cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	20000018 	.word	0x20000018

08007cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007cf8:	f7ff fff0 	bl	8007cdc <HAL_RCC_GetHCLKFreq>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	4b05      	ldr	r3, [pc, #20]	@ (8007d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	0a9b      	lsrs	r3, r3, #10
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	4903      	ldr	r1, [pc, #12]	@ (8007d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d0a:	5ccb      	ldrb	r3, [r1, r3]
 8007d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	40023800 	.word	0x40023800
 8007d18:	080188d0 	.word	0x080188d0

08007d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d20:	f7ff ffdc 	bl	8007cdc <HAL_RCC_GetHCLKFreq>
 8007d24:	4602      	mov	r2, r0
 8007d26:	4b05      	ldr	r3, [pc, #20]	@ (8007d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	0b5b      	lsrs	r3, r3, #13
 8007d2c:	f003 0307 	and.w	r3, r3, #7
 8007d30:	4903      	ldr	r1, [pc, #12]	@ (8007d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d32:	5ccb      	ldrb	r3, [r1, r3]
 8007d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	40023800 	.word	0x40023800
 8007d40:	080188d0 	.word	0x080188d0

08007d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d012      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007d6c:	4b69      	ldr	r3, [pc, #420]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	4a68      	ldr	r2, [pc, #416]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d72:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007d76:	6093      	str	r3, [r2, #8]
 8007d78:	4b66      	ldr	r3, [pc, #408]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d80:	4964      	ldr	r1, [pc, #400]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d017      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007da4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dac:	4959      	ldr	r1, [pc, #356]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dbc:	d101      	bne.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d017      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007dda:	4b4e      	ldr	r3, [pc, #312]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007de0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de8:	494a      	ldr	r1, [pc, #296]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007df8:	d101      	bne.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007e06:	2301      	movs	r3, #1
 8007e08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007e16:	2301      	movs	r3, #1
 8007e18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 808b 	beq.w	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e28:	4b3a      	ldr	r3, [pc, #232]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e2c:	4a39      	ldr	r2, [pc, #228]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e34:	4b37      	ldr	r3, [pc, #220]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e3c:	60bb      	str	r3, [r7, #8]
 8007e3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007e40:	4b35      	ldr	r3, [pc, #212]	@ (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a34      	ldr	r2, [pc, #208]	@ (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e4c:	f7fd fafe 	bl	800544c <HAL_GetTick>
 8007e50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007e52:	e008      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e54:	f7fd fafa 	bl	800544c <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b64      	cmp	r3, #100	@ 0x64
 8007e60:	d901      	bls.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e357      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007e66:	4b2c      	ldr	r3, [pc, #176]	@ (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0f0      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007e72:	4b28      	ldr	r3, [pc, #160]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d035      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e8a:	693a      	ldr	r2, [r7, #16]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d02e      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e90:	4b20      	ldr	r3, [pc, #128]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ea4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007eb0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007eb2:	4a18      	ldr	r2, [pc, #96]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007eb8:	4b16      	ldr	r3, [pc, #88]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d114      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec4:	f7fd fac2 	bl	800544c <HAL_GetTick>
 8007ec8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eca:	e00a      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ecc:	f7fd fabe 	bl	800544c <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e319      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0ee      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ef6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007efa:	d111      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007efc:	4b05      	ldr	r3, [pc, #20]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007f08:	4b04      	ldr	r3, [pc, #16]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007f0a:	400b      	ands	r3, r1
 8007f0c:	4901      	ldr	r1, [pc, #4]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	608b      	str	r3, [r1, #8]
 8007f12:	e00b      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007f14:	40023800 	.word	0x40023800
 8007f18:	40007000 	.word	0x40007000
 8007f1c:	0ffffcff 	.word	0x0ffffcff
 8007f20:	4baa      	ldr	r3, [pc, #680]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	4aa9      	ldr	r2, [pc, #676]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f26:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007f2a:	6093      	str	r3, [r2, #8]
 8007f2c:	4ba7      	ldr	r3, [pc, #668]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f38:	49a4      	ldr	r1, [pc, #656]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0310 	and.w	r3, r3, #16
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d010      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f4a:	4ba0      	ldr	r3, [pc, #640]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f50:	4a9e      	ldr	r2, [pc, #632]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007f5a:	4b9c      	ldr	r3, [pc, #624]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f64:	4999      	ldr	r1, [pc, #612]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00a      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f78:	4b94      	ldr	r3, [pc, #592]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f86:	4991      	ldr	r1, [pc, #580]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f9a:	4b8c      	ldr	r3, [pc, #560]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fa0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fa8:	4988      	ldr	r1, [pc, #544]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00a      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007fbc:	4b83      	ldr	r3, [pc, #524]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fca:	4980      	ldr	r1, [pc, #512]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007fde:	4b7b      	ldr	r3, [pc, #492]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fe4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fec:	4977      	ldr	r1, [pc, #476]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00a      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008000:	4b72      	ldr	r3, [pc, #456]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008006:	f023 0203 	bic.w	r2, r3, #3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800800e:	496f      	ldr	r1, [pc, #444]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008010:	4313      	orrs	r3, r2
 8008012:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00a      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008022:	4b6a      	ldr	r3, [pc, #424]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008028:	f023 020c 	bic.w	r2, r3, #12
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008030:	4966      	ldr	r1, [pc, #408]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008032:	4313      	orrs	r3, r2
 8008034:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00a      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008044:	4b61      	ldr	r3, [pc, #388]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800804a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008052:	495e      	ldr	r1, [pc, #376]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008054:	4313      	orrs	r3, r2
 8008056:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008066:	4b59      	ldr	r3, [pc, #356]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800806c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008074:	4955      	ldr	r1, [pc, #340]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008076:	4313      	orrs	r3, r2
 8008078:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00a      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008088:	4b50      	ldr	r3, [pc, #320]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800808a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800808e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008096:	494d      	ldr	r1, [pc, #308]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008098:	4313      	orrs	r3, r2
 800809a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00a      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80080aa:	4b48      	ldr	r3, [pc, #288]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b8:	4944      	ldr	r1, [pc, #272]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00a      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80080cc:	4b3f      	ldr	r3, [pc, #252]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080da:	493c      	ldr	r1, [pc, #240]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80080ee:	4b37      	ldr	r3, [pc, #220]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080fc:	4933      	ldr	r1, [pc, #204]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00a      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008110:	4b2e      	ldr	r3, [pc, #184]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008116:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800811e:	492b      	ldr	r1, [pc, #172]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008120:	4313      	orrs	r3, r2
 8008122:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d011      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008132:	4b26      	ldr	r3, [pc, #152]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008138:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008140:	4922      	ldr	r1, [pc, #136]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008142:	4313      	orrs	r3, r2
 8008144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800814c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008150:	d101      	bne.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008152:	2301      	movs	r3, #1
 8008154:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0308 	and.w	r3, r3, #8
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008162:	2301      	movs	r3, #1
 8008164:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008172:	4b16      	ldr	r3, [pc, #88]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008178:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008180:	4912      	ldr	r1, [pc, #72]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008182:	4313      	orrs	r3, r2
 8008184:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008194:	4b0d      	ldr	r3, [pc, #52]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081a4:	4909      	ldr	r1, [pc, #36]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d006      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 80d9 	beq.w	8008372 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80081c0:	4b02      	ldr	r3, [pc, #8]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a01      	ldr	r2, [pc, #4]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081ca:	e001      	b.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80081cc:	40023800 	.word	0x40023800
 80081d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081d2:	f7fd f93b 	bl	800544c <HAL_GetTick>
 80081d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081d8:	e008      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80081da:	f7fd f937 	bl	800544c <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	2b64      	cmp	r3, #100	@ 0x64
 80081e6:	d901      	bls.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e194      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081ec:	4b6c      	ldr	r3, [pc, #432]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1f0      	bne.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	2b00      	cmp	r3, #0
 8008202:	d021      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008208:	2b00      	cmp	r3, #0
 800820a:	d11d      	bne.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800820c:	4b64      	ldr	r3, [pc, #400]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800820e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008212:	0c1b      	lsrs	r3, r3, #16
 8008214:	f003 0303 	and.w	r3, r3, #3
 8008218:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800821a:	4b61      	ldr	r3, [pc, #388]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800821c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008220:	0e1b      	lsrs	r3, r3, #24
 8008222:	f003 030f 	and.w	r3, r3, #15
 8008226:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	019a      	lsls	r2, r3, #6
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	041b      	lsls	r3, r3, #16
 8008232:	431a      	orrs	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	061b      	lsls	r3, r3, #24
 8008238:	431a      	orrs	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	071b      	lsls	r3, r3, #28
 8008240:	4957      	ldr	r1, [pc, #348]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008242:	4313      	orrs	r3, r2
 8008244:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d004      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008258:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800825c:	d00a      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008266:	2b00      	cmp	r3, #0
 8008268:	d02e      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008272:	d129      	bne.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008274:	4b4a      	ldr	r3, [pc, #296]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008276:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800827a:	0c1b      	lsrs	r3, r3, #16
 800827c:	f003 0303 	and.w	r3, r3, #3
 8008280:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008282:	4b47      	ldr	r3, [pc, #284]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008288:	0f1b      	lsrs	r3, r3, #28
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	019a      	lsls	r2, r3, #6
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	041b      	lsls	r3, r3, #16
 800829a:	431a      	orrs	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	061b      	lsls	r3, r3, #24
 80082a2:	431a      	orrs	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	071b      	lsls	r3, r3, #28
 80082a8:	493d      	ldr	r1, [pc, #244]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80082b0:	4b3b      	ldr	r3, [pc, #236]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082b6:	f023 021f 	bic.w	r2, r3, #31
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082be:	3b01      	subs	r3, #1
 80082c0:	4937      	ldr	r1, [pc, #220]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01d      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80082d4:	4b32      	ldr	r3, [pc, #200]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082da:	0e1b      	lsrs	r3, r3, #24
 80082dc:	f003 030f 	and.w	r3, r3, #15
 80082e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80082e2:	4b2f      	ldr	r3, [pc, #188]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082e8:	0f1b      	lsrs	r3, r3, #28
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	019a      	lsls	r2, r3, #6
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	041b      	lsls	r3, r3, #16
 80082fc:	431a      	orrs	r2, r3
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	061b      	lsls	r3, r3, #24
 8008302:	431a      	orrs	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	071b      	lsls	r3, r3, #28
 8008308:	4925      	ldr	r1, [pc, #148]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800830a:	4313      	orrs	r3, r2
 800830c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008318:	2b00      	cmp	r3, #0
 800831a:	d011      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	019a      	lsls	r2, r3, #6
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	041b      	lsls	r3, r3, #16
 8008328:	431a      	orrs	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	061b      	lsls	r3, r3, #24
 8008330:	431a      	orrs	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	071b      	lsls	r3, r3, #28
 8008338:	4919      	ldr	r1, [pc, #100]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800833a:	4313      	orrs	r3, r2
 800833c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008340:	4b17      	ldr	r3, [pc, #92]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a16      	ldr	r2, [pc, #88]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008346:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800834a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800834c:	f7fd f87e 	bl	800544c <HAL_GetTick>
 8008350:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008352:	e008      	b.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008354:	f7fd f87a 	bl	800544c <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	2b64      	cmp	r3, #100	@ 0x64
 8008360:	d901      	bls.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e0d7      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008366:	4b0e      	ldr	r3, [pc, #56]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d0f0      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	2b01      	cmp	r3, #1
 8008376:	f040 80cd 	bne.w	8008514 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800837a:	4b09      	ldr	r3, [pc, #36]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a08      	ldr	r2, [pc, #32]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008380:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008386:	f7fd f861 	bl	800544c <HAL_GetTick>
 800838a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800838c:	e00a      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800838e:	f7fd f85d 	bl	800544c <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	2b64      	cmp	r3, #100	@ 0x64
 800839a:	d903      	bls.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e0ba      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80083a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80083a4:	4b5e      	ldr	r3, [pc, #376]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083b0:	d0ed      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d009      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d02e      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d12a      	bne.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80083da:	4b51      	ldr	r3, [pc, #324]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e0:	0c1b      	lsrs	r3, r3, #16
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80083e8:	4b4d      	ldr	r3, [pc, #308]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ee:	0f1b      	lsrs	r3, r3, #28
 80083f0:	f003 0307 	and.w	r3, r3, #7
 80083f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	019a      	lsls	r2, r3, #6
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	041b      	lsls	r3, r3, #16
 8008400:	431a      	orrs	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	061b      	lsls	r3, r3, #24
 8008408:	431a      	orrs	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	071b      	lsls	r3, r3, #28
 800840e:	4944      	ldr	r1, [pc, #272]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008410:	4313      	orrs	r3, r2
 8008412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008416:	4b42      	ldr	r3, [pc, #264]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800841c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008424:	3b01      	subs	r3, #1
 8008426:	021b      	lsls	r3, r3, #8
 8008428:	493d      	ldr	r1, [pc, #244]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800842a:	4313      	orrs	r3, r2
 800842c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d022      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008440:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008444:	d11d      	bne.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008446:	4b36      	ldr	r3, [pc, #216]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800844c:	0e1b      	lsrs	r3, r3, #24
 800844e:	f003 030f 	and.w	r3, r3, #15
 8008452:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008454:	4b32      	ldr	r3, [pc, #200]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800845a:	0f1b      	lsrs	r3, r3, #28
 800845c:	f003 0307 	and.w	r3, r3, #7
 8008460:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	019a      	lsls	r2, r3, #6
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	041b      	lsls	r3, r3, #16
 800846e:	431a      	orrs	r2, r3
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	061b      	lsls	r3, r3, #24
 8008474:	431a      	orrs	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	071b      	lsls	r3, r3, #28
 800847a:	4929      	ldr	r1, [pc, #164]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800847c:	4313      	orrs	r3, r2
 800847e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0308 	and.w	r3, r3, #8
 800848a:	2b00      	cmp	r3, #0
 800848c:	d028      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800848e:	4b24      	ldr	r3, [pc, #144]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008494:	0e1b      	lsrs	r3, r3, #24
 8008496:	f003 030f 	and.w	r3, r3, #15
 800849a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800849c:	4b20      	ldr	r3, [pc, #128]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800849e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084a2:	0c1b      	lsrs	r3, r3, #16
 80084a4:	f003 0303 	and.w	r3, r3, #3
 80084a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	019a      	lsls	r2, r3, #6
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	041b      	lsls	r3, r3, #16
 80084b4:	431a      	orrs	r2, r3
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	061b      	lsls	r3, r3, #24
 80084ba:	431a      	orrs	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	071b      	lsls	r3, r3, #28
 80084c2:	4917      	ldr	r1, [pc, #92]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80084ca:	4b15      	ldr	r3, [pc, #84]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d8:	4911      	ldr	r1, [pc, #68]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80084e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a0e      	ldr	r2, [pc, #56]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ec:	f7fc ffae 	bl	800544c <HAL_GetTick>
 80084f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80084f2:	e008      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80084f4:	f7fc ffaa 	bl	800544c <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b64      	cmp	r3, #100	@ 0x64
 8008500:	d901      	bls.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e007      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008506:	4b06      	ldr	r3, [pc, #24]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800850e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008512:	d1ef      	bne.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3720      	adds	r7, #32
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	40023800 	.word	0x40023800

08008524 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a80      	ldr	r2, [pc, #512]	@ (8008734 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8008534:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8008536:	4b80      	ldr	r3, [pc, #512]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800853c:	099b      	lsrs	r3, r3, #6
 800853e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008546:	4b7c      	ldr	r3, [pc, #496]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800854c:	0c1b      	lsrs	r3, r3, #16
 800854e:	f003 0203 	and.w	r2, r3, #3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008556:	4b78      	ldr	r3, [pc, #480]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008558:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800855c:	0e1b      	lsrs	r3, r3, #24
 800855e:	f003 020f 	and.w	r2, r3, #15
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008566:	4b74      	ldr	r3, [pc, #464]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800856c:	0f1b      	lsrs	r3, r3, #28
 800856e:	f003 0207 	and.w	r2, r3, #7
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8008576:	4b70      	ldr	r3, [pc, #448]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800857c:	099b      	lsrs	r3, r3, #6
 800857e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008586:	4b6c      	ldr	r3, [pc, #432]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800858c:	0c1b      	lsrs	r3, r3, #16
 800858e:	f003 0203 	and.w	r2, r3, #3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008596:	4b68      	ldr	r3, [pc, #416]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800859c:	0e1b      	lsrs	r3, r3, #24
 800859e:	f003 020f 	and.w	r2, r3, #15
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085a6:	4b64      	ldr	r3, [pc, #400]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80085a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ac:	0f1b      	lsrs	r3, r3, #28
 80085ae:	f003 0207 	and.w	r2, r3, #7
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 80085b6:	4b60      	ldr	r3, [pc, #384]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80085b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085bc:	f003 021f 	and.w	r2, r3, #31
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 80085c4:	4b5c      	ldr	r3, [pc, #368]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80085c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085ca:	0a1b      	lsrs	r3, r3, #8
 80085cc:	f003 021f 	and.w	r2, r3, #31
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 80085d4:	4b58      	ldr	r3, [pc, #352]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80085d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085da:	0c1b      	lsrs	r3, r3, #16
 80085dc:	f003 0203 	and.w	r2, r3, #3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80085e4:	4b54      	ldr	r3, [pc, #336]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80085e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085ea:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80085f2:	4b51      	ldr	r3, [pc, #324]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80085f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085f8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8008600:	4b4d      	ldr	r3, [pc, #308]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800860c:	4b4a      	ldr	r3, [pc, #296]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800860e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008612:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800861a:	4b47      	ldr	r3, [pc, #284]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800861c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008620:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8008628:	4b43      	ldr	r3, [pc, #268]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800862a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800862e:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8008636:	4b40      	ldr	r3, [pc, #256]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800863c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8008644:	4b3c      	ldr	r3, [pc, #240]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800864a:	f003 0203 	and.w	r2, r3, #3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8008652:	4b39      	ldr	r3, [pc, #228]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008658:	f003 020c 	and.w	r2, r3, #12
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8008660:	4b35      	ldr	r3, [pc, #212]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008666:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800866e:	4b32      	ldr	r3, [pc, #200]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008674:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800867c:	4b2e      	ldr	r3, [pc, #184]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800867e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008682:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800868a:	4b2b      	ldr	r3, [pc, #172]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800868c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008690:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8008698:	4b27      	ldr	r3, [pc, #156]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800869a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800869e:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80086a6:	4b24      	ldr	r3, [pc, #144]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80086a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ac:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80086b4:	4b20      	ldr	r3, [pc, #128]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80086b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ba:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80086c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80086c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086c8:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80086d0:	4b19      	ldr	r3, [pc, #100]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80086d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086d6:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80086de:	4b16      	ldr	r3, [pc, #88]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80086e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086e4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80086ee:	4b12      	ldr	r3, [pc, #72]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80086f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80086f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80086fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086fc:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	431a      	orrs	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8008708:	4b0b      	ldr	r3, [pc, #44]	@ (8008738 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800870a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800870e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d103      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800871c:	e003      	b.n	8008726 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008724:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008726:	bf00      	nop
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	00fffff1 	.word	0x00fffff1
 8008738:	40023800 	.word	0x40023800

0800873c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800874c:	2300      	movs	r3, #0
 800874e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800875a:	f040 808d 	bne.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800875e:	4b93      	ldr	r3, [pc, #588]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008764:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800876c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008774:	d07c      	beq.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800877c:	d87b      	bhi.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d004      	beq.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800878a:	d039      	beq.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800878c:	e073      	b.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800878e:	4b87      	ldr	r3, [pc, #540]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d108      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800879a:	4b84      	ldr	r3, [pc, #528]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087a2:	4a83      	ldr	r2, [pc, #524]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80087a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a8:	613b      	str	r3, [r7, #16]
 80087aa:	e007      	b.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80087ac:	4b7f      	ldr	r3, [pc, #508]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087b4:	4a7f      	ldr	r2, [pc, #508]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80087b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ba:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80087bc:	4b7b      	ldr	r3, [pc, #492]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087c2:	0e1b      	lsrs	r3, r3, #24
 80087c4:	f003 030f 	and.w	r3, r3, #15
 80087c8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80087ca:	4b78      	ldr	r3, [pc, #480]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d0:	099b      	lsrs	r3, r3, #6
 80087d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	fb03 f202 	mul.w	r2, r3, r2
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80087e4:	4b71      	ldr	r3, [pc, #452]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087ea:	0a1b      	lsrs	r3, r3, #8
 80087ec:	f003 031f 	and.w	r3, r3, #31
 80087f0:	3301      	adds	r3, #1
 80087f2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087fc:	617b      	str	r3, [r7, #20]
        break;
 80087fe:	e03b      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008800:	4b6a      	ldr	r3, [pc, #424]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d108      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800880c:	4b67      	ldr	r3, [pc, #412]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008814:	4a66      	ldr	r2, [pc, #408]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008816:	fbb2 f3f3 	udiv	r3, r2, r3
 800881a:	613b      	str	r3, [r7, #16]
 800881c:	e007      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800881e:	4b63      	ldr	r3, [pc, #396]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008826:	4a63      	ldr	r2, [pc, #396]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008828:	fbb2 f3f3 	udiv	r3, r2, r3
 800882c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800882e:	4b5f      	ldr	r3, [pc, #380]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008834:	0e1b      	lsrs	r3, r3, #24
 8008836:	f003 030f 	and.w	r3, r3, #15
 800883a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800883c:	4b5b      	ldr	r3, [pc, #364]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800883e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008842:	099b      	lsrs	r3, r3, #6
 8008844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	fb03 f202 	mul.w	r2, r3, r2
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	fbb2 f3f3 	udiv	r3, r2, r3
 8008854:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008856:	4b55      	ldr	r3, [pc, #340]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800885c:	f003 031f 	and.w	r3, r3, #31
 8008860:	3301      	adds	r3, #1
 8008862:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	fbb2 f3f3 	udiv	r3, r2, r3
 800886c:	617b      	str	r3, [r7, #20]
        break;
 800886e:	e003      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008870:	4b51      	ldr	r3, [pc, #324]	@ (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008872:	617b      	str	r3, [r7, #20]
        break;
 8008874:	e000      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8008876:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800887e:	f040 808d 	bne.w	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008882:	4b4a      	ldr	r3, [pc, #296]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008888:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008890:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008898:	d07c      	beq.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088a0:	d87b      	bhi.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d004      	beq.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088ae:	d039      	beq.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80088b0:	e073      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80088b2:	4b3e      	ldr	r3, [pc, #248]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d108      	bne.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80088be:	4b3b      	ldr	r3, [pc, #236]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088c6:	4a3a      	ldr	r2, [pc, #232]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80088c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088cc:	613b      	str	r3, [r7, #16]
 80088ce:	e007      	b.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80088d0:	4b36      	ldr	r3, [pc, #216]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088d8:	4a36      	ldr	r2, [pc, #216]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80088da:	fbb2 f3f3 	udiv	r3, r2, r3
 80088de:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80088e0:	4b32      	ldr	r3, [pc, #200]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088e6:	0e1b      	lsrs	r3, r3, #24
 80088e8:	f003 030f 	and.w	r3, r3, #15
 80088ec:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80088ee:	4b2f      	ldr	r3, [pc, #188]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088f4:	099b      	lsrs	r3, r3, #6
 80088f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	fb03 f202 	mul.w	r2, r3, r2
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	fbb2 f3f3 	udiv	r3, r2, r3
 8008906:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008908:	4b28      	ldr	r3, [pc, #160]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800890a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800890e:	0a1b      	lsrs	r3, r3, #8
 8008910:	f003 031f 	and.w	r3, r3, #31
 8008914:	3301      	adds	r3, #1
 8008916:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008920:	617b      	str	r3, [r7, #20]
        break;
 8008922:	e03b      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008924:	4b21      	ldr	r3, [pc, #132]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d108      	bne.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008930:	4b1e      	ldr	r3, [pc, #120]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008938:	4a1d      	ldr	r2, [pc, #116]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800893a:	fbb2 f3f3 	udiv	r3, r2, r3
 800893e:	613b      	str	r3, [r7, #16]
 8008940:	e007      	b.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008942:	4b1a      	ldr	r3, [pc, #104]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800894a:	4a1a      	ldr	r2, [pc, #104]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800894c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008950:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008952:	4b16      	ldr	r3, [pc, #88]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008958:	0e1b      	lsrs	r3, r3, #24
 800895a:	f003 030f 	and.w	r3, r3, #15
 800895e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008960:	4b12      	ldr	r3, [pc, #72]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008966:	099b      	lsrs	r3, r3, #6
 8008968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	fb03 f202 	mul.w	r2, r3, r2
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	fbb2 f3f3 	udiv	r3, r2, r3
 8008978:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800897a:	4b0c      	ldr	r3, [pc, #48]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800897c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008980:	f003 031f 	and.w	r3, r3, #31
 8008984:	3301      	adds	r3, #1
 8008986:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008990:	617b      	str	r3, [r7, #20]
        break;
 8008992:	e003      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008994:	4b08      	ldr	r3, [pc, #32]	@ (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008996:	617b      	str	r3, [r7, #20]
        break;
 8008998:	e000      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800899a:	bf00      	nop
      }
    }
  }

  return frequency;
 800899c:	697b      	ldr	r3, [r7, #20]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	371c      	adds	r7, #28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	40023800 	.word	0x40023800
 80089b0:	00f42400 	.word	0x00f42400
 80089b4:	017d7840 	.word	0x017d7840
 80089b8:	00bb8000 	.word	0x00bb8000

080089bc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b088      	sub	sp, #32
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e156      	b.n	8008c88 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d106      	bne.n	80089f4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7f9 fe4e 	bl	8002690 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fad5 	bl	8008fac <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d00c      	beq.n	8008a24 <HAL_SAI_Init+0x68>
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d80d      	bhi.n	8008a2a <HAL_SAI_Init+0x6e>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <HAL_SAI_Init+0x5c>
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d003      	beq.n	8008a1e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8008a16:	e008      	b.n	8008a2a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	61fb      	str	r3, [r7, #28]
      break;
 8008a1c:	e006      	b.n	8008a2c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008a1e:	2310      	movs	r3, #16
 8008a20:	61fb      	str	r3, [r7, #28]
      break;
 8008a22:	e003      	b.n	8008a2c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008a24:	2320      	movs	r3, #32
 8008a26:	61fb      	str	r3, [r7, #28]
      break;
 8008a28:	e000      	b.n	8008a2c <HAL_SAI_Init+0x70>
      break;
 8008a2a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d81e      	bhi.n	8008a72 <HAL_SAI_Init+0xb6>
 8008a34:	a201      	add	r2, pc, #4	@ (adr r2, 8008a3c <HAL_SAI_Init+0x80>)
 8008a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3a:	bf00      	nop
 8008a3c:	08008a4d 	.word	0x08008a4d
 8008a40:	08008a53 	.word	0x08008a53
 8008a44:	08008a5b 	.word	0x08008a5b
 8008a48:	08008a63 	.word	0x08008a63
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	617b      	str	r3, [r7, #20]
    }
    break;
 8008a50:	e010      	b.n	8008a74 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a56:	617b      	str	r3, [r7, #20]
    }
    break;
 8008a58:	e00c      	b.n	8008a74 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008a5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008a5e:	617b      	str	r3, [r7, #20]
    }
    break;
 8008a60:	e008      	b.n	8008a74 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008a62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008a66:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	f043 0301 	orr.w	r3, r3, #1
 8008a6e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008a70:	e000      	b.n	8008a74 <HAL_SAI_Init+0xb8>
    default:
      break;
 8008a72:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a85      	ldr	r2, [pc, #532]	@ (8008c90 <HAL_SAI_Init+0x2d4>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d004      	beq.n	8008a88 <HAL_SAI_Init+0xcc>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a84      	ldr	r2, [pc, #528]	@ (8008c94 <HAL_SAI_Init+0x2d8>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d103      	bne.n	8008a90 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008a88:	4a83      	ldr	r2, [pc, #524]	@ (8008c98 <HAL_SAI_Init+0x2dc>)
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	6013      	str	r3, [r2, #0]
 8008a8e:	e002      	b.n	8008a96 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008a90:	4a82      	ldr	r2, [pc, #520]	@ (8008c9c <HAL_SAI_Init+0x2e0>)
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d04c      	beq.n	8008b38 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a7a      	ldr	r2, [pc, #488]	@ (8008c90 <HAL_SAI_Init+0x2d4>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d004      	beq.n	8008ab6 <HAL_SAI_Init+0xfa>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a78      	ldr	r2, [pc, #480]	@ (8008c94 <HAL_SAI_Init+0x2d8>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d104      	bne.n	8008ac0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008ab6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008aba:	f7ff fe3f 	bl	800873c <HAL_RCCEx_GetPeriphCLKFreq>
 8008abe:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a76      	ldr	r2, [pc, #472]	@ (8008ca0 <HAL_SAI_Init+0x2e4>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d004      	beq.n	8008ad4 <HAL_SAI_Init+0x118>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a75      	ldr	r2, [pc, #468]	@ (8008ca4 <HAL_SAI_Init+0x2e8>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d104      	bne.n	8008ade <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008ad4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008ad8:	f7ff fe30 	bl	800873c <HAL_RCCEx_GetPeriphCLKFreq>
 8008adc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	005b      	lsls	r3, r3, #1
 8008ae8:	461a      	mov	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	025b      	lsls	r3, r3, #9
 8008af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	4a6b      	ldr	r2, [pc, #428]	@ (8008ca8 <HAL_SAI_Init+0x2ec>)
 8008afa:	fba2 2303 	umull	r2, r3, r2, r3
 8008afe:	08da      	lsrs	r2, r3, #3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008b04:	68f9      	ldr	r1, [r7, #12]
 8008b06:	4b68      	ldr	r3, [pc, #416]	@ (8008ca8 <HAL_SAI_Init+0x2ec>)
 8008b08:	fba3 2301 	umull	r2, r3, r3, r1
 8008b0c:	08da      	lsrs	r2, r3, #3
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	005b      	lsls	r3, r3, #1
 8008b16:	1aca      	subs	r2, r1, r3
 8008b18:	2a08      	cmp	r2, #8
 8008b1a:	d904      	bls.n	8008b26 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a1b      	ldr	r3, [r3, #32]
 8008b20:	1c5a      	adds	r2, r3, #1
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d104      	bne.n	8008b38 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	085a      	lsrs	r2, r3, #1
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d003      	beq.n	8008b48 <HAL_SAI_Init+0x18c>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d109      	bne.n	8008b5c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d101      	bne.n	8008b54 <HAL_SAI_Init+0x198>
 8008b50:	2300      	movs	r3, #0
 8008b52:	e001      	b.n	8008b58 <HAL_SAI_Init+0x19c>
 8008b54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b58:	61bb      	str	r3, [r7, #24]
 8008b5a:	e008      	b.n	8008b6e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d102      	bne.n	8008b6a <HAL_SAI_Init+0x1ae>
 8008b64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b68:	e000      	b.n	8008b6c <HAL_SAI_Init+0x1b0>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6819      	ldr	r1, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	4b4c      	ldr	r3, [pc, #304]	@ (8008cac <HAL_SAI_Init+0x2f0>)
 8008b7a:	400b      	ands	r3, r1
 8008b7c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6819      	ldr	r1, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b8c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008b92:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8008ba6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008bb2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	051b      	lsls	r3, r3, #20
 8008bba:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	430a      	orrs	r2, r1
 8008bc2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6859      	ldr	r1, [r3, #4]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	4b38      	ldr	r3, [pc, #224]	@ (8008cb0 <HAL_SAI_Init+0x2f4>)
 8008bd0:	400b      	ands	r3, r1
 8008bd2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6859      	ldr	r1, [r3, #4]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	699a      	ldr	r2, [r3, #24]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be2:	431a      	orrs	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be8:	431a      	orrs	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6899      	ldr	r1, [r3, #8]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8008cb4 <HAL_SAI_Init+0x2f8>)
 8008bfe:	400b      	ands	r3, r1
 8008c00:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6899      	ldr	r1, [r3, #8]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008c12:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8008c18:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8008c1e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c24:	3b01      	subs	r3, #1
 8008c26:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008c28:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68d9      	ldr	r1, [r3, #12]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008c40:	400b      	ands	r3, r1
 8008c42:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68d9      	ldr	r1, [r3, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c52:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c58:	041b      	lsls	r3, r3, #16
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c60:	3b01      	subs	r3, #1
 8008c62:	021b      	lsls	r3, r3, #8
 8008c64:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3720      	adds	r7, #32
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	40015804 	.word	0x40015804
 8008c94:	40015824 	.word	0x40015824
 8008c98:	40015800 	.word	0x40015800
 8008c9c:	40015c00 	.word	0x40015c00
 8008ca0:	40015c04 	.word	0x40015c04
 8008ca4:	40015c24 	.word	0x40015c24
 8008ca8:	cccccccd 	.word	0xcccccccd
 8008cac:	ff05c010 	.word	0xff05c010
 8008cb0:	ffff1ff0 	.word	0xffff1ff0
 8008cb4:	fff88000 	.word	0xfff88000

08008cb8 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d101      	bne.n	8008cca <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e027      	b.n	8008d1a <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2202      	movs	r2, #2
 8008cce:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce2:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f961 	bl	8008fac <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f042 0208 	orr.w	r2, r2, #8
 8008cf8:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7f9 fd64 	bl	80027c8 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d101      	bne.n	8008d3c <HAL_SAI_DMAStop+0x1a>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	e061      	b.n	8008e00 <HAL_SAI_DMAStop+0xde>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f931 	bl	8008fac <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008d58:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d01c      	beq.n	8008d9c <HAL_SAI_DMAStop+0x7a>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b12      	cmp	r3, #18
 8008d6c:	d116      	bne.n	8008d9c <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fc ff0a 	bl	8005b8c <HAL_DMA_Abort>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00e      	beq.n	8008d9c <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d84:	2b80      	cmp	r3, #128	@ 0x80
 8008d86:	d009      	beq.n	8008d9c <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d01c      	beq.n	8008dde <HAL_SAI_DMAStop+0xbc>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b22      	cmp	r3, #34	@ 0x22
 8008dae:	d116      	bne.n	8008dde <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fc fee9 	bl	8005b8c <HAL_DMA_Abort>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00e      	beq.n	8008dde <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc6:	2b80      	cmp	r3, #128	@ 0x80
 8008dc8:	d009      	beq.n	8008dde <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f042 0208 	orr.w	r2, r2, #8
 8008dec:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	4613      	mov	r3, r2
 8008e14:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d002      	beq.n	8008e22 <HAL_SAI_Receive_DMA+0x1a>
 8008e1c:	88fb      	ldrh	r3, [r7, #6]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d101      	bne.n	8008e26 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e074      	b.n	8008f10 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d16d      	bne.n	8008f0e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d101      	bne.n	8008e40 <HAL_SAI_Receive_DMA+0x38>
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	e067      	b.n	8008f10 <HAL_SAI_Receive_DMA+0x108>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	88fa      	ldrh	r2, [r7, #6]
 8008e52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	88fa      	ldrh	r2, [r7, #6]
 8008e5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2222      	movs	r2, #34	@ 0x22
 8008e6a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e72:	4a29      	ldr	r2, [pc, #164]	@ (8008f18 <HAL_SAI_Receive_DMA+0x110>)
 8008e74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e7a:	4a28      	ldr	r2, [pc, #160]	@ (8008f1c <HAL_SAI_Receive_DMA+0x114>)
 8008e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e82:	4a27      	ldr	r2, [pc, #156]	@ (8008f20 <HAL_SAI_Receive_DMA+0x118>)
 8008e84:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	331c      	adds	r3, #28
 8008e98:	4619      	mov	r1, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ea6:	f7fc fe11 	bl	8005acc <HAL_DMA_Start_IT>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d005      	beq.n	8008ebc <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e029      	b.n	8008f10 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 f83e 	bl	8008f40 <SAI_InterruptFlag>
 8008ec4:	4601      	mov	r1, r0
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	691a      	ldr	r2, [r3, #16]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008ee2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d107      	bne.n	8008f02 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008f00:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	e000      	b.n	8008f10 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8008f0e:	2302      	movs	r3, #2
  }
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	0800907d 	.word	0x0800907d
 8008f1c:	0800901d 	.word	0x0800901d
 8008f20:	08009099 	.word	0x08009099

08008f24 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008f32:	b2db      	uxtb	r3, r3
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d103      	bne.n	8008f5c <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f043 0308 	orr.w	r3, r3, #8
 8008f5a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f60:	2b08      	cmp	r3, #8
 8008f62:	d10b      	bne.n	8008f7c <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008f68:	2b03      	cmp	r3, #3
 8008f6a:	d003      	beq.n	8008f74 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d103      	bne.n	8008f7c <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f043 0310 	orr.w	r3, r3, #16
 8008f7a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	2b03      	cmp	r3, #3
 8008f82:	d003      	beq.n	8008f8c <SAI_InterruptFlag+0x4c>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d104      	bne.n	8008f96 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	e003      	b.n	8008f9e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f043 0304 	orr.w	r3, r3, #4
 8008f9c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008fb4:	4b17      	ldr	r3, [pc, #92]	@ (8009014 <SAI_Disable+0x68>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a17      	ldr	r2, [pc, #92]	@ (8009018 <SAI_Disable+0x6c>)
 8008fba:	fba2 2303 	umull	r2, r3, r2, r3
 8008fbe:	0b1b      	lsrs	r3, r3, #12
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008fd6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	1e5a      	subs	r2, r3, #1
 8008fdc:	60fa      	str	r2, [r7, #12]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10a      	bne.n	8008ff8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fe8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ff6:	e006      	b.n	8009006 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1e8      	bne.n	8008fd8 <SAI_Disable+0x2c>

  return status;
 8009006:	7afb      	ldrb	r3, [r7, #11]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	20000018 	.word	0x20000018
 8009018:	95cbec1b 	.word	0x95cbec1b

0800901c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009028:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009032:	d01c      	beq.n	800906e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009042:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800904c:	2100      	movs	r1, #0
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f7ff ff76 	bl	8008f40 <SAI_InterruptFlag>
 8009054:	4603      	mov	r3, r0
 8009056:	43d9      	mvns	r1, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	691a      	ldr	r2, [r3, #16]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	400a      	ands	r2, r1
 8009064:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2201      	movs	r2, #1
 800906a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f7fb fe4a 	bl	8004d08 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009074:	bf00      	nop
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009088:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f7fb fe46 	bl	8004d1c <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009090:	bf00      	nop
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d004      	beq.n	80090ca <SAI_DMAError+0x32>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d112      	bne.n	80090f0 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80090d8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f7ff ff66 	bl	8008fac <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f7fb fc09 	bl	8004908 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80090f6:	bf00      	nop
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e022      	b.n	8009156 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b00      	cmp	r3, #0
 800911a:	d105      	bne.n	8009128 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7f9 fba2 	bl	800286c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2203      	movs	r2, #3
 800912c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f815 	bl	8009160 <HAL_SD_InitCard>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e00a      	b.n	8009156 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
	...

08009160 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009160:	b5b0      	push	{r4, r5, r7, lr}
 8009162:	b08e      	sub	sp, #56	@ 0x38
 8009164:	af04      	add	r7, sp, #16
 8009166:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009168:	2300      	movs	r3, #0
 800916a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800916c:	2300      	movs	r3, #0
 800916e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009170:	2300      	movs	r3, #0
 8009172:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009174:	2300      	movs	r3, #0
 8009176:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009178:	2300      	movs	r3, #0
 800917a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800917c:	2376      	movs	r3, #118	@ 0x76
 800917e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681d      	ldr	r5, [r3, #0]
 8009184:	466c      	mov	r4, sp
 8009186:	f107 0314 	add.w	r3, r7, #20
 800918a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800918e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009192:	f107 0308 	add.w	r3, r7, #8
 8009196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009198:	4628      	mov	r0, r5
 800919a:	f001 ff71 	bl	800b080 <SDMMC_Init>
 800919e:	4603      	mov	r3, r0
 80091a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80091a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e059      	b.n	8009264 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685a      	ldr	r2, [r3, #4]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80091be:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f001 ffa5 	bl	800b114 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091d8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80091da:	2002      	movs	r0, #2
 80091dc:	f7fc f942 	bl	8005464 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 ff59 	bl	800a098 <SD_PowerON>
 80091e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091e8:	6a3b      	ldr	r3, [r7, #32]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00b      	beq.n	8009206 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	431a      	orrs	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e02e      	b.n	8009264 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fe78 	bl	8009efc <SD_InitCard>
 800920c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800920e:	6a3b      	ldr	r3, [r7, #32]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00b      	beq.n	800922c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	431a      	orrs	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e01b      	b.n	8009264 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009234:	4618      	mov	r0, r3
 8009236:	f001 ffff 	bl	800b238 <SDMMC_CmdBlockLength>
 800923a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00f      	beq.n	8009262 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a09      	ldr	r2, [pc, #36]	@ (800926c <HAL_SD_InitCard+0x10c>)
 8009248:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	431a      	orrs	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e000      	b.n	8009264 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3728      	adds	r7, #40	@ 0x28
 8009268:	46bd      	mov	sp, r7
 800926a:	bdb0      	pop	{r4, r5, r7, pc}
 800926c:	004005ff 	.word	0x004005ff

08009270 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b08c      	sub	sp, #48	@ 0x30
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
 800927c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d107      	bne.n	8009298 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800928c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e0c3      	b.n	8009420 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	f040 80bc 	bne.w	800941e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80092ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	441a      	add	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d907      	bls.n	80092ca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092be:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e0aa      	b.n	8009420 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2203      	movs	r2, #3
 80092ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2200      	movs	r2, #0
 80092d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80092e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ee:	4a4e      	ldr	r2, [pc, #312]	@ (8009428 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80092f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f6:	4a4d      	ldr	r2, [pc, #308]	@ (800942c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80092f8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092fe:	2200      	movs	r2, #0
 8009300:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009306:	2200      	movs	r2, #0
 8009308:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3380      	adds	r3, #128	@ 0x80
 8009330:	4619      	mov	r1, r3
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	025b      	lsls	r3, r3, #9
 8009338:	089b      	lsrs	r3, r3, #2
 800933a:	f7fc fbc7 	bl	8005acc <HAL_DMA_Start_IT>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d017      	beq.n	8009374 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8009352:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a35      	ldr	r2, [pc, #212]	@ (8009430 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800935a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009360:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e055      	b.n	8009420 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f042 0208 	orr.w	r2, r2, #8
 8009382:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009388:	2b01      	cmp	r3, #1
 800938a:	d002      	beq.n	8009392 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800938c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800938e:	025b      	lsls	r3, r3, #9
 8009390:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009392:	f04f 33ff 	mov.w	r3, #4294967295
 8009396:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	025b      	lsls	r3, r3, #9
 800939c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800939e:	2390      	movs	r3, #144	@ 0x90
 80093a0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80093a2:	2302      	movs	r3, #2
 80093a4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80093a6:	2300      	movs	r3, #0
 80093a8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80093aa:	2301      	movs	r3, #1
 80093ac:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f107 0210 	add.w	r2, r7, #16
 80093b6:	4611      	mov	r1, r2
 80093b8:	4618      	mov	r0, r3
 80093ba:	f001 ff11 	bl	800b1e0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d90a      	bls.n	80093da <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2282      	movs	r2, #130	@ 0x82
 80093c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093d0:	4618      	mov	r0, r3
 80093d2:	f001 ff75 	bl	800b2c0 <SDMMC_CmdReadMultiBlock>
 80093d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80093d8:	e009      	b.n	80093ee <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2281      	movs	r2, #129	@ 0x81
 80093de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093e6:	4618      	mov	r0, r3
 80093e8:	f001 ff48 	bl	800b27c <SDMMC_CmdReadSingleBlock>
 80093ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80093ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d012      	beq.n	800941a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a0d      	ldr	r2, [pc, #52]	@ (8009430 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80093fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009402:	431a      	orrs	r2, r3
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e002      	b.n	8009420 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	e000      	b.n	8009420 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800941e:	2302      	movs	r3, #2
  }
}
 8009420:	4618      	mov	r0, r3
 8009422:	3730      	adds	r7, #48	@ 0x30
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	08009d0b 	.word	0x08009d0b
 800942c:	08009d7d 	.word	0x08009d7d
 8009430:	004005ff 	.word	0x004005ff

08009434 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b08c      	sub	sp, #48	@ 0x30
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d107      	bne.n	800945c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009450:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	e0c6      	b.n	80095ea <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b01      	cmp	r3, #1
 8009466:	f040 80bf 	bne.w	80095e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	441a      	add	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800947a:	429a      	cmp	r2, r3
 800947c:	d907      	bls.n	800948e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009482:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e0ad      	b.n	80095ea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2203      	movs	r2, #3
 8009492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2200      	movs	r2, #0
 800949c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f042 021a 	orr.w	r2, r2, #26
 80094ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094b2:	4a50      	ldr	r2, [pc, #320]	@ (80095f4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80094b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ba:	4a4f      	ldr	r2, [pc, #316]	@ (80095f8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80094bc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c2:	2200      	movs	r2, #0
 80094c4:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d002      	beq.n	80094d4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80094ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d0:	025b      	lsls	r3, r3, #9
 80094d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d90a      	bls.n	80094f0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	22a0      	movs	r2, #160	@ 0xa0
 80094de:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094e6:	4618      	mov	r0, r3
 80094e8:	f001 ff2e 	bl	800b348 <SDMMC_CmdWriteMultiBlock>
 80094ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80094ee:	e009      	b.n	8009504 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2290      	movs	r2, #144	@ 0x90
 80094f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094fc:	4618      	mov	r0, r3
 80094fe:	f001 ff01 	bl	800b304 <SDMMC_CmdWriteSingleBlock>
 8009502:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009506:	2b00      	cmp	r3, #0
 8009508:	d012      	beq.n	8009530 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a3b      	ldr	r2, [pc, #236]	@ (80095fc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009510:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009518:	431a      	orrs	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	e05c      	b.n	80095ea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f042 0208 	orr.w	r2, r2, #8
 800953e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009544:	2240      	movs	r2, #64	@ 0x40
 8009546:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009558:	689a      	ldr	r2, [r3, #8]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	430a      	orrs	r2, r1
 8009562:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009568:	68b9      	ldr	r1, [r7, #8]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3380      	adds	r3, #128	@ 0x80
 8009570:	461a      	mov	r2, r3
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	025b      	lsls	r3, r3, #9
 8009576:	089b      	lsrs	r3, r3, #2
 8009578:	f7fc faa8 	bl	8005acc <HAL_DMA_Start_IT>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d01a      	beq.n	80095b8 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f022 021a 	bic.w	r2, r2, #26
 8009590:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a19      	ldr	r2, [pc, #100]	@ (80095fc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009598:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800959e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e018      	b.n	80095ea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80095b8:	f04f 33ff 	mov.w	r3, #4294967295
 80095bc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	025b      	lsls	r3, r3, #9
 80095c2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80095c4:	2390      	movs	r3, #144	@ 0x90
 80095c6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80095c8:	2300      	movs	r3, #0
 80095ca:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80095d0:	2301      	movs	r3, #1
 80095d2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f107 0210 	add.w	r2, r7, #16
 80095dc:	4611      	mov	r1, r2
 80095de:	4618      	mov	r0, r3
 80095e0:	f001 fdfe 	bl	800b1e0 <SDMMC_ConfigData>

      return HAL_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	e000      	b.n	80095ea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80095e8:	2302      	movs	r3, #2
  }
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3730      	adds	r7, #48	@ 0x30
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	08009ce1 	.word	0x08009ce1
 80095f8:	08009d7d 	.word	0x08009d7d
 80095fc:	004005ff 	.word	0x004005ff

08009600 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800960c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d008      	beq.n	800962e <HAL_SD_IRQHandler+0x2e>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f003 0308 	and.w	r3, r3, #8
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fdec 	bl	800a204 <SD_Read_IT>
 800962c:	e15a      	b.n	80098e4 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 808d 	beq.w	8009758 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009646:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	4b9a      	ldr	r3, [pc, #616]	@ (80098bc <HAL_SD_IRQHandler+0x2bc>)
 8009654:	400b      	ands	r3, r1
 8009656:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f022 0201 	bic.w	r2, r2, #1
 8009666:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f003 0308 	and.w	r3, r3, #8
 800966e:	2b00      	cmp	r3, #0
 8009670:	d039      	beq.n	80096e6 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b00      	cmp	r3, #0
 800967a:	d104      	bne.n	8009686 <HAL_SD_IRQHandler+0x86>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f003 0320 	and.w	r3, r3, #32
 8009682:	2b00      	cmp	r3, #0
 8009684:	d011      	beq.n	80096aa <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4618      	mov	r0, r3
 800968c:	f001 fe7e 	bl	800b38c <SDMMC_CmdStopTransfer>
 8009690:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d008      	beq.n	80096aa <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	431a      	orrs	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f921 	bl	80098ec <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f240 523a 	movw	r2, #1338	@ 0x53a
 80096b2:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d104      	bne.n	80096d6 <HAL_SD_IRQHandler+0xd6>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f003 0302 	and.w	r3, r3, #2
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d003      	beq.n	80096de <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f002 fe08 	bl	800c2ec <HAL_SD_RxCpltCallback>
 80096dc:	e102      	b.n	80098e4 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f002 fdfa 	bl	800c2d8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80096e4:	e0fe      	b.n	80098e4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 80f9 	beq.w	80098e4 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f003 0320 	and.w	r3, r3, #32
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d011      	beq.n	8009720 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4618      	mov	r0, r3
 8009702:	f001 fe43 	bl	800b38c <SDMMC_CmdStopTransfer>
 8009706:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d008      	beq.n	8009720 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	431a      	orrs	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f8e6 	bl	80098ec <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	f040 80dc 	bne.w	80098e4 <HAL_SD_IRQHandler+0x2e4>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f003 0302 	and.w	r3, r3, #2
 8009732:	2b00      	cmp	r3, #0
 8009734:	f040 80d6 	bne.w	80098e4 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f022 0208 	bic.w	r2, r2, #8
 8009746:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f002 fdc1 	bl	800c2d8 <HAL_SD_TxCpltCallback>
}
 8009756:	e0c5      	b.n	80098e4 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800975e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d008      	beq.n	8009778 <HAL_SD_IRQHandler+0x178>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f003 0308 	and.w	r3, r3, #8
 800976c:	2b00      	cmp	r3, #0
 800976e:	d003      	beq.n	8009778 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fd98 	bl	800a2a6 <SD_Write_IT>
 8009776:	e0b5      	b.n	80098e4 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800977e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8009782:	2b00      	cmp	r3, #0
 8009784:	f000 80ae 	beq.w	80098e4 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800978e:	f003 0302 	and.w	r3, r3, #2
 8009792:	2b00      	cmp	r3, #0
 8009794:	d005      	beq.n	80097a2 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800979a:	f043 0202 	orr.w	r2, r3, #2
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097a8:	f003 0308 	and.w	r3, r3, #8
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d005      	beq.n	80097bc <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b4:	f043 0208 	orr.w	r2, r3, #8
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097c2:	f003 0320 	and.w	r3, r3, #32
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d005      	beq.n	80097d6 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ce:	f043 0220 	orr.w	r2, r3, #32
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097dc:	f003 0310 	and.w	r3, r3, #16
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d005      	beq.n	80097f0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e8:	f043 0210 	orr.w	r2, r3, #16
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80097f8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009808:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4618      	mov	r0, r3
 8009810:	f001 fdbc 	bl	800b38c <SDMMC_CmdStopTransfer>
 8009814:	4602      	mov	r2, r0
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800981a:	431a      	orrs	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f003 0308 	and.w	r3, r3, #8
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00a      	beq.n	8009840 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f857 	bl	80098ec <HAL_SD_ErrorCallback>
}
 800983e:	e051      	b.n	80098e4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009846:	2b00      	cmp	r3, #0
 8009848:	d04c      	beq.n	80098e4 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f003 0310 	and.w	r3, r3, #16
 8009850:	2b00      	cmp	r3, #0
 8009852:	d104      	bne.n	800985e <HAL_SD_IRQHandler+0x25e>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f003 0320 	and.w	r3, r3, #32
 800985a:	2b00      	cmp	r3, #0
 800985c:	d011      	beq.n	8009882 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009862:	4a17      	ldr	r2, [pc, #92]	@ (80098c0 <HAL_SD_IRQHandler+0x2c0>)
 8009864:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800986a:	4618      	mov	r0, r3
 800986c:	f7fc f9fe 	bl	8005c6c <HAL_DMA_Abort_IT>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d036      	beq.n	80098e4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fad0 	bl	8009e20 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009880:	e030      	b.n	80098e4 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	2b00      	cmp	r3, #0
 800988a:	d104      	bne.n	8009896 <HAL_SD_IRQHandler+0x296>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	d018      	beq.n	80098c8 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800989a:	4a0a      	ldr	r2, [pc, #40]	@ (80098c4 <HAL_SD_IRQHandler+0x2c4>)
 800989c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fc f9e2 	bl	8005c6c <HAL_DMA_Abort_IT>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d01a      	beq.n	80098e4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 faeb 	bl	8009e8e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80098b8:	e014      	b.n	80098e4 <HAL_SD_IRQHandler+0x2e4>
 80098ba:	bf00      	nop
 80098bc:	ffff3ec5 	.word	0xffff3ec5
 80098c0:	08009e21 	.word	0x08009e21
 80098c4:	08009e8f 	.word	0x08009e8f
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f002 fcf1 	bl	800c2c4 <HAL_SD_AbortCallback>
}
 80098e2:	e7ff      	b.n	80098e4 <HAL_SD_IRQHandler+0x2e4>
 80098e4:	bf00      	nop
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800990e:	0f9b      	lsrs	r3, r3, #30
 8009910:	b2da      	uxtb	r2, r3
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800991a:	0e9b      	lsrs	r3, r3, #26
 800991c:	b2db      	uxtb	r3, r3
 800991e:	f003 030f 	and.w	r3, r3, #15
 8009922:	b2da      	uxtb	r2, r3
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800992c:	0e1b      	lsrs	r3, r3, #24
 800992e:	b2db      	uxtb	r3, r3
 8009930:	f003 0303 	and.w	r3, r3, #3
 8009934:	b2da      	uxtb	r2, r3
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800993e:	0c1b      	lsrs	r3, r3, #16
 8009940:	b2da      	uxtb	r2, r3
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800994a:	0a1b      	lsrs	r3, r3, #8
 800994c:	b2da      	uxtb	r2, r3
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009956:	b2da      	uxtb	r2, r3
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009960:	0d1b      	lsrs	r3, r3, #20
 8009962:	b29a      	uxth	r2, r3
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800996c:	0c1b      	lsrs	r3, r3, #16
 800996e:	b2db      	uxtb	r3, r3
 8009970:	f003 030f 	and.w	r3, r3, #15
 8009974:	b2da      	uxtb	r2, r3
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800997e:	0bdb      	lsrs	r3, r3, #15
 8009980:	b2db      	uxtb	r3, r3
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	b2da      	uxtb	r2, r3
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009990:	0b9b      	lsrs	r3, r3, #14
 8009992:	b2db      	uxtb	r3, r3
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	b2da      	uxtb	r2, r3
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099a2:	0b5b      	lsrs	r3, r3, #13
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099b4:	0b1b      	lsrs	r3, r3, #12
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2200      	movs	r2, #0
 80099c6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d163      	bne.n	8009a98 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099d4:	009a      	lsls	r2, r3, #2
 80099d6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80099da:	4013      	ands	r3, r2
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80099e0:	0f92      	lsrs	r2, r2, #30
 80099e2:	431a      	orrs	r2, r3
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ec:	0edb      	lsrs	r3, r3, #27
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	f003 0307 	and.w	r3, r3, #7
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099fe:	0e1b      	lsrs	r3, r3, #24
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	f003 0307 	and.w	r3, r3, #7
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a10:	0d5b      	lsrs	r3, r3, #21
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 0307 	and.w	r3, r3, #7
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a22:	0c9b      	lsrs	r3, r3, #18
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a34:	0bdb      	lsrs	r3, r3, #15
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	f003 0307 	and.w	r3, r3, #7
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	1c5a      	adds	r2, r3, #1
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	7e1b      	ldrb	r3, [r3, #24]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	f003 0307 	and.w	r3, r3, #7
 8009a56:	3302      	adds	r3, #2
 8009a58:	2201      	movs	r2, #1
 8009a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009a62:	fb03 f202 	mul.w	r2, r3, r2
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	7a1b      	ldrb	r3, [r3, #8]
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	f003 030f 	and.w	r3, r3, #15
 8009a74:	2201      	movs	r2, #1
 8009a76:	409a      	lsls	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009a84:	0a52      	lsrs	r2, r2, #9
 8009a86:	fb03 f202 	mul.w	r2, r3, r2
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a94:	661a      	str	r2, [r3, #96]	@ 0x60
 8009a96:	e031      	b.n	8009afc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d11d      	bne.n	8009adc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009aa4:	041b      	lsls	r3, r3, #16
 8009aa6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009aae:	0c1b      	lsrs	r3, r3, #16
 8009ab0:	431a      	orrs	r2, r3
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	3301      	adds	r3, #1
 8009abc:	029a      	lsls	r2, r3, #10
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ad0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	661a      	str	r2, [r3, #96]	@ 0x60
 8009ada:	e00f      	b.n	8009afc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a58      	ldr	r2, [pc, #352]	@ (8009c44 <HAL_SD_GetCardCSD+0x344>)
 8009ae2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ae8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e09d      	b.n	8009c38 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b00:	0b9b      	lsrs	r3, r3, #14
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	b2da      	uxtb	r2, r3
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b12:	09db      	lsrs	r3, r3, #7
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b34:	0fdb      	lsrs	r3, r3, #31
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b40:	0f5b      	lsrs	r3, r3, #29
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	f003 0303 	and.w	r3, r3, #3
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b52:	0e9b      	lsrs	r3, r3, #26
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	f003 0307 	and.w	r3, r3, #7
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b64:	0d9b      	lsrs	r3, r3, #22
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	f003 030f 	and.w	r3, r3, #15
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b76:	0d5b      	lsrs	r3, r3, #21
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b92:	0c1b      	lsrs	r3, r3, #16
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	f003 0301 	and.w	r3, r3, #1
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ba6:	0bdb      	lsrs	r3, r3, #15
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bba:	0b9b      	lsrs	r3, r3, #14
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bce:	0b5b      	lsrs	r3, r3, #13
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009be2:	0b1b      	lsrs	r3, r3, #12
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	b2da      	uxtb	r2, r3
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bf6:	0a9b      	lsrs	r3, r3, #10
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	f003 0303 	and.w	r3, r3, #3
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c0a:	0a1b      	lsrs	r3, r3, #8
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	f003 0303 	and.w	r3, r3, #3
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c1e:	085b      	lsrs	r3, r3, #1
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	004005ff 	.word	0x004005ff

08009c48 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009cac:	f107 030c 	add.w	r3, r7, #12
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fa7e 	bl	800a1b4 <SD_SendStatus>
 8009cb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d005      	beq.n	8009ccc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	431a      	orrs	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	0a5b      	lsrs	r3, r3, #9
 8009cd0:	f003 030f 	and.w	r3, r3, #15
 8009cd4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009cd6:	693b      	ldr	r3, [r7, #16]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3718      	adds	r7, #24
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cec:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009cfc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009cfe:	bf00      	nop
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d16:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d1c:	2b82      	cmp	r3, #130	@ 0x82
 8009d1e:	d111      	bne.n	8009d44 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f001 fb31 	bl	800b38c <SDMMC_CmdStopTransfer>
 8009d2a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d008      	beq.n	8009d44 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	431a      	orrs	r2, r3
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff fdd4 	bl	80098ec <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f022 0208 	bic.w	r2, r2, #8
 8009d52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009d5c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f002 fabd 	bl	800c2ec <HAL_SD_RxCpltCallback>
#endif
}
 8009d72:	bf00      	nop
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
	...

08009d7c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d88:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7fc f91a 	bl	8005fc4 <HAL_DMA_GetError>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d03e      	beq.n	8009e14 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d9c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009da4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d002      	beq.n	8009db2 <SD_DMAError+0x36>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d12d      	bne.n	8009e0e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a19      	ldr	r2, [pc, #100]	@ (8009e1c <SD_DMAError+0xa0>)
 8009db8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dce:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009dd6:	6978      	ldr	r0, [r7, #20]
 8009dd8:	f7ff ff62 	bl	8009ca0 <HAL_SD_GetCardState>
 8009ddc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2b06      	cmp	r3, #6
 8009de2:	d002      	beq.n	8009dea <SD_DMAError+0x6e>
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2b05      	cmp	r3, #5
 8009de8:	d10a      	bne.n	8009e00 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f001 facc 	bl	800b38c <SDMMC_CmdStopTransfer>
 8009df4:	4602      	mov	r2, r0
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009e0e:	6978      	ldr	r0, [r7, #20]
 8009e10:	f7ff fd6c 	bl	80098ec <HAL_SD_ErrorCallback>
#endif
  }
}
 8009e14:	bf00      	nop
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	004005ff 	.word	0x004005ff

08009e20 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e2c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009e36:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f7ff ff31 	bl	8009ca0 <HAL_SD_GetCardState>
 8009e3e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	2b06      	cmp	r3, #6
 8009e52:	d002      	beq.n	8009e5a <SD_DMATxAbort+0x3a>
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	2b05      	cmp	r3, #5
 8009e58:	d10a      	bne.n	8009e70 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f001 fa94 	bl	800b38c <SDMMC_CmdStopTransfer>
 8009e64:	4602      	mov	r2, r0
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e6a:	431a      	orrs	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d103      	bne.n	8009e80 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f002 fa23 	bl	800c2c4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009e7e:	e002      	b.n	8009e86 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f7ff fd33 	bl	80098ec <HAL_SD_ErrorCallback>
}
 8009e86:	bf00      	nop
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e9a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009ea4:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f7ff fefa 	bl	8009ca0 <HAL_SD_GetCardState>
 8009eac:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2b06      	cmp	r3, #6
 8009ec0:	d002      	beq.n	8009ec8 <SD_DMARxAbort+0x3a>
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	2b05      	cmp	r3, #5
 8009ec6:	d10a      	bne.n	8009ede <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f001 fa5d 	bl	800b38c <SDMMC_CmdStopTransfer>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed8:	431a      	orrs	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d103      	bne.n	8009eee <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f002 f9ec 	bl	800c2c4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009eec:	e002      	b.n	8009ef4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f7ff fcfc 	bl	80098ec <HAL_SD_ErrorCallback>
}
 8009ef4:	bf00      	nop
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009efc:	b5b0      	push	{r4, r5, r7, lr}
 8009efe:	b094      	sub	sp, #80	@ 0x50
 8009f00:	af04      	add	r7, sp, #16
 8009f02:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009f04:	2301      	movs	r3, #1
 8009f06:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f001 f90f 	bl	800b130 <SDMMC_GetPowerState>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d102      	bne.n	8009f1e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f18:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009f1c:	e0b8      	b.n	800a090 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	d02f      	beq.n	8009f86 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f001 faf6 	bl	800b51c <SDMMC_CmdSendCID>
 8009f30:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <SD_InitCard+0x40>
    {
      return errorstate;
 8009f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f3a:	e0a9      	b.n	800a090 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2100      	movs	r1, #0
 8009f42:	4618      	mov	r0, r3
 8009f44:	f001 f939 	bl	800b1ba <SDMMC_GetResponse>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2104      	movs	r1, #4
 8009f54:	4618      	mov	r0, r3
 8009f56:	f001 f930 	bl	800b1ba <SDMMC_GetResponse>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2108      	movs	r1, #8
 8009f66:	4618      	mov	r0, r3
 8009f68:	f001 f927 	bl	800b1ba <SDMMC_GetResponse>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	210c      	movs	r1, #12
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f001 f91e 	bl	800b1ba <SDMMC_GetResponse>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f8a:	2b03      	cmp	r3, #3
 8009f8c:	d00d      	beq.n	8009faa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f107 020e 	add.w	r2, r7, #14
 8009f96:	4611      	mov	r1, r2
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f001 fafc 	bl	800b596 <SDMMC_CmdSetRelAdd>
 8009f9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <SD_InitCard+0xae>
    {
      return errorstate;
 8009fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa8:	e072      	b.n	800a090 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fae:	2b03      	cmp	r3, #3
 8009fb0:	d036      	beq.n	800a020 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009fb2:	89fb      	ldrh	r3, [r7, #14]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fc2:	041b      	lsls	r3, r3, #16
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	f001 fac6 	bl	800b558 <SDMMC_CmdSendCSD>
 8009fcc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fd6:	e05b      	b.n	800a090 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2100      	movs	r1, #0
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f001 f8eb 	bl	800b1ba <SDMMC_GetResponse>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2104      	movs	r1, #4
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f001 f8e2 	bl	800b1ba <SDMMC_GetResponse>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2108      	movs	r1, #8
 800a002:	4618      	mov	r0, r3
 800a004:	f001 f8d9 	bl	800b1ba <SDMMC_GetResponse>
 800a008:	4602      	mov	r2, r0
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	210c      	movs	r1, #12
 800a014:	4618      	mov	r0, r3
 800a016:	f001 f8d0 	bl	800b1ba <SDMMC_GetResponse>
 800a01a:	4602      	mov	r2, r0
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2104      	movs	r1, #4
 800a026:	4618      	mov	r0, r3
 800a028:	f001 f8c7 	bl	800b1ba <SDMMC_GetResponse>
 800a02c:	4603      	mov	r3, r0
 800a02e:	0d1a      	lsrs	r2, r3, #20
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a034:	f107 0310 	add.w	r3, r7, #16
 800a038:	4619      	mov	r1, r3
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7ff fc60 	bl	8009900 <HAL_SD_GetCardCSD>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d002      	beq.n	800a04c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a046:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a04a:	e021      	b.n	800a090 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6819      	ldr	r1, [r3, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a054:	041b      	lsls	r3, r3, #16
 800a056:	2200      	movs	r2, #0
 800a058:	461c      	mov	r4, r3
 800a05a:	4615      	mov	r5, r2
 800a05c:	4622      	mov	r2, r4
 800a05e:	462b      	mov	r3, r5
 800a060:	4608      	mov	r0, r1
 800a062:	f001 f9b5 	bl	800b3d0 <SDMMC_CmdSelDesel>
 800a066:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <SD_InitCard+0x176>
  {
    return errorstate;
 800a06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a070:	e00e      	b.n	800a090 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681d      	ldr	r5, [r3, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	466c      	mov	r4, sp
 800a07a:	f103 0210 	add.w	r2, r3, #16
 800a07e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a080:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a084:	3304      	adds	r3, #4
 800a086:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a088:	4628      	mov	r0, r5
 800a08a:	f000 fff9 	bl	800b080 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3740      	adds	r7, #64	@ 0x40
 800a094:	46bd      	mov	sp, r7
 800a096:	bdb0      	pop	{r4, r5, r7, pc}

0800a098 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	617b      	str	r3, [r7, #20]
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f001 f9b0 	bl	800b416 <SDMMC_CmdGoIdleState>
 800a0b6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	e072      	b.n	800a1a8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f001 f9c3 	bl	800b452 <SDMMC_CmdOperCond>
 800a0cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00d      	beq.n	800a0f0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f001 f999 	bl	800b416 <SDMMC_CmdGoIdleState>
 800a0e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d004      	beq.n	800a0f6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	e05b      	b.n	800a1a8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d137      	bne.n	800a16e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2100      	movs	r1, #0
 800a104:	4618      	mov	r0, r3
 800a106:	f001 f9c3 	bl	800b490 <SDMMC_CmdAppCommand>
 800a10a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d02d      	beq.n	800a16e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a112:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a116:	e047      	b.n	800a1a8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2100      	movs	r1, #0
 800a11e:	4618      	mov	r0, r3
 800a120:	f001 f9b6 	bl	800b490 <SDMMC_CmdAppCommand>
 800a124:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <SD_PowerON+0x98>
    {
      return errorstate;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	e03b      	b.n	800a1a8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	491e      	ldr	r1, [pc, #120]	@ (800a1b0 <SD_PowerON+0x118>)
 800a136:	4618      	mov	r0, r3
 800a138:	f001 f9cc 	bl	800b4d4 <SDMMC_CmdAppOperCommand>
 800a13c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a144:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a148:	e02e      	b.n	800a1a8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2100      	movs	r1, #0
 800a150:	4618      	mov	r0, r3
 800a152:	f001 f832 	bl	800b1ba <SDMMC_GetResponse>
 800a156:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	0fdb      	lsrs	r3, r3, #31
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d101      	bne.n	800a164 <SD_PowerON+0xcc>
 800a160:	2301      	movs	r3, #1
 800a162:	e000      	b.n	800a166 <SD_PowerON+0xce>
 800a164:	2300      	movs	r3, #0
 800a166:	613b      	str	r3, [r7, #16]

    count++;
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	3301      	adds	r3, #1
 800a16c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a174:	4293      	cmp	r3, r2
 800a176:	d802      	bhi.n	800a17e <SD_PowerON+0xe6>
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d0cc      	beq.n	800a118 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a184:	4293      	cmp	r3, r2
 800a186:	d902      	bls.n	800a18e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a188:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a18c:	e00c      	b.n	800a1a8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a194:	2b00      	cmp	r3, #0
 800a196:	d003      	beq.n	800a1a0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	645a      	str	r2, [r3, #68]	@ 0x44
 800a19e:	e002      	b.n	800a1a6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3718      	adds	r7, #24
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	c1100000 	.word	0xc1100000

0800a1b4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d102      	bne.n	800a1ca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a1c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a1c8:	e018      	b.n	800a1fc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1d2:	041b      	lsls	r3, r3, #16
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	4610      	mov	r0, r2
 800a1d8:	f001 f9fe 	bl	800b5d8 <SDMMC_CmdSendStatus>
 800a1dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d001      	beq.n	800a1e8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	e009      	b.n	800a1fc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 ffe3 	bl	800b1ba <SDMMC_GetResponse>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a210:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a216:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d03f      	beq.n	800a29e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a21e:	2300      	movs	r3, #0
 800a220:	617b      	str	r3, [r7, #20]
 800a222:	e033      	b.n	800a28c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4618      	mov	r0, r3
 800a22a:	f000 ff55 	bl	800b0d8 <SDMMC_ReadFIFO>
 800a22e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	b2da      	uxtb	r2, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	3301      	adds	r3, #1
 800a23c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	3b01      	subs	r3, #1
 800a242:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	0a1b      	lsrs	r3, r3, #8
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3301      	adds	r3, #1
 800a252:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	3b01      	subs	r3, #1
 800a258:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	0c1b      	lsrs	r3, r3, #16
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	3301      	adds	r3, #1
 800a268:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	0e1b      	lsrs	r3, r3, #24
 800a274:	b2da      	uxtb	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3301      	adds	r3, #1
 800a27e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	3b01      	subs	r3, #1
 800a284:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	3301      	adds	r3, #1
 800a28a:	617b      	str	r3, [r7, #20]
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	2b07      	cmp	r3, #7
 800a290:	d9c8      	bls.n	800a224 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800a29e:	bf00      	nop
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b086      	sub	sp, #24
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a1b      	ldr	r3, [r3, #32]
 800a2b2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d043      	beq.n	800a348 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	617b      	str	r3, [r7, #20]
 800a2c4:	e037      	b.n	800a336 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	021a      	lsls	r2, r3, #8
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	041a      	lsls	r2, r3, #16
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	3301      	adds	r3, #1
 800a300:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	3b01      	subs	r3, #1
 800a306:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	061a      	lsls	r2, r3, #24
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	4313      	orrs	r3, r2
 800a312:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	3301      	adds	r3, #1
 800a318:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f107 0208 	add.w	r2, r7, #8
 800a328:	4611      	mov	r1, r2
 800a32a:	4618      	mov	r0, r3
 800a32c:	f000 fee1 	bl	800b0f2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	3301      	adds	r3, #1
 800a334:	617b      	str	r3, [r7, #20]
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2b07      	cmp	r3, #7
 800a33a:	d9c4      	bls.n	800a2c6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800a348:	bf00      	nop
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e025      	b.n	800a3b0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d106      	bne.n	800a37e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7f6 ff4d 	bl	8001218 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2202      	movs	r2, #2
 800a382:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	3304      	adds	r3, #4
 800a38e:	4619      	mov	r1, r3
 800a390:	4610      	mov	r0, r2
 800a392:	f000 fd73 	bl	800ae7c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6818      	ldr	r0, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	f000 fdc7 	bl	800af34 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a3ca:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a3cc:	7dfb      	ldrb	r3, [r7, #23]
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d101      	bne.n	800a3d6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	e021      	b.n	800a41a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d002      	beq.n	800a3e2 <HAL_SDRAM_SendCommand+0x2a>
 800a3dc:	7dfb      	ldrb	r3, [r7, #23]
 800a3de:	2b05      	cmp	r3, #5
 800a3e0:	d118      	bne.n	800a414 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	68b9      	ldr	r1, [r7, #8]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 fe08 	bl	800b008 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d104      	bne.n	800a40a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2205      	movs	r2, #5
 800a404:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a408:	e006      	b.n	800a418 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a412:	e001      	b.n	800a418 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	e000      	b.n	800a41a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b082      	sub	sp, #8
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2b02      	cmp	r3, #2
 800a436:	d101      	bne.n	800a43c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a438:	2302      	movs	r3, #2
 800a43a:	e016      	b.n	800a46a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b01      	cmp	r3, #1
 800a446:	d10f      	bne.n	800a468 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2202      	movs	r2, #2
 800a44c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6839      	ldr	r1, [r7, #0]
 800a456:	4618      	mov	r0, r3
 800a458:	f000 fdfa 	bl	800b050 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	e000      	b.n	800a46a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e040      	b.n	800a506 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d106      	bne.n	800a49a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7f8 fc8f 	bl	8002db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2224      	movs	r2, #36	@ 0x24
 800a49e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f022 0201 	bic.w	r2, r2, #1
 800a4ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d002      	beq.n	800a4be <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fb15 	bl	800aae8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f8ae 	bl	800a620 <UART_SetConfig>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d101      	bne.n	800a4ce <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e01b      	b.n	800a506 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	685a      	ldr	r2, [r3, #4]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a4dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	689a      	ldr	r2, [r3, #8]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a4ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f042 0201 	orr.w	r2, r2, #1
 800a4fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fb94 	bl	800ac2c <UART_CheckIdleState>
 800a504:	4603      	mov	r3, r0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b08a      	sub	sp, #40	@ 0x28
 800a512:	af02      	add	r7, sp, #8
 800a514:	60f8      	str	r0, [r7, #12]
 800a516:	60b9      	str	r1, [r7, #8]
 800a518:	603b      	str	r3, [r7, #0]
 800a51a:	4613      	mov	r3, r2
 800a51c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a522:	2b20      	cmp	r3, #32
 800a524:	d177      	bne.n	800a616 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d002      	beq.n	800a532 <HAL_UART_Transmit+0x24>
 800a52c:	88fb      	ldrh	r3, [r7, #6]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e070      	b.n	800a618 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2221      	movs	r2, #33	@ 0x21
 800a542:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a544:	f7fa ff82 	bl	800544c <HAL_GetTick>
 800a548:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	88fa      	ldrh	r2, [r7, #6]
 800a54e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	88fa      	ldrh	r2, [r7, #6]
 800a556:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a562:	d108      	bne.n	800a576 <HAL_UART_Transmit+0x68>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d104      	bne.n	800a576 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a56c:	2300      	movs	r3, #0
 800a56e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	61bb      	str	r3, [r7, #24]
 800a574:	e003      	b.n	800a57e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a57a:	2300      	movs	r3, #0
 800a57c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a57e:	e02f      	b.n	800a5e0 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	2200      	movs	r2, #0
 800a588:	2180      	movs	r1, #128	@ 0x80
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 fba5 	bl	800acda <UART_WaitOnFlagUntilTimeout>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d004      	beq.n	800a5a0 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2220      	movs	r2, #32
 800a59a:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a59c:	2303      	movs	r3, #3
 800a59e:	e03b      	b.n	800a618 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10b      	bne.n	800a5be <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	3302      	adds	r3, #2
 800a5ba:	61bb      	str	r3, [r7, #24]
 800a5bc:	e007      	b.n	800a5ce <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	781a      	ldrb	r2, [r3, #0]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d1c9      	bne.n	800a580 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	9300      	str	r3, [sp, #0]
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	2140      	movs	r1, #64	@ 0x40
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f000 fb6f 	bl	800acda <UART_WaitOnFlagUntilTimeout>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d004      	beq.n	800a60c <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2220      	movs	r2, #32
 800a606:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e005      	b.n	800a618 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2220      	movs	r2, #32
 800a610:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a612:	2300      	movs	r3, #0
 800a614:	e000      	b.n	800a618 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a616:	2302      	movs	r3, #2
  }
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3720      	adds	r7, #32
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b088      	sub	sp, #32
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a628:	2300      	movs	r3, #0
 800a62a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	689a      	ldr	r2, [r3, #8]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	431a      	orrs	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	695b      	ldr	r3, [r3, #20]
 800a63a:	431a      	orrs	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	69db      	ldr	r3, [r3, #28]
 800a640:	4313      	orrs	r3, r2
 800a642:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	4ba6      	ldr	r3, [pc, #664]	@ (800a8e4 <UART_SetConfig+0x2c4>)
 800a64c:	4013      	ands	r3, r2
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	6812      	ldr	r2, [r2, #0]
 800a652:	6979      	ldr	r1, [r7, #20]
 800a654:	430b      	orrs	r3, r1
 800a656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	68da      	ldr	r2, [r3, #12]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a1b      	ldr	r3, [r3, #32]
 800a678:	697a      	ldr	r2, [r7, #20]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	430a      	orrs	r2, r1
 800a690:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a94      	ldr	r2, [pc, #592]	@ (800a8e8 <UART_SetConfig+0x2c8>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d120      	bne.n	800a6de <UART_SetConfig+0xbe>
 800a69c:	4b93      	ldr	r3, [pc, #588]	@ (800a8ec <UART_SetConfig+0x2cc>)
 800a69e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6a2:	f003 0303 	and.w	r3, r3, #3
 800a6a6:	2b03      	cmp	r3, #3
 800a6a8:	d816      	bhi.n	800a6d8 <UART_SetConfig+0xb8>
 800a6aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a6b0 <UART_SetConfig+0x90>)
 800a6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b0:	0800a6c1 	.word	0x0800a6c1
 800a6b4:	0800a6cd 	.word	0x0800a6cd
 800a6b8:	0800a6c7 	.word	0x0800a6c7
 800a6bc:	0800a6d3 	.word	0x0800a6d3
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	77fb      	strb	r3, [r7, #31]
 800a6c4:	e150      	b.n	800a968 <UART_SetConfig+0x348>
 800a6c6:	2302      	movs	r3, #2
 800a6c8:	77fb      	strb	r3, [r7, #31]
 800a6ca:	e14d      	b.n	800a968 <UART_SetConfig+0x348>
 800a6cc:	2304      	movs	r3, #4
 800a6ce:	77fb      	strb	r3, [r7, #31]
 800a6d0:	e14a      	b.n	800a968 <UART_SetConfig+0x348>
 800a6d2:	2308      	movs	r3, #8
 800a6d4:	77fb      	strb	r3, [r7, #31]
 800a6d6:	e147      	b.n	800a968 <UART_SetConfig+0x348>
 800a6d8:	2310      	movs	r3, #16
 800a6da:	77fb      	strb	r3, [r7, #31]
 800a6dc:	e144      	b.n	800a968 <UART_SetConfig+0x348>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a83      	ldr	r2, [pc, #524]	@ (800a8f0 <UART_SetConfig+0x2d0>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d132      	bne.n	800a74e <UART_SetConfig+0x12e>
 800a6e8:	4b80      	ldr	r3, [pc, #512]	@ (800a8ec <UART_SetConfig+0x2cc>)
 800a6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6ee:	f003 030c 	and.w	r3, r3, #12
 800a6f2:	2b0c      	cmp	r3, #12
 800a6f4:	d828      	bhi.n	800a748 <UART_SetConfig+0x128>
 800a6f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6fc <UART_SetConfig+0xdc>)
 800a6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fc:	0800a731 	.word	0x0800a731
 800a700:	0800a749 	.word	0x0800a749
 800a704:	0800a749 	.word	0x0800a749
 800a708:	0800a749 	.word	0x0800a749
 800a70c:	0800a73d 	.word	0x0800a73d
 800a710:	0800a749 	.word	0x0800a749
 800a714:	0800a749 	.word	0x0800a749
 800a718:	0800a749 	.word	0x0800a749
 800a71c:	0800a737 	.word	0x0800a737
 800a720:	0800a749 	.word	0x0800a749
 800a724:	0800a749 	.word	0x0800a749
 800a728:	0800a749 	.word	0x0800a749
 800a72c:	0800a743 	.word	0x0800a743
 800a730:	2300      	movs	r3, #0
 800a732:	77fb      	strb	r3, [r7, #31]
 800a734:	e118      	b.n	800a968 <UART_SetConfig+0x348>
 800a736:	2302      	movs	r3, #2
 800a738:	77fb      	strb	r3, [r7, #31]
 800a73a:	e115      	b.n	800a968 <UART_SetConfig+0x348>
 800a73c:	2304      	movs	r3, #4
 800a73e:	77fb      	strb	r3, [r7, #31]
 800a740:	e112      	b.n	800a968 <UART_SetConfig+0x348>
 800a742:	2308      	movs	r3, #8
 800a744:	77fb      	strb	r3, [r7, #31]
 800a746:	e10f      	b.n	800a968 <UART_SetConfig+0x348>
 800a748:	2310      	movs	r3, #16
 800a74a:	77fb      	strb	r3, [r7, #31]
 800a74c:	e10c      	b.n	800a968 <UART_SetConfig+0x348>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a68      	ldr	r2, [pc, #416]	@ (800a8f4 <UART_SetConfig+0x2d4>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d120      	bne.n	800a79a <UART_SetConfig+0x17a>
 800a758:	4b64      	ldr	r3, [pc, #400]	@ (800a8ec <UART_SetConfig+0x2cc>)
 800a75a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a75e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a762:	2b30      	cmp	r3, #48	@ 0x30
 800a764:	d013      	beq.n	800a78e <UART_SetConfig+0x16e>
 800a766:	2b30      	cmp	r3, #48	@ 0x30
 800a768:	d814      	bhi.n	800a794 <UART_SetConfig+0x174>
 800a76a:	2b20      	cmp	r3, #32
 800a76c:	d009      	beq.n	800a782 <UART_SetConfig+0x162>
 800a76e:	2b20      	cmp	r3, #32
 800a770:	d810      	bhi.n	800a794 <UART_SetConfig+0x174>
 800a772:	2b00      	cmp	r3, #0
 800a774:	d002      	beq.n	800a77c <UART_SetConfig+0x15c>
 800a776:	2b10      	cmp	r3, #16
 800a778:	d006      	beq.n	800a788 <UART_SetConfig+0x168>
 800a77a:	e00b      	b.n	800a794 <UART_SetConfig+0x174>
 800a77c:	2300      	movs	r3, #0
 800a77e:	77fb      	strb	r3, [r7, #31]
 800a780:	e0f2      	b.n	800a968 <UART_SetConfig+0x348>
 800a782:	2302      	movs	r3, #2
 800a784:	77fb      	strb	r3, [r7, #31]
 800a786:	e0ef      	b.n	800a968 <UART_SetConfig+0x348>
 800a788:	2304      	movs	r3, #4
 800a78a:	77fb      	strb	r3, [r7, #31]
 800a78c:	e0ec      	b.n	800a968 <UART_SetConfig+0x348>
 800a78e:	2308      	movs	r3, #8
 800a790:	77fb      	strb	r3, [r7, #31]
 800a792:	e0e9      	b.n	800a968 <UART_SetConfig+0x348>
 800a794:	2310      	movs	r3, #16
 800a796:	77fb      	strb	r3, [r7, #31]
 800a798:	e0e6      	b.n	800a968 <UART_SetConfig+0x348>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a56      	ldr	r2, [pc, #344]	@ (800a8f8 <UART_SetConfig+0x2d8>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d120      	bne.n	800a7e6 <UART_SetConfig+0x1c6>
 800a7a4:	4b51      	ldr	r3, [pc, #324]	@ (800a8ec <UART_SetConfig+0x2cc>)
 800a7a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a7ae:	2bc0      	cmp	r3, #192	@ 0xc0
 800a7b0:	d013      	beq.n	800a7da <UART_SetConfig+0x1ba>
 800a7b2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a7b4:	d814      	bhi.n	800a7e0 <UART_SetConfig+0x1c0>
 800a7b6:	2b80      	cmp	r3, #128	@ 0x80
 800a7b8:	d009      	beq.n	800a7ce <UART_SetConfig+0x1ae>
 800a7ba:	2b80      	cmp	r3, #128	@ 0x80
 800a7bc:	d810      	bhi.n	800a7e0 <UART_SetConfig+0x1c0>
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d002      	beq.n	800a7c8 <UART_SetConfig+0x1a8>
 800a7c2:	2b40      	cmp	r3, #64	@ 0x40
 800a7c4:	d006      	beq.n	800a7d4 <UART_SetConfig+0x1b4>
 800a7c6:	e00b      	b.n	800a7e0 <UART_SetConfig+0x1c0>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	77fb      	strb	r3, [r7, #31]
 800a7cc:	e0cc      	b.n	800a968 <UART_SetConfig+0x348>
 800a7ce:	2302      	movs	r3, #2
 800a7d0:	77fb      	strb	r3, [r7, #31]
 800a7d2:	e0c9      	b.n	800a968 <UART_SetConfig+0x348>
 800a7d4:	2304      	movs	r3, #4
 800a7d6:	77fb      	strb	r3, [r7, #31]
 800a7d8:	e0c6      	b.n	800a968 <UART_SetConfig+0x348>
 800a7da:	2308      	movs	r3, #8
 800a7dc:	77fb      	strb	r3, [r7, #31]
 800a7de:	e0c3      	b.n	800a968 <UART_SetConfig+0x348>
 800a7e0:	2310      	movs	r3, #16
 800a7e2:	77fb      	strb	r3, [r7, #31]
 800a7e4:	e0c0      	b.n	800a968 <UART_SetConfig+0x348>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a44      	ldr	r2, [pc, #272]	@ (800a8fc <UART_SetConfig+0x2dc>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d125      	bne.n	800a83c <UART_SetConfig+0x21c>
 800a7f0:	4b3e      	ldr	r3, [pc, #248]	@ (800a8ec <UART_SetConfig+0x2cc>)
 800a7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7fe:	d017      	beq.n	800a830 <UART_SetConfig+0x210>
 800a800:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a804:	d817      	bhi.n	800a836 <UART_SetConfig+0x216>
 800a806:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a80a:	d00b      	beq.n	800a824 <UART_SetConfig+0x204>
 800a80c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a810:	d811      	bhi.n	800a836 <UART_SetConfig+0x216>
 800a812:	2b00      	cmp	r3, #0
 800a814:	d003      	beq.n	800a81e <UART_SetConfig+0x1fe>
 800a816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a81a:	d006      	beq.n	800a82a <UART_SetConfig+0x20a>
 800a81c:	e00b      	b.n	800a836 <UART_SetConfig+0x216>
 800a81e:	2300      	movs	r3, #0
 800a820:	77fb      	strb	r3, [r7, #31]
 800a822:	e0a1      	b.n	800a968 <UART_SetConfig+0x348>
 800a824:	2302      	movs	r3, #2
 800a826:	77fb      	strb	r3, [r7, #31]
 800a828:	e09e      	b.n	800a968 <UART_SetConfig+0x348>
 800a82a:	2304      	movs	r3, #4
 800a82c:	77fb      	strb	r3, [r7, #31]
 800a82e:	e09b      	b.n	800a968 <UART_SetConfig+0x348>
 800a830:	2308      	movs	r3, #8
 800a832:	77fb      	strb	r3, [r7, #31]
 800a834:	e098      	b.n	800a968 <UART_SetConfig+0x348>
 800a836:	2310      	movs	r3, #16
 800a838:	77fb      	strb	r3, [r7, #31]
 800a83a:	e095      	b.n	800a968 <UART_SetConfig+0x348>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a2f      	ldr	r2, [pc, #188]	@ (800a900 <UART_SetConfig+0x2e0>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d125      	bne.n	800a892 <UART_SetConfig+0x272>
 800a846:	4b29      	ldr	r3, [pc, #164]	@ (800a8ec <UART_SetConfig+0x2cc>)
 800a848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a84c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a850:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a854:	d017      	beq.n	800a886 <UART_SetConfig+0x266>
 800a856:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a85a:	d817      	bhi.n	800a88c <UART_SetConfig+0x26c>
 800a85c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a860:	d00b      	beq.n	800a87a <UART_SetConfig+0x25a>
 800a862:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a866:	d811      	bhi.n	800a88c <UART_SetConfig+0x26c>
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d003      	beq.n	800a874 <UART_SetConfig+0x254>
 800a86c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a870:	d006      	beq.n	800a880 <UART_SetConfig+0x260>
 800a872:	e00b      	b.n	800a88c <UART_SetConfig+0x26c>
 800a874:	2301      	movs	r3, #1
 800a876:	77fb      	strb	r3, [r7, #31]
 800a878:	e076      	b.n	800a968 <UART_SetConfig+0x348>
 800a87a:	2302      	movs	r3, #2
 800a87c:	77fb      	strb	r3, [r7, #31]
 800a87e:	e073      	b.n	800a968 <UART_SetConfig+0x348>
 800a880:	2304      	movs	r3, #4
 800a882:	77fb      	strb	r3, [r7, #31]
 800a884:	e070      	b.n	800a968 <UART_SetConfig+0x348>
 800a886:	2308      	movs	r3, #8
 800a888:	77fb      	strb	r3, [r7, #31]
 800a88a:	e06d      	b.n	800a968 <UART_SetConfig+0x348>
 800a88c:	2310      	movs	r3, #16
 800a88e:	77fb      	strb	r3, [r7, #31]
 800a890:	e06a      	b.n	800a968 <UART_SetConfig+0x348>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a1b      	ldr	r2, [pc, #108]	@ (800a904 <UART_SetConfig+0x2e4>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d138      	bne.n	800a90e <UART_SetConfig+0x2ee>
 800a89c:	4b13      	ldr	r3, [pc, #76]	@ (800a8ec <UART_SetConfig+0x2cc>)
 800a89e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a8a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a8aa:	d017      	beq.n	800a8dc <UART_SetConfig+0x2bc>
 800a8ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a8b0:	d82a      	bhi.n	800a908 <UART_SetConfig+0x2e8>
 800a8b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8b6:	d00b      	beq.n	800a8d0 <UART_SetConfig+0x2b0>
 800a8b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8bc:	d824      	bhi.n	800a908 <UART_SetConfig+0x2e8>
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d003      	beq.n	800a8ca <UART_SetConfig+0x2aa>
 800a8c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8c6:	d006      	beq.n	800a8d6 <UART_SetConfig+0x2b6>
 800a8c8:	e01e      	b.n	800a908 <UART_SetConfig+0x2e8>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	77fb      	strb	r3, [r7, #31]
 800a8ce:	e04b      	b.n	800a968 <UART_SetConfig+0x348>
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	77fb      	strb	r3, [r7, #31]
 800a8d4:	e048      	b.n	800a968 <UART_SetConfig+0x348>
 800a8d6:	2304      	movs	r3, #4
 800a8d8:	77fb      	strb	r3, [r7, #31]
 800a8da:	e045      	b.n	800a968 <UART_SetConfig+0x348>
 800a8dc:	2308      	movs	r3, #8
 800a8de:	77fb      	strb	r3, [r7, #31]
 800a8e0:	e042      	b.n	800a968 <UART_SetConfig+0x348>
 800a8e2:	bf00      	nop
 800a8e4:	efff69f3 	.word	0xefff69f3
 800a8e8:	40011000 	.word	0x40011000
 800a8ec:	40023800 	.word	0x40023800
 800a8f0:	40004400 	.word	0x40004400
 800a8f4:	40004800 	.word	0x40004800
 800a8f8:	40004c00 	.word	0x40004c00
 800a8fc:	40005000 	.word	0x40005000
 800a900:	40011400 	.word	0x40011400
 800a904:	40007800 	.word	0x40007800
 800a908:	2310      	movs	r3, #16
 800a90a:	77fb      	strb	r3, [r7, #31]
 800a90c:	e02c      	b.n	800a968 <UART_SetConfig+0x348>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a72      	ldr	r2, [pc, #456]	@ (800aadc <UART_SetConfig+0x4bc>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d125      	bne.n	800a964 <UART_SetConfig+0x344>
 800a918:	4b71      	ldr	r3, [pc, #452]	@ (800aae0 <UART_SetConfig+0x4c0>)
 800a91a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a91e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a922:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a926:	d017      	beq.n	800a958 <UART_SetConfig+0x338>
 800a928:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a92c:	d817      	bhi.n	800a95e <UART_SetConfig+0x33e>
 800a92e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a932:	d00b      	beq.n	800a94c <UART_SetConfig+0x32c>
 800a934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a938:	d811      	bhi.n	800a95e <UART_SetConfig+0x33e>
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d003      	beq.n	800a946 <UART_SetConfig+0x326>
 800a93e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a942:	d006      	beq.n	800a952 <UART_SetConfig+0x332>
 800a944:	e00b      	b.n	800a95e <UART_SetConfig+0x33e>
 800a946:	2300      	movs	r3, #0
 800a948:	77fb      	strb	r3, [r7, #31]
 800a94a:	e00d      	b.n	800a968 <UART_SetConfig+0x348>
 800a94c:	2302      	movs	r3, #2
 800a94e:	77fb      	strb	r3, [r7, #31]
 800a950:	e00a      	b.n	800a968 <UART_SetConfig+0x348>
 800a952:	2304      	movs	r3, #4
 800a954:	77fb      	strb	r3, [r7, #31]
 800a956:	e007      	b.n	800a968 <UART_SetConfig+0x348>
 800a958:	2308      	movs	r3, #8
 800a95a:	77fb      	strb	r3, [r7, #31]
 800a95c:	e004      	b.n	800a968 <UART_SetConfig+0x348>
 800a95e:	2310      	movs	r3, #16
 800a960:	77fb      	strb	r3, [r7, #31]
 800a962:	e001      	b.n	800a968 <UART_SetConfig+0x348>
 800a964:	2310      	movs	r3, #16
 800a966:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	69db      	ldr	r3, [r3, #28]
 800a96c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a970:	d15b      	bne.n	800aa2a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a972:	7ffb      	ldrb	r3, [r7, #31]
 800a974:	2b08      	cmp	r3, #8
 800a976:	d828      	bhi.n	800a9ca <UART_SetConfig+0x3aa>
 800a978:	a201      	add	r2, pc, #4	@ (adr r2, 800a980 <UART_SetConfig+0x360>)
 800a97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97e:	bf00      	nop
 800a980:	0800a9a5 	.word	0x0800a9a5
 800a984:	0800a9ad 	.word	0x0800a9ad
 800a988:	0800a9b5 	.word	0x0800a9b5
 800a98c:	0800a9cb 	.word	0x0800a9cb
 800a990:	0800a9bb 	.word	0x0800a9bb
 800a994:	0800a9cb 	.word	0x0800a9cb
 800a998:	0800a9cb 	.word	0x0800a9cb
 800a99c:	0800a9cb 	.word	0x0800a9cb
 800a9a0:	0800a9c3 	.word	0x0800a9c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9a4:	f7fd f9a6 	bl	8007cf4 <HAL_RCC_GetPCLK1Freq>
 800a9a8:	61b8      	str	r0, [r7, #24]
        break;
 800a9aa:	e013      	b.n	800a9d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9ac:	f7fd f9b6 	bl	8007d1c <HAL_RCC_GetPCLK2Freq>
 800a9b0:	61b8      	str	r0, [r7, #24]
        break;
 800a9b2:	e00f      	b.n	800a9d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a9b4:	4b4b      	ldr	r3, [pc, #300]	@ (800aae4 <UART_SetConfig+0x4c4>)
 800a9b6:	61bb      	str	r3, [r7, #24]
        break;
 800a9b8:	e00c      	b.n	800a9d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9ba:	f7fd f8c9 	bl	8007b50 <HAL_RCC_GetSysClockFreq>
 800a9be:	61b8      	str	r0, [r7, #24]
        break;
 800a9c0:	e008      	b.n	800a9d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9c6:	61bb      	str	r3, [r7, #24]
        break;
 800a9c8:	e004      	b.n	800a9d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	77bb      	strb	r3, [r7, #30]
        break;
 800a9d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d074      	beq.n	800aac4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	005a      	lsls	r2, r3, #1
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	085b      	lsrs	r3, r3, #1
 800a9e4:	441a      	add	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	2b0f      	cmp	r3, #15
 800a9f4:	d916      	bls.n	800aa24 <UART_SetConfig+0x404>
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9fc:	d212      	bcs.n	800aa24 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	f023 030f 	bic.w	r3, r3, #15
 800aa06:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	085b      	lsrs	r3, r3, #1
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	f003 0307 	and.w	r3, r3, #7
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	89fb      	ldrh	r3, [r7, #14]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	89fa      	ldrh	r2, [r7, #14]
 800aa20:	60da      	str	r2, [r3, #12]
 800aa22:	e04f      	b.n	800aac4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	77bb      	strb	r3, [r7, #30]
 800aa28:	e04c      	b.n	800aac4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa2a:	7ffb      	ldrb	r3, [r7, #31]
 800aa2c:	2b08      	cmp	r3, #8
 800aa2e:	d828      	bhi.n	800aa82 <UART_SetConfig+0x462>
 800aa30:	a201      	add	r2, pc, #4	@ (adr r2, 800aa38 <UART_SetConfig+0x418>)
 800aa32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa36:	bf00      	nop
 800aa38:	0800aa5d 	.word	0x0800aa5d
 800aa3c:	0800aa65 	.word	0x0800aa65
 800aa40:	0800aa6d 	.word	0x0800aa6d
 800aa44:	0800aa83 	.word	0x0800aa83
 800aa48:	0800aa73 	.word	0x0800aa73
 800aa4c:	0800aa83 	.word	0x0800aa83
 800aa50:	0800aa83 	.word	0x0800aa83
 800aa54:	0800aa83 	.word	0x0800aa83
 800aa58:	0800aa7b 	.word	0x0800aa7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa5c:	f7fd f94a 	bl	8007cf4 <HAL_RCC_GetPCLK1Freq>
 800aa60:	61b8      	str	r0, [r7, #24]
        break;
 800aa62:	e013      	b.n	800aa8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa64:	f7fd f95a 	bl	8007d1c <HAL_RCC_GetPCLK2Freq>
 800aa68:	61b8      	str	r0, [r7, #24]
        break;
 800aa6a:	e00f      	b.n	800aa8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa6c:	4b1d      	ldr	r3, [pc, #116]	@ (800aae4 <UART_SetConfig+0x4c4>)
 800aa6e:	61bb      	str	r3, [r7, #24]
        break;
 800aa70:	e00c      	b.n	800aa8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa72:	f7fd f86d 	bl	8007b50 <HAL_RCC_GetSysClockFreq>
 800aa76:	61b8      	str	r0, [r7, #24]
        break;
 800aa78:	e008      	b.n	800aa8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa7e:	61bb      	str	r3, [r7, #24]
        break;
 800aa80:	e004      	b.n	800aa8c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800aa82:	2300      	movs	r3, #0
 800aa84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	77bb      	strb	r3, [r7, #30]
        break;
 800aa8a:	bf00      	nop
    }

    if (pclk != 0U)
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d018      	beq.n	800aac4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	085a      	lsrs	r2, r3, #1
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	441a      	add	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	2b0f      	cmp	r3, #15
 800aaaa:	d909      	bls.n	800aac0 <UART_SetConfig+0x4a0>
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aab2:	d205      	bcs.n	800aac0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	60da      	str	r2, [r3, #12]
 800aabe:	e001      	b.n	800aac4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800aad0:	7fbb      	ldrb	r3, [r7, #30]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3720      	adds	r7, #32
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	40007c00 	.word	0x40007c00
 800aae0:	40023800 	.word	0x40023800
 800aae4:	00f42400 	.word	0x00f42400

0800aae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf4:	f003 0308 	and.w	r3, r3, #8
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00a      	beq.n	800ab12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	430a      	orrs	r2, r1
 800ab10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab16:	f003 0301 	and.w	r3, r3, #1
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00a      	beq.n	800ab34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	430a      	orrs	r2, r1
 800ab32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab38:	f003 0302 	and.w	r3, r3, #2
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00a      	beq.n	800ab56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab5a:	f003 0304 	and.w	r3, r3, #4
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00a      	beq.n	800ab78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	430a      	orrs	r2, r1
 800ab76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab7c:	f003 0310 	and.w	r3, r3, #16
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00a      	beq.n	800ab9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	430a      	orrs	r2, r1
 800ab98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab9e:	f003 0320 	and.w	r3, r3, #32
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00a      	beq.n	800abbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	430a      	orrs	r2, r1
 800abba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d01a      	beq.n	800abfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	430a      	orrs	r2, r1
 800abdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abe6:	d10a      	bne.n	800abfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	430a      	orrs	r2, r1
 800abfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00a      	beq.n	800ac20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	430a      	orrs	r2, r1
 800ac1e:	605a      	str	r2, [r3, #4]
  }
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08c      	sub	sp, #48	@ 0x30
 800ac30:	af02      	add	r7, sp, #8
 800ac32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac3c:	f7fa fc06 	bl	800544c <HAL_GetTick>
 800ac40:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0308 	and.w	r3, r3, #8
 800ac4c:	2b08      	cmp	r3, #8
 800ac4e:	d12e      	bne.n	800acae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f83b 	bl	800acda <UART_WaitOnFlagUntilTimeout>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d021      	beq.n	800acae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	e853 3f00 	ldrex	r3, [r3]
 800ac76:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac7e:	623b      	str	r3, [r7, #32]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	461a      	mov	r2, r3
 800ac86:	6a3b      	ldr	r3, [r7, #32]
 800ac88:	61fb      	str	r3, [r7, #28]
 800ac8a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8c:	69b9      	ldr	r1, [r7, #24]
 800ac8e:	69fa      	ldr	r2, [r7, #28]
 800ac90:	e841 2300 	strex	r3, r2, [r1]
 800ac94:	617b      	str	r3, [r7, #20]
   return(result);
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1e6      	bne.n	800ac6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	e011      	b.n	800acd2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2220      	movs	r2, #32
 800acb2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2220      	movs	r2, #32
 800acb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3728      	adds	r7, #40	@ 0x28
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b084      	sub	sp, #16
 800acde:	af00      	add	r7, sp, #0
 800ace0:	60f8      	str	r0, [r7, #12]
 800ace2:	60b9      	str	r1, [r7, #8]
 800ace4:	603b      	str	r3, [r7, #0]
 800ace6:	4613      	mov	r3, r2
 800ace8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acea:	e04f      	b.n	800ad8c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf2:	d04b      	beq.n	800ad8c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acf4:	f7fa fbaa 	bl	800544c <HAL_GetTick>
 800acf8:	4602      	mov	r2, r0
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	1ad3      	subs	r3, r2, r3
 800acfe:	69ba      	ldr	r2, [r7, #24]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d302      	bcc.n	800ad0a <UART_WaitOnFlagUntilTimeout+0x30>
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e04e      	b.n	800adac <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 0304 	and.w	r3, r3, #4
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d037      	beq.n	800ad8c <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2b80      	cmp	r3, #128	@ 0x80
 800ad20:	d034      	beq.n	800ad8c <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b40      	cmp	r3, #64	@ 0x40
 800ad26:	d031      	beq.n	800ad8c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	69db      	ldr	r3, [r3, #28]
 800ad2e:	f003 0308 	and.w	r3, r3, #8
 800ad32:	2b08      	cmp	r3, #8
 800ad34:	d110      	bne.n	800ad58 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2208      	movs	r2, #8
 800ad3c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f000 f838 	bl	800adb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2208      	movs	r2, #8
 800ad48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	e029      	b.n	800adac <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	69db      	ldr	r3, [r3, #28]
 800ad5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad66:	d111      	bne.n	800ad8c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ad70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f000 f81e 	bl	800adb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2220      	movs	r2, #32
 800ad7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ad88:	2303      	movs	r3, #3
 800ad8a:	e00f      	b.n	800adac <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	69da      	ldr	r2, [r3, #28]
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	4013      	ands	r3, r2
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	bf0c      	ite	eq
 800ad9c:	2301      	moveq	r3, #1
 800ad9e:	2300      	movne	r3, #0
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	461a      	mov	r2, r3
 800ada4:	79fb      	ldrb	r3, [r7, #7]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d0a0      	beq.n	800acec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b095      	sub	sp, #84	@ 0x54
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adc4:	e853 3f00 	ldrex	r3, [r3]
 800adc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800adca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800add0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	461a      	mov	r2, r3
 800add8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adda:	643b      	str	r3, [r7, #64]	@ 0x40
 800addc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ade0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ade2:	e841 2300 	strex	r3, r2, [r1]
 800ade6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ade8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1e6      	bne.n	800adbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	3308      	adds	r3, #8
 800adf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf6:	6a3b      	ldr	r3, [r7, #32]
 800adf8:	e853 3f00 	ldrex	r3, [r3]
 800adfc:	61fb      	str	r3, [r7, #28]
   return(result);
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	f023 0301 	bic.w	r3, r3, #1
 800ae04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae16:	e841 2300 	strex	r3, r2, [r1]
 800ae1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1e5      	bne.n	800adee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d118      	bne.n	800ae5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	e853 3f00 	ldrex	r3, [r3]
 800ae36:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	f023 0310 	bic.w	r3, r3, #16
 800ae3e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	461a      	mov	r2, r3
 800ae46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae48:	61bb      	str	r3, [r7, #24]
 800ae4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4c:	6979      	ldr	r1, [r7, #20]
 800ae4e:	69ba      	ldr	r2, [r7, #24]
 800ae50:	e841 2300 	strex	r3, r2, [r1]
 800ae54:	613b      	str	r3, [r7, #16]
   return(result);
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1e6      	bne.n	800ae2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2220      	movs	r2, #32
 800ae60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ae70:	bf00      	nop
 800ae72:	3754      	adds	r7, #84	@ 0x54
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d121      	bne.n	800aed2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	4b27      	ldr	r3, [pc, #156]	@ (800af30 <FMC_SDRAM_Init+0xb4>)
 800ae94:	4013      	ands	r3, r2
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	6851      	ldr	r1, [r2, #4]
 800ae9a:	683a      	ldr	r2, [r7, #0]
 800ae9c:	6892      	ldr	r2, [r2, #8]
 800ae9e:	4311      	orrs	r1, r2
 800aea0:	683a      	ldr	r2, [r7, #0]
 800aea2:	68d2      	ldr	r2, [r2, #12]
 800aea4:	4311      	orrs	r1, r2
 800aea6:	683a      	ldr	r2, [r7, #0]
 800aea8:	6912      	ldr	r2, [r2, #16]
 800aeaa:	4311      	orrs	r1, r2
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	6952      	ldr	r2, [r2, #20]
 800aeb0:	4311      	orrs	r1, r2
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	6992      	ldr	r2, [r2, #24]
 800aeb6:	4311      	orrs	r1, r2
 800aeb8:	683a      	ldr	r2, [r7, #0]
 800aeba:	69d2      	ldr	r2, [r2, #28]
 800aebc:	4311      	orrs	r1, r2
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	6a12      	ldr	r2, [r2, #32]
 800aec2:	4311      	orrs	r1, r2
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800aec8:	430a      	orrs	r2, r1
 800aeca:	431a      	orrs	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	601a      	str	r2, [r3, #0]
 800aed0:	e026      	b.n	800af20 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	69d9      	ldr	r1, [r3, #28]
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	6a1b      	ldr	r3, [r3, #32]
 800aee2:	4319      	orrs	r1, r3
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aee8:	430b      	orrs	r3, r1
 800aeea:	431a      	orrs	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	685a      	ldr	r2, [r3, #4]
 800aef4:	4b0e      	ldr	r3, [pc, #56]	@ (800af30 <FMC_SDRAM_Init+0xb4>)
 800aef6:	4013      	ands	r3, r2
 800aef8:	683a      	ldr	r2, [r7, #0]
 800aefa:	6851      	ldr	r1, [r2, #4]
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	6892      	ldr	r2, [r2, #8]
 800af00:	4311      	orrs	r1, r2
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	68d2      	ldr	r2, [r2, #12]
 800af06:	4311      	orrs	r1, r2
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	6912      	ldr	r2, [r2, #16]
 800af0c:	4311      	orrs	r1, r2
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	6952      	ldr	r2, [r2, #20]
 800af12:	4311      	orrs	r1, r2
 800af14:	683a      	ldr	r2, [r7, #0]
 800af16:	6992      	ldr	r2, [r2, #24]
 800af18:	430a      	orrs	r2, r1
 800af1a:	431a      	orrs	r2, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	370c      	adds	r7, #12
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	ffff8000 	.word	0xffff8000

0800af34 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d128      	bne.n	800af98 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	1e59      	subs	r1, r3, #1
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	3b01      	subs	r3, #1
 800af5a:	011b      	lsls	r3, r3, #4
 800af5c:	4319      	orrs	r1, r3
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	3b01      	subs	r3, #1
 800af64:	021b      	lsls	r3, r3, #8
 800af66:	4319      	orrs	r1, r3
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	031b      	lsls	r3, r3, #12
 800af70:	4319      	orrs	r1, r3
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	3b01      	subs	r3, #1
 800af78:	041b      	lsls	r3, r3, #16
 800af7a:	4319      	orrs	r1, r3
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	695b      	ldr	r3, [r3, #20]
 800af80:	3b01      	subs	r3, #1
 800af82:	051b      	lsls	r3, r3, #20
 800af84:	4319      	orrs	r1, r3
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	3b01      	subs	r3, #1
 800af8c:	061b      	lsls	r3, r3, #24
 800af8e:	430b      	orrs	r3, r1
 800af90:	431a      	orrs	r2, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	609a      	str	r2, [r3, #8]
 800af96:	e02d      	b.n	800aff4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	689a      	ldr	r2, [r3, #8]
 800af9c:	4b19      	ldr	r3, [pc, #100]	@ (800b004 <FMC_SDRAM_Timing_Init+0xd0>)
 800af9e:	4013      	ands	r3, r2
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	68d2      	ldr	r2, [r2, #12]
 800afa4:	3a01      	subs	r2, #1
 800afa6:	0311      	lsls	r1, r2, #12
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	6952      	ldr	r2, [r2, #20]
 800afac:	3a01      	subs	r2, #1
 800afae:	0512      	lsls	r2, r2, #20
 800afb0:	430a      	orrs	r2, r1
 800afb2:	431a      	orrs	r2, r3
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	1e59      	subs	r1, r3, #1
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	3b01      	subs	r3, #1
 800afcc:	011b      	lsls	r3, r3, #4
 800afce:	4319      	orrs	r1, r3
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	3b01      	subs	r3, #1
 800afd6:	021b      	lsls	r3, r3, #8
 800afd8:	4319      	orrs	r1, r3
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	3b01      	subs	r3, #1
 800afe0:	041b      	lsls	r3, r3, #16
 800afe2:	4319      	orrs	r1, r3
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	3b01      	subs	r3, #1
 800afea:	061b      	lsls	r3, r3, #24
 800afec:	430b      	orrs	r3, r1
 800afee:	431a      	orrs	r2, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3714      	adds	r7, #20
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	ff0f0fff 	.word	0xff0f0fff

0800b008 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	691a      	ldr	r2, [r3, #16]
 800b018:	4b0c      	ldr	r3, [pc, #48]	@ (800b04c <FMC_SDRAM_SendCommand+0x44>)
 800b01a:	4013      	ands	r3, r2
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	6811      	ldr	r1, [r2, #0]
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	6852      	ldr	r2, [r2, #4]
 800b024:	4311      	orrs	r1, r2
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	6892      	ldr	r2, [r2, #8]
 800b02a:	3a01      	subs	r2, #1
 800b02c:	0152      	lsls	r2, r2, #5
 800b02e:	4311      	orrs	r1, r2
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	68d2      	ldr	r2, [r2, #12]
 800b034:	0252      	lsls	r2, r2, #9
 800b036:	430a      	orrs	r2, r1
 800b038:	431a      	orrs	r2, r3
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3714      	adds	r7, #20
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr
 800b04c:	ffc00000 	.word	0xffc00000

0800b050 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	695a      	ldr	r2, [r3, #20]
 800b05e:	4b07      	ldr	r3, [pc, #28]	@ (800b07c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b060:	4013      	ands	r3, r2
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	0052      	lsls	r2, r2, #1
 800b066:	431a      	orrs	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	370c      	adds	r7, #12
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	ffffc001 	.word	0xffffc001

0800b080 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b080:	b084      	sub	sp, #16
 800b082:	b480      	push	{r7}
 800b084:	b085      	sub	sp, #20
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	f107 001c 	add.w	r0, r7, #28
 800b08e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b092:	2300      	movs	r3, #0
 800b094:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b096:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b098:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b09a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800b09e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800b0a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800b0a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800b0aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	4b07      	ldr	r3, [pc, #28]	@ (800b0d4 <SDMMC_Init+0x54>)
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	431a      	orrs	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	b004      	add	sp, #16
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	ffff8100 	.word	0xffff8100

0800b0d8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr

0800b0f2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800b0f2:	b480      	push	{r7}
 800b0f4:	b083      	sub	sp, #12
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2203      	movs	r2, #3
 800b120:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 0303 	and.w	r3, r3, #3
}
 800b140:	4618      	mov	r0, r3
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b16a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b170:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b176:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	68da      	ldr	r2, [r3, #12]
 800b182:	4b06      	ldr	r3, [pc, #24]	@ (800b19c <SDMMC_SendCommand+0x50>)
 800b184:	4013      	ands	r3, r2
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	431a      	orrs	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3714      	adds	r7, #20
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	fffff000 	.word	0xfffff000

0800b1a0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	b2db      	uxtb	r3, r3
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	370c      	adds	r7, #12
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b085      	sub	sp, #20
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
 800b1c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	3314      	adds	r3, #20
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
}  
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	685a      	ldr	r2, [r3, #4]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b206:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b20c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b212:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	4313      	orrs	r3, r2
 800b218:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b21e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	431a      	orrs	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b22a:	2300      	movs	r3, #0

}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b088      	sub	sp, #32
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b246:	2310      	movs	r3, #16
 800b248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b24a:	2340      	movs	r3, #64	@ 0x40
 800b24c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b24e:	2300      	movs	r3, #0
 800b250:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b252:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b256:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b258:	f107 0308 	add.w	r3, r7, #8
 800b25c:	4619      	mov	r1, r3
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f7ff ff74 	bl	800b14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b264:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b268:	2110      	movs	r1, #16
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f9d6 	bl	800b61c <SDMMC_GetCmdResp1>
 800b270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b272:	69fb      	ldr	r3, [r7, #28]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3720      	adds	r7, #32
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b28a:	2311      	movs	r3, #17
 800b28c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b28e:	2340      	movs	r3, #64	@ 0x40
 800b290:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b292:	2300      	movs	r3, #0
 800b294:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b29a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b29c:	f107 0308 	add.w	r3, r7, #8
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7ff ff52 	bl	800b14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b2a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2ac:	2111      	movs	r1, #17
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f9b4 	bl	800b61c <SDMMC_GetCmdResp1>
 800b2b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2b6:	69fb      	ldr	r3, [r7, #28]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3720      	adds	r7, #32
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b088      	sub	sp, #32
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b2ce:	2312      	movs	r3, #18
 800b2d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2d2:	2340      	movs	r3, #64	@ 0x40
 800b2d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2e0:	f107 0308 	add.w	r3, r7, #8
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7ff ff30 	bl	800b14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b2ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2f0:	2112      	movs	r1, #18
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f992 	bl	800b61c <SDMMC_GetCmdResp1>
 800b2f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2fa:	69fb      	ldr	r3, [r7, #28]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3720      	adds	r7, #32
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b088      	sub	sp, #32
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b312:	2318      	movs	r3, #24
 800b314:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b316:	2340      	movs	r3, #64	@ 0x40
 800b318:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b31a:	2300      	movs	r3, #0
 800b31c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b31e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b322:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b324:	f107 0308 	add.w	r3, r7, #8
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff ff0e 	bl	800b14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b330:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b334:	2118      	movs	r1, #24
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f970 	bl	800b61c <SDMMC_GetCmdResp1>
 800b33c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b33e:	69fb      	ldr	r3, [r7, #28]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3720      	adds	r7, #32
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b088      	sub	sp, #32
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b356:	2319      	movs	r3, #25
 800b358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b35a:	2340      	movs	r3, #64	@ 0x40
 800b35c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b35e:	2300      	movs	r3, #0
 800b360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b366:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b368:	f107 0308 	add.w	r3, r7, #8
 800b36c:	4619      	mov	r1, r3
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7ff feec 	bl	800b14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b374:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b378:	2119      	movs	r1, #25
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 f94e 	bl	800b61c <SDMMC_GetCmdResp1>
 800b380:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b382:	69fb      	ldr	r3, [r7, #28]
}
 800b384:	4618      	mov	r0, r3
 800b386:	3720      	adds	r7, #32
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b088      	sub	sp, #32
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b394:	2300      	movs	r3, #0
 800b396:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b398:	230c      	movs	r3, #12
 800b39a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b39c:	2340      	movs	r3, #64	@ 0x40
 800b39e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3aa:	f107 0308 	add.w	r3, r7, #8
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7ff fecb 	bl	800b14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b3b6:	4a05      	ldr	r2, [pc, #20]	@ (800b3cc <SDMMC_CmdStopTransfer+0x40>)
 800b3b8:	210c      	movs	r1, #12
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f92e 	bl	800b61c <SDMMC_GetCmdResp1>
 800b3c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3c2:	69fb      	ldr	r3, [r7, #28]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3720      	adds	r7, #32
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	05f5e100 	.word	0x05f5e100

0800b3d0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b08a      	sub	sp, #40	@ 0x28
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b3e0:	2307      	movs	r3, #7
 800b3e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3e4:	2340      	movs	r3, #64	@ 0x40
 800b3e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3f0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3f2:	f107 0310 	add.w	r3, r7, #16
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f7ff fea7 	bl	800b14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b3fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b402:	2107      	movs	r1, #7
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f000 f909 	bl	800b61c <SDMMC_GetCmdResp1>
 800b40a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800b40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3728      	adds	r7, #40	@ 0x28
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b088      	sub	sp, #32
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b41e:	2300      	movs	r3, #0
 800b420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b422:	2300      	movs	r3, #0
 800b424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b426:	2300      	movs	r3, #0
 800b428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b42a:	2300      	movs	r3, #0
 800b42c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b42e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b432:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b434:	f107 0308 	add.w	r3, r7, #8
 800b438:	4619      	mov	r1, r3
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7ff fe86 	bl	800b14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 fb23 	bl	800ba8c <SDMMC_GetCmdError>
 800b446:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b448:	69fb      	ldr	r3, [r7, #28]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3720      	adds	r7, #32
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b088      	sub	sp, #32
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b45a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b45e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b460:	2308      	movs	r3, #8
 800b462:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b464:	2340      	movs	r3, #64	@ 0x40
 800b466:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b468:	2300      	movs	r3, #0
 800b46a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b46c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b470:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b472:	f107 0308 	add.w	r3, r7, #8
 800b476:	4619      	mov	r1, r3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7ff fe67 	bl	800b14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fab6 	bl	800b9f0 <SDMMC_GetCmdResp7>
 800b484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b486:	69fb      	ldr	r3, [r7, #28]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3720      	adds	r7, #32
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b088      	sub	sp, #32
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b49e:	2337      	movs	r3, #55	@ 0x37
 800b4a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4a2:	2340      	movs	r3, #64	@ 0x40
 800b4a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4b0:	f107 0308 	add.w	r3, r7, #8
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7ff fe48 	bl	800b14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b4bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4c0:	2137      	movs	r1, #55	@ 0x37
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f8aa 	bl	800b61c <SDMMC_GetCmdResp1>
 800b4c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4ca:	69fb      	ldr	r3, [r7, #28]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3720      	adds	r7, #32
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b088      	sub	sp, #32
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	4b0d      	ldr	r3, [pc, #52]	@ (800b518 <SDMMC_CmdAppOperCommand+0x44>)
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b4e6:	2329      	movs	r3, #41	@ 0x29
 800b4e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4ea:	2340      	movs	r3, #64	@ 0x40
 800b4ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4f8:	f107 0308 	add.w	r3, r7, #8
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f7ff fe24 	bl	800b14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f9bf 	bl	800b888 <SDMMC_GetCmdResp3>
 800b50a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b50c:	69fb      	ldr	r3, [r7, #28]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3720      	adds	r7, #32
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	80100000 	.word	0x80100000

0800b51c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b088      	sub	sp, #32
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b524:	2300      	movs	r3, #0
 800b526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b528:	2302      	movs	r3, #2
 800b52a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b52c:	23c0      	movs	r3, #192	@ 0xc0
 800b52e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b530:	2300      	movs	r3, #0
 800b532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b534:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b538:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b53a:	f107 0308 	add.w	r3, r7, #8
 800b53e:	4619      	mov	r1, r3
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff fe03 	bl	800b14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f956 	bl	800b7f8 <SDMMC_GetCmdResp2>
 800b54c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b54e:	69fb      	ldr	r3, [r7, #28]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3720      	adds	r7, #32
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b088      	sub	sp, #32
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b566:	2309      	movs	r3, #9
 800b568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b56a:	23c0      	movs	r3, #192	@ 0xc0
 800b56c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b56e:	2300      	movs	r3, #0
 800b570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b576:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b578:	f107 0308 	add.w	r3, r7, #8
 800b57c:	4619      	mov	r1, r3
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7ff fde4 	bl	800b14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f937 	bl	800b7f8 <SDMMC_GetCmdResp2>
 800b58a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b58c:	69fb      	ldr	r3, [r7, #28]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3720      	adds	r7, #32
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b088      	sub	sp, #32
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
 800b59e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b5a4:	2303      	movs	r3, #3
 800b5a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5a8:	2340      	movs	r3, #64	@ 0x40
 800b5aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5b6:	f107 0308 	add.w	r3, r7, #8
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f7ff fdc5 	bl	800b14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	2103      	movs	r1, #3
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f99c 	bl	800b904 <SDMMC_GetCmdResp6>
 800b5cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5ce:	69fb      	ldr	r3, [r7, #28]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3720      	adds	r7, #32
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b088      	sub	sp, #32
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b5e6:	230d      	movs	r3, #13
 800b5e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5ea:	2340      	movs	r3, #64	@ 0x40
 800b5ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5f8:	f107 0308 	add.w	r3, r7, #8
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f7ff fda4 	bl	800b14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b604:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b608:	210d      	movs	r1, #13
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f806 	bl	800b61c <SDMMC_GetCmdResp1>
 800b610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b612:	69fb      	ldr	r3, [r7, #28]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3720      	adds	r7, #32
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	460b      	mov	r3, r1
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b62a:	4b70      	ldr	r3, [pc, #448]	@ (800b7ec <SDMMC_GetCmdResp1+0x1d0>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a70      	ldr	r2, [pc, #448]	@ (800b7f0 <SDMMC_GetCmdResp1+0x1d4>)
 800b630:	fba2 2303 	umull	r2, r3, r2, r3
 800b634:	0a5a      	lsrs	r2, r3, #9
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	fb02 f303 	mul.w	r3, r2, r3
 800b63c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	1e5a      	subs	r2, r3, #1
 800b642:	61fa      	str	r2, [r7, #28]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d102      	bne.n	800b64e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b648:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b64c:	e0c9      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b652:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d0ef      	beq.n	800b63e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b65e:	69bb      	ldr	r3, [r7, #24]
 800b660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b664:	2b00      	cmp	r3, #0
 800b666:	d1ea      	bne.n	800b63e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b66c:	f003 0304 	and.w	r3, r3, #4
 800b670:	2b00      	cmp	r3, #0
 800b672:	d004      	beq.n	800b67e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2204      	movs	r2, #4
 800b678:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b67a:	2304      	movs	r3, #4
 800b67c:	e0b1      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	2b00      	cmp	r3, #0
 800b688:	d004      	beq.n	800b694 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2201      	movs	r2, #1
 800b68e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b690:	2301      	movs	r3, #1
 800b692:	e0a6      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	22c5      	movs	r2, #197	@ 0xc5
 800b698:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f7ff fd80 	bl	800b1a0 <SDMMC_GetCommandResponse>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	7afb      	ldrb	r3, [r7, #11]
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d001      	beq.n	800b6ae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e099      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f7ff fd82 	bl	800b1ba <SDMMC_GetResponse>
 800b6b6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b6b8:	697a      	ldr	r2, [r7, #20]
 800b6ba:	4b4e      	ldr	r3, [pc, #312]	@ (800b7f4 <SDMMC_GetCmdResp1+0x1d8>)
 800b6bc:	4013      	ands	r3, r2
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d101      	bne.n	800b6c6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	e08d      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	da02      	bge.n	800b6d2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b6cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b6d0:	e087      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b6dc:	2340      	movs	r3, #64	@ 0x40
 800b6de:	e080      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d001      	beq.n	800b6ee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b6ea:	2380      	movs	r3, #128	@ 0x80
 800b6ec:	e079      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b6f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b6fc:	e071      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b704:	2b00      	cmp	r3, #0
 800b706:	d002      	beq.n	800b70e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b708:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b70c:	e069      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b714:	2b00      	cmp	r3, #0
 800b716:	d002      	beq.n	800b71e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b718:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b71c:	e061      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b724:	2b00      	cmp	r3, #0
 800b726:	d002      	beq.n	800b72e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b728:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b72c:	e059      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b73c:	e051      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b744:	2b00      	cmp	r3, #0
 800b746:	d002      	beq.n	800b74e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b748:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b74c:	e049      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b754:	2b00      	cmp	r3, #0
 800b756:	d002      	beq.n	800b75e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b758:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b75c:	e041      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b764:	2b00      	cmp	r3, #0
 800b766:	d002      	beq.n	800b76e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b768:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b76c:	e039      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b774:	2b00      	cmp	r3, #0
 800b776:	d002      	beq.n	800b77e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b778:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b77c:	e031      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b784:	2b00      	cmp	r3, #0
 800b786:	d002      	beq.n	800b78e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b788:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b78c:	e029      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b798:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b79c:	e021      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d002      	beq.n	800b7ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b7a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b7ac:	e019      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d002      	beq.n	800b7be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b7b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b7bc:	e011      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d002      	beq.n	800b7ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b7c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b7cc:	e009      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	f003 0308 	and.w	r3, r3, #8
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b7d8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b7dc:	e001      	b.n	800b7e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b7de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3720      	adds	r7, #32
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	20000018 	.word	0x20000018
 800b7f0:	10624dd3 	.word	0x10624dd3
 800b7f4:	fdffe008 	.word	0xfdffe008

0800b7f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b800:	4b1f      	ldr	r3, [pc, #124]	@ (800b880 <SDMMC_GetCmdResp2+0x88>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a1f      	ldr	r2, [pc, #124]	@ (800b884 <SDMMC_GetCmdResp2+0x8c>)
 800b806:	fba2 2303 	umull	r2, r3, r2, r3
 800b80a:	0a5b      	lsrs	r3, r3, #9
 800b80c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b810:	fb02 f303 	mul.w	r3, r2, r3
 800b814:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	1e5a      	subs	r2, r3, #1
 800b81a:	60fa      	str	r2, [r7, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d102      	bne.n	800b826 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b820:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b824:	e026      	b.n	800b874 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b82a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b832:	2b00      	cmp	r3, #0
 800b834:	d0ef      	beq.n	800b816 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1ea      	bne.n	800b816 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b844:	f003 0304 	and.w	r3, r3, #4
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d004      	beq.n	800b856 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2204      	movs	r2, #4
 800b850:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b852:	2304      	movs	r3, #4
 800b854:	e00e      	b.n	800b874 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b85a:	f003 0301 	and.w	r3, r3, #1
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d004      	beq.n	800b86c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2201      	movs	r2, #1
 800b866:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b868:	2301      	movs	r3, #1
 800b86a:	e003      	b.n	800b874 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	22c5      	movs	r2, #197	@ 0xc5
 800b870:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3714      	adds	r7, #20
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	20000018 	.word	0x20000018
 800b884:	10624dd3 	.word	0x10624dd3

0800b888 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b888:	b480      	push	{r7}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b890:	4b1a      	ldr	r3, [pc, #104]	@ (800b8fc <SDMMC_GetCmdResp3+0x74>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a1a      	ldr	r2, [pc, #104]	@ (800b900 <SDMMC_GetCmdResp3+0x78>)
 800b896:	fba2 2303 	umull	r2, r3, r2, r3
 800b89a:	0a5b      	lsrs	r3, r3, #9
 800b89c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8a0:	fb02 f303 	mul.w	r3, r2, r3
 800b8a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	1e5a      	subs	r2, r3, #1
 800b8aa:	60fa      	str	r2, [r7, #12]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d102      	bne.n	800b8b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b8b4:	e01b      	b.n	800b8ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d0ef      	beq.n	800b8a6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1ea      	bne.n	800b8a6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8d4:	f003 0304 	and.w	r3, r3, #4
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d004      	beq.n	800b8e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2204      	movs	r2, #4
 800b8e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8e2:	2304      	movs	r3, #4
 800b8e4:	e003      	b.n	800b8ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	22c5      	movs	r2, #197	@ 0xc5
 800b8ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3714      	adds	r7, #20
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr
 800b8fa:	bf00      	nop
 800b8fc:	20000018 	.word	0x20000018
 800b900:	10624dd3 	.word	0x10624dd3

0800b904 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b088      	sub	sp, #32
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	460b      	mov	r3, r1
 800b90e:	607a      	str	r2, [r7, #4]
 800b910:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b912:	4b35      	ldr	r3, [pc, #212]	@ (800b9e8 <SDMMC_GetCmdResp6+0xe4>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a35      	ldr	r2, [pc, #212]	@ (800b9ec <SDMMC_GetCmdResp6+0xe8>)
 800b918:	fba2 2303 	umull	r2, r3, r2, r3
 800b91c:	0a5b      	lsrs	r3, r3, #9
 800b91e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b922:	fb02 f303 	mul.w	r3, r2, r3
 800b926:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	1e5a      	subs	r2, r3, #1
 800b92c:	61fa      	str	r2, [r7, #28]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d102      	bne.n	800b938 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b932:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b936:	e052      	b.n	800b9de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b93c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b944:	2b00      	cmp	r3, #0
 800b946:	d0ef      	beq.n	800b928 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1ea      	bne.n	800b928 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b956:	f003 0304 	and.w	r3, r3, #4
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d004      	beq.n	800b968 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2204      	movs	r2, #4
 800b962:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b964:	2304      	movs	r3, #4
 800b966:	e03a      	b.n	800b9de <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b96c:	f003 0301 	and.w	r3, r3, #1
 800b970:	2b00      	cmp	r3, #0
 800b972:	d004      	beq.n	800b97e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2201      	movs	r2, #1
 800b978:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b97a:	2301      	movs	r3, #1
 800b97c:	e02f      	b.n	800b9de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f7ff fc0e 	bl	800b1a0 <SDMMC_GetCommandResponse>
 800b984:	4603      	mov	r3, r0
 800b986:	461a      	mov	r2, r3
 800b988:	7afb      	ldrb	r3, [r7, #11]
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d001      	beq.n	800b992 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b98e:	2301      	movs	r3, #1
 800b990:	e025      	b.n	800b9de <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	22c5      	movs	r2, #197	@ 0xc5
 800b996:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b998:	2100      	movs	r1, #0
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f7ff fc0d 	bl	800b1ba <SDMMC_GetResponse>
 800b9a0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d106      	bne.n	800b9ba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	0c1b      	lsrs	r3, r3, #16
 800b9b0:	b29a      	uxth	r2, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	e011      	b.n	800b9de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d002      	beq.n	800b9ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b9c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b9c8:	e009      	b.n	800b9de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b9d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b9d8:	e001      	b.n	800b9de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3720      	adds	r7, #32
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	20000018 	.word	0x20000018
 800b9ec:	10624dd3 	.word	0x10624dd3

0800b9f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9f8:	4b22      	ldr	r3, [pc, #136]	@ (800ba84 <SDMMC_GetCmdResp7+0x94>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a22      	ldr	r2, [pc, #136]	@ (800ba88 <SDMMC_GetCmdResp7+0x98>)
 800b9fe:	fba2 2303 	umull	r2, r3, r2, r3
 800ba02:	0a5b      	lsrs	r3, r3, #9
 800ba04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba08:	fb02 f303 	mul.w	r3, r2, r3
 800ba0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	1e5a      	subs	r2, r3, #1
 800ba12:	60fa      	str	r2, [r7, #12]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d102      	bne.n	800ba1e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ba1c:	e02c      	b.n	800ba78 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba22:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d0ef      	beq.n	800ba0e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1ea      	bne.n	800ba0e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba3c:	f003 0304 	and.w	r3, r3, #4
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d004      	beq.n	800ba4e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2204      	movs	r2, #4
 800ba48:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba4a:	2304      	movs	r3, #4
 800ba4c:	e014      	b.n	800ba78 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba52:	f003 0301 	and.w	r3, r3, #1
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d004      	beq.n	800ba64 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba60:	2301      	movs	r3, #1
 800ba62:	e009      	b.n	800ba78 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d002      	beq.n	800ba76 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2240      	movs	r2, #64	@ 0x40
 800ba74:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ba76:	2300      	movs	r3, #0
  
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3714      	adds	r7, #20
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr
 800ba84:	20000018 	.word	0x20000018
 800ba88:	10624dd3 	.word	0x10624dd3

0800ba8c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba94:	4b11      	ldr	r3, [pc, #68]	@ (800badc <SDMMC_GetCmdError+0x50>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a11      	ldr	r2, [pc, #68]	@ (800bae0 <SDMMC_GetCmdError+0x54>)
 800ba9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba9e:	0a5b      	lsrs	r3, r3, #9
 800baa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800baa4:	fb02 f303 	mul.w	r3, r2, r3
 800baa8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	1e5a      	subs	r2, r3, #1
 800baae:	60fa      	str	r2, [r7, #12]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d102      	bne.n	800baba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bab4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bab8:	e009      	b.n	800bace <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800babe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d0f1      	beq.n	800baaa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	22c5      	movs	r2, #197	@ 0xc5
 800baca:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	20000018 	.word	0x20000018
 800bae0:	10624dd3 	.word	0x10624dd3

0800bae4 <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b090      	sub	sp, #64	@ 0x40
 800bae8:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800baea:	2300      	movs	r3, #0
 800baec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20];

  uwVolume = 100;
 800baee:	4b33      	ldr	r3, [pc, #204]	@ (800bbbc <AUDIO_REC_Start+0xd8>)
 800baf0:	2264      	movs	r2, #100	@ 0x64
 800baf2:	601a      	str	r2, [r3, #0]

  /* Create a new file system */
  if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 800baf4:	2200      	movs	r2, #0
 800baf6:	4932      	ldr	r1, [pc, #200]	@ (800bbc0 <AUDIO_REC_Start+0xdc>)
 800baf8:	4832      	ldr	r0, [pc, #200]	@ (800bbc4 <AUDIO_REC_Start+0xe0>)
 800bafa:	f002 faed 	bl	800e0d8 <f_mount>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d002      	beq.n	800bb0a <AUDIO_REC_Start+0x26>
    	Error_Handler(); /* FatFs Initialization Error */
 800bb04:	f7f6 fd67 	bl	80025d6 <Error_Handler>
 800bb08:	e052      	b.n	800bbb0 <AUDIO_REC_Start+0xcc>
  } else {
	  printf("SD card mounted\r\n");
 800bb0a:	482f      	ldr	r0, [pc, #188]	@ (800bbc8 <AUDIO_REC_Start+0xe4>)
 800bb0c:	f009 fc4c 	bl	80153a8 <puts>
		  	  sizeof(workBuffer)) != FR_OK) {
		  Error_Handler(); / * FatFs Format Error */
//	  } else {
//	  */

	  printf("WAV file created\r\n");
 800bb10:	482e      	ldr	r0, [pc, #184]	@ (800bbcc <AUDIO_REC_Start+0xe8>)
 800bb12:	f009 fc49 	bl	80153a8 <puts>
	  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800bb16:	220a      	movs	r2, #10
 800bb18:	492d      	ldr	r1, [pc, #180]	@ (800bbd0 <AUDIO_REC_Start+0xec>)
 800bb1a:	482e      	ldr	r0, [pc, #184]	@ (800bbd4 <AUDIO_REC_Start+0xf0>)
 800bb1c:	f002 fb22 	bl	800e164 <f_open>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d144      	bne.n	800bbb0 <AUDIO_REC_Start+0xcc>
	  {
		/* Initialize header file */
		WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 800bb26:	492c      	ldr	r1, [pc, #176]	@ (800bbd8 <AUDIO_REC_Start+0xf4>)
 800bb28:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800bb2c:	f000 f9c6 	bl	800bebc <WavProcess_EncInit>

		/* Write header file */
		if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 800bb30:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800bb34:	222c      	movs	r2, #44	@ 0x2c
 800bb36:	4928      	ldr	r1, [pc, #160]	@ (800bbd8 <AUDIO_REC_Start+0xf4>)
 800bb38:	4826      	ldr	r0, [pc, #152]	@ (800bbd4 <AUDIO_REC_Start+0xf0>)
 800bb3a:	f002 fe0c 	bl	800e756 <f_write>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d135      	bne.n	800bbb0 <AUDIO_REC_Start+0xcc>
		{
		  printf("State : ready to record\r\n");
 800bb44:	4825      	ldr	r0, [pc, #148]	@ (800bbdc <AUDIO_REC_Start+0xf8>)
 800bb46:	f009 fc2f 	bl	80153a8 <puts>
		  AudioState = AUDIO_STATE_RECORD;
 800bb4a:	4b25      	ldr	r3, [pc, #148]	@ (800bbe0 <AUDIO_REC_Start+0xfc>)
 800bb4c:	2205      	movs	r2, #5
 800bb4e:	701a      	strb	r2, [r3, #0]

			if(byteswritten != 0)
 800bb50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d02c      	beq.n	800bbb0 <AUDIO_REC_Start+0xcc>
			{
			  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR); // 1 mono
 800bb56:	2202      	movs	r2, #2
 800bb58:	2110      	movs	r1, #16
 800bb5a:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800bb5e:	f7f9 f81b 	bl	8004b98 <BSP_AUDIO_IN_Init>
			  printf("Recording config initialized\r\n");
 800bb62:	4820      	ldr	r0, [pc, #128]	@ (800bbe4 <AUDIO_REC_Start+0x100>)
 800bb64:	f009 fc20 	bl	80153a8 <puts>
			  BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
 800bb68:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 800bb6c:	481e      	ldr	r0, [pc, #120]	@ (800bbe8 <AUDIO_REC_Start+0x104>)
 800bb6e:	f7f9 f891 	bl	8004c94 <BSP_AUDIO_IN_Record>
			  printf("Recording started...\r\n");
 800bb72:	481e      	ldr	r0, [pc, #120]	@ (800bbec <AUDIO_REC_Start+0x108>)
 800bb74:	f009 fc18 	bl	80153a8 <puts>
			  BufferCtl.fptr = byteswritten;
 800bb78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb7a:	4a1b      	ldr	r2, [pc, #108]	@ (800bbe8 <AUDIO_REC_Start+0x104>)
 800bb7c:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800bb80:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
			  BufferCtl.pcm_ptr = 0;
 800bb84:	4b18      	ldr	r3, [pc, #96]	@ (800bbe8 <AUDIO_REC_Start+0x104>)
 800bb86:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
			  BufferCtl.offset = 0;
 800bb92:	4b15      	ldr	r3, [pc, #84]	@ (800bbe8 <AUDIO_REC_Start+0x104>)
 800bb94:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bb98:	461a      	mov	r2, r3
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
			  BufferCtl.wr_state = BUFFER_EMPTY;
 800bba0:	4b11      	ldr	r3, [pc, #68]	@ (800bbe8 <AUDIO_REC_Start+0x104>)
 800bba2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bba6:	2200      	movs	r2, #0
 800bba8:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			  return AUDIO_ERROR_NONE;
 800bbac:	2300      	movs	r3, #0
 800bbae:	e000      	b.n	800bbb2 <AUDIO_REC_Start+0xce>
			}
		}
	  }
	  //}
  }
  return AUDIO_ERROR_IO;
 800bbb0:	2301      	movs	r3, #1
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3740      	adds	r7, #64	@ 0x40
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20000058 	.word	0x20000058
 800bbc0:	20035d34 	.word	0x20035d34
 800bbc4:	20035d38 	.word	0x20035d38
 800bbc8:	08018754 	.word	0x08018754
 800bbcc:	08018768 	.word	0x08018768
 800bbd0:	0801877c 	.word	0x0801877c
 800bbd4:	20035b00 	.word	0x20035b00
 800bbd8:	20031298 	.word	0x20031298
 800bbdc:	08018788 	.word	0x08018788
 800bbe0:	20000a58 	.word	0x20000a58
 800bbe4:	080187a4 	.word	0x080187a4
 800bbe8:	200312c4 	.word	0x200312c4
 800bbec:	080187c4 	.word	0x080187c4

0800bbf0 <AUDIO_REC_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_REC_Process(void)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b088      	sub	sp, #32
 800bbf4:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	617b      	str	r3, [r7, #20]
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	77fb      	strb	r3, [r7, #31]
  uint32_t elapsed_time; 
  static uint32_t prev_elapsed_time = 0xFFFFFFFF;
  uint8_t str[16];
  //static TS_StateTypeDef  TS_State={0};
  //printf("PRE SWITCH\r\n");
  switch(AudioState)
 800bbfe:	4b59      	ldr	r3, [pc, #356]	@ (800bd64 <AUDIO_REC_Process+0x174>)
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	2b05      	cmp	r3, #5
 800bc04:	d002      	beq.n	800bc0c <AUDIO_REC_Process+0x1c>
 800bc06:	2b0a      	cmp	r3, #10
 800bc08:	d079      	beq.n	800bcfe <AUDIO_REC_Process+0x10e>

  	case AUDIO_STATE_IDLE:
  	case AUDIO_STATE_INIT:
  	default:
      /* Do Nothing */
      break;
 800bc0a:	e0a7      	b.n	800bd5c <AUDIO_REC_Process+0x16c>
      if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
 800bc0c:	4b56      	ldr	r3, [pc, #344]	@ (800bd68 <AUDIO_REC_Process+0x178>)
 800bc0e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bc12:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800bc16:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 800bc1a:	d303      	bcc.n	800bc24 <AUDIO_REC_Process+0x34>
        AudioState = AUDIO_STATE_STOP;
 800bc1c:	4b51      	ldr	r3, [pc, #324]	@ (800bd64 <AUDIO_REC_Process+0x174>)
 800bc1e:	220a      	movs	r2, #10
 800bc20:	701a      	strb	r2, [r3, #0]
        break;
 800bc22:	e09b      	b.n	800bd5c <AUDIO_REC_Process+0x16c>
      if(BufferCtl.wr_state == BUFFER_FULL)
 800bc24:	4b50      	ldr	r3, [pc, #320]	@ (800bd68 <AUDIO_REC_Process+0x178>)
 800bc26:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bc2a:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d128      	bne.n	800bc84 <AUDIO_REC_Process+0x94>
        if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset),
 800bc32:	4b4d      	ldr	r3, [pc, #308]	@ (800bd68 <AUDIO_REC_Process+0x178>)
 800bc34:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bc38:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800bc3c:	005b      	lsls	r3, r3, #1
 800bc3e:	4a4a      	ldr	r2, [pc, #296]	@ (800bd68 <AUDIO_REC_Process+0x178>)
 800bc40:	1899      	adds	r1, r3, r2
 800bc42:	f107 0314 	add.w	r3, r7, #20
 800bc46:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 800bc4a:	4848      	ldr	r0, [pc, #288]	@ (800bd6c <AUDIO_REC_Process+0x17c>)
 800bc4c:	f002 fd83 	bl	800e756 <f_write>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d004      	beq.n	800bc60 <AUDIO_REC_Process+0x70>
          printf("recording failed\r\n");
 800bc56:	4846      	ldr	r0, [pc, #280]	@ (800bd70 <AUDIO_REC_Process+0x180>)
 800bc58:	f009 fba6 	bl	80153a8 <puts>
          return AUDIO_ERROR_IO;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e07d      	b.n	800bd5c <AUDIO_REC_Process+0x16c>
        BufferCtl.fptr += byteswritten;
 800bc60:	4b41      	ldr	r3, [pc, #260]	@ (800bd68 <AUDIO_REC_Process+0x178>)
 800bc62:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bc66:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	4a3e      	ldr	r2, [pc, #248]	@ (800bd68 <AUDIO_REC_Process+0x178>)
 800bc70:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800bc74:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
        BufferCtl.wr_state =  BUFFER_EMPTY;
 800bc78:	4b3b      	ldr	r3, [pc, #236]	@ (800bd68 <AUDIO_REC_Process+0x178>)
 800bc7a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
      elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2);
 800bc84:	4b38      	ldr	r3, [pc, #224]	@ (800bd68 <AUDIO_REC_Process+0x178>)
 800bc86:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bc8a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800bc8e:	4a39      	ldr	r2, [pc, #228]	@ (800bd74 <AUDIO_REC_Process+0x184>)
 800bc90:	fba2 2303 	umull	r2, r3, r2, r3
 800bc94:	0b1b      	lsrs	r3, r3, #12
 800bc96:	61bb      	str	r3, [r7, #24]
      if(prev_elapsed_time != elapsed_time)
 800bc98:	4b37      	ldr	r3, [pc, #220]	@ (800bd78 <AUDIO_REC_Process+0x188>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	69ba      	ldr	r2, [r7, #24]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d05b      	beq.n	800bd5a <AUDIO_REC_Process+0x16a>
        prev_elapsed_time = elapsed_time;
 800bca2:	4a35      	ldr	r2, [pc, #212]	@ (800bd78 <AUDIO_REC_Process+0x188>)
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	6013      	str	r3, [r2, #0]
        printf("Elapsed time : \r\n");
 800bca8:	4834      	ldr	r0, [pc, #208]	@ (800bd7c <AUDIO_REC_Process+0x18c>)
 800bcaa:	f009 fb7d 	bl	80153a8 <puts>
        printf("[%02d:%02d]\r\n", (int)(elapsed_time /60), (int)(elapsed_time%60));
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	4a33      	ldr	r2, [pc, #204]	@ (800bd80 <AUDIO_REC_Process+0x190>)
 800bcb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcb6:	095b      	lsrs	r3, r3, #5
 800bcb8:	4618      	mov	r0, r3
 800bcba:	69b9      	ldr	r1, [r7, #24]
 800bcbc:	4b30      	ldr	r3, [pc, #192]	@ (800bd80 <AUDIO_REC_Process+0x190>)
 800bcbe:	fba3 2301 	umull	r2, r3, r3, r1
 800bcc2:	095a      	lsrs	r2, r3, #5
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	011b      	lsls	r3, r3, #4
 800bcc8:	1a9b      	subs	r3, r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	1aca      	subs	r2, r1, r3
 800bcce:	4613      	mov	r3, r2
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	4601      	mov	r1, r0
 800bcd4:	482b      	ldr	r0, [pc, #172]	@ (800bd84 <AUDIO_REC_Process+0x194>)
 800bcd6:	f009 faff 	bl	80152d8 <iprintf>
        printf("File size : \r\n");
 800bcda:	482b      	ldr	r0, [pc, #172]	@ (800bd88 <AUDIO_REC_Process+0x198>)
 800bcdc:	f009 fb64 	bl	80153a8 <puts>
        printf("%4d KB\r\n", (int)((int32_t)BufferCtl.fptr/1024));
 800bce0:	4b21      	ldr	r3, [pc, #132]	@ (800bd68 <AUDIO_REC_Process+0x178>)
 800bce2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bce6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	da01      	bge.n	800bcf2 <AUDIO_REC_Process+0x102>
 800bcee:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800bcf2:	129b      	asrs	r3, r3, #10
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	4825      	ldr	r0, [pc, #148]	@ (800bd8c <AUDIO_REC_Process+0x19c>)
 800bcf8:	f009 faee 	bl	80152d8 <iprintf>
      break;
 800bcfc:	e02d      	b.n	800bd5a <AUDIO_REC_Process+0x16a>
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800bcfe:	2002      	movs	r0, #2
 800bd00:	f7f8 ffe0 	bl	8004cc4 <BSP_AUDIO_IN_Stop>
      HAL_Delay(300);
 800bd04:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bd08:	f7f9 fbac 	bl	8005464 <HAL_Delay>
      if(f_lseek(&WavFile, 0) == FR_OK)
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	4817      	ldr	r0, [pc, #92]	@ (800bd6c <AUDIO_REC_Process+0x17c>)
 800bd10:	f002 ff3e 	bl	800eb90 <f_lseek>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d113      	bne.n	800bd42 <AUDIO_REC_Process+0x152>
        WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 800bd1a:	491d      	ldr	r1, [pc, #116]	@ (800bd90 <AUDIO_REC_Process+0x1a0>)
 800bd1c:	481d      	ldr	r0, [pc, #116]	@ (800bd94 <AUDIO_REC_Process+0x1a4>)
 800bd1e:	f000 f9e5 	bl	800c0ec <WavProcess_HeaderUpdate>
        if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 800bd22:	f107 0314 	add.w	r3, r7, #20
 800bd26:	222c      	movs	r2, #44	@ 0x2c
 800bd28:	491a      	ldr	r1, [pc, #104]	@ (800bd94 <AUDIO_REC_Process+0x1a4>)
 800bd2a:	4810      	ldr	r0, [pc, #64]	@ (800bd6c <AUDIO_REC_Process+0x17c>)
 800bd2c:	f002 fd13 	bl	800e756 <f_write>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d102      	bne.n	800bd3c <AUDIO_REC_Process+0x14c>
          audio_error = AUDIO_ERROR_EOF;
 800bd36:	2302      	movs	r3, #2
 800bd38:	77fb      	strb	r3, [r7, #31]
 800bd3a:	e004      	b.n	800bd46 <AUDIO_REC_Process+0x156>
          audio_error = AUDIO_ERROR_IO;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	77fb      	strb	r3, [r7, #31]
 800bd40:	e001      	b.n	800bd46 <AUDIO_REC_Process+0x156>
        audio_error = AUDIO_ERROR_IO;
 800bd42:	2301      	movs	r3, #1
 800bd44:	77fb      	strb	r3, [r7, #31]
      AudioState = AUDIO_STATE_IDLE;
 800bd46:	4b07      	ldr	r3, [pc, #28]	@ (800bd64 <AUDIO_REC_Process+0x174>)
 800bd48:	2200      	movs	r2, #0
 800bd4a:	701a      	strb	r2, [r3, #0]
      f_close(&WavFile);
 800bd4c:	4807      	ldr	r0, [pc, #28]	@ (800bd6c <AUDIO_REC_Process+0x17c>)
 800bd4e:	f002 fef5 	bl	800eb3c <f_close>
      printf("wave file closed success\r\n");
 800bd52:	4811      	ldr	r0, [pc, #68]	@ (800bd98 <AUDIO_REC_Process+0x1a8>)
 800bd54:	f009 fb28 	bl	80153a8 <puts>
      break;
 800bd58:	e000      	b.n	800bd5c <AUDIO_REC_Process+0x16c>
      break;
 800bd5a:	bf00      	nop
      return audio_error;
    }
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3720      	adds	r7, #32
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	20000a58 	.word	0x20000a58
 800bd68:	200312c4 	.word	0x200312c4
 800bd6c:	20035b00 	.word	0x20035b00
 800bd70:	080187dc 	.word	0x080187dc
 800bd74:	10624dd3 	.word	0x10624dd3
 800bd78:	2000005c 	.word	0x2000005c
 800bd7c:	080187f0 	.word	0x080187f0
 800bd80:	88888889 	.word	0x88888889
 800bd84:	08018804 	.word	0x08018804
 800bd88:	08018814 	.word	0x08018814
 800bd8c:	08018824 	.word	0x08018824
 800bd90:	20035ad4 	.word	0x20035ad4
 800bd94:	20031298 	.word	0x20031298
 800bd98:	08018830 	.word	0x08018830

0800bd9c <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800bda0:	4b21      	ldr	r3, [pc, #132]	@ (800be28 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800bda2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bda6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800bdaa:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800bdae:	4a1e      	ldr	r2, [pc, #120]	@ (800be28 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800bdb0:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800bdb4:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800bdb8:	4b1b      	ldr	r3, [pc, #108]	@ (800be28 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800bdba:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bdbe:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800bdc2:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800bdc6:	d10c      	bne.n	800bde2 <BSP_AUDIO_IN_TransferComplete_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800bdc8:	4b17      	ldr	r3, [pc, #92]	@ (800be28 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800bdca:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800bdd4:	4b14      	ldr	r3, [pc, #80]	@ (800be28 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800bdd6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bdda:	461a      	mov	r2, r3
 800bddc:	2300      	movs	r3, #0
 800bdde:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800bde2:	4b11      	ldr	r3, [pc, #68]	@ (800be28 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800bde4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bde8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800bdec:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800bdf0:	d314      	bcc.n	800be1c <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800bdf2:	4b0d      	ldr	r3, [pc, #52]	@ (800be28 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800bdf4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800bdfe:	4b0a      	ldr	r3, [pc, #40]	@ (800be28 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800be00:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800be04:	461a      	mov	r2, r3
 800be06:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800be0a:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800be0e:	4b06      	ldr	r3, [pc, #24]	@ (800be28 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800be10:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800be14:	461a      	mov	r2, r3
 800be16:	2300      	movs	r3, #0
 800be18:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800be1c:	bf00      	nop
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	200312c4 	.word	0x200312c4

0800be2c <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 800be2c:	b480      	push	{r7}
 800be2e:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800be30:	4b21      	ldr	r3, [pc, #132]	@ (800beb8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800be32:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800be36:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800be3a:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800be3e:	4a1e      	ldr	r2, [pc, #120]	@ (800beb8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800be40:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800be44:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800be48:	4b1b      	ldr	r3, [pc, #108]	@ (800beb8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800be4a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800be4e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800be52:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800be56:	d10c      	bne.n	800be72 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800be58:	4b17      	ldr	r3, [pc, #92]	@ (800beb8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800be5a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800be5e:	2201      	movs	r2, #1
 800be60:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800be64:	4b14      	ldr	r3, [pc, #80]	@ (800beb8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800be66:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800be6a:	461a      	mov	r2, r3
 800be6c:	2300      	movs	r3, #0
 800be6e:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800be72:	4b11      	ldr	r3, [pc, #68]	@ (800beb8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800be74:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800be78:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800be7c:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800be80:	d314      	bcc.n	800beac <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800be82:	4b0d      	ldr	r3, [pc, #52]	@ (800beb8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800be84:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800be88:	2201      	movs	r2, #1
 800be8a:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800be8e:	4b0a      	ldr	r3, [pc, #40]	@ (800beb8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800be90:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800be94:	461a      	mov	r2, r3
 800be96:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800be9a:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800be9e:	4b06      	ldr	r3, [pc, #24]	@ (800beb8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800bea0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bea4:	461a      	mov	r2, r3
 800bea6:	2300      	movs	r3, #0
 800bea8:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800beac:	bf00      	nop
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	200312c4 	.word	0x200312c4

0800bebc <WavProcess_EncInit>:
  * @param  Freq: Sampling frequency.
  * @param  pHeader: Pointer to the WAV file header to be written.  
  * @retval 0 if success, !0 else.
  */
static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{  
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 800bec6:	4a1b      	ldr	r2, [pc, #108]	@ (800bf34 <WavProcess_EncInit+0x78>)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800becc:	4b19      	ldr	r3, [pc, #100]	@ (800bf34 <WavProcess_EncInit+0x78>)
 800bece:	2202      	movs	r2, #2
 800bed0:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800bed2:	4b18      	ldr	r3, [pc, #96]	@ (800bf34 <WavProcess_EncInit+0x78>)
 800bed4:	2210      	movs	r2, #16
 800bed6:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800bed8:	4b16      	ldr	r3, [pc, #88]	@ (800bf34 <WavProcess_EncInit+0x78>)
 800beda:	4a17      	ldr	r2, [pc, #92]	@ (800bf38 <WavProcess_EncInit+0x7c>)
 800bedc:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800bede:	4b15      	ldr	r3, [pc, #84]	@ (800bf34 <WavProcess_EncInit+0x78>)
 800bee0:	222c      	movs	r2, #44	@ 0x2c
 800bee2:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800bee4:	4b13      	ldr	r3, [pc, #76]	@ (800bf34 <WavProcess_EncInit+0x78>)
 800bee6:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800bee8:	4a12      	ldr	r2, [pc, #72]	@ (800bf34 <WavProcess_EncInit+0x78>)
 800beea:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800beec:	08d2      	lsrs	r2, r2, #3
 800beee:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800bef0:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800bef4:	4a0f      	ldr	r2, [pc, #60]	@ (800bf34 <WavProcess_EncInit+0x78>)
 800bef6:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800bef8:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800befc:	4a0d      	ldr	r2, [pc, #52]	@ (800bf34 <WavProcess_EncInit+0x78>)
 800befe:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800bf00:	4b0c      	ldr	r3, [pc, #48]	@ (800bf34 <WavProcess_EncInit+0x78>)
 800bf02:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800bf04:	4b0b      	ldr	r3, [pc, #44]	@ (800bf34 <WavProcess_EncInit+0x78>)
 800bf06:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800bf08:	08db      	lsrs	r3, r3, #3
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	fb12 f303 	smulbb	r3, r2, r3
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	4b08      	ldr	r3, [pc, #32]	@ (800bf34 <WavProcess_EncInit+0x78>)
 800bf14:	841a      	strh	r2, [r3, #32]
  
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 800bf16:	4907      	ldr	r1, [pc, #28]	@ (800bf34 <WavProcess_EncInit+0x78>)
 800bf18:	6838      	ldr	r0, [r7, #0]
 800bf1a:	f000 f80f 	bl	800bf3c <WavProcess_HeaderInit>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d001      	beq.n	800bf28 <WavProcess_EncInit+0x6c>
  {
    return 1;
 800bf24:	2301      	movs	r3, #1
 800bf26:	e000      	b.n	800bf2a <WavProcess_EncInit+0x6e>
  }
  return 0;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	20035ad4 	.word	0x20035ad4
 800bf38:	001d4c00 	.word	0x001d4c00

0800bf3c <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2252      	movs	r2, #82	@ 0x52
 800bf4a:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	2249      	movs	r2, #73	@ 0x49
 800bf52:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	3302      	adds	r3, #2
 800bf58:	2246      	movs	r2, #70	@ 0x46
 800bf5a:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	3303      	adds	r3, #3
 800bf60:	2246      	movs	r2, #70	@ 0x46
 800bf62:	701a      	strb	r2, [r3, #0]
  
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	3304      	adds	r3, #4
 800bf68:	2200      	movs	r2, #0
 800bf6a:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	3305      	adds	r3, #5
 800bf70:	224c      	movs	r2, #76	@ 0x4c
 800bf72:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	3306      	adds	r3, #6
 800bf78:	221d      	movs	r2, #29
 800bf7a:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3307      	adds	r3, #7
 800bf80:	2200      	movs	r2, #0
 800bf82:	701a      	strb	r2, [r3, #0]
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	3308      	adds	r3, #8
 800bf88:	2257      	movs	r2, #87	@ 0x57
 800bf8a:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	3309      	adds	r3, #9
 800bf90:	2241      	movs	r2, #65	@ 0x41
 800bf92:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	330a      	adds	r3, #10
 800bf98:	2256      	movs	r2, #86	@ 0x56
 800bf9a:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	330b      	adds	r3, #11
 800bfa0:	2245      	movs	r2, #69	@ 0x45
 800bfa2:	701a      	strb	r2, [r3, #0]
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	330c      	adds	r3, #12
 800bfa8:	2266      	movs	r2, #102	@ 0x66
 800bfaa:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	330d      	adds	r3, #13
 800bfb0:	226d      	movs	r2, #109	@ 0x6d
 800bfb2:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	330e      	adds	r3, #14
 800bfb8:	2274      	movs	r2, #116	@ 0x74
 800bfba:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	330f      	adds	r3, #15
 800bfc0:	2220      	movs	r2, #32
 800bfc2:	701a      	strb	r2, [r3, #0]
  
  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	3310      	adds	r3, #16
 800bfc8:	2210      	movs	r2, #16
 800bfca:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	3311      	adds	r3, #17
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	3312      	adds	r3, #18
 800bfd8:	2200      	movs	r2, #0
 800bfda:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	3313      	adds	r3, #19
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	701a      	strb	r2, [r3, #0]
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	3314      	adds	r3, #20
 800bfe8:	2201      	movs	r2, #1
 800bfea:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	3315      	adds	r3, #21
 800bff0:	2200      	movs	r2, #0
 800bff2:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	8ada      	ldrh	r2, [r3, #22]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	3316      	adds	r3, #22
 800bffc:	b2d2      	uxtb	r2, r2
 800bffe:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	3317      	adds	r3, #23
 800c004:	2200      	movs	r2, #0
 800c006:	701a      	strb	r2, [r3, #0]
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	699a      	ldr	r2, [r3, #24]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	3318      	adds	r3, #24
 800c010:	b2d2      	uxtb	r2, r2
 800c012:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	699b      	ldr	r3, [r3, #24]
 800c018:	0a1a      	lsrs	r2, r3, #8
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	3319      	adds	r3, #25
 800c01e:	b2d2      	uxtb	r2, r2
 800c020:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	699b      	ldr	r3, [r3, #24]
 800c026:	0c1a      	lsrs	r2, r3, #16
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	331a      	adds	r3, #26
 800c02c:	b2d2      	uxtb	r2, r2
 800c02e:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	0e1a      	lsrs	r2, r3, #24
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	331b      	adds	r3, #27
 800c03a:	b2d2      	uxtb	r2, r2
 800c03c:	701a      	strb	r2, [r3, #0]
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	69da      	ldr	r2, [r3, #28]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	331c      	adds	r3, #28
 800c046:	b2d2      	uxtb	r2, r2
 800c048:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	69db      	ldr	r3, [r3, #28]
 800c04e:	0a1a      	lsrs	r2, r3, #8
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	331d      	adds	r3, #29
 800c054:	b2d2      	uxtb	r2, r2
 800c056:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	69db      	ldr	r3, [r3, #28]
 800c05c:	0c1a      	lsrs	r2, r3, #16
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	331e      	adds	r3, #30
 800c062:	b2d2      	uxtb	r2, r2
 800c064:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	69db      	ldr	r3, [r3, #28]
 800c06a:	0e1a      	lsrs	r2, r3, #24
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	331f      	adds	r3, #31
 800c070:	b2d2      	uxtb	r2, r2
 800c072:	701a      	strb	r2, [r3, #0]
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	8c1a      	ldrh	r2, [r3, #32]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	3320      	adds	r3, #32
 800c07c:	b2d2      	uxtb	r2, r2
 800c07e:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	3321      	adds	r3, #33	@ 0x21
 800c084:	2200      	movs	r2, #0
 800c086:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	3322      	adds	r3, #34	@ 0x22
 800c090:	b2d2      	uxtb	r2, r2
 800c092:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	3323      	adds	r3, #35	@ 0x23
 800c098:	2200      	movs	r2, #0
 800c09a:	701a      	strb	r2, [r3, #0]
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	3324      	adds	r3, #36	@ 0x24
 800c0a0:	2264      	movs	r2, #100	@ 0x64
 800c0a2:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	3325      	adds	r3, #37	@ 0x25
 800c0a8:	2261      	movs	r2, #97	@ 0x61
 800c0aa:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	3326      	adds	r3, #38	@ 0x26
 800c0b0:	2274      	movs	r2, #116	@ 0x74
 800c0b2:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	3327      	adds	r3, #39	@ 0x27
 800c0b8:	2261      	movs	r2, #97	@ 0x61
 800c0ba:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	3328      	adds	r3, #40	@ 0x28
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	3329      	adds	r3, #41	@ 0x29
 800c0c8:	224c      	movs	r2, #76	@ 0x4c
 800c0ca:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	332a      	adds	r3, #42	@ 0x2a
 800c0d0:	221d      	movs	r2, #29
 800c0d2:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	332b      	adds	r3, #43	@ 0x2b
 800c0d8:	2200      	movs	r2, #0
 800c0da:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
	...

0800c0ec <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 800c0f6:	4b30      	ldr	r3, [pc, #192]	@ (800c1b8 <WavProcess_HeaderUpdate+0xcc>)
 800c0f8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800c0fc:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	3304      	adds	r3, #4
 800c104:	b2d2      	uxtb	r2, r2
 800c106:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 800c108:	4b2b      	ldr	r3, [pc, #172]	@ (800c1b8 <WavProcess_HeaderUpdate+0xcc>)
 800c10a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800c10e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800c112:	0a1a      	lsrs	r2, r3, #8
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	3305      	adds	r3, #5
 800c118:	b2d2      	uxtb	r2, r2
 800c11a:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 800c11c:	4b26      	ldr	r3, [pc, #152]	@ (800c1b8 <WavProcess_HeaderUpdate+0xcc>)
 800c11e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800c122:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800c126:	0c1a      	lsrs	r2, r3, #16
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	3306      	adds	r3, #6
 800c12c:	b2d2      	uxtb	r2, r2
 800c12e:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 800c130:	4b21      	ldr	r3, [pc, #132]	@ (800c1b8 <WavProcess_HeaderUpdate+0xcc>)
 800c132:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800c136:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800c13a:	0e1a      	lsrs	r2, r3, #24
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	3307      	adds	r3, #7
 800c140:	b2d2      	uxtb	r2, r2
 800c142:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 800c144:	4b1c      	ldr	r3, [pc, #112]	@ (800c1b8 <WavProcess_HeaderUpdate+0xcc>)
 800c146:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800c14a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800c14e:	3b2c      	subs	r3, #44	@ 0x2c
 800c150:	4a19      	ldr	r2, [pc, #100]	@ (800c1b8 <WavProcess_HeaderUpdate+0xcc>)
 800c152:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800c156:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 800c15a:	4b17      	ldr	r3, [pc, #92]	@ (800c1b8 <WavProcess_HeaderUpdate+0xcc>)
 800c15c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800c160:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	3328      	adds	r3, #40	@ 0x28
 800c168:	b2d2      	uxtb	r2, r2
 800c16a:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 800c16c:	4b12      	ldr	r3, [pc, #72]	@ (800c1b8 <WavProcess_HeaderUpdate+0xcc>)
 800c16e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800c172:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800c176:	0a1a      	lsrs	r2, r3, #8
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	3329      	adds	r3, #41	@ 0x29
 800c17c:	b2d2      	uxtb	r2, r2
 800c17e:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 800c180:	4b0d      	ldr	r3, [pc, #52]	@ (800c1b8 <WavProcess_HeaderUpdate+0xcc>)
 800c182:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800c186:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800c18a:	0c1a      	lsrs	r2, r3, #16
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	332a      	adds	r3, #42	@ 0x2a
 800c190:	b2d2      	uxtb	r2, r2
 800c192:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 800c194:	4b08      	ldr	r3, [pc, #32]	@ (800c1b8 <WavProcess_HeaderUpdate+0xcc>)
 800c196:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800c19a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800c19e:	0e1a      	lsrs	r2, r3, #24
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	332b      	adds	r3, #43	@ 0x2b
 800c1a4:	b2d2      	uxtb	r2, r2
 800c1a6:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	370c      	adds	r7, #12
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	200312c4 	.word	0x200312c4

0800c1bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c1c0:	4904      	ldr	r1, [pc, #16]	@ (800c1d4 <MX_FATFS_Init+0x18>)
 800c1c2:	4805      	ldr	r0, [pc, #20]	@ (800c1d8 <MX_FATFS_Init+0x1c>)
 800c1c4:	f003 fb66 	bl	800f894 <FATFS_LinkDriver>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	4b03      	ldr	r3, [pc, #12]	@ (800c1dc <MX_FATFS_Init+0x20>)
 800c1ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c1d0:	bf00      	nop
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	20035d34 	.word	0x20035d34
 800c1d8:	080188e0 	.word	0x080188e0
 800c1dc:	20035d30 	.word	0x20035d30

0800c1e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c1e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c1fa:	f000 f888 	bl	800c30e <BSP_SD_IsDetected>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b01      	cmp	r3, #1
 800c202:	d001      	beq.n	800c208 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c204:	2302      	movs	r3, #2
 800c206:	e005      	b.n	800c214 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c208:	4804      	ldr	r0, [pc, #16]	@ (800c21c <BSP_SD_Init+0x2c>)
 800c20a:	f7fc ff78 	bl	80090fe <HAL_SD_Init>
 800c20e:	4603      	mov	r3, r0
 800c210:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800c212:	79fb      	ldrb	r3, [r7, #7]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	20030ddc 	.word	0x20030ddc

0800c220 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b086      	sub	sp, #24
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c22c:	2300      	movs	r3, #0
 800c22e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	68ba      	ldr	r2, [r7, #8]
 800c234:	68f9      	ldr	r1, [r7, #12]
 800c236:	4806      	ldr	r0, [pc, #24]	@ (800c250 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c238:	f7fd f81a 	bl	8009270 <HAL_SD_ReadBlocks_DMA>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d001      	beq.n	800c246 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c242:	2301      	movs	r3, #1
 800c244:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c246:	7dfb      	ldrb	r3, [r7, #23]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3718      	adds	r7, #24
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	20030ddc 	.word	0x20030ddc

0800c254 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b086      	sub	sp, #24
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	68f9      	ldr	r1, [r7, #12]
 800c26a:	4806      	ldr	r0, [pc, #24]	@ (800c284 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c26c:	f7fd f8e2 	bl	8009434 <HAL_SD_WriteBlocks_DMA>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d001      	beq.n	800c27a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c27a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3718      	adds	r7, #24
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	20030ddc 	.word	0x20030ddc

0800c288 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c28c:	4805      	ldr	r0, [pc, #20]	@ (800c2a4 <BSP_SD_GetCardState+0x1c>)
 800c28e:	f7fd fd07 	bl	8009ca0 <HAL_SD_GetCardState>
 800c292:	4603      	mov	r3, r0
 800c294:	2b04      	cmp	r3, #4
 800c296:	bf14      	ite	ne
 800c298:	2301      	movne	r3, #1
 800c29a:	2300      	moveq	r3, #0
 800c29c:	b2db      	uxtb	r3, r3
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	20030ddc 	.word	0x20030ddc

0800c2a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c2b0:	6879      	ldr	r1, [r7, #4]
 800c2b2:	4803      	ldr	r0, [pc, #12]	@ (800c2c0 <BSP_SD_GetCardInfo+0x18>)
 800c2b4:	f7fd fcc8 	bl	8009c48 <HAL_SD_GetCardInfo>
}
 800c2b8:	bf00      	nop
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	20030ddc 	.word	0x20030ddc

0800c2c4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800c2cc:	f000 f818 	bl	800c300 <BSP_SD_AbortCallback>
}
 800c2d0:	bf00      	nop
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c2e0:	f000 f9a8 	bl	800c634 <BSP_SD_WriteCpltCallback>
}
 800c2e4:	bf00      	nop
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c2f4:	f000 f9aa 	bl	800c64c <BSP_SD_ReadCpltCallback>
}
 800c2f8:	bf00      	nop
 800c2fa:	3708      	adds	r7, #8
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800c300:	b480      	push	{r7}
 800c302:	af00      	add	r7, sp, #0

}
 800c304:	bf00      	nop
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr

0800c30e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b082      	sub	sp, #8
 800c312:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c314:	2301      	movs	r3, #1
 800c316:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c318:	f000 f80c 	bl	800c334 <BSP_PlatformIsDetected>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d101      	bne.n	800c326 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c322:	2300      	movs	r3, #0
 800c324:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c326:	79fb      	ldrb	r3, [r7, #7]
 800c328:	b2db      	uxtb	r3, r3
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
	...

0800c334 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c33a:	2301      	movs	r3, #1
 800c33c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c33e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c342:	4806      	ldr	r0, [pc, #24]	@ (800c35c <BSP_PlatformIsDetected+0x28>)
 800c344:	f7fa f9e2 	bl	800670c <HAL_GPIO_ReadPin>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d001      	beq.n	800c352 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c34e:	2300      	movs	r3, #0
 800c350:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c352:	79fb      	ldrb	r3, [r7, #7]
}
 800c354:	4618      	mov	r0, r3
 800c356:	3708      	adds	r7, #8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	40020800 	.word	0x40020800

0800c360 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c368:	f7f9 f870 	bl	800544c <HAL_GetTick>
 800c36c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c36e:	e006      	b.n	800c37e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c370:	f7ff ff8a 	bl	800c288 <BSP_SD_GetCardState>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d101      	bne.n	800c37e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c37a:	2300      	movs	r3, #0
 800c37c:	e009      	b.n	800c392 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c37e:	f7f9 f865 	bl	800544c <HAL_GetTick>
 800c382:	4602      	mov	r2, r0
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	1ad3      	subs	r3, r2, r3
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d8f0      	bhi.n	800c370 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c38e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
	...

0800c39c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c3a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c3d4 <SD_CheckStatus+0x38>)
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c3ac:	f7ff ff6c 	bl	800c288 <BSP_SD_GetCardState>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d107      	bne.n	800c3c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c3b6:	4b07      	ldr	r3, [pc, #28]	@ (800c3d4 <SD_CheckStatus+0x38>)
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	f023 0301 	bic.w	r3, r3, #1
 800c3c0:	b2da      	uxtb	r2, r3
 800c3c2:	4b04      	ldr	r3, [pc, #16]	@ (800c3d4 <SD_CheckStatus+0x38>)
 800c3c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c3c6:	4b03      	ldr	r3, [pc, #12]	@ (800c3d4 <SD_CheckStatus+0x38>)
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	b2db      	uxtb	r3, r3
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3708      	adds	r7, #8
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	20000060 	.word	0x20000060

0800c3d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c3e2:	f7ff ff05 	bl	800c1f0 <BSP_SD_Init>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d107      	bne.n	800c3fc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c3ec:	79fb      	ldrb	r3, [r7, #7]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7ff ffd4 	bl	800c39c <SD_CheckStatus>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	4b04      	ldr	r3, [pc, #16]	@ (800c40c <SD_initialize+0x34>)
 800c3fa:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c3fc:	4b03      	ldr	r3, [pc, #12]	@ (800c40c <SD_initialize+0x34>)
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	b2db      	uxtb	r3, r3
}
 800c402:	4618      	mov	r0, r3
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	20000060 	.word	0x20000060

0800c410 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	4603      	mov	r3, r0
 800c418:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c41a:	79fb      	ldrb	r3, [r7, #7]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7ff ffbd 	bl	800c39c <SD_CheckStatus>
 800c422:	4603      	mov	r3, r0
}
 800c424:	4618      	mov	r0, r3
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
 800c432:	60b9      	str	r1, [r7, #8]
 800c434:	607a      	str	r2, [r7, #4]
 800c436:	603b      	str	r3, [r7, #0]
 800c438:	4603      	mov	r3, r0
 800c43a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c43c:	2301      	movs	r3, #1
 800c43e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c440:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c444:	f7ff ff8c 	bl	800c360 <SD_CheckStatusWithTimeout>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	da01      	bge.n	800c452 <SD_read+0x26>
  {
    return res;
 800c44e:	7dfb      	ldrb	r3, [r7, #23]
 800c450:	e03b      	b.n	800c4ca <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c452:	683a      	ldr	r2, [r7, #0]
 800c454:	6879      	ldr	r1, [r7, #4]
 800c456:	68b8      	ldr	r0, [r7, #8]
 800c458:	f7ff fee2 	bl	800c220 <BSP_SD_ReadBlocks_DMA>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d132      	bne.n	800c4c8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c462:	4b1c      	ldr	r3, [pc, #112]	@ (800c4d4 <SD_read+0xa8>)
 800c464:	2200      	movs	r2, #0
 800c466:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c468:	f7f8 fff0 	bl	800544c <HAL_GetTick>
 800c46c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c46e:	bf00      	nop
 800c470:	4b18      	ldr	r3, [pc, #96]	@ (800c4d4 <SD_read+0xa8>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d108      	bne.n	800c48a <SD_read+0x5e>
 800c478:	f7f8 ffe8 	bl	800544c <HAL_GetTick>
 800c47c:	4602      	mov	r2, r0
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	1ad3      	subs	r3, r2, r3
 800c482:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c486:	4293      	cmp	r3, r2
 800c488:	d9f2      	bls.n	800c470 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800c48a:	4b12      	ldr	r3, [pc, #72]	@ (800c4d4 <SD_read+0xa8>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d102      	bne.n	800c498 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800c492:	2301      	movs	r3, #1
 800c494:	75fb      	strb	r3, [r7, #23]
 800c496:	e017      	b.n	800c4c8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c498:	4b0e      	ldr	r3, [pc, #56]	@ (800c4d4 <SD_read+0xa8>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c49e:	f7f8 ffd5 	bl	800544c <HAL_GetTick>
 800c4a2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c4a4:	e007      	b.n	800c4b6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c4a6:	f7ff feef 	bl	800c288 <BSP_SD_GetCardState>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d102      	bne.n	800c4b6 <SD_read+0x8a>
          {
            res = RES_OK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c4b4:	e008      	b.n	800c4c8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c4b6:	f7f8 ffc9 	bl	800544c <HAL_GetTick>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	1ad3      	subs	r3, r2, r3
 800c4c0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d9ee      	bls.n	800c4a6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3718      	adds	r7, #24
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	20035f6c 	.word	0x20035f6c

0800c4d8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60b9      	str	r1, [r7, #8]
 800c4e0:	607a      	str	r2, [r7, #4]
 800c4e2:	603b      	str	r3, [r7, #0]
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c4ec:	4b24      	ldr	r3, [pc, #144]	@ (800c580 <SD_write+0xa8>)
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c4f2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c4f6:	f7ff ff33 	bl	800c360 <SD_CheckStatusWithTimeout>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	da01      	bge.n	800c504 <SD_write+0x2c>
  {
    return res;
 800c500:	7dfb      	ldrb	r3, [r7, #23]
 800c502:	e038      	b.n	800c576 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c504:	683a      	ldr	r2, [r7, #0]
 800c506:	6879      	ldr	r1, [r7, #4]
 800c508:	68b8      	ldr	r0, [r7, #8]
 800c50a:	f7ff fea3 	bl	800c254 <BSP_SD_WriteBlocks_DMA>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d12f      	bne.n	800c574 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c514:	f7f8 ff9a 	bl	800544c <HAL_GetTick>
 800c518:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c51a:	bf00      	nop
 800c51c:	4b18      	ldr	r3, [pc, #96]	@ (800c580 <SD_write+0xa8>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d108      	bne.n	800c536 <SD_write+0x5e>
 800c524:	f7f8 ff92 	bl	800544c <HAL_GetTick>
 800c528:	4602      	mov	r2, r0
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	1ad3      	subs	r3, r2, r3
 800c52e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c532:	4293      	cmp	r3, r2
 800c534:	d9f2      	bls.n	800c51c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c536:	4b12      	ldr	r3, [pc, #72]	@ (800c580 <SD_write+0xa8>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d102      	bne.n	800c544 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c53e:	2301      	movs	r3, #1
 800c540:	75fb      	strb	r3, [r7, #23]
 800c542:	e017      	b.n	800c574 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c544:	4b0e      	ldr	r3, [pc, #56]	@ (800c580 <SD_write+0xa8>)
 800c546:	2200      	movs	r2, #0
 800c548:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c54a:	f7f8 ff7f 	bl	800544c <HAL_GetTick>
 800c54e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c550:	e007      	b.n	800c562 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c552:	f7ff fe99 	bl	800c288 <BSP_SD_GetCardState>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d102      	bne.n	800c562 <SD_write+0x8a>
          {
            res = RES_OK;
 800c55c:	2300      	movs	r3, #0
 800c55e:	75fb      	strb	r3, [r7, #23]
            break;
 800c560:	e008      	b.n	800c574 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c562:	f7f8 ff73 	bl	800544c <HAL_GetTick>
 800c566:	4602      	mov	r2, r0
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	1ad3      	subs	r3, r2, r3
 800c56c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c570:	4293      	cmp	r3, r2
 800c572:	d9ee      	bls.n	800c552 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c574:	7dfb      	ldrb	r3, [r7, #23]
}
 800c576:	4618      	mov	r0, r3
 800c578:	3718      	adds	r7, #24
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	20035f68 	.word	0x20035f68

0800c584 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b08c      	sub	sp, #48	@ 0x30
 800c588:	af00      	add	r7, sp, #0
 800c58a:	4603      	mov	r3, r0
 800c58c:	603a      	str	r2, [r7, #0]
 800c58e:	71fb      	strb	r3, [r7, #7]
 800c590:	460b      	mov	r3, r1
 800c592:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c594:	2301      	movs	r3, #1
 800c596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c59a:	4b25      	ldr	r3, [pc, #148]	@ (800c630 <SD_ioctl+0xac>)
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	f003 0301 	and.w	r3, r3, #1
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d001      	beq.n	800c5ac <SD_ioctl+0x28>
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	e03c      	b.n	800c626 <SD_ioctl+0xa2>

  switch (cmd)
 800c5ac:	79bb      	ldrb	r3, [r7, #6]
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	d834      	bhi.n	800c61c <SD_ioctl+0x98>
 800c5b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5b8 <SD_ioctl+0x34>)
 800c5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b8:	0800c5c9 	.word	0x0800c5c9
 800c5bc:	0800c5d1 	.word	0x0800c5d1
 800c5c0:	0800c5e9 	.word	0x0800c5e9
 800c5c4:	0800c603 	.word	0x0800c603
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c5ce:	e028      	b.n	800c622 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c5d0:	f107 030c 	add.w	r3, r7, #12
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7ff fe67 	bl	800c2a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c5da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c5e6:	e01c      	b.n	800c622 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c5e8:	f107 030c 	add.w	r3, r7, #12
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7ff fe5b 	bl	800c2a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c600:	e00f      	b.n	800c622 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c602:	f107 030c 	add.w	r3, r7, #12
 800c606:	4618      	mov	r0, r3
 800c608:	f7ff fe4e 	bl	800c2a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60e:	0a5a      	lsrs	r2, r3, #9
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c614:	2300      	movs	r3, #0
 800c616:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c61a:	e002      	b.n	800c622 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c61c:	2304      	movs	r3, #4
 800c61e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c622:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c626:	4618      	mov	r0, r3
 800c628:	3730      	adds	r7, #48	@ 0x30
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	20000060 	.word	0x20000060

0800c634 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c634:	b480      	push	{r7}
 800c636:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c638:	4b03      	ldr	r3, [pc, #12]	@ (800c648 <BSP_SD_WriteCpltCallback+0x14>)
 800c63a:	2201      	movs	r2, #1
 800c63c:	601a      	str	r2, [r3, #0]
}
 800c63e:	bf00      	nop
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr
 800c648:	20035f68 	.word	0x20035f68

0800c64c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c64c:	b480      	push	{r7}
 800c64e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c650:	4b03      	ldr	r3, [pc, #12]	@ (800c660 <BSP_SD_ReadCpltCallback+0x14>)
 800c652:	2201      	movs	r2, #1
 800c654:	601a      	str	r2, [r3, #0]
}
 800c656:	bf00      	nop
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr
 800c660:	20035f6c 	.word	0x20035f6c

0800c664 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	4603      	mov	r3, r0
 800c66c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c66e:	79fb      	ldrb	r3, [r7, #7]
 800c670:	4a08      	ldr	r2, [pc, #32]	@ (800c694 <disk_status+0x30>)
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	4413      	add	r3, r2
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	79fa      	ldrb	r2, [r7, #7]
 800c67c:	4905      	ldr	r1, [pc, #20]	@ (800c694 <disk_status+0x30>)
 800c67e:	440a      	add	r2, r1
 800c680:	7a12      	ldrb	r2, [r2, #8]
 800c682:	4610      	mov	r0, r2
 800c684:	4798      	blx	r3
 800c686:	4603      	mov	r3, r0
 800c688:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3710      	adds	r7, #16
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	20035f98 	.word	0x20035f98

0800c698 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	4603      	mov	r3, r0
 800c6a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c6a6:	79fb      	ldrb	r3, [r7, #7]
 800c6a8:	4a0d      	ldr	r2, [pc, #52]	@ (800c6e0 <disk_initialize+0x48>)
 800c6aa:	5cd3      	ldrb	r3, [r2, r3]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d111      	bne.n	800c6d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c6b0:	79fb      	ldrb	r3, [r7, #7]
 800c6b2:	4a0b      	ldr	r2, [pc, #44]	@ (800c6e0 <disk_initialize+0x48>)
 800c6b4:	2101      	movs	r1, #1
 800c6b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c6b8:	79fb      	ldrb	r3, [r7, #7]
 800c6ba:	4a09      	ldr	r2, [pc, #36]	@ (800c6e0 <disk_initialize+0x48>)
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	4413      	add	r3, r2
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	79fa      	ldrb	r2, [r7, #7]
 800c6c6:	4906      	ldr	r1, [pc, #24]	@ (800c6e0 <disk_initialize+0x48>)
 800c6c8:	440a      	add	r2, r1
 800c6ca:	7a12      	ldrb	r2, [r2, #8]
 800c6cc:	4610      	mov	r0, r2
 800c6ce:	4798      	blx	r3
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	20035f98 	.word	0x20035f98

0800c6e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c6e4:	b590      	push	{r4, r7, lr}
 800c6e6:	b087      	sub	sp, #28
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60b9      	str	r1, [r7, #8]
 800c6ec:	607a      	str	r2, [r7, #4]
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
 800c6f6:	4a0a      	ldr	r2, [pc, #40]	@ (800c720 <disk_read+0x3c>)
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	4413      	add	r3, r2
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	689c      	ldr	r4, [r3, #8]
 800c700:	7bfb      	ldrb	r3, [r7, #15]
 800c702:	4a07      	ldr	r2, [pc, #28]	@ (800c720 <disk_read+0x3c>)
 800c704:	4413      	add	r3, r2
 800c706:	7a18      	ldrb	r0, [r3, #8]
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	68b9      	ldr	r1, [r7, #8]
 800c70e:	47a0      	blx	r4
 800c710:	4603      	mov	r3, r0
 800c712:	75fb      	strb	r3, [r7, #23]
  return res;
 800c714:	7dfb      	ldrb	r3, [r7, #23]
}
 800c716:	4618      	mov	r0, r3
 800c718:	371c      	adds	r7, #28
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd90      	pop	{r4, r7, pc}
 800c71e:	bf00      	nop
 800c720:	20035f98 	.word	0x20035f98

0800c724 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c724:	b590      	push	{r4, r7, lr}
 800c726:	b087      	sub	sp, #28
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60b9      	str	r1, [r7, #8]
 800c72c:	607a      	str	r2, [r7, #4]
 800c72e:	603b      	str	r3, [r7, #0]
 800c730:	4603      	mov	r3, r0
 800c732:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c734:	7bfb      	ldrb	r3, [r7, #15]
 800c736:	4a0a      	ldr	r2, [pc, #40]	@ (800c760 <disk_write+0x3c>)
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	4413      	add	r3, r2
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	68dc      	ldr	r4, [r3, #12]
 800c740:	7bfb      	ldrb	r3, [r7, #15]
 800c742:	4a07      	ldr	r2, [pc, #28]	@ (800c760 <disk_write+0x3c>)
 800c744:	4413      	add	r3, r2
 800c746:	7a18      	ldrb	r0, [r3, #8]
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	68b9      	ldr	r1, [r7, #8]
 800c74e:	47a0      	blx	r4
 800c750:	4603      	mov	r3, r0
 800c752:	75fb      	strb	r3, [r7, #23]
  return res;
 800c754:	7dfb      	ldrb	r3, [r7, #23]
}
 800c756:	4618      	mov	r0, r3
 800c758:	371c      	adds	r7, #28
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd90      	pop	{r4, r7, pc}
 800c75e:	bf00      	nop
 800c760:	20035f98 	.word	0x20035f98

0800c764 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	4603      	mov	r3, r0
 800c76c:	603a      	str	r2, [r7, #0]
 800c76e:	71fb      	strb	r3, [r7, #7]
 800c770:	460b      	mov	r3, r1
 800c772:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c774:	79fb      	ldrb	r3, [r7, #7]
 800c776:	4a09      	ldr	r2, [pc, #36]	@ (800c79c <disk_ioctl+0x38>)
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	691b      	ldr	r3, [r3, #16]
 800c780:	79fa      	ldrb	r2, [r7, #7]
 800c782:	4906      	ldr	r1, [pc, #24]	@ (800c79c <disk_ioctl+0x38>)
 800c784:	440a      	add	r2, r1
 800c786:	7a10      	ldrb	r0, [r2, #8]
 800c788:	79b9      	ldrb	r1, [r7, #6]
 800c78a:	683a      	ldr	r2, [r7, #0]
 800c78c:	4798      	blx	r3
 800c78e:	4603      	mov	r3, r0
 800c790:	73fb      	strb	r3, [r7, #15]
  return res;
 800c792:	7bfb      	ldrb	r3, [r7, #15]
}
 800c794:	4618      	mov	r0, r3
 800c796:	3710      	adds	r7, #16
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	20035f98 	.word	0x20035f98

0800c7a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c7b0:	89fb      	ldrh	r3, [r7, #14]
 800c7b2:	021b      	lsls	r3, r3, #8
 800c7b4:	b21a      	sxth	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	b21b      	sxth	r3, r3
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	b21b      	sxth	r3, r3
 800c7c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c7c2:	89fb      	ldrh	r3, [r7, #14]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3714      	adds	r7, #20
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	3303      	adds	r3, #3
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	021b      	lsls	r3, r3, #8
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	3202      	adds	r2, #2
 800c7e8:	7812      	ldrb	r2, [r2, #0]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	021b      	lsls	r3, r3, #8
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	3201      	adds	r2, #1
 800c7f6:	7812      	ldrb	r2, [r2, #0]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	021b      	lsls	r3, r3, #8
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	7812      	ldrb	r2, [r2, #0]
 800c804:	4313      	orrs	r3, r2
 800c806:	60fb      	str	r3, [r7, #12]
	return rv;
 800c808:	68fb      	ldr	r3, [r7, #12]
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3714      	adds	r7, #20
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr

0800c816 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c816:	b480      	push	{r7}
 800c818:	b083      	sub	sp, #12
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	460b      	mov	r3, r1
 800c820:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	1c5a      	adds	r2, r3, #1
 800c826:	607a      	str	r2, [r7, #4]
 800c828:	887a      	ldrh	r2, [r7, #2]
 800c82a:	b2d2      	uxtb	r2, r2
 800c82c:	701a      	strb	r2, [r3, #0]
 800c82e:	887b      	ldrh	r3, [r7, #2]
 800c830:	0a1b      	lsrs	r3, r3, #8
 800c832:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	1c5a      	adds	r2, r3, #1
 800c838:	607a      	str	r2, [r7, #4]
 800c83a:	887a      	ldrh	r2, [r7, #2]
 800c83c:	b2d2      	uxtb	r2, r2
 800c83e:	701a      	strb	r2, [r3, #0]
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	1c5a      	adds	r2, r3, #1
 800c85a:	607a      	str	r2, [r7, #4]
 800c85c:	683a      	ldr	r2, [r7, #0]
 800c85e:	b2d2      	uxtb	r2, r2
 800c860:	701a      	strb	r2, [r3, #0]
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	0a1b      	lsrs	r3, r3, #8
 800c866:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	1c5a      	adds	r2, r3, #1
 800c86c:	607a      	str	r2, [r7, #4]
 800c86e:	683a      	ldr	r2, [r7, #0]
 800c870:	b2d2      	uxtb	r2, r2
 800c872:	701a      	strb	r2, [r3, #0]
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	0a1b      	lsrs	r3, r3, #8
 800c878:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	1c5a      	adds	r2, r3, #1
 800c87e:	607a      	str	r2, [r7, #4]
 800c880:	683a      	ldr	r2, [r7, #0]
 800c882:	b2d2      	uxtb	r2, r2
 800c884:	701a      	strb	r2, [r3, #0]
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	0a1b      	lsrs	r3, r3, #8
 800c88a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	1c5a      	adds	r2, r3, #1
 800c890:	607a      	str	r2, [r7, #4]
 800c892:	683a      	ldr	r2, [r7, #0]
 800c894:	b2d2      	uxtb	r2, r2
 800c896:	701a      	strb	r2, [r3, #0]
}
 800c898:	bf00      	nop
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c8a4:	b480      	push	{r7}
 800c8a6:	b087      	sub	sp, #28
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00d      	beq.n	800c8da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c8be:	693a      	ldr	r2, [r7, #16]
 800c8c0:	1c53      	adds	r3, r2, #1
 800c8c2:	613b      	str	r3, [r7, #16]
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	1c59      	adds	r1, r3, #1
 800c8c8:	6179      	str	r1, [r7, #20]
 800c8ca:	7812      	ldrb	r2, [r2, #0]
 800c8cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	607b      	str	r3, [r7, #4]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d1f1      	bne.n	800c8be <mem_cpy+0x1a>
	}
}
 800c8da:	bf00      	nop
 800c8dc:	371c      	adds	r7, #28
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr

0800c8e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c8e6:	b480      	push	{r7}
 800c8e8:	b087      	sub	sp, #28
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	60f8      	str	r0, [r7, #12]
 800c8ee:	60b9      	str	r1, [r7, #8]
 800c8f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	1c5a      	adds	r2, r3, #1
 800c8fa:	617a      	str	r2, [r7, #20]
 800c8fc:	68ba      	ldr	r2, [r7, #8]
 800c8fe:	b2d2      	uxtb	r2, r2
 800c900:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	3b01      	subs	r3, #1
 800c906:	607b      	str	r3, [r7, #4]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1f3      	bne.n	800c8f6 <mem_set+0x10>
}
 800c90e:	bf00      	nop
 800c910:	bf00      	nop
 800c912:	371c      	adds	r7, #28
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c91c:	b480      	push	{r7}
 800c91e:	b089      	sub	sp, #36	@ 0x24
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	61fb      	str	r3, [r7, #28]
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c930:	2300      	movs	r3, #0
 800c932:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	1c5a      	adds	r2, r3, #1
 800c938:	61fa      	str	r2, [r7, #28]
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	4619      	mov	r1, r3
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	1c5a      	adds	r2, r3, #1
 800c942:	61ba      	str	r2, [r7, #24]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	1acb      	subs	r3, r1, r3
 800c948:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	3b01      	subs	r3, #1
 800c94e:	607b      	str	r3, [r7, #4]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d002      	beq.n	800c95c <mem_cmp+0x40>
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d0eb      	beq.n	800c934 <mem_cmp+0x18>

	return r;
 800c95c:	697b      	ldr	r3, [r7, #20]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3724      	adds	r7, #36	@ 0x24
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr

0800c96a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c96a:	b480      	push	{r7}
 800c96c:	b083      	sub	sp, #12
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c974:	e002      	b.n	800c97c <chk_chr+0x12>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	3301      	adds	r3, #1
 800c97a:	607b      	str	r3, [r7, #4]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d005      	beq.n	800c990 <chk_chr+0x26>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	461a      	mov	r2, r3
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d1f2      	bne.n	800c976 <chk_chr+0xc>
	return *str;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	781b      	ldrb	r3, [r3, #0]
}
 800c994:	4618      	mov	r0, r3
 800c996:	370c      	adds	r7, #12
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	60bb      	str	r3, [r7, #8]
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	60fb      	str	r3, [r7, #12]
 800c9b2:	e029      	b.n	800ca08 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c9b4:	4a27      	ldr	r2, [pc, #156]	@ (800ca54 <chk_lock+0xb4>)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	011b      	lsls	r3, r3, #4
 800c9ba:	4413      	add	r3, r2
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d01d      	beq.n	800c9fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c9c2:	4a24      	ldr	r2, [pc, #144]	@ (800ca54 <chk_lock+0xb4>)
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	011b      	lsls	r3, r3, #4
 800c9c8:	4413      	add	r3, r2
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d116      	bne.n	800ca02 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c9d4:	4a1f      	ldr	r2, [pc, #124]	@ (800ca54 <chk_lock+0xb4>)
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	011b      	lsls	r3, r3, #4
 800c9da:	4413      	add	r3, r2
 800c9dc:	3304      	adds	r3, #4
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d10c      	bne.n	800ca02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c9e8:	4a1a      	ldr	r2, [pc, #104]	@ (800ca54 <chk_lock+0xb4>)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	011b      	lsls	r3, r3, #4
 800c9ee:	4413      	add	r3, r2
 800c9f0:	3308      	adds	r3, #8
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d102      	bne.n	800ca02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c9fc:	e007      	b.n	800ca0e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	3301      	adds	r3, #1
 800ca06:	60fb      	str	r3, [r7, #12]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d9d2      	bls.n	800c9b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2b02      	cmp	r3, #2
 800ca12:	d109      	bne.n	800ca28 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d102      	bne.n	800ca20 <chk_lock+0x80>
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	2b02      	cmp	r3, #2
 800ca1e:	d101      	bne.n	800ca24 <chk_lock+0x84>
 800ca20:	2300      	movs	r3, #0
 800ca22:	e010      	b.n	800ca46 <chk_lock+0xa6>
 800ca24:	2312      	movs	r3, #18
 800ca26:	e00e      	b.n	800ca46 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d108      	bne.n	800ca40 <chk_lock+0xa0>
 800ca2e:	4a09      	ldr	r2, [pc, #36]	@ (800ca54 <chk_lock+0xb4>)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	011b      	lsls	r3, r3, #4
 800ca34:	4413      	add	r3, r2
 800ca36:	330c      	adds	r3, #12
 800ca38:	881b      	ldrh	r3, [r3, #0]
 800ca3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca3e:	d101      	bne.n	800ca44 <chk_lock+0xa4>
 800ca40:	2310      	movs	r3, #16
 800ca42:	e000      	b.n	800ca46 <chk_lock+0xa6>
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	20035f78 	.word	0x20035f78

0800ca58 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	607b      	str	r3, [r7, #4]
 800ca62:	e002      	b.n	800ca6a <enq_lock+0x12>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	3301      	adds	r3, #1
 800ca68:	607b      	str	r3, [r7, #4]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d806      	bhi.n	800ca7e <enq_lock+0x26>
 800ca70:	4a09      	ldr	r2, [pc, #36]	@ (800ca98 <enq_lock+0x40>)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	011b      	lsls	r3, r3, #4
 800ca76:	4413      	add	r3, r2
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1f2      	bne.n	800ca64 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2b02      	cmp	r3, #2
 800ca82:	bf14      	ite	ne
 800ca84:	2301      	movne	r3, #1
 800ca86:	2300      	moveq	r3, #0
 800ca88:	b2db      	uxtb	r3, r3
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	370c      	adds	r7, #12
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop
 800ca98:	20035f78 	.word	0x20035f78

0800ca9c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b085      	sub	sp, #20
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800caa6:	2300      	movs	r3, #0
 800caa8:	60fb      	str	r3, [r7, #12]
 800caaa:	e01f      	b.n	800caec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800caac:	4a41      	ldr	r2, [pc, #260]	@ (800cbb4 <inc_lock+0x118>)
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	011b      	lsls	r3, r3, #4
 800cab2:	4413      	add	r3, r2
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d113      	bne.n	800cae6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cabe:	4a3d      	ldr	r2, [pc, #244]	@ (800cbb4 <inc_lock+0x118>)
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	011b      	lsls	r3, r3, #4
 800cac4:	4413      	add	r3, r2
 800cac6:	3304      	adds	r3, #4
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cace:	429a      	cmp	r2, r3
 800cad0:	d109      	bne.n	800cae6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cad2:	4a38      	ldr	r2, [pc, #224]	@ (800cbb4 <inc_lock+0x118>)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	011b      	lsls	r3, r3, #4
 800cad8:	4413      	add	r3, r2
 800cada:	3308      	adds	r3, #8
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d006      	beq.n	800caf4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	3301      	adds	r3, #1
 800caea:	60fb      	str	r3, [r7, #12]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d9dc      	bls.n	800caac <inc_lock+0x10>
 800caf2:	e000      	b.n	800caf6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800caf4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2b02      	cmp	r3, #2
 800cafa:	d132      	bne.n	800cb62 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cafc:	2300      	movs	r3, #0
 800cafe:	60fb      	str	r3, [r7, #12]
 800cb00:	e002      	b.n	800cb08 <inc_lock+0x6c>
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	3301      	adds	r3, #1
 800cb06:	60fb      	str	r3, [r7, #12]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d806      	bhi.n	800cb1c <inc_lock+0x80>
 800cb0e:	4a29      	ldr	r2, [pc, #164]	@ (800cbb4 <inc_lock+0x118>)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	011b      	lsls	r3, r3, #4
 800cb14:	4413      	add	r3, r2
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d1f2      	bne.n	800cb02 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	d101      	bne.n	800cb26 <inc_lock+0x8a>
 800cb22:	2300      	movs	r3, #0
 800cb24:	e040      	b.n	800cba8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	4922      	ldr	r1, [pc, #136]	@ (800cbb4 <inc_lock+0x118>)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	011b      	lsls	r3, r3, #4
 800cb30:	440b      	add	r3, r1
 800cb32:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	689a      	ldr	r2, [r3, #8]
 800cb38:	491e      	ldr	r1, [pc, #120]	@ (800cbb4 <inc_lock+0x118>)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	011b      	lsls	r3, r3, #4
 800cb3e:	440b      	add	r3, r1
 800cb40:	3304      	adds	r3, #4
 800cb42:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	695a      	ldr	r2, [r3, #20]
 800cb48:	491a      	ldr	r1, [pc, #104]	@ (800cbb4 <inc_lock+0x118>)
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	011b      	lsls	r3, r3, #4
 800cb4e:	440b      	add	r3, r1
 800cb50:	3308      	adds	r3, #8
 800cb52:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cb54:	4a17      	ldr	r2, [pc, #92]	@ (800cbb4 <inc_lock+0x118>)
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	011b      	lsls	r3, r3, #4
 800cb5a:	4413      	add	r3, r2
 800cb5c:	330c      	adds	r3, #12
 800cb5e:	2200      	movs	r2, #0
 800cb60:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d009      	beq.n	800cb7c <inc_lock+0xe0>
 800cb68:	4a12      	ldr	r2, [pc, #72]	@ (800cbb4 <inc_lock+0x118>)
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	011b      	lsls	r3, r3, #4
 800cb6e:	4413      	add	r3, r2
 800cb70:	330c      	adds	r3, #12
 800cb72:	881b      	ldrh	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d001      	beq.n	800cb7c <inc_lock+0xe0>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	e015      	b.n	800cba8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d108      	bne.n	800cb94 <inc_lock+0xf8>
 800cb82:	4a0c      	ldr	r2, [pc, #48]	@ (800cbb4 <inc_lock+0x118>)
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	011b      	lsls	r3, r3, #4
 800cb88:	4413      	add	r3, r2
 800cb8a:	330c      	adds	r3, #12
 800cb8c:	881b      	ldrh	r3, [r3, #0]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	e001      	b.n	800cb98 <inc_lock+0xfc>
 800cb94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cb98:	4906      	ldr	r1, [pc, #24]	@ (800cbb4 <inc_lock+0x118>)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	011b      	lsls	r3, r3, #4
 800cb9e:	440b      	add	r3, r1
 800cba0:	330c      	adds	r3, #12
 800cba2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	3301      	adds	r3, #1
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3714      	adds	r7, #20
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr
 800cbb4:	20035f78 	.word	0x20035f78

0800cbb8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b085      	sub	sp, #20
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	3b01      	subs	r3, #1
 800cbc4:	607b      	str	r3, [r7, #4]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d825      	bhi.n	800cc18 <dec_lock+0x60>
		n = Files[i].ctr;
 800cbcc:	4a17      	ldr	r2, [pc, #92]	@ (800cc2c <dec_lock+0x74>)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	011b      	lsls	r3, r3, #4
 800cbd2:	4413      	add	r3, r2
 800cbd4:	330c      	adds	r3, #12
 800cbd6:	881b      	ldrh	r3, [r3, #0]
 800cbd8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cbda:	89fb      	ldrh	r3, [r7, #14]
 800cbdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbe0:	d101      	bne.n	800cbe6 <dec_lock+0x2e>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cbe6:	89fb      	ldrh	r3, [r7, #14]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d002      	beq.n	800cbf2 <dec_lock+0x3a>
 800cbec:	89fb      	ldrh	r3, [r7, #14]
 800cbee:	3b01      	subs	r3, #1
 800cbf0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cbf2:	4a0e      	ldr	r2, [pc, #56]	@ (800cc2c <dec_lock+0x74>)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	011b      	lsls	r3, r3, #4
 800cbf8:	4413      	add	r3, r2
 800cbfa:	330c      	adds	r3, #12
 800cbfc:	89fa      	ldrh	r2, [r7, #14]
 800cbfe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cc00:	89fb      	ldrh	r3, [r7, #14]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d105      	bne.n	800cc12 <dec_lock+0x5a>
 800cc06:	4a09      	ldr	r2, [pc, #36]	@ (800cc2c <dec_lock+0x74>)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	011b      	lsls	r3, r3, #4
 800cc0c:	4413      	add	r3, r2
 800cc0e:	2200      	movs	r2, #0
 800cc10:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cc12:	2300      	movs	r3, #0
 800cc14:	737b      	strb	r3, [r7, #13]
 800cc16:	e001      	b.n	800cc1c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cc18:	2302      	movs	r3, #2
 800cc1a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cc1c:	7b7b      	ldrb	r3, [r7, #13]
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3714      	adds	r7, #20
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr
 800cc2a:	bf00      	nop
 800cc2c:	20035f78 	.word	0x20035f78

0800cc30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b085      	sub	sp, #20
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cc38:	2300      	movs	r3, #0
 800cc3a:	60fb      	str	r3, [r7, #12]
 800cc3c:	e010      	b.n	800cc60 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cc3e:	4a0d      	ldr	r2, [pc, #52]	@ (800cc74 <clear_lock+0x44>)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	011b      	lsls	r3, r3, #4
 800cc44:	4413      	add	r3, r2
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d105      	bne.n	800cc5a <clear_lock+0x2a>
 800cc4e:	4a09      	ldr	r2, [pc, #36]	@ (800cc74 <clear_lock+0x44>)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	011b      	lsls	r3, r3, #4
 800cc54:	4413      	add	r3, r2
 800cc56:	2200      	movs	r2, #0
 800cc58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	60fb      	str	r3, [r7, #12]
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d9eb      	bls.n	800cc3e <clear_lock+0xe>
	}
}
 800cc66:	bf00      	nop
 800cc68:	bf00      	nop
 800cc6a:	3714      	adds	r7, #20
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr
 800cc74:	20035f78 	.word	0x20035f78

0800cc78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cc80:	2300      	movs	r3, #0
 800cc82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	78db      	ldrb	r3, [r3, #3]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d034      	beq.n	800ccf6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc90:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	7858      	ldrb	r0, [r3, #1]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	697a      	ldr	r2, [r7, #20]
 800cca0:	f7ff fd40 	bl	800c724 <disk_write>
 800cca4:	4603      	mov	r3, r0
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d002      	beq.n	800ccb0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	73fb      	strb	r3, [r7, #15]
 800ccae:	e022      	b.n	800ccf6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6a1b      	ldr	r3, [r3, #32]
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	1ad2      	subs	r2, r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	699b      	ldr	r3, [r3, #24]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d217      	bcs.n	800ccf6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	789b      	ldrb	r3, [r3, #2]
 800ccca:	613b      	str	r3, [r7, #16]
 800cccc:	e010      	b.n	800ccf0 <sync_window+0x78>
					wsect += fs->fsize;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	699b      	ldr	r3, [r3, #24]
 800ccd2:	697a      	ldr	r2, [r7, #20]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	7858      	ldrb	r0, [r3, #1]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cce2:	2301      	movs	r3, #1
 800cce4:	697a      	ldr	r2, [r7, #20]
 800cce6:	f7ff fd1d 	bl	800c724 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	3b01      	subs	r3, #1
 800ccee:	613b      	str	r3, [r7, #16]
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	d8eb      	bhi.n	800ccce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ccf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3718      	adds	r7, #24
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd12:	683a      	ldr	r2, [r7, #0]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d01b      	beq.n	800cd50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f7ff ffad 	bl	800cc78 <sync_window>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cd22:	7bfb      	ldrb	r3, [r7, #15]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d113      	bne.n	800cd50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	7858      	ldrb	r0, [r3, #1]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd32:	2301      	movs	r3, #1
 800cd34:	683a      	ldr	r2, [r7, #0]
 800cd36:	f7ff fcd5 	bl	800c6e4 <disk_read>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d004      	beq.n	800cd4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cd40:	f04f 33ff 	mov.w	r3, #4294967295
 800cd44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cd46:	2301      	movs	r3, #1
 800cd48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	683a      	ldr	r2, [r7, #0]
 800cd4e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
	...

0800cd5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7ff ff87 	bl	800cc78 <sync_window>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d158      	bne.n	800ce26 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	2b03      	cmp	r3, #3
 800cd7a:	d148      	bne.n	800ce0e <sync_fs+0xb2>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	791b      	ldrb	r3, [r3, #4]
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d144      	bne.n	800ce0e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	3330      	adds	r3, #48	@ 0x30
 800cd88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7ff fda9 	bl	800c8e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	3330      	adds	r3, #48	@ 0x30
 800cd98:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cd9c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7ff fd38 	bl	800c816 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	3330      	adds	r3, #48	@ 0x30
 800cdaa:	4921      	ldr	r1, [pc, #132]	@ (800ce30 <sync_fs+0xd4>)
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7ff fd4d 	bl	800c84c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	3330      	adds	r3, #48	@ 0x30
 800cdb6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cdba:	491e      	ldr	r1, [pc, #120]	@ (800ce34 <sync_fs+0xd8>)
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7ff fd45 	bl	800c84c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	3330      	adds	r3, #48	@ 0x30
 800cdc6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	4619      	mov	r1, r3
 800cdd0:	4610      	mov	r0, r2
 800cdd2:	f7ff fd3b 	bl	800c84c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	3330      	adds	r3, #48	@ 0x30
 800cdda:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	4619      	mov	r1, r3
 800cde4:	4610      	mov	r0, r2
 800cde6:	f7ff fd31 	bl	800c84c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	69db      	ldr	r3, [r3, #28]
 800cdee:	1c5a      	adds	r2, r3, #1
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	7858      	ldrb	r0, [r3, #1]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce02:	2301      	movs	r3, #1
 800ce04:	f7ff fc8e 	bl	800c724 <disk_write>
			fs->fsi_flag = 0;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	785b      	ldrb	r3, [r3, #1]
 800ce12:	2200      	movs	r2, #0
 800ce14:	2100      	movs	r1, #0
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff fca4 	bl	800c764 <disk_ioctl>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <sync_fs+0xca>
 800ce22:	2301      	movs	r3, #1
 800ce24:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ce26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3710      	adds	r7, #16
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	41615252 	.word	0x41615252
 800ce34:	61417272 	.word	0x61417272

0800ce38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b083      	sub	sp, #12
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	3b02      	subs	r3, #2
 800ce46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	695b      	ldr	r3, [r3, #20]
 800ce4c:	3b02      	subs	r3, #2
 800ce4e:	683a      	ldr	r2, [r7, #0]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d301      	bcc.n	800ce58 <clust2sect+0x20>
 800ce54:	2300      	movs	r3, #0
 800ce56:	e008      	b.n	800ce6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	895b      	ldrh	r3, [r3, #10]
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	fb03 f202 	mul.w	r2, r3, r2
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce68:	4413      	add	r3, r2
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	370c      	adds	r7, #12
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr

0800ce76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b086      	sub	sp, #24
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
 800ce7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d904      	bls.n	800ce96 <get_fat+0x20>
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	695b      	ldr	r3, [r3, #20]
 800ce90:	683a      	ldr	r2, [r7, #0]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d302      	bcc.n	800ce9c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ce96:	2301      	movs	r3, #1
 800ce98:	617b      	str	r3, [r7, #20]
 800ce9a:	e08e      	b.n	800cfba <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ce9c:	f04f 33ff 	mov.w	r3, #4294967295
 800cea0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	2b03      	cmp	r3, #3
 800cea8:	d061      	beq.n	800cf6e <get_fat+0xf8>
 800ceaa:	2b03      	cmp	r3, #3
 800ceac:	dc7b      	bgt.n	800cfa6 <get_fat+0x130>
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d002      	beq.n	800ceb8 <get_fat+0x42>
 800ceb2:	2b02      	cmp	r3, #2
 800ceb4:	d041      	beq.n	800cf3a <get_fat+0xc4>
 800ceb6:	e076      	b.n	800cfa6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	60fb      	str	r3, [r7, #12]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	085b      	lsrs	r3, r3, #1
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	4413      	add	r3, r2
 800cec4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	6a1a      	ldr	r2, [r3, #32]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	0a5b      	lsrs	r3, r3, #9
 800cece:	4413      	add	r3, r2
 800ced0:	4619      	mov	r1, r3
 800ced2:	6938      	ldr	r0, [r7, #16]
 800ced4:	f7ff ff14 	bl	800cd00 <move_window>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d166      	bne.n	800cfac <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	1c5a      	adds	r2, r3, #1
 800cee2:	60fa      	str	r2, [r7, #12]
 800cee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cee8:	693a      	ldr	r2, [r7, #16]
 800ceea:	4413      	add	r3, r2
 800ceec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cef0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	6a1a      	ldr	r2, [r3, #32]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	0a5b      	lsrs	r3, r3, #9
 800cefa:	4413      	add	r3, r2
 800cefc:	4619      	mov	r1, r3
 800cefe:	6938      	ldr	r0, [r7, #16]
 800cf00:	f7ff fefe 	bl	800cd00 <move_window>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d152      	bne.n	800cfb0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf10:	693a      	ldr	r2, [r7, #16]
 800cf12:	4413      	add	r3, r2
 800cf14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf18:	021b      	lsls	r3, r3, #8
 800cf1a:	68ba      	ldr	r2, [r7, #8]
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	f003 0301 	and.w	r3, r3, #1
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d002      	beq.n	800cf30 <get_fat+0xba>
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	091b      	lsrs	r3, r3, #4
 800cf2e:	e002      	b.n	800cf36 <get_fat+0xc0>
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf36:	617b      	str	r3, [r7, #20]
			break;
 800cf38:	e03f      	b.n	800cfba <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	6a1a      	ldr	r2, [r3, #32]
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	0a1b      	lsrs	r3, r3, #8
 800cf42:	4413      	add	r3, r2
 800cf44:	4619      	mov	r1, r3
 800cf46:	6938      	ldr	r0, [r7, #16]
 800cf48:	f7ff feda 	bl	800cd00 <move_window>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d130      	bne.n	800cfb4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	005b      	lsls	r3, r3, #1
 800cf5c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cf60:	4413      	add	r3, r2
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7ff fc1c 	bl	800c7a0 <ld_word>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	617b      	str	r3, [r7, #20]
			break;
 800cf6c:	e025      	b.n	800cfba <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	6a1a      	ldr	r2, [r3, #32]
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	09db      	lsrs	r3, r3, #7
 800cf76:	4413      	add	r3, r2
 800cf78:	4619      	mov	r1, r3
 800cf7a:	6938      	ldr	r0, [r7, #16]
 800cf7c:	f7ff fec0 	bl	800cd00 <move_window>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d118      	bne.n	800cfb8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cf94:	4413      	add	r3, r2
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7ff fc1a 	bl	800c7d0 <ld_dword>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800cfa2:	617b      	str	r3, [r7, #20]
			break;
 800cfa4:	e009      	b.n	800cfba <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	617b      	str	r3, [r7, #20]
 800cfaa:	e006      	b.n	800cfba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cfac:	bf00      	nop
 800cfae:	e004      	b.n	800cfba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cfb0:	bf00      	nop
 800cfb2:	e002      	b.n	800cfba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cfb4:	bf00      	nop
 800cfb6:	e000      	b.n	800cfba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cfb8:	bf00      	nop
		}
	}

	return val;
 800cfba:	697b      	ldr	r3, [r7, #20]
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3718      	adds	r7, #24
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cfc4:	b590      	push	{r4, r7, lr}
 800cfc6:	b089      	sub	sp, #36	@ 0x24
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cfd0:	2302      	movs	r3, #2
 800cfd2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	f240 80d9 	bls.w	800d18e <put_fat+0x1ca>
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	695b      	ldr	r3, [r3, #20]
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	f080 80d3 	bcs.w	800d18e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	2b03      	cmp	r3, #3
 800cfee:	f000 8096 	beq.w	800d11e <put_fat+0x15a>
 800cff2:	2b03      	cmp	r3, #3
 800cff4:	f300 80cb 	bgt.w	800d18e <put_fat+0x1ca>
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d002      	beq.n	800d002 <put_fat+0x3e>
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	d06e      	beq.n	800d0de <put_fat+0x11a>
 800d000:	e0c5      	b.n	800d18e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	61bb      	str	r3, [r7, #24]
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	085b      	lsrs	r3, r3, #1
 800d00a:	69ba      	ldr	r2, [r7, #24]
 800d00c:	4413      	add	r3, r2
 800d00e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6a1a      	ldr	r2, [r3, #32]
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	0a5b      	lsrs	r3, r3, #9
 800d018:	4413      	add	r3, r2
 800d01a:	4619      	mov	r1, r3
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f7ff fe6f 	bl	800cd00 <move_window>
 800d022:	4603      	mov	r3, r0
 800d024:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d026:	7ffb      	ldrb	r3, [r7, #31]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f040 80a9 	bne.w	800d180 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	1c59      	adds	r1, r3, #1
 800d038:	61b9      	str	r1, [r7, #24]
 800d03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d03e:	4413      	add	r3, r2
 800d040:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	f003 0301 	and.w	r3, r3, #1
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00d      	beq.n	800d068 <put_fat+0xa4>
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	b25b      	sxtb	r3, r3
 800d052:	f003 030f 	and.w	r3, r3, #15
 800d056:	b25a      	sxtb	r2, r3
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	011b      	lsls	r3, r3, #4
 800d05e:	b25b      	sxtb	r3, r3
 800d060:	4313      	orrs	r3, r2
 800d062:	b25b      	sxtb	r3, r3
 800d064:	b2db      	uxtb	r3, r3
 800d066:	e001      	b.n	800d06c <put_fat+0xa8>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	697a      	ldr	r2, [r7, #20]
 800d06e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2201      	movs	r2, #1
 800d074:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	6a1a      	ldr	r2, [r3, #32]
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	0a5b      	lsrs	r3, r3, #9
 800d07e:	4413      	add	r3, r2
 800d080:	4619      	mov	r1, r3
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f7ff fe3c 	bl	800cd00 <move_window>
 800d088:	4603      	mov	r3, r0
 800d08a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d08c:	7ffb      	ldrb	r3, [r7, #31]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d178      	bne.n	800d184 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d09e:	4413      	add	r3, r2
 800d0a0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	f003 0301 	and.w	r3, r3, #1
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d003      	beq.n	800d0b4 <put_fat+0xf0>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	091b      	lsrs	r3, r3, #4
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	e00e      	b.n	800d0d2 <put_fat+0x10e>
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	b25b      	sxtb	r3, r3
 800d0ba:	f023 030f 	bic.w	r3, r3, #15
 800d0be:	b25a      	sxtb	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	0a1b      	lsrs	r3, r3, #8
 800d0c4:	b25b      	sxtb	r3, r3
 800d0c6:	f003 030f 	and.w	r3, r3, #15
 800d0ca:	b25b      	sxtb	r3, r3
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	b25b      	sxtb	r3, r3
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	697a      	ldr	r2, [r7, #20]
 800d0d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2201      	movs	r2, #1
 800d0da:	70da      	strb	r2, [r3, #3]
			break;
 800d0dc:	e057      	b.n	800d18e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6a1a      	ldr	r2, [r3, #32]
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	0a1b      	lsrs	r3, r3, #8
 800d0e6:	4413      	add	r3, r2
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	f7ff fe08 	bl	800cd00 <move_window>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d0f4:	7ffb      	ldrb	r3, [r7, #31]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d146      	bne.n	800d188 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	005b      	lsls	r3, r3, #1
 800d104:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d108:	4413      	add	r3, r2
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	b292      	uxth	r2, r2
 800d10e:	4611      	mov	r1, r2
 800d110:	4618      	mov	r0, r3
 800d112:	f7ff fb80 	bl	800c816 <st_word>
			fs->wflag = 1;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2201      	movs	r2, #1
 800d11a:	70da      	strb	r2, [r3, #3]
			break;
 800d11c:	e037      	b.n	800d18e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6a1a      	ldr	r2, [r3, #32]
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	09db      	lsrs	r3, r3, #7
 800d126:	4413      	add	r3, r2
 800d128:	4619      	mov	r1, r3
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	f7ff fde8 	bl	800cd00 <move_window>
 800d130:	4603      	mov	r3, r0
 800d132:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d134:	7ffb      	ldrb	r3, [r7, #31]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d128      	bne.n	800d18c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d14e:	4413      	add	r3, r2
 800d150:	4618      	mov	r0, r3
 800d152:	f7ff fb3d 	bl	800c7d0 <ld_dword>
 800d156:	4603      	mov	r3, r0
 800d158:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d15c:	4323      	orrs	r3, r4
 800d15e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d16e:	4413      	add	r3, r2
 800d170:	6879      	ldr	r1, [r7, #4]
 800d172:	4618      	mov	r0, r3
 800d174:	f7ff fb6a 	bl	800c84c <st_dword>
			fs->wflag = 1;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2201      	movs	r2, #1
 800d17c:	70da      	strb	r2, [r3, #3]
			break;
 800d17e:	e006      	b.n	800d18e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d180:	bf00      	nop
 800d182:	e004      	b.n	800d18e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d184:	bf00      	nop
 800d186:	e002      	b.n	800d18e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d188:	bf00      	nop
 800d18a:	e000      	b.n	800d18e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d18c:	bf00      	nop
		}
	}
	return res;
 800d18e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3724      	adds	r7, #36	@ 0x24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd90      	pop	{r4, r7, pc}

0800d198 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b088      	sub	sp, #32
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d904      	bls.n	800d1be <remove_chain+0x26>
 800d1b4:	69bb      	ldr	r3, [r7, #24]
 800d1b6:	695b      	ldr	r3, [r3, #20]
 800d1b8:	68ba      	ldr	r2, [r7, #8]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d301      	bcc.n	800d1c2 <remove_chain+0x2a>
 800d1be:	2302      	movs	r3, #2
 800d1c0:	e04b      	b.n	800d25a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00c      	beq.n	800d1e2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1cc:	6879      	ldr	r1, [r7, #4]
 800d1ce:	69b8      	ldr	r0, [r7, #24]
 800d1d0:	f7ff fef8 	bl	800cfc4 <put_fat>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d1d8:	7ffb      	ldrb	r3, [r7, #31]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d001      	beq.n	800d1e2 <remove_chain+0x4a>
 800d1de:	7ffb      	ldrb	r3, [r7, #31]
 800d1e0:	e03b      	b.n	800d25a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d1e2:	68b9      	ldr	r1, [r7, #8]
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	f7ff fe46 	bl	800ce76 <get_fat>
 800d1ea:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d031      	beq.n	800d256 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d101      	bne.n	800d1fc <remove_chain+0x64>
 800d1f8:	2302      	movs	r3, #2
 800d1fa:	e02e      	b.n	800d25a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d202:	d101      	bne.n	800d208 <remove_chain+0x70>
 800d204:	2301      	movs	r3, #1
 800d206:	e028      	b.n	800d25a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d208:	2200      	movs	r2, #0
 800d20a:	68b9      	ldr	r1, [r7, #8]
 800d20c:	69b8      	ldr	r0, [r7, #24]
 800d20e:	f7ff fed9 	bl	800cfc4 <put_fat>
 800d212:	4603      	mov	r3, r0
 800d214:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d216:	7ffb      	ldrb	r3, [r7, #31]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d001      	beq.n	800d220 <remove_chain+0x88>
 800d21c:	7ffb      	ldrb	r3, [r7, #31]
 800d21e:	e01c      	b.n	800d25a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	691a      	ldr	r2, [r3, #16]
 800d224:	69bb      	ldr	r3, [r7, #24]
 800d226:	695b      	ldr	r3, [r3, #20]
 800d228:	3b02      	subs	r3, #2
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d20b      	bcs.n	800d246 <remove_chain+0xae>
			fs->free_clst++;
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	691b      	ldr	r3, [r3, #16]
 800d232:	1c5a      	adds	r2, r3, #1
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	791b      	ldrb	r3, [r3, #4]
 800d23c:	f043 0301 	orr.w	r3, r3, #1
 800d240:	b2da      	uxtb	r2, r3
 800d242:	69bb      	ldr	r3, [r7, #24]
 800d244:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	695b      	ldr	r3, [r3, #20]
 800d24e:	68ba      	ldr	r2, [r7, #8]
 800d250:	429a      	cmp	r2, r3
 800d252:	d3c6      	bcc.n	800d1e2 <remove_chain+0x4a>
 800d254:	e000      	b.n	800d258 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d256:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3720      	adds	r7, #32
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}

0800d262 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d262:	b580      	push	{r7, lr}
 800d264:	b088      	sub	sp, #32
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
 800d26a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10d      	bne.n	800d294 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d004      	beq.n	800d28e <create_chain+0x2c>
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	695b      	ldr	r3, [r3, #20]
 800d288:	69ba      	ldr	r2, [r7, #24]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d31b      	bcc.n	800d2c6 <create_chain+0x64>
 800d28e:	2301      	movs	r3, #1
 800d290:	61bb      	str	r3, [r7, #24]
 800d292:	e018      	b.n	800d2c6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d294:	6839      	ldr	r1, [r7, #0]
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7ff fded 	bl	800ce76 <get_fat>
 800d29c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d801      	bhi.n	800d2a8 <create_chain+0x46>
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	e070      	b.n	800d38a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ae:	d101      	bne.n	800d2b4 <create_chain+0x52>
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	e06a      	b.n	800d38a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	695b      	ldr	r3, [r3, #20]
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d201      	bcs.n	800d2c2 <create_chain+0x60>
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	e063      	b.n	800d38a <create_chain+0x128>
		scl = clst;
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	695b      	ldr	r3, [r3, #20]
 800d2d4:	69fa      	ldr	r2, [r7, #28]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d307      	bcc.n	800d2ea <create_chain+0x88>
				ncl = 2;
 800d2da:	2302      	movs	r3, #2
 800d2dc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d2de:	69fa      	ldr	r2, [r7, #28]
 800d2e0:	69bb      	ldr	r3, [r7, #24]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d901      	bls.n	800d2ea <create_chain+0x88>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	e04f      	b.n	800d38a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d2ea:	69f9      	ldr	r1, [r7, #28]
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f7ff fdc2 	bl	800ce76 <get_fat>
 800d2f2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00e      	beq.n	800d318 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d003      	beq.n	800d308 <create_chain+0xa6>
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d306:	d101      	bne.n	800d30c <create_chain+0xaa>
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	e03e      	b.n	800d38a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d30c:	69fa      	ldr	r2, [r7, #28]
 800d30e:	69bb      	ldr	r3, [r7, #24]
 800d310:	429a      	cmp	r2, r3
 800d312:	d1da      	bne.n	800d2ca <create_chain+0x68>
 800d314:	2300      	movs	r3, #0
 800d316:	e038      	b.n	800d38a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d318:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d31a:	f04f 32ff 	mov.w	r2, #4294967295
 800d31e:	69f9      	ldr	r1, [r7, #28]
 800d320:	6938      	ldr	r0, [r7, #16]
 800d322:	f7ff fe4f 	bl	800cfc4 <put_fat>
 800d326:	4603      	mov	r3, r0
 800d328:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d32a:	7dfb      	ldrb	r3, [r7, #23]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d109      	bne.n	800d344 <create_chain+0xe2>
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d006      	beq.n	800d344 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d336:	69fa      	ldr	r2, [r7, #28]
 800d338:	6839      	ldr	r1, [r7, #0]
 800d33a:	6938      	ldr	r0, [r7, #16]
 800d33c:	f7ff fe42 	bl	800cfc4 <put_fat>
 800d340:	4603      	mov	r3, r0
 800d342:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d344:	7dfb      	ldrb	r3, [r7, #23]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d116      	bne.n	800d378 <create_chain+0x116>
		fs->last_clst = ncl;
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	69fa      	ldr	r2, [r7, #28]
 800d34e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	691a      	ldr	r2, [r3, #16]
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	695b      	ldr	r3, [r3, #20]
 800d358:	3b02      	subs	r3, #2
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d804      	bhi.n	800d368 <create_chain+0x106>
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	691b      	ldr	r3, [r3, #16]
 800d362:	1e5a      	subs	r2, r3, #1
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	791b      	ldrb	r3, [r3, #4]
 800d36c:	f043 0301 	orr.w	r3, r3, #1
 800d370:	b2da      	uxtb	r2, r3
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	711a      	strb	r2, [r3, #4]
 800d376:	e007      	b.n	800d388 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d378:	7dfb      	ldrb	r3, [r7, #23]
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d102      	bne.n	800d384 <create_chain+0x122>
 800d37e:	f04f 33ff 	mov.w	r3, #4294967295
 800d382:	e000      	b.n	800d386 <create_chain+0x124>
 800d384:	2301      	movs	r3, #1
 800d386:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d388:	69fb      	ldr	r3, [r7, #28]
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3720      	adds	r7, #32
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}

0800d392 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d392:	b480      	push	{r7}
 800d394:	b087      	sub	sp, #28
 800d396:	af00      	add	r7, sp, #0
 800d398:	6078      	str	r0, [r7, #4]
 800d39a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3a6:	3304      	adds	r3, #4
 800d3a8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	0a5b      	lsrs	r3, r3, #9
 800d3ae:	68fa      	ldr	r2, [r7, #12]
 800d3b0:	8952      	ldrh	r2, [r2, #10]
 800d3b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3b6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	1d1a      	adds	r2, r3, #4
 800d3bc:	613a      	str	r2, [r7, #16]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d101      	bne.n	800d3cc <clmt_clust+0x3a>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	e010      	b.n	800d3ee <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d3cc:	697a      	ldr	r2, [r7, #20]
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d307      	bcc.n	800d3e4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d3d4:	697a      	ldr	r2, [r7, #20]
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	1ad3      	subs	r3, r2, r3
 800d3da:	617b      	str	r3, [r7, #20]
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	3304      	adds	r3, #4
 800d3e0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d3e2:	e7e9      	b.n	800d3b8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d3e4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	4413      	add	r3, r2
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	371c      	adds	r7, #28
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr

0800d3fa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d3fa:	b580      	push	{r7, lr}
 800d3fc:	b086      	sub	sp, #24
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
 800d402:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d410:	d204      	bcs.n	800d41c <dir_sdi+0x22>
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	f003 031f 	and.w	r3, r3, #31
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d001      	beq.n	800d420 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d41c:	2302      	movs	r3, #2
 800d41e:	e063      	b.n	800d4e8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	683a      	ldr	r2, [r7, #0]
 800d424:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d106      	bne.n	800d440 <dir_sdi+0x46>
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	2b02      	cmp	r3, #2
 800d438:	d902      	bls.n	800d440 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d43e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10c      	bne.n	800d460 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	095b      	lsrs	r3, r3, #5
 800d44a:	693a      	ldr	r2, [r7, #16]
 800d44c:	8912      	ldrh	r2, [r2, #8]
 800d44e:	4293      	cmp	r3, r2
 800d450:	d301      	bcc.n	800d456 <dir_sdi+0x5c>
 800d452:	2302      	movs	r3, #2
 800d454:	e048      	b.n	800d4e8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	61da      	str	r2, [r3, #28]
 800d45e:	e029      	b.n	800d4b4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	895b      	ldrh	r3, [r3, #10]
 800d464:	025b      	lsls	r3, r3, #9
 800d466:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d468:	e019      	b.n	800d49e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6979      	ldr	r1, [r7, #20]
 800d46e:	4618      	mov	r0, r3
 800d470:	f7ff fd01 	bl	800ce76 <get_fat>
 800d474:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d47c:	d101      	bne.n	800d482 <dir_sdi+0x88>
 800d47e:	2301      	movs	r3, #1
 800d480:	e032      	b.n	800d4e8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	2b01      	cmp	r3, #1
 800d486:	d904      	bls.n	800d492 <dir_sdi+0x98>
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	695b      	ldr	r3, [r3, #20]
 800d48c:	697a      	ldr	r2, [r7, #20]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d301      	bcc.n	800d496 <dir_sdi+0x9c>
 800d492:	2302      	movs	r3, #2
 800d494:	e028      	b.n	800d4e8 <dir_sdi+0xee>
			ofs -= csz;
 800d496:	683a      	ldr	r2, [r7, #0]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	1ad3      	subs	r3, r2, r3
 800d49c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d49e:	683a      	ldr	r2, [r7, #0]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d2e1      	bcs.n	800d46a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d4a6:	6979      	ldr	r1, [r7, #20]
 800d4a8:	6938      	ldr	r0, [r7, #16]
 800d4aa:	f7ff fcc5 	bl	800ce38 <clust2sect>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	697a      	ldr	r2, [r7, #20]
 800d4b8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	69db      	ldr	r3, [r3, #28]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d101      	bne.n	800d4c6 <dir_sdi+0xcc>
 800d4c2:	2302      	movs	r3, #2
 800d4c4:	e010      	b.n	800d4e8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	69da      	ldr	r2, [r3, #28]
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	0a5b      	lsrs	r3, r3, #9
 800d4ce:	441a      	add	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4e0:	441a      	add	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d4e6:	2300      	movs	r3, #0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3718      	adds	r7, #24
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	695b      	ldr	r3, [r3, #20]
 800d504:	3320      	adds	r3, #32
 800d506:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	69db      	ldr	r3, [r3, #28]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d003      	beq.n	800d518 <dir_next+0x28>
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d516:	d301      	bcc.n	800d51c <dir_next+0x2c>
 800d518:	2304      	movs	r3, #4
 800d51a:	e0aa      	b.n	800d672 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d522:	2b00      	cmp	r3, #0
 800d524:	f040 8098 	bne.w	800d658 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	69db      	ldr	r3, [r3, #28]
 800d52c:	1c5a      	adds	r2, r3, #1
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	699b      	ldr	r3, [r3, #24]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d10b      	bne.n	800d552 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	095b      	lsrs	r3, r3, #5
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	8912      	ldrh	r2, [r2, #8]
 800d542:	4293      	cmp	r3, r2
 800d544:	f0c0 8088 	bcc.w	800d658 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	61da      	str	r2, [r3, #28]
 800d54e:	2304      	movs	r3, #4
 800d550:	e08f      	b.n	800d672 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	0a5b      	lsrs	r3, r3, #9
 800d556:	68fa      	ldr	r2, [r7, #12]
 800d558:	8952      	ldrh	r2, [r2, #10]
 800d55a:	3a01      	subs	r2, #1
 800d55c:	4013      	ands	r3, r2
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d17a      	bne.n	800d658 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d562:	687a      	ldr	r2, [r7, #4]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	699b      	ldr	r3, [r3, #24]
 800d568:	4619      	mov	r1, r3
 800d56a:	4610      	mov	r0, r2
 800d56c:	f7ff fc83 	bl	800ce76 <get_fat>
 800d570:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	2b01      	cmp	r3, #1
 800d576:	d801      	bhi.n	800d57c <dir_next+0x8c>
 800d578:	2302      	movs	r3, #2
 800d57a:	e07a      	b.n	800d672 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d582:	d101      	bne.n	800d588 <dir_next+0x98>
 800d584:	2301      	movs	r3, #1
 800d586:	e074      	b.n	800d672 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	695b      	ldr	r3, [r3, #20]
 800d58c:	697a      	ldr	r2, [r7, #20]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d358      	bcc.n	800d644 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d104      	bne.n	800d5a2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	61da      	str	r2, [r3, #28]
 800d59e:	2304      	movs	r3, #4
 800d5a0:	e067      	b.n	800d672 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	699b      	ldr	r3, [r3, #24]
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	4610      	mov	r0, r2
 800d5ac:	f7ff fe59 	bl	800d262 <create_chain>
 800d5b0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d101      	bne.n	800d5bc <dir_next+0xcc>
 800d5b8:	2307      	movs	r3, #7
 800d5ba:	e05a      	b.n	800d672 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d101      	bne.n	800d5c6 <dir_next+0xd6>
 800d5c2:	2302      	movs	r3, #2
 800d5c4:	e055      	b.n	800d672 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5cc:	d101      	bne.n	800d5d2 <dir_next+0xe2>
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e04f      	b.n	800d672 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f7ff fb50 	bl	800cc78 <sync_window>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d001      	beq.n	800d5e2 <dir_next+0xf2>
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e047      	b.n	800d672 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	3330      	adds	r3, #48	@ 0x30
 800d5e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d5ea:	2100      	movs	r1, #0
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7ff f97a 	bl	800c8e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	613b      	str	r3, [r7, #16]
 800d5f6:	6979      	ldr	r1, [r7, #20]
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	f7ff fc1d 	bl	800ce38 <clust2sect>
 800d5fe:	4602      	mov	r2, r0
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d604:	e012      	b.n	800d62c <dir_next+0x13c>
						fs->wflag = 1;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2201      	movs	r2, #1
 800d60a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d60c:	68f8      	ldr	r0, [r7, #12]
 800d60e:	f7ff fb33 	bl	800cc78 <sync_window>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d001      	beq.n	800d61c <dir_next+0x12c>
 800d618:	2301      	movs	r3, #1
 800d61a:	e02a      	b.n	800d672 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	3301      	adds	r3, #1
 800d620:	613b      	str	r3, [r7, #16]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d626:	1c5a      	adds	r2, r3, #1
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	895b      	ldrh	r3, [r3, #10]
 800d630:	461a      	mov	r2, r3
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	4293      	cmp	r3, r2
 800d636:	d3e6      	bcc.n	800d606 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	1ad2      	subs	r2, r2, r3
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	697a      	ldr	r2, [r7, #20]
 800d648:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d64a:	6979      	ldr	r1, [r7, #20]
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f7ff fbf3 	bl	800ce38 <clust2sect>
 800d652:	4602      	mov	r2, r0
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d66a:	441a      	add	r2, r3
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3718      	adds	r7, #24
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b086      	sub	sp, #24
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
 800d682:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d68a:	2100      	movs	r1, #0
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7ff feb4 	bl	800d3fa <dir_sdi>
 800d692:	4603      	mov	r3, r0
 800d694:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d696:	7dfb      	ldrb	r3, [r7, #23]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d12b      	bne.n	800d6f4 <dir_alloc+0x7a>
		n = 0;
 800d69c:	2300      	movs	r3, #0
 800d69e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	69db      	ldr	r3, [r3, #28]
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f7ff fb2a 	bl	800cd00 <move_window>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d6b0:	7dfb      	ldrb	r3, [r7, #23]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d11d      	bne.n	800d6f2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a1b      	ldr	r3, [r3, #32]
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	2be5      	cmp	r3, #229	@ 0xe5
 800d6be:	d004      	beq.n	800d6ca <dir_alloc+0x50>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6a1b      	ldr	r3, [r3, #32]
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d107      	bne.n	800d6da <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	613b      	str	r3, [r7, #16]
 800d6d0:	693a      	ldr	r2, [r7, #16]
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d102      	bne.n	800d6de <dir_alloc+0x64>
 800d6d8:	e00c      	b.n	800d6f4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d6da:	2300      	movs	r3, #0
 800d6dc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d6de:	2101      	movs	r1, #1
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f7ff ff05 	bl	800d4f0 <dir_next>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d6ea:	7dfb      	ldrb	r3, [r7, #23]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d0d7      	beq.n	800d6a0 <dir_alloc+0x26>
 800d6f0:	e000      	b.n	800d6f4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d6f2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d6f4:	7dfb      	ldrb	r3, [r7, #23]
 800d6f6:	2b04      	cmp	r3, #4
 800d6f8:	d101      	bne.n	800d6fe <dir_alloc+0x84>
 800d6fa:	2307      	movs	r3, #7
 800d6fc:	75fb      	strb	r3, [r7, #23]
	return res;
 800d6fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d700:	4618      	mov	r0, r3
 800d702:	3718      	adds	r7, #24
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	331a      	adds	r3, #26
 800d716:	4618      	mov	r0, r3
 800d718:	f7ff f842 	bl	800c7a0 <ld_word>
 800d71c:	4603      	mov	r3, r0
 800d71e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	2b03      	cmp	r3, #3
 800d726:	d109      	bne.n	800d73c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	3314      	adds	r3, #20
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7ff f837 	bl	800c7a0 <ld_word>
 800d732:	4603      	mov	r3, r0
 800d734:	041b      	lsls	r3, r3, #16
 800d736:	68fa      	ldr	r2, [r7, #12]
 800d738:	4313      	orrs	r3, r2
 800d73a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d73c:	68fb      	ldr	r3, [r7, #12]
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d746:	b580      	push	{r7, lr}
 800d748:	b084      	sub	sp, #16
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	60f8      	str	r0, [r7, #12]
 800d74e:	60b9      	str	r1, [r7, #8]
 800d750:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	331a      	adds	r3, #26
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	b292      	uxth	r2, r2
 800d75a:	4611      	mov	r1, r2
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7ff f85a 	bl	800c816 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	2b03      	cmp	r3, #3
 800d768:	d109      	bne.n	800d77e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	f103 0214 	add.w	r2, r3, #20
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	0c1b      	lsrs	r3, r3, #16
 800d774:	b29b      	uxth	r3, r3
 800d776:	4619      	mov	r1, r3
 800d778:	4610      	mov	r0, r2
 800d77a:	f7ff f84c 	bl	800c816 <st_word>
	}
}
 800d77e:	bf00      	nop
 800d780:	3710      	adds	r7, #16
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d786:	b580      	push	{r7, lr}
 800d788:	b086      	sub	sp, #24
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d794:	2100      	movs	r1, #0
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7ff fe2f 	bl	800d3fa <dir_sdi>
 800d79c:	4603      	mov	r3, r0
 800d79e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d7a0:	7dfb      	ldrb	r3, [r7, #23]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d001      	beq.n	800d7aa <dir_find+0x24>
 800d7a6:	7dfb      	ldrb	r3, [r7, #23]
 800d7a8:	e03e      	b.n	800d828 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	69db      	ldr	r3, [r3, #28]
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	6938      	ldr	r0, [r7, #16]
 800d7b2:	f7ff faa5 	bl	800cd00 <move_window>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d7ba:	7dfb      	ldrb	r3, [r7, #23]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d12f      	bne.n	800d820 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6a1b      	ldr	r3, [r3, #32]
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d7c8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d102      	bne.n	800d7d4 <dir_find+0x4e>
 800d7ce:	2304      	movs	r3, #4
 800d7d0:	75fb      	strb	r3, [r7, #23]
 800d7d2:	e028      	b.n	800d826 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6a1b      	ldr	r3, [r3, #32]
 800d7d8:	330b      	adds	r3, #11
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d7e0:	b2da      	uxtb	r2, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6a1b      	ldr	r3, [r3, #32]
 800d7ea:	330b      	adds	r3, #11
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	f003 0308 	and.w	r3, r3, #8
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10a      	bne.n	800d80c <dir_find+0x86>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a18      	ldr	r0, [r3, #32]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	3324      	adds	r3, #36	@ 0x24
 800d7fe:	220b      	movs	r2, #11
 800d800:	4619      	mov	r1, r3
 800d802:	f7ff f88b 	bl	800c91c <mem_cmp>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00b      	beq.n	800d824 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d80c:	2100      	movs	r1, #0
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7ff fe6e 	bl	800d4f0 <dir_next>
 800d814:	4603      	mov	r3, r0
 800d816:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d818:	7dfb      	ldrb	r3, [r7, #23]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d0c5      	beq.n	800d7aa <dir_find+0x24>
 800d81e:	e002      	b.n	800d826 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d820:	bf00      	nop
 800d822:	e000      	b.n	800d826 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d824:	bf00      	nop

	return res;
 800d826:	7dfb      	ldrb	r3, [r7, #23]
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3718      	adds	r7, #24
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d83e:	2101      	movs	r1, #1
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f7ff ff1a 	bl	800d67a <dir_alloc>
 800d846:	4603      	mov	r3, r0
 800d848:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d84a:	7bfb      	ldrb	r3, [r7, #15]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d11c      	bne.n	800d88a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	69db      	ldr	r3, [r3, #28]
 800d854:	4619      	mov	r1, r3
 800d856:	68b8      	ldr	r0, [r7, #8]
 800d858:	f7ff fa52 	bl	800cd00 <move_window>
 800d85c:	4603      	mov	r3, r0
 800d85e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d860:	7bfb      	ldrb	r3, [r7, #15]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d111      	bne.n	800d88a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6a1b      	ldr	r3, [r3, #32]
 800d86a:	2220      	movs	r2, #32
 800d86c:	2100      	movs	r1, #0
 800d86e:	4618      	mov	r0, r3
 800d870:	f7ff f839 	bl	800c8e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6a18      	ldr	r0, [r3, #32]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	3324      	adds	r3, #36	@ 0x24
 800d87c:	220b      	movs	r2, #11
 800d87e:	4619      	mov	r1, r3
 800d880:	f7ff f810 	bl	800c8a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	2201      	movs	r2, #1
 800d888:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b088      	sub	sp, #32
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	60fb      	str	r3, [r7, #12]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	3324      	adds	r3, #36	@ 0x24
 800d8a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d8aa:	220b      	movs	r2, #11
 800d8ac:	2120      	movs	r1, #32
 800d8ae:	68b8      	ldr	r0, [r7, #8]
 800d8b0:	f7ff f819 	bl	800c8e6 <mem_set>
	si = i = 0; ni = 8;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	613b      	str	r3, [r7, #16]
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	61fb      	str	r3, [r7, #28]
 800d8bc:	2308      	movs	r3, #8
 800d8be:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	1c5a      	adds	r2, r3, #1
 800d8c4:	61fa      	str	r2, [r7, #28]
 800d8c6:	68fa      	ldr	r2, [r7, #12]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d8ce:	7efb      	ldrb	r3, [r7, #27]
 800d8d0:	2b20      	cmp	r3, #32
 800d8d2:	d94e      	bls.n	800d972 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d8d4:	7efb      	ldrb	r3, [r7, #27]
 800d8d6:	2b2f      	cmp	r3, #47	@ 0x2f
 800d8d8:	d006      	beq.n	800d8e8 <create_name+0x54>
 800d8da:	7efb      	ldrb	r3, [r7, #27]
 800d8dc:	2b5c      	cmp	r3, #92	@ 0x5c
 800d8de:	d110      	bne.n	800d902 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d8e0:	e002      	b.n	800d8e8 <create_name+0x54>
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	61fb      	str	r3, [r7, #28]
 800d8e8:	68fa      	ldr	r2, [r7, #12]
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d8f2:	d0f6      	beq.n	800d8e2 <create_name+0x4e>
 800d8f4:	68fa      	ldr	r2, [r7, #12]
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	2b5c      	cmp	r3, #92	@ 0x5c
 800d8fe:	d0f0      	beq.n	800d8e2 <create_name+0x4e>
			break;
 800d900:	e038      	b.n	800d974 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d902:	7efb      	ldrb	r3, [r7, #27]
 800d904:	2b2e      	cmp	r3, #46	@ 0x2e
 800d906:	d003      	beq.n	800d910 <create_name+0x7c>
 800d908:	693a      	ldr	r2, [r7, #16]
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d30c      	bcc.n	800d92a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	2b0b      	cmp	r3, #11
 800d914:	d002      	beq.n	800d91c <create_name+0x88>
 800d916:	7efb      	ldrb	r3, [r7, #27]
 800d918:	2b2e      	cmp	r3, #46	@ 0x2e
 800d91a:	d001      	beq.n	800d920 <create_name+0x8c>
 800d91c:	2306      	movs	r3, #6
 800d91e:	e044      	b.n	800d9aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d920:	2308      	movs	r3, #8
 800d922:	613b      	str	r3, [r7, #16]
 800d924:	230b      	movs	r3, #11
 800d926:	617b      	str	r3, [r7, #20]
			continue;
 800d928:	e022      	b.n	800d970 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d92a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	da04      	bge.n	800d93c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d932:	7efb      	ldrb	r3, [r7, #27]
 800d934:	3b80      	subs	r3, #128	@ 0x80
 800d936:	4a1f      	ldr	r2, [pc, #124]	@ (800d9b4 <create_name+0x120>)
 800d938:	5cd3      	ldrb	r3, [r2, r3]
 800d93a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d93c:	7efb      	ldrb	r3, [r7, #27]
 800d93e:	4619      	mov	r1, r3
 800d940:	481d      	ldr	r0, [pc, #116]	@ (800d9b8 <create_name+0x124>)
 800d942:	f7ff f812 	bl	800c96a <chk_chr>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d001      	beq.n	800d950 <create_name+0xbc>
 800d94c:	2306      	movs	r3, #6
 800d94e:	e02c      	b.n	800d9aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d950:	7efb      	ldrb	r3, [r7, #27]
 800d952:	2b60      	cmp	r3, #96	@ 0x60
 800d954:	d905      	bls.n	800d962 <create_name+0xce>
 800d956:	7efb      	ldrb	r3, [r7, #27]
 800d958:	2b7a      	cmp	r3, #122	@ 0x7a
 800d95a:	d802      	bhi.n	800d962 <create_name+0xce>
 800d95c:	7efb      	ldrb	r3, [r7, #27]
 800d95e:	3b20      	subs	r3, #32
 800d960:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	1c5a      	adds	r2, r3, #1
 800d966:	613a      	str	r2, [r7, #16]
 800d968:	68ba      	ldr	r2, [r7, #8]
 800d96a:	4413      	add	r3, r2
 800d96c:	7efa      	ldrb	r2, [r7, #27]
 800d96e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d970:	e7a6      	b.n	800d8c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d972:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d974:	68fa      	ldr	r2, [r7, #12]
 800d976:	69fb      	ldr	r3, [r7, #28]
 800d978:	441a      	add	r2, r3
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d101      	bne.n	800d988 <create_name+0xf4>
 800d984:	2306      	movs	r3, #6
 800d986:	e010      	b.n	800d9aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	2be5      	cmp	r3, #229	@ 0xe5
 800d98e:	d102      	bne.n	800d996 <create_name+0x102>
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	2205      	movs	r2, #5
 800d994:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d996:	7efb      	ldrb	r3, [r7, #27]
 800d998:	2b20      	cmp	r3, #32
 800d99a:	d801      	bhi.n	800d9a0 <create_name+0x10c>
 800d99c:	2204      	movs	r2, #4
 800d99e:	e000      	b.n	800d9a2 <create_name+0x10e>
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	330b      	adds	r3, #11
 800d9a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d9a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3720      	adds	r7, #32
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	080188f4 	.word	0x080188f4
 800d9b8:	0801884c 	.word	0x0801884c

0800d9bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b086      	sub	sp, #24
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d9d0:	e002      	b.n	800d9d8 <follow_path+0x1c>
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	603b      	str	r3, [r7, #0]
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	2b2f      	cmp	r3, #47	@ 0x2f
 800d9de:	d0f8      	beq.n	800d9d2 <follow_path+0x16>
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	2b5c      	cmp	r3, #92	@ 0x5c
 800d9e6:	d0f4      	beq.n	800d9d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	2b1f      	cmp	r3, #31
 800d9f4:	d80a      	bhi.n	800da0c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2280      	movs	r2, #128	@ 0x80
 800d9fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d9fe:	2100      	movs	r1, #0
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f7ff fcfa 	bl	800d3fa <dir_sdi>
 800da06:	4603      	mov	r3, r0
 800da08:	75fb      	strb	r3, [r7, #23]
 800da0a:	e043      	b.n	800da94 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800da0c:	463b      	mov	r3, r7
 800da0e:	4619      	mov	r1, r3
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7ff ff3f 	bl	800d894 <create_name>
 800da16:	4603      	mov	r3, r0
 800da18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800da1a:	7dfb      	ldrb	r3, [r7, #23]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d134      	bne.n	800da8a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f7ff feb0 	bl	800d786 <dir_find>
 800da26:	4603      	mov	r3, r0
 800da28:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800da30:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800da32:	7dfb      	ldrb	r3, [r7, #23]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d00a      	beq.n	800da4e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800da38:	7dfb      	ldrb	r3, [r7, #23]
 800da3a:	2b04      	cmp	r3, #4
 800da3c:	d127      	bne.n	800da8e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800da3e:	7afb      	ldrb	r3, [r7, #11]
 800da40:	f003 0304 	and.w	r3, r3, #4
 800da44:	2b00      	cmp	r3, #0
 800da46:	d122      	bne.n	800da8e <follow_path+0xd2>
 800da48:	2305      	movs	r3, #5
 800da4a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800da4c:	e01f      	b.n	800da8e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800da4e:	7afb      	ldrb	r3, [r7, #11]
 800da50:	f003 0304 	and.w	r3, r3, #4
 800da54:	2b00      	cmp	r3, #0
 800da56:	d11c      	bne.n	800da92 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	799b      	ldrb	r3, [r3, #6]
 800da5c:	f003 0310 	and.w	r3, r3, #16
 800da60:	2b00      	cmp	r3, #0
 800da62:	d102      	bne.n	800da6a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800da64:	2305      	movs	r3, #5
 800da66:	75fb      	strb	r3, [r7, #23]
 800da68:	e014      	b.n	800da94 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	695b      	ldr	r3, [r3, #20]
 800da74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da78:	4413      	add	r3, r2
 800da7a:	4619      	mov	r1, r3
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f7ff fe43 	bl	800d708 <ld_clust>
 800da82:	4602      	mov	r2, r0
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800da88:	e7c0      	b.n	800da0c <follow_path+0x50>
			if (res != FR_OK) break;
 800da8a:	bf00      	nop
 800da8c:	e002      	b.n	800da94 <follow_path+0xd8>
				break;
 800da8e:	bf00      	nop
 800da90:	e000      	b.n	800da94 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800da92:	bf00      	nop
			}
		}
	}

	return res;
 800da94:	7dfb      	ldrb	r3, [r7, #23]
}
 800da96:	4618      	mov	r0, r3
 800da98:	3718      	adds	r7, #24
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}

0800da9e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800da9e:	b480      	push	{r7}
 800daa0:	b087      	sub	sp, #28
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800daa6:	f04f 33ff 	mov.w	r3, #4294967295
 800daaa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d031      	beq.n	800db18 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	617b      	str	r3, [r7, #20]
 800daba:	e002      	b.n	800dac2 <get_ldnumber+0x24>
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	3301      	adds	r3, #1
 800dac0:	617b      	str	r3, [r7, #20]
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	2b20      	cmp	r3, #32
 800dac8:	d903      	bls.n	800dad2 <get_ldnumber+0x34>
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	2b3a      	cmp	r3, #58	@ 0x3a
 800dad0:	d1f4      	bne.n	800dabc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	2b3a      	cmp	r3, #58	@ 0x3a
 800dad8:	d11c      	bne.n	800db14 <get_ldnumber+0x76>
			tp = *path;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	1c5a      	adds	r2, r3, #1
 800dae4:	60fa      	str	r2, [r7, #12]
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	3b30      	subs	r3, #48	@ 0x30
 800daea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	2b09      	cmp	r3, #9
 800daf0:	d80e      	bhi.n	800db10 <get_ldnumber+0x72>
 800daf2:	68fa      	ldr	r2, [r7, #12]
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d10a      	bne.n	800db10 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d107      	bne.n	800db10 <get_ldnumber+0x72>
					vol = (int)i;
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	3301      	adds	r3, #1
 800db08:	617b      	str	r3, [r7, #20]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	697a      	ldr	r2, [r7, #20]
 800db0e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	e002      	b.n	800db1a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800db14:	2300      	movs	r3, #0
 800db16:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800db18:	693b      	ldr	r3, [r7, #16]
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	371c      	adds	r7, #28
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr
	...

0800db28 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2200      	movs	r2, #0
 800db36:	70da      	strb	r2, [r3, #3]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f04f 32ff 	mov.w	r2, #4294967295
 800db3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800db40:	6839      	ldr	r1, [r7, #0]
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f7ff f8dc 	bl	800cd00 <move_window>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d001      	beq.n	800db52 <check_fs+0x2a>
 800db4e:	2304      	movs	r3, #4
 800db50:	e038      	b.n	800dbc4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	3330      	adds	r3, #48	@ 0x30
 800db56:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7fe fe20 	bl	800c7a0 <ld_word>
 800db60:	4603      	mov	r3, r0
 800db62:	461a      	mov	r2, r3
 800db64:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800db68:	429a      	cmp	r2, r3
 800db6a:	d001      	beq.n	800db70 <check_fs+0x48>
 800db6c:	2303      	movs	r3, #3
 800db6e:	e029      	b.n	800dbc4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800db76:	2be9      	cmp	r3, #233	@ 0xe9
 800db78:	d009      	beq.n	800db8e <check_fs+0x66>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800db80:	2beb      	cmp	r3, #235	@ 0xeb
 800db82:	d11e      	bne.n	800dbc2 <check_fs+0x9a>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800db8a:	2b90      	cmp	r3, #144	@ 0x90
 800db8c:	d119      	bne.n	800dbc2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	3330      	adds	r3, #48	@ 0x30
 800db92:	3336      	adds	r3, #54	@ 0x36
 800db94:	4618      	mov	r0, r3
 800db96:	f7fe fe1b 	bl	800c7d0 <ld_dword>
 800db9a:	4603      	mov	r3, r0
 800db9c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dba0:	4a0a      	ldr	r2, [pc, #40]	@ (800dbcc <check_fs+0xa4>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d101      	bne.n	800dbaa <check_fs+0x82>
 800dba6:	2300      	movs	r3, #0
 800dba8:	e00c      	b.n	800dbc4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	3330      	adds	r3, #48	@ 0x30
 800dbae:	3352      	adds	r3, #82	@ 0x52
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7fe fe0d 	bl	800c7d0 <ld_dword>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	4a05      	ldr	r2, [pc, #20]	@ (800dbd0 <check_fs+0xa8>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d101      	bne.n	800dbc2 <check_fs+0x9a>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	e000      	b.n	800dbc4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dbc2:	2302      	movs	r3, #2
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	00544146 	.word	0x00544146
 800dbd0:	33544146 	.word	0x33544146

0800dbd4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b096      	sub	sp, #88	@ 0x58
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	4613      	mov	r3, r2
 800dbe0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f7ff ff58 	bl	800da9e <get_ldnumber>
 800dbee:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dbf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	da01      	bge.n	800dbfa <find_volume+0x26>
 800dbf6:	230b      	movs	r3, #11
 800dbf8:	e22d      	b.n	800e056 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dbfa:	4aa1      	ldr	r2, [pc, #644]	@ (800de80 <find_volume+0x2ac>)
 800dbfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc02:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dc04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d101      	bne.n	800dc0e <find_volume+0x3a>
 800dc0a:	230c      	movs	r3, #12
 800dc0c:	e223      	b.n	800e056 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc12:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dc14:	79fb      	ldrb	r3, [r7, #7]
 800dc16:	f023 0301 	bic.w	r3, r3, #1
 800dc1a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d01a      	beq.n	800dc5a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc26:	785b      	ldrb	r3, [r3, #1]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7fe fd1b 	bl	800c664 <disk_status>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dc34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc38:	f003 0301 	and.w	r3, r3, #1
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10c      	bne.n	800dc5a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dc40:	79fb      	ldrb	r3, [r7, #7]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d007      	beq.n	800dc56 <find_volume+0x82>
 800dc46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc4a:	f003 0304 	and.w	r3, r3, #4
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d001      	beq.n	800dc56 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dc52:	230a      	movs	r3, #10
 800dc54:	e1ff      	b.n	800e056 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800dc56:	2300      	movs	r3, #0
 800dc58:	e1fd      	b.n	800e056 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dc5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dc60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc62:	b2da      	uxtb	r2, r3
 800dc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc66:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc6a:	785b      	ldrb	r3, [r3, #1]
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7fe fd13 	bl	800c698 <disk_initialize>
 800dc72:	4603      	mov	r3, r0
 800dc74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dc78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc7c:	f003 0301 	and.w	r3, r3, #1
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d001      	beq.n	800dc88 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dc84:	2303      	movs	r3, #3
 800dc86:	e1e6      	b.n	800e056 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dc88:	79fb      	ldrb	r3, [r7, #7]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d007      	beq.n	800dc9e <find_volume+0xca>
 800dc8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc92:	f003 0304 	and.w	r3, r3, #4
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d001      	beq.n	800dc9e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dc9a:	230a      	movs	r3, #10
 800dc9c:	e1db      	b.n	800e056 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dca2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dca4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dca6:	f7ff ff3f 	bl	800db28 <check_fs>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dcb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dcb4:	2b02      	cmp	r3, #2
 800dcb6:	d149      	bne.n	800dd4c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dcb8:	2300      	movs	r3, #0
 800dcba:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcbc:	e01e      	b.n	800dcfc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dcbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dcc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcc6:	011b      	lsls	r3, r3, #4
 800dcc8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800dccc:	4413      	add	r3, r2
 800dcce:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd2:	3304      	adds	r3, #4
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d006      	beq.n	800dce8 <find_volume+0x114>
 800dcda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcdc:	3308      	adds	r3, #8
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fe fd76 	bl	800c7d0 <ld_dword>
 800dce4:	4602      	mov	r2, r0
 800dce6:	e000      	b.n	800dcea <find_volume+0x116>
 800dce8:	2200      	movs	r2, #0
 800dcea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	3358      	adds	r3, #88	@ 0x58
 800dcf0:	443b      	add	r3, r7
 800dcf2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dcf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcfe:	2b03      	cmp	r3, #3
 800dd00:	d9dd      	bls.n	800dcbe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dd02:	2300      	movs	r3, #0
 800dd04:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800dd06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d002      	beq.n	800dd12 <find_volume+0x13e>
 800dd0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd0e:	3b01      	subs	r3, #1
 800dd10:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dd12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	3358      	adds	r3, #88	@ 0x58
 800dd18:	443b      	add	r3, r7
 800dd1a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dd1e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dd20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d005      	beq.n	800dd32 <find_volume+0x15e>
 800dd26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dd28:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dd2a:	f7ff fefd 	bl	800db28 <check_fs>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	e000      	b.n	800dd34 <find_volume+0x160>
 800dd32:	2303      	movs	r3, #3
 800dd34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dd38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d905      	bls.n	800dd4c <find_volume+0x178>
 800dd40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd42:	3301      	adds	r3, #1
 800dd44:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd48:	2b03      	cmp	r3, #3
 800dd4a:	d9e2      	bls.n	800dd12 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dd4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd50:	2b04      	cmp	r3, #4
 800dd52:	d101      	bne.n	800dd58 <find_volume+0x184>
 800dd54:	2301      	movs	r3, #1
 800dd56:	e17e      	b.n	800e056 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dd58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d901      	bls.n	800dd64 <find_volume+0x190>
 800dd60:	230d      	movs	r3, #13
 800dd62:	e178      	b.n	800e056 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd66:	3330      	adds	r3, #48	@ 0x30
 800dd68:	330b      	adds	r3, #11
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7fe fd18 	bl	800c7a0 <ld_word>
 800dd70:	4603      	mov	r3, r0
 800dd72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd76:	d001      	beq.n	800dd7c <find_volume+0x1a8>
 800dd78:	230d      	movs	r3, #13
 800dd7a:	e16c      	b.n	800e056 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd7e:	3330      	adds	r3, #48	@ 0x30
 800dd80:	3316      	adds	r3, #22
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fe fd0c 	bl	800c7a0 <ld_word>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dd8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d106      	bne.n	800dda0 <find_volume+0x1cc>
 800dd92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd94:	3330      	adds	r3, #48	@ 0x30
 800dd96:	3324      	adds	r3, #36	@ 0x24
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fe fd19 	bl	800c7d0 <ld_dword>
 800dd9e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800dda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dda2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dda4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dda6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dda8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800ddac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ddb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb2:	789b      	ldrb	r3, [r3, #2]
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d005      	beq.n	800ddc4 <find_volume+0x1f0>
 800ddb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddba:	789b      	ldrb	r3, [r3, #2]
 800ddbc:	2b02      	cmp	r3, #2
 800ddbe:	d001      	beq.n	800ddc4 <find_volume+0x1f0>
 800ddc0:	230d      	movs	r3, #13
 800ddc2:	e148      	b.n	800e056 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ddc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc6:	789b      	ldrb	r3, [r3, #2]
 800ddc8:	461a      	mov	r2, r3
 800ddca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddcc:	fb02 f303 	mul.w	r3, r2, r3
 800ddd0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ddd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ddd8:	461a      	mov	r2, r3
 800ddda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dddc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ddde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dde0:	895b      	ldrh	r3, [r3, #10]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d008      	beq.n	800ddf8 <find_volume+0x224>
 800dde6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dde8:	895b      	ldrh	r3, [r3, #10]
 800ddea:	461a      	mov	r2, r3
 800ddec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddee:	895b      	ldrh	r3, [r3, #10]
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	4013      	ands	r3, r2
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d001      	beq.n	800ddfc <find_volume+0x228>
 800ddf8:	230d      	movs	r3, #13
 800ddfa:	e12c      	b.n	800e056 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ddfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddfe:	3330      	adds	r3, #48	@ 0x30
 800de00:	3311      	adds	r3, #17
 800de02:	4618      	mov	r0, r3
 800de04:	f7fe fccc 	bl	800c7a0 <ld_word>
 800de08:	4603      	mov	r3, r0
 800de0a:	461a      	mov	r2, r3
 800de0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de0e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800de10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de12:	891b      	ldrh	r3, [r3, #8]
 800de14:	f003 030f 	and.w	r3, r3, #15
 800de18:	b29b      	uxth	r3, r3
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d001      	beq.n	800de22 <find_volume+0x24e>
 800de1e:	230d      	movs	r3, #13
 800de20:	e119      	b.n	800e056 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800de22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de24:	3330      	adds	r3, #48	@ 0x30
 800de26:	3313      	adds	r3, #19
 800de28:	4618      	mov	r0, r3
 800de2a:	f7fe fcb9 	bl	800c7a0 <ld_word>
 800de2e:	4603      	mov	r3, r0
 800de30:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800de32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de34:	2b00      	cmp	r3, #0
 800de36:	d106      	bne.n	800de46 <find_volume+0x272>
 800de38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de3a:	3330      	adds	r3, #48	@ 0x30
 800de3c:	3320      	adds	r3, #32
 800de3e:	4618      	mov	r0, r3
 800de40:	f7fe fcc6 	bl	800c7d0 <ld_dword>
 800de44:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800de46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de48:	3330      	adds	r3, #48	@ 0x30
 800de4a:	330e      	adds	r3, #14
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fe fca7 	bl	800c7a0 <ld_word>
 800de52:	4603      	mov	r3, r0
 800de54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800de56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d101      	bne.n	800de60 <find_volume+0x28c>
 800de5c:	230d      	movs	r3, #13
 800de5e:	e0fa      	b.n	800e056 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800de60:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800de62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de64:	4413      	add	r3, r2
 800de66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de68:	8912      	ldrh	r2, [r2, #8]
 800de6a:	0912      	lsrs	r2, r2, #4
 800de6c:	b292      	uxth	r2, r2
 800de6e:	4413      	add	r3, r2
 800de70:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800de72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de76:	429a      	cmp	r2, r3
 800de78:	d204      	bcs.n	800de84 <find_volume+0x2b0>
 800de7a:	230d      	movs	r3, #13
 800de7c:	e0eb      	b.n	800e056 <find_volume+0x482>
 800de7e:	bf00      	nop
 800de80:	20035f70 	.word	0x20035f70
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800de84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de88:	1ad3      	subs	r3, r2, r3
 800de8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de8c:	8952      	ldrh	r2, [r2, #10]
 800de8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800de92:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800de94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de96:	2b00      	cmp	r3, #0
 800de98:	d101      	bne.n	800de9e <find_volume+0x2ca>
 800de9a:	230d      	movs	r3, #13
 800de9c:	e0db      	b.n	800e056 <find_volume+0x482>
		fmt = FS_FAT32;
 800de9e:	2303      	movs	r3, #3
 800dea0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800deaa:	4293      	cmp	r3, r2
 800deac:	d802      	bhi.n	800deb4 <find_volume+0x2e0>
 800deae:	2302      	movs	r3, #2
 800deb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800deb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800deba:	4293      	cmp	r3, r2
 800debc:	d802      	bhi.n	800dec4 <find_volume+0x2f0>
 800debe:	2301      	movs	r3, #1
 800dec0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec6:	1c9a      	adds	r2, r3, #2
 800dec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deca:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800decc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dece:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ded0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ded2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ded4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ded6:	441a      	add	r2, r3
 800ded8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deda:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800dedc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee0:	441a      	add	r2, r3
 800dee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dee4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800dee6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800deea:	2b03      	cmp	r3, #3
 800deec:	d11e      	bne.n	800df2c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800deee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800def0:	3330      	adds	r3, #48	@ 0x30
 800def2:	332a      	adds	r3, #42	@ 0x2a
 800def4:	4618      	mov	r0, r3
 800def6:	f7fe fc53 	bl	800c7a0 <ld_word>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	d001      	beq.n	800df04 <find_volume+0x330>
 800df00:	230d      	movs	r3, #13
 800df02:	e0a8      	b.n	800e056 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800df04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df06:	891b      	ldrh	r3, [r3, #8]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d001      	beq.n	800df10 <find_volume+0x33c>
 800df0c:	230d      	movs	r3, #13
 800df0e:	e0a2      	b.n	800e056 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800df10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df12:	3330      	adds	r3, #48	@ 0x30
 800df14:	332c      	adds	r3, #44	@ 0x2c
 800df16:	4618      	mov	r0, r3
 800df18:	f7fe fc5a 	bl	800c7d0 <ld_dword>
 800df1c:	4602      	mov	r2, r0
 800df1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df20:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800df22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df24:	695b      	ldr	r3, [r3, #20]
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	647b      	str	r3, [r7, #68]	@ 0x44
 800df2a:	e01f      	b.n	800df6c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800df2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df2e:	891b      	ldrh	r3, [r3, #8]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d101      	bne.n	800df38 <find_volume+0x364>
 800df34:	230d      	movs	r3, #13
 800df36:	e08e      	b.n	800e056 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800df38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df3a:	6a1a      	ldr	r2, [r3, #32]
 800df3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df3e:	441a      	add	r2, r3
 800df40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df42:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800df44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800df48:	2b02      	cmp	r3, #2
 800df4a:	d103      	bne.n	800df54 <find_volume+0x380>
 800df4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df4e:	695b      	ldr	r3, [r3, #20]
 800df50:	005b      	lsls	r3, r3, #1
 800df52:	e00a      	b.n	800df6a <find_volume+0x396>
 800df54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df56:	695a      	ldr	r2, [r3, #20]
 800df58:	4613      	mov	r3, r2
 800df5a:	005b      	lsls	r3, r3, #1
 800df5c:	4413      	add	r3, r2
 800df5e:	085a      	lsrs	r2, r3, #1
 800df60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df62:	695b      	ldr	r3, [r3, #20]
 800df64:	f003 0301 	and.w	r3, r3, #1
 800df68:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800df6a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800df6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df6e:	699a      	ldr	r2, [r3, #24]
 800df70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df72:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800df76:	0a5b      	lsrs	r3, r3, #9
 800df78:	429a      	cmp	r2, r3
 800df7a:	d201      	bcs.n	800df80 <find_volume+0x3ac>
 800df7c:	230d      	movs	r3, #13
 800df7e:	e06a      	b.n	800e056 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800df80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df82:	f04f 32ff 	mov.w	r2, #4294967295
 800df86:	611a      	str	r2, [r3, #16]
 800df88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df8a:	691a      	ldr	r2, [r3, #16]
 800df8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df8e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800df90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df92:	2280      	movs	r2, #128	@ 0x80
 800df94:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800df96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800df9a:	2b03      	cmp	r3, #3
 800df9c:	d149      	bne.n	800e032 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800df9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa0:	3330      	adds	r3, #48	@ 0x30
 800dfa2:	3330      	adds	r3, #48	@ 0x30
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7fe fbfb 	bl	800c7a0 <ld_word>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d140      	bne.n	800e032 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dfb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dfb8:	f7fe fea2 	bl	800cd00 <move_window>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d137      	bne.n	800e032 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800dfc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dfc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfca:	3330      	adds	r3, #48	@ 0x30
 800dfcc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fe fbe5 	bl	800c7a0 <ld_word>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	461a      	mov	r2, r3
 800dfda:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d127      	bne.n	800e032 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dfe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe4:	3330      	adds	r3, #48	@ 0x30
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fe fbf2 	bl	800c7d0 <ld_dword>
 800dfec:	4603      	mov	r3, r0
 800dfee:	4a1c      	ldr	r2, [pc, #112]	@ (800e060 <find_volume+0x48c>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d11e      	bne.n	800e032 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dff6:	3330      	adds	r3, #48	@ 0x30
 800dff8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7fe fbe7 	bl	800c7d0 <ld_dword>
 800e002:	4603      	mov	r3, r0
 800e004:	4a17      	ldr	r2, [pc, #92]	@ (800e064 <find_volume+0x490>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d113      	bne.n	800e032 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e00c:	3330      	adds	r3, #48	@ 0x30
 800e00e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e012:	4618      	mov	r0, r3
 800e014:	f7fe fbdc 	bl	800c7d0 <ld_dword>
 800e018:	4602      	mov	r2, r0
 800e01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e01c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e020:	3330      	adds	r3, #48	@ 0x30
 800e022:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e026:	4618      	mov	r0, r3
 800e028:	f7fe fbd2 	bl	800c7d0 <ld_dword>
 800e02c:	4602      	mov	r2, r0
 800e02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e030:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e034:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e038:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e03a:	4b0b      	ldr	r3, [pc, #44]	@ (800e068 <find_volume+0x494>)
 800e03c:	881b      	ldrh	r3, [r3, #0]
 800e03e:	3301      	adds	r3, #1
 800e040:	b29a      	uxth	r2, r3
 800e042:	4b09      	ldr	r3, [pc, #36]	@ (800e068 <find_volume+0x494>)
 800e044:	801a      	strh	r2, [r3, #0]
 800e046:	4b08      	ldr	r3, [pc, #32]	@ (800e068 <find_volume+0x494>)
 800e048:	881a      	ldrh	r2, [r3, #0]
 800e04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e04c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e04e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e050:	f7fe fdee 	bl	800cc30 <clear_lock>
#endif
	return FR_OK;
 800e054:	2300      	movs	r3, #0
}
 800e056:	4618      	mov	r0, r3
 800e058:	3758      	adds	r7, #88	@ 0x58
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	41615252 	.word	0x41615252
 800e064:	61417272 	.word	0x61417272
 800e068:	20035f74 	.word	0x20035f74

0800e06c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e076:	2309      	movs	r3, #9
 800e078:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d01c      	beq.n	800e0ba <validate+0x4e>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d018      	beq.n	800e0ba <validate+0x4e>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d013      	beq.n	800e0ba <validate+0x4e>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	889a      	ldrh	r2, [r3, #4]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	88db      	ldrh	r3, [r3, #6]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d10c      	bne.n	800e0ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	785b      	ldrb	r3, [r3, #1]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fe fadc 	bl	800c664 <disk_status>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	f003 0301 	and.w	r3, r3, #1
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d101      	bne.n	800e0ba <validate+0x4e>
			res = FR_OK;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e0ba:	7bfb      	ldrb	r3, [r7, #15]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d102      	bne.n	800e0c6 <validate+0x5a>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	e000      	b.n	800e0c8 <validate+0x5c>
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	683a      	ldr	r2, [r7, #0]
 800e0ca:	6013      	str	r3, [r2, #0]
	return res;
 800e0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3710      	adds	r7, #16
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
	...

0800e0d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b088      	sub	sp, #32
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e0ea:	f107 0310 	add.w	r3, r7, #16
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7ff fcd5 	bl	800da9e <get_ldnumber>
 800e0f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e0f6:	69fb      	ldr	r3, [r7, #28]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	da01      	bge.n	800e100 <f_mount+0x28>
 800e0fc:	230b      	movs	r3, #11
 800e0fe:	e02b      	b.n	800e158 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e100:	4a17      	ldr	r2, [pc, #92]	@ (800e160 <f_mount+0x88>)
 800e102:	69fb      	ldr	r3, [r7, #28]
 800e104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e108:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e10a:	69bb      	ldr	r3, [r7, #24]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d005      	beq.n	800e11c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e110:	69b8      	ldr	r0, [r7, #24]
 800e112:	f7fe fd8d 	bl	800cc30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	2200      	movs	r2, #0
 800e11a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d002      	beq.n	800e128 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2200      	movs	r2, #0
 800e126:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e128:	68fa      	ldr	r2, [r7, #12]
 800e12a:	490d      	ldr	r1, [pc, #52]	@ (800e160 <f_mount+0x88>)
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d002      	beq.n	800e13e <f_mount+0x66>
 800e138:	79fb      	ldrb	r3, [r7, #7]
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	d001      	beq.n	800e142 <f_mount+0x6a>
 800e13e:	2300      	movs	r3, #0
 800e140:	e00a      	b.n	800e158 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e142:	f107 010c 	add.w	r1, r7, #12
 800e146:	f107 0308 	add.w	r3, r7, #8
 800e14a:	2200      	movs	r2, #0
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7ff fd41 	bl	800dbd4 <find_volume>
 800e152:	4603      	mov	r3, r0
 800e154:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e156:	7dfb      	ldrb	r3, [r7, #23]
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3720      	adds	r7, #32
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}
 800e160:	20035f70 	.word	0x20035f70

0800e164 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b098      	sub	sp, #96	@ 0x60
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	4613      	mov	r3, r2
 800e170:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <f_open+0x18>
 800e178:	2309      	movs	r3, #9
 800e17a:	e1a9      	b.n	800e4d0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e17c:	79fb      	ldrb	r3, [r7, #7]
 800e17e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e182:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e184:	79fa      	ldrb	r2, [r7, #7]
 800e186:	f107 0110 	add.w	r1, r7, #16
 800e18a:	f107 0308 	add.w	r3, r7, #8
 800e18e:	4618      	mov	r0, r3
 800e190:	f7ff fd20 	bl	800dbd4 <find_volume>
 800e194:	4603      	mov	r3, r0
 800e196:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e19a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	f040 818d 	bne.w	800e4be <f_open+0x35a>
		dj.obj.fs = fs;
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e1a8:	68ba      	ldr	r2, [r7, #8]
 800e1aa:	f107 0314 	add.w	r3, r7, #20
 800e1ae:	4611      	mov	r1, r2
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7ff fc03 	bl	800d9bc <follow_path>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e1bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d118      	bne.n	800e1f6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e1c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e1c8:	b25b      	sxtb	r3, r3
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	da03      	bge.n	800e1d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e1ce:	2306      	movs	r3, #6
 800e1d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e1d4:	e00f      	b.n	800e1f6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e1d6:	79fb      	ldrb	r3, [r7, #7]
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	bf8c      	ite	hi
 800e1dc:	2301      	movhi	r3, #1
 800e1de:	2300      	movls	r3, #0
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	f107 0314 	add.w	r3, r7, #20
 800e1e8:	4611      	mov	r1, r2
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fe fbd8 	bl	800c9a0 <chk_lock>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e1f6:	79fb      	ldrb	r3, [r7, #7]
 800e1f8:	f003 031c 	and.w	r3, r3, #28
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d07f      	beq.n	800e300 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e200:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e204:	2b00      	cmp	r3, #0
 800e206:	d017      	beq.n	800e238 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e208:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e20c:	2b04      	cmp	r3, #4
 800e20e:	d10e      	bne.n	800e22e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e210:	f7fe fc22 	bl	800ca58 <enq_lock>
 800e214:	4603      	mov	r3, r0
 800e216:	2b00      	cmp	r3, #0
 800e218:	d006      	beq.n	800e228 <f_open+0xc4>
 800e21a:	f107 0314 	add.w	r3, r7, #20
 800e21e:	4618      	mov	r0, r3
 800e220:	f7ff fb06 	bl	800d830 <dir_register>
 800e224:	4603      	mov	r3, r0
 800e226:	e000      	b.n	800e22a <f_open+0xc6>
 800e228:	2312      	movs	r3, #18
 800e22a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e22e:	79fb      	ldrb	r3, [r7, #7]
 800e230:	f043 0308 	orr.w	r3, r3, #8
 800e234:	71fb      	strb	r3, [r7, #7]
 800e236:	e010      	b.n	800e25a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e238:	7ebb      	ldrb	r3, [r7, #26]
 800e23a:	f003 0311 	and.w	r3, r3, #17
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d003      	beq.n	800e24a <f_open+0xe6>
					res = FR_DENIED;
 800e242:	2307      	movs	r3, #7
 800e244:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e248:	e007      	b.n	800e25a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e24a:	79fb      	ldrb	r3, [r7, #7]
 800e24c:	f003 0304 	and.w	r3, r3, #4
 800e250:	2b00      	cmp	r3, #0
 800e252:	d002      	beq.n	800e25a <f_open+0xf6>
 800e254:	2308      	movs	r3, #8
 800e256:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e25a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d168      	bne.n	800e334 <f_open+0x1d0>
 800e262:	79fb      	ldrb	r3, [r7, #7]
 800e264:	f003 0308 	and.w	r3, r3, #8
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d063      	beq.n	800e334 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e26c:	f7fd ffb8 	bl	800c1e0 <get_fattime>
 800e270:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e274:	330e      	adds	r3, #14
 800e276:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e278:	4618      	mov	r0, r3
 800e27a:	f7fe fae7 	bl	800c84c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e27e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e280:	3316      	adds	r3, #22
 800e282:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e284:	4618      	mov	r0, r3
 800e286:	f7fe fae1 	bl	800c84c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e28c:	330b      	adds	r3, #11
 800e28e:	2220      	movs	r2, #32
 800e290:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e296:	4611      	mov	r1, r2
 800e298:	4618      	mov	r0, r3
 800e29a:	f7ff fa35 	bl	800d708 <ld_clust>
 800e29e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7ff fa4d 	bl	800d746 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e2ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2ae:	331c      	adds	r3, #28
 800e2b0:	2100      	movs	r1, #0
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fe faca 	bl	800c84c <st_dword>
					fs->wflag = 1;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e2be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d037      	beq.n	800e334 <f_open+0x1d0>
						dw = fs->winsect;
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2c8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e2ca:	f107 0314 	add.w	r3, r7, #20
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7fe ff60 	bl	800d198 <remove_chain>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e2de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d126      	bne.n	800e334 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7fe fd08 	bl	800cd00 <move_window>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e2fa:	3a01      	subs	r2, #1
 800e2fc:	60da      	str	r2, [r3, #12]
 800e2fe:	e019      	b.n	800e334 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e300:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e304:	2b00      	cmp	r3, #0
 800e306:	d115      	bne.n	800e334 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e308:	7ebb      	ldrb	r3, [r7, #26]
 800e30a:	f003 0310 	and.w	r3, r3, #16
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d003      	beq.n	800e31a <f_open+0x1b6>
					res = FR_NO_FILE;
 800e312:	2304      	movs	r3, #4
 800e314:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e318:	e00c      	b.n	800e334 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e31a:	79fb      	ldrb	r3, [r7, #7]
 800e31c:	f003 0302 	and.w	r3, r3, #2
 800e320:	2b00      	cmp	r3, #0
 800e322:	d007      	beq.n	800e334 <f_open+0x1d0>
 800e324:	7ebb      	ldrb	r3, [r7, #26]
 800e326:	f003 0301 	and.w	r3, r3, #1
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d002      	beq.n	800e334 <f_open+0x1d0>
						res = FR_DENIED;
 800e32e:	2307      	movs	r3, #7
 800e330:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e334:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d126      	bne.n	800e38a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e33c:	79fb      	ldrb	r3, [r7, #7]
 800e33e:	f003 0308 	and.w	r3, r3, #8
 800e342:	2b00      	cmp	r3, #0
 800e344:	d003      	beq.n	800e34e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e346:	79fb      	ldrb	r3, [r7, #7]
 800e348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e34c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e35c:	79fb      	ldrb	r3, [r7, #7]
 800e35e:	2b01      	cmp	r3, #1
 800e360:	bf8c      	ite	hi
 800e362:	2301      	movhi	r3, #1
 800e364:	2300      	movls	r3, #0
 800e366:	b2db      	uxtb	r3, r3
 800e368:	461a      	mov	r2, r3
 800e36a:	f107 0314 	add.w	r3, r7, #20
 800e36e:	4611      	mov	r1, r2
 800e370:	4618      	mov	r0, r3
 800e372:	f7fe fb93 	bl	800ca9c <inc_lock>
 800e376:	4602      	mov	r2, r0
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	691b      	ldr	r3, [r3, #16]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d102      	bne.n	800e38a <f_open+0x226>
 800e384:	2302      	movs	r3, #2
 800e386:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e38a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f040 8095 	bne.w	800e4be <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e398:	4611      	mov	r1, r2
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7ff f9b4 	bl	800d708 <ld_clust>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e3a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3a8:	331c      	adds	r3, #28
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7fe fa10 	bl	800c7d0 <ld_dword>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e3bc:	693a      	ldr	r2, [r7, #16]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	88da      	ldrh	r2, [r3, #6]
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	79fa      	ldrb	r2, [r7, #7]
 800e3ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	3330      	adds	r3, #48	@ 0x30
 800e3e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3ea:	2100      	movs	r1, #0
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7fe fa7a 	bl	800c8e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e3f2:	79fb      	ldrb	r3, [r7, #7]
 800e3f4:	f003 0320 	and.w	r3, r3, #32
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d060      	beq.n	800e4be <f_open+0x35a>
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	68db      	ldr	r3, [r3, #12]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d05c      	beq.n	800e4be <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	68da      	ldr	r2, [r3, #12]
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	895b      	ldrh	r3, [r3, #10]
 800e410:	025b      	lsls	r3, r3, #9
 800e412:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	689b      	ldr	r3, [r3, #8]
 800e418:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	68db      	ldr	r3, [r3, #12]
 800e41e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e420:	e016      	b.n	800e450 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e426:	4618      	mov	r0, r3
 800e428:	f7fe fd25 	bl	800ce76 <get_fat>
 800e42c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e42e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e430:	2b01      	cmp	r3, #1
 800e432:	d802      	bhi.n	800e43a <f_open+0x2d6>
 800e434:	2302      	movs	r3, #2
 800e436:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e43a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e440:	d102      	bne.n	800e448 <f_open+0x2e4>
 800e442:	2301      	movs	r3, #1
 800e444:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e448:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e44a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e44c:	1ad3      	subs	r3, r2, r3
 800e44e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e450:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e454:	2b00      	cmp	r3, #0
 800e456:	d103      	bne.n	800e460 <f_open+0x2fc>
 800e458:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e45a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d8e0      	bhi.n	800e422 <f_open+0x2be>
				}
				fp->clust = clst;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e464:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e466:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d127      	bne.n	800e4be <f_open+0x35a>
 800e46e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e474:	2b00      	cmp	r3, #0
 800e476:	d022      	beq.n	800e4be <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fe fcdb 	bl	800ce38 <clust2sect>
 800e482:	6478      	str	r0, [r7, #68]	@ 0x44
 800e484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e486:	2b00      	cmp	r3, #0
 800e488:	d103      	bne.n	800e492 <f_open+0x32e>
						res = FR_INT_ERR;
 800e48a:	2302      	movs	r3, #2
 800e48c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e490:	e015      	b.n	800e4be <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e494:	0a5a      	lsrs	r2, r3, #9
 800e496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e498:	441a      	add	r2, r3
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	7858      	ldrb	r0, [r3, #1]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	6a1a      	ldr	r2, [r3, #32]
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	f7fe f919 	bl	800c6e4 <disk_read>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d002      	beq.n	800e4be <f_open+0x35a>
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e4be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d002      	beq.n	800e4cc <f_open+0x368>
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e4cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3760      	adds	r7, #96	@ 0x60
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b08e      	sub	sp, #56	@ 0x38
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	607a      	str	r2, [r7, #4]
 800e4e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f107 0214 	add.w	r2, r7, #20
 800e4f6:	4611      	mov	r1, r2
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7ff fdb7 	bl	800e06c <validate>
 800e4fe:	4603      	mov	r3, r0
 800e500:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e504:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d107      	bne.n	800e51c <f_read+0x44>
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	7d5b      	ldrb	r3, [r3, #21]
 800e510:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e514:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d002      	beq.n	800e522 <f_read+0x4a>
 800e51c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e520:	e115      	b.n	800e74e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	7d1b      	ldrb	r3, [r3, #20]
 800e526:	f003 0301 	and.w	r3, r3, #1
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d101      	bne.n	800e532 <f_read+0x5a>
 800e52e:	2307      	movs	r3, #7
 800e530:	e10d      	b.n	800e74e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	68da      	ldr	r2, [r3, #12]
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	699b      	ldr	r3, [r3, #24]
 800e53a:	1ad3      	subs	r3, r2, r3
 800e53c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e53e:	687a      	ldr	r2, [r7, #4]
 800e540:	6a3b      	ldr	r3, [r7, #32]
 800e542:	429a      	cmp	r2, r3
 800e544:	f240 80fe 	bls.w	800e744 <f_read+0x26c>
 800e548:	6a3b      	ldr	r3, [r7, #32]
 800e54a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e54c:	e0fa      	b.n	800e744 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	699b      	ldr	r3, [r3, #24]
 800e552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e556:	2b00      	cmp	r3, #0
 800e558:	f040 80c6 	bne.w	800e6e8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	699b      	ldr	r3, [r3, #24]
 800e560:	0a5b      	lsrs	r3, r3, #9
 800e562:	697a      	ldr	r2, [r7, #20]
 800e564:	8952      	ldrh	r2, [r2, #10]
 800e566:	3a01      	subs	r2, #1
 800e568:	4013      	ands	r3, r2
 800e56a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e56c:	69fb      	ldr	r3, [r7, #28]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d12f      	bne.n	800e5d2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	699b      	ldr	r3, [r3, #24]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d103      	bne.n	800e582 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	689b      	ldr	r3, [r3, #8]
 800e57e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e580:	e013      	b.n	800e5aa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e586:	2b00      	cmp	r3, #0
 800e588:	d007      	beq.n	800e59a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	699b      	ldr	r3, [r3, #24]
 800e58e:	4619      	mov	r1, r3
 800e590:	68f8      	ldr	r0, [r7, #12]
 800e592:	f7fe fefe 	bl	800d392 <clmt_clust>
 800e596:	6338      	str	r0, [r7, #48]	@ 0x30
 800e598:	e007      	b.n	800e5aa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e59a:	68fa      	ldr	r2, [r7, #12]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	69db      	ldr	r3, [r3, #28]
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	4610      	mov	r0, r2
 800e5a4:	f7fe fc67 	bl	800ce76 <get_fat>
 800e5a8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d804      	bhi.n	800e5ba <f_read+0xe2>
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2202      	movs	r2, #2
 800e5b4:	755a      	strb	r2, [r3, #21]
 800e5b6:	2302      	movs	r3, #2
 800e5b8:	e0c9      	b.n	800e74e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5c0:	d104      	bne.n	800e5cc <f_read+0xf4>
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	755a      	strb	r2, [r3, #21]
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	e0c0      	b.n	800e74e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5d0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e5d2:	697a      	ldr	r2, [r7, #20]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	69db      	ldr	r3, [r3, #28]
 800e5d8:	4619      	mov	r1, r3
 800e5da:	4610      	mov	r0, r2
 800e5dc:	f7fe fc2c 	bl	800ce38 <clust2sect>
 800e5e0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d104      	bne.n	800e5f2 <f_read+0x11a>
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2202      	movs	r2, #2
 800e5ec:	755a      	strb	r2, [r3, #21]
 800e5ee:	2302      	movs	r3, #2
 800e5f0:	e0ad      	b.n	800e74e <f_read+0x276>
			sect += csect;
 800e5f2:	69ba      	ldr	r2, [r7, #24]
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	0a5b      	lsrs	r3, r3, #9
 800e5fe:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e602:	2b00      	cmp	r3, #0
 800e604:	d039      	beq.n	800e67a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e606:	69fa      	ldr	r2, [r7, #28]
 800e608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e60a:	4413      	add	r3, r2
 800e60c:	697a      	ldr	r2, [r7, #20]
 800e60e:	8952      	ldrh	r2, [r2, #10]
 800e610:	4293      	cmp	r3, r2
 800e612:	d905      	bls.n	800e620 <f_read+0x148>
					cc = fs->csize - csect;
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	895b      	ldrh	r3, [r3, #10]
 800e618:	461a      	mov	r2, r3
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	1ad3      	subs	r3, r2, r3
 800e61e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	7858      	ldrb	r0, [r3, #1]
 800e624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e626:	69ba      	ldr	r2, [r7, #24]
 800e628:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e62a:	f7fe f85b 	bl	800c6e4 <disk_read>
 800e62e:	4603      	mov	r3, r0
 800e630:	2b00      	cmp	r3, #0
 800e632:	d004      	beq.n	800e63e <f_read+0x166>
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2201      	movs	r2, #1
 800e638:	755a      	strb	r2, [r3, #21]
 800e63a:	2301      	movs	r3, #1
 800e63c:	e087      	b.n	800e74e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	7d1b      	ldrb	r3, [r3, #20]
 800e642:	b25b      	sxtb	r3, r3
 800e644:	2b00      	cmp	r3, #0
 800e646:	da14      	bge.n	800e672 <f_read+0x19a>
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	6a1a      	ldr	r2, [r3, #32]
 800e64c:	69bb      	ldr	r3, [r7, #24]
 800e64e:	1ad3      	subs	r3, r2, r3
 800e650:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e652:	429a      	cmp	r2, r3
 800e654:	d90d      	bls.n	800e672 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	6a1a      	ldr	r2, [r3, #32]
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	1ad3      	subs	r3, r2, r3
 800e65e:	025b      	lsls	r3, r3, #9
 800e660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e662:	18d0      	adds	r0, r2, r3
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	3330      	adds	r3, #48	@ 0x30
 800e668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e66c:	4619      	mov	r1, r3
 800e66e:	f7fe f919 	bl	800c8a4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e674:	025b      	lsls	r3, r3, #9
 800e676:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800e678:	e050      	b.n	800e71c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	6a1b      	ldr	r3, [r3, #32]
 800e67e:	69ba      	ldr	r2, [r7, #24]
 800e680:	429a      	cmp	r2, r3
 800e682:	d02e      	beq.n	800e6e2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	7d1b      	ldrb	r3, [r3, #20]
 800e688:	b25b      	sxtb	r3, r3
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	da18      	bge.n	800e6c0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	7858      	ldrb	r0, [r3, #1]
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6a1a      	ldr	r2, [r3, #32]
 800e69c:	2301      	movs	r3, #1
 800e69e:	f7fe f841 	bl	800c724 <disk_write>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d004      	beq.n	800e6b2 <f_read+0x1da>
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2201      	movs	r2, #1
 800e6ac:	755a      	strb	r2, [r3, #21]
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e04d      	b.n	800e74e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	7d1b      	ldrb	r3, [r3, #20]
 800e6b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e6ba:	b2da      	uxtb	r2, r3
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	7858      	ldrb	r0, [r3, #1]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	69ba      	ldr	r2, [r7, #24]
 800e6ce:	f7fe f809 	bl	800c6e4 <disk_read>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d004      	beq.n	800e6e2 <f_read+0x20a>
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2201      	movs	r2, #1
 800e6dc:	755a      	strb	r2, [r3, #21]
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e035      	b.n	800e74e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	69ba      	ldr	r2, [r7, #24]
 800e6e6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	699b      	ldr	r3, [r3, #24]
 800e6ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6f0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e6f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d901      	bls.n	800e702 <f_read+0x22a>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	699b      	ldr	r3, [r3, #24]
 800e70c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e710:	4413      	add	r3, r2
 800e712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e714:	4619      	mov	r1, r3
 800e716:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e718:	f7fe f8c4 	bl	800c8a4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e71c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e720:	4413      	add	r3, r2
 800e722:	627b      	str	r3, [r7, #36]	@ 0x24
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	699a      	ldr	r2, [r3, #24]
 800e728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e72a:	441a      	add	r2, r3
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	619a      	str	r2, [r3, #24]
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	681a      	ldr	r2, [r3, #0]
 800e734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e736:	441a      	add	r2, r3
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	601a      	str	r2, [r3, #0]
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e740:	1ad3      	subs	r3, r2, r3
 800e742:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2b00      	cmp	r3, #0
 800e748:	f47f af01 	bne.w	800e54e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e74c:	2300      	movs	r3, #0
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3738      	adds	r7, #56	@ 0x38
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b08c      	sub	sp, #48	@ 0x30
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	60f8      	str	r0, [r7, #12]
 800e75e:	60b9      	str	r1, [r7, #8]
 800e760:	607a      	str	r2, [r7, #4]
 800e762:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	2200      	movs	r2, #0
 800e76c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f107 0210 	add.w	r2, r7, #16
 800e774:	4611      	mov	r1, r2
 800e776:	4618      	mov	r0, r3
 800e778:	f7ff fc78 	bl	800e06c <validate>
 800e77c:	4603      	mov	r3, r0
 800e77e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e782:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e786:	2b00      	cmp	r3, #0
 800e788:	d107      	bne.n	800e79a <f_write+0x44>
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	7d5b      	ldrb	r3, [r3, #21]
 800e78e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e792:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e796:	2b00      	cmp	r3, #0
 800e798:	d002      	beq.n	800e7a0 <f_write+0x4a>
 800e79a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e79e:	e14b      	b.n	800ea38 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	7d1b      	ldrb	r3, [r3, #20]
 800e7a4:	f003 0302 	and.w	r3, r3, #2
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d101      	bne.n	800e7b0 <f_write+0x5a>
 800e7ac:	2307      	movs	r3, #7
 800e7ae:	e143      	b.n	800ea38 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	699a      	ldr	r2, [r3, #24]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	441a      	add	r2, r3
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	699b      	ldr	r3, [r3, #24]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	f080 812d 	bcs.w	800ea1c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	699b      	ldr	r3, [r3, #24]
 800e7c6:	43db      	mvns	r3, r3
 800e7c8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e7ca:	e127      	b.n	800ea1c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	699b      	ldr	r3, [r3, #24]
 800e7d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	f040 80e3 	bne.w	800e9a0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	699b      	ldr	r3, [r3, #24]
 800e7de:	0a5b      	lsrs	r3, r3, #9
 800e7e0:	693a      	ldr	r2, [r7, #16]
 800e7e2:	8952      	ldrh	r2, [r2, #10]
 800e7e4:	3a01      	subs	r2, #1
 800e7e6:	4013      	ands	r3, r2
 800e7e8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e7ea:	69bb      	ldr	r3, [r7, #24]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d143      	bne.n	800e878 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	699b      	ldr	r3, [r3, #24]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d10c      	bne.n	800e812 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	689b      	ldr	r3, [r3, #8]
 800e7fc:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e800:	2b00      	cmp	r3, #0
 800e802:	d11a      	bne.n	800e83a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2100      	movs	r1, #0
 800e808:	4618      	mov	r0, r3
 800e80a:	f7fe fd2a 	bl	800d262 <create_chain>
 800e80e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e810:	e013      	b.n	800e83a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e816:	2b00      	cmp	r3, #0
 800e818:	d007      	beq.n	800e82a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	699b      	ldr	r3, [r3, #24]
 800e81e:	4619      	mov	r1, r3
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	f7fe fdb6 	bl	800d392 <clmt_clust>
 800e826:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e828:	e007      	b.n	800e83a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	69db      	ldr	r3, [r3, #28]
 800e830:	4619      	mov	r1, r3
 800e832:	4610      	mov	r0, r2
 800e834:	f7fe fd15 	bl	800d262 <create_chain>
 800e838:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	f000 80f2 	beq.w	800ea26 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e844:	2b01      	cmp	r3, #1
 800e846:	d104      	bne.n	800e852 <f_write+0xfc>
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2202      	movs	r2, #2
 800e84c:	755a      	strb	r2, [r3, #21]
 800e84e:	2302      	movs	r3, #2
 800e850:	e0f2      	b.n	800ea38 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e858:	d104      	bne.n	800e864 <f_write+0x10e>
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2201      	movs	r2, #1
 800e85e:	755a      	strb	r2, [r3, #21]
 800e860:	2301      	movs	r3, #1
 800e862:	e0e9      	b.n	800ea38 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e868:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d102      	bne.n	800e878 <f_write+0x122>
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e876:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	7d1b      	ldrb	r3, [r3, #20]
 800e87c:	b25b      	sxtb	r3, r3
 800e87e:	2b00      	cmp	r3, #0
 800e880:	da18      	bge.n	800e8b4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	7858      	ldrb	r0, [r3, #1]
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6a1a      	ldr	r2, [r3, #32]
 800e890:	2301      	movs	r3, #1
 800e892:	f7fd ff47 	bl	800c724 <disk_write>
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d004      	beq.n	800e8a6 <f_write+0x150>
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2201      	movs	r2, #1
 800e8a0:	755a      	strb	r2, [r3, #21]
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	e0c8      	b.n	800ea38 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	7d1b      	ldrb	r3, [r3, #20]
 800e8aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e8ae:	b2da      	uxtb	r2, r3
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e8b4:	693a      	ldr	r2, [r7, #16]
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	69db      	ldr	r3, [r3, #28]
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	4610      	mov	r0, r2
 800e8be:	f7fe fabb 	bl	800ce38 <clust2sect>
 800e8c2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d104      	bne.n	800e8d4 <f_write+0x17e>
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2202      	movs	r2, #2
 800e8ce:	755a      	strb	r2, [r3, #21]
 800e8d0:	2302      	movs	r3, #2
 800e8d2:	e0b1      	b.n	800ea38 <f_write+0x2e2>
			sect += csect;
 800e8d4:	697a      	ldr	r2, [r7, #20]
 800e8d6:	69bb      	ldr	r3, [r7, #24]
 800e8d8:	4413      	add	r3, r2
 800e8da:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	0a5b      	lsrs	r3, r3, #9
 800e8e0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e8e2:	6a3b      	ldr	r3, [r7, #32]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d03c      	beq.n	800e962 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e8e8:	69ba      	ldr	r2, [r7, #24]
 800e8ea:	6a3b      	ldr	r3, [r7, #32]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	693a      	ldr	r2, [r7, #16]
 800e8f0:	8952      	ldrh	r2, [r2, #10]
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d905      	bls.n	800e902 <f_write+0x1ac>
					cc = fs->csize - csect;
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	895b      	ldrh	r3, [r3, #10]
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	69bb      	ldr	r3, [r7, #24]
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	7858      	ldrb	r0, [r3, #1]
 800e906:	6a3b      	ldr	r3, [r7, #32]
 800e908:	697a      	ldr	r2, [r7, #20]
 800e90a:	69f9      	ldr	r1, [r7, #28]
 800e90c:	f7fd ff0a 	bl	800c724 <disk_write>
 800e910:	4603      	mov	r3, r0
 800e912:	2b00      	cmp	r3, #0
 800e914:	d004      	beq.n	800e920 <f_write+0x1ca>
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2201      	movs	r2, #1
 800e91a:	755a      	strb	r2, [r3, #21]
 800e91c:	2301      	movs	r3, #1
 800e91e:	e08b      	b.n	800ea38 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6a1a      	ldr	r2, [r3, #32]
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	1ad3      	subs	r3, r2, r3
 800e928:	6a3a      	ldr	r2, [r7, #32]
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d915      	bls.n	800e95a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	6a1a      	ldr	r2, [r3, #32]
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	025b      	lsls	r3, r3, #9
 800e93e:	69fa      	ldr	r2, [r7, #28]
 800e940:	4413      	add	r3, r2
 800e942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e946:	4619      	mov	r1, r3
 800e948:	f7fd ffac 	bl	800c8a4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	7d1b      	ldrb	r3, [r3, #20]
 800e950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e954:	b2da      	uxtb	r2, r3
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e95a:	6a3b      	ldr	r3, [r7, #32]
 800e95c:	025b      	lsls	r3, r3, #9
 800e95e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800e960:	e03f      	b.n	800e9e2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	6a1b      	ldr	r3, [r3, #32]
 800e966:	697a      	ldr	r2, [r7, #20]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d016      	beq.n	800e99a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	699a      	ldr	r2, [r3, #24]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e974:	429a      	cmp	r2, r3
 800e976:	d210      	bcs.n	800e99a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	7858      	ldrb	r0, [r3, #1]
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e982:	2301      	movs	r3, #1
 800e984:	697a      	ldr	r2, [r7, #20]
 800e986:	f7fd fead 	bl	800c6e4 <disk_read>
 800e98a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d004      	beq.n	800e99a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2201      	movs	r2, #1
 800e994:	755a      	strb	r2, [r3, #21]
 800e996:	2301      	movs	r3, #1
 800e998:	e04e      	b.n	800ea38 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	697a      	ldr	r2, [r7, #20]
 800e99e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	699b      	ldr	r3, [r3, #24]
 800e9a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9a8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e9ac:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e9ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d901      	bls.n	800e9ba <f_write+0x264>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	699b      	ldr	r3, [r3, #24]
 800e9c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9c8:	4413      	add	r3, r2
 800e9ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9cc:	69f9      	ldr	r1, [r7, #28]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7fd ff68 	bl	800c8a4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	7d1b      	ldrb	r3, [r3, #20]
 800e9d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e9dc:	b2da      	uxtb	r2, r3
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e9e2:	69fa      	ldr	r2, [r7, #28]
 800e9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e6:	4413      	add	r3, r2
 800e9e8:	61fb      	str	r3, [r7, #28]
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	699a      	ldr	r2, [r3, #24]
 800e9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f0:	441a      	add	r2, r3
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	619a      	str	r2, [r3, #24]
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	68da      	ldr	r2, [r3, #12]
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	699b      	ldr	r3, [r3, #24]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	bf38      	it	cc
 800ea02:	461a      	movcc	r2, r3
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	60da      	str	r2, [r3, #12]
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea0e:	441a      	add	r2, r3
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	601a      	str	r2, [r3, #0]
 800ea14:	687a      	ldr	r2, [r7, #4]
 800ea16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	f47f aed4 	bne.w	800e7cc <f_write+0x76>
 800ea24:	e000      	b.n	800ea28 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ea26:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	7d1b      	ldrb	r3, [r3, #20]
 800ea2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea30:	b2da      	uxtb	r2, r3
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ea36:	2300      	movs	r3, #0
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3730      	adds	r7, #48	@ 0x30
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b086      	sub	sp, #24
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f107 0208 	add.w	r2, r7, #8
 800ea4e:	4611      	mov	r1, r2
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7ff fb0b 	bl	800e06c <validate>
 800ea56:	4603      	mov	r3, r0
 800ea58:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ea5a:	7dfb      	ldrb	r3, [r7, #23]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d168      	bne.n	800eb32 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	7d1b      	ldrb	r3, [r3, #20]
 800ea64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d062      	beq.n	800eb32 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	7d1b      	ldrb	r3, [r3, #20]
 800ea70:	b25b      	sxtb	r3, r3
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	da15      	bge.n	800eaa2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	7858      	ldrb	r0, [r3, #1]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6a1a      	ldr	r2, [r3, #32]
 800ea84:	2301      	movs	r3, #1
 800ea86:	f7fd fe4d 	bl	800c724 <disk_write>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d001      	beq.n	800ea94 <f_sync+0x54>
 800ea90:	2301      	movs	r3, #1
 800ea92:	e04f      	b.n	800eb34 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	7d1b      	ldrb	r3, [r3, #20]
 800ea98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea9c:	b2da      	uxtb	r2, r3
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eaa2:	f7fd fb9d 	bl	800c1e0 <get_fattime>
 800eaa6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaae:	4619      	mov	r1, r3
 800eab0:	4610      	mov	r0, r2
 800eab2:	f7fe f925 	bl	800cd00 <move_window>
 800eab6:	4603      	mov	r3, r0
 800eab8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800eaba:	7dfb      	ldrb	r3, [r7, #23]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d138      	bne.n	800eb32 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eac4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	330b      	adds	r3, #11
 800eaca:	781a      	ldrb	r2, [r3, #0]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	330b      	adds	r3, #11
 800ead0:	f042 0220 	orr.w	r2, r2, #32
 800ead4:	b2d2      	uxtb	r2, r2
 800ead6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6818      	ldr	r0, [r3, #0]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	689b      	ldr	r3, [r3, #8]
 800eae0:	461a      	mov	r2, r3
 800eae2:	68f9      	ldr	r1, [r7, #12]
 800eae4:	f7fe fe2f 	bl	800d746 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f103 021c 	add.w	r2, r3, #28
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	4610      	mov	r0, r2
 800eaf6:	f7fd fea9 	bl	800c84c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	3316      	adds	r3, #22
 800eafe:	6939      	ldr	r1, [r7, #16]
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7fd fea3 	bl	800c84c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	3312      	adds	r3, #18
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f7fd fe82 	bl	800c816 <st_word>
					fs->wflag = 1;
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	2201      	movs	r2, #1
 800eb16:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fe f91e 	bl	800cd5c <sync_fs>
 800eb20:	4603      	mov	r3, r0
 800eb22:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	7d1b      	ldrb	r3, [r3, #20]
 800eb28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb2c:	b2da      	uxtb	r2, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800eb32:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3718      	adds	r7, #24
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f7ff ff7b 	bl	800ea40 <f_sync>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eb4e:	7bfb      	ldrb	r3, [r7, #15]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d118      	bne.n	800eb86 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f107 0208 	add.w	r2, r7, #8
 800eb5a:	4611      	mov	r1, r2
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7ff fa85 	bl	800e06c <validate>
 800eb62:	4603      	mov	r3, r0
 800eb64:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eb66:	7bfb      	ldrb	r3, [r7, #15]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d10c      	bne.n	800eb86 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	691b      	ldr	r3, [r3, #16]
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7fe f821 	bl	800cbb8 <dec_lock>
 800eb76:	4603      	mov	r3, r0
 800eb78:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800eb7a:	7bfb      	ldrb	r3, [r7, #15]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d102      	bne.n	800eb86 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800eb86:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3710      	adds	r7, #16
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b090      	sub	sp, #64	@ 0x40
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f107 0208 	add.w	r2, r7, #8
 800eba0:	4611      	mov	r1, r2
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7ff fa62 	bl	800e06c <validate>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ebae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d103      	bne.n	800ebbe <f_lseek+0x2e>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	7d5b      	ldrb	r3, [r3, #21]
 800ebba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ebbe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d002      	beq.n	800ebcc <f_lseek+0x3c>
 800ebc6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ebca:	e1e6      	b.n	800ef9a <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	f000 80d1 	beq.w	800ed78 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebdc:	d15a      	bne.n	800ec94 <f_lseek+0x104>
			tbl = fp->cltbl;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebe2:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ebe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebe6:	1d1a      	adds	r2, r3, #4
 800ebe8:	627a      	str	r2, [r7, #36]	@ 0x24
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	617b      	str	r3, [r7, #20]
 800ebee:	2302      	movs	r3, #2
 800ebf0:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	689b      	ldr	r3, [r3, #8]
 800ebf6:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800ebf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d03a      	beq.n	800ec74 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ebfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec00:	613b      	str	r3, [r7, #16]
 800ec02:	2300      	movs	r3, #0
 800ec04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec08:	3302      	adds	r3, #2
 800ec0a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ec0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec0e:	60fb      	str	r3, [r7, #12]
 800ec10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec12:	3301      	adds	r3, #1
 800ec14:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7fe f92b 	bl	800ce76 <get_fat>
 800ec20:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ec22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d804      	bhi.n	800ec32 <f_lseek+0xa2>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2202      	movs	r2, #2
 800ec2c:	755a      	strb	r2, [r3, #21]
 800ec2e:	2302      	movs	r3, #2
 800ec30:	e1b3      	b.n	800ef9a <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec38:	d104      	bne.n	800ec44 <f_lseek+0xb4>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	755a      	strb	r2, [r3, #21]
 800ec40:	2301      	movs	r3, #1
 800ec42:	e1aa      	b.n	800ef9a <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	3301      	adds	r3, #1
 800ec48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d0de      	beq.n	800ec0c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ec4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d809      	bhi.n	800ec6a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ec56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec58:	1d1a      	adds	r2, r3, #4
 800ec5a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ec5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec5e:	601a      	str	r2, [r3, #0]
 800ec60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec62:	1d1a      	adds	r2, r3, #4
 800ec64:	627a      	str	r2, [r7, #36]	@ 0x24
 800ec66:	693a      	ldr	r2, [r7, #16]
 800ec68:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	695b      	ldr	r3, [r3, #20]
 800ec6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d3c4      	bcc.n	800ebfe <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec7a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ec7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d803      	bhi.n	800ec8c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ec84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec86:	2200      	movs	r2, #0
 800ec88:	601a      	str	r2, [r3, #0]
 800ec8a:	e184      	b.n	800ef96 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ec8c:	2311      	movs	r3, #17
 800ec8e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ec92:	e180      	b.n	800ef96 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	683a      	ldr	r2, [r7, #0]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d902      	bls.n	800eca4 <f_lseek+0x114>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	68db      	ldr	r3, [r3, #12]
 800eca2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	683a      	ldr	r2, [r7, #0]
 800eca8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	f000 8172 	beq.w	800ef96 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	3b01      	subs	r3, #1
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7fe fb6a 	bl	800d392 <clmt_clust>
 800ecbe:	4602      	mov	r2, r0
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ecc4:	68ba      	ldr	r2, [r7, #8]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	69db      	ldr	r3, [r3, #28]
 800ecca:	4619      	mov	r1, r3
 800eccc:	4610      	mov	r0, r2
 800ecce:	f7fe f8b3 	bl	800ce38 <clust2sect>
 800ecd2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ecd4:	69bb      	ldr	r3, [r7, #24]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d104      	bne.n	800ece4 <f_lseek+0x154>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2202      	movs	r2, #2
 800ecde:	755a      	strb	r2, [r3, #21]
 800ece0:	2302      	movs	r3, #2
 800ece2:	e15a      	b.n	800ef9a <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	3b01      	subs	r3, #1
 800ece8:	0a5b      	lsrs	r3, r3, #9
 800ecea:	68ba      	ldr	r2, [r7, #8]
 800ecec:	8952      	ldrh	r2, [r2, #10]
 800ecee:	3a01      	subs	r2, #1
 800ecf0:	4013      	ands	r3, r2
 800ecf2:	69ba      	ldr	r2, [r7, #24]
 800ecf4:	4413      	add	r3, r2
 800ecf6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	699b      	ldr	r3, [r3, #24]
 800ecfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	f000 8148 	beq.w	800ef96 <f_lseek+0x406>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6a1b      	ldr	r3, [r3, #32]
 800ed0a:	69ba      	ldr	r2, [r7, #24]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	f000 8142 	beq.w	800ef96 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	7d1b      	ldrb	r3, [r3, #20]
 800ed16:	b25b      	sxtb	r3, r3
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	da18      	bge.n	800ed4e <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	7858      	ldrb	r0, [r3, #1]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6a1a      	ldr	r2, [r3, #32]
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	f7fd fcfa 	bl	800c724 <disk_write>
 800ed30:	4603      	mov	r3, r0
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d004      	beq.n	800ed40 <f_lseek+0x1b0>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2201      	movs	r2, #1
 800ed3a:	755a      	strb	r2, [r3, #21]
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	e12c      	b.n	800ef9a <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	7d1b      	ldrb	r3, [r3, #20]
 800ed44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed48:	b2da      	uxtb	r2, r3
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	7858      	ldrb	r0, [r3, #1]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ed58:	2301      	movs	r3, #1
 800ed5a:	69ba      	ldr	r2, [r7, #24]
 800ed5c:	f7fd fcc2 	bl	800c6e4 <disk_read>
 800ed60:	4603      	mov	r3, r0
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d004      	beq.n	800ed70 <f_lseek+0x1e0>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2201      	movs	r2, #1
 800ed6a:	755a      	strb	r2, [r3, #21]
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	e114      	b.n	800ef9a <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	69ba      	ldr	r2, [r7, #24]
 800ed74:	621a      	str	r2, [r3, #32]
 800ed76:	e10e      	b.n	800ef96 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	68db      	ldr	r3, [r3, #12]
 800ed7c:	683a      	ldr	r2, [r7, #0]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d908      	bls.n	800ed94 <f_lseek+0x204>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	7d1b      	ldrb	r3, [r3, #20]
 800ed86:	f003 0302 	and.w	r3, r3, #2
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d102      	bne.n	800ed94 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	68db      	ldr	r3, [r3, #12]
 800ed92:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	699b      	ldr	r3, [r3, #24]
 800ed98:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eda2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	f000 80a7 	beq.w	800eefa <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	895b      	ldrh	r3, [r3, #10]
 800edb0:	025b      	lsls	r3, r3, #9
 800edb2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800edb4:	6a3b      	ldr	r3, [r7, #32]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d01b      	beq.n	800edf2 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	1e5a      	subs	r2, r3, #1
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	fbb2 f2f3 	udiv	r2, r2, r3
 800edc4:	6a3b      	ldr	r3, [r7, #32]
 800edc6:	1e59      	subs	r1, r3, #1
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800edce:	429a      	cmp	r2, r3
 800edd0:	d30f      	bcc.n	800edf2 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800edd2:	6a3b      	ldr	r3, [r7, #32]
 800edd4:	1e5a      	subs	r2, r3, #1
 800edd6:	69fb      	ldr	r3, [r7, #28]
 800edd8:	425b      	negs	r3, r3
 800edda:	401a      	ands	r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	699b      	ldr	r3, [r3, #24]
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	69db      	ldr	r3, [r3, #28]
 800edee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800edf0:	e022      	b.n	800ee38 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800edf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d119      	bne.n	800ee32 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2100      	movs	r1, #0
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7fe fa2d 	bl	800d262 <create_chain>
 800ee08:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ee0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d104      	bne.n	800ee1a <f_lseek+0x28a>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2202      	movs	r2, #2
 800ee14:	755a      	strb	r2, [r3, #21]
 800ee16:	2302      	movs	r3, #2
 800ee18:	e0bf      	b.n	800ef9a <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ee1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee20:	d104      	bne.n	800ee2c <f_lseek+0x29c>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2201      	movs	r2, #1
 800ee26:	755a      	strb	r2, [r3, #21]
 800ee28:	2301      	movs	r3, #1
 800ee2a:	e0b6      	b.n	800ef9a <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ee30:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ee36:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ee38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d05d      	beq.n	800eefa <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ee3e:	e03a      	b.n	800eeb6 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ee40:	683a      	ldr	r2, [r7, #0]
 800ee42:	69fb      	ldr	r3, [r7, #28]
 800ee44:	1ad3      	subs	r3, r2, r3
 800ee46:	603b      	str	r3, [r7, #0]
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	699a      	ldr	r2, [r3, #24]
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	441a      	add	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	7d1b      	ldrb	r3, [r3, #20]
 800ee58:	f003 0302 	and.w	r3, r3, #2
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d00b      	beq.n	800ee78 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7fe f9fc 	bl	800d262 <create_chain>
 800ee6a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ee6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d108      	bne.n	800ee84 <f_lseek+0x2f4>
							ofs = 0; break;
 800ee72:	2300      	movs	r3, #0
 800ee74:	603b      	str	r3, [r7, #0]
 800ee76:	e022      	b.n	800eebe <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fd fffa 	bl	800ce76 <get_fat>
 800ee82:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ee84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee8a:	d104      	bne.n	800ee96 <f_lseek+0x306>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2201      	movs	r2, #1
 800ee90:	755a      	strb	r2, [r3, #21]
 800ee92:	2301      	movs	r3, #1
 800ee94:	e081      	b.n	800ef9a <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ee96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d904      	bls.n	800eea6 <f_lseek+0x316>
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	695b      	ldr	r3, [r3, #20]
 800eea0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d304      	bcc.n	800eeb0 <f_lseek+0x320>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2202      	movs	r2, #2
 800eeaa:	755a      	strb	r2, [r3, #21]
 800eeac:	2302      	movs	r3, #2
 800eeae:	e074      	b.n	800ef9a <f_lseek+0x40a>
					fp->clust = clst;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eeb4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800eeb6:	683a      	ldr	r2, [r7, #0]
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d8c0      	bhi.n	800ee40 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	699a      	ldr	r2, [r3, #24]
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	441a      	add	r2, r3
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d012      	beq.n	800eefa <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7fd ffad 	bl	800ce38 <clust2sect>
 800eede:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800eee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d104      	bne.n	800eef0 <f_lseek+0x360>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2202      	movs	r2, #2
 800eeea:	755a      	strb	r2, [r3, #21]
 800eeec:	2302      	movs	r3, #2
 800eeee:	e054      	b.n	800ef9a <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	0a5b      	lsrs	r3, r3, #9
 800eef4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eef6:	4413      	add	r3, r2
 800eef8:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	699a      	ldr	r2, [r3, #24]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	68db      	ldr	r3, [r3, #12]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d90a      	bls.n	800ef1c <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	699a      	ldr	r2, [r3, #24]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	7d1b      	ldrb	r3, [r3, #20]
 800ef12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef16:	b2da      	uxtb	r2, r3
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	699b      	ldr	r3, [r3, #24]
 800ef20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d036      	beq.n	800ef96 <f_lseek+0x406>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6a1b      	ldr	r3, [r3, #32]
 800ef2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d031      	beq.n	800ef96 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	7d1b      	ldrb	r3, [r3, #20]
 800ef36:	b25b      	sxtb	r3, r3
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	da18      	bge.n	800ef6e <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	7858      	ldrb	r0, [r3, #1]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6a1a      	ldr	r2, [r3, #32]
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	f7fd fbea 	bl	800c724 <disk_write>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d004      	beq.n	800ef60 <f_lseek+0x3d0>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	755a      	strb	r2, [r3, #21]
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	e01c      	b.n	800ef9a <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	7d1b      	ldrb	r3, [r3, #20]
 800ef64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef68:	b2da      	uxtb	r2, r3
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	7858      	ldrb	r0, [r3, #1]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ef78:	2301      	movs	r3, #1
 800ef7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef7c:	f7fd fbb2 	bl	800c6e4 <disk_read>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d004      	beq.n	800ef90 <f_lseek+0x400>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2201      	movs	r2, #1
 800ef8a:	755a      	strb	r2, [r3, #21]
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	e004      	b.n	800ef9a <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef94:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ef96:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3740      	adds	r7, #64	@ 0x40
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
	...

0800efa4 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800efa4:	b590      	push	{r4, r7, lr}
 800efa6:	b09d      	sub	sp, #116	@ 0x74
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	607a      	str	r2, [r7, #4]
 800efae:	603b      	str	r3, [r7, #0]
 800efb0:	460b      	mov	r3, r1
 800efb2:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800efb4:	2301      	movs	r3, #1
 800efb6:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800efb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800efbc:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800efbe:	f107 030c 	add.w	r3, r7, #12
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fe fd6b 	bl	800da9e <get_ldnumber>
 800efc8:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800efca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efcc:	2b00      	cmp	r3, #0
 800efce:	da02      	bge.n	800efd6 <f_mkfs+0x32>
 800efd0:	230b      	movs	r3, #11
 800efd2:	f000 bc0d 	b.w	800f7f0 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800efd6:	4a94      	ldr	r2, [pc, #592]	@ (800f228 <f_mkfs+0x284>)
 800efd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d005      	beq.n	800efee <f_mkfs+0x4a>
 800efe2:	4a91      	ldr	r2, [pc, #580]	@ (800f228 <f_mkfs+0x284>)
 800efe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efea:	2200      	movs	r2, #0
 800efec:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800efee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eff0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800eff4:	2300      	movs	r3, #0
 800eff6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800effa:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800effe:	4618      	mov	r0, r3
 800f000:	f7fd fb4a 	bl	800c698 <disk_initialize>
 800f004:	4603      	mov	r3, r0
 800f006:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800f00a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800f00e:	f003 0301 	and.w	r3, r3, #1
 800f012:	2b00      	cmp	r3, #0
 800f014:	d001      	beq.n	800f01a <f_mkfs+0x76>
 800f016:	2303      	movs	r3, #3
 800f018:	e3ea      	b.n	800f7f0 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f01a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800f01e:	f003 0304 	and.w	r3, r3, #4
 800f022:	2b00      	cmp	r3, #0
 800f024:	d001      	beq.n	800f02a <f_mkfs+0x86>
 800f026:	230a      	movs	r3, #10
 800f028:	e3e2      	b.n	800f7f0 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800f02a:	f107 0214 	add.w	r2, r7, #20
 800f02e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800f032:	2103      	movs	r1, #3
 800f034:	4618      	mov	r0, r3
 800f036:	f7fd fb95 	bl	800c764 <disk_ioctl>
 800f03a:	4603      	mov	r3, r0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d10c      	bne.n	800f05a <f_mkfs+0xb6>
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d009      	beq.n	800f05a <f_mkfs+0xb6>
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f04c:	d805      	bhi.n	800f05a <f_mkfs+0xb6>
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	1e5a      	subs	r2, r3, #1
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	4013      	ands	r3, r2
 800f056:	2b00      	cmp	r3, #0
 800f058:	d001      	beq.n	800f05e <f_mkfs+0xba>
 800f05a:	2301      	movs	r3, #1
 800f05c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800f05e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f062:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d003      	beq.n	800f072 <f_mkfs+0xce>
 800f06a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	429a      	cmp	r2, r3
 800f070:	d309      	bcc.n	800f086 <f_mkfs+0xe2>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f078:	d805      	bhi.n	800f086 <f_mkfs+0xe2>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	1e5a      	subs	r2, r3, #1
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	4013      	ands	r3, r2
 800f082:	2b00      	cmp	r3, #0
 800f084:	d001      	beq.n	800f08a <f_mkfs+0xe6>
 800f086:	2313      	movs	r3, #19
 800f088:	e3b2      	b.n	800f7f0 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800f08a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f092:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800f098:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f09a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f09e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800f0a4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0a8:	fb02 f303 	mul.w	r3, r2, r3
 800f0ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800f0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d101      	bne.n	800f0b8 <f_mkfs+0x114>
 800f0b4:	230e      	movs	r3, #14
 800f0b6:	e39b      	b.n	800f7f0 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800f0b8:	f107 0210 	add.w	r2, r7, #16
 800f0bc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800f0c0:	2101      	movs	r1, #1
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fd fb4e 	bl	800c764 <disk_ioctl>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d001      	beq.n	800f0d2 <f_mkfs+0x12e>
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e38e      	b.n	800f7f0 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800f0d2:	7afb      	ldrb	r3, [r7, #11]
 800f0d4:	f003 0308 	and.w	r3, r3, #8
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d001      	beq.n	800f0e0 <f_mkfs+0x13c>
 800f0dc:	2300      	movs	r3, #0
 800f0de:	e000      	b.n	800f0e2 <f_mkfs+0x13e>
 800f0e0:	233f      	movs	r3, #63	@ 0x3f
 800f0e2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d901      	bls.n	800f0f0 <f_mkfs+0x14c>
 800f0ec:	230e      	movs	r3, #14
 800f0ee:	e37f      	b.n	800f7f0 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800f0f0:	693a      	ldr	r2, [r7, #16]
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f4:	1ad3      	subs	r3, r2, r3
 800f0f6:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800f0fc:	d801      	bhi.n	800f102 <f_mkfs+0x15e>
 800f0fe:	230e      	movs	r3, #14
 800f100:	e376      	b.n	800f7f0 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2b80      	cmp	r3, #128	@ 0x80
 800f106:	d901      	bls.n	800f10c <f_mkfs+0x168>
 800f108:	2313      	movs	r3, #19
 800f10a:	e371      	b.n	800f7f0 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800f10c:	7afb      	ldrb	r3, [r7, #11]
 800f10e:	f003 0302 	and.w	r3, r3, #2
 800f112:	2b00      	cmp	r3, #0
 800f114:	d00d      	beq.n	800f132 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800f116:	7afb      	ldrb	r3, [r7, #11]
 800f118:	f003 0307 	and.w	r3, r3, #7
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d004      	beq.n	800f12a <f_mkfs+0x186>
 800f120:	7afb      	ldrb	r3, [r7, #11]
 800f122:	f003 0301 	and.w	r3, r3, #1
 800f126:	2b00      	cmp	r3, #0
 800f128:	d103      	bne.n	800f132 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800f12a:	2303      	movs	r3, #3
 800f12c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800f130:	e009      	b.n	800f146 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800f132:	7afb      	ldrb	r3, [r7, #11]
 800f134:	f003 0301 	and.w	r3, r3, #1
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d101      	bne.n	800f140 <f_mkfs+0x19c>
 800f13c:	2313      	movs	r3, #19
 800f13e:	e357      	b.n	800f7f0 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800f140:	2302      	movs	r3, #2
 800f142:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800f14a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f14e:	2b03      	cmp	r3, #3
 800f150:	d13c      	bne.n	800f1cc <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800f152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f154:	2b00      	cmp	r3, #0
 800f156:	d11b      	bne.n	800f190 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	0c5b      	lsrs	r3, r3, #17
 800f15c:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f15e:	2300      	movs	r3, #0
 800f160:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f162:	2301      	movs	r3, #1
 800f164:	653b      	str	r3, [r7, #80]	@ 0x50
 800f166:	e005      	b.n	800f174 <f_mkfs+0x1d0>
 800f168:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f16a:	3301      	adds	r3, #1
 800f16c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f16e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f170:	005b      	lsls	r3, r3, #1
 800f172:	653b      	str	r3, [r7, #80]	@ 0x50
 800f174:	4a2d      	ldr	r2, [pc, #180]	@ (800f22c <f_mkfs+0x288>)
 800f176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d007      	beq.n	800f190 <f_mkfs+0x1ec>
 800f180:	4a2a      	ldr	r2, [pc, #168]	@ (800f22c <f_mkfs+0x288>)
 800f182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f188:	461a      	mov	r2, r3
 800f18a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d2eb      	bcs.n	800f168 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800f190:	693a      	ldr	r2, [r7, #16]
 800f192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f194:	fbb2 f3f3 	udiv	r3, r2, r3
 800f198:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f19a:	6a3b      	ldr	r3, [r7, #32]
 800f19c:	3302      	adds	r3, #2
 800f19e:	009a      	lsls	r2, r3, #2
 800f1a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f1a2:	4413      	add	r3, r2
 800f1a4:	1e5a      	subs	r2, r3, #1
 800f1a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f1a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1ac:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800f1ae:	2320      	movs	r3, #32
 800f1b0:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d903      	bls.n	800f1c8 <f_mkfs+0x224>
 800f1c0:	6a3b      	ldr	r3, [r7, #32]
 800f1c2:	4a1b      	ldr	r2, [pc, #108]	@ (800f230 <f_mkfs+0x28c>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d952      	bls.n	800f26e <f_mkfs+0x2ca>
 800f1c8:	230e      	movs	r3, #14
 800f1ca:	e311      	b.n	800f7f0 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800f1cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d11b      	bne.n	800f20a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	0b1b      	lsrs	r3, r3, #12
 800f1d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f1d8:	2300      	movs	r3, #0
 800f1da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f1dc:	2301      	movs	r3, #1
 800f1de:	653b      	str	r3, [r7, #80]	@ 0x50
 800f1e0:	e005      	b.n	800f1ee <f_mkfs+0x24a>
 800f1e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f1e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f1ea:	005b      	lsls	r3, r3, #1
 800f1ec:	653b      	str	r3, [r7, #80]	@ 0x50
 800f1ee:	4a11      	ldr	r2, [pc, #68]	@ (800f234 <f_mkfs+0x290>)
 800f1f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d007      	beq.n	800f20a <f_mkfs+0x266>
 800f1fa:	4a0e      	ldr	r2, [pc, #56]	@ (800f234 <f_mkfs+0x290>)
 800f1fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f202:	461a      	mov	r2, r3
 800f204:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f206:	4293      	cmp	r3, r2
 800f208:	d2eb      	bcs.n	800f1e2 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800f20a:	693a      	ldr	r2, [r7, #16]
 800f20c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f20e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f212:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800f214:	6a3b      	ldr	r3, [r7, #32]
 800f216:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d90c      	bls.n	800f238 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800f21e:	6a3b      	ldr	r3, [r7, #32]
 800f220:	3302      	adds	r3, #2
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f226:	e012      	b.n	800f24e <f_mkfs+0x2aa>
 800f228:	20035f70 	.word	0x20035f70
 800f22c:	08018974 	.word	0x08018974
 800f230:	0ffffff5 	.word	0x0ffffff5
 800f234:	08018984 	.word	0x08018984
				} else {
					fmt = FS_FAT12;
 800f238:	2301      	movs	r3, #1
 800f23a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800f23e:	6a3a      	ldr	r2, [r7, #32]
 800f240:	4613      	mov	r3, r2
 800f242:	005b      	lsls	r3, r3, #1
 800f244:	4413      	add	r3, r2
 800f246:	3301      	adds	r3, #1
 800f248:	085b      	lsrs	r3, r3, #1
 800f24a:	3303      	adds	r3, #3
 800f24c:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800f24e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f250:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f252:	4413      	add	r3, r2
 800f254:	1e5a      	subs	r2, r3, #1
 800f256:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f258:	fbb2 f3f3 	udiv	r3, r2, r3
 800f25c:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800f25e:	2301      	movs	r3, #1
 800f260:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800f262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f264:	015a      	lsls	r2, r3, #5
 800f266:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f268:	fbb2 f3f3 	udiv	r3, r2, r3
 800f26c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800f26e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f272:	4413      	add	r3, r2
 800f274:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800f276:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f278:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f27a:	fb03 f202 	mul.w	r2, r3, r2
 800f27e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f280:	4413      	add	r3, r2
 800f282:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f284:	4413      	add	r3, r2
 800f286:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800f288:	697a      	ldr	r2, [r7, #20]
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	4413      	add	r3, r2
 800f28e:	1e5a      	subs	r2, r3, #1
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	425b      	negs	r3, r3
 800f294:	401a      	ands	r2, r3
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	1ad3      	subs	r3, r2, r3
 800f29a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800f29c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f2a0:	2b03      	cmp	r3, #3
 800f2a2:	d108      	bne.n	800f2b6 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800f2a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f2a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f2a8:	4413      	add	r3, r2
 800f2aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800f2ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f2ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f2b0:	4413      	add	r3, r2
 800f2b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f2b4:	e006      	b.n	800f2c4 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800f2b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f2b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f2ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2be:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f2c0:	4413      	add	r3, r2
 800f2c2:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800f2c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f2c6:	011a      	lsls	r2, r3, #4
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	441a      	add	r2, r3
 800f2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ce:	1ad2      	subs	r2, r2, r3
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d901      	bls.n	800f2da <f_mkfs+0x336>
 800f2d6:	230e      	movs	r3, #14
 800f2d8:	e28a      	b.n	800f7f0 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800f2da:	693a      	ldr	r2, [r7, #16]
 800f2dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2de:	1ad2      	subs	r2, r2, r3
 800f2e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f2e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f2e4:	fb01 f303 	mul.w	r3, r1, r3
 800f2e8:	1ad2      	subs	r2, r2, r3
 800f2ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f2ec:	1ad2      	subs	r2, r2, r3
 800f2ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f2f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2f4:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800f2f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f2fa:	2b03      	cmp	r3, #3
 800f2fc:	d10f      	bne.n	800f31e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800f2fe:	6a3b      	ldr	r3, [r7, #32]
 800f300:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f304:	4293      	cmp	r3, r2
 800f306:	d80a      	bhi.n	800f31e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d105      	bne.n	800f31a <f_mkfs+0x376>
 800f30e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f310:	085b      	lsrs	r3, r3, #1
 800f312:	607b      	str	r3, [r7, #4]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d144      	bne.n	800f3a4 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800f31a:	230e      	movs	r3, #14
 800f31c:	e268      	b.n	800f7f0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800f31e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f322:	2b02      	cmp	r3, #2
 800f324:	d133      	bne.n	800f38e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800f326:	6a3b      	ldr	r3, [r7, #32]
 800f328:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d91e      	bls.n	800f36e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d107      	bne.n	800f346 <f_mkfs+0x3a2>
 800f336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f338:	005b      	lsls	r3, r3, #1
 800f33a:	2b40      	cmp	r3, #64	@ 0x40
 800f33c:	d803      	bhi.n	800f346 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800f33e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f340:	005b      	lsls	r3, r3, #1
 800f342:	607b      	str	r3, [r7, #4]
 800f344:	e033      	b.n	800f3ae <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800f346:	7afb      	ldrb	r3, [r7, #11]
 800f348:	f003 0302 	and.w	r3, r3, #2
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d003      	beq.n	800f358 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800f350:	2303      	movs	r3, #3
 800f352:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800f356:	e02a      	b.n	800f3ae <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d105      	bne.n	800f36a <f_mkfs+0x3c6>
 800f35e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f360:	005b      	lsls	r3, r3, #1
 800f362:	607b      	str	r3, [r7, #4]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2b80      	cmp	r3, #128	@ 0x80
 800f368:	d91e      	bls.n	800f3a8 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800f36a:	230e      	movs	r3, #14
 800f36c:	e240      	b.n	800f7f0 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800f36e:	6a3b      	ldr	r3, [r7, #32]
 800f370:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f374:	4293      	cmp	r3, r2
 800f376:	d80a      	bhi.n	800f38e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d105      	bne.n	800f38a <f_mkfs+0x3e6>
 800f37e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f380:	005b      	lsls	r3, r3, #1
 800f382:	607b      	str	r3, [r7, #4]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2b80      	cmp	r3, #128	@ 0x80
 800f388:	d910      	bls.n	800f3ac <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800f38a:	230e      	movs	r3, #14
 800f38c:	e230      	b.n	800f7f0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800f38e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f392:	2b01      	cmp	r3, #1
 800f394:	d10c      	bne.n	800f3b0 <f_mkfs+0x40c>
 800f396:	6a3b      	ldr	r3, [r7, #32]
 800f398:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d907      	bls.n	800f3b0 <f_mkfs+0x40c>
 800f3a0:	230e      	movs	r3, #14
 800f3a2:	e225      	b.n	800f7f0 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f3a4:	bf00      	nop
 800f3a6:	e6ce      	b.n	800f146 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f3a8:	bf00      	nop
 800f3aa:	e6cc      	b.n	800f146 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f3ac:	bf00      	nop
			pau = au;
 800f3ae:	e6ca      	b.n	800f146 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800f3b0:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800f3b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f3ba:	f7fd fa94 	bl	800c8e6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800f3be:	220b      	movs	r2, #11
 800f3c0:	49b2      	ldr	r1, [pc, #712]	@ (800f68c <f_mkfs+0x6e8>)
 800f3c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f3c4:	f7fd fa6e 	bl	800c8a4 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800f3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ca:	330b      	adds	r3, #11
 800f3cc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f3ce:	4611      	mov	r1, r2
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fd fa20 	bl	800c816 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800f3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3d8:	330d      	adds	r3, #13
 800f3da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f3dc:	b2d2      	uxtb	r2, r2
 800f3de:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800f3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e2:	330e      	adds	r3, #14
 800f3e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f3e6:	b292      	uxth	r2, r2
 800f3e8:	4611      	mov	r1, r2
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fd fa13 	bl	800c816 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800f3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3f2:	3310      	adds	r3, #16
 800f3f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f3f6:	b2d2      	uxtb	r2, r2
 800f3f8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800f3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3fc:	f103 0211 	add.w	r2, r3, #17
 800f400:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f404:	2b03      	cmp	r3, #3
 800f406:	d002      	beq.n	800f40e <f_mkfs+0x46a>
 800f408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	e000      	b.n	800f410 <f_mkfs+0x46c>
 800f40e:	2300      	movs	r3, #0
 800f410:	4619      	mov	r1, r3
 800f412:	4610      	mov	r0, r2
 800f414:	f7fd f9ff 	bl	800c816 <st_word>
		if (sz_vol < 0x10000) {
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f41e:	d208      	bcs.n	800f432 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800f420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f422:	3313      	adds	r3, #19
 800f424:	693a      	ldr	r2, [r7, #16]
 800f426:	b292      	uxth	r2, r2
 800f428:	4611      	mov	r1, r2
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7fd f9f3 	bl	800c816 <st_word>
 800f430:	e006      	b.n	800f440 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800f432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f434:	3320      	adds	r3, #32
 800f436:	693a      	ldr	r2, [r7, #16]
 800f438:	4611      	mov	r1, r2
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7fd fa06 	bl	800c84c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800f440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f442:	3315      	adds	r3, #21
 800f444:	22f8      	movs	r2, #248	@ 0xf8
 800f446:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800f448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f44a:	3318      	adds	r3, #24
 800f44c:	213f      	movs	r1, #63	@ 0x3f
 800f44e:	4618      	mov	r0, r3
 800f450:	f7fd f9e1 	bl	800c816 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800f454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f456:	331a      	adds	r3, #26
 800f458:	21ff      	movs	r1, #255	@ 0xff
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7fd f9db 	bl	800c816 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800f460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f462:	331c      	adds	r3, #28
 800f464:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f466:	4618      	mov	r0, r3
 800f468:	f7fd f9f0 	bl	800c84c <st_dword>
		if (fmt == FS_FAT32) {
 800f46c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f470:	2b03      	cmp	r3, #3
 800f472:	d131      	bne.n	800f4d8 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800f474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f476:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800f47a:	f7fc feb1 	bl	800c1e0 <get_fattime>
 800f47e:	4603      	mov	r3, r0
 800f480:	4619      	mov	r1, r3
 800f482:	4620      	mov	r0, r4
 800f484:	f7fd f9e2 	bl	800c84c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800f488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f48a:	3324      	adds	r3, #36	@ 0x24
 800f48c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f48e:	4618      	mov	r0, r3
 800f490:	f7fd f9dc 	bl	800c84c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800f494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f496:	332c      	adds	r3, #44	@ 0x2c
 800f498:	2102      	movs	r1, #2
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7fd f9d6 	bl	800c84c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800f4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4a2:	3330      	adds	r3, #48	@ 0x30
 800f4a4:	2101      	movs	r1, #1
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7fd f9b5 	bl	800c816 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800f4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ae:	3332      	adds	r3, #50	@ 0x32
 800f4b0:	2106      	movs	r1, #6
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fd f9af 	bl	800c816 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800f4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ba:	3340      	adds	r3, #64	@ 0x40
 800f4bc:	2280      	movs	r2, #128	@ 0x80
 800f4be:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800f4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4c2:	3342      	adds	r3, #66	@ 0x42
 800f4c4:	2229      	movs	r2, #41	@ 0x29
 800f4c6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800f4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ca:	3347      	adds	r3, #71	@ 0x47
 800f4cc:	2213      	movs	r2, #19
 800f4ce:	4970      	ldr	r1, [pc, #448]	@ (800f690 <f_mkfs+0x6ec>)
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7fd f9e7 	bl	800c8a4 <mem_cpy>
 800f4d6:	e020      	b.n	800f51a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800f4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4da:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800f4de:	f7fc fe7f 	bl	800c1e0 <get_fattime>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	f7fd f9b0 	bl	800c84c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800f4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ee:	3316      	adds	r3, #22
 800f4f0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f4f2:	b292      	uxth	r2, r2
 800f4f4:	4611      	mov	r1, r2
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fd f98d 	bl	800c816 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800f4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4fe:	3324      	adds	r3, #36	@ 0x24
 800f500:	2280      	movs	r2, #128	@ 0x80
 800f502:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800f504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f506:	3326      	adds	r3, #38	@ 0x26
 800f508:	2229      	movs	r2, #41	@ 0x29
 800f50a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800f50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f50e:	332b      	adds	r3, #43	@ 0x2b
 800f510:	2213      	movs	r2, #19
 800f512:	4960      	ldr	r1, [pc, #384]	@ (800f694 <f_mkfs+0x6f0>)
 800f514:	4618      	mov	r0, r3
 800f516:	f7fd f9c5 	bl	800c8a4 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800f51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f51c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f520:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f524:	4618      	mov	r0, r3
 800f526:	f7fd f976 	bl	800c816 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800f52a:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800f52e:	2301      	movs	r3, #1
 800f530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f532:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f534:	f7fd f8f6 	bl	800c724 <disk_write>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d001      	beq.n	800f542 <f_mkfs+0x59e>
 800f53e:	2301      	movs	r3, #1
 800f540:	e156      	b.n	800f7f0 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800f542:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f546:	2b03      	cmp	r3, #3
 800f548:	d140      	bne.n	800f5cc <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800f54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f54c:	1d9a      	adds	r2, r3, #6
 800f54e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800f552:	2301      	movs	r3, #1
 800f554:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f556:	f7fd f8e5 	bl	800c724 <disk_write>
			mem_set(buf, 0, ss);
 800f55a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f55c:	461a      	mov	r2, r3
 800f55e:	2100      	movs	r1, #0
 800f560:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f562:	f7fd f9c0 	bl	800c8e6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800f566:	494c      	ldr	r1, [pc, #304]	@ (800f698 <f_mkfs+0x6f4>)
 800f568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f56a:	f7fd f96f 	bl	800c84c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800f56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f570:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f574:	4949      	ldr	r1, [pc, #292]	@ (800f69c <f_mkfs+0x6f8>)
 800f576:	4618      	mov	r0, r3
 800f578:	f7fd f968 	bl	800c84c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f57e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f582:	6a3b      	ldr	r3, [r7, #32]
 800f584:	3b01      	subs	r3, #1
 800f586:	4619      	mov	r1, r3
 800f588:	4610      	mov	r0, r2
 800f58a:	f7fd f95f 	bl	800c84c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800f58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f590:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f594:	2102      	movs	r1, #2
 800f596:	4618      	mov	r0, r3
 800f598:	f7fd f958 	bl	800c84c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800f59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f59e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f5a2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7fd f935 	bl	800c816 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ae:	1dda      	adds	r2, r3, #7
 800f5b0:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f5b8:	f7fd f8b4 	bl	800c724 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800f5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5be:	1c5a      	adds	r2, r3, #1
 800f5c0:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f5c8:	f7fd f8ac 	bl	800c724 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800f5cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5d2:	f7fd f988 	bl	800c8e6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800f5d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5d8:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f5da:	2300      	movs	r3, #0
 800f5dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f5de:	e04b      	b.n	800f678 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800f5e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f5e4:	2b03      	cmp	r3, #3
 800f5e6:	d113      	bne.n	800f610 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800f5e8:	f06f 0107 	mvn.w	r1, #7
 800f5ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5ee:	f7fd f92d 	bl	800c84c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800f5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5f4:	3304      	adds	r3, #4
 800f5f6:	f04f 31ff 	mov.w	r1, #4294967295
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7fd f926 	bl	800c84c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800f600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f602:	3308      	adds	r3, #8
 800f604:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800f608:	4618      	mov	r0, r3
 800f60a:	f7fd f91f 	bl	800c84c <st_dword>
 800f60e:	e00b      	b.n	800f628 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800f610:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f614:	2b01      	cmp	r3, #1
 800f616:	d101      	bne.n	800f61c <f_mkfs+0x678>
 800f618:	4b21      	ldr	r3, [pc, #132]	@ (800f6a0 <f_mkfs+0x6fc>)
 800f61a:	e001      	b.n	800f620 <f_mkfs+0x67c>
 800f61c:	f06f 0307 	mvn.w	r3, #7
 800f620:	4619      	mov	r1, r3
 800f622:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f624:	f7fd f912 	bl	800c84c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800f628:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f62a:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800f62c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f630:	4293      	cmp	r3, r2
 800f632:	bf28      	it	cs
 800f634:	4613      	movcs	r3, r2
 800f636:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f638:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800f63c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f63e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f640:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f642:	f7fd f86f 	bl	800c724 <disk_write>
 800f646:	4603      	mov	r3, r0
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d001      	beq.n	800f650 <f_mkfs+0x6ac>
 800f64c:	2301      	movs	r3, #1
 800f64e:	e0cf      	b.n	800f7f0 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800f650:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f652:	461a      	mov	r2, r3
 800f654:	2100      	movs	r1, #0
 800f656:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f658:	f7fd f945 	bl	800c8e6 <mem_set>
				sect += n; nsect -= n;
 800f65c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f65e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f660:	4413      	add	r3, r2
 800f662:	667b      	str	r3, [r7, #100]	@ 0x64
 800f664:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f668:	1ad3      	subs	r3, r2, r3
 800f66a:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 800f66c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d1dc      	bne.n	800f62c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f674:	3301      	adds	r3, #1
 800f676:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f678:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f67a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d3af      	bcc.n	800f5e0 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800f680:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f684:	2b03      	cmp	r3, #3
 800f686:	d10d      	bne.n	800f6a4 <f_mkfs+0x700>
 800f688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f68a:	e00c      	b.n	800f6a6 <f_mkfs+0x702>
 800f68c:	0801885c 	.word	0x0801885c
 800f690:	08018868 	.word	0x08018868
 800f694:	0801887c 	.word	0x0801887c
 800f698:	41615252 	.word	0x41615252
 800f69c:	61417272 	.word	0x61417272
 800f6a0:	00fffff8 	.word	0x00fffff8
 800f6a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6a6:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800f6a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	bf28      	it	cs
 800f6b0:	4613      	movcs	r3, r2
 800f6b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f6b4:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800f6b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f6ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f6bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f6be:	f7fd f831 	bl	800c724 <disk_write>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d001      	beq.n	800f6cc <f_mkfs+0x728>
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	e091      	b.n	800f7f0 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800f6cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f6ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f6d0:	4413      	add	r3, r2
 800f6d2:	667b      	str	r3, [r7, #100]	@ 0x64
 800f6d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f6d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f6d8:	1ad3      	subs	r3, r2, r3
 800f6da:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 800f6dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d1e2      	bne.n	800f6a8 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800f6e2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f6e6:	2b03      	cmp	r3, #3
 800f6e8:	d103      	bne.n	800f6f2 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800f6ea:	230c      	movs	r3, #12
 800f6ec:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800f6f0:	e010      	b.n	800f714 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f6f8:	d303      	bcc.n	800f702 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800f6fa:	2306      	movs	r3, #6
 800f6fc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800f700:	e008      	b.n	800f714 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800f702:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f706:	2b02      	cmp	r3, #2
 800f708:	d101      	bne.n	800f70e <f_mkfs+0x76a>
 800f70a:	2304      	movs	r3, #4
 800f70c:	e000      	b.n	800f710 <f_mkfs+0x76c>
 800f70e:	2301      	movs	r3, #1
 800f710:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800f714:	7afb      	ldrb	r3, [r7, #11]
 800f716:	f003 0308 	and.w	r3, r3, #8
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d15b      	bne.n	800f7d6 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800f71e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f720:	461a      	mov	r2, r3
 800f722:	2100      	movs	r1, #0
 800f724:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f726:	f7fd f8de 	bl	800c8e6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800f72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f72c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f730:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f734:	4618      	mov	r0, r3
 800f736:	f7fd f86e 	bl	800c816 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800f73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f73c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f740:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800f742:	69bb      	ldr	r3, [r7, #24]
 800f744:	2200      	movs	r2, #0
 800f746:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800f748:	69bb      	ldr	r3, [r7, #24]
 800f74a:	3301      	adds	r3, #1
 800f74c:	2201      	movs	r2, #1
 800f74e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800f750:	69bb      	ldr	r3, [r7, #24]
 800f752:	3302      	adds	r3, #2
 800f754:	2201      	movs	r2, #1
 800f756:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800f758:	69bb      	ldr	r3, [r7, #24]
 800f75a:	3303      	adds	r3, #3
 800f75c:	2200      	movs	r2, #0
 800f75e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800f760:	69bb      	ldr	r3, [r7, #24]
 800f762:	3304      	adds	r3, #4
 800f764:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800f768:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800f76a:	693a      	ldr	r2, [r7, #16]
 800f76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f76e:	441a      	add	r2, r3
 800f770:	4b21      	ldr	r3, [pc, #132]	@ (800f7f8 <f_mkfs+0x854>)
 800f772:	fba3 1302 	umull	r1, r3, r3, r2
 800f776:	1ad2      	subs	r2, r2, r3
 800f778:	0852      	lsrs	r2, r2, #1
 800f77a:	4413      	add	r3, r2
 800f77c:	0b5b      	lsrs	r3, r3, #13
 800f77e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	3305      	adds	r3, #5
 800f784:	22fe      	movs	r2, #254	@ 0xfe
 800f786:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800f788:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f78a:	089b      	lsrs	r3, r3, #2
 800f78c:	b2da      	uxtb	r2, r3
 800f78e:	69bb      	ldr	r3, [r7, #24]
 800f790:	3306      	adds	r3, #6
 800f792:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800f796:	b2d2      	uxtb	r2, r2
 800f798:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	3307      	adds	r3, #7
 800f79e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f7a0:	b2d2      	uxtb	r2, r2
 800f7a2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800f7a4:	69bb      	ldr	r3, [r7, #24]
 800f7a6:	3308      	adds	r3, #8
 800f7a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7fd f84e 	bl	800c84c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800f7b0:	69bb      	ldr	r3, [r7, #24]
 800f7b2:	330c      	adds	r3, #12
 800f7b4:	693a      	ldr	r2, [r7, #16]
 800f7b6:	4611      	mov	r1, r2
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7fd f847 	bl	800c84c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800f7be:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f7c8:	f7fc ffac 	bl	800c724 <disk_write>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d001      	beq.n	800f7d6 <f_mkfs+0x832>
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	e00c      	b.n	800f7f0 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800f7d6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800f7da:	2200      	movs	r2, #0
 800f7dc:	2100      	movs	r1, #0
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fc ffc0 	bl	800c764 <disk_ioctl>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d001      	beq.n	800f7ee <f_mkfs+0x84a>
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	e000      	b.n	800f7f0 <f_mkfs+0x84c>

	return FR_OK;
 800f7ee:	2300      	movs	r3, #0
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3774      	adds	r7, #116	@ 0x74
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd90      	pop	{r4, r7, pc}
 800f7f8:	0515565b 	.word	0x0515565b

0800f7fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b087      	sub	sp, #28
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	4613      	mov	r3, r2
 800f808:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f80a:	2301      	movs	r3, #1
 800f80c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f80e:	2300      	movs	r3, #0
 800f810:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f812:	4b1f      	ldr	r3, [pc, #124]	@ (800f890 <FATFS_LinkDriverEx+0x94>)
 800f814:	7a5b      	ldrb	r3, [r3, #9]
 800f816:	b2db      	uxtb	r3, r3
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d131      	bne.n	800f880 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f81c:	4b1c      	ldr	r3, [pc, #112]	@ (800f890 <FATFS_LinkDriverEx+0x94>)
 800f81e:	7a5b      	ldrb	r3, [r3, #9]
 800f820:	b2db      	uxtb	r3, r3
 800f822:	461a      	mov	r2, r3
 800f824:	4b1a      	ldr	r3, [pc, #104]	@ (800f890 <FATFS_LinkDriverEx+0x94>)
 800f826:	2100      	movs	r1, #0
 800f828:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f82a:	4b19      	ldr	r3, [pc, #100]	@ (800f890 <FATFS_LinkDriverEx+0x94>)
 800f82c:	7a5b      	ldrb	r3, [r3, #9]
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	4a17      	ldr	r2, [pc, #92]	@ (800f890 <FATFS_LinkDriverEx+0x94>)
 800f832:	009b      	lsls	r3, r3, #2
 800f834:	4413      	add	r3, r2
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f83a:	4b15      	ldr	r3, [pc, #84]	@ (800f890 <FATFS_LinkDriverEx+0x94>)
 800f83c:	7a5b      	ldrb	r3, [r3, #9]
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	461a      	mov	r2, r3
 800f842:	4b13      	ldr	r3, [pc, #76]	@ (800f890 <FATFS_LinkDriverEx+0x94>)
 800f844:	4413      	add	r3, r2
 800f846:	79fa      	ldrb	r2, [r7, #7]
 800f848:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f84a:	4b11      	ldr	r3, [pc, #68]	@ (800f890 <FATFS_LinkDriverEx+0x94>)
 800f84c:	7a5b      	ldrb	r3, [r3, #9]
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	1c5a      	adds	r2, r3, #1
 800f852:	b2d1      	uxtb	r1, r2
 800f854:	4a0e      	ldr	r2, [pc, #56]	@ (800f890 <FATFS_LinkDriverEx+0x94>)
 800f856:	7251      	strb	r1, [r2, #9]
 800f858:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f85a:	7dbb      	ldrb	r3, [r7, #22]
 800f85c:	3330      	adds	r3, #48	@ 0x30
 800f85e:	b2da      	uxtb	r2, r3
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	3301      	adds	r3, #1
 800f868:	223a      	movs	r2, #58	@ 0x3a
 800f86a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	3302      	adds	r3, #2
 800f870:	222f      	movs	r2, #47	@ 0x2f
 800f872:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	3303      	adds	r3, #3
 800f878:	2200      	movs	r2, #0
 800f87a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f87c:	2300      	movs	r3, #0
 800f87e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f880:	7dfb      	ldrb	r3, [r7, #23]
}
 800f882:	4618      	mov	r0, r3
 800f884:	371c      	adds	r7, #28
 800f886:	46bd      	mov	sp, r7
 800f888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88c:	4770      	bx	lr
 800f88e:	bf00      	nop
 800f890:	20035f98 	.word	0x20035f98

0800f894 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f89e:	2200      	movs	r2, #0
 800f8a0:	6839      	ldr	r1, [r7, #0]
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f7ff ffaa 	bl	800f7fc <FATFS_LinkDriverEx>
 800f8a8:	4603      	mov	r3, r0
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3708      	adds	r7, #8
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
	...

0800f8b4 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800f8be:	683a      	ldr	r2, [r7, #0]
 800f8c0:	2101      	movs	r1, #1
 800f8c2:	4831      	ldr	r0, [pc, #196]	@ (800f988 <network_configure_activations+0xd4>)
 800f8c4:	f001 fbe8 	bl	8011098 <ai_platform_get_activations_map>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d051      	beq.n	800f972 <network_configure_activations+0xbe>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800f8ce:	4b2e      	ldr	r3, [pc, #184]	@ (800f988 <network_configure_activations+0xd4>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	4a2e      	ldr	r2, [pc, #184]	@ (800f98c <network_configure_activations+0xd8>)
 800f8d4:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800f8d6:	4b2c      	ldr	r3, [pc, #176]	@ (800f988 <network_configure_activations+0xd4>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4a2c      	ldr	r2, [pc, #176]	@ (800f98c <network_configure_activations+0xd8>)
 800f8dc:	60d3      	str	r3, [r2, #12]
    resize_0_output_array.data = AI_PTR(g_network_activations_map[0] + 63984);
 800f8de:	4b2a      	ldr	r3, [pc, #168]	@ (800f988 <network_configure_activations+0xd4>)
 800f8e0:	681a      	ldr	r2, [r3, #0]
 800f8e2:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800f8e6:	4413      	add	r3, r2
 800f8e8:	4a29      	ldr	r2, [pc, #164]	@ (800f990 <network_configure_activations+0xdc>)
 800f8ea:	6093      	str	r3, [r2, #8]
    resize_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 63984);
 800f8ec:	4b26      	ldr	r3, [pc, #152]	@ (800f988 <network_configure_activations+0xd4>)
 800f8ee:	681a      	ldr	r2, [r3, #0]
 800f8f0:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800f8f4:	4413      	add	r3, r2
 800f8f6:	4a26      	ldr	r2, [pc, #152]	@ (800f990 <network_configure_activations+0xdc>)
 800f8f8:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800f8fa:	4b23      	ldr	r3, [pc, #140]	@ (800f988 <network_configure_activations+0xd4>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	4a25      	ldr	r2, [pc, #148]	@ (800f994 <network_configure_activations+0xe0>)
 800f900:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800f902:	4b21      	ldr	r3, [pc, #132]	@ (800f988 <network_configure_activations+0xd4>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	4a23      	ldr	r2, [pc, #140]	@ (800f994 <network_configure_activations+0xe0>)
 800f908:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 36);
 800f90a:	4b1f      	ldr	r3, [pc, #124]	@ (800f988 <network_configure_activations+0xd4>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	3324      	adds	r3, #36	@ 0x24
 800f910:	4a21      	ldr	r2, [pc, #132]	@ (800f998 <network_configure_activations+0xe4>)
 800f912:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 36);
 800f914:	4b1c      	ldr	r3, [pc, #112]	@ (800f988 <network_configure_activations+0xd4>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	3324      	adds	r3, #36	@ 0x24
 800f91a:	4a1f      	ldr	r2, [pc, #124]	@ (800f998 <network_configure_activations+0xe4>)
 800f91c:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 3364);
 800f91e:	4b1a      	ldr	r3, [pc, #104]	@ (800f988 <network_configure_activations+0xd4>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800f926:	4a1d      	ldr	r2, [pc, #116]	@ (800f99c <network_configure_activations+0xe8>)
 800f928:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3364);
 800f92a:	4b17      	ldr	r3, [pc, #92]	@ (800f988 <network_configure_activations+0xd4>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800f932:	4a1a      	ldr	r2, [pc, #104]	@ (800f99c <network_configure_activations+0xe8>)
 800f934:	60d3      	str	r3, [r2, #12]
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800f936:	4b14      	ldr	r3, [pc, #80]	@ (800f988 <network_configure_activations+0xd4>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4a19      	ldr	r2, [pc, #100]	@ (800f9a0 <network_configure_activations+0xec>)
 800f93c:	6093      	str	r3, [r2, #8]
    gemm_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800f93e:	4b12      	ldr	r3, [pc, #72]	@ (800f988 <network_configure_activations+0xd4>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	4a17      	ldr	r2, [pc, #92]	@ (800f9a0 <network_configure_activations+0xec>)
 800f944:	60d3      	str	r3, [r2, #12]
    nl_4_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800f946:	4b10      	ldr	r3, [pc, #64]	@ (800f988 <network_configure_activations+0xd4>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f94e:	4a15      	ldr	r2, [pc, #84]	@ (800f9a4 <network_configure_activations+0xf0>)
 800f950:	6093      	str	r3, [r2, #8]
    nl_4_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800f952:	4b0d      	ldr	r3, [pc, #52]	@ (800f988 <network_configure_activations+0xd4>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f95a:	4a12      	ldr	r2, [pc, #72]	@ (800f9a4 <network_configure_activations+0xf0>)
 800f95c:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800f95e:	4b0a      	ldr	r3, [pc, #40]	@ (800f988 <network_configure_activations+0xd4>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	4a11      	ldr	r2, [pc, #68]	@ (800f9a8 <network_configure_activations+0xf4>)
 800f964:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800f966:	4b08      	ldr	r3, [pc, #32]	@ (800f988 <network_configure_activations+0xd4>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	4a0f      	ldr	r2, [pc, #60]	@ (800f9a8 <network_configure_activations+0xf4>)
 800f96c:	60d3      	str	r3, [r2, #12]
    return true;
 800f96e:	2301      	movs	r3, #1
 800f970:	e005      	b.n	800f97e <network_configure_activations+0xca>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800f972:	2213      	movs	r2, #19
 800f974:	2130      	movs	r1, #48	@ 0x30
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f001 fc0c 	bl	8011194 <ai_platform_network_set_error>
  return false;
 800f97c:	2300      	movs	r3, #0
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3708      	adds	r7, #8
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	20035fa4 	.word	0x20035fa4
 800f98c:	20000064 	.word	0x20000064
 800f990:	20000074 	.word	0x20000074
 800f994:	20000124 	.word	0x20000124
 800f998:	20000134 	.word	0x20000134
 800f99c:	20000084 	.word	0x20000084
 800f9a0:	20000094 	.word	0x20000094
 800f9a4:	200000a4 	.word	0x200000a4
 800f9a8:	200000b4 	.word	0x200000b4

0800f9ac <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800f9b6:	683a      	ldr	r2, [r7, #0]
 800f9b8:	2101      	movs	r1, #1
 800f9ba:	483d      	ldr	r0, [pc, #244]	@ (800fab0 <network_configure_weights+0x104>)
 800f9bc:	f001 fb14 	bl	8010fe8 <ai_platform_get_weights_map>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d069      	beq.n	800fa9a <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800f9c6:	4b3b      	ldr	r3, [pc, #236]	@ (800fab4 <network_configure_weights+0x108>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f9ce:	4a39      	ldr	r2, [pc, #228]	@ (800fab4 <network_configure_weights+0x108>)
 800f9d0:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800f9d2:	4b37      	ldr	r3, [pc, #220]	@ (800fab0 <network_configure_weights+0x104>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	4a37      	ldr	r2, [pc, #220]	@ (800fab4 <network_configure_weights+0x108>)
 800f9d8:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800f9da:	4b35      	ldr	r3, [pc, #212]	@ (800fab0 <network_configure_weights+0x104>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4a35      	ldr	r2, [pc, #212]	@ (800fab4 <network_configure_weights+0x108>)
 800f9e0:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800f9e2:	4b35      	ldr	r3, [pc, #212]	@ (800fab8 <network_configure_weights+0x10c>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f9ea:	4a33      	ldr	r2, [pc, #204]	@ (800fab8 <network_configure_weights+0x10c>)
 800f9ec:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 800f9ee:	4b30      	ldr	r3, [pc, #192]	@ (800fab0 <network_configure_weights+0x104>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800f9f6:	4a30      	ldr	r2, [pc, #192]	@ (800fab8 <network_configure_weights+0x10c>)
 800f9f8:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 800f9fa:	4b2d      	ldr	r3, [pc, #180]	@ (800fab0 <network_configure_weights+0x104>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800fa02:	4a2d      	ldr	r2, [pc, #180]	@ (800fab8 <network_configure_weights+0x10c>)
 800fa04:	60d3      	str	r3, [r2, #12]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800fa06:	4b2d      	ldr	r3, [pc, #180]	@ (800fabc <network_configure_weights+0x110>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fa0e:	4a2b      	ldr	r2, [pc, #172]	@ (800fabc <network_configure_weights+0x110>)
 800fa10:	6013      	str	r3, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 640);
 800fa12:	4b27      	ldr	r3, [pc, #156]	@ (800fab0 <network_configure_weights+0x104>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800fa1a:	4a28      	ldr	r2, [pc, #160]	@ (800fabc <network_configure_weights+0x110>)
 800fa1c:	6093      	str	r3, [r2, #8]
    gemm_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 800fa1e:	4b24      	ldr	r3, [pc, #144]	@ (800fab0 <network_configure_weights+0x104>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800fa26:	4a25      	ldr	r2, [pc, #148]	@ (800fabc <network_configure_weights+0x110>)
 800fa28:	60d3      	str	r3, [r2, #12]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800fa2a:	4b25      	ldr	r3, [pc, #148]	@ (800fac0 <network_configure_weights+0x114>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fa32:	4a23      	ldr	r2, [pc, #140]	@ (800fac0 <network_configure_weights+0x114>)
 800fa34:	6013      	str	r3, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 692864);
 800fa36:	4b1e      	ldr	r3, [pc, #120]	@ (800fab0 <network_configure_weights+0x104>)
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	4b22      	ldr	r3, [pc, #136]	@ (800fac4 <network_configure_weights+0x118>)
 800fa3c:	4413      	add	r3, r2
 800fa3e:	4a20      	ldr	r2, [pc, #128]	@ (800fac0 <network_configure_weights+0x114>)
 800fa40:	6093      	str	r3, [r2, #8]
    gemm_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 692864);
 800fa42:	4b1b      	ldr	r3, [pc, #108]	@ (800fab0 <network_configure_weights+0x104>)
 800fa44:	681a      	ldr	r2, [r3, #0]
 800fa46:	4b1f      	ldr	r3, [pc, #124]	@ (800fac4 <network_configure_weights+0x118>)
 800fa48:	4413      	add	r3, r2
 800fa4a:	4a1d      	ldr	r2, [pc, #116]	@ (800fac0 <network_configure_weights+0x114>)
 800fa4c:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800fa4e:	4b1e      	ldr	r3, [pc, #120]	@ (800fac8 <network_configure_weights+0x11c>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fa56:	4a1c      	ldr	r2, [pc, #112]	@ (800fac8 <network_configure_weights+0x11c>)
 800fa58:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 693120);
 800fa5a:	4b15      	ldr	r3, [pc, #84]	@ (800fab0 <network_configure_weights+0x104>)
 800fa5c:	681a      	ldr	r2, [r3, #0]
 800fa5e:	4b1b      	ldr	r3, [pc, #108]	@ (800facc <network_configure_weights+0x120>)
 800fa60:	4413      	add	r3, r2
 800fa62:	4a19      	ldr	r2, [pc, #100]	@ (800fac8 <network_configure_weights+0x11c>)
 800fa64:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 693120);
 800fa66:	4b12      	ldr	r3, [pc, #72]	@ (800fab0 <network_configure_weights+0x104>)
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	4b18      	ldr	r3, [pc, #96]	@ (800facc <network_configure_weights+0x120>)
 800fa6c:	4413      	add	r3, r2
 800fa6e:	4a16      	ldr	r2, [pc, #88]	@ (800fac8 <network_configure_weights+0x11c>)
 800fa70:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800fa72:	4b17      	ldr	r3, [pc, #92]	@ (800fad0 <network_configure_weights+0x124>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fa7a:	4a15      	ldr	r2, [pc, #84]	@ (800fad0 <network_configure_weights+0x124>)
 800fa7c:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 694656);
 800fa7e:	4b0c      	ldr	r3, [pc, #48]	@ (800fab0 <network_configure_weights+0x104>)
 800fa80:	681a      	ldr	r2, [r3, #0]
 800fa82:	4b14      	ldr	r3, [pc, #80]	@ (800fad4 <network_configure_weights+0x128>)
 800fa84:	4413      	add	r3, r2
 800fa86:	4a12      	ldr	r2, [pc, #72]	@ (800fad0 <network_configure_weights+0x124>)
 800fa88:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 694656);
 800fa8a:	4b09      	ldr	r3, [pc, #36]	@ (800fab0 <network_configure_weights+0x104>)
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	4b11      	ldr	r3, [pc, #68]	@ (800fad4 <network_configure_weights+0x128>)
 800fa90:	4413      	add	r3, r2
 800fa92:	4a0f      	ldr	r2, [pc, #60]	@ (800fad0 <network_configure_weights+0x124>)
 800fa94:	60d3      	str	r3, [r2, #12]
    return true;
 800fa96:	2301      	movs	r3, #1
 800fa98:	e005      	b.n	800faa6 <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800fa9a:	2212      	movs	r2, #18
 800fa9c:	2130      	movs	r1, #48	@ 0x30
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f001 fb78 	bl	8011194 <ai_platform_network_set_error>
  return false;
 800faa4:	2300      	movs	r3, #0
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3708      	adds	r7, #8
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
 800faae:	bf00      	nop
 800fab0:	20035fa8 	.word	0x20035fa8
 800fab4:	200000c4 	.word	0x200000c4
 800fab8:	200000d4 	.word	0x200000d4
 800fabc:	200000e4 	.word	0x200000e4
 800fac0:	200000f4 	.word	0x200000f4
 800fac4:	000a9280 	.word	0x000a9280
 800fac8:	20000104 	.word	0x20000104
 800facc:	000a9380 	.word	0x000a9380
 800fad0:	20000114 	.word	0x20000114
 800fad4:	000a9980 	.word	0x000a9980

0800fad8 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f001 fb4b 	bl	801117c <ai_platform_network_get_error>
 800fae6:	4603      	mov	r3, r0
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3708      	adds	r7, #8
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b084      	sub	sp, #16
 800faf4:	af02      	add	r7, sp, #8
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800fafa:	2300      	movs	r3, #0
 800fafc:	9301      	str	r3, [sp, #4]
 800fafe:	2305      	movs	r3, #5
 800fb00:	9300      	str	r3, [sp, #0]
 800fb02:	2301      	movs	r3, #1
 800fb04:	4a04      	ldr	r2, [pc, #16]	@ (800fb18 <ai_network_create+0x28>)
 800fb06:	6839      	ldr	r1, [r7, #0]
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f001 fc37 	bl	801137c <ai_platform_network_create>
 800fb0e:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3708      	adds	r7, #8
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	20000774 	.word	0x20000774

0800fb1c <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b094      	sub	sp, #80	@ 0x50
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800fb28:	2100      	movs	r1, #0
 800fb2a:	68f8      	ldr	r0, [r7, #12]
 800fb2c:	f7ff ffe0 	bl	800faf0 <ai_network_create>
 800fb30:	4603      	mov	r3, r0
 800fb32:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 800fb34:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d001      	beq.n	800fb40 <ai_network_create_and_init+0x24>
    return err;
 800fb3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb3e:	e067      	b.n	800fc10 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 800fb40:	f107 0310 	add.w	r3, r7, #16
 800fb44:	4618      	mov	r0, r3
 800fb46:	f000 f8e7 	bl	800fd18 <ai_network_data_params_get>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	f083 0301 	eor.w	r3, r3, #1
 800fb50:	b2db      	uxtb	r3, r3
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d008      	beq.n	800fb68 <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7ff ffbc 	bl	800fad8 <ai_network_get_error>
 800fb60:	4603      	mov	r3, r0
 800fb62:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 800fb64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb66:	e053      	b.n	800fc10 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800fb68:	2300      	movs	r3, #0
 800fb6a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800fb6e:	e012      	b.n	800fb96 <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800fb70:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 800fb74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fb78:	009b      	lsls	r3, r3, #2
 800fb7a:	68ba      	ldr	r2, [r7, #8]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	681a      	ldr	r2, [r3, #0]
 800fb80:	f107 0310 	add.w	r3, r7, #16
 800fb84:	330c      	adds	r3, #12
 800fb86:	4618      	mov	r0, r3
 800fb88:	f001 fa1e 	bl	8010fc8 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800fb8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fb90:	3301      	adds	r3, #1
 800fb92:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d004      	beq.n	800fba6 <ai_network_create_and_init+0x8a>
 800fb9c:	8bfb      	ldrh	r3, [r7, #30]
 800fb9e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d3e4      	bcc.n	800fb70 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800fba6:	2300      	movs	r3, #0
 800fba8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800fbac:	e012      	b.n	800fbd4 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800fbae:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 800fbb2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800fbb6:	009b      	lsls	r3, r3, #2
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	4413      	add	r3, r2
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	f107 0310 	add.w	r3, r7, #16
 800fbc2:	3304      	adds	r3, #4
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f001 f9ff 	bl	8010fc8 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800fbca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800fbce:	3301      	adds	r3, #1
 800fbd0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d004      	beq.n	800fbe4 <ai_network_create_and_init+0xc8>
 800fbda:	8afb      	ldrh	r3, [r7, #22]
 800fbdc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d3e4      	bcc.n	800fbae <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f107 0210 	add.w	r2, r7, #16
 800fbec:	4611      	mov	r1, r2
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f000 f846 	bl	800fc80 <ai_network_init>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	f083 0301 	eor.w	r3, r3, #1
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d006      	beq.n	800fc0e <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7ff ff67 	bl	800fad8 <ai_network_get_error>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 800fc0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3750      	adds	r7, #80	@ 0x50
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d104      	bne.n	800fc32 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800fc28:	4b06      	ldr	r3, [pc, #24]	@ (800fc44 <ai_network_inputs_get+0x2c>)
 800fc2a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	4a06      	ldr	r2, [pc, #24]	@ (800fc48 <ai_network_inputs_get+0x30>)
 800fc30:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800fc32:	6839      	ldr	r1, [r7, #0]
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f001 fab3 	bl	80111a0 <ai_platform_inputs_get>
 800fc3a:	4603      	mov	r3, r0
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3708      	adds	r7, #8
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}
 800fc44:	20000774 	.word	0x20000774
 800fc48:	a1c00100 	.word	0xa1c00100

0800fc4c <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d104      	bne.n	800fc66 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800fc5c:	4b06      	ldr	r3, [pc, #24]	@ (800fc78 <ai_network_outputs_get+0x2c>)
 800fc5e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	4a06      	ldr	r2, [pc, #24]	@ (800fc7c <ai_network_outputs_get+0x30>)
 800fc64:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800fc66:	6839      	ldr	r1, [r7, #0]
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f001 fb11 	bl	8011290 <ai_platform_outputs_get>
 800fc6e:	4603      	mov	r3, r0
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3708      	adds	r7, #8
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	20000774 	.word	0x20000774
 800fc7c:	a1c00100 	.word	0xa1c00100

0800fc80 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b084      	sub	sp, #16
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800fc8a:	6839      	ldr	r1, [r7, #0]
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f001 fbb7 	bl	8011400 <ai_platform_network_init>
 800fc92:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800fc94:	2301      	movs	r3, #1
 800fc96:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d101      	bne.n	800fca2 <ai_network_init+0x22>
 800fc9e:	2300      	movs	r3, #0
 800fca0:	e026      	b.n	800fcf0 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 800fca2:	6839      	ldr	r1, [r7, #0]
 800fca4:	68f8      	ldr	r0, [r7, #12]
 800fca6:	f7ff fe81 	bl	800f9ac <network_configure_weights>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	461a      	mov	r2, r3
 800fcae:	7afb      	ldrb	r3, [r7, #11]
 800fcb0:	4013      	ands	r3, r2
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	bf14      	ite	ne
 800fcb6:	2301      	movne	r3, #1
 800fcb8:	2300      	moveq	r3, #0
 800fcba:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800fcbc:	6839      	ldr	r1, [r7, #0]
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	f7ff fdf8 	bl	800f8b4 <network_configure_activations>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	7afb      	ldrb	r3, [r7, #11]
 800fcca:	4013      	ands	r3, r2
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	bf14      	ite	ne
 800fcd0:	2301      	movne	r3, #1
 800fcd2:	2300      	moveq	r3, #0
 800fcd4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f001 fc52 	bl	8011580 <ai_platform_network_post_init>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	461a      	mov	r2, r3
 800fce0:	7afb      	ldrb	r3, [r7, #11]
 800fce2:	4013      	ands	r3, r2
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	bf14      	ite	ne
 800fce8:	2301      	movne	r3, #1
 800fcea:	2300      	moveq	r3, #0
 800fcec:	72fb      	strb	r3, [r7, #11]

  return ok;
 800fcee:	7afb      	ldrb	r3, [r7, #11]
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3710      	adds	r7, #16
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	68b9      	ldr	r1, [r7, #8]
 800fd08:	68f8      	ldr	r0, [r7, #12]
 800fd0a:	f001 fc69 	bl	80115e0 <ai_platform_network_process>
 800fd0e:	4603      	mov	r3, r0
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3710      	adds	r7, #16
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b086      	sub	sp, #24
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d101      	bne.n	800fd2a <ai_network_data_params_get+0x12>
 800fd26:	2300      	movs	r3, #0
 800fd28:	e016      	b.n	800fd58 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800fd2a:	4a0d      	ldr	r2, [pc, #52]	@ (800fd60 <ai_network_data_params_get+0x48>)
 800fd2c:	f107 0310 	add.w	r3, r7, #16
 800fd30:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd34:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800fd38:	4a0a      	ldr	r2, [pc, #40]	@ (800fd64 <ai_network_data_params_get+0x4c>)
 800fd3a:	f107 0308 	add.w	r3, r7, #8
 800fd3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd42:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800fd46:	f107 0210 	add.w	r2, r7, #16
 800fd4a:	f107 0308 	add.w	r3, r7, #8
 800fd4e:	4619      	mov	r1, r3
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f001 f9f9 	bl	8011148 <ai_platform_bind_network_params>
 800fd56:	4603      	mov	r3, r0
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3718      	adds	r7, #24
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	080188b0 	.word	0x080188b0
 800fd64:	080188b8 	.word	0x080188b8

0800fd68 <arm_rfft_fast_init_f32>:
 800fd68:	084b      	lsrs	r3, r1, #1
 800fd6a:	2b80      	cmp	r3, #128	@ 0x80
 800fd6c:	b430      	push	{r4, r5}
 800fd6e:	8201      	strh	r1, [r0, #16]
 800fd70:	8003      	strh	r3, [r0, #0]
 800fd72:	d070      	beq.n	800fe56 <arm_rfft_fast_init_f32+0xee>
 800fd74:	d916      	bls.n	800fda4 <arm_rfft_fast_init_f32+0x3c>
 800fd76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fd7a:	d05f      	beq.n	800fe3c <arm_rfft_fast_init_f32+0xd4>
 800fd7c:	d936      	bls.n	800fdec <arm_rfft_fast_init_f32+0x84>
 800fd7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fd82:	d026      	beq.n	800fdd2 <arm_rfft_fast_init_f32+0x6a>
 800fd84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fd88:	d112      	bne.n	800fdb0 <arm_rfft_fast_init_f32+0x48>
 800fd8a:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 800fd8e:	4c38      	ldr	r4, [pc, #224]	@ (800fe70 <arm_rfft_fast_init_f32+0x108>)
 800fd90:	4938      	ldr	r1, [pc, #224]	@ (800fe74 <arm_rfft_fast_init_f32+0x10c>)
 800fd92:	2300      	movs	r3, #0
 800fd94:	4a38      	ldr	r2, [pc, #224]	@ (800fe78 <arm_rfft_fast_init_f32+0x110>)
 800fd96:	8185      	strh	r5, [r0, #12]
 800fd98:	6084      	str	r4, [r0, #8]
 800fd9a:	6041      	str	r1, [r0, #4]
 800fd9c:	6142      	str	r2, [r0, #20]
 800fd9e:	4618      	mov	r0, r3
 800fda0:	bc30      	pop	{r4, r5}
 800fda2:	4770      	bx	lr
 800fda4:	2b20      	cmp	r3, #32
 800fda6:	d031      	beq.n	800fe0c <arm_rfft_fast_init_f32+0xa4>
 800fda8:	2b40      	cmp	r3, #64	@ 0x40
 800fdaa:	d006      	beq.n	800fdba <arm_rfft_fast_init_f32+0x52>
 800fdac:	2b10      	cmp	r3, #16
 800fdae:	d039      	beq.n	800fe24 <arm_rfft_fast_init_f32+0xbc>
 800fdb0:	f04f 33ff 	mov.w	r3, #4294967295
 800fdb4:	bc30      	pop	{r4, r5}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	4770      	bx	lr
 800fdba:	2538      	movs	r5, #56	@ 0x38
 800fdbc:	4c2f      	ldr	r4, [pc, #188]	@ (800fe7c <arm_rfft_fast_init_f32+0x114>)
 800fdbe:	4930      	ldr	r1, [pc, #192]	@ (800fe80 <arm_rfft_fast_init_f32+0x118>)
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	4a30      	ldr	r2, [pc, #192]	@ (800fe84 <arm_rfft_fast_init_f32+0x11c>)
 800fdc4:	8185      	strh	r5, [r0, #12]
 800fdc6:	6084      	str	r4, [r0, #8]
 800fdc8:	6041      	str	r1, [r0, #4]
 800fdca:	6142      	str	r2, [r0, #20]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	bc30      	pop	{r4, r5}
 800fdd0:	4770      	bx	lr
 800fdd2:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 800fdd6:	4c2c      	ldr	r4, [pc, #176]	@ (800fe88 <arm_rfft_fast_init_f32+0x120>)
 800fdd8:	492c      	ldr	r1, [pc, #176]	@ (800fe8c <arm_rfft_fast_init_f32+0x124>)
 800fdda:	2300      	movs	r3, #0
 800fddc:	4a2c      	ldr	r2, [pc, #176]	@ (800fe90 <arm_rfft_fast_init_f32+0x128>)
 800fdde:	8185      	strh	r5, [r0, #12]
 800fde0:	6084      	str	r4, [r0, #8]
 800fde2:	6041      	str	r1, [r0, #4]
 800fde4:	6142      	str	r2, [r0, #20]
 800fde6:	4618      	mov	r0, r3
 800fde8:	bc30      	pop	{r4, r5}
 800fdea:	4770      	bx	lr
 800fdec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fdf0:	d1de      	bne.n	800fdb0 <arm_rfft_fast_init_f32+0x48>
 800fdf2:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 800fdf6:	4c27      	ldr	r4, [pc, #156]	@ (800fe94 <arm_rfft_fast_init_f32+0x12c>)
 800fdf8:	4927      	ldr	r1, [pc, #156]	@ (800fe98 <arm_rfft_fast_init_f32+0x130>)
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	4a27      	ldr	r2, [pc, #156]	@ (800fe9c <arm_rfft_fast_init_f32+0x134>)
 800fdfe:	8185      	strh	r5, [r0, #12]
 800fe00:	6084      	str	r4, [r0, #8]
 800fe02:	6041      	str	r1, [r0, #4]
 800fe04:	6142      	str	r2, [r0, #20]
 800fe06:	4618      	mov	r0, r3
 800fe08:	bc30      	pop	{r4, r5}
 800fe0a:	4770      	bx	lr
 800fe0c:	2530      	movs	r5, #48	@ 0x30
 800fe0e:	4c24      	ldr	r4, [pc, #144]	@ (800fea0 <arm_rfft_fast_init_f32+0x138>)
 800fe10:	4924      	ldr	r1, [pc, #144]	@ (800fea4 <arm_rfft_fast_init_f32+0x13c>)
 800fe12:	2300      	movs	r3, #0
 800fe14:	4a24      	ldr	r2, [pc, #144]	@ (800fea8 <arm_rfft_fast_init_f32+0x140>)
 800fe16:	8185      	strh	r5, [r0, #12]
 800fe18:	6084      	str	r4, [r0, #8]
 800fe1a:	6041      	str	r1, [r0, #4]
 800fe1c:	6142      	str	r2, [r0, #20]
 800fe1e:	4618      	mov	r0, r3
 800fe20:	bc30      	pop	{r4, r5}
 800fe22:	4770      	bx	lr
 800fe24:	2514      	movs	r5, #20
 800fe26:	4c21      	ldr	r4, [pc, #132]	@ (800feac <arm_rfft_fast_init_f32+0x144>)
 800fe28:	4921      	ldr	r1, [pc, #132]	@ (800feb0 <arm_rfft_fast_init_f32+0x148>)
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	4a21      	ldr	r2, [pc, #132]	@ (800feb4 <arm_rfft_fast_init_f32+0x14c>)
 800fe2e:	8185      	strh	r5, [r0, #12]
 800fe30:	6084      	str	r4, [r0, #8]
 800fe32:	6041      	str	r1, [r0, #4]
 800fe34:	6142      	str	r2, [r0, #20]
 800fe36:	4618      	mov	r0, r3
 800fe38:	bc30      	pop	{r4, r5}
 800fe3a:	4770      	bx	lr
 800fe3c:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 800fe40:	4c1d      	ldr	r4, [pc, #116]	@ (800feb8 <arm_rfft_fast_init_f32+0x150>)
 800fe42:	491e      	ldr	r1, [pc, #120]	@ (800febc <arm_rfft_fast_init_f32+0x154>)
 800fe44:	2300      	movs	r3, #0
 800fe46:	4a1e      	ldr	r2, [pc, #120]	@ (800fec0 <arm_rfft_fast_init_f32+0x158>)
 800fe48:	8185      	strh	r5, [r0, #12]
 800fe4a:	6084      	str	r4, [r0, #8]
 800fe4c:	6041      	str	r1, [r0, #4]
 800fe4e:	6142      	str	r2, [r0, #20]
 800fe50:	4618      	mov	r0, r3
 800fe52:	bc30      	pop	{r4, r5}
 800fe54:	4770      	bx	lr
 800fe56:	25d0      	movs	r5, #208	@ 0xd0
 800fe58:	4c1a      	ldr	r4, [pc, #104]	@ (800fec4 <arm_rfft_fast_init_f32+0x15c>)
 800fe5a:	491b      	ldr	r1, [pc, #108]	@ (800fec8 <arm_rfft_fast_init_f32+0x160>)
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	4a1b      	ldr	r2, [pc, #108]	@ (800fecc <arm_rfft_fast_init_f32+0x164>)
 800fe60:	8185      	strh	r5, [r0, #12]
 800fe62:	6084      	str	r4, [r0, #8]
 800fe64:	6041      	str	r1, [r0, #4]
 800fe66:	6142      	str	r2, [r0, #20]
 800fe68:	4618      	mov	r0, r3
 800fe6a:	bc30      	pop	{r4, r5}
 800fe6c:	4770      	bx	lr
 800fe6e:	bf00      	nop
 800fe70:	080d1180 	.word	0x080d1180
 800fe74:	080c2378 	.word	0x080c2378
 800fe78:	080c84e8 	.word	0x080c84e8
 800fe7c:	080c6478 	.word	0x080c6478
 800fe80:	080d2f40 	.word	0x080d2f40
 800fe84:	080d5430 	.word	0x080d5430
 800fe88:	080cee68 	.word	0x080cee68
 800fe8c:	080ccd68 	.word	0x080ccd68
 800fe90:	080c64e8 	.word	0x080c64e8
 800fe94:	080d50c0 	.word	0x080d50c0
 800fe98:	080cc4e8 	.word	0x080cc4e8
 800fe9c:	080d3140 	.word	0x080d3140
 800fea0:	080cfd20 	.word	0x080cfd20
 800fea4:	080ced68 	.word	0x080ced68
 800fea8:	080c6378 	.word	0x080c6378
 800feac:	080cfc78 	.word	0x080cfc78
 800feb0:	080ccce8 	.word	0x080ccce8
 800feb4:	080cfca0 	.word	0x080cfca0
 800feb8:	080d3940 	.word	0x080d3940
 800febc:	080d0180 	.word	0x080d0180
 800fec0:	080d3cc0 	.word	0x080d3cc0
 800fec4:	080d5630 	.word	0x080d5630
 800fec8:	080cfd80 	.word	0x080cfd80
 800fecc:	080d4cc0 	.word	0x080d4cc0

0800fed0 <arm_rfft_fast_f32>:
 800fed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fed4:	8a05      	ldrh	r5, [r0, #16]
 800fed6:	4606      	mov	r6, r0
 800fed8:	4617      	mov	r7, r2
 800feda:	460c      	mov	r4, r1
 800fedc:	086d      	lsrs	r5, r5, #1
 800fede:	8005      	strh	r5, [r0, #0]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d15e      	bne.n	800ffa2 <arm_rfft_fast_f32+0xd2>
 800fee4:	461a      	mov	r2, r3
 800fee6:	2301      	movs	r3, #1
 800fee8:	f000 fbde 	bl	80106a8 <arm_cfft_f32>
 800feec:	edd4 7a00 	vldr	s15, [r4]
 800fef0:	ed94 7a01 	vldr	s14, [r4, #4]
 800fef4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800fef8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fefc:	8832      	ldrh	r2, [r6, #0]
 800fefe:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ff02:	6975      	ldr	r5, [r6, #20]
 800ff04:	3a01      	subs	r2, #1
 800ff06:	eeb0 3a46 	vmov.f32	s6, s12
 800ff0a:	3510      	adds	r5, #16
 800ff0c:	f107 0610 	add.w	r6, r7, #16
 800ff10:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ff14:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800ff18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff1c:	f104 0310 	add.w	r3, r4, #16
 800ff20:	3808      	subs	r0, #8
 800ff22:	ee26 7a86 	vmul.f32	s14, s13, s12
 800ff26:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ff2a:	ed87 7a00 	vstr	s14, [r7]
 800ff2e:	edc7 7a01 	vstr	s15, [r7, #4]
 800ff32:	ed90 7a02 	vldr	s14, [r0, #8]
 800ff36:	3a01      	subs	r2, #1
 800ff38:	ed53 6a02 	vldr	s13, [r3, #-8]
 800ff3c:	f1a0 0008 	sub.w	r0, r0, #8
 800ff40:	ed15 6a02 	vldr	s12, [r5, #-8]
 800ff44:	f103 0308 	add.w	r3, r3, #8
 800ff48:	ee77 7a66 	vsub.f32	s15, s14, s13
 800ff4c:	edd0 3a05 	vldr	s7, [r0, #20]
 800ff50:	ed13 5a03 	vldr	s10, [r3, #-12]
 800ff54:	ee77 4a26 	vadd.f32	s9, s14, s13
 800ff58:	ed55 5a01 	vldr	s11, [r5, #-4]
 800ff5c:	f106 0608 	add.w	r6, r6, #8
 800ff60:	ee66 6a27 	vmul.f32	s13, s12, s15
 800ff64:	f105 0508 	add.w	r5, r5, #8
 800ff68:	ee33 4a85 	vadd.f32	s8, s7, s10
 800ff6c:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800ff70:	ee35 5a63 	vsub.f32	s10, s10, s7
 800ff74:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ff78:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ff7c:	ee77 7a05 	vadd.f32	s15, s14, s10
 800ff80:	ee65 5a84 	vmul.f32	s11, s11, s8
 800ff84:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ff88:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800ff8c:	ee67 7a83 	vmul.f32	s15, s15, s6
 800ff90:	ee27 7a03 	vmul.f32	s14, s14, s6
 800ff94:	ed46 7a03 	vstr	s15, [r6, #-12]
 800ff98:	ed06 7a04 	vstr	s14, [r6, #-16]
 800ff9c:	d1c9      	bne.n	800ff32 <arm_rfft_fast_f32+0x62>
 800ff9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffa2:	edd1 7a00 	vldr	s15, [r1]
 800ffa6:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800ffaa:	edd1 6a01 	vldr	s13, [r1, #4]
 800ffae:	1e68      	subs	r0, r5, #1
 800ffb0:	6975      	ldr	r5, [r6, #20]
 800ffb2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ffb6:	00c1      	lsls	r1, r0, #3
 800ffb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ffbc:	ee27 7a23 	vmul.f32	s14, s14, s7
 800ffc0:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800ffc4:	ed82 7a00 	vstr	s14, [r2]
 800ffc8:	edc2 7a01 	vstr	s15, [r2, #4]
 800ffcc:	b3e0      	cbz	r0, 8010048 <arm_rfft_fast_f32+0x178>
 800ffce:	3908      	subs	r1, #8
 800ffd0:	f104 0210 	add.w	r2, r4, #16
 800ffd4:	3510      	adds	r5, #16
 800ffd6:	440c      	add	r4, r1
 800ffd8:	f107 0110 	add.w	r1, r7, #16
 800ffdc:	ed94 7a02 	vldr	s14, [r4, #8]
 800ffe0:	3801      	subs	r0, #1
 800ffe2:	ed52 6a02 	vldr	s13, [r2, #-8]
 800ffe6:	f1a4 0408 	sub.w	r4, r4, #8
 800ffea:	ed15 6a02 	vldr	s12, [r5, #-8]
 800ffee:	f102 0208 	add.w	r2, r2, #8
 800fff2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800fff6:	ed94 4a05 	vldr	s8, [r4, #20]
 800fffa:	ed12 5a03 	vldr	s10, [r2, #-12]
 800fffe:	ee77 6a26 	vadd.f32	s13, s14, s13
 8010002:	ed55 5a01 	vldr	s11, [r5, #-4]
 8010006:	f101 0108 	add.w	r1, r1, #8
 801000a:	ee26 3a27 	vmul.f32	s6, s12, s15
 801000e:	f105 0508 	add.w	r5, r5, #8
 8010012:	ee74 4a05 	vadd.f32	s9, s8, s10
 8010016:	ee25 7aa7 	vmul.f32	s14, s11, s15
 801001a:	ee35 5a44 	vsub.f32	s10, s10, s8
 801001e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8010022:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010026:	ee77 7a05 	vadd.f32	s15, s14, s10
 801002a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801002e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010032:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8010036:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801003a:	ee27 7a23 	vmul.f32	s14, s14, s7
 801003e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8010042:	ed01 7a04 	vstr	s14, [r1, #-16]
 8010046:	d1c9      	bne.n	800ffdc <arm_rfft_fast_f32+0x10c>
 8010048:	461a      	mov	r2, r3
 801004a:	4639      	mov	r1, r7
 801004c:	4630      	mov	r0, r6
 801004e:	2301      	movs	r3, #1
 8010050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010054:	f000 bb28 	b.w	80106a8 <arm_cfft_f32>

08010058 <arm_cfft_radix8by2_f32>:
 8010058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801005c:	4607      	mov	r7, r0
 801005e:	4608      	mov	r0, r1
 8010060:	ed2d 8b06 	vpush	{d8-d10}
 8010064:	f8b7 e000 	ldrh.w	lr, [r7]
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801006e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8010072:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8010076:	f000 80b0 	beq.w	80101da <arm_cfft_radix8by2_f32+0x182>
 801007a:	008b      	lsls	r3, r1, #2
 801007c:	3210      	adds	r2, #16
 801007e:	f100 0610 	add.w	r6, r0, #16
 8010082:	f108 0510 	add.w	r5, r8, #16
 8010086:	3310      	adds	r3, #16
 8010088:	18c4      	adds	r4, r0, r3
 801008a:	4443      	add	r3, r8
 801008c:	ed55 6a04 	vldr	s13, [r5, #-16]
 8010090:	f1be 0e01 	subs.w	lr, lr, #1
 8010094:	ed56 4a04 	vldr	s9, [r6, #-16]
 8010098:	f104 0410 	add.w	r4, r4, #16
 801009c:	ed15 7a03 	vldr	s14, [r5, #-12]
 80100a0:	f106 0610 	add.w	r6, r6, #16
 80100a4:	ee74 9aa6 	vadd.f32	s19, s9, s13
 80100a8:	ed55 7a02 	vldr	s15, [r5, #-8]
 80100ac:	ed55 2a01 	vldr	s5, [r5, #-4]
 80100b0:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80100b4:	ed53 0a04 	vldr	s1, [r3, #-16]
 80100b8:	f102 0210 	add.w	r2, r2, #16
 80100bc:	ed13 5a03 	vldr	s10, [r3, #-12]
 80100c0:	f105 0510 	add.w	r5, r5, #16
 80100c4:	ed13 3a02 	vldr	s6, [r3, #-8]
 80100c8:	f103 0310 	add.w	r3, r3, #16
 80100cc:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 80100d0:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 80100d4:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 80100d8:	ee33 8a83 	vadd.f32	s16, s7, s6
 80100dc:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 80100e0:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 80100e4:	ee34 0a06 	vadd.f32	s0, s8, s12
 80100e8:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 80100ec:	ee76 aa87 	vadd.f32	s21, s13, s14
 80100f0:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 80100f4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80100f8:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 80100fc:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8010100:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 8010104:	ee71 8a05 	vadd.f32	s17, s2, s10
 8010108:	ee31 aaa7 	vadd.f32	s20, s3, s15
 801010c:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 8010110:	ee72 9a22 	vadd.f32	s19, s4, s5
 8010114:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8010118:	ee35 5a41 	vsub.f32	s10, s10, s2
 801011c:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 8010120:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 8010124:	ee36 6a44 	vsub.f32	s12, s12, s8
 8010128:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 801012c:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8010130:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 8010134:	ee72 7a62 	vsub.f32	s15, s4, s5
 8010138:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 801013c:	ee73 2a63 	vsub.f32	s5, s6, s7
 8010140:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 8010144:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 8010148:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 801014c:	ee24 3a84 	vmul.f32	s6, s9, s8
 8010150:	ee27 2a26 	vmul.f32	s4, s14, s13
 8010154:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8010158:	ee65 3aa6 	vmul.f32	s7, s11, s13
 801015c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010160:	ee65 5a84 	vmul.f32	s11, s11, s8
 8010164:	ee65 6a26 	vmul.f32	s13, s10, s13
 8010168:	ee25 5a04 	vmul.f32	s10, s10, s8
 801016c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010170:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8010174:	ee33 4a02 	vadd.f32	s8, s6, s4
 8010178:	ee33 5ac5 	vsub.f32	s10, s7, s10
 801017c:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 8010180:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 8010184:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 8010188:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 801018c:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 8010190:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8010194:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8010198:	ee27 4a87 	vmul.f32	s8, s15, s14
 801019c:	ee61 5a87 	vmul.f32	s11, s3, s14
 80101a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80101a4:	ee22 5a87 	vmul.f32	s10, s5, s14
 80101a8:	ee26 7a07 	vmul.f32	s14, s12, s14
 80101ac:	ee26 6a26 	vmul.f32	s12, s12, s13
 80101b0:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80101b4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80101b8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80101bc:	ee35 6a46 	vsub.f32	s12, s10, s12
 80101c0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80101c4:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 80101c8:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 80101cc:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 80101d0:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 80101d4:	f47f af5a 	bne.w	801008c <arm_cfft_radix8by2_f32+0x34>
 80101d8:	687a      	ldr	r2, [r7, #4]
 80101da:	b28c      	uxth	r4, r1
 80101dc:	2302      	movs	r3, #2
 80101de:	4621      	mov	r1, r4
 80101e0:	f000 fbc2 	bl	8010968 <arm_radix8_butterfly_f32>
 80101e4:	4621      	mov	r1, r4
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	4640      	mov	r0, r8
 80101ea:	2302      	movs	r3, #2
 80101ec:	ecbd 8b06 	vpop	{d8-d10}
 80101f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101f4:	f000 bbb8 	b.w	8010968 <arm_radix8_butterfly_f32>

080101f8 <arm_cfft_radix8by4_f32>:
 80101f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101fc:	ed2d 8b06 	vpush	{d8-d10}
 8010200:	8804      	ldrh	r4, [r0, #0]
 8010202:	b08f      	sub	sp, #60	@ 0x3c
 8010204:	ed91 6a00 	vldr	s12, [r1]
 8010208:	460a      	mov	r2, r1
 801020a:	0864      	lsrs	r4, r4, #1
 801020c:	ed91 7a01 	vldr	s14, [r1, #4]
 8010210:	9101      	str	r1, [sp, #4]
 8010212:	00a3      	lsls	r3, r4, #2
 8010214:	6841      	ldr	r1, [r0, #4]
 8010216:	0864      	lsrs	r4, r4, #1
 8010218:	900c      	str	r0, [sp, #48]	@ 0x30
 801021a:	9205      	str	r2, [sp, #20]
 801021c:	f101 0610 	add.w	r6, r1, #16
 8010220:	4625      	mov	r5, r4
 8010222:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010224:	f101 0408 	add.w	r4, r1, #8
 8010228:	9602      	str	r6, [sp, #8]
 801022a:	9407      	str	r4, [sp, #28]
 801022c:	18d4      	adds	r4, r2, r3
 801022e:	1eaa      	subs	r2, r5, #2
 8010230:	f101 0518 	add.w	r5, r1, #24
 8010234:	18e0      	adds	r0, r4, r3
 8010236:	edd4 4a00 	vldr	s9, [r4]
 801023a:	ed94 4a01 	vldr	s8, [r4, #4]
 801023e:	46a6      	mov	lr, r4
 8010240:	edd0 6a00 	vldr	s13, [r0]
 8010244:	18c7      	adds	r7, r0, r3
 8010246:	edd0 7a01 	vldr	s15, [r0, #4]
 801024a:	46a0      	mov	r8, r4
 801024c:	ee76 5a26 	vadd.f32	s11, s12, s13
 8010250:	ed97 5a00 	vldr	s10, [r7]
 8010254:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010258:	4604      	mov	r4, r0
 801025a:	9506      	str	r5, [sp, #24]
 801025c:	4605      	mov	r5, r0
 801025e:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8010262:	900a      	str	r0, [sp, #40]	@ 0x28
 8010264:	9801      	ldr	r0, [sp, #4]
 8010266:	ee37 6a27 	vadd.f32	s12, s14, s15
 801026a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801026e:	ed97 3a01 	vldr	s6, [r7, #4]
 8010272:	ee72 2a85 	vadd.f32	s5, s5, s10
 8010276:	46bc      	mov	ip, r7
 8010278:	ee76 3a84 	vadd.f32	s7, s13, s8
 801027c:	9704      	str	r7, [sp, #16]
 801027e:	ee36 7a44 	vsub.f32	s14, s12, s8
 8010282:	f8cd e00c 	str.w	lr, [sp, #12]
 8010286:	ee12 9a90 	vmov	r9, s5
 801028a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 801028e:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8010292:	1f3e      	subs	r6, r7, #4
 8010294:	f840 9b08 	str.w	r9, [r0], #8
 8010298:	ee37 4ae4 	vsub.f32	s8, s15, s9
 801029c:	edde 2a01 	vldr	s5, [lr, #4]
 80102a0:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80102a4:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80102a8:	eddc 4a01 	vldr	s9, [ip, #4]
 80102ac:	ee36 6a22 	vadd.f32	s12, s12, s5
 80102b0:	9001      	str	r0, [sp, #4]
 80102b2:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80102b6:	9805      	ldr	r0, [sp, #20]
 80102b8:	ee13 9a90 	vmov	r9, s7
 80102bc:	ee37 7a43 	vsub.f32	s14, s14, s6
 80102c0:	ee36 6a24 	vadd.f32	s12, s12, s9
 80102c4:	f1ae 0704 	sub.w	r7, lr, #4
 80102c8:	ee74 4a05 	vadd.f32	s9, s8, s10
 80102cc:	ee76 6a83 	vadd.f32	s13, s13, s6
 80102d0:	ed80 6a01 	vstr	s12, [r0, #4]
 80102d4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80102d8:	f848 9b08 	str.w	r9, [r8], #8
 80102dc:	edce 4a01 	vstr	s9, [lr, #4]
 80102e0:	ee15 ea90 	vmov	lr, s11
 80102e4:	f844 eb08 	str.w	lr, [r4], #8
 80102e8:	ee16 ea90 	vmov	lr, s13
 80102ec:	9408      	str	r4, [sp, #32]
 80102ee:	462c      	mov	r4, r5
 80102f0:	ed85 7a01 	vstr	s14, [r5, #4]
 80102f4:	9d04      	ldr	r5, [sp, #16]
 80102f6:	f84c eb08 	str.w	lr, [ip], #8
 80102fa:	edc5 7a01 	vstr	s15, [r5, #4]
 80102fe:	0855      	lsrs	r5, r2, #1
 8010300:	9509      	str	r5, [sp, #36]	@ 0x24
 8010302:	f000 8130 	beq.w	8010566 <arm_cfft_radix8by4_f32+0x36e>
 8010306:	9805      	ldr	r0, [sp, #20]
 8010308:	3b08      	subs	r3, #8
 801030a:	46ab      	mov	fp, r5
 801030c:	f1a4 020c 	sub.w	r2, r4, #12
 8010310:	f100 0510 	add.w	r5, r0, #16
 8010314:	f101 0920 	add.w	r9, r1, #32
 8010318:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 801031c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8010320:	4433      	add	r3, r6
 8010322:	3410      	adds	r4, #16
 8010324:	4660      	mov	r0, ip
 8010326:	4641      	mov	r1, r8
 8010328:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 801032c:	ed54 6a02 	vldr	s13, [r4, #-8]
 8010330:	f1bb 0b01 	subs.w	fp, fp, #1
 8010334:	ed55 5a02 	vldr	s11, [r5, #-8]
 8010338:	f10a 0a08 	add.w	sl, sl, #8
 801033c:	edd1 7a00 	vldr	s15, [r1]
 8010340:	f105 0508 	add.w	r5, r5, #8
 8010344:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8010348:	edd0 2a00 	vldr	s5, [r0]
 801034c:	ed14 7a01 	vldr	s14, [r4, #-4]
 8010350:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8010354:	ed55 6a03 	vldr	s13, [r5, #-12]
 8010358:	f1a2 0208 	sub.w	r2, r2, #8
 801035c:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8010360:	ed90 2a01 	vldr	s4, [r0, #4]
 8010364:	ee36 5a87 	vadd.f32	s10, s13, s14
 8010368:	ed91 6a01 	vldr	s12, [r1, #4]
 801036c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010370:	f109 0910 	add.w	r9, r9, #16
 8010374:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8010378:	f104 0408 	add.w	r4, r4, #8
 801037c:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8010380:	f10e 0e18 	add.w	lr, lr, #24
 8010384:	ee37 3a67 	vsub.f32	s6, s14, s15
 8010388:	f1a3 0308 	sub.w	r3, r3, #8
 801038c:	ed45 6a04 	vstr	s13, [r5, #-16]
 8010390:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010394:	edd1 6a01 	vldr	s13, [r1, #4]
 8010398:	ee75 1a86 	vadd.f32	s3, s11, s12
 801039c:	edd0 4a01 	vldr	s9, [r0, #4]
 80103a0:	ee33 3a22 	vadd.f32	s6, s6, s5
 80103a4:	ee75 6a26 	vadd.f32	s13, s10, s13
 80103a8:	ee35 5a46 	vsub.f32	s10, s10, s12
 80103ac:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80103b0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80103b4:	ee71 1ac2 	vsub.f32	s3, s3, s4
 80103b8:	ee35 5a42 	vsub.f32	s10, s10, s4
 80103bc:	ed45 6a03 	vstr	s13, [r5, #-12]
 80103c0:	ee36 2a02 	vadd.f32	s4, s12, s4
 80103c4:	edd6 7a00 	vldr	s15, [r6]
 80103c8:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80103cc:	ed97 1a00 	vldr	s2, [r7]
 80103d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80103d4:	ed92 8a04 	vldr	s16, [r2, #16]
 80103d8:	ee71 8a27 	vadd.f32	s17, s2, s15
 80103dc:	ed93 aa04 	vldr	s20, [r3, #16]
 80103e0:	ed16 7a01 	vldr	s14, [r6, #-4]
 80103e4:	ee71 7a67 	vsub.f32	s15, s2, s15
 80103e8:	ed57 0a01 	vldr	s1, [r7, #-4]
 80103ec:	ee38 1a4a 	vsub.f32	s2, s16, s20
 80103f0:	ee38 6a88 	vadd.f32	s12, s17, s16
 80103f4:	edd3 9a03 	vldr	s19, [r3, #12]
 80103f8:	ee30 0a87 	vadd.f32	s0, s1, s14
 80103fc:	ed92 9a03 	vldr	s18, [r2, #12]
 8010400:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8010404:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8010408:	ee30 7ac7 	vsub.f32	s14, s1, s14
 801040c:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8010410:	ee16 ca10 	vmov	ip, s12
 8010414:	ee30 6a49 	vsub.f32	s12, s0, s18
 8010418:	ee77 4a01 	vadd.f32	s9, s14, s2
 801041c:	f847 c908 	str.w	ip, [r7], #-8
 8010420:	ee34 4a29 	vadd.f32	s8, s8, s19
 8010424:	edd2 8a03 	vldr	s17, [r2, #12]
 8010428:	ee39 9ac9 	vsub.f32	s18, s19, s18
 801042c:	ed93 8a03 	vldr	s16, [r3, #12]
 8010430:	ee71 0a47 	vsub.f32	s1, s2, s14
 8010434:	ee30 0a28 	vadd.f32	s0, s0, s17
 8010438:	ee39 1a67 	vsub.f32	s2, s18, s15
 801043c:	ee36 6a69 	vsub.f32	s12, s12, s19
 8010440:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010444:	ee75 5aca 	vsub.f32	s11, s11, s20
 8010448:	ed87 0a01 	vstr	s0, [r7, #4]
 801044c:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8010450:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8010454:	ee21 8a80 	vmul.f32	s16, s3, s0
 8010458:	ee23 7a26 	vmul.f32	s14, s6, s13
 801045c:	ee64 7a26 	vmul.f32	s15, s8, s13
 8010460:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8010464:	ee24 4a00 	vmul.f32	s8, s8, s0
 8010468:	ee23 3a00 	vmul.f32	s6, s6, s0
 801046c:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8010470:	ee24 0a80 	vmul.f32	s0, s9, s0
 8010474:	ee38 7a07 	vadd.f32	s14, s16, s14
 8010478:	ee76 6a84 	vadd.f32	s13, s13, s8
 801047c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010480:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010484:	ee17 ca10 	vmov	ip, s14
 8010488:	f841 cb08 	str.w	ip, [r1], #8
 801048c:	ed01 3a01 	vstr	s6, [r1, #-4]
 8010490:	ed82 0a04 	vstr	s0, [r2, #16]
 8010494:	edc2 6a03 	vstr	s13, [r2, #12]
 8010498:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 801049c:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 80104a0:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 80104a4:	ee23 4aa6 	vmul.f32	s8, s7, s13
 80104a8:	ee65 4a27 	vmul.f32	s9, s10, s15
 80104ac:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80104b0:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80104b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80104b8:	ee25 5a26 	vmul.f32	s10, s10, s13
 80104bc:	ee66 6a26 	vmul.f32	s13, s12, s13
 80104c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104c4:	ee34 6a24 	vadd.f32	s12, s8, s9
 80104c8:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80104cc:	ee35 5a63 	vsub.f32	s10, s10, s7
 80104d0:	ee17 ca90 	vmov	ip, s15
 80104d4:	ed04 6a04 	vstr	s12, [r4, #-16]
 80104d8:	ed04 5a03 	vstr	s10, [r4, #-12]
 80104dc:	f846 c908 	str.w	ip, [r6], #-8
 80104e0:	edc6 6a01 	vstr	s13, [r6, #4]
 80104e4:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 80104e8:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 80104ec:	ee62 5a27 	vmul.f32	s11, s4, s15
 80104f0:	ee22 6a87 	vmul.f32	s12, s5, s14
 80104f4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80104f8:	ee62 2aa7 	vmul.f32	s5, s5, s15
 80104fc:	ee61 6a07 	vmul.f32	s13, s2, s14
 8010500:	ee20 7a87 	vmul.f32	s14, s1, s14
 8010504:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8010508:	ee61 7a27 	vmul.f32	s15, s2, s15
 801050c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8010510:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8010514:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8010518:	ee77 7a27 	vadd.f32	s15, s14, s15
 801051c:	ee16 ca10 	vmov	ip, s12
 8010520:	f840 cb08 	str.w	ip, [r0], #8
 8010524:	ed40 2a01 	vstr	s5, [r0, #-4]
 8010528:	edc3 0a04 	vstr	s1, [r3, #16]
 801052c:	edc3 7a03 	vstr	s15, [r3, #12]
 8010530:	f47f aefc 	bne.w	801032c <arm_cfft_radix8by4_f32+0x134>
 8010534:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010536:	9802      	ldr	r0, [sp, #8]
 8010538:	00cb      	lsls	r3, r1, #3
 801053a:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 801053e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8010542:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8010546:	4498      	add	r8, r3
 8010548:	449c      	add	ip, r3
 801054a:	9102      	str	r1, [sp, #8]
 801054c:	9901      	ldr	r1, [sp, #4]
 801054e:	4419      	add	r1, r3
 8010550:	9101      	str	r1, [sp, #4]
 8010552:	9907      	ldr	r1, [sp, #28]
 8010554:	4419      	add	r1, r3
 8010556:	9107      	str	r1, [sp, #28]
 8010558:	9908      	ldr	r1, [sp, #32]
 801055a:	4419      	add	r1, r3
 801055c:	9b06      	ldr	r3, [sp, #24]
 801055e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010562:	9108      	str	r1, [sp, #32]
 8010564:	9306      	str	r3, [sp, #24]
 8010566:	9a01      	ldr	r2, [sp, #4]
 8010568:	2304      	movs	r3, #4
 801056a:	9e08      	ldr	r6, [sp, #32]
 801056c:	edd2 7a00 	vldr	s15, [r2]
 8010570:	ed96 7a00 	vldr	s14, [r6]
 8010574:	edd8 2a00 	vldr	s5, [r8]
 8010578:	ee77 5a87 	vadd.f32	s11, s15, s14
 801057c:	ed9c 3a00 	vldr	s6, [ip]
 8010580:	ed92 6a01 	vldr	s12, [r2, #4]
 8010584:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010588:	edd6 6a01 	vldr	s13, [r6, #4]
 801058c:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8010590:	ed9c 2a01 	vldr	s4, [ip, #4]
 8010594:	ee36 5a26 	vadd.f32	s10, s12, s13
 8010598:	edd8 7a01 	vldr	s15, [r8, #4]
 801059c:	ee76 6a66 	vsub.f32	s13, s12, s13
 80105a0:	9d02      	ldr	r5, [sp, #8]
 80105a2:	ee34 6a83 	vadd.f32	s12, s9, s6
 80105a6:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80105aa:	ee37 4a27 	vadd.f32	s8, s14, s15
 80105ae:	9805      	ldr	r0, [sp, #20]
 80105b0:	ee76 4ae2 	vsub.f32	s9, s13, s5
 80105b4:	4621      	mov	r1, r4
 80105b6:	ed82 6a00 	vstr	s12, [r2]
 80105ba:	ee35 6ae2 	vsub.f32	s12, s11, s5
 80105be:	edd8 3a01 	vldr	s7, [r8, #4]
 80105c2:	ee75 5a67 	vsub.f32	s11, s10, s15
 80105c6:	eddc 1a01 	vldr	s3, [ip, #4]
 80105ca:	ee34 4a42 	vsub.f32	s8, s8, s4
 80105ce:	ee75 3a23 	vadd.f32	s7, s10, s7
 80105d2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80105d6:	ee76 6aa2 	vadd.f32	s13, s13, s5
 80105da:	ee33 5aa1 	vadd.f32	s10, s7, s3
 80105de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80105e2:	ee36 6a43 	vsub.f32	s12, s12, s6
 80105e6:	ed82 5a01 	vstr	s10, [r2, #4]
 80105ea:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80105ee:	9a07      	ldr	r2, [sp, #28]
 80105f0:	ee77 7a02 	vadd.f32	s15, s14, s4
 80105f4:	ee36 7ac3 	vsub.f32	s14, s13, s6
 80105f8:	edd2 2a00 	vldr	s5, [r2]
 80105fc:	ed92 5a01 	vldr	s10, [r2, #4]
 8010600:	ee64 3a22 	vmul.f32	s7, s8, s5
 8010604:	ee24 4a05 	vmul.f32	s8, s8, s10
 8010608:	ee24 5a85 	vmul.f32	s10, s9, s10
 801060c:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8010610:	ee33 5a85 	vadd.f32	s10, s7, s10
 8010614:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010618:	ed88 5a00 	vstr	s10, [r8]
 801061c:	edc8 4a01 	vstr	s9, [r8, #4]
 8010620:	edd5 4a01 	vldr	s9, [r5, #4]
 8010624:	edd5 6a00 	vldr	s13, [r5]
 8010628:	9d06      	ldr	r5, [sp, #24]
 801062a:	ee26 5a26 	vmul.f32	s10, s12, s13
 801062e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010632:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8010636:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801063a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801063e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8010642:	ed86 6a01 	vstr	s12, [r6, #4]
 8010646:	edc6 5a00 	vstr	s11, [r6]
 801064a:	edd5 5a01 	vldr	s11, [r5, #4]
 801064e:	edd5 6a00 	vldr	s13, [r5]
 8010652:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010654:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8010658:	ee67 6a26 	vmul.f32	s13, s14, s13
 801065c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010660:	ee27 7a25 	vmul.f32	s14, s14, s11
 8010664:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010668:	ee36 7a07 	vadd.f32	s14, s12, s14
 801066c:	edcc 7a01 	vstr	s15, [ip, #4]
 8010670:	ed8c 7a00 	vstr	s14, [ip]
 8010674:	6872      	ldr	r2, [r6, #4]
 8010676:	f000 f977 	bl	8010968 <arm_radix8_butterfly_f32>
 801067a:	9803      	ldr	r0, [sp, #12]
 801067c:	4621      	mov	r1, r4
 801067e:	6872      	ldr	r2, [r6, #4]
 8010680:	2304      	movs	r3, #4
 8010682:	f000 f971 	bl	8010968 <arm_radix8_butterfly_f32>
 8010686:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010688:	4621      	mov	r1, r4
 801068a:	6872      	ldr	r2, [r6, #4]
 801068c:	2304      	movs	r3, #4
 801068e:	f000 f96b 	bl	8010968 <arm_radix8_butterfly_f32>
 8010692:	4621      	mov	r1, r4
 8010694:	6872      	ldr	r2, [r6, #4]
 8010696:	2304      	movs	r3, #4
 8010698:	9804      	ldr	r0, [sp, #16]
 801069a:	b00f      	add	sp, #60	@ 0x3c
 801069c:	ecbd 8b06 	vpop	{d8-d10}
 80106a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106a4:	f000 b960 	b.w	8010968 <arm_radix8_butterfly_f32>

080106a8 <arm_cfft_f32>:
 80106a8:	2a01      	cmp	r2, #1
 80106aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106ae:	4606      	mov	r6, r0
 80106b0:	4617      	mov	r7, r2
 80106b2:	460c      	mov	r4, r1
 80106b4:	4698      	mov	r8, r3
 80106b6:	8805      	ldrh	r5, [r0, #0]
 80106b8:	d053      	beq.n	8010762 <arm_cfft_f32+0xba>
 80106ba:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80106be:	d04b      	beq.n	8010758 <arm_cfft_f32+0xb0>
 80106c0:	d916      	bls.n	80106f0 <arm_cfft_f32+0x48>
 80106c2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80106c6:	d01a      	beq.n	80106fe <arm_cfft_f32+0x56>
 80106c8:	d95a      	bls.n	8010780 <arm_cfft_f32+0xd8>
 80106ca:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80106ce:	d043      	beq.n	8010758 <arm_cfft_f32+0xb0>
 80106d0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80106d4:	d105      	bne.n	80106e2 <arm_cfft_f32+0x3a>
 80106d6:	2301      	movs	r3, #1
 80106d8:	6872      	ldr	r2, [r6, #4]
 80106da:	4629      	mov	r1, r5
 80106dc:	4620      	mov	r0, r4
 80106de:	f000 f943 	bl	8010968 <arm_radix8_butterfly_f32>
 80106e2:	f1b8 0f00 	cmp.w	r8, #0
 80106e6:	d111      	bne.n	801070c <arm_cfft_f32+0x64>
 80106e8:	2f01      	cmp	r7, #1
 80106ea:	d016      	beq.n	801071a <arm_cfft_f32+0x72>
 80106ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106f0:	2d20      	cmp	r5, #32
 80106f2:	d031      	beq.n	8010758 <arm_cfft_f32+0xb0>
 80106f4:	d948      	bls.n	8010788 <arm_cfft_f32+0xe0>
 80106f6:	2d40      	cmp	r5, #64	@ 0x40
 80106f8:	d0ed      	beq.n	80106d6 <arm_cfft_f32+0x2e>
 80106fa:	2d80      	cmp	r5, #128	@ 0x80
 80106fc:	d1f1      	bne.n	80106e2 <arm_cfft_f32+0x3a>
 80106fe:	4621      	mov	r1, r4
 8010700:	4630      	mov	r0, r6
 8010702:	f7ff fca9 	bl	8010058 <arm_cfft_radix8by2_f32>
 8010706:	f1b8 0f00 	cmp.w	r8, #0
 801070a:	d0ed      	beq.n	80106e8 <arm_cfft_f32+0x40>
 801070c:	68b2      	ldr	r2, [r6, #8]
 801070e:	4620      	mov	r0, r4
 8010710:	89b1      	ldrh	r1, [r6, #12]
 8010712:	f7ef fd7d 	bl	8000210 <arm_bitreversal_32>
 8010716:	2f01      	cmp	r7, #1
 8010718:	d1e8      	bne.n	80106ec <arm_cfft_f32+0x44>
 801071a:	ee07 5a90 	vmov	s15, r5
 801071e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010726:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801072a:	2d00      	cmp	r5, #0
 801072c:	d0de      	beq.n	80106ec <arm_cfft_f32+0x44>
 801072e:	f104 0108 	add.w	r1, r4, #8
 8010732:	2300      	movs	r3, #0
 8010734:	ed11 7a02 	vldr	s14, [r1, #-8]
 8010738:	3301      	adds	r3, #1
 801073a:	ed51 7a01 	vldr	s15, [r1, #-4]
 801073e:	3108      	adds	r1, #8
 8010740:	429d      	cmp	r5, r3
 8010742:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010746:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801074a:	ed01 7a04 	vstr	s14, [r1, #-16]
 801074e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8010752:	d1ef      	bne.n	8010734 <arm_cfft_f32+0x8c>
 8010754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010758:	4621      	mov	r1, r4
 801075a:	4630      	mov	r0, r6
 801075c:	f7ff fd4c 	bl	80101f8 <arm_cfft_radix8by4_f32>
 8010760:	e7bf      	b.n	80106e2 <arm_cfft_f32+0x3a>
 8010762:	b1a5      	cbz	r5, 801078e <arm_cfft_f32+0xe6>
 8010764:	f101 030c 	add.w	r3, r1, #12
 8010768:	2200      	movs	r2, #0
 801076a:	ed53 7a02 	vldr	s15, [r3, #-8]
 801076e:	3201      	adds	r2, #1
 8010770:	3308      	adds	r3, #8
 8010772:	eef1 7a67 	vneg.f32	s15, s15
 8010776:	4295      	cmp	r5, r2
 8010778:	ed43 7a04 	vstr	s15, [r3, #-16]
 801077c:	d1f5      	bne.n	801076a <arm_cfft_f32+0xc2>
 801077e:	e79c      	b.n	80106ba <arm_cfft_f32+0x12>
 8010780:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8010784:	d0a7      	beq.n	80106d6 <arm_cfft_f32+0x2e>
 8010786:	e7ac      	b.n	80106e2 <arm_cfft_f32+0x3a>
 8010788:	2d10      	cmp	r5, #16
 801078a:	d0b8      	beq.n	80106fe <arm_cfft_f32+0x56>
 801078c:	e7a9      	b.n	80106e2 <arm_cfft_f32+0x3a>
 801078e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8010792:	d896      	bhi.n	80106c2 <arm_cfft_f32+0x1a>
 8010794:	e7ac      	b.n	80106f0 <arm_cfft_f32+0x48>
 8010796:	bf00      	nop

08010798 <arm_cmplx_mag_f32>:
 8010798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801079c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80107a0:	b084      	sub	sp, #16
 80107a2:	d07f      	beq.n	80108a4 <arm_cmplx_mag_f32+0x10c>
 80107a4:	f100 0420 	add.w	r4, r0, #32
 80107a8:	f101 0510 	add.w	r5, r1, #16
 80107ac:	4646      	mov	r6, r8
 80107ae:	2700      	movs	r7, #0
 80107b0:	e05a      	b.n	8010868 <arm_cmplx_mag_f32+0xd0>
 80107b2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80107b6:	eeb4 0a40 	vcmp.f32	s0, s0
 80107ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107be:	f040 80a4 	bne.w	801090a <arm_cmplx_mag_f32+0x172>
 80107c2:	ed05 0a04 	vstr	s0, [r5, #-16]
 80107c6:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 80107ca:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 80107ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80107d2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80107d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80107da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80107de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e2:	f2c0 808f 	blt.w	8010904 <arm_cmplx_mag_f32+0x16c>
 80107e6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80107ea:	eeb4 0a40 	vcmp.f32	s0, s0
 80107ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f2:	f040 80af 	bne.w	8010954 <arm_cmplx_mag_f32+0x1bc>
 80107f6:	ed05 0a03 	vstr	s0, [r5, #-12]
 80107fa:	ed54 7a04 	vldr	s15, [r4, #-16]
 80107fe:	ed14 0a03 	vldr	s0, [r4, #-12]
 8010802:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010806:	ee20 0a00 	vmul.f32	s0, s0, s0
 801080a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801080e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010816:	db72      	blt.n	80108fe <arm_cmplx_mag_f32+0x166>
 8010818:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801081c:	eeb4 0a40 	vcmp.f32	s0, s0
 8010820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010824:	f040 808c 	bne.w	8010940 <arm_cmplx_mag_f32+0x1a8>
 8010828:	ed05 0a02 	vstr	s0, [r5, #-8]
 801082c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8010830:	ed14 0a01 	vldr	s0, [r4, #-4]
 8010834:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010838:	ee20 0a00 	vmul.f32	s0, s0, s0
 801083c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010840:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010848:	db20      	blt.n	801088c <arm_cmplx_mag_f32+0xf4>
 801084a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801084e:	eeb4 0a40 	vcmp.f32	s0, s0
 8010852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010856:	d169      	bne.n	801092c <arm_cmplx_mag_f32+0x194>
 8010858:	3e01      	subs	r6, #1
 801085a:	ed05 0a01 	vstr	s0, [r5, #-4]
 801085e:	f104 0420 	add.w	r4, r4, #32
 8010862:	f105 0510 	add.w	r5, r5, #16
 8010866:	d019      	beq.n	801089c <arm_cmplx_mag_f32+0x104>
 8010868:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 801086c:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 8010870:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010874:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010878:	ee77 7a80 	vadd.f32	s15, s15, s0
 801087c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010884:	da95      	bge.n	80107b2 <arm_cmplx_mag_f32+0x1a>
 8010886:	f845 7c10 	str.w	r7, [r5, #-16]
 801088a:	e79c      	b.n	80107c6 <arm_cmplx_mag_f32+0x2e>
 801088c:	3e01      	subs	r6, #1
 801088e:	f845 7c04 	str.w	r7, [r5, #-4]
 8010892:	f104 0420 	add.w	r4, r4, #32
 8010896:	f105 0510 	add.w	r5, r5, #16
 801089a:	d1e5      	bne.n	8010868 <arm_cmplx_mag_f32+0xd0>
 801089c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 80108a0:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 80108a4:	f012 0503 	ands.w	r5, r2, #3
 80108a8:	d026      	beq.n	80108f8 <arm_cmplx_mag_f32+0x160>
 80108aa:	f100 0408 	add.w	r4, r0, #8
 80108ae:	2600      	movs	r6, #0
 80108b0:	e00c      	b.n	80108cc <arm_cmplx_mag_f32+0x134>
 80108b2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80108b6:	eeb4 0a40 	vcmp.f32	s0, s0
 80108ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108be:	d12e      	bne.n	801091e <arm_cmplx_mag_f32+0x186>
 80108c0:	3d01      	subs	r5, #1
 80108c2:	ed01 0a01 	vstr	s0, [r1, #-4]
 80108c6:	f104 0408 	add.w	r4, r4, #8
 80108ca:	d015      	beq.n	80108f8 <arm_cmplx_mag_f32+0x160>
 80108cc:	ed54 7a02 	vldr	s15, [r4, #-8]
 80108d0:	3104      	adds	r1, #4
 80108d2:	ed14 0a01 	vldr	s0, [r4, #-4]
 80108d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80108da:	ee20 0a00 	vmul.f32	s0, s0, s0
 80108de:	ee77 7a80 	vadd.f32	s15, s15, s0
 80108e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80108e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ea:	dae2      	bge.n	80108b2 <arm_cmplx_mag_f32+0x11a>
 80108ec:	3d01      	subs	r5, #1
 80108ee:	f841 6c04 	str.w	r6, [r1, #-4]
 80108f2:	f104 0408 	add.w	r4, r4, #8
 80108f6:	d1e9      	bne.n	80108cc <arm_cmplx_mag_f32+0x134>
 80108f8:	b004      	add	sp, #16
 80108fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108fe:	f845 7c08 	str.w	r7, [r5, #-8]
 8010902:	e793      	b.n	801082c <arm_cmplx_mag_f32+0x94>
 8010904:	f845 7c0c 	str.w	r7, [r5, #-12]
 8010908:	e777      	b.n	80107fa <arm_cmplx_mag_f32+0x62>
 801090a:	eeb0 0a67 	vmov.f32	s0, s15
 801090e:	9203      	str	r2, [sp, #12]
 8010910:	9102      	str	r1, [sp, #8]
 8010912:	9001      	str	r0, [sp, #4]
 8010914:	f006 fdd2 	bl	80174bc <sqrtf>
 8010918:	a801      	add	r0, sp, #4
 801091a:	c807      	ldmia	r0, {r0, r1, r2}
 801091c:	e751      	b.n	80107c2 <arm_cmplx_mag_f32+0x2a>
 801091e:	eeb0 0a67 	vmov.f32	s0, s15
 8010922:	9101      	str	r1, [sp, #4]
 8010924:	f006 fdca 	bl	80174bc <sqrtf>
 8010928:	9901      	ldr	r1, [sp, #4]
 801092a:	e7c9      	b.n	80108c0 <arm_cmplx_mag_f32+0x128>
 801092c:	eeb0 0a67 	vmov.f32	s0, s15
 8010930:	9203      	str	r2, [sp, #12]
 8010932:	9102      	str	r1, [sp, #8]
 8010934:	9001      	str	r0, [sp, #4]
 8010936:	f006 fdc1 	bl	80174bc <sqrtf>
 801093a:	a801      	add	r0, sp, #4
 801093c:	c807      	ldmia	r0, {r0, r1, r2}
 801093e:	e78b      	b.n	8010858 <arm_cmplx_mag_f32+0xc0>
 8010940:	eeb0 0a67 	vmov.f32	s0, s15
 8010944:	9203      	str	r2, [sp, #12]
 8010946:	9102      	str	r1, [sp, #8]
 8010948:	9001      	str	r0, [sp, #4]
 801094a:	f006 fdb7 	bl	80174bc <sqrtf>
 801094e:	a801      	add	r0, sp, #4
 8010950:	c807      	ldmia	r0, {r0, r1, r2}
 8010952:	e769      	b.n	8010828 <arm_cmplx_mag_f32+0x90>
 8010954:	eeb0 0a67 	vmov.f32	s0, s15
 8010958:	9203      	str	r2, [sp, #12]
 801095a:	9102      	str	r1, [sp, #8]
 801095c:	9001      	str	r0, [sp, #4]
 801095e:	f006 fdad 	bl	80174bc <sqrtf>
 8010962:	a801      	add	r0, sp, #4
 8010964:	c807      	ldmia	r0, {r0, r1, r2}
 8010966:	e746      	b.n	80107f6 <arm_cmplx_mag_f32+0x5e>

08010968 <arm_radix8_butterfly_f32>:
 8010968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801096c:	469e      	mov	lr, r3
 801096e:	4603      	mov	r3, r0
 8010970:	468a      	mov	sl, r1
 8010972:	468b      	mov	fp, r1
 8010974:	3304      	adds	r3, #4
 8010976:	ed2d 8b10 	vpush	{d8-d15}
 801097a:	469c      	mov	ip, r3
 801097c:	b09d      	sub	sp, #116	@ 0x74
 801097e:	ed9f 9ac3 	vldr	s18, [pc, #780]	@ 8010c8c <arm_radix8_butterfly_f32+0x324>
 8010982:	9019      	str	r0, [sp, #100]	@ 0x64
 8010984:	921a      	str	r2, [sp, #104]	@ 0x68
 8010986:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010988:	ea4f 03db 	mov.w	r3, fp, lsr #3
 801098c:	f04f 0800 	mov.w	r8, #0
 8010990:	461a      	mov	r2, r3
 8010992:	9311      	str	r3, [sp, #68]	@ 0x44
 8010994:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010998:	4611      	mov	r1, r2
 801099a:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801099e:	9300      	str	r3, [sp, #0]
 80109a0:	0053      	lsls	r3, r2, #1
 80109a2:	18d5      	adds	r5, r2, r3
 80109a4:	9301      	str	r3, [sp, #4]
 80109a6:	0113      	lsls	r3, r2, #4
 80109a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80109aa:	194c      	adds	r4, r1, r5
 80109ac:	eb02 0609 	add.w	r6, r2, r9
 80109b0:	9302      	str	r3, [sp, #8]
 80109b2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80109b6:	4613      	mov	r3, r2
 80109b8:	190a      	adds	r2, r1, r4
 80109ba:	eb06 0709 	add.w	r7, r6, r9
 80109be:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80109c2:	1888      	adds	r0, r1, r2
 80109c4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80109c8:	4401      	add	r1, r0
 80109ca:	3204      	adds	r2, #4
 80109cc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80109d0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80109d4:	9b00      	ldr	r3, [sp, #0]
 80109d6:	3104      	adds	r1, #4
 80109d8:	ed5c 7a01 	vldr	s15, [ip, #-4]
 80109dc:	44d8      	add	r8, fp
 80109de:	ed90 7a00 	vldr	s14, [r0]
 80109e2:	ed94 5a00 	vldr	s10, [r4]
 80109e6:	45c2      	cmp	sl, r8
 80109e8:	edd7 3a00 	vldr	s7, [r7]
 80109ec:	ed96 6a00 	vldr	s12, [r6]
 80109f0:	ee37 1a85 	vadd.f32	s2, s15, s10
 80109f4:	ed52 6a01 	vldr	s13, [r2, #-4]
 80109f8:	ee73 4a87 	vadd.f32	s9, s7, s14
 80109fc:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8010a00:	edd5 7a00 	vldr	s15, [r5]
 8010a04:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8010a08:	ed11 7a01 	vldr	s14, [r1, #-4]
 8010a0c:	ee36 2a26 	vadd.f32	s4, s12, s13
 8010a10:	ee37 4a87 	vadd.f32	s8, s15, s14
 8010a14:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010a18:	ee71 5a24 	vadd.f32	s11, s2, s9
 8010a1c:	ee32 6a04 	vadd.f32	s12, s4, s8
 8010a20:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010a24:	ee31 1a64 	vsub.f32	s2, s2, s9
 8010a28:	ee75 4a86 	vadd.f32	s9, s11, s12
 8010a2c:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8010a30:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8010a34:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8010a38:	ee32 2a44 	vsub.f32	s4, s4, s8
 8010a3c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8010a40:	ed94 0a01 	vldr	s0, [r4, #4]
 8010a44:	edc4 5a00 	vstr	s11, [r4]
 8010a48:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010a4c:	edd6 5a01 	vldr	s11, [r6, #4]
 8010a50:	edd5 2a01 	vldr	s5, [r5, #4]
 8010a54:	ee75 1a27 	vadd.f32	s3, s10, s15
 8010a58:	ed92 4a00 	vldr	s8, [r2]
 8010a5c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8010a60:	edd1 4a00 	vldr	s9, [r1]
 8010a64:	ee27 7a09 	vmul.f32	s14, s14, s18
 8010a68:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8010a6c:	ed9c 6a00 	vldr	s12, [ip]
 8010a70:	ee72 6ae4 	vsub.f32	s13, s5, s9
 8010a74:	edd0 0a01 	vldr	s1, [r0, #4]
 8010a78:	ed97 5a01 	vldr	s10, [r7, #4]
 8010a7c:	ee35 4a84 	vadd.f32	s8, s11, s8
 8010a80:	ee72 4aa4 	vadd.f32	s9, s5, s9
 8010a84:	ee73 5a26 	vadd.f32	s11, s6, s13
 8010a88:	ee76 2a00 	vadd.f32	s5, s12, s0
 8010a8c:	ee73 6a66 	vsub.f32	s13, s6, s13
 8010a90:	ee36 6a40 	vsub.f32	s12, s12, s0
 8010a94:	ee35 0a20 	vadd.f32	s0, s10, s1
 8010a98:	ee65 5a89 	vmul.f32	s11, s11, s18
 8010a9c:	ee35 5a60 	vsub.f32	s10, s10, s1
 8010aa0:	ee32 3a80 	vadd.f32	s6, s5, s0
 8010aa4:	ee74 0a24 	vadd.f32	s1, s8, s9
 8010aa8:	ee66 6a89 	vmul.f32	s13, s13, s18
 8010aac:	ee74 4a64 	vsub.f32	s9, s8, s9
 8010ab0:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8010ab4:	ee75 2a25 	vadd.f32	s5, s10, s11
 8010ab8:	ee33 0a20 	vadd.f32	s0, s6, s1
 8010abc:	ee75 5a65 	vsub.f32	s11, s10, s11
 8010ac0:	ee33 3a60 	vsub.f32	s6, s6, s1
 8010ac4:	ee36 5a26 	vadd.f32	s10, s12, s13
 8010ac8:	ed8c 0a00 	vstr	s0, [ip]
 8010acc:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010ad0:	449c      	add	ip, r3
 8010ad2:	ee33 6a87 	vadd.f32	s12, s7, s14
 8010ad6:	ed84 3a01 	vstr	s6, [r4, #4]
 8010ada:	ee33 7ac7 	vsub.f32	s14, s7, s14
 8010ade:	441c      	add	r4, r3
 8010ae0:	ee71 3a24 	vadd.f32	s7, s2, s9
 8010ae4:	ee71 4a64 	vsub.f32	s9, s2, s9
 8010ae8:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8010aec:	edc7 3a00 	vstr	s7, [r7]
 8010af0:	ee34 1a42 	vsub.f32	s2, s8, s4
 8010af4:	edc0 4a00 	vstr	s9, [r0]
 8010af8:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8010afc:	ee75 4a46 	vsub.f32	s9, s10, s12
 8010b00:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010b04:	ed87 1a01 	vstr	s2, [r7, #4]
 8010b08:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8010b0c:	441f      	add	r7, r3
 8010b0e:	ee32 4a04 	vadd.f32	s8, s4, s8
 8010b12:	ee71 1ae2 	vsub.f32	s3, s3, s5
 8010b16:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010b1a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010b1e:	ed80 4a01 	vstr	s8, [r0, #4]
 8010b22:	ed86 3a00 	vstr	s6, [r6]
 8010b26:	4418      	add	r0, r3
 8010b28:	ed41 1a01 	vstr	s3, [r1, #-4]
 8010b2c:	ed42 3a01 	vstr	s7, [r2, #-4]
 8010b30:	edc5 7a00 	vstr	s15, [r5]
 8010b34:	edc6 4a01 	vstr	s9, [r6, #4]
 8010b38:	441e      	add	r6, r3
 8010b3a:	ed81 6a00 	vstr	s12, [r1]
 8010b3e:	4419      	add	r1, r3
 8010b40:	edc2 5a00 	vstr	s11, [r2]
 8010b44:	441a      	add	r2, r3
 8010b46:	ed85 7a01 	vstr	s14, [r5, #4]
 8010b4a:	441d      	add	r5, r3
 8010b4c:	f63f af44 	bhi.w	80109d8 <arm_radix8_butterfly_f32+0x70>
 8010b50:	9300      	str	r3, [sp, #0]
 8010b52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010b54:	2b07      	cmp	r3, #7
 8010b56:	f240 81f4 	bls.w	8010f42 <arm_radix8_butterfly_f32+0x5da>
 8010b5a:	9901      	ldr	r1, [sp, #4]
 8010b5c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8010b60:	9d02      	ldr	r5, [sp, #8]
 8010b62:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 8010b66:	3101      	adds	r1, #1
 8010b68:	eb04 000e 	add.w	r0, r4, lr
 8010b6c:	00e4      	lsls	r4, r4, #3
 8010b6e:	3508      	adds	r5, #8
 8010b70:	4419      	add	r1, r3
 8010b72:	eb00 0c0e 	add.w	ip, r0, lr
 8010b76:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010b78:	00c0      	lsls	r0, r0, #3
 8010b7a:	185e      	adds	r6, r3, r1
 8010b7c:	4617      	mov	r7, r2
 8010b7e:	9218      	str	r2, [sp, #96]	@ 0x60
 8010b80:	f109 0908 	add.w	r9, r9, #8
 8010b84:	199c      	adds	r4, r3, r6
 8010b86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010b88:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010b8a:	9012      	str	r0, [sp, #72]	@ 0x48
 8010b8c:	195d      	adds	r5, r3, r5
 8010b8e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010b90:	443a      	add	r2, r7
 8010b92:	950c      	str	r5, [sp, #48]	@ 0x30
 8010b94:	4698      	mov	r8, r3
 8010b96:	4420      	add	r0, r4
 8010b98:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8010b9a:	19d7      	adds	r7, r2, r7
 8010b9c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010ba0:	4405      	add	r5, r0
 8010ba2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8010ba6:	9710      	str	r7, [sp, #64]	@ 0x40
 8010ba8:	eb0c 070e 	add.w	r7, ip, lr
 8010bac:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8010bb0:	3404      	adds	r4, #4
 8010bb2:	3004      	adds	r0, #4
 8010bb4:	44c8      	add	r8, r9
 8010bb6:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8010bba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010bbc:	940a      	str	r4, [sp, #40]	@ 0x28
 8010bbe:	9009      	str	r0, [sp, #36]	@ 0x24
 8010bc0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8010bc4:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8010bc6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010bca:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8010bcc:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8010bd0:	eb07 080e 	add.w	r8, r7, lr
 8010bd4:	eb04 0900 	add.w	r9, r4, r0
 8010bd8:	00f8      	lsls	r0, r7, #3
 8010bda:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 8010bde:	3504      	adds	r5, #4
 8010be0:	4607      	mov	r7, r0
 8010be2:	9017      	str	r0, [sp, #92]	@ 0x5c
 8010be4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010be6:	4618      	mov	r0, r3
 8010be8:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8010bec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010bee:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 8010bf2:	18e3      	adds	r3, r4, r3
 8010bf4:	9508      	str	r5, [sp, #32]
 8010bf6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010bf8:	910e      	str	r1, [sp, #56]	@ 0x38
 8010bfa:	4621      	mov	r1, r4
 8010bfc:	eb04 0805 	add.w	r8, r4, r5
 8010c00:	9304      	str	r3, [sp, #16]
 8010c02:	19e5      	adds	r5, r4, r7
 8010c04:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8010c08:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8010c0a:	9316      	str	r3, [sp, #88]	@ 0x58
 8010c0c:	190b      	adds	r3, r1, r4
 8010c0e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8010c10:	9505      	str	r5, [sp, #20]
 8010c12:	9303      	str	r3, [sp, #12]
 8010c14:	f100 0308 	add.w	r3, r0, #8
 8010c18:	9707      	str	r7, [sp, #28]
 8010c1a:	4638      	mov	r0, r7
 8010c1c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010c1e:	2301      	movs	r3, #1
 8010c20:	9306      	str	r3, [sp, #24]
 8010c22:	9b00      	ldr	r3, [sp, #0]
 8010c24:	ed90 fa00 	vldr	s30, [r0]
 8010c28:	edd0 ba01 	vldr	s23, [r0, #4]
 8010c2c:	9803      	ldr	r0, [sp, #12]
 8010c2e:	9903      	ldr	r1, [sp, #12]
 8010c30:	ed90 ba01 	vldr	s22, [r0, #4]
 8010c34:	9804      	ldr	r0, [sp, #16]
 8010c36:	edd1 ea00 	vldr	s29, [r1]
 8010c3a:	edd0 aa01 	vldr	s21, [r0, #4]
 8010c3e:	9805      	ldr	r0, [sp, #20]
 8010c40:	9905      	ldr	r1, [sp, #20]
 8010c42:	edd0 7a01 	vldr	s15, [r0, #4]
 8010c46:	ed91 da00 	vldr	s26, [r1]
 8010c4a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010c4c:	9c04      	ldr	r4, [sp, #16]
 8010c4e:	edcd 7a01 	vstr	s15, [sp, #4]
 8010c52:	edd8 7a01 	vldr	s15, [r8, #4]
 8010c56:	9100      	str	r1, [sp, #0]
 8010c58:	edd2 fa00 	vldr	s31, [r2]
 8010c5c:	ed94 ea00 	vldr	s28, [r4]
 8010c60:	ed92 ca01 	vldr	s24, [r2, #4]
 8010c64:	f8dd e020 	ldr.w	lr, [sp, #32]
 8010c68:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8010c6a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010c6c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010c6e:	edd9 da00 	vldr	s27, [r9]
 8010c72:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8010c74:	edd8 ca00 	vldr	s25, [r8]
 8010c78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010c7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010c7c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8010c80:	ed99 aa01 	vldr	s20, [r9, #4]
 8010c84:	edcd 7a02 	vstr	s15, [sp, #8]
 8010c88:	9800      	ldr	r0, [sp, #0]
 8010c8a:	e001      	b.n	8010c90 <arm_radix8_butterfly_f32+0x328>
 8010c8c:	3f3504f3 	.word	0x3f3504f3
 8010c90:	edd5 3a00 	vldr	s7, [r5]
 8010c94:	44dc      	add	ip, fp
 8010c96:	ed91 7a00 	vldr	s14, [r1]
 8010c9a:	edd4 8a00 	vldr	s17, [r4]
 8010c9e:	45e2      	cmp	sl, ip
 8010ca0:	ed57 7a01 	vldr	s15, [r7, #-4]
 8010ca4:	ed90 5a00 	vldr	s10, [r0]
 8010ca8:	ed56 5a01 	vldr	s11, [r6, #-4]
 8010cac:	ee38 6aa7 	vadd.f32	s12, s17, s15
 8010cb0:	ed92 1a00 	vldr	s2, [r2]
 8010cb4:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8010cb8:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8010cbc:	ee75 9a25 	vadd.f32	s19, s10, s11
 8010cc0:	ee31 3a07 	vadd.f32	s6, s2, s14
 8010cc4:	ed92 8a01 	vldr	s16, [r2, #4]
 8010cc8:	ee73 6a84 	vadd.f32	s13, s7, s8
 8010ccc:	ee75 5a65 	vsub.f32	s11, s10, s11
 8010cd0:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8010cd4:	ee73 1a06 	vadd.f32	s3, s6, s12
 8010cd8:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8010cdc:	ee75 7a84 	vadd.f32	s15, s11, s8
 8010ce0:	ee31 1a47 	vsub.f32	s2, s2, s14
 8010ce4:	ee31 7a85 	vadd.f32	s14, s3, s10
 8010ce8:	ee67 7a89 	vmul.f32	s15, s15, s18
 8010cec:	ee33 3a46 	vsub.f32	s6, s6, s12
 8010cf0:	ed82 7a00 	vstr	s14, [r2]
 8010cf4:	ee79 9ae6 	vsub.f32	s19, s19, s13
 8010cf8:	ed96 6a00 	vldr	s12, [r6]
 8010cfc:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8010d00:	edd5 3a01 	vldr	s7, [r5, #4]
 8010d04:	ee74 8ae7 	vsub.f32	s17, s9, s15
 8010d08:	ed90 7a01 	vldr	s14, [r0, #4]
 8010d0c:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8010d10:	edde 4a00 	vldr	s9, [lr]
 8010d14:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8010d18:	ee77 2a46 	vsub.f32	s5, s14, s12
 8010d1c:	edd1 6a01 	vldr	s13, [r1, #4]
 8010d20:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8010d24:	edd7 0a00 	vldr	s1, [r7]
 8010d28:	ee77 5a06 	vadd.f32	s11, s14, s12
 8010d2c:	ed94 7a01 	vldr	s14, [r4, #4]
 8010d30:	ee33 6aa4 	vadd.f32	s12, s7, s9
 8010d34:	ee32 0ae7 	vsub.f32	s0, s5, s15
 8010d38:	ee78 4a66 	vsub.f32	s9, s16, s13
 8010d3c:	ee78 3a26 	vadd.f32	s7, s16, s13
 8010d40:	ee72 2aa7 	vadd.f32	s5, s5, s15
 8010d44:	ee77 6a20 	vadd.f32	s13, s14, s1
 8010d48:	ee24 4a09 	vmul.f32	s8, s8, s18
 8010d4c:	ee37 7a60 	vsub.f32	s14, s14, s1
 8010d50:	ee20 8a09 	vmul.f32	s16, s0, s18
 8010d54:	ee75 0a86 	vadd.f32	s1, s11, s12
 8010d58:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8010d5c:	ee62 2a89 	vmul.f32	s5, s5, s18
 8010d60:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8010d64:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8010d68:	ee77 7a62 	vsub.f32	s15, s14, s5
 8010d6c:	ee74 5a88 	vadd.f32	s11, s9, s16
 8010d70:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8010d74:	ee77 4a22 	vadd.f32	s9, s14, s5
 8010d78:	ee71 2a04 	vadd.f32	s5, s2, s8
 8010d7c:	ee31 7a44 	vsub.f32	s14, s2, s8
 8010d80:	ee30 1a60 	vsub.f32	s2, s0, s1
 8010d84:	ee73 1a06 	vadd.f32	s3, s6, s12
 8010d88:	ee33 6a46 	vsub.f32	s12, s6, s12
 8010d8c:	ee33 3ae9 	vsub.f32	s6, s7, s19
 8010d90:	ee79 6aa3 	vadd.f32	s13, s19, s7
 8010d94:	ee38 4a68 	vsub.f32	s8, s16, s17
 8010d98:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8010d9c:	ee72 5a25 	vadd.f32	s11, s4, s11
 8010da0:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8010da4:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8010da8:	ee77 2a27 	vadd.f32	s5, s14, s15
 8010dac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010db0:	ee78 7a88 	vadd.f32	s15, s17, s16
 8010db4:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8010db8:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8010dbc:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8010dc0:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8010dc4:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8010dc8:	ee70 0a20 	vadd.f32	s1, s0, s1
 8010dcc:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8010dd0:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8010dd4:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8010dd8:	edc2 0a01 	vstr	s1, [r2, #4]
 8010ddc:	ee38 8a88 	vadd.f32	s16, s17, s16
 8010de0:	441a      	add	r2, r3
 8010de2:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8010de6:	ee31 5a45 	vsub.f32	s10, s2, s10
 8010dea:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8010dee:	ed81 8a00 	vstr	s16, [r1]
 8010df2:	ee39 0a80 	vadd.f32	s0, s19, s0
 8010df6:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010dfa:	ed81 5a01 	vstr	s10, [r1, #4]
 8010dfe:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8010e02:	edcd 3a00 	vstr	s7, [sp]
 8010e06:	ed9d 5a02 	vldr	s10, [sp, #8]
 8010e0a:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8010e0e:	eddd 3a01 	vldr	s7, [sp, #4]
 8010e12:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8010e16:	ed84 0a00 	vstr	s0, [r4]
 8010e1a:	ee65 4a24 	vmul.f32	s9, s10, s9
 8010e1e:	ed84 3a01 	vstr	s6, [r4, #4]
 8010e22:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8010e26:	ee23 6a86 	vmul.f32	s12, s7, s12
 8010e2a:	eddd 3a00 	vldr	s7, [sp]
 8010e2e:	ee25 5a25 	vmul.f32	s10, s10, s11
 8010e32:	4419      	add	r1, r3
 8010e34:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8010e38:	441c      	add	r4, r3
 8010e3a:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8010e3e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8010e42:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8010e46:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8010e4a:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8010e4e:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8010e52:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8010e56:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8010e5a:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8010e5e:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8010e62:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8010e66:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8010e6a:	ee38 8a01 	vadd.f32	s16, s16, s2
 8010e6e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8010e72:	ee39 5a85 	vadd.f32	s10, s19, s10
 8010e76:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8010e7a:	ed07 8a01 	vstr	s16, [r7, #-4]
 8010e7e:	ee30 0a21 	vadd.f32	s0, s0, s3
 8010e82:	ed87 6a00 	vstr	s12, [r7]
 8010e86:	ee74 2a62 	vsub.f32	s5, s8, s5
 8010e8a:	edc0 0a00 	vstr	s1, [r0]
 8010e8e:	ee33 3a28 	vadd.f32	s6, s6, s17
 8010e92:	edc0 3a01 	vstr	s7, [r0, #4]
 8010e96:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010e9a:	ed0e 5a01 	vstr	s10, [lr, #-4]
 8010e9e:	edce 4a00 	vstr	s9, [lr]
 8010ea2:	4418      	add	r0, r3
 8010ea4:	ed06 0a01 	vstr	s0, [r6, #-4]
 8010ea8:	441f      	add	r7, r3
 8010eaa:	edc6 2a00 	vstr	s5, [r6]
 8010eae:	449e      	add	lr, r3
 8010eb0:	ed85 3a00 	vstr	s6, [r5]
 8010eb4:	441e      	add	r6, r3
 8010eb6:	ed85 7a01 	vstr	s14, [r5, #4]
 8010eba:	441d      	add	r5, r3
 8010ebc:	f63f aee8 	bhi.w	8010c90 <arm_radix8_butterfly_f32+0x328>
 8010ec0:	9a06      	ldr	r2, [sp, #24]
 8010ec2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010ec4:	3201      	adds	r2, #1
 8010ec6:	4611      	mov	r1, r2
 8010ec8:	9206      	str	r2, [sp, #24]
 8010eca:	9a07      	ldr	r2, [sp, #28]
 8010ecc:	4402      	add	r2, r0
 8010ece:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010ed0:	9207      	str	r2, [sp, #28]
 8010ed2:	9a03      	ldr	r2, [sp, #12]
 8010ed4:	4402      	add	r2, r0
 8010ed6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010ed8:	9203      	str	r2, [sp, #12]
 8010eda:	9a04      	ldr	r2, [sp, #16]
 8010edc:	4402      	add	r2, r0
 8010ede:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8010ee0:	9204      	str	r2, [sp, #16]
 8010ee2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010ee4:	4491      	add	r9, r2
 8010ee6:	9a05      	ldr	r2, [sp, #20]
 8010ee8:	4402      	add	r2, r0
 8010eea:	9205      	str	r2, [sp, #20]
 8010eec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010eee:	4490      	add	r8, r2
 8010ef0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010ef2:	3208      	adds	r2, #8
 8010ef4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010ef6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ef8:	3208      	adds	r2, #8
 8010efa:	920e      	str	r2, [sp, #56]	@ 0x38
 8010efc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010efe:	3208      	adds	r2, #8
 8010f00:	920d      	str	r2, [sp, #52]	@ 0x34
 8010f02:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010f04:	3208      	adds	r2, #8
 8010f06:	920c      	str	r2, [sp, #48]	@ 0x30
 8010f08:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010f0a:	3208      	adds	r2, #8
 8010f0c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010f0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010f10:	3208      	adds	r2, #8
 8010f12:	920a      	str	r2, [sp, #40]	@ 0x28
 8010f14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f16:	3208      	adds	r2, #8
 8010f18:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f1a:	9a08      	ldr	r2, [sp, #32]
 8010f1c:	3208      	adds	r2, #8
 8010f1e:	9208      	str	r2, [sp, #32]
 8010f20:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8010f22:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010f24:	4622      	mov	r2, r4
 8010f26:	4288      	cmp	r0, r1
 8010f28:	d005      	beq.n	8010f36 <arm_radix8_butterfly_f32+0x5ce>
 8010f2a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8010f2c:	4621      	mov	r1, r4
 8010f2e:	4401      	add	r1, r0
 8010f30:	9807      	ldr	r0, [sp, #28]
 8010f32:	9110      	str	r1, [sp, #64]	@ 0x40
 8010f34:	e676      	b.n	8010c24 <arm_radix8_butterfly_f32+0x2bc>
 8010f36:	4683      	mov	fp, r0
 8010f38:	f8bd e060 	ldrh.w	lr, [sp, #96]	@ 0x60
 8010f3c:	f8dd c06c 	ldr.w	ip, [sp, #108]	@ 0x6c
 8010f40:	e522      	b.n	8010988 <arm_radix8_butterfly_f32+0x20>
 8010f42:	b01d      	add	sp, #116	@ 0x74
 8010f44:	ecbd 8b10 	vpop	{d8-d15}
 8010f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f4c <ai_buffer_get_size>:
 8010f4c:	b368      	cbz	r0, 8010faa <ai_buffer_get_size+0x5e>
 8010f4e:	4b17      	ldr	r3, [pc, #92]	@ (8010fac <ai_buffer_get_size+0x60>)
 8010f50:	4a17      	ldr	r2, [pc, #92]	@ (8010fb0 <ai_buffer_get_size+0x64>)
 8010f52:	b410      	push	{r4}
 8010f54:	6804      	ldr	r4, [r0, #0]
 8010f56:	4023      	ands	r3, r4
 8010f58:	4293      	cmp	r3, r2
 8010f5a:	d123      	bne.n	8010fa4 <ai_buffer_get_size+0x58>
 8010f5c:	b311      	cbz	r1, 8010fa4 <ai_buffer_get_size+0x58>
 8010f5e:	6984      	ldr	r4, [r0, #24]
 8010f60:	6862      	ldr	r2, [r4, #4]
 8010f62:	321f      	adds	r2, #31
 8010f64:	f022 021f 	bic.w	r2, r2, #31
 8010f68:	7d03      	ldrb	r3, [r0, #20]
 8010f6a:	6941      	ldr	r1, [r0, #20]
 8010f6c:	f1a3 0301 	sub.w	r3, r3, #1
 8010f70:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8010f74:	fab3 f383 	clz	r3, r3
 8010f78:	095b      	lsrs	r3, r3, #5
 8010f7a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8010f7e:	da0c      	bge.n	8010f9a <ai_buffer_get_size+0x4e>
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d103      	bne.n	8010f8c <ai_buffer_get_size+0x40>
 8010f84:	2802      	cmp	r0, #2
 8010f86:	f04f 0302 	mov.w	r3, #2
 8010f8a:	d006      	beq.n	8010f9a <ai_buffer_get_size+0x4e>
 8010f8c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8010f90:	3301      	adds	r3, #1
 8010f92:	4298      	cmp	r0, r3
 8010f94:	fb01 f202 	mul.w	r2, r1, r2
 8010f98:	d1f2      	bne.n	8010f80 <ai_buffer_get_size+0x34>
 8010f9a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8010f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fa2:	4770      	bx	lr
 8010fa4:	6984      	ldr	r4, [r0, #24]
 8010fa6:	6862      	ldr	r2, [r4, #4]
 8010fa8:	e7de      	b.n	8010f68 <ai_buffer_get_size+0x1c>
 8010faa:	4770      	bx	lr
 8010fac:	017fffff 	.word	0x017fffff
 8010fb0:	000400c0 	.word	0x000400c0

08010fb4 <ai_buffer_array_sane>:
 8010fb4:	b138      	cbz	r0, 8010fc6 <ai_buffer_array_sane+0x12>
 8010fb6:	6843      	ldr	r3, [r0, #4]
 8010fb8:	b123      	cbz	r3, 8010fc4 <ai_buffer_array_sane+0x10>
 8010fba:	8840      	ldrh	r0, [r0, #2]
 8010fbc:	3800      	subs	r0, #0
 8010fbe:	bf18      	it	ne
 8010fc0:	2001      	movne	r0, #1
 8010fc2:	4770      	bx	lr
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	4770      	bx	lr

08010fc8 <ai_buffer_array_item_set_address>:
 8010fc8:	b150      	cbz	r0, 8010fe0 <ai_buffer_array_item_set_address+0x18>
 8010fca:	6843      	ldr	r3, [r0, #4]
 8010fcc:	b14b      	cbz	r3, 8010fe2 <ai_buffer_array_item_set_address+0x1a>
 8010fce:	8840      	ldrh	r0, [r0, #2]
 8010fd0:	b900      	cbnz	r0, 8010fd4 <ai_buffer_array_item_set_address+0xc>
 8010fd2:	4770      	bx	lr
 8010fd4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8010fd8:	2001      	movs	r0, #1
 8010fda:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8010fde:	605a      	str	r2, [r3, #4]
 8010fe0:	4770      	bx	lr
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	4770      	bx	lr
 8010fe6:	bf00      	nop

08010fe8 <ai_platform_get_weights_map>:
 8010fe8:	2900      	cmp	r1, #0
 8010fea:	bf18      	it	ne
 8010fec:	2800      	cmpne	r0, #0
 8010fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ff0:	bf0c      	ite	eq
 8010ff2:	2401      	moveq	r4, #1
 8010ff4:	2400      	movne	r4, #0
 8010ff6:	2a00      	cmp	r2, #0
 8010ff8:	bf08      	it	eq
 8010ffa:	f044 0401 	orreq.w	r4, r4, #1
 8010ffe:	b114      	cbz	r4, 8011006 <ai_platform_get_weights_map+0x1e>
 8011000:	2400      	movs	r4, #0
 8011002:	4620      	mov	r0, r4
 8011004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011006:	4616      	mov	r6, r2
 8011008:	4b22      	ldr	r3, [pc, #136]	@ (8011094 <ai_platform_get_weights_map+0xac>)
 801100a:	6812      	ldr	r2, [r2, #0]
 801100c:	4605      	mov	r5, r0
 801100e:	460f      	mov	r7, r1
 8011010:	429a      	cmp	r2, r3
 8011012:	d022      	beq.n	801105a <ai_platform_get_weights_map+0x72>
 8011014:	6870      	ldr	r0, [r6, #4]
 8011016:	2800      	cmp	r0, #0
 8011018:	d0f2      	beq.n	8011000 <ai_platform_get_weights_map+0x18>
 801101a:	6806      	ldr	r6, [r0, #0]
 801101c:	429e      	cmp	r6, r3
 801101e:	d006      	beq.n	801102e <ai_platform_get_weights_map+0x46>
 8011020:	f1a1 0401 	sub.w	r4, r1, #1
 8011024:	6028      	str	r0, [r5, #0]
 8011026:	fab4 f484 	clz	r4, r4
 801102a:	0964      	lsrs	r4, r4, #5
 801102c:	e7e9      	b.n	8011002 <ai_platform_get_weights_map+0x1a>
 801102e:	3d04      	subs	r5, #4
 8011030:	4602      	mov	r2, r0
 8011032:	4621      	mov	r1, r4
 8011034:	e000      	b.n	8011038 <ai_platform_get_weights_map+0x50>
 8011036:	4619      	mov	r1, r3
 8011038:	f852 3f04 	ldr.w	r3, [r2, #4]!
 801103c:	42b3      	cmp	r3, r6
 801103e:	d025      	beq.n	801108c <ai_platform_get_weights_map+0xa4>
 8011040:	f845 3f04 	str.w	r3, [r5, #4]!
 8011044:	1c4b      	adds	r3, r1, #1
 8011046:	429f      	cmp	r7, r3
 8011048:	d8f5      	bhi.n	8011036 <ai_platform_get_weights_map+0x4e>
 801104a:	d1da      	bne.n	8011002 <ai_platform_get_weights_map+0x1a>
 801104c:	3102      	adds	r1, #2
 801104e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8011052:	42b3      	cmp	r3, r6
 8011054:	d1d5      	bne.n	8011002 <ai_platform_get_weights_map+0x1a>
 8011056:	2401      	movs	r4, #1
 8011058:	e7d3      	b.n	8011002 <ai_platform_get_weights_map+0x1a>
 801105a:	1d30      	adds	r0, r6, #4
 801105c:	f7ff ffaa 	bl	8010fb4 <ai_buffer_array_sane>
 8011060:	2800      	cmp	r0, #0
 8011062:	d0cd      	beq.n	8011000 <ai_platform_get_weights_map+0x18>
 8011064:	88f3      	ldrh	r3, [r6, #6]
 8011066:	429f      	cmp	r7, r3
 8011068:	d1ca      	bne.n	8011000 <ai_platform_get_weights_map+0x18>
 801106a:	3d04      	subs	r5, #4
 801106c:	4622      	mov	r2, r4
 801106e:	68b3      	ldr	r3, [r6, #8]
 8011070:	4423      	add	r3, r4
 8011072:	341c      	adds	r4, #28
 8011074:	685b      	ldr	r3, [r3, #4]
 8011076:	b123      	cbz	r3, 8011082 <ai_platform_get_weights_map+0x9a>
 8011078:	3201      	adds	r2, #1
 801107a:	f845 3f04 	str.w	r3, [r5, #4]!
 801107e:	4297      	cmp	r7, r2
 8011080:	d8f5      	bhi.n	801106e <ai_platform_get_weights_map+0x86>
 8011082:	1abc      	subs	r4, r7, r2
 8011084:	fab4 f484 	clz	r4, r4
 8011088:	0964      	lsrs	r4, r4, #5
 801108a:	e7ba      	b.n	8011002 <ai_platform_get_weights_map+0x1a>
 801108c:	428f      	cmp	r7, r1
 801108e:	d1b8      	bne.n	8011002 <ai_platform_get_weights_map+0x1a>
 8011090:	e7e1      	b.n	8011056 <ai_platform_get_weights_map+0x6e>
 8011092:	bf00      	nop
 8011094:	a1facade 	.word	0xa1facade

08011098 <ai_platform_get_activations_map>:
 8011098:	2900      	cmp	r1, #0
 801109a:	bf18      	it	ne
 801109c:	2800      	cmpne	r0, #0
 801109e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110a0:	bf0c      	ite	eq
 80110a2:	2401      	moveq	r4, #1
 80110a4:	2400      	movne	r4, #0
 80110a6:	2a00      	cmp	r2, #0
 80110a8:	bf08      	it	eq
 80110aa:	f044 0401 	orreq.w	r4, r4, #1
 80110ae:	b114      	cbz	r4, 80110b6 <ai_platform_get_activations_map+0x1e>
 80110b0:	2400      	movs	r4, #0
 80110b2:	4620      	mov	r0, r4
 80110b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110b6:	4616      	mov	r6, r2
 80110b8:	4b22      	ldr	r3, [pc, #136]	@ (8011144 <ai_platform_get_activations_map+0xac>)
 80110ba:	6812      	ldr	r2, [r2, #0]
 80110bc:	4605      	mov	r5, r0
 80110be:	460f      	mov	r7, r1
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d022      	beq.n	801110a <ai_platform_get_activations_map+0x72>
 80110c4:	6a30      	ldr	r0, [r6, #32]
 80110c6:	2800      	cmp	r0, #0
 80110c8:	d0f2      	beq.n	80110b0 <ai_platform_get_activations_map+0x18>
 80110ca:	6806      	ldr	r6, [r0, #0]
 80110cc:	429e      	cmp	r6, r3
 80110ce:	d006      	beq.n	80110de <ai_platform_get_activations_map+0x46>
 80110d0:	f1a1 0401 	sub.w	r4, r1, #1
 80110d4:	6028      	str	r0, [r5, #0]
 80110d6:	fab4 f484 	clz	r4, r4
 80110da:	0964      	lsrs	r4, r4, #5
 80110dc:	e7e9      	b.n	80110b2 <ai_platform_get_activations_map+0x1a>
 80110de:	3d04      	subs	r5, #4
 80110e0:	4602      	mov	r2, r0
 80110e2:	4621      	mov	r1, r4
 80110e4:	e000      	b.n	80110e8 <ai_platform_get_activations_map+0x50>
 80110e6:	4619      	mov	r1, r3
 80110e8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80110ec:	42b3      	cmp	r3, r6
 80110ee:	d026      	beq.n	801113e <ai_platform_get_activations_map+0xa6>
 80110f0:	f845 3f04 	str.w	r3, [r5, #4]!
 80110f4:	1c4b      	adds	r3, r1, #1
 80110f6:	429f      	cmp	r7, r3
 80110f8:	d8f5      	bhi.n	80110e6 <ai_platform_get_activations_map+0x4e>
 80110fa:	d1da      	bne.n	80110b2 <ai_platform_get_activations_map+0x1a>
 80110fc:	3102      	adds	r1, #2
 80110fe:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8011102:	42b3      	cmp	r3, r6
 8011104:	d1d5      	bne.n	80110b2 <ai_platform_get_activations_map+0x1a>
 8011106:	2401      	movs	r4, #1
 8011108:	e7d3      	b.n	80110b2 <ai_platform_get_activations_map+0x1a>
 801110a:	f106 000c 	add.w	r0, r6, #12
 801110e:	f7ff ff51 	bl	8010fb4 <ai_buffer_array_sane>
 8011112:	2800      	cmp	r0, #0
 8011114:	d0cc      	beq.n	80110b0 <ai_platform_get_activations_map+0x18>
 8011116:	89f3      	ldrh	r3, [r6, #14]
 8011118:	429f      	cmp	r7, r3
 801111a:	d1c9      	bne.n	80110b0 <ai_platform_get_activations_map+0x18>
 801111c:	3d04      	subs	r5, #4
 801111e:	4622      	mov	r2, r4
 8011120:	6933      	ldr	r3, [r6, #16]
 8011122:	4423      	add	r3, r4
 8011124:	341c      	adds	r4, #28
 8011126:	685b      	ldr	r3, [r3, #4]
 8011128:	b123      	cbz	r3, 8011134 <ai_platform_get_activations_map+0x9c>
 801112a:	3201      	adds	r2, #1
 801112c:	f845 3f04 	str.w	r3, [r5, #4]!
 8011130:	4297      	cmp	r7, r2
 8011132:	d8f5      	bhi.n	8011120 <ai_platform_get_activations_map+0x88>
 8011134:	1abc      	subs	r4, r7, r2
 8011136:	fab4 f484 	clz	r4, r4
 801113a:	0964      	lsrs	r4, r4, #5
 801113c:	e7b9      	b.n	80110b2 <ai_platform_get_activations_map+0x1a>
 801113e:	428f      	cmp	r7, r1
 8011140:	d1b7      	bne.n	80110b2 <ai_platform_get_activations_map+0x1a>
 8011142:	e7e0      	b.n	8011106 <ai_platform_get_activations_map+0x6e>
 8011144:	a1facade 	.word	0xa1facade

08011148 <ai_platform_bind_network_params>:
 8011148:	2a00      	cmp	r2, #0
 801114a:	bf18      	it	ne
 801114c:	2900      	cmpne	r1, #0
 801114e:	d010      	beq.n	8011172 <ai_platform_bind_network_params+0x2a>
 8011150:	b178      	cbz	r0, 8011172 <ai_platform_bind_network_params+0x2a>
 8011152:	4603      	mov	r3, r0
 8011154:	4808      	ldr	r0, [pc, #32]	@ (8011178 <ai_platform_bind_network_params+0x30>)
 8011156:	f103 0c0c 	add.w	ip, r3, #12
 801115a:	f843 0b04 	str.w	r0, [r3], #4
 801115e:	c903      	ldmia	r1, {r0, r1}
 8011160:	e883 0003 	stmia.w	r3, {r0, r1}
 8011164:	2301      	movs	r3, #1
 8011166:	e892 0003 	ldmia.w	r2, {r0, r1}
 801116a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801116e:	4618      	mov	r0, r3
 8011170:	4770      	bx	lr
 8011172:	2300      	movs	r3, #0
 8011174:	4618      	mov	r0, r3
 8011176:	4770      	bx	lr
 8011178:	a1facade 	.word	0xa1facade

0801117c <ai_platform_network_get_error>:
 801117c:	4b04      	ldr	r3, [pc, #16]	@ (8011190 <ai_platform_network_get_error+0x14>)
 801117e:	6802      	ldr	r2, [r0, #0]
 8011180:	4393      	bics	r3, r2
 8011182:	d102      	bne.n	801118a <ai_platform_network_get_error+0xe>
 8011184:	300c      	adds	r0, #12
 8011186:	f000 bc73 	b.w	8011a70 <core_get_error>
 801118a:	f241 0010 	movw	r0, #4112	@ 0x1010
 801118e:	4770      	bx	lr
 8011190:	a1c00100 	.word	0xa1c00100

08011194 <ai_platform_network_set_error>:
 8011194:	b110      	cbz	r0, 801119c <ai_platform_network_set_error+0x8>
 8011196:	300c      	adds	r0, #12
 8011198:	f000 bc70 	b.w	8011a7c <core_set_error>
 801119c:	4770      	bx	lr
 801119e:	bf00      	nop

080111a0 <ai_platform_inputs_get>:
 80111a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111a4:	4b39      	ldr	r3, [pc, #228]	@ (801128c <ai_platform_inputs_get+0xec>)
 80111a6:	b085      	sub	sp, #20
 80111a8:	6802      	ldr	r2, [r0, #0]
 80111aa:	4393      	bics	r3, r2
 80111ac:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80111b0:	d162      	bne.n	8011278 <ai_platform_inputs_get+0xd8>
 80111b2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d051      	beq.n	801125c <ai_platform_inputs_get+0xbc>
 80111b8:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80111bc:	f1ba 0f00 	cmp.w	sl, #0
 80111c0:	d04c      	beq.n	801125c <ai_platform_inputs_get+0xbc>
 80111c2:	f04f 0900 	mov.w	r9, #0
 80111c6:	464d      	mov	r5, r9
 80111c8:	e016      	b.n	80111f8 <ai_platform_inputs_get+0x58>
 80111ca:	9901      	ldr	r1, [sp, #4]
 80111cc:	2301      	movs	r3, #1
 80111ce:	f848 3001 	str.w	r3, [r8, r1]
 80111d2:	69b1      	ldr	r1, [r6, #24]
 80111d4:	f04f 0301 	mov.w	r3, #1
 80111d8:	684e      	ldr	r6, [r1, #4]
 80111da:	3501      	adds	r5, #1
 80111dc:	f109 091c 	add.w	r9, r9, #28
 80111e0:	7523      	strb	r3, [r4, #20]
 80111e2:	2300      	movs	r3, #0
 80111e4:	6961      	ldr	r1, [r4, #20]
 80111e6:	6020      	str	r0, [r4, #0]
 80111e8:	f36b 211f 	bfi	r1, fp, #8, #24
 80111ec:	e9c4 c701 	strd	ip, r7, [r4, #4]
 80111f0:	e9c4 3603 	strd	r3, r6, [r4, #12]
 80111f4:	e9c4 1205 	strd	r1, r2, [r4, #20]
 80111f8:	f8ba 3000 	ldrh.w	r3, [sl]
 80111fc:	b2ac      	uxth	r4, r5
 80111fe:	42ab      	cmp	r3, r5
 8011200:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8011204:	9301      	str	r3, [sp, #4]
 8011206:	d93b      	bls.n	8011280 <ai_platform_inputs_get+0xe0>
 8011208:	f8da 3004 	ldr.w	r3, [sl, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d037      	beq.n	8011280 <ai_platform_inputs_get+0xe0>
 8011210:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8011214:	2e00      	cmp	r6, #0
 8011216:	d033      	beq.n	8011280 <ai_platform_inputs_get+0xe0>
 8011218:	f8da 3008 	ldr.w	r3, [sl, #8]
 801121c:	69b2      	ldr	r2, [r6, #24]
 801121e:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8011222:	6810      	ldr	r0, [r2, #0]
 8011224:	68b3      	ldr	r3, [r6, #8]
 8011226:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 801122a:	68f2      	ldr	r2, [r6, #12]
 801122c:	444c      	add	r4, r9
 801122e:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8011232:	9200      	str	r2, [sp, #0]
 8011234:	f003 f814 	bl	8014260 <ai_array_to_buffer_fmt>
 8011238:	69b1      	ldr	r1, [r6, #24]
 801123a:	9a00      	ldr	r2, [sp, #0]
 801123c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8011240:	2f00      	cmp	r7, #0
 8011242:	d0c7      	beq.n	80111d4 <ai_platform_inputs_get+0x34>
 8011244:	2100      	movs	r1, #0
 8011246:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 801124a:	6831      	ldr	r1, [r6, #0]
 801124c:	6079      	str	r1, [r7, #4]
 801124e:	b111      	cbz	r1, 8011256 <ai_platform_inputs_get+0xb6>
 8011250:	8849      	ldrh	r1, [r1, #2]
 8011252:	2900      	cmp	r1, #0
 8011254:	d1b9      	bne.n	80111ca <ai_platform_inputs_get+0x2a>
 8011256:	69b1      	ldr	r1, [r6, #24]
 8011258:	2700      	movs	r7, #0
 801125a:	e7bb      	b.n	80111d4 <ai_platform_inputs_get+0x34>
 801125c:	9803      	ldr	r0, [sp, #12]
 801125e:	2400      	movs	r4, #0
 8011260:	2218      	movs	r2, #24
 8011262:	2111      	movs	r1, #17
 8011264:	300c      	adds	r0, #12
 8011266:	f000 fc09 	bl	8011a7c <core_set_error>
 801126a:	4620      	mov	r0, r4
 801126c:	9b02      	ldr	r3, [sp, #8]
 801126e:	b103      	cbz	r3, 8011272 <ai_platform_inputs_get+0xd2>
 8011270:	801c      	strh	r4, [r3, #0]
 8011272:	b005      	add	sp, #20
 8011274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011278:	2000      	movs	r0, #0
 801127a:	b005      	add	sp, #20
 801127c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011280:	2c00      	cmp	r4, #0
 8011282:	d0eb      	beq.n	801125c <ai_platform_inputs_get+0xbc>
 8011284:	f8da 3008 	ldr.w	r3, [sl, #8]
 8011288:	6858      	ldr	r0, [r3, #4]
 801128a:	e7ef      	b.n	801126c <ai_platform_inputs_get+0xcc>
 801128c:	a1c00100 	.word	0xa1c00100

08011290 <ai_platform_outputs_get>:
 8011290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011294:	4b38      	ldr	r3, [pc, #224]	@ (8011378 <ai_platform_outputs_get+0xe8>)
 8011296:	b085      	sub	sp, #20
 8011298:	6802      	ldr	r2, [r0, #0]
 801129a:	4393      	bics	r3, r2
 801129c:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80112a0:	d15f      	bne.n	8011362 <ai_platform_outputs_get+0xd2>
 80112a2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80112a4:	2b01      	cmp	r3, #1
 80112a6:	d94e      	bls.n	8011346 <ai_platform_outputs_get+0xb6>
 80112a8:	f04f 0900 	mov.w	r9, #0
 80112ac:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80112b0:	464d      	mov	r5, r9
 80112b2:	e016      	b.n	80112e2 <ai_platform_outputs_get+0x52>
 80112b4:	9901      	ldr	r1, [sp, #4]
 80112b6:	2301      	movs	r3, #1
 80112b8:	f848 3001 	str.w	r3, [r8, r1]
 80112bc:	69b1      	ldr	r1, [r6, #24]
 80112be:	f04f 0301 	mov.w	r3, #1
 80112c2:	684e      	ldr	r6, [r1, #4]
 80112c4:	3501      	adds	r5, #1
 80112c6:	f109 091c 	add.w	r9, r9, #28
 80112ca:	7523      	strb	r3, [r4, #20]
 80112cc:	2300      	movs	r3, #0
 80112ce:	6961      	ldr	r1, [r4, #20]
 80112d0:	6020      	str	r0, [r4, #0]
 80112d2:	f36b 211f 	bfi	r1, fp, #8, #24
 80112d6:	e9c4 c701 	strd	ip, r7, [r4, #4]
 80112da:	e9c4 3603 	strd	r3, r6, [r4, #12]
 80112de:	e9c4 1205 	strd	r1, r2, [r4, #20]
 80112e2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80112e6:	b2ac      	uxth	r4, r5
 80112e8:	42ab      	cmp	r3, r5
 80112ea:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80112ee:	9301      	str	r3, [sp, #4]
 80112f0:	d93b      	bls.n	801136a <ai_platform_outputs_get+0xda>
 80112f2:	f8da 3010 	ldr.w	r3, [sl, #16]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d037      	beq.n	801136a <ai_platform_outputs_get+0xda>
 80112fa:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80112fe:	2e00      	cmp	r6, #0
 8011300:	d033      	beq.n	801136a <ai_platform_outputs_get+0xda>
 8011302:	f8da 3014 	ldr.w	r3, [sl, #20]
 8011306:	69b2      	ldr	r2, [r6, #24]
 8011308:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 801130c:	6810      	ldr	r0, [r2, #0]
 801130e:	68b3      	ldr	r3, [r6, #8]
 8011310:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8011314:	68f2      	ldr	r2, [r6, #12]
 8011316:	444c      	add	r4, r9
 8011318:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 801131c:	9200      	str	r2, [sp, #0]
 801131e:	f002 ff9f 	bl	8014260 <ai_array_to_buffer_fmt>
 8011322:	69b1      	ldr	r1, [r6, #24]
 8011324:	9a00      	ldr	r2, [sp, #0]
 8011326:	f8d1 c008 	ldr.w	ip, [r1, #8]
 801132a:	2f00      	cmp	r7, #0
 801132c:	d0c7      	beq.n	80112be <ai_platform_outputs_get+0x2e>
 801132e:	2100      	movs	r1, #0
 8011330:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8011334:	6831      	ldr	r1, [r6, #0]
 8011336:	6079      	str	r1, [r7, #4]
 8011338:	b111      	cbz	r1, 8011340 <ai_platform_outputs_get+0xb0>
 801133a:	8849      	ldrh	r1, [r1, #2]
 801133c:	2900      	cmp	r1, #0
 801133e:	d1b9      	bne.n	80112b4 <ai_platform_outputs_get+0x24>
 8011340:	69b1      	ldr	r1, [r6, #24]
 8011342:	2700      	movs	r7, #0
 8011344:	e7bb      	b.n	80112be <ai_platform_outputs_get+0x2e>
 8011346:	9803      	ldr	r0, [sp, #12]
 8011348:	2400      	movs	r4, #0
 801134a:	2218      	movs	r2, #24
 801134c:	2111      	movs	r1, #17
 801134e:	300c      	adds	r0, #12
 8011350:	f000 fb94 	bl	8011a7c <core_set_error>
 8011354:	4620      	mov	r0, r4
 8011356:	9b02      	ldr	r3, [sp, #8]
 8011358:	b103      	cbz	r3, 801135c <ai_platform_outputs_get+0xcc>
 801135a:	801c      	strh	r4, [r3, #0]
 801135c:	b005      	add	sp, #20
 801135e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011362:	2000      	movs	r0, #0
 8011364:	b005      	add	sp, #20
 8011366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801136a:	2c00      	cmp	r4, #0
 801136c:	d0eb      	beq.n	8011346 <ai_platform_outputs_get+0xb6>
 801136e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8011372:	6858      	ldr	r0, [r3, #4]
 8011374:	e7ef      	b.n	8011356 <ai_platform_outputs_get+0xc6>
 8011376:	bf00      	nop
 8011378:	a1c00100 	.word	0xa1c00100

0801137c <ai_platform_network_create>:
 801137c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011380:	b083      	sub	sp, #12
 8011382:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8011386:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 801138a:	b320      	cbz	r0, 80113d6 <ai_platform_network_create+0x5a>
 801138c:	6002      	str	r2, [r0, #0]
 801138e:	4616      	mov	r6, r2
 8011390:	461f      	mov	r7, r3
 8011392:	4604      	mov	r4, r0
 8011394:	f000 fb6a 	bl	8011a6c <core_init>
 8011398:	b970      	cbnz	r0, 80113b8 <ai_platform_network_create+0x3c>
 801139a:	2530      	movs	r5, #48	@ 0x30
 801139c:	2300      	movs	r3, #0
 801139e:	6023      	str	r3, [r4, #0]
 80113a0:	2410      	movs	r4, #16
 80113a2:	464a      	mov	r2, r9
 80113a4:	4641      	mov	r1, r8
 80113a6:	4638      	mov	r0, r7
 80113a8:	f003 f804 	bl	80143b4 <ai_version_get>
 80113ac:	60b0      	str	r0, [r6, #8]
 80113ae:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80113b2:	b003      	add	sp, #12
 80113b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113b8:	2200      	movs	r2, #0
 80113ba:	4641      	mov	r1, r8
 80113bc:	4638      	mov	r0, r7
 80113be:	f002 fff9 	bl	80143b4 <ai_version_get>
 80113c2:	4605      	mov	r5, r0
 80113c4:	2200      	movs	r2, #0
 80113c6:	2105      	movs	r1, #5
 80113c8:	2001      	movs	r0, #1
 80113ca:	f002 fff3 	bl	80143b4 <ai_version_get>
 80113ce:	4285      	cmp	r5, r0
 80113d0:	d008      	beq.n	80113e4 <ai_platform_network_create+0x68>
 80113d2:	2501      	movs	r5, #1
 80113d4:	e7e2      	b.n	801139c <ai_platform_network_create+0x20>
 80113d6:	2510      	movs	r5, #16
 80113d8:	462c      	mov	r4, r5
 80113da:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80113de:	b003      	add	sp, #12
 80113e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113e4:	4b05      	ldr	r3, [pc, #20]	@ (80113fc <ai_platform_network_create+0x80>)
 80113e6:	a801      	add	r0, sp, #4
 80113e8:	9301      	str	r3, [sp, #4]
 80113ea:	f000 fb53 	bl	8011a94 <ai_check_custom_types>
 80113ee:	b110      	cbz	r0, 80113f6 <ai_platform_network_create+0x7a>
 80113f0:	2400      	movs	r4, #0
 80113f2:	4625      	mov	r5, r4
 80113f4:	e7d5      	b.n	80113a2 <ai_platform_network_create+0x26>
 80113f6:	2502      	movs	r5, #2
 80113f8:	e7d0      	b.n	801139c <ai_platform_network_create+0x20>
 80113fa:	bf00      	nop
 80113fc:	84048403 	.word	0x84048403

08011400 <ai_platform_network_init>:
 8011400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011404:	4a5c      	ldr	r2, [pc, #368]	@ (8011578 <ai_platform_network_init+0x178>)
 8011406:	460c      	mov	r4, r1
 8011408:	6801      	ldr	r1, [r0, #0]
 801140a:	438a      	bics	r2, r1
 801140c:	d133      	bne.n	8011476 <ai_platform_network_init+0x76>
 801140e:	4605      	mov	r5, r0
 8011410:	2c00      	cmp	r4, #0
 8011412:	f000 8093 	beq.w	801153c <ai_platform_network_init+0x13c>
 8011416:	f8d4 b000 	ldr.w	fp, [r4]
 801141a:	4a58      	ldr	r2, [pc, #352]	@ (801157c <ai_platform_network_init+0x17c>)
 801141c:	4593      	cmp	fp, r2
 801141e:	d10f      	bne.n	8011440 <ai_platform_network_init+0x40>
 8011420:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 8011424:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011428:	4b53      	ldr	r3, [pc, #332]	@ (8011578 <ai_platform_network_init+0x178>)
 801142a:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 801142e:	0c32      	lsrs	r2, r6, #16
 8011430:	4299      	cmp	r1, r3
 8011432:	d02c      	beq.n	801148e <ai_platform_network_init+0x8e>
 8011434:	2303      	movs	r3, #3
 8011436:	462c      	mov	r4, r5
 8011438:	612b      	str	r3, [r5, #16]
 801143a:	4620      	mov	r0, r4
 801143c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011440:	4627      	mov	r7, r4
 8011442:	2101      	movs	r1, #1
 8011444:	6864      	ldr	r4, [r4, #4]
 8011446:	4638      	mov	r0, r7
 8011448:	f107 081c 	add.w	r8, r7, #28
 801144c:	f7ff fd7e 	bl	8010f4c <ai_buffer_get_size>
 8011450:	4606      	mov	r6, r0
 8011452:	2101      	movs	r1, #1
 8011454:	4640      	mov	r0, r8
 8011456:	f8d7 9020 	ldr.w	r9, [r7, #32]
 801145a:	f7ff fd77 	bl	8010f4c <ai_buffer_get_size>
 801145e:	b976      	cbnz	r6, 801147e <ai_platform_network_init+0x7e>
 8011460:	2800      	cmp	r0, #0
 8011462:	d150      	bne.n	8011506 <ai_platform_network_init+0x106>
 8011464:	4680      	mov	r8, r0
 8011466:	4686      	mov	lr, r0
 8011468:	4606      	mov	r6, r0
 801146a:	4607      	mov	r7, r0
 801146c:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8011470:	6829      	ldr	r1, [r5, #0]
 8011472:	0436      	lsls	r6, r6, #16
 8011474:	e7d8      	b.n	8011428 <ai_platform_network_init+0x28>
 8011476:	2400      	movs	r4, #0
 8011478:	4620      	mov	r0, r4
 801147a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801147e:	2800      	cmp	r0, #0
 8011480:	d13b      	bne.n	80114fa <ai_platform_network_init+0xfa>
 8011482:	4680      	mov	r8, r0
 8011484:	4686      	mov	lr, r0
 8011486:	2c00      	cmp	r4, #0
 8011488:	d05e      	beq.n	8011548 <ai_platform_network_init+0x148>
 801148a:	2601      	movs	r6, #1
 801148c:	e7ee      	b.n	801146c <ai_platform_network_init+0x6c>
 801148e:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8011490:	4293      	cmp	r3, r2
 8011492:	4b3a      	ldr	r3, [pc, #232]	@ (801157c <ai_platform_network_init+0x17c>)
 8011494:	d33e      	bcc.n	8011514 <ai_platform_network_init+0x114>
 8011496:	459b      	cmp	fp, r3
 8011498:	d03e      	beq.n	8011518 <ai_platform_network_init+0x118>
 801149a:	b1a2      	cbz	r2, 80114c6 <ai_platform_network_init+0xc6>
 801149c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80114a0:	f04f 0c00 	mov.w	ip, #0
 80114a4:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80114a8:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 80114aa:	eb07 0b0c 	add.w	fp, r7, ip
 80114ae:	4464      	add	r4, ip
 80114b0:	f10c 0c1c 	add.w	ip, ip, #28
 80114b4:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80114b8:	45cc      	cmp	ip, r9
 80114ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80114bc:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 80114c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80114c4:	d1f0      	bne.n	80114a8 <ai_platform_network_init+0xa8>
 80114c6:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 80114c8:	622e      	str	r6, [r5, #32]
 80114ca:	4553      	cmp	r3, sl
 80114cc:	d34b      	bcc.n	8011566 <ai_platform_network_init+0x166>
 80114ce:	f1ba 0f00 	cmp.w	sl, #0
 80114d2:	d025      	beq.n	8011520 <ai_platform_network_init+0x120>
 80114d4:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 80114d8:	2700      	movs	r7, #0
 80114da:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80114de:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 80114e0:	eb08 0607 	add.w	r6, r8, r7
 80114e4:	443c      	add	r4, r7
 80114e6:	371c      	adds	r7, #28
 80114e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80114ea:	4557      	cmp	r7, sl
 80114ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80114ee:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80114f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80114f6:	d1f2      	bne.n	80114de <ai_platform_network_init+0xde>
 80114f8:	e012      	b.n	8011520 <ai_platform_network_init+0x120>
 80114fa:	f1b9 0f00 	cmp.w	r9, #0
 80114fe:	d015      	beq.n	801152c <ai_platform_network_init+0x12c>
 8011500:	f04f 0e01 	mov.w	lr, #1
 8011504:	e7bf      	b.n	8011486 <ai_platform_network_init+0x86>
 8011506:	f1b9 0f00 	cmp.w	r9, #0
 801150a:	d00f      	beq.n	801152c <ai_platform_network_init+0x12c>
 801150c:	f04f 0e01 	mov.w	lr, #1
 8011510:	4637      	mov	r7, r6
 8011512:	e7ab      	b.n	801146c <ai_platform_network_init+0x6c>
 8011514:	459b      	cmp	fp, r3
 8011516:	d11e      	bne.n	8011556 <ai_platform_network_init+0x156>
 8011518:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 801151c:	e9c5 6708 	strd	r6, r7, [r5, #32]
 8011520:	4628      	mov	r0, r5
 8011522:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 8011526:	f000 fadd 	bl	8011ae4 <ai_layers_init_all>
 801152a:	e783      	b.n	8011434 <ai_platform_network_init+0x34>
 801152c:	2213      	movs	r2, #19
 801152e:	2110      	movs	r1, #16
 8011530:	f105 000c 	add.w	r0, r5, #12
 8011534:	2400      	movs	r4, #0
 8011536:	f000 faa1 	bl	8011a7c <core_set_error>
 801153a:	e77e      	b.n	801143a <ai_platform_network_init+0x3a>
 801153c:	2211      	movs	r2, #17
 801153e:	2110      	movs	r1, #16
 8011540:	300c      	adds	r0, #12
 8011542:	f000 fa9b 	bl	8011a7c <core_set_error>
 8011546:	e778      	b.n	801143a <ai_platform_network_init+0x3a>
 8011548:	2212      	movs	r2, #18
 801154a:	2110      	movs	r1, #16
 801154c:	f105 000c 	add.w	r0, r5, #12
 8011550:	f000 fa94 	bl	8011a7c <core_set_error>
 8011554:	e771      	b.n	801143a <ai_platform_network_init+0x3a>
 8011556:	2212      	movs	r2, #18
 8011558:	2116      	movs	r1, #22
 801155a:	f105 000c 	add.w	r0, r5, #12
 801155e:	2400      	movs	r4, #0
 8011560:	f000 fa8c 	bl	8011a7c <core_set_error>
 8011564:	e769      	b.n	801143a <ai_platform_network_init+0x3a>
 8011566:	2213      	movs	r2, #19
 8011568:	2116      	movs	r1, #22
 801156a:	f105 000c 	add.w	r0, r5, #12
 801156e:	2400      	movs	r4, #0
 8011570:	f000 fa84 	bl	8011a7c <core_set_error>
 8011574:	e761      	b.n	801143a <ai_platform_network_init+0x3a>
 8011576:	bf00      	nop
 8011578:	a1c00100 	.word	0xa1c00100
 801157c:	a1facade 	.word	0xa1facade

08011580 <ai_platform_network_post_init>:
 8011580:	b538      	push	{r3, r4, r5, lr}
 8011582:	4b16      	ldr	r3, [pc, #88]	@ (80115dc <ai_platform_network_post_init+0x5c>)
 8011584:	6802      	ldr	r2, [r0, #0]
 8011586:	ea02 0103 	and.w	r1, r2, r3
 801158a:	4393      	bics	r3, r2
 801158c:	d108      	bne.n	80115a0 <ai_platform_network_post_init+0x20>
 801158e:	6903      	ldr	r3, [r0, #16]
 8011590:	4604      	mov	r4, r0
 8011592:	f013 0502 	ands.w	r5, r3, #2
 8011596:	d005      	beq.n	80115a4 <ai_platform_network_post_init+0x24>
 8011598:	428a      	cmp	r2, r1
 801159a:	d00a      	beq.n	80115b2 <ai_platform_network_post_init+0x32>
 801159c:	2001      	movs	r0, #1
 801159e:	bd38      	pop	{r3, r4, r5, pc}
 80115a0:	2000      	movs	r0, #0
 80115a2:	bd38      	pop	{r3, r4, r5, pc}
 80115a4:	2210      	movs	r2, #16
 80115a6:	2111      	movs	r1, #17
 80115a8:	300c      	adds	r0, #12
 80115aa:	f000 fa67 	bl	8011a7c <core_set_error>
 80115ae:	4628      	mov	r0, r5
 80115b0:	bd38      	pop	{r3, r4, r5, pc}
 80115b2:	f000 faa5 	bl	8011b00 <ai_layers_post_init_all>
 80115b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d0ef      	beq.n	801159c <ai_platform_network_post_init+0x1c>
 80115bc:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80115be:	e008      	b.n	80115d2 <ai_platform_network_post_init+0x52>
 80115c0:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 80115c4:	4798      	blx	r3
 80115c6:	692b      	ldr	r3, [r5, #16]
 80115c8:	42ab      	cmp	r3, r5
 80115ca:	461d      	mov	r5, r3
 80115cc:	d0e6      	beq.n	801159c <ai_platform_network_post_init+0x1c>
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d0e4      	beq.n	801159c <ai_platform_network_post_init+0x1c>
 80115d2:	4629      	mov	r1, r5
 80115d4:	2000      	movs	r0, #0
 80115d6:	2d00      	cmp	r5, #0
 80115d8:	d1f2      	bne.n	80115c0 <ai_platform_network_post_init+0x40>
 80115da:	e7df      	b.n	801159c <ai_platform_network_post_init+0x1c>
 80115dc:	a1c00100 	.word	0xa1c00100

080115e0 <ai_platform_network_process>:
 80115e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e4:	b085      	sub	sp, #20
 80115e6:	4bb7      	ldr	r3, [pc, #732]	@ (80118c4 <ai_platform_network_process+0x2e4>)
 80115e8:	9202      	str	r2, [sp, #8]
 80115ea:	6802      	ldr	r2, [r0, #0]
 80115ec:	4393      	bics	r3, r2
 80115ee:	f040 8142 	bne.w	8011876 <ai_platform_network_process+0x296>
 80115f2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80115f4:	4605      	mov	r5, r0
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f000 8126 	beq.w	8011848 <ai_platform_network_process+0x268>
 80115fc:	6903      	ldr	r3, [r0, #16]
 80115fe:	2200      	movs	r2, #0
 8011600:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 8011604:	f003 0303 	and.w	r3, r3, #3
 8011608:	6182      	str	r2, [r0, #24]
 801160a:	2b03      	cmp	r3, #3
 801160c:	f040 8122 	bne.w	8011854 <ai_platform_network_process+0x274>
 8011610:	2900      	cmp	r1, #0
 8011612:	f000 8136 	beq.w	8011882 <ai_platform_network_process+0x2a2>
 8011616:	fab8 f788 	clz	r7, r8
 801161a:	097f      	lsrs	r7, r7, #5
 801161c:	f1b8 0f00 	cmp.w	r8, #0
 8011620:	f000 812f 	beq.w	8011882 <ai_platform_network_process+0x2a2>
 8011624:	f8b8 3000 	ldrh.w	r3, [r8]
 8011628:	2b00      	cmp	r3, #0
 801162a:	f000 812a 	beq.w	8011882 <ai_platform_network_process+0x2a2>
 801162e:	698b      	ldr	r3, [r1, #24]
 8011630:	460e      	mov	r6, r1
 8011632:	9003      	str	r0, [sp, #12]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	9301      	str	r3, [sp, #4]
 8011638:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d072      	beq.n	8011726 <ai_platform_network_process+0x146>
 8011640:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8011644:	2c00      	cmp	r4, #0
 8011646:	d06e      	beq.n	8011726 <ai_platform_network_process+0x146>
 8011648:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801164c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8011650:	f8d3 a000 	ldr.w	sl, [r3]
 8011654:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8011658:	f000 8112 	beq.w	8011880 <ai_platform_network_process+0x2a0>
 801165c:	69a3      	ldr	r3, [r4, #24]
 801165e:	2101      	movs	r1, #1
 8011660:	4630      	mov	r0, r6
 8011662:	685d      	ldr	r5, [r3, #4]
 8011664:	f7ff fc72 	bl	8010f4c <ai_buffer_get_size>
 8011668:	4285      	cmp	r5, r0
 801166a:	f0c0 8115 	bcc.w	8011898 <ai_platform_network_process+0x2b8>
 801166e:	68e0      	ldr	r0, [r4, #12]
 8011670:	69b1      	ldr	r1, [r6, #24]
 8011672:	68c2      	ldr	r2, [r0, #12]
 8011674:	68cb      	ldr	r3, [r1, #12]
 8011676:	429a      	cmp	r2, r3
 8011678:	f040 810e 	bne.w	8011898 <ai_platform_network_process+0x2b8>
 801167c:	6882      	ldr	r2, [r0, #8]
 801167e:	688b      	ldr	r3, [r1, #8]
 8011680:	429a      	cmp	r2, r3
 8011682:	f040 8109 	bne.w	8011898 <ai_platform_network_process+0x2b8>
 8011686:	6842      	ldr	r2, [r0, #4]
 8011688:	684b      	ldr	r3, [r1, #4]
 801168a:	429a      	cmp	r2, r3
 801168c:	f040 8104 	bne.w	8011898 <ai_platform_network_process+0x2b8>
 8011690:	69a3      	ldr	r3, [r4, #24]
 8011692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011696:	f002 fe7b 	bl	8014390 <ai_array_get_data_byte_size>
 801169a:	4605      	mov	r5, r0
 801169c:	4620      	mov	r0, r4
 801169e:	f002 fe8f 	bl	80143c0 <get_tensor_byte_size>
 80116a2:	4285      	cmp	r5, r0
 80116a4:	f0c0 80f8 	bcc.w	8011898 <ai_platform_network_process+0x2b8>
 80116a8:	69a3      	ldr	r3, [r4, #24]
 80116aa:	6818      	ldr	r0, [r3, #0]
 80116ac:	f002 fdd8 	bl	8014260 <ai_array_to_buffer_fmt>
 80116b0:	6833      	ldr	r3, [r6, #0]
 80116b2:	4058      	eors	r0, r3
 80116b4:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80116b8:	f040 81a4 	bne.w	8011a04 <ai_platform_network_process+0x424>
 80116bc:	6873      	ldr	r3, [r6, #4]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	f000 80de 	beq.w	8011880 <ai_platform_network_process+0x2a0>
 80116c4:	69b3      	ldr	r3, [r6, #24]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	f000 81a4 	beq.w	8011a16 <ai_platform_network_process+0x436>
 80116ce:	9a01      	ldr	r2, [sp, #4]
 80116d0:	4620      	mov	r0, r4
 80116d2:	3701      	adds	r7, #1
 80116d4:	361c      	adds	r6, #28
 80116d6:	429a      	cmp	r2, r3
 80116d8:	bf38      	it	cc
 80116da:	461a      	movcc	r2, r3
 80116dc:	9201      	str	r2, [sp, #4]
 80116de:	f002 fe6f 	bl	80143c0 <get_tensor_byte_size>
 80116e2:	f8c9 0008 	str.w	r0, [r9, #8]
 80116e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	fb00 f303 	mul.w	r3, r0, r3
 80116f0:	f8c9 300c 	str.w	r3, [r9, #12]
 80116f4:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80116f8:	440b      	add	r3, r1
 80116fa:	f8c9 1004 	str.w	r1, [r9, #4]
 80116fe:	f84a 300b 	str.w	r3, [sl, fp]
 8011702:	69a0      	ldr	r0, [r4, #24]
 8011704:	6803      	ldr	r3, [r0, #0]
 8011706:	009a      	lsls	r2, r3, #2
 8011708:	f100 80af 	bmi.w	801186a <ai_platform_network_process+0x28a>
 801170c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8011710:	1a9b      	subs	r3, r3, r2
 8011712:	4419      	add	r1, r3
 8011714:	6081      	str	r1, [r0, #8]
 8011716:	69a3      	ldr	r3, [r4, #24]
 8011718:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801171c:	60da      	str	r2, [r3, #12]
 801171e:	f8b8 3000 	ldrh.w	r3, [r8]
 8011722:	42bb      	cmp	r3, r7
 8011724:	d888      	bhi.n	8011638 <ai_platform_network_process+0x58>
 8011726:	9d03      	ldr	r5, [sp, #12]
 8011728:	9b02      	ldr	r3, [sp, #8]
 801172a:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 801172c:	2b00      	cmp	r3, #0
 801172e:	f000 817b 	beq.w	8011a28 <ai_platform_network_process+0x448>
 8011732:	2a01      	cmp	r2, #1
 8011734:	f240 80bd 	bls.w	80118b2 <ai_platform_network_process+0x2d2>
 8011738:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 801173c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8011740:	2b00      	cmp	r3, #0
 8011742:	f000 80b6 	beq.w	80118b2 <ai_platform_network_process+0x2d2>
 8011746:	2700      	movs	r7, #0
 8011748:	f8dd b008 	ldr.w	fp, [sp, #8]
 801174c:	9502      	str	r5, [sp, #8]
 801174e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011752:	2b00      	cmp	r3, #0
 8011754:	f000 80bd 	beq.w	80118d2 <ai_platform_network_process+0x2f2>
 8011758:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 801175c:	2e00      	cmp	r6, #0
 801175e:	f000 80b8 	beq.w	80118d2 <ai_platform_network_process+0x2f2>
 8011762:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011766:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801176a:	681c      	ldr	r4, [r3, #0]
 801176c:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 8011770:	f000 8170 	beq.w	8011a54 <ai_platform_network_process+0x474>
 8011774:	69b3      	ldr	r3, [r6, #24]
 8011776:	2101      	movs	r1, #1
 8011778:	4658      	mov	r0, fp
 801177a:	685d      	ldr	r5, [r3, #4]
 801177c:	f7ff fbe6 	bl	8010f4c <ai_buffer_get_size>
 8011780:	4285      	cmp	r5, r0
 8011782:	f0c0 8095 	bcc.w	80118b0 <ai_platform_network_process+0x2d0>
 8011786:	68f0      	ldr	r0, [r6, #12]
 8011788:	f8db 1018 	ldr.w	r1, [fp, #24]
 801178c:	68c2      	ldr	r2, [r0, #12]
 801178e:	68cb      	ldr	r3, [r1, #12]
 8011790:	429a      	cmp	r2, r3
 8011792:	f040 808d 	bne.w	80118b0 <ai_platform_network_process+0x2d0>
 8011796:	6882      	ldr	r2, [r0, #8]
 8011798:	688b      	ldr	r3, [r1, #8]
 801179a:	429a      	cmp	r2, r3
 801179c:	f040 8088 	bne.w	80118b0 <ai_platform_network_process+0x2d0>
 80117a0:	6842      	ldr	r2, [r0, #4]
 80117a2:	684b      	ldr	r3, [r1, #4]
 80117a4:	429a      	cmp	r2, r3
 80117a6:	f040 8083 	bne.w	80118b0 <ai_platform_network_process+0x2d0>
 80117aa:	69b3      	ldr	r3, [r6, #24]
 80117ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80117b0:	f002 fdee 	bl	8014390 <ai_array_get_data_byte_size>
 80117b4:	9003      	str	r0, [sp, #12]
 80117b6:	4630      	mov	r0, r6
 80117b8:	f002 fe02 	bl	80143c0 <get_tensor_byte_size>
 80117bc:	9b03      	ldr	r3, [sp, #12]
 80117be:	4283      	cmp	r3, r0
 80117c0:	d376      	bcc.n	80118b0 <ai_platform_network_process+0x2d0>
 80117c2:	69b3      	ldr	r3, [r6, #24]
 80117c4:	6818      	ldr	r0, [r3, #0]
 80117c6:	f002 fd4b 	bl	8014260 <ai_array_to_buffer_fmt>
 80117ca:	f8db 3000 	ldr.w	r3, [fp]
 80117ce:	4058      	eors	r0, r3
 80117d0:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80117d4:	f040 812c 	bne.w	8011a30 <ai_platform_network_process+0x450>
 80117d8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	f000 8139 	beq.w	8011a54 <ai_platform_network_process+0x474>
 80117e2:	f8db 3018 	ldr.w	r3, [fp, #24]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	f000 812a 	beq.w	8011a42 <ai_platform_network_process+0x462>
 80117ee:	9a01      	ldr	r2, [sp, #4]
 80117f0:	4630      	mov	r0, r6
 80117f2:	3701      	adds	r7, #1
 80117f4:	f10b 0b1c 	add.w	fp, fp, #28
 80117f8:	429a      	cmp	r2, r3
 80117fa:	bf38      	it	cc
 80117fc:	461a      	movcc	r2, r3
 80117fe:	9201      	str	r2, [sp, #4]
 8011800:	f002 fdde 	bl	80143c0 <get_tensor_byte_size>
 8011804:	f8c8 0008 	str.w	r0, [r8, #8]
 8011808:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	fb00 f303 	mul.w	r3, r0, r3
 8011812:	f8c8 300c 	str.w	r3, [r8, #12]
 8011816:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 801181a:	440b      	add	r3, r1
 801181c:	f8c8 1004 	str.w	r1, [r8, #4]
 8011820:	f844 300a 	str.w	r3, [r4, sl]
 8011824:	69b0      	ldr	r0, [r6, #24]
 8011826:	6803      	ldr	r3, [r0, #0]
 8011828:	009b      	lsls	r3, r3, #2
 801182a:	d44d      	bmi.n	80118c8 <ai_platform_network_process+0x2e8>
 801182c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8011830:	1a9b      	subs	r3, r3, r2
 8011832:	4419      	add	r1, r3
 8011834:	6081      	str	r1, [r0, #8]
 8011836:	69b3      	ldr	r3, [r6, #24]
 8011838:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801183c:	60da      	str	r2, [r3, #12]
 801183e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8011842:	42bb      	cmp	r3, r7
 8011844:	d883      	bhi.n	801174e <ai_platform_network_process+0x16e>
 8011846:	e044      	b.n	80118d2 <ai_platform_network_process+0x2f2>
 8011848:	6902      	ldr	r2, [r0, #16]
 801184a:	6183      	str	r3, [r0, #24]
 801184c:	f002 0203 	and.w	r2, r2, #3
 8011850:	2a03      	cmp	r2, #3
 8011852:	d016      	beq.n	8011882 <ai_platform_network_process+0x2a2>
 8011854:	2230      	movs	r2, #48	@ 0x30
 8011856:	2111      	movs	r1, #17
 8011858:	f105 000c 	add.w	r0, r5, #12
 801185c:	2400      	movs	r4, #0
 801185e:	f000 f90d 	bl	8011a7c <core_set_error>
 8011862:	4620      	mov	r0, r4
 8011864:	b005      	add	sp, #20
 8011866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801186a:	f8b8 3000 	ldrh.w	r3, [r8]
 801186e:	429f      	cmp	r7, r3
 8011870:	f4ff aee2 	bcc.w	8011638 <ai_platform_network_process+0x58>
 8011874:	e757      	b.n	8011726 <ai_platform_network_process+0x146>
 8011876:	2400      	movs	r4, #0
 8011878:	4620      	mov	r0, r4
 801187a:	b005      	add	sp, #20
 801187c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011880:	9d03      	ldr	r5, [sp, #12]
 8011882:	2400      	movs	r4, #0
 8011884:	2217      	movs	r2, #23
 8011886:	2112      	movs	r1, #18
 8011888:	f105 000c 	add.w	r0, r5, #12
 801188c:	f000 f8f6 	bl	8011a7c <core_set_error>
 8011890:	4620      	mov	r0, r4
 8011892:	b005      	add	sp, #20
 8011894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011898:	9d03      	ldr	r5, [sp, #12]
 801189a:	2400      	movs	r4, #0
 801189c:	2218      	movs	r2, #24
 801189e:	2112      	movs	r1, #18
 80118a0:	f105 000c 	add.w	r0, r5, #12
 80118a4:	f000 f8ea 	bl	8011a7c <core_set_error>
 80118a8:	4620      	mov	r0, r4
 80118aa:	b005      	add	sp, #20
 80118ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118b0:	9d02      	ldr	r5, [sp, #8]
 80118b2:	2218      	movs	r2, #24
 80118b4:	2113      	movs	r1, #19
 80118b6:	f105 000c 	add.w	r0, r5, #12
 80118ba:	2400      	movs	r4, #0
 80118bc:	f000 f8de 	bl	8011a7c <core_set_error>
 80118c0:	e7cf      	b.n	8011862 <ai_platform_network_process+0x282>
 80118c2:	bf00      	nop
 80118c4:	a1c00100 	.word	0xa1c00100
 80118c8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80118cc:	429f      	cmp	r7, r3
 80118ce:	f4ff af3e 	bcc.w	801174e <ai_platform_network_process+0x16e>
 80118d2:	9d02      	ldr	r5, [sp, #8]
 80118d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80118d8:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80118da:	832b      	strh	r3, [r5, #24]
 80118dc:	2a00      	cmp	r2, #0
 80118de:	f040 808b 	bne.w	80119f8 <ai_platform_network_process+0x418>
 80118e2:	4616      	mov	r6, r2
 80118e4:	4617      	mov	r7, r2
 80118e6:	8b6c      	ldrh	r4, [r5, #26]
 80118e8:	429c      	cmp	r4, r3
 80118ea:	d2ba      	bcs.n	8011862 <ai_platform_network_process+0x282>
 80118ec:	46ab      	mov	fp, r5
 80118ee:	2e00      	cmp	r6, #0
 80118f0:	d030      	beq.n	8011954 <ai_platform_network_process+0x374>
 80118f2:	f04f 0800 	mov.w	r8, #0
 80118f6:	e014      	b.n	8011922 <ai_platform_network_process+0x342>
 80118f8:	6882      	ldr	r2, [r0, #8]
 80118fa:	68c5      	ldr	r5, [r0, #12]
 80118fc:	6863      	ldr	r3, [r4, #4]
 80118fe:	1b52      	subs	r2, r2, r5
 8011900:	4413      	add	r3, r2
 8011902:	6083      	str	r3, [r0, #8]
 8011904:	698b      	ldr	r3, [r1, #24]
 8011906:	6862      	ldr	r2, [r4, #4]
 8011908:	60da      	str	r2, [r3, #12]
 801190a:	f859 200a 	ldr.w	r2, [r9, sl]
 801190e:	f108 0801 	add.w	r8, r8, #1
 8011912:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8011916:	440b      	add	r3, r1
 8011918:	4293      	cmp	r3, r2
 801191a:	d301      	bcc.n	8011920 <ai_platform_network_process+0x340>
 801191c:	68e3      	ldr	r3, [r4, #12]
 801191e:	1ad3      	subs	r3, r2, r3
 8011920:	6063      	str	r3, [r4, #4]
 8011922:	8833      	ldrh	r3, [r6, #0]
 8011924:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8011928:	4543      	cmp	r3, r8
 801192a:	d913      	bls.n	8011954 <ai_platform_network_process+0x374>
 801192c:	6873      	ldr	r3, [r6, #4]
 801192e:	b18b      	cbz	r3, 8011954 <ai_platform_network_process+0x374>
 8011930:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8011934:	b171      	cbz	r1, 8011954 <ai_platform_network_process+0x374>
 8011936:	6988      	ldr	r0, [r1, #24]
 8011938:	68b2      	ldr	r2, [r6, #8]
 801193a:	6803      	ldr	r3, [r0, #0]
 801193c:	f8d2 9000 	ldr.w	r9, [r2]
 8011940:	009d      	lsls	r5, r3, #2
 8011942:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8011946:	d5d7      	bpl.n	80118f8 <ai_platform_network_process+0x318>
 8011948:	6881      	ldr	r1, [r0, #8]
 801194a:	68a2      	ldr	r2, [r4, #8]
 801194c:	6860      	ldr	r0, [r4, #4]
 801194e:	f002 fbe5 	bl	801411c <st_int8_copy>
 8011952:	e7da      	b.n	801190a <ai_platform_network_process+0x32a>
 8011954:	4658      	mov	r0, fp
 8011956:	f000 f8e7 	bl	8011b28 <ai_layers_forward_all>
 801195a:	2f00      	cmp	r7, #0
 801195c:	d03d      	beq.n	80119da <ai_platform_network_process+0x3fa>
 801195e:	2400      	movs	r4, #0
 8011960:	e016      	b.n	8011990 <ai_platform_network_process+0x3b0>
 8011962:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8011966:	f859 100a 	ldr.w	r1, [r9, sl]
 801196a:	4413      	add	r3, r2
 801196c:	428b      	cmp	r3, r1
 801196e:	d302      	bcc.n	8011976 <ai_platform_network_process+0x396>
 8011970:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011974:	1acb      	subs	r3, r1, r3
 8011976:	f8c8 3004 	str.w	r3, [r8, #4]
 801197a:	6981      	ldr	r1, [r0, #24]
 801197c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8011980:	1b52      	subs	r2, r2, r5
 8011982:	4413      	add	r3, r2
 8011984:	608b      	str	r3, [r1, #8]
 8011986:	6983      	ldr	r3, [r0, #24]
 8011988:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801198c:	60da      	str	r2, [r3, #12]
 801198e:	3401      	adds	r4, #1
 8011990:	883b      	ldrh	r3, [r7, #0]
 8011992:	42a3      	cmp	r3, r4
 8011994:	d921      	bls.n	80119da <ai_platform_network_process+0x3fa>
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	b1fb      	cbz	r3, 80119da <ai_platform_network_process+0x3fa>
 801199a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801199e:	b1e0      	cbz	r0, 80119da <ai_platform_network_process+0x3fa>
 80119a0:	68ba      	ldr	r2, [r7, #8]
 80119a2:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80119a6:	6983      	ldr	r3, [r0, #24]
 80119a8:	f8d2 9000 	ldr.w	r9, [r2]
 80119ac:	681a      	ldr	r2, [r3, #0]
 80119ae:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80119b2:	0092      	lsls	r2, r2, #2
 80119b4:	d5d5      	bpl.n	8011962 <ai_platform_network_process+0x382>
 80119b6:	6898      	ldr	r0, [r3, #8]
 80119b8:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80119bc:	f002 fbae 	bl	801411c <st_int8_copy>
 80119c0:	f859 200a 	ldr.w	r2, [r9, sl]
 80119c4:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80119c8:	440b      	add	r3, r1
 80119ca:	4293      	cmp	r3, r2
 80119cc:	d302      	bcc.n	80119d4 <ai_platform_network_process+0x3f4>
 80119ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80119d2:	1ad3      	subs	r3, r2, r3
 80119d4:	f8c8 3004 	str.w	r3, [r8, #4]
 80119d8:	e7d9      	b.n	801198e <ai_platform_network_process+0x3ae>
 80119da:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 80119de:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80119e2:	3401      	adds	r4, #1
 80119e4:	b2a4      	uxth	r4, r4
 80119e6:	42a3      	cmp	r3, r4
 80119e8:	f8ab 401a 	strh.w	r4, [fp, #26]
 80119ec:	f63f af7f 	bhi.w	80118ee <ai_platform_network_process+0x30e>
 80119f0:	4620      	mov	r0, r4
 80119f2:	b005      	add	sp, #20
 80119f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119f8:	2a01      	cmp	r2, #1
 80119fa:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 80119fc:	d033      	beq.n	8011a66 <ai_platform_network_process+0x486>
 80119fe:	f106 070c 	add.w	r7, r6, #12
 8011a02:	e770      	b.n	80118e6 <ai_platform_network_process+0x306>
 8011a04:	9d03      	ldr	r5, [sp, #12]
 8011a06:	2219      	movs	r2, #25
 8011a08:	2112      	movs	r1, #18
 8011a0a:	2400      	movs	r4, #0
 8011a0c:	f105 000c 	add.w	r0, r5, #12
 8011a10:	f000 f834 	bl	8011a7c <core_set_error>
 8011a14:	e725      	b.n	8011862 <ai_platform_network_process+0x282>
 8011a16:	9d03      	ldr	r5, [sp, #12]
 8011a18:	4604      	mov	r4, r0
 8011a1a:	2221      	movs	r2, #33	@ 0x21
 8011a1c:	2112      	movs	r1, #18
 8011a1e:	f105 000c 	add.w	r0, r5, #12
 8011a22:	f000 f82b 	bl	8011a7c <core_set_error>
 8011a26:	e71c      	b.n	8011862 <ai_platform_network_process+0x282>
 8011a28:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011a2c:	832b      	strh	r3, [r5, #24]
 8011a2e:	e755      	b.n	80118dc <ai_platform_network_process+0x2fc>
 8011a30:	9d02      	ldr	r5, [sp, #8]
 8011a32:	2219      	movs	r2, #25
 8011a34:	2113      	movs	r1, #19
 8011a36:	2400      	movs	r4, #0
 8011a38:	f105 000c 	add.w	r0, r5, #12
 8011a3c:	f000 f81e 	bl	8011a7c <core_set_error>
 8011a40:	e70f      	b.n	8011862 <ai_platform_network_process+0x282>
 8011a42:	9d02      	ldr	r5, [sp, #8]
 8011a44:	4604      	mov	r4, r0
 8011a46:	2221      	movs	r2, #33	@ 0x21
 8011a48:	2113      	movs	r1, #19
 8011a4a:	f105 000c 	add.w	r0, r5, #12
 8011a4e:	f000 f815 	bl	8011a7c <core_set_error>
 8011a52:	e706      	b.n	8011862 <ai_platform_network_process+0x282>
 8011a54:	9d02      	ldr	r5, [sp, #8]
 8011a56:	2217      	movs	r2, #23
 8011a58:	2113      	movs	r1, #19
 8011a5a:	2400      	movs	r4, #0
 8011a5c:	f105 000c 	add.w	r0, r5, #12
 8011a60:	f000 f80c 	bl	8011a7c <core_set_error>
 8011a64:	e6fd      	b.n	8011862 <ai_platform_network_process+0x282>
 8011a66:	2700      	movs	r7, #0
 8011a68:	e73d      	b.n	80118e6 <ai_platform_network_process+0x306>
 8011a6a:	bf00      	nop

08011a6c <core_init>:
 8011a6c:	2001      	movs	r0, #1
 8011a6e:	4770      	bx	lr

08011a70 <core_get_error>:
 8011a70:	4603      	mov	r3, r0
 8011a72:	2200      	movs	r2, #0
 8011a74:	6800      	ldr	r0, [r0, #0]
 8011a76:	601a      	str	r2, [r3, #0]
 8011a78:	4770      	bx	lr
 8011a7a:	bf00      	nop

08011a7c <core_set_error>:
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	7800      	ldrb	r0, [r0, #0]
 8011a80:	b108      	cbz	r0, 8011a86 <core_set_error+0xa>
 8011a82:	2000      	movs	r0, #0
 8011a84:	4770      	bx	lr
 8011a86:	7019      	strb	r1, [r3, #0]
 8011a88:	2001      	movs	r0, #1
 8011a8a:	6819      	ldr	r1, [r3, #0]
 8011a8c:	f362 211f 	bfi	r1, r2, #8, #24
 8011a90:	6019      	str	r1, [r3, #0]
 8011a92:	4770      	bx	lr

08011a94 <ai_check_custom_types>:
 8011a94:	b082      	sub	sp, #8
 8011a96:	4b12      	ldr	r3, [pc, #72]	@ (8011ae0 <ai_check_custom_types+0x4c>)
 8011a98:	9301      	str	r3, [sp, #4]
 8011a9a:	b118      	cbz	r0, 8011aa4 <ai_check_custom_types+0x10>
 8011a9c:	7803      	ldrb	r3, [r0, #0]
 8011a9e:	2b03      	cmp	r3, #3
 8011aa0:	d002      	beq.n	8011aa8 <ai_check_custom_types+0x14>
 8011aa2:	2000      	movs	r0, #0
 8011aa4:	b002      	add	sp, #8
 8011aa6:	4770      	bx	lr
 8011aa8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011aac:	4293      	cmp	r3, r2
 8011aae:	d004      	beq.n	8011aba <ai_check_custom_types+0x26>
 8011ab0:	2001      	movs	r0, #1
 8011ab2:	f080 0001 	eor.w	r0, r0, #1
 8011ab6:	b002      	add	sp, #8
 8011ab8:	4770      	bx	lr
 8011aba:	7842      	ldrb	r2, [r0, #1]
 8011abc:	3001      	adds	r0, #1
 8011abe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d1f4      	bne.n	8011ab0 <ai_check_custom_types+0x1c>
 8011ac6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8011aca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d1ee      	bne.n	8011ab0 <ai_check_custom_types+0x1c>
 8011ad2:	7842      	ldrb	r2, [r0, #1]
 8011ad4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d1e9      	bne.n	8011ab0 <ai_check_custom_types+0x1c>
 8011adc:	2000      	movs	r0, #0
 8011ade:	e7e8      	b.n	8011ab2 <ai_check_custom_types+0x1e>
 8011ae0:	84048403 	.word	0x84048403

08011ae4 <ai_layers_init_all>:
 8011ae4:	2100      	movs	r1, #0
 8011ae6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8011ae8:	b13b      	cbz	r3, 8011afa <ai_layers_init_all+0x16>
 8011aea:	691a      	ldr	r2, [r3, #16]
 8011aec:	3101      	adds	r1, #1
 8011aee:	60d8      	str	r0, [r3, #12]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	4613      	mov	r3, r2
 8011af4:	d001      	beq.n	8011afa <ai_layers_init_all+0x16>
 8011af6:	2a00      	cmp	r2, #0
 8011af8:	d1f6      	bne.n	8011ae8 <ai_layers_init_all+0x4>
 8011afa:	4608      	mov	r0, r1
 8011afc:	4770      	bx	lr
 8011afe:	bf00      	nop

08011b00 <ai_layers_post_init_all>:
 8011b00:	b538      	push	{r3, r4, r5, lr}
 8011b02:	2500      	movs	r5, #0
 8011b04:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8011b06:	b16c      	cbz	r4, 8011b24 <ai_layers_post_init_all+0x24>
 8011b08:	6863      	ldr	r3, [r4, #4]
 8011b0a:	07db      	lsls	r3, r3, #31
 8011b0c:	d504      	bpl.n	8011b18 <ai_layers_post_init_all+0x18>
 8011b0e:	6a23      	ldr	r3, [r4, #32]
 8011b10:	4620      	mov	r0, r4
 8011b12:	b10b      	cbz	r3, 8011b18 <ai_layers_post_init_all+0x18>
 8011b14:	3501      	adds	r5, #1
 8011b16:	4798      	blx	r3
 8011b18:	6923      	ldr	r3, [r4, #16]
 8011b1a:	42a3      	cmp	r3, r4
 8011b1c:	461c      	mov	r4, r3
 8011b1e:	d001      	beq.n	8011b24 <ai_layers_post_init_all+0x24>
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d1f0      	bne.n	8011b06 <ai_layers_post_init_all+0x6>
 8011b24:	4628      	mov	r0, r5
 8011b26:	bd38      	pop	{r3, r4, r5, pc}

08011b28 <ai_layers_forward_all>:
 8011b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b2c:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8011b30:	4604      	mov	r4, r0
 8011b32:	f1b8 0f00 	cmp.w	r8, #0
 8011b36:	d02a      	beq.n	8011b8e <ai_layers_forward_all+0x66>
 8011b38:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8011b3a:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8011b3c:	b319      	cbz	r1, 8011b86 <ai_layers_forward_all+0x5e>
 8011b3e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8011b40:	2001      	movs	r0, #1
 8011b42:	47c0      	blx	r8
 8011b44:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8011b46:	b1f6      	cbz	r6, 8011b86 <ai_layers_forward_all+0x5e>
 8011b48:	2700      	movs	r7, #0
 8011b4a:	4631      	mov	r1, r6
 8011b4c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8011b4e:	2002      	movs	r0, #2
 8011b50:	47c0      	blx	r8
 8011b52:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8011b54:	4628      	mov	r0, r5
 8011b56:	696b      	ldr	r3, [r5, #20]
 8011b58:	4798      	blx	r3
 8011b5a:	692e      	ldr	r6, [r5, #16]
 8011b5c:	2003      	movs	r0, #3
 8011b5e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8011b60:	42b5      	cmp	r5, r6
 8011b62:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8011b64:	d007      	beq.n	8011b76 <ai_layers_forward_all+0x4e>
 8011b66:	47c0      	blx	r8
 8011b68:	3701      	adds	r7, #1
 8011b6a:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8011b6c:	2e00      	cmp	r6, #0
 8011b6e:	d1ec      	bne.n	8011b4a <ai_layers_forward_all+0x22>
 8011b70:	4638      	mov	r0, r7
 8011b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b76:	2003      	movs	r0, #3
 8011b78:	3701      	adds	r7, #1
 8011b7a:	47c0      	blx	r8
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	4638      	mov	r0, r7
 8011b80:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8011b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b86:	2700      	movs	r7, #0
 8011b88:	4638      	mov	r0, r7
 8011b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b8e:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8011b90:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8011b92:	2d00      	cmp	r5, #0
 8011b94:	d0f7      	beq.n	8011b86 <ai_layers_forward_all+0x5e>
 8011b96:	4647      	mov	r7, r8
 8011b98:	696b      	ldr	r3, [r5, #20]
 8011b9a:	4628      	mov	r0, r5
 8011b9c:	4798      	blx	r3
 8011b9e:	462b      	mov	r3, r5
 8011ba0:	692d      	ldr	r5, [r5, #16]
 8011ba2:	429d      	cmp	r5, r3
 8011ba4:	d004      	beq.n	8011bb0 <ai_layers_forward_all+0x88>
 8011ba6:	3701      	adds	r7, #1
 8011ba8:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8011baa:	2d00      	cmp	r5, #0
 8011bac:	d1f4      	bne.n	8011b98 <ai_layers_forward_all+0x70>
 8011bae:	e7df      	b.n	8011b70 <ai_layers_forward_all+0x48>
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	3701      	adds	r7, #1
 8011bb4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8011bb6:	e7db      	b.n	8011b70 <ai_layers_forward_all+0x48>

08011bb8 <forward_conv2d_if32of32wf32_nl_pool>:
 8011bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bbc:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8011bc0:	b0c3      	sub	sp, #268	@ 0x10c
 8011bc2:	f8bc 3000 	ldrh.w	r3, [ip]
 8011bc6:	9321      	str	r3, [sp, #132]	@ 0x84
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	f000 813c 	beq.w	8011e46 <forward_conv2d_if32of32wf32_nl_pool+0x28e>
 8011bce:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8011bd2:	4604      	mov	r4, r0
 8011bd4:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8011bd8:	f1bb 0f00 	cmp.w	fp, #0
 8011bdc:	d001      	beq.n	8011be2 <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 8011bde:	f8db b000 	ldr.w	fp, [fp]
 8011be2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011be4:	2a01      	cmp	r2, #1
 8011be6:	f000 812d 	beq.w	8011e44 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8011bea:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8011bee:	f1ba 0f00 	cmp.w	sl, #0
 8011bf2:	d001      	beq.n	8011bf8 <forward_conv2d_if32of32wf32_nl_pool+0x40>
 8011bf4:	f8da a000 	ldr.w	sl, [sl]
 8011bf8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011bfa:	2a02      	cmp	r2, #2
 8011bfc:	f000 8122 	beq.w	8011e44 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8011c00:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8011c04:	8b1b      	ldrh	r3, [r3, #24]
 8011c06:	f1b8 0f00 	cmp.w	r8, #0
 8011c0a:	f000 812f 	beq.w	8011e6c <forward_conv2d_if32of32wf32_nl_pool+0x2b4>
 8011c0e:	2b01      	cmp	r3, #1
 8011c10:	f8d8 2000 	ldr.w	r2, [r8]
 8011c14:	f240 8130 	bls.w	8011e78 <forward_conv2d_if32of32wf32_nl_pool+0x2c0>
 8011c18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011c1c:	9340      	str	r3, [sp, #256]	@ 0x100
 8011c1e:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8011c22:	f8db 100c 	ldr.w	r1, [fp, #12]
 8011c26:	f8da 000c 	ldr.w	r0, [sl, #12]
 8011c2a:	9122      	str	r1, [sp, #136]	@ 0x88
 8011c2c:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8011c30:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8011c34:	9130      	str	r1, [sp, #192]	@ 0xc0
 8011c36:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8011c3a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011c3c:	9131      	str	r1, [sp, #196]	@ 0xc4
 8011c3e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8011c42:	f8de 7004 	ldr.w	r7, [lr, #4]
 8011c46:	9132      	str	r1, [sp, #200]	@ 0xc8
 8011c48:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011c4c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011c4e:	9133      	str	r1, [sp, #204]	@ 0xcc
 8011c50:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8011c54:	681e      	ldr	r6, [r3, #0]
 8011c56:	9123      	str	r1, [sp, #140]	@ 0x8c
 8011c58:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011c5c:	972a      	str	r7, [sp, #168]	@ 0xa8
 8011c5e:	9124      	str	r1, [sp, #144]	@ 0x90
 8011c60:	f8de 7008 	ldr.w	r7, [lr, #8]
 8011c64:	9628      	str	r6, [sp, #160]	@ 0xa0
 8011c66:	972f      	str	r7, [sp, #188]	@ 0xbc
 8011c68:	e9d4 950a 	ldrd	r9, r5, [r4, #40]	@ 0x28
 8011c6c:	fa1f f189 	uxth.w	r1, r9
 8011c70:	9527      	str	r5, [sp, #156]	@ 0x9c
 8011c72:	685d      	ldr	r5, [r3, #4]
 8011c74:	9134      	str	r1, [sp, #208]	@ 0xd0
 8011c76:	9529      	str	r5, [sp, #164]	@ 0xa4
 8011c78:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 8011c7c:	f8bd 109c 	ldrh.w	r1, [sp, #156]	@ 0x9c
 8011c80:	9135      	str	r1, [sp, #212]	@ 0xd4
 8011c82:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	@ 0xa0
 8011c86:	9136      	str	r1, [sp, #216]	@ 0xd8
 8011c88:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 8011c8c:	9137      	str	r1, [sp, #220]	@ 0xdc
 8011c8e:	6899      	ldr	r1, [r3, #8]
 8011c90:	68db      	ldr	r3, [r3, #12]
 8011c92:	912d      	str	r1, [sp, #180]	@ 0xb4
 8011c94:	932e      	str	r3, [sp, #184]	@ 0xb8
 8011c96:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8011c9a:	9338      	str	r3, [sp, #224]	@ 0xe0
 8011c9c:	b2ab      	uxth	r3, r5
 8011c9e:	9339      	str	r3, [sp, #228]	@ 0xe4
 8011ca0:	b2b3      	uxth	r3, r6
 8011ca2:	933a      	str	r3, [sp, #232]	@ 0xe8
 8011ca4:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	@ 0xa8
 8011ca8:	9325      	str	r3, [sp, #148]	@ 0x94
 8011caa:	b23b      	sxth	r3, r7
 8011cac:	9326      	str	r3, [sp, #152]	@ 0x98
 8011cae:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 8011cb2:	933b      	str	r3, [sp, #236]	@ 0xec
 8011cb4:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 8011cb8:	933c      	str	r3, [sp, #240]	@ 0xf0
 8011cba:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 8011cbe:	933d      	str	r3, [sp, #244]	@ 0xf4
 8011cc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011cc6:	933e      	str	r3, [sp, #248]	@ 0xf8
 8011cc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011cca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011cce:	933f      	str	r3, [sp, #252]	@ 0xfc
 8011cd0:	6a23      	ldr	r3, [r4, #32]
 8011cd2:	9322      	str	r3, [sp, #136]	@ 0x88
 8011cd4:	f1b8 0f00 	cmp.w	r8, #0
 8011cd8:	f000 80b7 	beq.w	8011e4a <forward_conv2d_if32of32wf32_nl_pool+0x292>
 8011cdc:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	f000 80ba 	beq.w	8011e5a <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 8011ce6:	9221      	str	r2, [sp, #132]	@ 0x84
 8011ce8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011cec:	689b      	ldr	r3, [r3, #8]
 8011cee:	9322      	str	r3, [sp, #136]	@ 0x88
 8011cf0:	f002 fb26 	bl	8014340 <ai_array_get_byte_size>
 8011cf4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8011cf8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011cfa:	902c      	str	r0, [sp, #176]	@ 0xb0
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	f000 80be 	beq.w	8011e7e <forward_conv2d_if32of32wf32_nl_pool+0x2c6>
 8011d02:	9241      	str	r2, [sp, #260]	@ 0x104
 8011d04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011d08:	f002 fb1a 	bl	8014340 <ai_array_get_byte_size>
 8011d0c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8011d10:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011d12:	f8bc 3000 	ldrh.w	r3, [ip]
 8011d16:	902b      	str	r0, [sp, #172]	@ 0xac
 8011d18:	9321      	str	r3, [sp, #132]	@ 0x84
 8011d1a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8011d1c:	b2ad      	uxth	r5, r5
 8011d1e:	b2b6      	uxth	r6, r6
 8011d20:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 8011d22:	f107 38ff 	add.w	r8, r7, #4294967295
 8011d26:	3d01      	subs	r5, #1
 8011d28:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 8011d2a:	3e01      	subs	r6, #1
 8011d2c:	fa1f f989 	uxth.w	r9, r9
 8011d30:	f8bd e09c 	ldrh.w	lr, [sp, #156]	@ 0x9c
 8011d34:	fb15 7508 	smlabb	r5, r5, r8, r7
 8011d38:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 8011d3a:	699b      	ldr	r3, [r3, #24]
 8011d3c:	fa0f f885 	sxth.w	r8, r5
 8011d40:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8011d42:	f8db 0018 	ldr.w	r0, [fp, #24]
 8011d46:	3d01      	subs	r5, #1
 8011d48:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8011d4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011d4e:	fb16 7605 	smlabb	r6, r6, r5, r7
 8011d52:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 8011d54:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8011d56:	2b03      	cmp	r3, #3
 8011d58:	eba5 0508 	sub.w	r5, r5, r8
 8011d5c:	b236      	sxth	r6, r6
 8011d5e:	f8da 1018 	ldr.w	r1, [sl, #24]
 8011d62:	fa15 f587 	uxtah	r5, r5, r7
 8011d66:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8011d68:	6992      	ldr	r2, [r2, #24]
 8011d6a:	fa15 f587 	uxtah	r5, r5, r7
 8011d6e:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 8011d70:	f8d4 a05c 	ldr.w	sl, [r4, #92]	@ 0x5c
 8011d74:	6880      	ldr	r0, [r0, #8]
 8011d76:	6889      	ldr	r1, [r1, #8]
 8011d78:	6892      	ldr	r2, [r2, #8]
 8011d7a:	fb95 f5f9 	sdiv	r5, r5, r9
 8011d7e:	eba7 0906 	sub.w	r9, r7, r6
 8011d82:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8011d84:	f105 0501 	add.w	r5, r5, #1
 8011d88:	fa19 f987 	uxtah	r9, r9, r7
 8011d8c:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
 8011d8e:	b22d      	sxth	r5, r5
 8011d90:	fa19 f987 	uxtah	r9, r9, r7
 8011d94:	fb99 f9fe 	sdiv	r9, r9, lr
 8011d98:	f109 0e01 	add.w	lr, r9, #1
 8011d9c:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 8011da0:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 8011da4:	d94e      	bls.n	8011e44 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8011da6:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8011daa:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 8011dae:	f1bc 0f00 	cmp.w	ip, #0
 8011db2:	d06f      	beq.n	8011e94 <forward_conv2d_if32of32wf32_nl_pool+0x2dc>
 8011db4:	f8dc 7000 	ldr.w	r7, [ip]
 8011db8:	b10f      	cbz	r7, 8011dbe <forward_conv2d_if32of32wf32_nl_pool+0x206>
 8011dba:	69bf      	ldr	r7, [r7, #24]
 8011dbc:	68bf      	ldr	r7, [r7, #8]
 8011dbe:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8011dc0:	9513      	str	r5, [sp, #76]	@ 0x4c
 8011dc2:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011dc4:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 8011dc6:	960e      	str	r6, [sp, #56]	@ 0x38
 8011dc8:	931e      	str	r3, [sp, #120]	@ 0x78
 8011dca:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8011dcc:	931d      	str	r3, [sp, #116]	@ 0x74
 8011dce:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8011dd0:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 8011dd4:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8011dd6:	fa0f f48e 	sxth.w	r4, lr
 8011dda:	e9cd a319 	strd	sl, r3, [sp, #100]	@ 0x64
 8011dde:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8011de0:	9318      	str	r3, [sp, #96]	@ 0x60
 8011de2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8011de4:	9317      	str	r3, [sp, #92]	@ 0x5c
 8011de6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011de8:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
 8011dec:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8011dee:	9312      	str	r3, [sp, #72]	@ 0x48
 8011df0:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8011df2:	9311      	str	r3, [sp, #68]	@ 0x44
 8011df4:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8011df6:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 8011dfa:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8011dfc:	930d      	str	r3, [sp, #52]	@ 0x34
 8011dfe:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8011e00:	930c      	str	r3, [sp, #48]	@ 0x30
 8011e02:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8011e04:	9414      	str	r4, [sp, #80]	@ 0x50
 8011e06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011e08:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8011e0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011e0c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e10:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8011e12:	9308      	str	r3, [sp, #32]
 8011e14:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8011e16:	9307      	str	r3, [sp, #28]
 8011e18:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8011e1a:	9306      	str	r3, [sp, #24]
 8011e1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011e1e:	9305      	str	r3, [sp, #20]
 8011e20:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8011e22:	9304      	str	r3, [sp, #16]
 8011e24:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8011e26:	9303      	str	r3, [sp, #12]
 8011e28:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8011e2a:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8011e2e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8011e32:	465b      	mov	r3, fp
 8011e34:	69a4      	ldr	r4, [r4, #24]
 8011e36:	68a4      	ldr	r4, [r4, #8]
 8011e38:	9400      	str	r4, [sp, #0]
 8011e3a:	f000 f9cf 	bl	80121dc <forward_lite_conv2d_if32of32wf32_pool>
 8011e3e:	b043      	add	sp, #268	@ 0x10c
 8011e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e44:	2300      	movs	r3, #0
 8011e46:	685b      	ldr	r3, [r3, #4]
 8011e48:	deff      	udf	#255	@ 0xff
 8011e4a:	b10b      	cbz	r3, 8011e50 <forward_conv2d_if32of32wf32_nl_pool+0x298>
 8011e4c:	689b      	ldr	r3, [r3, #8]
 8011e4e:	9322      	str	r3, [sp, #136]	@ 0x88
 8011e50:	2301      	movs	r3, #1
 8011e52:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 8011e56:	932b      	str	r3, [sp, #172]	@ 0xac
 8011e58:	e75f      	b.n	8011d1a <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8011e5a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011e5c:	b10b      	cbz	r3, 8011e62 <forward_conv2d_if32of32wf32_nl_pool+0x2aa>
 8011e5e:	689b      	ldr	r3, [r3, #8]
 8011e60:	9322      	str	r3, [sp, #136]	@ 0x88
 8011e62:	2301      	movs	r3, #1
 8011e64:	2100      	movs	r1, #0
 8011e66:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
 8011e6a:	e756      	b.n	8011d1a <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	d90e      	bls.n	8011e8e <forward_conv2d_if32of32wf32_nl_pool+0x2d6>
 8011e70:	4642      	mov	r2, r8
 8011e72:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
 8011e76:	e6d4      	b.n	8011c22 <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 8011e78:	2300      	movs	r3, #0
 8011e7a:	9340      	str	r3, [sp, #256]	@ 0x100
 8011e7c:	e6cf      	b.n	8011c1e <forward_conv2d_if32of32wf32_nl_pool+0x66>
 8011e7e:	2301      	movs	r3, #1
 8011e80:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8011e84:	932b      	str	r3, [sp, #172]	@ 0xac
 8011e86:	f8bc 3000 	ldrh.w	r3, [ip]
 8011e8a:	9321      	str	r3, [sp, #132]	@ 0x84
 8011e8c:	e745      	b.n	8011d1a <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8011e8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011e92:	deff      	udf	#255	@ 0xff
 8011e94:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8011e98:	deff      	udf	#255	@ 0xff
 8011e9a:	bf00      	nop

08011e9c <forward_dense>:
 8011e9c:	6982      	ldr	r2, [r0, #24]
 8011e9e:	8813      	ldrh	r3, [r2, #0]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d043      	beq.n	8011f2c <forward_dense+0x90>
 8011ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ea8:	6855      	ldr	r5, [r2, #4]
 8011eaa:	b08e      	sub	sp, #56	@ 0x38
 8011eac:	6869      	ldr	r1, [r5, #4]
 8011eae:	b101      	cbz	r1, 8011eb2 <forward_dense+0x16>
 8011eb0:	6809      	ldr	r1, [r1, #0]
 8011eb2:	2b01      	cmp	r3, #1
 8011eb4:	d069      	beq.n	8011f8a <forward_dense+0xee>
 8011eb6:	692a      	ldr	r2, [r5, #16]
 8011eb8:	b102      	cbz	r2, 8011ebc <forward_dense+0x20>
 8011eba:	6812      	ldr	r2, [r2, #0]
 8011ebc:	2b02      	cmp	r3, #2
 8011ebe:	d061      	beq.n	8011f84 <forward_dense+0xe8>
 8011ec0:	69ec      	ldr	r4, [r5, #28]
 8011ec2:	2c00      	cmp	r4, #0
 8011ec4:	d057      	beq.n	8011f76 <forward_dense+0xda>
 8011ec6:	8b2e      	ldrh	r6, [r5, #24]
 8011ec8:	6820      	ldr	r0, [r4, #0]
 8011eca:	2e01      	cmp	r6, #1
 8011ecc:	d955      	bls.n	8011f7a <forward_dense+0xde>
 8011ece:	6864      	ldr	r4, [r4, #4]
 8011ed0:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8011ed4:	2b03      	cmp	r3, #3
 8011ed6:	68d0      	ldr	r0, [r2, #12]
 8011ed8:	68cf      	ldr	r7, [r1, #12]
 8011eda:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8011ede:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8011ee2:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8011ee6:	f8d9 0000 	ldr.w	r0, [r9]
 8011eea:	fb06 f807 	mul.w	r8, r6, r7
 8011eee:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 8011ef2:	d044      	beq.n	8011f7e <forward_dense+0xe2>
 8011ef4:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 8011ef6:	b11d      	cbz	r5, 8011f00 <forward_dense+0x64>
 8011ef8:	682d      	ldr	r5, [r5, #0]
 8011efa:	b10d      	cbz	r5, 8011f00 <forward_dense+0x64>
 8011efc:	69ab      	ldr	r3, [r5, #24]
 8011efe:	689d      	ldr	r5, [r3, #8]
 8011f00:	6992      	ldr	r2, [r2, #24]
 8011f02:	698b      	ldr	r3, [r1, #24]
 8011f04:	6890      	ldr	r0, [r2, #8]
 8011f06:	6899      	ldr	r1, [r3, #8]
 8011f08:	b10c      	cbz	r4, 8011f0e <forward_dense+0x72>
 8011f0a:	69a3      	ldr	r3, [r4, #24]
 8011f0c:	689c      	ldr	r4, [r3, #8]
 8011f0e:	4b20      	ldr	r3, [pc, #128]	@ (8011f90 <forward_dense+0xf4>)
 8011f10:	459c      	cmp	ip, r3
 8011f12:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8011f16:	d023      	beq.n	8011f60 <forward_dense+0xc4>
 8011f18:	4e1e      	ldr	r6, [pc, #120]	@ (8011f94 <forward_dense+0xf8>)
 8011f1a:	45b4      	cmp	ip, r6
 8011f1c:	d015      	beq.n	8011f4a <forward_dense+0xae>
 8011f1e:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 8011f22:	459c      	cmp	ip, r3
 8011f24:	d004      	beq.n	8011f30 <forward_dense+0x94>
 8011f26:	b00e      	add	sp, #56	@ 0x38
 8011f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	deff      	udf	#255	@ 0xff
 8011f30:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8011f34:	a807      	add	r0, sp, #28
 8011f36:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f38:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8011f3c:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8011f40:	f001 fb98 	bl	8013674 <forward_lite_dense_if32of32wf32>
 8011f44:	b00e      	add	sp, #56	@ 0x38
 8011f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f4a:	464b      	mov	r3, r9
 8011f4c:	9500      	str	r5, [sp, #0]
 8011f4e:	e9cd e803 	strd	lr, r8, [sp, #12]
 8011f52:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8011f56:	f001 fceb 	bl	8013930 <forward_lite_dense_if32of32wf32_lut4>
 8011f5a:	b00e      	add	sp, #56	@ 0x38
 8011f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f60:	464b      	mov	r3, r9
 8011f62:	9500      	str	r5, [sp, #0]
 8011f64:	e9cd e803 	strd	lr, r8, [sp, #12]
 8011f68:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8011f6c:	f001 fe0a 	bl	8013b84 <forward_lite_dense_if32of32wf32_lut8>
 8011f70:	b00e      	add	sp, #56	@ 0x38
 8011f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f76:	4620      	mov	r0, r4
 8011f78:	e7aa      	b.n	8011ed0 <forward_dense+0x34>
 8011f7a:	2400      	movs	r4, #0
 8011f7c:	e7a8      	b.n	8011ed0 <forward_dense+0x34>
 8011f7e:	2300      	movs	r3, #0
 8011f80:	685b      	ldr	r3, [r3, #4]
 8011f82:	deff      	udf	#255	@ 0xff
 8011f84:	2300      	movs	r3, #0
 8011f86:	685b      	ldr	r3, [r3, #4]
 8011f88:	deff      	udf	#255	@ 0xff
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	deff      	udf	#255	@ 0xff
 8011f90:	00d01040 	.word	0x00d01040
 8011f94:	00f01040 	.word	0x00f01040

08011f98 <forward_relu>:
 8011f98:	6982      	ldr	r2, [r0, #24]
 8011f9a:	8813      	ldrh	r3, [r2, #0]
 8011f9c:	b323      	cbz	r3, 8011fe8 <forward_relu+0x50>
 8011f9e:	6851      	ldr	r1, [r2, #4]
 8011fa0:	684a      	ldr	r2, [r1, #4]
 8011fa2:	b102      	cbz	r2, 8011fa6 <forward_relu+0xe>
 8011fa4:	6812      	ldr	r2, [r2, #0]
 8011fa6:	2b01      	cmp	r3, #1
 8011fa8:	f000 8086 	beq.w	80120b8 <forward_relu+0x120>
 8011fac:	b470      	push	{r4, r5, r6}
 8011fae:	690b      	ldr	r3, [r1, #16]
 8011fb0:	b103      	cbz	r3, 8011fb4 <forward_relu+0x1c>
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	69c6      	ldr	r6, [r0, #28]
 8011fb6:	b1ce      	cbz	r6, 8011fec <forward_relu+0x54>
 8011fb8:	6871      	ldr	r1, [r6, #4]
 8011fba:	6998      	ldr	r0, [r3, #24]
 8011fbc:	2901      	cmp	r1, #1
 8011fbe:	d03f      	beq.n	8012040 <forward_relu+0xa8>
 8011fc0:	6893      	ldr	r3, [r2, #8]
 8011fc2:	6991      	ldr	r1, [r2, #24]
 8011fc4:	0a1b      	lsrs	r3, r3, #8
 8011fc6:	6880      	ldr	r0, [r0, #8]
 8011fc8:	6889      	ldr	r1, [r1, #8]
 8011fca:	d06c      	beq.n	80120a6 <forward_relu+0x10e>
 8011fcc:	68d5      	ldr	r5, [r2, #12]
 8011fce:	2201      	movs	r2, #1
 8011fd0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011fd4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8011fd8:	429d      	cmp	r5, r3
 8011fda:	fb04 f202 	mul.w	r2, r4, r2
 8011fde:	d1f9      	bne.n	8011fd4 <forward_relu+0x3c>
 8011fe0:	68b3      	ldr	r3, [r6, #8]
 8011fe2:	bc70      	pop	{r4, r5, r6}
 8011fe4:	f000 bd04 	b.w	80129f0 <forward_lite_nl_relu_generic_if32of32_kernel>
 8011fe8:	685b      	ldr	r3, [r3, #4]
 8011fea:	deff      	udf	#255	@ 0xff
 8011fec:	6999      	ldr	r1, [r3, #24]
 8011fee:	6893      	ldr	r3, [r2, #8]
 8011ff0:	6990      	ldr	r0, [r2, #24]
 8011ff2:	0a1b      	lsrs	r3, r3, #8
 8011ff4:	6889      	ldr	r1, [r1, #8]
 8011ff6:	6884      	ldr	r4, [r0, #8]
 8011ff8:	d057      	beq.n	80120aa <forward_relu+0x112>
 8011ffa:	68d5      	ldr	r5, [r2, #12]
 8011ffc:	2201      	movs	r2, #1
 8011ffe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012002:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8012006:	429d      	cmp	r5, r3
 8012008:	fb00 f202 	mul.w	r2, r0, r2
 801200c:	d1f9      	bne.n	8012002 <forward_relu+0x6a>
 801200e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8012012:	4413      	add	r3, r2
 8012014:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012018:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801201c:	4294      	cmp	r4, r2
 801201e:	d80d      	bhi.n	801203c <forward_relu+0xa4>
 8012020:	3204      	adds	r2, #4
 8012022:	3104      	adds	r1, #4
 8012024:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80120c0 <forward_relu+0x128>
 8012028:	4613      	mov	r3, r2
 801202a:	ed72 7a01 	vldmdb	r2!, {s15}
 801202e:	3b08      	subs	r3, #8
 8012030:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8012034:	ed61 7a01 	vstmdb	r1!, {s15}
 8012038:	429c      	cmp	r4, r3
 801203a:	d9f5      	bls.n	8012028 <forward_relu+0x90>
 801203c:	bc70      	pop	{r4, r5, r6}
 801203e:	4770      	bx	lr
 8012040:	6993      	ldr	r3, [r2, #24]
 8012042:	6880      	ldr	r0, [r0, #8]
 8012044:	689c      	ldr	r4, [r3, #8]
 8012046:	6893      	ldr	r3, [r2, #8]
 8012048:	0a1b      	lsrs	r3, r3, #8
 801204a:	d030      	beq.n	80120ae <forward_relu+0x116>
 801204c:	68d5      	ldr	r5, [r2, #12]
 801204e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012052:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012056:	429d      	cmp	r5, r3
 8012058:	fb02 f101 	mul.w	r1, r2, r1
 801205c:	d1f9      	bne.n	8012052 <forward_relu+0xba>
 801205e:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8012062:	68b3      	ldr	r3, [r6, #8]
 8012064:	440a      	add	r2, r1
 8012066:	ed93 7a00 	vldr	s14, [r3]
 801206a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801206e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8012072:	429c      	cmp	r4, r3
 8012074:	d8e2      	bhi.n	801203c <forward_relu+0xa4>
 8012076:	1d02      	adds	r2, r0, #4
 8012078:	3304      	adds	r3, #4
 801207a:	2000      	movs	r0, #0
 801207c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8012080:	1f19      	subs	r1, r3, #4
 8012082:	3b08      	subs	r3, #8
 8012084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801208c:	d405      	bmi.n	801209a <forward_relu+0x102>
 801208e:	429c      	cmp	r4, r3
 8012090:	f842 0d04 	str.w	r0, [r2, #-4]!
 8012094:	d8d2      	bhi.n	801203c <forward_relu+0xa4>
 8012096:	460b      	mov	r3, r1
 8012098:	e7f0      	b.n	801207c <forward_relu+0xe4>
 801209a:	429c      	cmp	r4, r3
 801209c:	ed62 7a01 	vstmdb	r2!, {s15}
 80120a0:	d8cc      	bhi.n	801203c <forward_relu+0xa4>
 80120a2:	460b      	mov	r3, r1
 80120a4:	e7ea      	b.n	801207c <forward_relu+0xe4>
 80120a6:	2201      	movs	r2, #1
 80120a8:	e79a      	b.n	8011fe0 <forward_relu+0x48>
 80120aa:	4622      	mov	r2, r4
 80120ac:	e7b8      	b.n	8012020 <forward_relu+0x88>
 80120ae:	68b2      	ldr	r2, [r6, #8]
 80120b0:	4623      	mov	r3, r4
 80120b2:	ed92 7a00 	vldr	s14, [r2]
 80120b6:	e7de      	b.n	8012076 <forward_relu+0xde>
 80120b8:	2300      	movs	r3, #0
 80120ba:	685b      	ldr	r3, [r3, #4]
 80120bc:	deff      	udf	#255	@ 0xff
 80120be:	bf00      	nop
 80120c0:	00000000 	.word	0x00000000

080120c4 <forward_upsample_bilinear>:
 80120c4:	6983      	ldr	r3, [r0, #24]
 80120c6:	881a      	ldrh	r2, [r3, #0]
 80120c8:	2a00      	cmp	r2, #0
 80120ca:	d04f      	beq.n	801216c <forward_upsample_bilinear+0xa8>
 80120cc:	6859      	ldr	r1, [r3, #4]
 80120ce:	4684      	mov	ip, r0
 80120d0:	684b      	ldr	r3, [r1, #4]
 80120d2:	b103      	cbz	r3, 80120d6 <forward_upsample_bilinear+0x12>
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	2a01      	cmp	r2, #1
 80120d8:	d074      	beq.n	80121c4 <forward_upsample_bilinear+0x100>
 80120da:	690a      	ldr	r2, [r1, #16]
 80120dc:	2a00      	cmp	r2, #0
 80120de:	d074      	beq.n	80121ca <forward_upsample_bilinear+0x106>
 80120e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120e4:	699c      	ldr	r4, [r3, #24]
 80120e6:	b084      	sub	sp, #16
 80120e8:	68d8      	ldr	r0, [r3, #12]
 80120ea:	6821      	ldr	r1, [r4, #0]
 80120ec:	6815      	ldr	r5, [r2, #0]
 80120ee:	f8dc 3020 	ldr.w	r3, [ip, #32]
 80120f2:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 80120f6:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 80121d8 <forward_upsample_bilinear+0x114>
 80120fa:	689b      	ldr	r3, [r3, #8]
 80120fc:	68ee      	ldr	r6, [r5, #12]
 80120fe:	4541      	cmp	r1, r8
 8012100:	edd3 0a00 	vldr	s1, [r3]
 8012104:	ed93 0a01 	vldr	s0, [r3, #4]
 8012108:	6882      	ldr	r2, [r0, #8]
 801210a:	68c3      	ldr	r3, [r0, #12]
 801210c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8012110:	e9d6 6702 	ldrd	r6, r7, [r6, #8]
 8012114:	d048      	beq.n	80121a8 <forward_upsample_bilinear+0xe4>
 8012116:	dd14      	ble.n	8012142 <forward_upsample_bilinear+0x7e>
 8012118:	482d      	ldr	r0, [pc, #180]	@ (80121d0 <forward_upsample_bilinear+0x10c>)
 801211a:	4281      	cmp	r1, r0
 801211c:	d036      	beq.n	801218c <forward_upsample_bilinear+0xc8>
 801211e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8012122:	4281      	cmp	r1, r0
 8012124:	d10a      	bne.n	801213c <forward_upsample_bilinear+0x78>
 8012126:	69a9      	ldr	r1, [r5, #24]
 8012128:	68a0      	ldr	r0, [r4, #8]
 801212a:	f89c 401d 	ldrb.w	r4, [ip, #29]
 801212e:	6889      	ldr	r1, [r1, #8]
 8012130:	e9cd e402 	strd	lr, r4, [sp, #8]
 8012134:	e9cd 6700 	strd	r6, r7, [sp]
 8012138:	f001 f91c 	bl	8013374 <forward_lite_upsample_bilinear_is16os16>
 801213c:	b004      	add	sp, #16
 801213e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012142:	4824      	ldr	r0, [pc, #144]	@ (80121d4 <forward_upsample_bilinear+0x110>)
 8012144:	4281      	cmp	r1, r0
 8012146:	d013      	beq.n	8012170 <forward_upsample_bilinear+0xac>
 8012148:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 801214c:	4281      	cmp	r1, r0
 801214e:	d1f5      	bne.n	801213c <forward_upsample_bilinear+0x78>
 8012150:	69a9      	ldr	r1, [r5, #24]
 8012152:	68a0      	ldr	r0, [r4, #8]
 8012154:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8012158:	6889      	ldr	r1, [r1, #8]
 801215a:	e9cd e402 	strd	lr, r4, [sp, #8]
 801215e:	e9cd 6700 	strd	r6, r7, [sp]
 8012162:	f001 f9c7 	bl	80134f4 <forward_lite_upsample_bilinear_iu16ou16>
 8012166:	b004      	add	sp, #16
 8012168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801216c:	6853      	ldr	r3, [r2, #4]
 801216e:	deff      	udf	#255	@ 0xff
 8012170:	69a9      	ldr	r1, [r5, #24]
 8012172:	68a0      	ldr	r0, [r4, #8]
 8012174:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8012178:	6889      	ldr	r1, [r1, #8]
 801217a:	e9cd e402 	strd	lr, r4, [sp, #8]
 801217e:	e9cd 6700 	strd	r6, r7, [sp]
 8012182:	f001 f835 	bl	80131f0 <forward_lite_upsample_bilinear_iu8ou8>
 8012186:	b004      	add	sp, #16
 8012188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801218c:	69a9      	ldr	r1, [r5, #24]
 801218e:	68a0      	ldr	r0, [r4, #8]
 8012190:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8012194:	6889      	ldr	r1, [r1, #8]
 8012196:	e9cd e402 	strd	lr, r4, [sp, #8]
 801219a:	e9cd 6700 	strd	r6, r7, [sp]
 801219e:	f000 ff65 	bl	801306c <forward_lite_upsample_bilinear_is8os8>
 80121a2:	b004      	add	sp, #16
 80121a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121a8:	69a9      	ldr	r1, [r5, #24]
 80121aa:	68a0      	ldr	r0, [r4, #8]
 80121ac:	f89c 401d 	ldrb.w	r4, [ip, #29]
 80121b0:	6889      	ldr	r1, [r1, #8]
 80121b2:	e9cd e402 	strd	lr, r4, [sp, #8]
 80121b6:	e9cd 6700 	strd	r6, r7, [sp]
 80121ba:	f000 fe97 	bl	8012eec <forward_lite_upsample_bilinear_if32of32>
 80121be:	b004      	add	sp, #16
 80121c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121c4:	2300      	movs	r3, #0
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	deff      	udf	#255	@ 0xff
 80121ca:	68d3      	ldr	r3, [r2, #12]
 80121cc:	deff      	udf	#255	@ 0xff
 80121ce:	bf00      	nop
 80121d0:	00840440 	.word	0x00840440
 80121d4:	00040440 	.word	0x00040440
 80121d8:	00821040 	.word	0x00821040

080121dc <forward_lite_conv2d_if32of32wf32_pool>:
 80121dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e0:	ed2d 8b0e 	vpush	{d8-d14}
 80121e4:	b0c9      	sub	sp, #292	@ 0x124
 80121e6:	4696      	mov	lr, r2
 80121e8:	4680      	mov	r8, r0
 80121ea:	f9bd 51cc 	ldrsh.w	r5, [sp, #460]	@ 0x1cc
 80121ee:	9323      	str	r3, [sp, #140]	@ 0x8c
 80121f0:	f9bd 31ec 	ldrsh.w	r3, [sp, #492]	@ 0x1ec
 80121f4:	9138      	str	r1, [sp, #224]	@ 0xe0
 80121f6:	9239      	str	r2, [sp, #228]	@ 0xe4
 80121f8:	f9bd 118c 	ldrsh.w	r1, [sp, #396]	@ 0x18c
 80121fc:	fb05 f203 	mul.w	r2, r5, r3
 8012200:	f9bd 419c 	ldrsh.w	r4, [sp, #412]	@ 0x19c
 8012204:	9129      	str	r1, [sp, #164]	@ 0xa4
 8012206:	460e      	mov	r6, r1
 8012208:	fb01 f202 	mul.w	r2, r1, r2
 801220c:	f9bd 1194 	ldrsh.w	r1, [sp, #404]	@ 0x194
 8012210:	f8bd c1b0 	ldrh.w	ip, [sp, #432]	@ 0x1b0
 8012214:	9142      	str	r1, [sp, #264]	@ 0x108
 8012216:	f9bd 11a0 	ldrsh.w	r1, [sp, #416]	@ 0x1a0
 801221a:	f9bd 7190 	ldrsh.w	r7, [sp, #400]	@ 0x190
 801221e:	932d      	str	r3, [sp, #180]	@ 0xb4
 8012220:	942a      	str	r4, [sp, #168]	@ 0xa8
 8012222:	f9bd 3198 	ldrsh.w	r3, [sp, #408]	@ 0x198
 8012226:	f9bd 4188 	ldrsh.w	r4, [sp, #392]	@ 0x188
 801222a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801222c:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8012230:	f8bd 11a8 	ldrh.w	r1, [sp, #424]	@ 0x1a8
 8012234:	f8bd c1b4 	ldrh.w	ip, [sp, #436]	@ 0x1b4
 8012238:	9041      	str	r0, [sp, #260]	@ 0x104
 801223a:	933a      	str	r3, [sp, #232]	@ 0xe8
 801223c:	f8bd 01ac 	ldrh.w	r0, [sp, #428]	@ 0x1ac
 8012240:	912b      	str	r1, [sp, #172]	@ 0xac
 8012242:	f9bd 91a4 	ldrsh.w	r9, [sp, #420]	@ 0x1a4
 8012246:	4243      	negs	r3, r0
 8012248:	950f      	str	r5, [sp, #60]	@ 0x3c
 801224a:	9418      	str	r4, [sp, #96]	@ 0x60
 801224c:	9714      	str	r7, [sp, #80]	@ 0x50
 801224e:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
 8012252:	f9bd c1b8 	ldrsh.w	ip, [sp, #440]	@ 0x1b8
 8012256:	931e      	str	r3, [sp, #120]	@ 0x78
 8012258:	f8cd c10c 	str.w	ip, [sp, #268]	@ 0x10c
 801225c:	f9bd c1e8 	ldrsh.w	ip, [sp, #488]	@ 0x1e8
 8012260:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8012262:	f8cd c110 	str.w	ip, [sp, #272]	@ 0x110
 8012266:	f9bd c1f0 	ldrsh.w	ip, [sp, #496]	@ 0x1f0
 801226a:	2b00      	cmp	r3, #0
 801226c:	f9bd 11d0 	ldrsh.w	r1, [sp, #464]	@ 0x1d0
 8012270:	f8cd c114 	str.w	ip, [sp, #276]	@ 0x114
 8012274:	f9bd c1f4 	ldrsh.w	ip, [sp, #500]	@ 0x1f4
 8012278:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
 801227c:	f9bd c1f8 	ldrsh.w	ip, [sp, #504]	@ 0x1f8
 8012280:	f8cd c118 	str.w	ip, [sp, #280]	@ 0x118
 8012284:	f9bd c1fc 	ldrsh.w	ip, [sp, #508]	@ 0x1fc
 8012288:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 801228c:	f340 80a9 	ble.w	80123e2 <forward_lite_conv2d_if32of32wf32_pool+0x206>
 8012290:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012292:	3901      	subs	r1, #1
 8012294:	9020      	str	r0, [sp, #128]	@ 0x80
 8012296:	fb03 f309 	mul.w	r3, r3, r9
 801229a:	fa1f fc81 	uxth.w	ip, r1
 801229e:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 80122a0:	fb04 f303 	mul.w	r3, r4, r3
 80122a4:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 80123ec <forward_lite_conv2d_if32of32wf32_pool+0x210>
 80122a8:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 80122ac:	0099      	lsls	r1, r3, #2
 80122ae:	9124      	str	r1, [sp, #144]	@ 0x90
 80122b0:	4631      	mov	r1, r6
 80122b2:	b2b6      	uxth	r6, r6
 80122b4:	fb00 f301 	mul.w	r3, r0, r1
 80122b8:	9636      	str	r6, [sp, #216]	@ 0xd8
 80122ba:	00a6      	lsls	r6, r4, #2
 80122bc:	fb05 f303 	mul.w	r3, r5, r3
 80122c0:	fb05 f501 	mul.w	r5, r5, r1
 80122c4:	0098      	lsls	r0, r3, #2
 80122c6:	9616      	str	r6, [sp, #88]	@ 0x58
 80122c8:	953d      	str	r5, [sp, #244]	@ 0xf4
 80122ca:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 80122ce:	903e      	str	r0, [sp, #248]	@ 0xf8
 80122d0:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 80122d2:	953b      	str	r5, [sp, #236]	@ 0xec
 80122d4:	1e43      	subs	r3, r0, #1
 80122d6:	b29b      	uxth	r3, r3
 80122d8:	3301      	adds	r3, #1
 80122da:	0098      	lsls	r0, r3, #2
 80122dc:	9035      	str	r0, [sp, #212]	@ 0xd4
 80122de:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80122e0:	fb00 f307 	mul.w	r3, r0, r7
 80122e4:	fb04 f303 	mul.w	r3, r4, r3
 80122e8:	0098      	lsls	r0, r3, #2
 80122ea:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 80122ec:	9034      	str	r0, [sp, #208]	@ 0xd0
 80122ee:	0090      	lsls	r0, r2, #2
 80122f0:	fb01 f303 	mul.w	r3, r1, r3
 80122f4:	0089      	lsls	r1, r1, #2
 80122f6:	9032      	str	r0, [sp, #200]	@ 0xc8
 80122f8:	9860      	ldr	r0, [sp, #384]	@ 0x180
 80122fa:	9112      	str	r1, [sp, #72]	@ 0x48
 80122fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012300:	0098      	lsls	r0, r3, #2
 8012302:	fb07 f306 	mul.w	r3, r7, r6
 8012306:	921f      	str	r2, [sp, #124]	@ 0x7c
 8012308:	903c      	str	r0, [sp, #240]	@ 0xf0
 801230a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801230c:	fb00 8703 	mla	r7, r0, r3, r8
 8012310:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8012312:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8012314:	9722      	str	r7, [sp, #136]	@ 0x88
 8012316:	425f      	negs	r7, r3
 8012318:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801231a:	4241      	negs	r1, r0
 801231c:	9731      	str	r7, [sp, #196]	@ 0xc4
 801231e:	fb03 f304 	mul.w	r3, r3, r4
 8012322:	9125      	str	r1, [sp, #148]	@ 0x94
 8012324:	009c      	lsls	r4, r3, #2
 8012326:	fb06 f107 	mul.w	r1, r6, r7
 801232a:	9417      	str	r4, [sp, #92]	@ 0x5c
 801232c:	2400      	movs	r4, #0
 801232e:	9137      	str	r1, [sp, #220]	@ 0xdc
 8012330:	9960      	ldr	r1, [sp, #384]	@ 0x180
 8012332:	9427      	str	r4, [sp, #156]	@ 0x9c
 8012334:	911b      	str	r1, [sp, #108]	@ 0x6c
 8012336:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012338:	9428      	str	r4, [sp, #160]	@ 0xa0
 801233a:	9333      	str	r3, [sp, #204]	@ 0xcc
 801233c:	9b76      	ldr	r3, [sp, #472]	@ 0x1d8
 801233e:	932f      	str	r3, [sp, #188]	@ 0xbc
 8012340:	1e53      	subs	r3, r2, #1
 8012342:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012344:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012346:	3301      	adds	r3, #1
 8012348:	b21b      	sxth	r3, r3
 801234a:	2b00      	cmp	r3, #0
 801234c:	dc68      	bgt.n	8012420 <forward_lite_conv2d_if32of32wf32_pool+0x244>
 801234e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012350:	041b      	lsls	r3, r3, #16
 8012352:	f100 81d5 	bmi.w	8012700 <forward_lite_conv2d_if32of32wf32_pool+0x524>
 8012356:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8012358:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801235a:	42b2      	cmp	r2, r6
 801235c:	dc48      	bgt.n	80123f0 <forward_lite_conv2d_if32of32wf32_pool+0x214>
 801235e:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8012360:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8012362:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8012364:	3301      	adds	r3, #1
 8012366:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8012368:	4420      	add	r0, r4
 801236a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801236c:	b21d      	sxth	r5, r3
 801236e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012370:	901e      	str	r0, [sp, #120]	@ 0x78
 8012372:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 8012374:	1b1b      	subs	r3, r3, r4
 8012376:	9108      	str	r1, [sp, #32]
 8012378:	4401      	add	r1, r0
 801237a:	9320      	str	r3, [sp, #128]	@ 0x80
 801237c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801237e:	9138      	str	r1, [sp, #224]	@ 0xe0
 8012380:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8012382:	9528      	str	r5, [sp, #160]	@ 0xa0
 8012384:	440b      	add	r3, r1
 8012386:	9322      	str	r3, [sp, #136]	@ 0x88
 8012388:	b293      	uxth	r3, r2
 801238a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801238c:	9301      	str	r3, [sp, #4]
 801238e:	1a9b      	subs	r3, r3, r2
 8012390:	b29a      	uxth	r2, r3
 8012392:	b2bb      	uxth	r3, r7
 8012394:	1af1      	subs	r1, r6, r3
 8012396:	9305      	str	r3, [sp, #20]
 8012398:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
 801239a:	b20b      	sxth	r3, r1
 801239c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 80123a0:	931d      	str	r3, [sp, #116]	@ 0x74
 80123a2:	b2b3      	uxth	r3, r6
 80123a4:	9303      	str	r3, [sp, #12]
 80123a6:	2301      	movs	r3, #1
 80123a8:	9307      	str	r3, [sp, #28]
 80123aa:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	@ 0xe8
 80123ae:	9306      	str	r3, [sp, #24]
 80123b0:	f8bd 3114 	ldrh.w	r3, [sp, #276]	@ 0x114
 80123b4:	9304      	str	r3, [sp, #16]
 80123b6:	f8bd 3118 	ldrh.w	r3, [sp, #280]	@ 0x118
 80123ba:	9302      	str	r3, [sp, #8]
 80123bc:	f8bd 3110 	ldrh.w	r3, [sp, #272]	@ 0x110
 80123c0:	9300      	str	r3, [sp, #0]
 80123c2:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 80123c4:	9860      	ldr	r0, [sp, #384]	@ 0x180
 80123c6:	9c79      	ldr	r4, [sp, #484]	@ 0x1e4
 80123c8:	47a0      	blx	r4
 80123ca:	1bf3      	subs	r3, r6, r7
 80123cc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80123ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80123d2:	3a01      	subs	r2, #1
 80123d4:	b21b      	sxth	r3, r3
 80123d6:	b292      	uxth	r2, r2
 80123d8:	9333      	str	r3, [sp, #204]	@ 0xcc
 80123da:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80123dc:	9221      	str	r2, [sp, #132]	@ 0x84
 80123de:	42ab      	cmp	r3, r5
 80123e0:	dcb0      	bgt.n	8012344 <forward_lite_conv2d_if32of32wf32_pool+0x168>
 80123e2:	b049      	add	sp, #292	@ 0x124
 80123e4:	ecbd 8b0e 	vpop	{d8-d14}
 80123e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ec:	00000000 	.word	0x00000000
 80123f0:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80123f2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80123f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80123f6:	440a      	add	r2, r1
 80123f8:	3b01      	subs	r3, #1
 80123fa:	921e      	str	r2, [sp, #120]	@ 0x78
 80123fc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80123fe:	b29b      	uxth	r3, r3
 8012400:	1a52      	subs	r2, r2, r1
 8012402:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8012404:	9321      	str	r3, [sp, #132]	@ 0x84
 8012406:	9220      	str	r2, [sp, #128]	@ 0x80
 8012408:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801240a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801240c:	440a      	add	r2, r1
 801240e:	9222      	str	r2, [sp, #136]	@ 0x88
 8012410:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8012412:	4293      	cmp	r3, r2
 8012414:	dde5      	ble.n	80123e2 <forward_lite_conv2d_if32of32wf32_pool+0x206>
 8012416:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012418:	3301      	adds	r3, #1
 801241a:	b21b      	sxth	r3, r3
 801241c:	2b00      	cmp	r3, #0
 801241e:	dd96      	ble.n	801234e <forward_lite_conv2d_if32of32wf32_pool+0x172>
 8012420:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012422:	2b00      	cmp	r3, #0
 8012424:	f2c0 82d1 	blt.w	80129ca <forward_lite_conv2d_if32of32wf32_pool+0x7ee>
 8012428:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801242a:	931c      	str	r3, [sp, #112]	@ 0x70
 801242c:	2300      	movs	r3, #0
 801242e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8012430:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 8012432:	440a      	add	r2, r1
 8012434:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8012436:	428a      	cmp	r2, r1
 8012438:	bfd4      	ite	le
 801243a:	ebc3 0b02 	rsble	fp, r3, r2
 801243e:	ebc3 0b01 	rsbgt	fp, r3, r1
 8012442:	9a61      	ldr	r2, [sp, #388]	@ 0x184
 8012444:	2a00      	cmp	r2, #0
 8012446:	f000 819d 	beq.w	8012784 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 801244a:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801244c:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8012450:	f0c0 8198 	bcc.w	8012784 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 8012454:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8012456:	2a00      	cmp	r2, #0
 8012458:	f340 8115 	ble.w	8012686 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 801245c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801245e:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8012460:	fb02 f303 	mul.w	r3, r2, r3
 8012464:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8012466:	9319      	str	r3, [sp, #100]	@ 0x64
 8012468:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801246a:	189a      	adds	r2, r3, r2
 801246c:	9326      	str	r3, [sp, #152]	@ 0x98
 801246e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012470:	923f      	str	r2, [sp, #252]	@ 0xfc
 8012472:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012474:	9330      	str	r3, [sp, #192]	@ 0xc0
 8012476:	440a      	add	r2, r1
 8012478:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801247a:	9240      	str	r2, [sp, #256]	@ 0x100
 801247c:	931a      	str	r3, [sp, #104]	@ 0x68
 801247e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8012480:	9961      	ldr	r1, [sp, #388]	@ 0x184
 8012482:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8012484:	f001 fe4a 	bl	801411c <st_int8_copy>
 8012488:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801248a:	2b00      	cmp	r3, #0
 801248c:	f000 8135 	beq.w	80126fa <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 8012490:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8012492:	ecf3 1a01 	vldmia	r3!, {s3}
 8012496:	9330      	str	r3, [sp, #192]	@ 0xc0
 8012498:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801249a:	2b00      	cmp	r3, #0
 801249c:	f000 80e8 	beq.w	8012670 <forward_lite_conv2d_if32of32wf32_pool+0x494>
 80124a0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80124a2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80124a4:	189a      	adds	r2, r3, r2
 80124a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80124a8:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 80124aa:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 80124ae:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80124b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80124b2:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80124b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80124b6:	2300      	movs	r3, #0
 80124b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80124ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124bc:	2b00      	cmp	r3, #0
 80124be:	f2c0 8113 	blt.w	80126e8 <forward_lite_conv2d_if32of32wf32_pool+0x50c>
 80124c2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80124c4:	2600      	movs	r6, #0
 80124c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80124c8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80124ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80124cc:	9c61      	ldr	r4, [sp, #388]	@ 0x184
 80124ce:	4298      	cmp	r0, r3
 80124d0:	bf94      	ite	ls
 80124d2:	ebc6 0600 	rsbls	r6, r6, r0
 80124d6:	ebc6 0603 	rsbhi	r6, r6, r3
 80124da:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80124dc:	f1bb 0f00 	cmp.w	fp, #0
 80124e0:	eba0 0906 	sub.w	r9, r0, r6
 80124e4:	fb02 4203 	mla	r2, r2, r3, r4
 80124e8:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80124ea:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80124ec:	eba4 0a06 	sub.w	sl, r4, r6
 80124f0:	fb00 f606 	mul.w	r6, r0, r6
 80124f4:	f340 80fe 	ble.w	80126f4 <forward_lite_conv2d_if32of32wf32_pool+0x518>
 80124f8:	f026 070f 	bic.w	r7, r6, #15
 80124fc:	eeb0 7a61 	vmov.f32	s14, s3
 8012500:	fb0a fa03 	mul.w	sl, sl, r3
 8012504:	f04f 0c00 	mov.w	ip, #0
 8012508:	f107 38ff 	add.w	r8, r7, #4294967295
 801250c:	fb09 f903 	mul.w	r9, r9, r3
 8012510:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8012514:	f108 0801 	add.w	r8, r8, #1
 8012518:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 801251c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8012520:	2f00      	cmp	r7, #0
 8012522:	f340 80df 	ble.w	80126e4 <forward_lite_conv2d_if32of32wf32_pool+0x508>
 8012526:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 801252a:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 801252e:	2400      	movs	r4, #0
 8012530:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8012534:	3410      	adds	r4, #16
 8012536:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 801253a:	3340      	adds	r3, #64	@ 0x40
 801253c:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 8012540:	42bc      	cmp	r4, r7
 8012542:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012546:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 801254a:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 801254e:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 8012552:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8012556:	eee4 7a85 	vfma.f32	s15, s9, s10
 801255a:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 801255e:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 8012562:	ed50 da1c 	vldr	s27, [r0, #-112]	@ 0xffffff90
 8012566:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 801256a:	ed50 ca1b 	vldr	s25, [r0, #-108]	@ 0xffffff94
 801256e:	ed13 ca1b 	vldr	s24, [r3, #-108]	@ 0xffffff94
 8012572:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012576:	ed50 ba1a 	vldr	s23, [r0, #-104]	@ 0xffffff98
 801257a:	ed13 ba1a 	vldr	s22, [r3, #-104]	@ 0xffffff98
 801257e:	ed50 aa19 	vldr	s21, [r0, #-100]	@ 0xffffff9c
 8012582:	ed13 aa19 	vldr	s20, [r3, #-100]	@ 0xffffff9c
 8012586:	ed50 9a18 	vldr	s19, [r0, #-96]	@ 0xffffffa0
 801258a:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 801258e:	eeee 7a26 	vfma.f32	s15, s28, s13
 8012592:	ed50 8a17 	vldr	s17, [r0, #-92]	@ 0xffffffa4
 8012596:	ed13 0a17 	vldr	s0, [r3, #-92]	@ 0xffffffa4
 801259a:	ed50 0a16 	vldr	s1, [r0, #-88]	@ 0xffffffa8
 801259e:	ed13 1a16 	vldr	s2, [r3, #-88]	@ 0xffffffa8
 80125a2:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 80125a6:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 80125aa:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80125ae:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 80125b2:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 80125b6:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 80125ba:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 80125be:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 80125c2:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 80125c6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80125ca:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 80125ce:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 80125d2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80125d6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80125da:	eee9 7a89 	vfma.f32	s15, s19, s18
 80125de:	eee8 7a80 	vfma.f32	s15, s17, s0
 80125e2:	eee0 7a81 	vfma.f32	s15, s1, s2
 80125e6:	eee2 7a22 	vfma.f32	s15, s4, s5
 80125ea:	eee3 7a23 	vfma.f32	s15, s6, s7
 80125ee:	eee4 7a24 	vfma.f32	s15, s8, s9
 80125f2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80125f6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80125fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80125fe:	db97      	blt.n	8012530 <forward_lite_conv2d_if32of32wf32_pool+0x354>
 8012600:	4471      	add	r1, lr
 8012602:	4472      	add	r2, lr
 8012604:	4645      	mov	r5, r8
 8012606:	42ae      	cmp	r6, r5
 8012608:	dd10      	ble.n	801262c <forward_lite_conv2d_if32of32wf32_pool+0x450>
 801260a:	462b      	mov	r3, r5
 801260c:	460c      	mov	r4, r1
 801260e:	4610      	mov	r0, r2
 8012610:	3301      	adds	r3, #1
 8012612:	ecf0 6a01 	vldmia	r0!, {s13}
 8012616:	ecf4 7a01 	vldmia	r4!, {s15}
 801261a:	429e      	cmp	r6, r3
 801261c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012620:	d1f6      	bne.n	8012610 <forward_lite_conv2d_if32of32wf32_pool+0x434>
 8012622:	1b75      	subs	r5, r6, r5
 8012624:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8012628:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801262c:	f10c 0c01 	add.w	ip, ip, #1
 8012630:	4451      	add	r1, sl
 8012632:	444a      	add	r2, r9
 8012634:	45e3      	cmp	fp, ip
 8012636:	f47f af73 	bne.w	8012520 <forward_lite_conv2d_if32of32wf32_pool+0x344>
 801263a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801263c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801263e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012640:	4410      	add	r0, r2
 8012642:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012644:	ed81 7a00 	vstr	s14, [r1]
 8012648:	900b      	str	r0, [sp, #44]	@ 0x2c
 801264a:	3301      	adds	r3, #1
 801264c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801264e:	9311      	str	r3, [sp, #68]	@ 0x44
 8012650:	4401      	add	r1, r0
 8012652:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8012654:	9110      	str	r1, [sp, #64]	@ 0x40
 8012656:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012658:	1a89      	subs	r1, r1, r2
 801265a:	910e      	str	r1, [sp, #56]	@ 0x38
 801265c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801265e:	4401      	add	r1, r0
 8012660:	910d      	str	r1, [sp, #52]	@ 0x34
 8012662:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012664:	1a8a      	subs	r2, r1, r2
 8012666:	920c      	str	r2, [sp, #48]	@ 0x30
 8012668:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801266a:	429a      	cmp	r2, r3
 801266c:	f47f af25 	bne.w	80124ba <forward_lite_conv2d_if32of32wf32_pool+0x2de>
 8012670:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012672:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8012674:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8012676:	440a      	add	r2, r1
 8012678:	3304      	adds	r3, #4
 801267a:	921a      	str	r2, [sp, #104]	@ 0x68
 801267c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801267e:	9326      	str	r3, [sp, #152]	@ 0x98
 8012680:	4293      	cmp	r3, r2
 8012682:	f47f aefc 	bne.w	801247e <forward_lite_conv2d_if32of32wf32_pool+0x2a2>
 8012686:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012688:	2b00      	cmp	r3, #0
 801268a:	dd26      	ble.n	80126da <forward_lite_conv2d_if32of32wf32_pool+0x4fe>
 801268c:	9b75      	ldr	r3, [sp, #468]	@ 0x1d4
 801268e:	2b00      	cmp	r3, #0
 8012690:	f000 819f 	beq.w	80129d2 <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 8012694:	4699      	mov	r9, r3
 8012696:	2400      	movs	r4, #0
 8012698:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 801269a:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 801269e:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 80126a0:	f8dd b1e0 	ldr.w	fp, [sp, #480]	@ 0x1e0
 80126a4:	e9dd 6a76 	ldrd	r6, sl, [sp, #472]	@ 0x1d8
 80126a8:	462b      	mov	r3, r5
 80126aa:	4455      	add	r5, sl
 80126ac:	463a      	mov	r2, r7
 80126ae:	4641      	mov	r1, r8
 80126b0:	4640      	mov	r0, r8
 80126b2:	3401      	adds	r4, #1
 80126b4:	47c8      	blx	r9
 80126b6:	1bab      	subs	r3, r5, r6
 80126b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80126ba:	b224      	sxth	r4, r4
 80126bc:	455b      	cmp	r3, fp
 80126be:	bfa8      	it	ge
 80126c0:	4635      	movge	r5, r6
 80126c2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80126c4:	4490      	add	r8, r2
 80126c6:	4543      	cmp	r3, r8
 80126c8:	d801      	bhi.n	80126ce <forward_lite_conv2d_if32of32wf32_pool+0x4f2>
 80126ca:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80126cc:	4498      	add	r8, r3
 80126ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80126d0:	42a3      	cmp	r3, r4
 80126d2:	d1e9      	bne.n	80126a8 <forward_lite_conv2d_if32of32wf32_pool+0x4cc>
 80126d4:	952f      	str	r5, [sp, #188]	@ 0xbc
 80126d6:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
 80126da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80126dc:	3301      	adds	r3, #1
 80126de:	b21b      	sxth	r3, r3
 80126e0:	931d      	str	r3, [sp, #116]	@ 0x74
 80126e2:	e638      	b.n	8012356 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 80126e4:	2500      	movs	r5, #0
 80126e6:	e78e      	b.n	8012606 <forward_lite_conv2d_if32of32wf32_pool+0x42a>
 80126e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80126ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80126ec:	4616      	mov	r6, r2
 80126ee:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80126f0:	189a      	adds	r2, r3, r2
 80126f2:	e6e9      	b.n	80124c8 <forward_lite_conv2d_if32of32wf32_pool+0x2ec>
 80126f4:	eeb0 7a61 	vmov.f32	s14, s3
 80126f8:	e79f      	b.n	801263a <forward_lite_conv2d_if32of32wf32_pool+0x45e>
 80126fa:	eef0 1a48 	vmov.f32	s3, s16
 80126fe:	e6cb      	b.n	8012498 <forward_lite_conv2d_if32of32wf32_pool+0x2bc>
 8012700:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 8012702:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012704:	fb02 f303 	mul.w	r3, r2, r3
 8012708:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801270a:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 801270e:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 8012710:	429a      	cmp	r2, r3
 8012712:	d901      	bls.n	8012718 <forward_lite_conv2d_if32of32wf32_pool+0x53c>
 8012714:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8012716:	4413      	add	r3, r2
 8012718:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 801271a:	429a      	cmp	r2, r3
 801271c:	d217      	bcs.n	801274e <forward_lite_conv2d_if32of32wf32_pool+0x572>
 801271e:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8012720:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8012722:	428a      	cmp	r2, r1
 8012724:	d013      	beq.n	801274e <forward_lite_conv2d_if32of32wf32_pool+0x572>
 8012726:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8012728:	429a      	cmp	r2, r3
 801272a:	d910      	bls.n	801274e <forward_lite_conv2d_if32of32wf32_pool+0x572>
 801272c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801272e:	461a      	mov	r2, r3
 8012730:	f852 0b04 	ldr.w	r0, [r2], #4
 8012734:	f841 0b04 	str.w	r0, [r1], #4
 8012738:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801273a:	4290      	cmp	r0, r2
 801273c:	d8f8      	bhi.n	8012730 <forward_lite_conv2d_if32of32wf32_pool+0x554>
 801273e:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8012740:	1ad3      	subs	r3, r2, r3
 8012742:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8012744:	f023 0303 	bic.w	r3, r3, #3
 8012748:	3304      	adds	r3, #4
 801274a:	441a      	add	r2, r3
 801274c:	921b      	str	r2, [sp, #108]	@ 0x6c
 801274e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8012750:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8012752:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 8012756:	440a      	add	r2, r1
 8012758:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 801275a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801275c:	1ad2      	subs	r2, r2, r3
 801275e:	4401      	add	r1, r0
 8012760:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8012762:	b212      	sxth	r2, r2
 8012764:	4403      	add	r3, r0
 8012766:	911b      	str	r1, [sp, #108]	@ 0x6c
 8012768:	9227      	str	r2, [sp, #156]	@ 0x9c
 801276a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801276c:	b21b      	sxth	r3, r3
 801276e:	428a      	cmp	r2, r1
 8012770:	931d      	str	r3, [sp, #116]	@ 0x74
 8012772:	460b      	mov	r3, r1
 8012774:	f63f adef 	bhi.w	8012356 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8012778:	9925      	ldr	r1, [sp, #148]	@ 0x94
 801277a:	440b      	add	r3, r1
 801277c:	429a      	cmp	r2, r3
 801277e:	d9fc      	bls.n	801277a <forward_lite_conv2d_if32of32wf32_pool+0x59e>
 8012780:	931b      	str	r3, [sp, #108]	@ 0x6c
 8012782:	e5e8      	b.n	8012356 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8012784:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8012786:	2a00      	cmp	r2, #0
 8012788:	f77f af7d 	ble.w	8012686 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 801278c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801278e:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8012790:	fb02 f303 	mul.w	r3, r2, r3
 8012794:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8012796:	931a      	str	r3, [sp, #104]	@ 0x68
 8012798:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801279a:	189a      	adds	r2, r3, r2
 801279c:	9326      	str	r3, [sp, #152]	@ 0x98
 801279e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80127a0:	923f      	str	r2, [sp, #252]	@ 0xfc
 80127a2:	9330      	str	r3, [sp, #192]	@ 0xc0
 80127a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80127a6:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80127a8:	440a      	add	r2, r1
 80127aa:	9319      	str	r3, [sp, #100]	@ 0x64
 80127ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80127ae:	9240      	str	r2, [sp, #256]	@ 0x100
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	f000 80fc 	beq.w	80129ae <forward_lite_conv2d_if32of32wf32_pool+0x7d2>
 80127b6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80127b8:	ecf3 1a01 	vldmia	r3!, {s3}
 80127bc:	9330      	str	r3, [sp, #192]	@ 0xc0
 80127be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	f000 80e5 	beq.w	8012990 <forward_lite_conv2d_if32of32wf32_pool+0x7b4>
 80127c6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80127c8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80127ca:	189a      	adds	r2, r3, r2
 80127cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80127ce:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 80127d0:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 80127d4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80127d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80127d8:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80127da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80127dc:	2300      	movs	r3, #0
 80127de:	9311      	str	r3, [sp, #68]	@ 0x44
 80127e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	f2c0 80e8 	blt.w	80129b8 <forward_lite_conv2d_if32of32wf32_pool+0x7dc>
 80127e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80127ea:	2000      	movs	r0, #0
 80127ec:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80127ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80127f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80127f2:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80127f4:	428c      	cmp	r4, r1
 80127f6:	bf94      	ite	ls
 80127f8:	ebc0 0004 	rsbls	r0, r0, r4
 80127fc:	ebc0 0001 	rsbhi	r0, r0, r1
 8012800:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8012802:	f1bb 0f00 	cmp.w	fp, #0
 8012806:	eba4 0900 	sub.w	r9, r4, r0
 801280a:	fb03 5301 	mla	r3, r3, r1, r5
 801280e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8012810:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8012812:	eba5 0a00 	sub.w	sl, r5, r0
 8012816:	fb04 f000 	mul.w	r0, r4, r0
 801281a:	f340 80d3 	ble.w	80129c4 <forward_lite_conv2d_if32of32wf32_pool+0x7e8>
 801281e:	f020 080f 	bic.w	r8, r0, #15
 8012822:	eeb0 7a61 	vmov.f32	s14, s3
 8012826:	fb0a fa01 	mul.w	sl, sl, r1
 801282a:	2400      	movs	r4, #0
 801282c:	f108 37ff 	add.w	r7, r8, #4294967295
 8012830:	fb09 f901 	mul.w	r9, r9, r1
 8012834:	093f      	lsrs	r7, r7, #4
 8012836:	3701      	adds	r7, #1
 8012838:	01be      	lsls	r6, r7, #6
 801283a:	013f      	lsls	r7, r7, #4
 801283c:	f1b8 0f00 	cmp.w	r8, #0
 8012840:	f340 80b8 	ble.w	80129b4 <forward_lite_conv2d_if32of32wf32_pool+0x7d8>
 8012844:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 8012848:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 801284c:	f04f 0c00 	mov.w	ip, #0
 8012850:	ed51 6a0f 	vldr	s13, [r1, #-60]	@ 0xffffffc4
 8012854:	f10c 0c10 	add.w	ip, ip, #16
 8012858:	ed55 7a0f 	vldr	s15, [r5, #-60]	@ 0xffffffc4
 801285c:	3140      	adds	r1, #64	@ 0x40
 801285e:	ed55 4a10 	vldr	s9, [r5, #-64]	@ 0xffffffc0
 8012862:	45c4      	cmp	ip, r8
 8012864:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012868:	ed11 5a20 	vldr	s10, [r1, #-128]	@ 0xffffff80
 801286c:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 8012870:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 8012874:	ed11 6a1e 	vldr	s12, [r1, #-120]	@ 0xffffff88
 8012878:	eee4 7a85 	vfma.f32	s15, s9, s10
 801287c:	ed51 6a1d 	vldr	s13, [r1, #-116]	@ 0xffffff8c
 8012880:	ed15 ea1d 	vldr	s28, [r5, #-116]	@ 0xffffff8c
 8012884:	ed55 da1c 	vldr	s27, [r5, #-112]	@ 0xffffff90
 8012888:	ed11 da1c 	vldr	s26, [r1, #-112]	@ 0xffffff90
 801288c:	ed55 ca1b 	vldr	s25, [r5, #-108]	@ 0xffffff94
 8012890:	ed11 ca1b 	vldr	s24, [r1, #-108]	@ 0xffffff94
 8012894:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012898:	ed55 ba1a 	vldr	s23, [r5, #-104]	@ 0xffffff98
 801289c:	ed11 ba1a 	vldr	s22, [r1, #-104]	@ 0xffffff98
 80128a0:	ed55 aa19 	vldr	s21, [r5, #-100]	@ 0xffffff9c
 80128a4:	ed11 aa19 	vldr	s20, [r1, #-100]	@ 0xffffff9c
 80128a8:	ed55 9a18 	vldr	s19, [r5, #-96]	@ 0xffffffa0
 80128ac:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 80128b0:	eeee 7a26 	vfma.f32	s15, s28, s13
 80128b4:	ed55 8a17 	vldr	s17, [r5, #-92]	@ 0xffffffa4
 80128b8:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 80128bc:	ed55 0a16 	vldr	s1, [r5, #-88]	@ 0xffffffa8
 80128c0:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 80128c4:	ed15 2a15 	vldr	s4, [r5, #-84]	@ 0xffffffac
 80128c8:	ed51 2a15 	vldr	s5, [r1, #-84]	@ 0xffffffac
 80128cc:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80128d0:	ed15 3a14 	vldr	s6, [r5, #-80]	@ 0xffffffb0
 80128d4:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 80128d8:	ed15 4a13 	vldr	s8, [r5, #-76]	@ 0xffffffb4
 80128dc:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 80128e0:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 80128e4:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 80128e8:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80128ec:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 80128f0:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 80128f4:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80128f8:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80128fc:	eee9 7a89 	vfma.f32	s15, s19, s18
 8012900:	eee8 7a80 	vfma.f32	s15, s17, s0
 8012904:	eee0 7a81 	vfma.f32	s15, s1, s2
 8012908:	eee2 7a22 	vfma.f32	s15, s4, s5
 801290c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8012910:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012914:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012918:	eee6 7a26 	vfma.f32	s15, s12, s13
 801291c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012920:	db96      	blt.n	8012850 <forward_lite_conv2d_if32of32wf32_pool+0x674>
 8012922:	4432      	add	r2, r6
 8012924:	4433      	add	r3, r6
 8012926:	4639      	mov	r1, r7
 8012928:	4288      	cmp	r0, r1
 801292a:	dd10      	ble.n	801294e <forward_lite_conv2d_if32of32wf32_pool+0x772>
 801292c:	460d      	mov	r5, r1
 801292e:	4696      	mov	lr, r2
 8012930:	469c      	mov	ip, r3
 8012932:	3501      	adds	r5, #1
 8012934:	ecfc 6a01 	vldmia	ip!, {s13}
 8012938:	ecfe 7a01 	vldmia	lr!, {s15}
 801293c:	42a8      	cmp	r0, r5
 801293e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012942:	d1f6      	bne.n	8012932 <forward_lite_conv2d_if32of32wf32_pool+0x756>
 8012944:	1a41      	subs	r1, r0, r1
 8012946:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801294a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801294e:	3401      	adds	r4, #1
 8012950:	4452      	add	r2, sl
 8012952:	444b      	add	r3, r9
 8012954:	45a3      	cmp	fp, r4
 8012956:	f47f af71 	bne.w	801283c <forward_lite_conv2d_if32of32wf32_pool+0x660>
 801295a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801295c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801295e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012960:	4410      	add	r0, r2
 8012962:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012964:	ed81 7a00 	vstr	s14, [r1]
 8012968:	900b      	str	r0, [sp, #44]	@ 0x2c
 801296a:	3301      	adds	r3, #1
 801296c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801296e:	9311      	str	r3, [sp, #68]	@ 0x44
 8012970:	4401      	add	r1, r0
 8012972:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8012974:	9110      	str	r1, [sp, #64]	@ 0x40
 8012976:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012978:	1a89      	subs	r1, r1, r2
 801297a:	910e      	str	r1, [sp, #56]	@ 0x38
 801297c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801297e:	4401      	add	r1, r0
 8012980:	910d      	str	r1, [sp, #52]	@ 0x34
 8012982:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012984:	1a8a      	subs	r2, r1, r2
 8012986:	920c      	str	r2, [sp, #48]	@ 0x30
 8012988:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801298a:	429a      	cmp	r2, r3
 801298c:	f47f af28 	bne.w	80127e0 <forward_lite_conv2d_if32of32wf32_pool+0x604>
 8012990:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012992:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8012994:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8012996:	440a      	add	r2, r1
 8012998:	3304      	adds	r3, #4
 801299a:	9219      	str	r2, [sp, #100]	@ 0x64
 801299c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801299e:	9326      	str	r3, [sp, #152]	@ 0x98
 80129a0:	4293      	cmp	r3, r2
 80129a2:	f43f ae70 	beq.w	8012686 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 80129a6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	f47f af04 	bne.w	80127b6 <forward_lite_conv2d_if32of32wf32_pool+0x5da>
 80129ae:	eef0 1a48 	vmov.f32	s3, s16
 80129b2:	e704      	b.n	80127be <forward_lite_conv2d_if32of32wf32_pool+0x5e2>
 80129b4:	2100      	movs	r1, #0
 80129b6:	e7b7      	b.n	8012928 <forward_lite_conv2d_if32of32wf32_pool+0x74c>
 80129b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80129ba:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80129bc:	4610      	mov	r0, r2
 80129be:	4413      	add	r3, r2
 80129c0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80129c2:	e714      	b.n	80127ee <forward_lite_conv2d_if32of32wf32_pool+0x612>
 80129c4:	eeb0 7a61 	vmov.f32	s14, s3
 80129c8:	e7c7      	b.n	801295a <forward_lite_conv2d_if32of32wf32_pool+0x77e>
 80129ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80129cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80129ce:	921c      	str	r2, [sp, #112]	@ 0x70
 80129d0:	e52d      	b.n	801242e <forward_lite_conv2d_if32of32wf32_pool+0x252>
 80129d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80129d4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80129d6:	3301      	adds	r3, #1
 80129d8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80129da:	440a      	add	r2, r1
 80129dc:	b219      	sxth	r1, r3
 80129de:	4290      	cmp	r0, r2
 80129e0:	d801      	bhi.n	80129e6 <forward_lite_conv2d_if32of32wf32_pool+0x80a>
 80129e2:	9825      	ldr	r0, [sp, #148]	@ 0x94
 80129e4:	4402      	add	r2, r0
 80129e6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80129e8:	4281      	cmp	r1, r0
 80129ea:	dbf3      	blt.n	80129d4 <forward_lite_conv2d_if32of32wf32_pool+0x7f8>
 80129ec:	921b      	str	r2, [sp, #108]	@ 0x6c
 80129ee:	e674      	b.n	80126da <forward_lite_conv2d_if32of32wf32_pool+0x4fe>

080129f0 <forward_lite_nl_relu_generic_if32of32_kernel>:
 80129f0:	edd3 6a02 	vldr	s13, [r3, #8]
 80129f4:	ed93 7a00 	vldr	s14, [r3]
 80129f8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80129fc:	ed93 6a01 	vldr	s12, [r3, #4]
 8012a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a04:	d42b      	bmi.n	8012a5e <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8012a06:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8012a0a:	4413      	add	r3, r2
 8012a0c:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8012a10:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8012a14:	4291      	cmp	r1, r2
 8012a16:	d821      	bhi.n	8012a5c <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8012a18:	f10c 0104 	add.w	r1, ip, #4
 8012a1c:	1d13      	adds	r3, r2, #4
 8012a1e:	eba2 020c 	sub.w	r2, r2, ip
 8012a22:	4408      	add	r0, r1
 8012a24:	e00c      	b.n	8012a40 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8012a26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a2a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8012a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a32:	db01      	blt.n	8012a38 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8012a34:	ee65 7a86 	vmul.f32	s15, s11, s12
 8012a38:	4293      	cmp	r3, r2
 8012a3a:	ed60 7a01 	vstmdb	r0!, {s15}
 8012a3e:	d00c      	beq.n	8012a5a <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8012a40:	ed73 7a01 	vldmdb	r3!, {s15}
 8012a44:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a4c:	daeb      	bge.n	8012a26 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8012a4e:	eef0 7a66 	vmov.f32	s15, s13
 8012a52:	4293      	cmp	r3, r2
 8012a54:	ed60 7a01 	vstmdb	r0!, {s15}
 8012a58:	d1f2      	bne.n	8012a40 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8012a5a:	4770      	bx	lr
 8012a5c:	4770      	bx	lr
 8012a5e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012a62:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8012a66:	4413      	add	r3, r2
 8012a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a6c:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8012a70:	b500      	push	{lr}
 8012a72:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8012a76:	d019      	beq.n	8012aac <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8012a78:	4561      	cmp	r1, ip
 8012a7a:	d815      	bhi.n	8012aa8 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8012a7c:	f10e 0204 	add.w	r2, lr, #4
 8012a80:	f10c 0304 	add.w	r3, ip, #4
 8012a84:	ebac 010e 	sub.w	r1, ip, lr
 8012a88:	4402      	add	r2, r0
 8012a8a:	ed73 7a01 	vldmdb	r3!, {s15}
 8012a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012a92:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8012a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a9a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012a9e:	d827      	bhi.n	8012af0 <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 8012aa0:	428b      	cmp	r3, r1
 8012aa2:	ed62 6a01 	vstmdb	r2!, {s13}
 8012aa6:	d1f0      	bne.n	8012a8a <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8012aa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8012aac:	4561      	cmp	r1, ip
 8012aae:	d8fb      	bhi.n	8012aa8 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8012ab0:	f10e 0204 	add.w	r2, lr, #4
 8012ab4:	f10c 0304 	add.w	r3, ip, #4
 8012ab8:	ebac 010e 	sub.w	r1, ip, lr
 8012abc:	f04f 0c00 	mov.w	ip, #0
 8012ac0:	4402      	add	r2, r0
 8012ac2:	ed73 7a01 	vldmdb	r3!, {s15}
 8012ac6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ace:	d40a      	bmi.n	8012ae6 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 8012ad0:	428b      	cmp	r3, r1
 8012ad2:	f842 cd04 	str.w	ip, [r2, #-4]!
 8012ad6:	d0e7      	beq.n	8012aa8 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8012ad8:	ed73 7a01 	vldmdb	r3!, {s15}
 8012adc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ae4:	d5f4      	bpl.n	8012ad0 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8012ae6:	428b      	cmp	r3, r1
 8012ae8:	ed62 7a01 	vstmdb	r2!, {s15}
 8012aec:	d1e9      	bne.n	8012ac2 <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 8012aee:	e7db      	b.n	8012aa8 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8012af0:	428b      	cmp	r3, r1
 8012af2:	ed62 7a01 	vstmdb	r2!, {s15}
 8012af6:	d1c8      	bne.n	8012a8a <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8012af8:	e7d6      	b.n	8012aa8 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8012afa:	bf00      	nop

08012afc <pool_func_mp_array_f32>:
 8012afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b00:	b091      	sub	sp, #68	@ 0x44
 8012b02:	468b      	mov	fp, r1
 8012b04:	469c      	mov	ip, r3
 8012b06:	4690      	mov	r8, r2
 8012b08:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 8012b0c:	4681      	mov	r9, r0
 8012b0e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8012b12:	9101      	str	r1, [sp, #4]
 8012b14:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 8012b18:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 8012b1c:	9105      	str	r1, [sp, #20]
 8012b1e:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8012b22:	9304      	str	r3, [sp, #16]
 8012b24:	9106      	str	r1, [sp, #24]
 8012b26:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8012b2a:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8012b2e:	ea52 0403 	orrs.w	r4, r2, r3
 8012b32:	9102      	str	r1, [sp, #8]
 8012b34:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8012b38:	9103      	str	r1, [sp, #12]
 8012b3a:	d173      	bne.n	8012c24 <pool_func_mp_array_f32+0x128>
 8012b3c:	9904      	ldr	r1, [sp, #16]
 8012b3e:	9d02      	ldr	r5, [sp, #8]
 8012b40:	eba1 000b 	sub.w	r0, r1, fp
 8012b44:	9e05      	ldr	r6, [sp, #20]
 8012b46:	1e69      	subs	r1, r5, #1
 8012b48:	3801      	subs	r0, #1
 8012b4a:	fb11 0106 	smlabb	r1, r1, r6, r0
 8012b4e:	0409      	lsls	r1, r1, #16
 8012b50:	d568      	bpl.n	8012c24 <pool_func_mp_array_f32+0x128>
 8012b52:	9901      	ldr	r1, [sp, #4]
 8012b54:	9e03      	ldr	r6, [sp, #12]
 8012b56:	eba1 0008 	sub.w	r0, r1, r8
 8012b5a:	9f06      	ldr	r7, [sp, #24]
 8012b5c:	1e71      	subs	r1, r6, #1
 8012b5e:	3801      	subs	r0, #1
 8012b60:	fb11 0107 	smlabb	r1, r1, r7, r0
 8012b64:	040f      	lsls	r7, r1, #16
 8012b66:	d55d      	bpl.n	8012c24 <pool_func_mp_array_f32+0x128>
 8012b68:	2e00      	cmp	r6, #0
 8012b6a:	d058      	beq.n	8012c1e <pool_func_mp_array_f32+0x122>
 8012b6c:	2d00      	cmp	r5, #0
 8012b6e:	d056      	beq.n	8012c1e <pool_func_mp_array_f32+0x122>
 8012b70:	4663      	mov	r3, ip
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d053      	beq.n	8012c1e <pool_func_mp_array_f32+0x122>
 8012b76:	2b01      	cmp	r3, #1
 8012b78:	f040 814a 	bne.w	8012e10 <pool_func_mp_array_f32+0x314>
 8012b7c:	46a2      	mov	sl, r4
 8012b7e:	4623      	mov	r3, r4
 8012b80:	9407      	str	r4, [sp, #28]
 8012b82:	9a02      	ldr	r2, [sp, #8]
 8012b84:	2700      	movs	r7, #0
 8012b86:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8012b8a:	fb02 f303 	mul.w	r3, r2, r3
 8012b8e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012b92:	46be      	mov	lr, r7
 8012b94:	46bc      	mov	ip, r7
 8012b96:	9308      	str	r3, [sp, #32]
 8012b98:	fa0f f38a 	sxth.w	r3, sl
 8012b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b9e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012ba0:	b23d      	sxth	r5, r7
 8012ba2:	9b08      	ldr	r3, [sp, #32]
 8012ba4:	fa0f f088 	sxth.w	r0, r8
 8012ba8:	42b4      	cmp	r4, r6
 8012baa:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8012e0c <pool_func_mp_array_f32+0x310>
 8012bae:	449c      	add	ip, r3
 8012bb0:	da12      	bge.n	8012bd8 <pool_func_mp_array_f32+0xdc>
 8012bb2:	4285      	cmp	r5, r0
 8012bb4:	da0c      	bge.n	8012bd0 <pool_func_mp_array_f32+0xd4>
 8012bb6:	fb04 520b 	mla	r2, r4, fp, r5
 8012bba:	462b      	mov	r3, r5
 8012bbc:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012bc0:	3301      	adds	r3, #1
 8012bc2:	ecb2 7a01 	vldmia	r2!, {s14}
 8012bc6:	b219      	sxth	r1, r3
 8012bc8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8012bcc:	4281      	cmp	r1, r0
 8012bce:	dbf7      	blt.n	8012bc0 <pool_func_mp_array_f32+0xc4>
 8012bd0:	3401      	adds	r4, #1
 8012bd2:	b224      	sxth	r4, r4
 8012bd4:	42b4      	cmp	r4, r6
 8012bd6:	dbec      	blt.n	8012bb2 <pool_func_mp_array_f32+0xb6>
 8012bd8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8012bda:	f10e 0e01 	add.w	lr, lr, #1
 8012bde:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8012be2:	9b05      	ldr	r3, [sp, #20]
 8012be4:	fa0f fe8e 	sxth.w	lr, lr
 8012be8:	4498      	add	r8, r3
 8012bea:	441f      	add	r7, r3
 8012bec:	9b02      	ldr	r3, [sp, #8]
 8012bee:	edcc 7a00 	vstr	s15, [ip]
 8012bf2:	fa1f f888 	uxth.w	r8, r8
 8012bf6:	4573      	cmp	r3, lr
 8012bf8:	b2bf      	uxth	r7, r7
 8012bfa:	46f4      	mov	ip, lr
 8012bfc:	dccf      	bgt.n	8012b9e <pool_func_mp_array_f32+0xa2>
 8012bfe:	9a07      	ldr	r2, [sp, #28]
 8012c00:	9906      	ldr	r1, [sp, #24]
 8012c02:	9b01      	ldr	r3, [sp, #4]
 8012c04:	3201      	adds	r2, #1
 8012c06:	448a      	add	sl, r1
 8012c08:	b212      	sxth	r2, r2
 8012c0a:	440b      	add	r3, r1
 8012c0c:	9903      	ldr	r1, [sp, #12]
 8012c0e:	fa1f fa8a 	uxth.w	sl, sl
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	9207      	str	r2, [sp, #28]
 8012c16:	4291      	cmp	r1, r2
 8012c18:	9301      	str	r3, [sp, #4]
 8012c1a:	4613      	mov	r3, r2
 8012c1c:	dcb1      	bgt.n	8012b82 <pool_func_mp_array_f32+0x86>
 8012c1e:	b011      	add	sp, #68	@ 0x44
 8012c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c24:	9903      	ldr	r1, [sp, #12]
 8012c26:	2900      	cmp	r1, #0
 8012c28:	d0f9      	beq.n	8012c1e <pool_func_mp_array_f32+0x122>
 8012c2a:	9902      	ldr	r1, [sp, #8]
 8012c2c:	2900      	cmp	r1, #0
 8012c2e:	d0f6      	beq.n	8012c1e <pool_func_mp_array_f32+0x122>
 8012c30:	4661      	mov	r1, ip
 8012c32:	2900      	cmp	r1, #0
 8012c34:	d0f3      	beq.n	8012c1e <pool_func_mp_array_f32+0x122>
 8012c36:	2901      	cmp	r1, #1
 8012c38:	9901      	ldr	r1, [sp, #4]
 8012c3a:	d163      	bne.n	8012d04 <pool_func_mp_array_f32+0x208>
 8012c3c:	1a8a      	subs	r2, r1, r2
 8012c3e:	9904      	ldr	r1, [sp, #16]
 8012c40:	1ac9      	subs	r1, r1, r3
 8012c42:	425b      	negs	r3, r3
 8012c44:	b292      	uxth	r2, r2
 8012c46:	b29b      	uxth	r3, r3
 8012c48:	9204      	str	r2, [sp, #16]
 8012c4a:	b28a      	uxth	r2, r1
 8012c4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c4e:	2300      	movs	r3, #0
 8012c50:	920a      	str	r2, [sp, #40]	@ 0x28
 8012c52:	9307      	str	r3, [sp, #28]
 8012c54:	9a02      	ldr	r2, [sp, #8]
 8012c56:	2700      	movs	r7, #0
 8012c58:	fb02 f303 	mul.w	r3, r2, r3
 8012c5c:	9a04      	ldr	r2, [sp, #16]
 8012c5e:	46bc      	mov	ip, r7
 8012c60:	9308      	str	r3, [sp, #32]
 8012c62:	b216      	sxth	r6, r2
 8012c64:	9b01      	ldr	r3, [sp, #4]
 8012c66:	1ad3      	subs	r3, r2, r3
 8012c68:	e9dd ae0a 	ldrd	sl, lr, [sp, #40]	@ 0x28
 8012c6c:	b21b      	sxth	r3, r3
 8012c6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c70:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012c72:	fa0f f58e 	sxth.w	r5, lr
 8012c76:	9b08      	ldr	r3, [sp, #32]
 8012c78:	fa0f f48a 	sxth.w	r4, sl
 8012c7c:	428e      	cmp	r6, r1
 8012c7e:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8012e0c <pool_func_mp_array_f32+0x310>
 8012c82:	449c      	add	ip, r3
 8012c84:	dd1c      	ble.n	8012cc0 <pool_func_mp_array_f32+0x1c4>
 8012c86:	42a5      	cmp	r5, r4
 8012c88:	da16      	bge.n	8012cb8 <pool_func_mp_array_f32+0x1bc>
 8012c8a:	4588      	cmp	r8, r1
 8012c8c:	fb01 f20b 	mul.w	r2, r1, fp
 8012c90:	dd12      	ble.n	8012cb8 <pool_func_mp_array_f32+0x1bc>
 8012c92:	442a      	add	r2, r5
 8012c94:	462b      	mov	r3, r5
 8012c96:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012c9a:	ea41 0003 	orr.w	r0, r1, r3
 8012c9e:	0400      	lsls	r0, r0, #16
 8012ca0:	d405      	bmi.n	8012cae <pool_func_mp_array_f32+0x1b2>
 8012ca2:	459b      	cmp	fp, r3
 8012ca4:	dd03      	ble.n	8012cae <pool_func_mp_array_f32+0x1b2>
 8012ca6:	ed92 7a00 	vldr	s14, [r2]
 8012caa:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8012cae:	3301      	adds	r3, #1
 8012cb0:	3204      	adds	r2, #4
 8012cb2:	b218      	sxth	r0, r3
 8012cb4:	42a0      	cmp	r0, r4
 8012cb6:	dbf0      	blt.n	8012c9a <pool_func_mp_array_f32+0x19e>
 8012cb8:	3101      	adds	r1, #1
 8012cba:	b209      	sxth	r1, r1
 8012cbc:	42b1      	cmp	r1, r6
 8012cbe:	dbe2      	blt.n	8012c86 <pool_func_mp_array_f32+0x18a>
 8012cc0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8012cc2:	3701      	adds	r7, #1
 8012cc4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8012cc8:	9b05      	ldr	r3, [sp, #20]
 8012cca:	b23f      	sxth	r7, r7
 8012ccc:	449a      	add	sl, r3
 8012cce:	449e      	add	lr, r3
 8012cd0:	9b02      	ldr	r3, [sp, #8]
 8012cd2:	edcc 7a00 	vstr	s15, [ip]
 8012cd6:	fa1f fa8a 	uxth.w	sl, sl
 8012cda:	42bb      	cmp	r3, r7
 8012cdc:	fa1f fe8e 	uxth.w	lr, lr
 8012ce0:	46bc      	mov	ip, r7
 8012ce2:	dcc5      	bgt.n	8012c70 <pool_func_mp_array_f32+0x174>
 8012ce4:	9a07      	ldr	r2, [sp, #28]
 8012ce6:	9b04      	ldr	r3, [sp, #16]
 8012ce8:	9906      	ldr	r1, [sp, #24]
 8012cea:	3201      	adds	r2, #1
 8012cec:	440b      	add	r3, r1
 8012cee:	b212      	sxth	r2, r2
 8012cf0:	9903      	ldr	r1, [sp, #12]
 8012cf2:	b29b      	uxth	r3, r3
 8012cf4:	9207      	str	r2, [sp, #28]
 8012cf6:	4291      	cmp	r1, r2
 8012cf8:	9304      	str	r3, [sp, #16]
 8012cfa:	4613      	mov	r3, r2
 8012cfc:	dcaa      	bgt.n	8012c54 <pool_func_mp_array_f32+0x158>
 8012cfe:	b011      	add	sp, #68	@ 0x44
 8012d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d04:	1a88      	subs	r0, r1, r2
 8012d06:	9904      	ldr	r1, [sp, #16]
 8012d08:	4252      	negs	r2, r2
 8012d0a:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 8012d0e:	1ac9      	subs	r1, r1, r3
 8012d10:	425b      	negs	r3, r3
 8012d12:	b292      	uxth	r2, r2
 8012d14:	46e6      	mov	lr, ip
 8012d16:	b29b      	uxth	r3, r3
 8012d18:	b280      	uxth	r0, r0
 8012d1a:	9208      	str	r2, [sp, #32]
 8012d1c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012d1e:	b28a      	uxth	r2, r1
 8012d20:	2300      	movs	r3, #0
 8012d22:	9007      	str	r0, [sp, #28]
 8012d24:	920e      	str	r2, [sp, #56]	@ 0x38
 8012d26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012d28:	9a02      	ldr	r2, [sp, #8]
 8012d2a:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 8012d2e:	fb02 f303 	mul.w	r3, r2, r3
 8012d32:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8012d36:	920a      	str	r2, [sp, #40]	@ 0x28
 8012d38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012d3a:	930d      	str	r3, [sp, #52]	@ 0x34
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	9201      	str	r2, [sp, #4]
 8012d40:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012d42:	930c      	str	r3, [sp, #48]	@ 0x30
 8012d44:	9204      	str	r2, [sp, #16]
 8012d46:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012d48:	f04f 0c00 	mov.w	ip, #0
 8012d4c:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 8012d50:	4413      	add	r3, r2
 8012d52:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8012d56:	4667      	mov	r7, ip
 8012d58:	fb0e f303 	mul.w	r3, lr, r3
 8012d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012d60:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8012e0c <pool_func_mp_array_f32+0x310>
 8012d64:	42b1      	cmp	r1, r6
 8012d66:	da1e      	bge.n	8012da6 <pool_func_mp_array_f32+0x2aa>
 8012d68:	42a5      	cmp	r5, r4
 8012d6a:	da18      	bge.n	8012d9e <pool_func_mp_array_f32+0x2a2>
 8012d6c:	4541      	cmp	r1, r8
 8012d6e:	fb01 f30b 	mul.w	r3, r1, fp
 8012d72:	da14      	bge.n	8012d9e <pool_func_mp_array_f32+0x2a2>
 8012d74:	195a      	adds	r2, r3, r5
 8012d76:	462b      	mov	r3, r5
 8012d78:	fb0e 7202 	mla	r2, lr, r2, r7
 8012d7c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012d80:	ea41 0003 	orr.w	r0, r1, r3
 8012d84:	0400      	lsls	r0, r0, #16
 8012d86:	d405      	bmi.n	8012d94 <pool_func_mp_array_f32+0x298>
 8012d88:	459b      	cmp	fp, r3
 8012d8a:	dd03      	ble.n	8012d94 <pool_func_mp_array_f32+0x298>
 8012d8c:	ed92 7a00 	vldr	s14, [r2]
 8012d90:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8012d94:	3301      	adds	r3, #1
 8012d96:	4452      	add	r2, sl
 8012d98:	b218      	sxth	r0, r3
 8012d9a:	42a0      	cmp	r0, r4
 8012d9c:	dbf0      	blt.n	8012d80 <pool_func_mp_array_f32+0x284>
 8012d9e:	3101      	adds	r1, #1
 8012da0:	b209      	sxth	r1, r1
 8012da2:	42b1      	cmp	r1, r6
 8012da4:	dbe0      	blt.n	8012d68 <pool_func_mp_array_f32+0x26c>
 8012da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012da8:	f10c 0c01 	add.w	ip, ip, #1
 8012dac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8012dae:	443b      	add	r3, r7
 8012db0:	fa0f fc8c 	sxth.w	ip, ip
 8012db4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012db8:	45f4      	cmp	ip, lr
 8012dba:	4667      	mov	r7, ip
 8012dbc:	edc3 7a00 	vstr	s15, [r3]
 8012dc0:	dbcd      	blt.n	8012d5e <pool_func_mp_array_f32+0x262>
 8012dc2:	9a01      	ldr	r2, [sp, #4]
 8012dc4:	9805      	ldr	r0, [sp, #20]
 8012dc6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012dc8:	4402      	add	r2, r0
 8012dca:	9b04      	ldr	r3, [sp, #16]
 8012dcc:	3101      	adds	r1, #1
 8012dce:	b292      	uxth	r2, r2
 8012dd0:	4403      	add	r3, r0
 8012dd2:	b209      	sxth	r1, r1
 8012dd4:	9201      	str	r2, [sp, #4]
 8012dd6:	b29b      	uxth	r3, r3
 8012dd8:	9a02      	ldr	r2, [sp, #8]
 8012dda:	9304      	str	r3, [sp, #16]
 8012ddc:	460b      	mov	r3, r1
 8012dde:	428a      	cmp	r2, r1
 8012de0:	910c      	str	r1, [sp, #48]	@ 0x30
 8012de2:	dcb0      	bgt.n	8012d46 <pool_func_mp_array_f32+0x24a>
 8012de4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012de6:	9b08      	ldr	r3, [sp, #32]
 8012de8:	3101      	adds	r1, #1
 8012dea:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 8012dee:	b209      	sxth	r1, r1
 8012df0:	4402      	add	r2, r0
 8012df2:	4403      	add	r3, r0
 8012df4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012df6:	b292      	uxth	r2, r2
 8012df8:	b29b      	uxth	r3, r3
 8012dfa:	9207      	str	r2, [sp, #28]
 8012dfc:	9a03      	ldr	r2, [sp, #12]
 8012dfe:	9308      	str	r3, [sp, #32]
 8012e00:	460b      	mov	r3, r1
 8012e02:	428a      	cmp	r2, r1
 8012e04:	dc90      	bgt.n	8012d28 <pool_func_mp_array_f32+0x22c>
 8012e06:	b011      	add	sp, #68	@ 0x44
 8012e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e0c:	cf000000 	.word	0xcf000000
 8012e10:	4623      	mov	r3, r4
 8012e12:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 8012e16:	46e0      	mov	r8, ip
 8012e18:	9408      	str	r4, [sp, #32]
 8012e1a:	9409      	str	r4, [sp, #36]	@ 0x24
 8012e1c:	9a02      	ldr	r2, [sp, #8]
 8012e1e:	f04f 0c00 	mov.w	ip, #0
 8012e22:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8012e26:	fb02 f303 	mul.w	r3, r2, r3
 8012e2a:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 8012e2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8012e30:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8012e34:	930d      	str	r3, [sp, #52]	@ 0x34
 8012e36:	9b04      	ldr	r3, [sp, #16]
 8012e38:	9307      	str	r3, [sp, #28]
 8012e3a:	4663      	mov	r3, ip
 8012e3c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012e3e:	f04f 0e00 	mov.w	lr, #0
 8012e42:	fa0f f58c 	sxth.w	r5, ip
 8012e46:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8012e4a:	4413      	add	r3, r2
 8012e4c:	4676      	mov	r6, lr
 8012e4e:	fb08 f303 	mul.w	r3, r8, r3
 8012e52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012e54:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8012e56:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 8012e0c <pool_func_mp_array_f32+0x310>
 8012e5a:	42bc      	cmp	r4, r7
 8012e5c:	da15      	bge.n	8012e8a <pool_func_mp_array_f32+0x38e>
 8012e5e:	4285      	cmp	r5, r0
 8012e60:	da0f      	bge.n	8012e82 <pool_func_mp_array_f32+0x386>
 8012e62:	fb0b 5304 	mla	r3, fp, r4, r5
 8012e66:	462a      	mov	r2, r5
 8012e68:	fb08 6303 	mla	r3, r8, r3, r6
 8012e6c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8012e70:	3201      	adds	r2, #1
 8012e72:	ed93 7a00 	vldr	s14, [r3]
 8012e76:	4453      	add	r3, sl
 8012e78:	b211      	sxth	r1, r2
 8012e7a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8012e7e:	4281      	cmp	r1, r0
 8012e80:	dbf6      	blt.n	8012e70 <pool_func_mp_array_f32+0x374>
 8012e82:	3401      	adds	r4, #1
 8012e84:	b224      	sxth	r4, r4
 8012e86:	42bc      	cmp	r4, r7
 8012e88:	dbe9      	blt.n	8012e5e <pool_func_mp_array_f32+0x362>
 8012e8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012e8c:	f10e 0e01 	add.w	lr, lr, #1
 8012e90:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8012e92:	4433      	add	r3, r6
 8012e94:	fa0f fe8e 	sxth.w	lr, lr
 8012e98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012e9c:	45c6      	cmp	lr, r8
 8012e9e:	4676      	mov	r6, lr
 8012ea0:	edc3 7a00 	vstr	s15, [r3]
 8012ea4:	dbd6      	blt.n	8012e54 <pool_func_mp_array_f32+0x358>
 8012ea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012ea8:	9905      	ldr	r1, [sp, #20]
 8012eaa:	9b07      	ldr	r3, [sp, #28]
 8012eac:	3201      	adds	r2, #1
 8012eae:	448c      	add	ip, r1
 8012eb0:	b212      	sxth	r2, r2
 8012eb2:	440b      	add	r3, r1
 8012eb4:	9902      	ldr	r1, [sp, #8]
 8012eb6:	fa1f fc8c 	uxth.w	ip, ip
 8012eba:	b29b      	uxth	r3, r3
 8012ebc:	920a      	str	r2, [sp, #40]	@ 0x28
 8012ebe:	4291      	cmp	r1, r2
 8012ec0:	9307      	str	r3, [sp, #28]
 8012ec2:	4613      	mov	r3, r2
 8012ec4:	dcba      	bgt.n	8012e3c <pool_func_mp_array_f32+0x340>
 8012ec6:	9a01      	ldr	r2, [sp, #4]
 8012ec8:	9806      	ldr	r0, [sp, #24]
 8012eca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012ecc:	4402      	add	r2, r0
 8012ece:	9b08      	ldr	r3, [sp, #32]
 8012ed0:	3101      	adds	r1, #1
 8012ed2:	b292      	uxth	r2, r2
 8012ed4:	4403      	add	r3, r0
 8012ed6:	b209      	sxth	r1, r1
 8012ed8:	9201      	str	r2, [sp, #4]
 8012eda:	b29b      	uxth	r3, r3
 8012edc:	9a03      	ldr	r2, [sp, #12]
 8012ede:	9308      	str	r3, [sp, #32]
 8012ee0:	460b      	mov	r3, r1
 8012ee2:	428a      	cmp	r2, r1
 8012ee4:	9109      	str	r1, [sp, #36]	@ 0x24
 8012ee6:	dc99      	bgt.n	8012e1c <pool_func_mp_array_f32+0x320>
 8012ee8:	e699      	b.n	8012c1e <pool_func_mp_array_f32+0x122>
 8012eea:	bf00      	nop

08012eec <forward_lite_upsample_bilinear_if32of32>:
 8012eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ef0:	ed2d 8b0a 	vpush	{d8-d12}
 8012ef4:	b08f      	sub	sp, #60	@ 0x3c
 8012ef6:	4683      	mov	fp, r0
 8012ef8:	9104      	str	r1, [sp, #16]
 8012efa:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8012efe:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8012f02:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 8012f06:	9206      	str	r2, [sp, #24]
 8012f08:	2900      	cmp	r1, #0
 8012f0a:	f000 80a7 	beq.w	801305c <forward_lite_upsample_bilinear_if32of32+0x170>
 8012f0e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012f12:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012f16:	ee70 aae7 	vsub.f32	s21, s1, s15
 8012f1a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012f1e:	ee6a aa87 	vmul.f32	s21, s21, s14
 8012f22:	ee27 9a87 	vmul.f32	s18, s15, s14
 8012f26:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012f2a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012f2c:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8012f30:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8012f34:	2a00      	cmp	r2, #0
 8012f36:	f000 808c 	beq.w	8013052 <forward_lite_upsample_bilinear_if32of32+0x166>
 8012f3a:	3b01      	subs	r3, #1
 8012f3c:	ea4f 068a 	mov.w	r6, sl, lsl #2
 8012f40:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8013068 <forward_lite_upsample_bilinear_if32of32+0x17c>
 8012f44:	ee07 3a90 	vmov	s15, r3
 8012f48:	9b06      	ldr	r3, [sp, #24]
 8012f4a:	1e5a      	subs	r2, r3, #1
 8012f4c:	fb0a f303 	mul.w	r3, sl, r3
 8012f50:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8012f54:	ee0c 2a90 	vmov	s25, r2
 8012f58:	9305      	str	r3, [sp, #20]
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8012f60:	9303      	str	r3, [sp, #12]
 8012f62:	fb06 f308 	mul.w	r3, r6, r8
 8012f66:	9307      	str	r3, [sp, #28]
 8012f68:	eddd 7a03 	vldr	s15, [sp, #12]
 8012f6c:	9b05      	ldr	r3, [sp, #20]
 8012f6e:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8012f72:	ee7b baea 	vsub.f32	s23, s23, s21
 8012f76:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8012f7a:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8012f7e:	fecb baca 	vminnm.f32	s23, s23, s20
 8012f82:	eef4 ba4a 	vcmp.f32	s23, s20
 8012f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f8a:	bf14      	ite	ne
 8012f8c:	4699      	movne	r9, r3
 8012f8e:	f04f 0900 	moveq.w	r9, #0
 8012f92:	f1b8 0f00 	cmp.w	r8, #0
 8012f96:	d056      	beq.n	8013046 <forward_lite_upsample_bilinear_if32of32+0x15a>
 8012f98:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8012f9c:	9b06      	ldr	r3, [sp, #24]
 8012f9e:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8012fa2:	9d04      	ldr	r5, [sp, #16]
 8012fa4:	2400      	movs	r4, #0
 8012fa6:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8012faa:	ee17 7a10 	vmov	r7, s14
 8012fae:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8012fb2:	fb03 f707 	mul.w	r7, r3, r7
 8012fb6:	ee7b bae7 	vsub.f32	s23, s23, s15
 8012fba:	ee3c ca27 	vadd.f32	s24, s24, s15
 8012fbe:	ee07 4a90 	vmov	s15, r4
 8012fc2:	ab0a      	add	r3, sp, #40	@ 0x28
 8012fc4:	3401      	adds	r4, #1
 8012fc6:	4629      	mov	r1, r5
 8012fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012fcc:	9300      	str	r3, [sp, #0]
 8012fce:	4652      	mov	r2, sl
 8012fd0:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8012fd4:	4435      	add	r5, r6
 8012fd6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012fda:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8012fde:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8012fe2:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8012fe6:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8012fea:	eef4 7a6c 	vcmp.f32	s15, s25
 8012fee:	ee38 7a67 	vsub.f32	s14, s16, s15
 8012ff2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8012ff6:	ee16 0a90 	vmov	r0, s13
 8012ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ffe:	4438      	add	r0, r7
 8013000:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013004:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013008:	bf14      	ite	ne
 801300a:	4653      	movne	r3, sl
 801300c:	2300      	moveq	r3, #0
 801300e:	fb06 b000 	mla	r0, r6, r0, fp
 8013012:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8013016:	ee27 6a8c 	vmul.f32	s12, s15, s24
 801301a:	9308      	str	r3, [sp, #32]
 801301c:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8013020:	ab08      	add	r3, sp, #32
 8013022:	ee67 7aab 	vmul.f32	s15, s15, s23
 8013026:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 801302a:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 801302e:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8013032:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8013036:	f001 f9d9 	bl	80143ec <lite_bilinear_if32of32_kernel>
 801303a:	45a0      	cmp	r8, r4
 801303c:	d1bf      	bne.n	8012fbe <forward_lite_upsample_bilinear_if32of32+0xd2>
 801303e:	9b04      	ldr	r3, [sp, #16]
 8013040:	9a07      	ldr	r2, [sp, #28]
 8013042:	4413      	add	r3, r2
 8013044:	9304      	str	r3, [sp, #16]
 8013046:	9b03      	ldr	r3, [sp, #12]
 8013048:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801304a:	3301      	adds	r3, #1
 801304c:	429a      	cmp	r2, r3
 801304e:	9303      	str	r3, [sp, #12]
 8013050:	d18a      	bne.n	8012f68 <forward_lite_upsample_bilinear_if32of32+0x7c>
 8013052:	b00f      	add	sp, #60	@ 0x3c
 8013054:	ecbd 8b0a 	vpop	{d8-d12}
 8013058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801305c:	eddf aa02 	vldr	s21, [pc, #8]	@ 8013068 <forward_lite_upsample_bilinear_if32of32+0x17c>
 8013060:	eeb0 9a6a 	vmov.f32	s18, s21
 8013064:	e75f      	b.n	8012f26 <forward_lite_upsample_bilinear_if32of32+0x3a>
 8013066:	bf00      	nop
 8013068:	00000000 	.word	0x00000000

0801306c <forward_lite_upsample_bilinear_is8os8>:
 801306c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013070:	ed2d 8b0a 	vpush	{d8-d12}
 8013074:	b08f      	sub	sp, #60	@ 0x3c
 8013076:	4682      	mov	sl, r0
 8013078:	9104      	str	r1, [sp, #16]
 801307a:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 801307e:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8013080:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8013084:	9206      	str	r2, [sp, #24]
 8013086:	2900      	cmp	r1, #0
 8013088:	f000 80aa 	beq.w	80131e0 <forward_lite_upsample_bilinear_is8os8+0x174>
 801308c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013090:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013094:	ee70 aae7 	vsub.f32	s21, s1, s15
 8013098:	ee70 7a67 	vsub.f32	s15, s0, s15
 801309c:	ee6a aa87 	vmul.f32	s21, s21, s14
 80130a0:	ee27 9a87 	vmul.f32	s18, s15, s14
 80130a4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80130a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80130aa:	ee87 baa0 	vdiv.f32	s22, s15, s1
 80130ae:	eec7 9a80 	vdiv.f32	s19, s15, s0
 80130b2:	2a00      	cmp	r2, #0
 80130b4:	f000 808f 	beq.w	80131d6 <forward_lite_upsample_bilinear_is8os8+0x16a>
 80130b8:	3b01      	subs	r3, #1
 80130ba:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 80131ec <forward_lite_upsample_bilinear_is8os8+0x180>
 80130be:	ee07 3a90 	vmov	s15, r3
 80130c2:	9b06      	ldr	r3, [sp, #24]
 80130c4:	1e5a      	subs	r2, r3, #1
 80130c6:	fb0b f303 	mul.w	r3, fp, r3
 80130ca:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 80130ce:	ee0c 2a90 	vmov	s25, r2
 80130d2:	9305      	str	r3, [sp, #20]
 80130d4:	fb07 f30b 	mul.w	r3, r7, fp
 80130d8:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 80130dc:	9307      	str	r3, [sp, #28]
 80130de:	2300      	movs	r3, #0
 80130e0:	9303      	str	r3, [sp, #12]
 80130e2:	eddd 7a03 	vldr	s15, [sp, #12]
 80130e6:	9b05      	ldr	r3, [sp, #20]
 80130e8:	eef8 ba67 	vcvt.f32.u32	s23, s15
 80130ec:	ee7b baea 	vsub.f32	s23, s23, s21
 80130f0:	ee6b ba8b 	vmul.f32	s23, s23, s22
 80130f4:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 80130f8:	fecb baca 	vminnm.f32	s23, s23, s20
 80130fc:	eef4 ba4a 	vcmp.f32	s23, s20
 8013100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013104:	bf14      	ite	ne
 8013106:	4698      	movne	r8, r3
 8013108:	f04f 0800 	moveq.w	r8, #0
 801310c:	2f00      	cmp	r7, #0
 801310e:	d05c      	beq.n	80131ca <forward_lite_upsample_bilinear_is8os8+0x15e>
 8013110:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8013114:	9b06      	ldr	r3, [sp, #24]
 8013116:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801311a:	9722      	str	r7, [sp, #136]	@ 0x88
 801311c:	9d04      	ldr	r5, [sp, #16]
 801311e:	4647      	mov	r7, r8
 8013120:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8013124:	ee17 6a10 	vmov	r6, s14
 8013128:	ee38 ca6b 	vsub.f32	s24, s16, s23
 801312c:	2400      	movs	r4, #0
 801312e:	fb03 f606 	mul.w	r6, r3, r6
 8013132:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8013136:	ee7b bae7 	vsub.f32	s23, s23, s15
 801313a:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 801313e:	ee3c ca27 	vadd.f32	s24, s24, s15
 8013142:	ee07 4a90 	vmov	s15, r4
 8013146:	3401      	adds	r4, #1
 8013148:	4629      	mov	r1, r5
 801314a:	465a      	mov	r2, fp
 801314c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013150:	f8cd 9000 	str.w	r9, [sp]
 8013154:	9709      	str	r7, [sp, #36]	@ 0x24
 8013156:	445d      	add	r5, fp
 8013158:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801315c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8013160:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8013164:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8013168:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 801316c:	eef4 7a6c 	vcmp.f32	s15, s25
 8013170:	ee38 7a67 	vsub.f32	s14, s16, s15
 8013174:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8013178:	ee16 0a90 	vmov	r0, s13
 801317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013180:	4430      	add	r0, r6
 8013182:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013186:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801318a:	bf14      	ite	ne
 801318c:	465b      	movne	r3, fp
 801318e:	2300      	moveq	r3, #0
 8013190:	fb0b a000 	mla	r0, fp, r0, sl
 8013194:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8013198:	ee27 6a8c 	vmul.f32	s12, s15, s24
 801319c:	9308      	str	r3, [sp, #32]
 801319e:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80131a2:	ab08      	add	r3, sp, #32
 80131a4:	ee67 7aab 	vmul.f32	s15, s15, s23
 80131a8:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 80131ac:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 80131b0:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 80131b4:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 80131b8:	f001 f948 	bl	801444c <lite_bilinear_is8os8_kernel>
 80131bc:	45a0      	cmp	r8, r4
 80131be:	d1c0      	bne.n	8013142 <forward_lite_upsample_bilinear_is8os8+0xd6>
 80131c0:	9b04      	ldr	r3, [sp, #16]
 80131c2:	4647      	mov	r7, r8
 80131c4:	9a07      	ldr	r2, [sp, #28]
 80131c6:	4413      	add	r3, r2
 80131c8:	9304      	str	r3, [sp, #16]
 80131ca:	9b03      	ldr	r3, [sp, #12]
 80131cc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80131ce:	3301      	adds	r3, #1
 80131d0:	429a      	cmp	r2, r3
 80131d2:	9303      	str	r3, [sp, #12]
 80131d4:	d185      	bne.n	80130e2 <forward_lite_upsample_bilinear_is8os8+0x76>
 80131d6:	b00f      	add	sp, #60	@ 0x3c
 80131d8:	ecbd 8b0a 	vpop	{d8-d12}
 80131dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131e0:	eddf aa02 	vldr	s21, [pc, #8]	@ 80131ec <forward_lite_upsample_bilinear_is8os8+0x180>
 80131e4:	eeb0 9a6a 	vmov.f32	s18, s21
 80131e8:	e75c      	b.n	80130a4 <forward_lite_upsample_bilinear_is8os8+0x38>
 80131ea:	bf00      	nop
 80131ec:	00000000 	.word	0x00000000

080131f0 <forward_lite_upsample_bilinear_iu8ou8>:
 80131f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131f4:	ed2d 8b0a 	vpush	{d8-d12}
 80131f8:	b08f      	sub	sp, #60	@ 0x3c
 80131fa:	4682      	mov	sl, r0
 80131fc:	9104      	str	r1, [sp, #16]
 80131fe:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8013202:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8013204:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8013208:	9206      	str	r2, [sp, #24]
 801320a:	2900      	cmp	r1, #0
 801320c:	f000 80aa 	beq.w	8013364 <forward_lite_upsample_bilinear_iu8ou8+0x174>
 8013210:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013214:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013218:	ee70 aae7 	vsub.f32	s21, s1, s15
 801321c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013220:	ee6a aa87 	vmul.f32	s21, s21, s14
 8013224:	ee27 9a87 	vmul.f32	s18, s15, s14
 8013228:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801322c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801322e:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8013232:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8013236:	2a00      	cmp	r2, #0
 8013238:	f000 808f 	beq.w	801335a <forward_lite_upsample_bilinear_iu8ou8+0x16a>
 801323c:	3b01      	subs	r3, #1
 801323e:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 8013370 <forward_lite_upsample_bilinear_iu8ou8+0x180>
 8013242:	ee07 3a90 	vmov	s15, r3
 8013246:	9b06      	ldr	r3, [sp, #24]
 8013248:	1e5a      	subs	r2, r3, #1
 801324a:	fb0b f303 	mul.w	r3, fp, r3
 801324e:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8013252:	ee0c 2a90 	vmov	s25, r2
 8013256:	9305      	str	r3, [sp, #20]
 8013258:	fb07 f30b 	mul.w	r3, r7, fp
 801325c:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8013260:	9307      	str	r3, [sp, #28]
 8013262:	2300      	movs	r3, #0
 8013264:	9303      	str	r3, [sp, #12]
 8013266:	eddd 7a03 	vldr	s15, [sp, #12]
 801326a:	9b05      	ldr	r3, [sp, #20]
 801326c:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8013270:	ee7b baea 	vsub.f32	s23, s23, s21
 8013274:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8013278:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 801327c:	fecb baca 	vminnm.f32	s23, s23, s20
 8013280:	eef4 ba4a 	vcmp.f32	s23, s20
 8013284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013288:	bf14      	ite	ne
 801328a:	4698      	movne	r8, r3
 801328c:	f04f 0800 	moveq.w	r8, #0
 8013290:	2f00      	cmp	r7, #0
 8013292:	d05c      	beq.n	801334e <forward_lite_upsample_bilinear_iu8ou8+0x15e>
 8013294:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8013298:	9b06      	ldr	r3, [sp, #24]
 801329a:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801329e:	9722      	str	r7, [sp, #136]	@ 0x88
 80132a0:	9d04      	ldr	r5, [sp, #16]
 80132a2:	4647      	mov	r7, r8
 80132a4:	eef8 7a47 	vcvt.f32.u32	s15, s14
 80132a8:	ee17 6a10 	vmov	r6, s14
 80132ac:	ee38 ca6b 	vsub.f32	s24, s16, s23
 80132b0:	2400      	movs	r4, #0
 80132b2:	fb03 f606 	mul.w	r6, r3, r6
 80132b6:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 80132ba:	ee7b bae7 	vsub.f32	s23, s23, s15
 80132be:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 80132c2:	ee3c ca27 	vadd.f32	s24, s24, s15
 80132c6:	ee07 4a90 	vmov	s15, r4
 80132ca:	3401      	adds	r4, #1
 80132cc:	4629      	mov	r1, r5
 80132ce:	465a      	mov	r2, fp
 80132d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132d4:	f8cd 9000 	str.w	r9, [sp]
 80132d8:	9709      	str	r7, [sp, #36]	@ 0x24
 80132da:	445d      	add	r5, fp
 80132dc:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80132e0:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80132e4:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 80132e8:	fec7 7aec 	vminnm.f32	s15, s15, s25
 80132ec:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80132f0:	eef4 7a6c 	vcmp.f32	s15, s25
 80132f4:	ee38 7a67 	vsub.f32	s14, s16, s15
 80132f8:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80132fc:	ee16 0a90 	vmov	r0, s13
 8013300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013304:	4430      	add	r0, r6
 8013306:	ee37 7a06 	vadd.f32	s14, s14, s12
 801330a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801330e:	bf14      	ite	ne
 8013310:	465b      	movne	r3, fp
 8013312:	2300      	moveq	r3, #0
 8013314:	fb0b a000 	mla	r0, fp, r0, sl
 8013318:	ee67 5a0c 	vmul.f32	s11, s14, s24
 801331c:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8013320:	9308      	str	r3, [sp, #32]
 8013322:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8013326:	ab08      	add	r3, sp, #32
 8013328:	ee67 7aab 	vmul.f32	s15, s15, s23
 801332c:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8013330:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8013334:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8013338:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 801333c:	f001 f8e4 	bl	8014508 <lite_bilinear_iu8ou8_kernel>
 8013340:	45a0      	cmp	r8, r4
 8013342:	d1c0      	bne.n	80132c6 <forward_lite_upsample_bilinear_iu8ou8+0xd6>
 8013344:	9b04      	ldr	r3, [sp, #16]
 8013346:	4647      	mov	r7, r8
 8013348:	9a07      	ldr	r2, [sp, #28]
 801334a:	4413      	add	r3, r2
 801334c:	9304      	str	r3, [sp, #16]
 801334e:	9b03      	ldr	r3, [sp, #12]
 8013350:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013352:	3301      	adds	r3, #1
 8013354:	429a      	cmp	r2, r3
 8013356:	9303      	str	r3, [sp, #12]
 8013358:	d185      	bne.n	8013266 <forward_lite_upsample_bilinear_iu8ou8+0x76>
 801335a:	b00f      	add	sp, #60	@ 0x3c
 801335c:	ecbd 8b0a 	vpop	{d8-d12}
 8013360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013364:	eddf aa02 	vldr	s21, [pc, #8]	@ 8013370 <forward_lite_upsample_bilinear_iu8ou8+0x180>
 8013368:	eeb0 9a6a 	vmov.f32	s18, s21
 801336c:	e75c      	b.n	8013228 <forward_lite_upsample_bilinear_iu8ou8+0x38>
 801336e:	bf00      	nop
 8013370:	00000000 	.word	0x00000000

08013374 <forward_lite_upsample_bilinear_is16os16>:
 8013374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013378:	ed2d 8b0a 	vpush	{d8-d12}
 801337c:	b08f      	sub	sp, #60	@ 0x3c
 801337e:	4683      	mov	fp, r0
 8013380:	9104      	str	r1, [sp, #16]
 8013382:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8013386:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 801338a:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 801338e:	9206      	str	r2, [sp, #24]
 8013390:	2900      	cmp	r1, #0
 8013392:	f000 80a7 	beq.w	80134e4 <forward_lite_upsample_bilinear_is16os16+0x170>
 8013396:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801339a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801339e:	ee70 aae7 	vsub.f32	s21, s1, s15
 80133a2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80133a6:	ee6a aa87 	vmul.f32	s21, s21, s14
 80133aa:	ee27 9a87 	vmul.f32	s18, s15, s14
 80133ae:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80133b2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80133b4:	ee87 baa0 	vdiv.f32	s22, s15, s1
 80133b8:	eec7 9a80 	vdiv.f32	s19, s15, s0
 80133bc:	2a00      	cmp	r2, #0
 80133be:	f000 808c 	beq.w	80134da <forward_lite_upsample_bilinear_is16os16+0x166>
 80133c2:	3b01      	subs	r3, #1
 80133c4:	ea4f 064a 	mov.w	r6, sl, lsl #1
 80133c8:	eddf 8a49 	vldr	s17, [pc, #292]	@ 80134f0 <forward_lite_upsample_bilinear_is16os16+0x17c>
 80133cc:	ee07 3a90 	vmov	s15, r3
 80133d0:	9b06      	ldr	r3, [sp, #24]
 80133d2:	1e5a      	subs	r2, r3, #1
 80133d4:	fb0a f303 	mul.w	r3, sl, r3
 80133d8:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 80133dc:	ee0c 2a90 	vmov	s25, r2
 80133e0:	9305      	str	r3, [sp, #20]
 80133e2:	2300      	movs	r3, #0
 80133e4:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 80133e8:	9303      	str	r3, [sp, #12]
 80133ea:	fb06 f308 	mul.w	r3, r6, r8
 80133ee:	9307      	str	r3, [sp, #28]
 80133f0:	eddd 7a03 	vldr	s15, [sp, #12]
 80133f4:	9b05      	ldr	r3, [sp, #20]
 80133f6:	eef8 ba67 	vcvt.f32.u32	s23, s15
 80133fa:	ee7b baea 	vsub.f32	s23, s23, s21
 80133fe:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8013402:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8013406:	fecb baca 	vminnm.f32	s23, s23, s20
 801340a:	eef4 ba4a 	vcmp.f32	s23, s20
 801340e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013412:	bf14      	ite	ne
 8013414:	4699      	movne	r9, r3
 8013416:	f04f 0900 	moveq.w	r9, #0
 801341a:	f1b8 0f00 	cmp.w	r8, #0
 801341e:	d056      	beq.n	80134ce <forward_lite_upsample_bilinear_is16os16+0x15a>
 8013420:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8013424:	9b06      	ldr	r3, [sp, #24]
 8013426:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801342a:	9d04      	ldr	r5, [sp, #16]
 801342c:	2400      	movs	r4, #0
 801342e:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8013432:	ee17 7a10 	vmov	r7, s14
 8013436:	ee38 ca6b 	vsub.f32	s24, s16, s23
 801343a:	fb03 f707 	mul.w	r7, r3, r7
 801343e:	ee7b bae7 	vsub.f32	s23, s23, s15
 8013442:	ee3c ca27 	vadd.f32	s24, s24, s15
 8013446:	ee07 4a90 	vmov	s15, r4
 801344a:	ab0a      	add	r3, sp, #40	@ 0x28
 801344c:	3401      	adds	r4, #1
 801344e:	4629      	mov	r1, r5
 8013450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013454:	9300      	str	r3, [sp, #0]
 8013456:	4652      	mov	r2, sl
 8013458:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 801345c:	4435      	add	r5, r6
 801345e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013462:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8013466:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 801346a:	fec7 7aec 	vminnm.f32	s15, s15, s25
 801346e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8013472:	eef4 7a6c 	vcmp.f32	s15, s25
 8013476:	ee38 7a67 	vsub.f32	s14, s16, s15
 801347a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 801347e:	ee16 0a90 	vmov	r0, s13
 8013482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013486:	4438      	add	r0, r7
 8013488:	ee37 7a06 	vadd.f32	s14, s14, s12
 801348c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013490:	bf14      	ite	ne
 8013492:	4653      	movne	r3, sl
 8013494:	2300      	moveq	r3, #0
 8013496:	fb06 b000 	mla	r0, r6, r0, fp
 801349a:	ee67 5a0c 	vmul.f32	s11, s14, s24
 801349e:	ee27 6a8c 	vmul.f32	s12, s15, s24
 80134a2:	9308      	str	r3, [sp, #32]
 80134a4:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80134a8:	ab08      	add	r3, sp, #32
 80134aa:	ee67 7aab 	vmul.f32	s15, s15, s23
 80134ae:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 80134b2:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 80134b6:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 80134ba:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 80134be:	f001 f86d 	bl	801459c <lite_bilinear_is16os16_kernel>
 80134c2:	45a0      	cmp	r8, r4
 80134c4:	d1bf      	bne.n	8013446 <forward_lite_upsample_bilinear_is16os16+0xd2>
 80134c6:	9b04      	ldr	r3, [sp, #16]
 80134c8:	9a07      	ldr	r2, [sp, #28]
 80134ca:	4413      	add	r3, r2
 80134cc:	9304      	str	r3, [sp, #16]
 80134ce:	9b03      	ldr	r3, [sp, #12]
 80134d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80134d2:	3301      	adds	r3, #1
 80134d4:	429a      	cmp	r2, r3
 80134d6:	9303      	str	r3, [sp, #12]
 80134d8:	d18a      	bne.n	80133f0 <forward_lite_upsample_bilinear_is16os16+0x7c>
 80134da:	b00f      	add	sp, #60	@ 0x3c
 80134dc:	ecbd 8b0a 	vpop	{d8-d12}
 80134e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134e4:	eddf aa02 	vldr	s21, [pc, #8]	@ 80134f0 <forward_lite_upsample_bilinear_is16os16+0x17c>
 80134e8:	eeb0 9a6a 	vmov.f32	s18, s21
 80134ec:	e75f      	b.n	80133ae <forward_lite_upsample_bilinear_is16os16+0x3a>
 80134ee:	bf00      	nop
 80134f0:	00000000 	.word	0x00000000

080134f4 <forward_lite_upsample_bilinear_iu16ou16>:
 80134f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134f8:	ed2d 8b0a 	vpush	{d8-d12}
 80134fc:	b08f      	sub	sp, #60	@ 0x3c
 80134fe:	4683      	mov	fp, r0
 8013500:	9104      	str	r1, [sp, #16]
 8013502:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8013506:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 801350a:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 801350e:	9206      	str	r2, [sp, #24]
 8013510:	2900      	cmp	r1, #0
 8013512:	f000 80a7 	beq.w	8013664 <forward_lite_upsample_bilinear_iu16ou16+0x170>
 8013516:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801351a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801351e:	ee70 aae7 	vsub.f32	s21, s1, s15
 8013522:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013526:	ee6a aa87 	vmul.f32	s21, s21, s14
 801352a:	ee27 9a87 	vmul.f32	s18, s15, s14
 801352e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013532:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013534:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8013538:	eec7 9a80 	vdiv.f32	s19, s15, s0
 801353c:	2a00      	cmp	r2, #0
 801353e:	f000 808c 	beq.w	801365a <forward_lite_upsample_bilinear_iu16ou16+0x166>
 8013542:	3b01      	subs	r3, #1
 8013544:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8013548:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8013670 <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 801354c:	ee07 3a90 	vmov	s15, r3
 8013550:	9b06      	ldr	r3, [sp, #24]
 8013552:	1e5a      	subs	r2, r3, #1
 8013554:	fb0a f303 	mul.w	r3, sl, r3
 8013558:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 801355c:	ee0c 2a90 	vmov	s25, r2
 8013560:	9305      	str	r3, [sp, #20]
 8013562:	2300      	movs	r3, #0
 8013564:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8013568:	9303      	str	r3, [sp, #12]
 801356a:	fb06 f308 	mul.w	r3, r6, r8
 801356e:	9307      	str	r3, [sp, #28]
 8013570:	eddd 7a03 	vldr	s15, [sp, #12]
 8013574:	9b05      	ldr	r3, [sp, #20]
 8013576:	eef8 ba67 	vcvt.f32.u32	s23, s15
 801357a:	ee7b baea 	vsub.f32	s23, s23, s21
 801357e:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8013582:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8013586:	fecb baca 	vminnm.f32	s23, s23, s20
 801358a:	eef4 ba4a 	vcmp.f32	s23, s20
 801358e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013592:	bf14      	ite	ne
 8013594:	4699      	movne	r9, r3
 8013596:	f04f 0900 	moveq.w	r9, #0
 801359a:	f1b8 0f00 	cmp.w	r8, #0
 801359e:	d056      	beq.n	801364e <forward_lite_upsample_bilinear_iu16ou16+0x15a>
 80135a0:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 80135a4:	9b06      	ldr	r3, [sp, #24]
 80135a6:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80135aa:	9d04      	ldr	r5, [sp, #16]
 80135ac:	2400      	movs	r4, #0
 80135ae:	eef8 7a47 	vcvt.f32.u32	s15, s14
 80135b2:	ee17 7a10 	vmov	r7, s14
 80135b6:	ee38 ca6b 	vsub.f32	s24, s16, s23
 80135ba:	fb03 f707 	mul.w	r7, r3, r7
 80135be:	ee7b bae7 	vsub.f32	s23, s23, s15
 80135c2:	ee3c ca27 	vadd.f32	s24, s24, s15
 80135c6:	ee07 4a90 	vmov	s15, r4
 80135ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80135cc:	3401      	adds	r4, #1
 80135ce:	4629      	mov	r1, r5
 80135d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80135d4:	9300      	str	r3, [sp, #0]
 80135d6:	4652      	mov	r2, sl
 80135d8:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80135dc:	4435      	add	r5, r6
 80135de:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80135e2:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80135e6:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 80135ea:	fec7 7aec 	vminnm.f32	s15, s15, s25
 80135ee:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80135f2:	eef4 7a6c 	vcmp.f32	s15, s25
 80135f6:	ee38 7a67 	vsub.f32	s14, s16, s15
 80135fa:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80135fe:	ee16 0a90 	vmov	r0, s13
 8013602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013606:	4438      	add	r0, r7
 8013608:	ee37 7a06 	vadd.f32	s14, s14, s12
 801360c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013610:	bf14      	ite	ne
 8013612:	4653      	movne	r3, sl
 8013614:	2300      	moveq	r3, #0
 8013616:	fb06 b000 	mla	r0, r6, r0, fp
 801361a:	ee67 5a0c 	vmul.f32	s11, s14, s24
 801361e:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8013622:	9308      	str	r3, [sp, #32]
 8013624:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8013628:	ab08      	add	r3, sp, #32
 801362a:	ee67 7aab 	vmul.f32	s15, s15, s23
 801362e:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8013632:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8013636:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 801363a:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 801363e:	f001 f803 	bl	8014648 <lite_bilinear_iu16ou16_kernel>
 8013642:	45a0      	cmp	r8, r4
 8013644:	d1bf      	bne.n	80135c6 <forward_lite_upsample_bilinear_iu16ou16+0xd2>
 8013646:	9b04      	ldr	r3, [sp, #16]
 8013648:	9a07      	ldr	r2, [sp, #28]
 801364a:	4413      	add	r3, r2
 801364c:	9304      	str	r3, [sp, #16]
 801364e:	9b03      	ldr	r3, [sp, #12]
 8013650:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013652:	3301      	adds	r3, #1
 8013654:	429a      	cmp	r2, r3
 8013656:	9303      	str	r3, [sp, #12]
 8013658:	d18a      	bne.n	8013570 <forward_lite_upsample_bilinear_iu16ou16+0x7c>
 801365a:	b00f      	add	sp, #60	@ 0x3c
 801365c:	ecbd 8b0a 	vpop	{d8-d12}
 8013660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013664:	eddf aa02 	vldr	s21, [pc, #8]	@ 8013670 <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 8013668:	eeb0 9a6a 	vmov.f32	s18, s21
 801366c:	e75f      	b.n	801352e <forward_lite_upsample_bilinear_iu16ou16+0x3a>
 801366e:	bf00      	nop
 8013670:	00000000 	.word	0x00000000

08013674 <forward_lite_dense_if32of32wf32>:
 8013674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013678:	ed2d 8b0c 	vpush	{d8-d13}
 801367c:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8013680:	6801      	ldr	r1, [r0, #0]
 8013682:	b083      	sub	sp, #12
 8013684:	fb02 f303 	mul.w	r3, r2, r3
 8013688:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801368c:	9100      	str	r1, [sp, #0]
 801368e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013692:	4299      	cmp	r1, r3
 8013694:	9301      	str	r3, [sp, #4]
 8013696:	f080 811c 	bcs.w	80138d2 <forward_lite_dense_if32of32wf32+0x25e>
 801369a:	4607      	mov	r7, r0
 801369c:	6904      	ldr	r4, [r0, #16]
 801369e:	0096      	lsls	r6, r2, #2
 80136a0:	9b00      	ldr	r3, [sp, #0]
 80136a2:	68bd      	ldr	r5, [r7, #8]
 80136a4:	eb03 0e06 	add.w	lr, r3, r6
 80136a8:	461e      	mov	r6, r3
 80136aa:	459e      	cmp	lr, r3
 80136ac:	f240 8103 	bls.w	80138b6 <forward_lite_dense_if32of32wf32+0x242>
 80136b0:	f1a4 0c10 	sub.w	ip, r4, #16
 80136b4:	ea4f 0984 	mov.w	r9, r4, lsl #2
 80136b8:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 80136bc:	f10c 0c01 	add.w	ip, ip, #1
 80136c0:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 80136c4:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 80136c8:	2c0f      	cmp	r4, #15
 80136ca:	f240 8107 	bls.w	80138dc <forward_lite_dense_if32of32wf32+0x268>
 80136ce:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 80136d2:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 80136d6:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 801392c <forward_lite_dense_if32of32wf32+0x2b8>
 80136da:	4621      	mov	r1, r4
 80136dc:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 80136e0:	3910      	subs	r1, #16
 80136e2:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 80136e6:	3340      	adds	r3, #64	@ 0x40
 80136e8:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 80136ec:	290f      	cmp	r1, #15
 80136ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80136f2:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 80136f6:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 80136fa:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 80136fe:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8013702:	eee4 7a85 	vfma.f32	s15, s9, s10
 8013706:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 801370a:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 801370e:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 8013712:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 8013716:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 801371a:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 801371e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8013722:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 8013726:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 801372a:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 801372e:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 8013732:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 8013736:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 801373a:	eeed 7a26 	vfma.f32	s15, s26, s13
 801373e:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 8013742:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8013746:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 801374a:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 801374e:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 8013752:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8013756:	eeec 7a8c 	vfma.f32	s15, s25, s24
 801375a:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 801375e:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8013762:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8013766:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 801376a:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 801376e:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8013772:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8013776:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 801377a:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 801377e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8013782:	eee9 7a89 	vfma.f32	s15, s19, s18
 8013786:	eee8 7a88 	vfma.f32	s15, s17, s16
 801378a:	eee0 7a20 	vfma.f32	s15, s0, s1
 801378e:	eee1 7a21 	vfma.f32	s15, s2, s3
 8013792:	eee2 7a22 	vfma.f32	s15, s4, s5
 8013796:	eee3 7a23 	vfma.f32	s15, s6, s7
 801379a:	eee4 7a24 	vfma.f32	s15, s8, s9
 801379e:	eee5 7a25 	vfma.f32	s15, s10, s11
 80137a2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80137a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80137aa:	d897      	bhi.n	80136dc <forward_lite_dense_if32of32wf32+0x68>
 80137ac:	eb05 020b 	add.w	r2, r5, fp
 80137b0:	f004 010f 	and.w	r1, r4, #15
 80137b4:	4663      	mov	r3, ip
 80137b6:	2903      	cmp	r1, #3
 80137b8:	d95f      	bls.n	801387a <forward_lite_dense_if32of32wf32+0x206>
 80137ba:	edd2 6a01 	vldr	s13, [r2, #4]
 80137be:	1f08      	subs	r0, r1, #4
 80137c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80137c4:	ed93 4a00 	vldr	s8, [r3]
 80137c8:	2803      	cmp	r0, #3
 80137ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80137ce:	edd2 4a00 	vldr	s9, [r2]
 80137d2:	ed93 5a02 	vldr	s10, [r3, #8]
 80137d6:	edd2 5a02 	vldr	s11, [r2, #8]
 80137da:	eee4 7a24 	vfma.f32	s15, s8, s9
 80137de:	ed93 6a03 	vldr	s12, [r3, #12]
 80137e2:	edd2 6a03 	vldr	s13, [r2, #12]
 80137e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137ea:	eee5 7a25 	vfma.f32	s15, s10, s11
 80137ee:	eee6 7a26 	vfma.f32	s15, s12, s13
 80137f2:	eeb0 7a67 	vmov.f32	s14, s15
 80137f6:	d938      	bls.n	801386a <forward_lite_dense_if32of32wf32+0x1f6>
 80137f8:	edd2 6a05 	vldr	s13, [r2, #20]
 80137fc:	f1a1 0a08 	sub.w	sl, r1, #8
 8013800:	edd3 7a05 	vldr	s15, [r3, #20]
 8013804:	ed93 4a04 	vldr	s8, [r3, #16]
 8013808:	f1ba 0f03 	cmp.w	sl, #3
 801380c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013810:	edd2 4a04 	vldr	s9, [r2, #16]
 8013814:	ed93 5a06 	vldr	s10, [r3, #24]
 8013818:	edd2 5a06 	vldr	s11, [r2, #24]
 801381c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8013820:	ed93 6a07 	vldr	s12, [r3, #28]
 8013824:	edd2 6a07 	vldr	s13, [r2, #28]
 8013828:	eee5 7a25 	vfma.f32	s15, s10, s11
 801382c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013830:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013834:	d919      	bls.n	801386a <forward_lite_dense_if32of32wf32+0x1f6>
 8013836:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801383a:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 801383e:	ed92 4a08 	vldr	s8, [r2, #32]
 8013842:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013846:	edd3 4a08 	vldr	s9, [r3, #32]
 801384a:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 801384e:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8013852:	eee4 7a24 	vfma.f32	s15, s8, s9
 8013856:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 801385a:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801385e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8013862:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013866:	ee37 7a27 	vadd.f32	s14, s14, s15
 801386a:	0880      	lsrs	r0, r0, #2
 801386c:	f001 0103 	and.w	r1, r1, #3
 8013870:	3001      	adds	r0, #1
 8013872:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8013876:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801387a:	b1a9      	cbz	r1, 80138a8 <forward_lite_dense_if32of32wf32+0x234>
 801387c:	edd3 6a00 	vldr	s13, [r3]
 8013880:	3901      	subs	r1, #1
 8013882:	edd2 7a00 	vldr	s15, [r2]
 8013886:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801388a:	d00d      	beq.n	80138a8 <forward_lite_dense_if32of32wf32+0x234>
 801388c:	edd3 6a01 	vldr	s13, [r3, #4]
 8013890:	2901      	cmp	r1, #1
 8013892:	edd2 7a01 	vldr	s15, [r2, #4]
 8013896:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801389a:	d005      	beq.n	80138a8 <forward_lite_dense_if32of32wf32+0x234>
 801389c:	edd2 6a02 	vldr	s13, [r2, #8]
 80138a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80138a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80138a8:	eca6 7a01 	vstmia	r6!, {s14}
 80138ac:	45b6      	cmp	lr, r6
 80138ae:	444d      	add	r5, r9
 80138b0:	f63f af0a 	bhi.w	80136c8 <forward_lite_dense_if32of32wf32+0x54>
 80138b4:	697a      	ldr	r2, [r7, #20]
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	b9b3      	cbnz	r3, 80138e8 <forward_lite_dense_if32of32wf32+0x274>
 80138ba:	9b00      	ldr	r3, [sp, #0]
 80138bc:	0096      	lsls	r6, r2, #2
 80138be:	9901      	ldr	r1, [sp, #4]
 80138c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80138c4:	693c      	ldr	r4, [r7, #16]
 80138c6:	4299      	cmp	r1, r3
 80138c8:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80138cc:	9300      	str	r3, [sp, #0]
 80138ce:	f63f aee7 	bhi.w	80136a0 <forward_lite_dense_if32of32wf32+0x2c>
 80138d2:	b003      	add	sp, #12
 80138d4:	ecbd 8b0c 	vpop	{d8-d13}
 80138d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138dc:	4621      	mov	r1, r4
 80138de:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 801392c <forward_lite_dense_if32of32wf32+0x2b8>
 80138e2:	462a      	mov	r2, r5
 80138e4:	4643      	mov	r3, r8
 80138e6:	e766      	b.n	80137b6 <forward_lite_dense_if32of32wf32+0x142>
 80138e8:	2a00      	cmp	r2, #0
 80138ea:	d0e6      	beq.n	80138ba <forward_lite_dense_if32of32wf32+0x246>
 80138ec:	9a00      	ldr	r2, [sp, #0]
 80138ee:	ed93 7a00 	vldr	s14, [r3]
 80138f2:	edd2 7a00 	vldr	s15, [r2]
 80138f6:	4613      	mov	r3, r2
 80138f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80138fc:	edc2 7a00 	vstr	s15, [r2]
 8013900:	697a      	ldr	r2, [r7, #20]
 8013902:	2a01      	cmp	r2, #1
 8013904:	d9d9      	bls.n	80138ba <forward_lite_dense_if32of32wf32+0x246>
 8013906:	1d19      	adds	r1, r3, #4
 8013908:	2301      	movs	r3, #1
 801390a:	68fa      	ldr	r2, [r7, #12]
 801390c:	ed91 7a00 	vldr	s14, [r1]
 8013910:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013914:	3301      	adds	r3, #1
 8013916:	edd2 7a00 	vldr	s15, [r2]
 801391a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801391e:	ece1 7a01 	vstmia	r1!, {s15}
 8013922:	697a      	ldr	r2, [r7, #20]
 8013924:	429a      	cmp	r2, r3
 8013926:	d8f0      	bhi.n	801390a <forward_lite_dense_if32of32wf32+0x296>
 8013928:	e7c7      	b.n	80138ba <forward_lite_dense_if32of32wf32+0x246>
 801392a:	bf00      	nop
 801392c:	00000000 	.word	0x00000000

08013930 <forward_lite_dense_if32of32wf32_lut4>:
 8013930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013934:	b08d      	sub	sp, #52	@ 0x34
 8013936:	4605      	mov	r5, r0
 8013938:	460c      	mov	r4, r1
 801393a:	9005      	str	r0, [sp, #20]
 801393c:	4618      	mov	r0, r3
 801393e:	920a      	str	r2, [sp, #40]	@ 0x28
 8013940:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8013942:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8013946:	fb02 f303 	mul.w	r3, r2, r3
 801394a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801394e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8013950:	9308      	str	r3, [sp, #32]
 8013952:	b126      	cbz	r6, 801395e <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8013954:	2240      	movs	r2, #64	@ 0x40
 8013956:	4631      	mov	r1, r6
 8013958:	f000 fbe0 	bl	801411c <st_int8_copy>
 801395c:	4630      	mov	r0, r6
 801395e:	9b05      	ldr	r3, [sp, #20]
 8013960:	9a08      	ldr	r2, [sp, #32]
 8013962:	4293      	cmp	r3, r2
 8013964:	f080 80f7 	bcs.w	8013b56 <forward_lite_dense_if32of32wf32_lut4+0x226>
 8013968:	08eb      	lsrs	r3, r5, #3
 801396a:	f005 0101 	and.w	r1, r5, #1
 801396e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013970:	f025 0801 	bic.w	r8, r5, #1
 8013974:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8013978:	9301      	str	r3, [sp, #4]
 801397a:	009b      	lsls	r3, r3, #2
 801397c:	9102      	str	r1, [sp, #8]
 801397e:	0092      	lsls	r2, r2, #2
 8013980:	f104 0b20 	add.w	fp, r4, #32
 8013984:	00a9      	lsls	r1, r5, #2
 8013986:	9304      	str	r3, [sp, #16]
 8013988:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 801398c:	9b05      	ldr	r3, [sp, #20]
 801398e:	9207      	str	r2, [sp, #28]
 8013990:	9109      	str	r1, [sp, #36]	@ 0x24
 8013992:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013994:	9a07      	ldr	r2, [sp, #28]
 8013996:	eb03 0902 	add.w	r9, r3, r2
 801399a:	f1ab 0220 	sub.w	r2, fp, #32
 801399e:	4599      	cmp	r9, r3
 80139a0:	9206      	str	r2, [sp, #24]
 80139a2:	f240 80db 	bls.w	8013b5c <forward_lite_dense_if32of32wf32_lut4+0x22c>
 80139a6:	469e      	mov	lr, r3
 80139a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80139aa:	f108 33ff 	add.w	r3, r8, #4294967295
 80139ae:	9303      	str	r3, [sp, #12]
 80139b0:	9b01      	ldr	r3, [sp, #4]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	f000 80b4 	beq.w	8013b20 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 80139b8:	9b04      	ldr	r3, [sp, #16]
 80139ba:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8013b80 <forward_lite_dense_if32of32wf32_lut4+0x250>
 80139be:	18d4      	adds	r4, r2, r3
 80139c0:	465b      	mov	r3, fp
 80139c2:	7816      	ldrb	r6, [r2, #0]
 80139c4:	3204      	adds	r2, #4
 80139c6:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 80139ca:	3320      	adds	r3, #32
 80139cc:	f006 070f 	and.w	r7, r6, #15
 80139d0:	0936      	lsrs	r6, r6, #4
 80139d2:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 80139d6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80139da:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 80139de:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80139e2:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 80139e6:	edd7 7a00 	vldr	s15, [r7]
 80139ea:	ed96 3a00 	vldr	s6, [r6]
 80139ee:	092e      	lsrs	r6, r5, #4
 80139f0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80139f4:	f005 050f 	and.w	r5, r5, #15
 80139f8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80139fc:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8013a00:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8013a04:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 8013a08:	eee3 7a04 	vfma.f32	s15, s6, s8
 8013a0c:	ed96 3a00 	vldr	s6, [r6]
 8013a10:	ed95 4a00 	vldr	s8, [r5]
 8013a14:	090d      	lsrs	r5, r1, #4
 8013a16:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 8013a1a:	f001 010f 	and.w	r1, r1, #15
 8013a1e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8013a22:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 8013a26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013a2a:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 8013a2e:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 8013a32:	eee3 7a23 	vfma.f32	s15, s6, s7
 8013a36:	eee4 7a05 	vfma.f32	s15, s8, s10
 8013a3a:	ed95 4a00 	vldr	s8, [r5]
 8013a3e:	ed91 5a00 	vldr	s10, [r1]
 8013a42:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8013a46:	42a2      	cmp	r2, r4
 8013a48:	ea4f 1511 	mov.w	r5, r1, lsr #4
 8013a4c:	f001 010f 	and.w	r1, r1, #15
 8013a50:	eee4 7a24 	vfma.f32	s15, s8, s9
 8013a54:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8013a58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013a5c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8013a60:	ed95 5a00 	vldr	s10, [r5]
 8013a64:	ed91 6a00 	vldr	s12, [r1]
 8013a68:	eee5 7a25 	vfma.f32	s15, s10, s11
 8013a6c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013a70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013a74:	d1a5      	bne.n	80139c2 <forward_lite_dense_if32of32wf32_lut4+0x92>
 8013a76:	4656      	mov	r6, sl
 8013a78:	4546      	cmp	r6, r8
 8013a7a:	d257      	bcs.n	8013b2c <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8013a7c:	9b03      	ldr	r3, [sp, #12]
 8013a7e:	f106 0208 	add.w	r2, r6, #8
 8013a82:	1e61      	subs	r1, r4, #1
 8013a84:	1b9d      	subs	r5, r3, r6
 8013a86:	08ef      	lsrs	r7, r5, #3
 8013a88:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 8013a8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013a90:	3208      	adds	r2, #8
 8013a92:	ed52 5a03 	vldr	s11, [r2, #-12]
 8013a96:	f003 0c0f 	and.w	ip, r3, #15
 8013a9a:	091b      	lsrs	r3, r3, #4
 8013a9c:	ed52 6a04 	vldr	s13, [r2, #-16]
 8013aa0:	42a9      	cmp	r1, r5
 8013aa2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8013aa6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8013aaa:	eddc 7a00 	vldr	s15, [ip]
 8013aae:	ed93 6a00 	vldr	s12, [r3]
 8013ab2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013ab6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013aba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013abe:	d1e5      	bne.n	8013a8c <forward_lite_dense_if32of32wf32_lut4+0x15c>
 8013ac0:	3701      	adds	r7, #1
 8013ac2:	19e2      	adds	r2, r4, r7
 8013ac4:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8013ac8:	9b02      	ldr	r3, [sp, #8]
 8013aca:	b30b      	cbz	r3, 8013b10 <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 8013acc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013ad0:	edd6 7a00 	vldr	s15, [r6]
 8013ad4:	091b      	lsrs	r3, r3, #4
 8013ad6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8013ada:	edd3 6a00 	vldr	s13, [r3]
 8013ade:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013ae2:	ecae 7a01 	vstmia	lr!, {s14}
 8013ae6:	45f1      	cmp	r9, lr
 8013ae8:	f63f af62 	bhi.w	80139b0 <forward_lite_dense_if32of32wf32_lut4+0x80>
 8013aec:	9b05      	ldr	r3, [sp, #20]
 8013aee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013af0:	1899      	adds	r1, r3, r2
 8013af2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013af4:	b9e3      	cbnz	r3, 8013b30 <forward_lite_dense_if32of32wf32_lut4+0x200>
 8013af6:	9b08      	ldr	r3, [sp, #32]
 8013af8:	428b      	cmp	r3, r1
 8013afa:	d92c      	bls.n	8013b56 <forward_lite_dense_if32of32wf32_lut4+0x226>
 8013afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013afe:	4498      	add	r8, r3
 8013b00:	449a      	add	sl, r3
 8013b02:	449b      	add	fp, r3
 8013b04:	9b05      	ldr	r3, [sp, #20]
 8013b06:	4599      	cmp	r9, r3
 8013b08:	d92a      	bls.n	8013b60 <forward_lite_dense_if32of32wf32_lut4+0x230>
 8013b0a:	460b      	mov	r3, r1
 8013b0c:	9105      	str	r1, [sp, #20]
 8013b0e:	e741      	b.n	8013994 <forward_lite_dense_if32of32wf32_lut4+0x64>
 8013b10:	ecae 7a01 	vstmia	lr!, {s14}
 8013b14:	45f1      	cmp	r9, lr
 8013b16:	d9e9      	bls.n	8013aec <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 8013b18:	9b01      	ldr	r3, [sp, #4]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	f47f af4c 	bne.w	80139b8 <forward_lite_dense_if32of32wf32_lut4+0x88>
 8013b20:	9e06      	ldr	r6, [sp, #24]
 8013b22:	4614      	mov	r4, r2
 8013b24:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8013b80 <forward_lite_dense_if32of32wf32_lut4+0x250>
 8013b28:	4546      	cmp	r6, r8
 8013b2a:	d3a7      	bcc.n	8013a7c <forward_lite_dense_if32of32wf32_lut4+0x14c>
 8013b2c:	4622      	mov	r2, r4
 8013b2e:	e7cb      	b.n	8013ac8 <forward_lite_dense_if32of32wf32_lut4+0x198>
 8013b30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d0df      	beq.n	8013af6 <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 8013b36:	9b07      	ldr	r3, [sp, #28]
 8013b38:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013b3a:	1acb      	subs	r3, r1, r3
 8013b3c:	edd3 7a00 	vldr	s15, [r3]
 8013b40:	ecb2 7a01 	vldmia	r2!, {s14}
 8013b44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013b48:	ece3 7a01 	vstmia	r3!, {s15}
 8013b4c:	428b      	cmp	r3, r1
 8013b4e:	d1f5      	bne.n	8013b3c <forward_lite_dense_if32of32wf32_lut4+0x20c>
 8013b50:	9b08      	ldr	r3, [sp, #32]
 8013b52:	428b      	cmp	r3, r1
 8013b54:	d8d2      	bhi.n	8013afc <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 8013b56:	b00d      	add	sp, #52	@ 0x34
 8013b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b5c:	4619      	mov	r1, r3
 8013b5e:	e7c8      	b.n	8013af2 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8013b60:	9b07      	ldr	r3, [sp, #28]
 8013b62:	1acb      	subs	r3, r1, r3
 8013b64:	461a      	mov	r2, r3
 8013b66:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013b68:	ed92 7a00 	vldr	s14, [r2]
 8013b6c:	ecf0 7a01 	vldmia	r0!, {s15}
 8013b70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013b74:	ece2 7a01 	vstmia	r2!, {s15}
 8013b78:	428a      	cmp	r2, r1
 8013b7a:	d1f5      	bne.n	8013b68 <forward_lite_dense_if32of32wf32_lut4+0x238>
 8013b7c:	e7f2      	b.n	8013b64 <forward_lite_dense_if32of32wf32_lut4+0x234>
 8013b7e:	bf00      	nop
 8013b80:	00000000 	.word	0x00000000

08013b84 <forward_lite_dense_if32of32wf32_lut8>:
 8013b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b88:	b091      	sub	sp, #68	@ 0x44
 8013b8a:	4699      	mov	r9, r3
 8013b8c:	468b      	mov	fp, r1
 8013b8e:	920e      	str	r2, [sp, #56]	@ 0x38
 8013b90:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8013b92:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 8013b96:	9003      	str	r0, [sp, #12]
 8013b98:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 8013b9c:	fb02 f303 	mul.w	r3, r2, r3
 8013ba0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8013ba4:	930c      	str	r3, [sp, #48]	@ 0x30
 8013ba6:	b134      	cbz	r4, 8013bb6 <forward_lite_dense_if32of32wf32_lut8+0x32>
 8013ba8:	4648      	mov	r0, r9
 8013baa:	46a1      	mov	r9, r4
 8013bac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8013bb0:	4621      	mov	r1, r4
 8013bb2:	f000 fab3 	bl	801411c <st_int8_copy>
 8013bb6:	9b03      	ldr	r3, [sp, #12]
 8013bb8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013bba:	4293      	cmp	r3, r2
 8013bbc:	f080 8084 	bcs.w	8013cc8 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8013bc0:	4bb7      	ldr	r3, [pc, #732]	@ (8013ea0 <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 8013bc2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013bc4:	4443      	add	r3, r8
 8013bc6:	9d03      	ldr	r5, [sp, #12]
 8013bc8:	0092      	lsls	r2, r2, #2
 8013bca:	eddf 3ab6 	vldr	s7, [pc, #728]	@ 8013ea4 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8013bce:	009b      	lsls	r3, r3, #2
 8013bd0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013bd2:	f103 0120 	add.w	r1, r3, #32
 8013bd6:	930d      	str	r3, [sp, #52]	@ 0x34
 8013bd8:	445b      	add	r3, fp
 8013bda:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013bdc:	9105      	str	r1, [sp, #20]
 8013bde:	9300      	str	r3, [sp, #0]
 8013be0:	eb0b 0301 	add.w	r3, fp, r1
 8013be4:	469a      	mov	sl, r3
 8013be6:	469e      	mov	lr, r3
 8013be8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013bea:	eb05 0c03 	add.w	ip, r5, r3
 8013bee:	45ac      	cmp	ip, r5
 8013bf0:	d952      	bls.n	8013c98 <forward_lite_dense_if32of32wf32_lut8+0x114>
 8013bf2:	9800      	ldr	r0, [sp, #0]
 8013bf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013bf6:	f100 011f 	add.w	r1, r0, #31
 8013bfa:	eba0 020b 	sub.w	r2, r0, fp
 8013bfe:	445b      	add	r3, fp
 8013c00:	9101      	str	r1, [sp, #4]
 8013c02:	eba1 010b 	sub.w	r1, r1, fp
 8013c06:	0952      	lsrs	r2, r2, #5
 8013c08:	9306      	str	r3, [sp, #24]
 8013c0a:	0889      	lsrs	r1, r1, #2
 8013c0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c0e:	3101      	adds	r1, #1
 8013c10:	9102      	str	r1, [sp, #8]
 8013c12:	1c51      	adds	r1, r2, #1
 8013c14:	00d2      	lsls	r2, r2, #3
 8013c16:	3210      	adds	r2, #16
 8013c18:	920a      	str	r2, [sp, #40]	@ 0x28
 8013c1a:	00ca      	lsls	r2, r1, #3
 8013c1c:	9208      	str	r2, [sp, #32]
 8013c1e:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 8013c22:	9209      	str	r2, [sp, #36]	@ 0x24
 8013c24:	1f02      	subs	r2, r0, #4
 8013c26:	9204      	str	r2, [sp, #16]
 8013c28:	f10b 0204 	add.w	r2, fp, #4
 8013c2c:	9207      	str	r2, [sp, #28]
 8013c2e:	f1b8 0f07 	cmp.w	r8, #7
 8013c32:	d84c      	bhi.n	8013cce <forward_lite_dense_if32of32wf32_lut8+0x14a>
 8013c34:	45d3      	cmp	fp, sl
 8013c36:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8013ea4 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8013c3a:	d20f      	bcs.n	8013c5c <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8013c3c:	4659      	mov	r1, fp
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c44:	ecf1 7a01 	vldmia	r1!, {s15}
 8013c48:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013c4c:	4551      	cmp	r1, sl
 8013c4e:	edd2 6a00 	vldr	s13, [r2]
 8013c52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013c56:	d3f3      	bcc.n	8013c40 <forward_lite_dense_if32of32wf32_lut8+0xbc>
 8013c58:	9a02      	ldr	r2, [sp, #8]
 8013c5a:	4413      	add	r3, r2
 8013c5c:	eca5 7a01 	vstmia	r5!, {s14}
 8013c60:	45ac      	cmp	ip, r5
 8013c62:	d8e4      	bhi.n	8013c2e <forward_lite_dense_if32of32wf32_lut8+0xaa>
 8013c64:	9b03      	ldr	r3, [sp, #12]
 8013c66:	46f3      	mov	fp, lr
 8013c68:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013c6a:	1899      	adds	r1, r3, r2
 8013c6c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013c6e:	b9c3      	cbnz	r3, 8013ca2 <forward_lite_dense_if32of32wf32_lut8+0x11e>
 8013c70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013c72:	428b      	cmp	r3, r1
 8013c74:	d928      	bls.n	8013cc8 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8013c76:	9b00      	ldr	r3, [sp, #0]
 8013c78:	9a05      	ldr	r2, [sp, #20]
 8013c7a:	4413      	add	r3, r2
 8013c7c:	4492      	add	sl, r2
 8013c7e:	9300      	str	r3, [sp, #0]
 8013c80:	9b03      	ldr	r3, [sp, #12]
 8013c82:	459c      	cmp	ip, r3
 8013c84:	f240 821e 	bls.w	80140c4 <forward_lite_dense_if32of32wf32_lut8+0x540>
 8013c88:	460d      	mov	r5, r1
 8013c8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013c8c:	4496      	add	lr, r2
 8013c8e:	9103      	str	r1, [sp, #12]
 8013c90:	eb05 0c03 	add.w	ip, r5, r3
 8013c94:	45ac      	cmp	ip, r5
 8013c96:	d8ac      	bhi.n	8013bf2 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8013c98:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013c9a:	4629      	mov	r1, r5
 8013c9c:	46f3      	mov	fp, lr
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d0e6      	beq.n	8013c70 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8013ca2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d0e3      	beq.n	8013c70 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8013ca8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013caa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013cac:	1acb      	subs	r3, r1, r3
 8013cae:	edd3 7a00 	vldr	s15, [r3]
 8013cb2:	ecb2 7a01 	vldmia	r2!, {s14}
 8013cb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013cba:	ece3 7a01 	vstmia	r3!, {s15}
 8013cbe:	428b      	cmp	r3, r1
 8013cc0:	d1f5      	bne.n	8013cae <forward_lite_dense_if32of32wf32_lut8+0x12a>
 8013cc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013cc4:	428b      	cmp	r3, r1
 8013cc6:	d8d6      	bhi.n	8013c76 <forward_lite_dense_if32of32wf32_lut8+0xf2>
 8013cc8:	b011      	add	sp, #68	@ 0x44
 8013cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cce:	f003 0203 	and.w	r2, r3, #3
 8013cd2:	2a02      	cmp	r2, #2
 8013cd4:	f000 81ee 	beq.w	80140b4 <forward_lite_dense_if32of32wf32_lut8+0x530>
 8013cd8:	2a03      	cmp	r2, #3
 8013cda:	f000 80e5 	beq.w	8013ea8 <forward_lite_dense_if32of32wf32_lut8+0x324>
 8013cde:	2a01      	cmp	r2, #1
 8013ce0:	f000 81d2 	beq.w	8014088 <forward_lite_dense_if32of32wf32_lut8+0x504>
 8013ce4:	9a06      	ldr	r2, [sp, #24]
 8013ce6:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8013ea4 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8013cea:	4593      	cmp	fp, r2
 8013cec:	f200 81e8 	bhi.w	80140c0 <forward_lite_dense_if32of32wf32_lut8+0x53c>
 8013cf0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013cf2:	f103 0208 	add.w	r2, r3, #8
 8013cf6:	f10b 0120 	add.w	r1, fp, #32
 8013cfa:	18c4      	adds	r4, r0, r3
 8013cfc:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8013d00:	3208      	adds	r2, #8
 8013d02:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 8013d06:	3120      	adds	r1, #32
 8013d08:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013d0c:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 8013d10:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 8013d14:	edd0 7a00 	vldr	s15, [r0]
 8013d18:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8013d1c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8013d20:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 8013d24:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013d28:	ed11 5a0c 	vldr	s10, [r1, #-48]	@ 0xffffffd0
 8013d2c:	ed51 5a0b 	vldr	s11, [r1, #-44]	@ 0xffffffd4
 8013d30:	edd0 2a00 	vldr	s5, [r0]
 8013d34:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8013d38:	eee2 7a83 	vfma.f32	s15, s5, s6
 8013d3c:	ed11 6a0a 	vldr	s12, [r1, #-40]	@ 0xffffffd8
 8013d40:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013d44:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 8013d48:	ed90 3a00 	vldr	s6, [r0]
 8013d4c:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8013d50:	eee3 7a04 	vfma.f32	s15, s6, s8
 8013d54:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013d58:	ed90 4a00 	vldr	s8, [r0]
 8013d5c:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8013d60:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013d64:	eee4 7a24 	vfma.f32	s15, s8, s9
 8013d68:	edd0 4a00 	vldr	s9, [r0]
 8013d6c:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8013d70:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013d74:	eee4 7a85 	vfma.f32	s15, s9, s10
 8013d78:	ed90 5a00 	vldr	s10, [r0]
 8013d7c:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8013d80:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013d84:	eee5 7a25 	vfma.f32	s15, s10, s11
 8013d88:	edd0 5a00 	vldr	s11, [r0]
 8013d8c:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8013d90:	42a2      	cmp	r2, r4
 8013d92:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013d96:	eee5 7a86 	vfma.f32	s15, s11, s12
 8013d9a:	ed90 6a00 	vldr	s12, [r0]
 8013d9e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013da2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013da6:	d1a9      	bne.n	8013cfc <forward_lite_dense_if32of32wf32_lut8+0x178>
 8013da8:	9a08      	ldr	r2, [sp, #32]
 8013daa:	4413      	add	r3, r2
 8013dac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013dae:	4572      	cmp	r2, lr
 8013db0:	f4bf af54 	bcs.w	8013c5c <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8013db4:	7819      	ldrb	r1, [r3, #0]
 8013db6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013dba:	edd1 7a00 	vldr	s15, [r1]
 8013dbe:	4611      	mov	r1, r2
 8013dc0:	ecf1 6a01 	vldmia	r1!, {s13}
 8013dc4:	458a      	cmp	sl, r1
 8013dc6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013dca:	d963      	bls.n	8013e94 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013dcc:	7859      	ldrb	r1, [r3, #1]
 8013dce:	edd2 6a01 	vldr	s13, [r2, #4]
 8013dd2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013dd6:	edd1 7a00 	vldr	s15, [r1]
 8013dda:	f102 0108 	add.w	r1, r2, #8
 8013dde:	458a      	cmp	sl, r1
 8013de0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013de4:	d956      	bls.n	8013e94 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013de6:	7899      	ldrb	r1, [r3, #2]
 8013de8:	edd2 6a02 	vldr	s13, [r2, #8]
 8013dec:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013df0:	edd1 7a00 	vldr	s15, [r1]
 8013df4:	f102 010c 	add.w	r1, r2, #12
 8013df8:	458a      	cmp	sl, r1
 8013dfa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013dfe:	d949      	bls.n	8013e94 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013e00:	78d9      	ldrb	r1, [r3, #3]
 8013e02:	edd2 6a03 	vldr	s13, [r2, #12]
 8013e06:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013e0a:	edd1 7a00 	vldr	s15, [r1]
 8013e0e:	f102 0110 	add.w	r1, r2, #16
 8013e12:	458a      	cmp	sl, r1
 8013e14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013e18:	d93c      	bls.n	8013e94 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013e1a:	7919      	ldrb	r1, [r3, #4]
 8013e1c:	edd2 6a04 	vldr	s13, [r2, #16]
 8013e20:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013e24:	edd1 7a00 	vldr	s15, [r1]
 8013e28:	f102 0114 	add.w	r1, r2, #20
 8013e2c:	458a      	cmp	sl, r1
 8013e2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013e32:	d92f      	bls.n	8013e94 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013e34:	7959      	ldrb	r1, [r3, #5]
 8013e36:	edd2 6a05 	vldr	s13, [r2, #20]
 8013e3a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013e3e:	edd1 7a00 	vldr	s15, [r1]
 8013e42:	f102 0118 	add.w	r1, r2, #24
 8013e46:	458a      	cmp	sl, r1
 8013e48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013e4c:	d922      	bls.n	8013e94 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013e4e:	7999      	ldrb	r1, [r3, #6]
 8013e50:	edd2 6a06 	vldr	s13, [r2, #24]
 8013e54:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013e58:	edd1 7a00 	vldr	s15, [r1]
 8013e5c:	f102 011c 	add.w	r1, r2, #28
 8013e60:	458a      	cmp	sl, r1
 8013e62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013e66:	d915      	bls.n	8013e94 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013e68:	79d9      	ldrb	r1, [r3, #7]
 8013e6a:	edd2 6a07 	vldr	s13, [r2, #28]
 8013e6e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013e72:	edd1 7a00 	vldr	s15, [r1]
 8013e76:	f102 0120 	add.w	r1, r2, #32
 8013e7a:	458a      	cmp	sl, r1
 8013e7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013e80:	d908      	bls.n	8013e94 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013e82:	7a19      	ldrb	r1, [r3, #8]
 8013e84:	edd2 7a08 	vldr	s15, [r2, #32]
 8013e88:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013e8c:	edd1 6a00 	vldr	s13, [r1]
 8013e90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013e94:	9901      	ldr	r1, [sp, #4]
 8013e96:	1a8a      	subs	r2, r1, r2
 8013e98:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 8013e9c:	1c53      	adds	r3, r2, #1
 8013e9e:	e6dd      	b.n	8013c5c <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8013ea0:	3ffffff8 	.word	0x3ffffff8
 8013ea4:	00000000 	.word	0x00000000
 8013ea8:	eeb0 7a63 	vmov.f32	s14, s7
 8013eac:	465a      	mov	r2, fp
 8013eae:	461f      	mov	r7, r3
 8013eb0:	4610      	mov	r0, r2
 8013eb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013eb6:	ecf0 7a01 	vldmia	r0!, {s15}
 8013eba:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013ebe:	edd1 6a00 	vldr	s13, [r1]
 8013ec2:	9900      	ldr	r1, [sp, #0]
 8013ec4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013ec8:	4288      	cmp	r0, r1
 8013eca:	f200 80f7 	bhi.w	80140bc <forward_lite_dense_if32of32wf32_lut8+0x538>
 8013ece:	9904      	ldr	r1, [sp, #16]
 8013ed0:	f103 0411 	add.w	r4, r3, #17
 8013ed4:	3309      	adds	r3, #9
 8013ed6:	1a8e      	subs	r6, r1, r2
 8013ed8:	3224      	adds	r2, #36	@ 0x24
 8013eda:	0976      	lsrs	r6, r6, #5
 8013edc:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8013ee0:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8013ee4:	3308      	adds	r3, #8
 8013ee6:	ed52 2a07 	vldr	s5, [r2, #-28]	@ 0xffffffe4
 8013eea:	3220      	adds	r2, #32
 8013eec:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013ef0:	ed12 3a10 	vldr	s6, [r2, #-64]	@ 0xffffffc0
 8013ef4:	ed12 4a0e 	vldr	s8, [r2, #-56]	@ 0xffffffc8
 8013ef8:	edd1 7a00 	vldr	s15, [r1]
 8013efc:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8013f00:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8013f04:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8013f08:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013f0c:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8013f10:	ed52 5a0b 	vldr	s11, [r2, #-44]	@ 0xffffffd4
 8013f14:	edd1 2a00 	vldr	s5, [r1]
 8013f18:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8013f1c:	eee2 7a83 	vfma.f32	s15, s5, s6
 8013f20:	ed12 6a0a 	vldr	s12, [r2, #-40]	@ 0xffffffd8
 8013f24:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013f28:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 8013f2c:	ed91 3a00 	vldr	s6, [r1]
 8013f30:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8013f34:	eee3 7a04 	vfma.f32	s15, s6, s8
 8013f38:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013f3c:	ed91 4a00 	vldr	s8, [r1]
 8013f40:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8013f44:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013f48:	eee4 7a24 	vfma.f32	s15, s8, s9
 8013f4c:	edd1 4a00 	vldr	s9, [r1]
 8013f50:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8013f54:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013f58:	eee4 7a85 	vfma.f32	s15, s9, s10
 8013f5c:	ed91 5a00 	vldr	s10, [r1]
 8013f60:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8013f64:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013f68:	eee5 7a25 	vfma.f32	s15, s10, s11
 8013f6c:	edd1 5a00 	vldr	s11, [r1]
 8013f70:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8013f74:	42a3      	cmp	r3, r4
 8013f76:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013f7a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8013f7e:	ed91 6a00 	vldr	s12, [r1]
 8013f82:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013f86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013f8a:	d1a9      	bne.n	8013ee0 <forward_lite_dense_if32of32wf32_lut8+0x35c>
 8013f8c:	3601      	adds	r6, #1
 8013f8e:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8013f92:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8013f96:	4550      	cmp	r0, sl
 8013f98:	f4bf ae60 	bcs.w	8013c5c <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8013f9c:	781a      	ldrb	r2, [r3, #0]
 8013f9e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013fa2:	edd2 7a00 	vldr	s15, [r2]
 8013fa6:	4602      	mov	r2, r0
 8013fa8:	ecf2 6a01 	vldmia	r2!, {s13}
 8013fac:	4592      	cmp	sl, r2
 8013fae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013fb2:	d963      	bls.n	801407c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8013fb4:	785a      	ldrb	r2, [r3, #1]
 8013fb6:	edd0 6a01 	vldr	s13, [r0, #4]
 8013fba:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013fbe:	edd2 7a00 	vldr	s15, [r2]
 8013fc2:	f100 0208 	add.w	r2, r0, #8
 8013fc6:	4592      	cmp	sl, r2
 8013fc8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013fcc:	d956      	bls.n	801407c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8013fce:	789a      	ldrb	r2, [r3, #2]
 8013fd0:	edd0 6a02 	vldr	s13, [r0, #8]
 8013fd4:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013fd8:	edd2 7a00 	vldr	s15, [r2]
 8013fdc:	f100 020c 	add.w	r2, r0, #12
 8013fe0:	4592      	cmp	sl, r2
 8013fe2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013fe6:	d949      	bls.n	801407c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8013fe8:	78da      	ldrb	r2, [r3, #3]
 8013fea:	edd0 6a03 	vldr	s13, [r0, #12]
 8013fee:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013ff2:	edd2 7a00 	vldr	s15, [r2]
 8013ff6:	f100 0210 	add.w	r2, r0, #16
 8013ffa:	4592      	cmp	sl, r2
 8013ffc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014000:	d93c      	bls.n	801407c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8014002:	791a      	ldrb	r2, [r3, #4]
 8014004:	edd0 6a04 	vldr	s13, [r0, #16]
 8014008:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801400c:	edd2 7a00 	vldr	s15, [r2]
 8014010:	f100 0214 	add.w	r2, r0, #20
 8014014:	4592      	cmp	sl, r2
 8014016:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801401a:	d92f      	bls.n	801407c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801401c:	795a      	ldrb	r2, [r3, #5]
 801401e:	edd0 6a05 	vldr	s13, [r0, #20]
 8014022:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8014026:	edd2 7a00 	vldr	s15, [r2]
 801402a:	f100 0218 	add.w	r2, r0, #24
 801402e:	4596      	cmp	lr, r2
 8014030:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014034:	d922      	bls.n	801407c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8014036:	799a      	ldrb	r2, [r3, #6]
 8014038:	edd0 6a06 	vldr	s13, [r0, #24]
 801403c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8014040:	edd2 7a00 	vldr	s15, [r2]
 8014044:	f100 021c 	add.w	r2, r0, #28
 8014048:	4596      	cmp	lr, r2
 801404a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801404e:	d915      	bls.n	801407c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8014050:	79da      	ldrb	r2, [r3, #7]
 8014052:	edd0 6a07 	vldr	s13, [r0, #28]
 8014056:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801405a:	edd2 7a00 	vldr	s15, [r2]
 801405e:	f100 0220 	add.w	r2, r0, #32
 8014062:	4596      	cmp	lr, r2
 8014064:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014068:	d908      	bls.n	801407c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801406a:	7a1a      	ldrb	r2, [r3, #8]
 801406c:	edd0 7a08 	vldr	s15, [r0, #32]
 8014070:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8014074:	edd2 6a00 	vldr	s13, [r2]
 8014078:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801407c:	9a01      	ldr	r2, [sp, #4]
 801407e:	1a10      	subs	r0, r2, r0
 8014080:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8014084:	1c43      	adds	r3, r0, #1
 8014086:	e5e9      	b.n	8013c5c <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8014088:	f813 1b01 	ldrb.w	r1, [r3], #1
 801408c:	eddb 7a00 	vldr	s15, [fp]
 8014090:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8014094:	9a07      	ldr	r2, [sp, #28]
 8014096:	ed91 7a00 	vldr	s14, [r1]
 801409a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801409e:	f813 1b01 	ldrb.w	r1, [r3], #1
 80140a2:	ecf2 7a01 	vldmia	r2!, {s15}
 80140a6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80140aa:	edd1 6a00 	vldr	s13, [r1]
 80140ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80140b2:	e6fc      	b.n	8013eae <forward_lite_dense_if32of32wf32_lut8+0x32a>
 80140b4:	eeb0 7a63 	vmov.f32	s14, s7
 80140b8:	465a      	mov	r2, fp
 80140ba:	e7f0      	b.n	801409e <forward_lite_dense_if32of32wf32_lut8+0x51a>
 80140bc:	463b      	mov	r3, r7
 80140be:	e76a      	b.n	8013f96 <forward_lite_dense_if32of32wf32_lut8+0x412>
 80140c0:	465a      	mov	r2, fp
 80140c2:	e674      	b.n	8013dae <forward_lite_dense_if32of32wf32_lut8+0x22a>
 80140c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80140c6:	1acb      	subs	r3, r1, r3
 80140c8:	461a      	mov	r2, r3
 80140ca:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80140cc:	ed92 7a00 	vldr	s14, [r2]
 80140d0:	ecf0 7a01 	vldmia	r0!, {s15}
 80140d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80140d8:	ece2 7a01 	vstmia	r2!, {s15}
 80140dc:	4291      	cmp	r1, r2
 80140de:	d1f5      	bne.n	80140cc <forward_lite_dense_if32of32wf32_lut8+0x548>
 80140e0:	e7f2      	b.n	80140c8 <forward_lite_dense_if32of32wf32_lut8+0x544>
 80140e2:	bf00      	nop

080140e4 <forward_lite_nl_relu_if32of32>:
 80140e4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80140e8:	4413      	add	r3, r2
 80140ea:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80140ee:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80140f2:	4291      	cmp	r1, r2
 80140f4:	d80f      	bhi.n	8014116 <forward_lite_nl_relu_if32of32+0x32>
 80140f6:	f10c 0104 	add.w	r1, ip, #4
 80140fa:	1d13      	adds	r3, r2, #4
 80140fc:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8014118 <forward_lite_nl_relu_if32of32+0x34>
 8014100:	eba2 020c 	sub.w	r2, r2, ip
 8014104:	4408      	add	r0, r1
 8014106:	ed73 7a01 	vldmdb	r3!, {s15}
 801410a:	4293      	cmp	r3, r2
 801410c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8014110:	ed60 7a01 	vstmdb	r0!, {s15}
 8014114:	d1f7      	bne.n	8014106 <forward_lite_nl_relu_if32of32+0x22>
 8014116:	4770      	bx	lr
 8014118:	00000000 	.word	0x00000000

0801411c <st_int8_copy>:
 801411c:	4288      	cmp	r0, r1
 801411e:	d023      	beq.n	8014168 <st_int8_copy+0x4c>
 8014120:	b312      	cbz	r2, 8014168 <st_int8_copy+0x4c>
 8014122:	4288      	cmp	r0, r1
 8014124:	eb00 0302 	add.w	r3, r0, r2
 8014128:	d20b      	bcs.n	8014142 <st_int8_copy+0x26>
 801412a:	4299      	cmp	r1, r3
 801412c:	d209      	bcs.n	8014142 <st_int8_copy+0x26>
 801412e:	4298      	cmp	r0, r3
 8014130:	440a      	add	r2, r1
 8014132:	d219      	bcs.n	8014168 <st_int8_copy+0x4c>
 8014134:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8014138:	4298      	cmp	r0, r3
 801413a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801413e:	d1f9      	bne.n	8014134 <st_int8_copy+0x18>
 8014140:	4770      	bx	lr
 8014142:	2a03      	cmp	r2, #3
 8014144:	d811      	bhi.n	801416a <st_int8_copy+0x4e>
 8014146:	f810 3b01 	ldrb.w	r3, [r0], #1
 801414a:	f801 3b01 	strb.w	r3, [r1], #1
 801414e:	2a01      	cmp	r2, #1
 8014150:	d00a      	beq.n	8014168 <st_int8_copy+0x4c>
 8014152:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014156:	f801 3b01 	strb.w	r3, [r1], #1
 801415a:	2a02      	cmp	r2, #2
 801415c:	d004      	beq.n	8014168 <st_int8_copy+0x4c>
 801415e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014162:	f801 3b01 	strb.w	r3, [r1], #1
 8014166:	4770      	bx	lr
 8014168:	4770      	bx	lr
 801416a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801416e:	f001 0403 	and.w	r4, r1, #3
 8014172:	f000 0e03 	and.w	lr, r0, #3
 8014176:	f1c4 0304 	rsb	r3, r4, #4
 801417a:	eba2 0c03 	sub.w	ip, r2, r3
 801417e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014182:	f801 3b01 	strb.w	r3, [r1], #1
 8014186:	2c03      	cmp	r4, #3
 8014188:	f1c4 0202 	rsb	r2, r4, #2
 801418c:	d00e      	beq.n	80141ac <st_int8_copy+0x90>
 801418e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014192:	f801 3b01 	strb.w	r3, [r1], #1
 8014196:	2a00      	cmp	r2, #0
 8014198:	dd08      	ble.n	80141ac <st_int8_copy+0x90>
 801419a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801419e:	f801 3b01 	strb.w	r3, [r1], #1
 80141a2:	b91c      	cbnz	r4, 80141ac <st_int8_copy+0x90>
 80141a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80141a8:	f801 3b01 	strb.w	r3, [r1], #1
 80141ac:	4574      	cmp	r4, lr
 80141ae:	d02b      	beq.n	8014208 <st_int8_copy+0xec>
 80141b0:	ea4f 131c 	mov.w	r3, ip, lsr #4
 80141b4:	1e5a      	subs	r2, r3, #1
 80141b6:	b153      	cbz	r3, 80141ce <st_int8_copy+0xb2>
 80141b8:	f850 3b04 	ldr.w	r3, [r0], #4
 80141bc:	f850 4b04 	ldr.w	r4, [r0], #4
 80141c0:	f850 5b04 	ldr.w	r5, [r0], #4
 80141c4:	f850 6b04 	ldr.w	r6, [r0], #4
 80141c8:	c178      	stmia	r1!, {r3, r4, r5, r6}
 80141ca:	3a01      	subs	r2, #1
 80141cc:	d2f4      	bcs.n	80141b8 <st_int8_copy+0x9c>
 80141ce:	f01c 0f08 	tst.w	ip, #8
 80141d2:	d004      	beq.n	80141de <st_int8_copy+0xc2>
 80141d4:	f850 3b04 	ldr.w	r3, [r0], #4
 80141d8:	f850 4b04 	ldr.w	r4, [r0], #4
 80141dc:	c118      	stmia	r1!, {r3, r4}
 80141de:	f01c 0f04 	tst.w	ip, #4
 80141e2:	d003      	beq.n	80141ec <st_int8_copy+0xd0>
 80141e4:	f850 3b04 	ldr.w	r3, [r0], #4
 80141e8:	f841 3b04 	str.w	r3, [r1], #4
 80141ec:	f01c 0f02 	tst.w	ip, #2
 80141f0:	d003      	beq.n	80141fa <st_int8_copy+0xde>
 80141f2:	f830 3b02 	ldrh.w	r3, [r0], #2
 80141f6:	f821 3b02 	strh.w	r3, [r1], #2
 80141fa:	f01c 0f01 	tst.w	ip, #1
 80141fe:	d001      	beq.n	8014204 <st_int8_copy+0xe8>
 8014200:	7803      	ldrb	r3, [r0, #0]
 8014202:	700b      	strb	r3, [r1, #0]
 8014204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014208:	ea4f 139c 	mov.w	r3, ip, lsr #6
 801420c:	f103 39ff 	add.w	r9, r3, #4294967295
 8014210:	b183      	cbz	r3, 8014234 <st_int8_copy+0x118>
 8014212:	4688      	mov	r8, r1
 8014214:	4686      	mov	lr, r0
 8014216:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801421a:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801421e:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8014222:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8014226:	f109 39ff 	add.w	r9, r9, #4294967295
 801422a:	4641      	mov	r1, r8
 801422c:	4670      	mov	r0, lr
 801422e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8014232:	d1ee      	bne.n	8014212 <st_int8_copy+0xf6>
 8014234:	f01c 0f20 	tst.w	ip, #32
 8014238:	d007      	beq.n	801424a <st_int8_copy+0x12e>
 801423a:	4688      	mov	r8, r1
 801423c:	4686      	mov	lr, r0
 801423e:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8014242:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8014246:	4641      	mov	r1, r8
 8014248:	4670      	mov	r0, lr
 801424a:	f01c 0f10 	tst.w	ip, #16
 801424e:	d001      	beq.n	8014254 <st_int8_copy+0x138>
 8014250:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8014252:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8014254:	f01c 0f08 	tst.w	ip, #8
 8014258:	d0c1      	beq.n	80141de <st_int8_copy+0xc2>
 801425a:	c818      	ldmia	r0!, {r3, r4}
 801425c:	c118      	stmia	r1!, {r3, r4}
 801425e:	e7be      	b.n	80141de <st_int8_copy+0xc2>

08014260 <ai_array_to_buffer_fmt>:
 8014260:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8014264:	2b02      	cmp	r3, #2
 8014266:	d055      	beq.n	8014314 <ai_array_to_buffer_fmt+0xb4>
 8014268:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 801426c:	4a2c      	ldr	r2, [pc, #176]	@ (8014320 <ai_array_to_buffer_fmt+0xc0>)
 801426e:	4293      	cmp	r3, r2
 8014270:	d010      	beq.n	8014294 <ai_array_to_buffer_fmt+0x34>
 8014272:	dc21      	bgt.n	80142b8 <ai_array_to_buffer_fmt+0x58>
 8014274:	4a2b      	ldr	r2, [pc, #172]	@ (8014324 <ai_array_to_buffer_fmt+0xc4>)
 8014276:	4293      	cmp	r3, r2
 8014278:	d00c      	beq.n	8014294 <ai_array_to_buffer_fmt+0x34>
 801427a:	dd0f      	ble.n	801429c <ai_array_to_buffer_fmt+0x3c>
 801427c:	4a2a      	ldr	r2, [pc, #168]	@ (8014328 <ai_array_to_buffer_fmt+0xc8>)
 801427e:	4293      	cmp	r3, r2
 8014280:	d008      	beq.n	8014294 <ai_array_to_buffer_fmt+0x34>
 8014282:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8014286:	4293      	cmp	r3, r2
 8014288:	d004      	beq.n	8014294 <ai_array_to_buffer_fmt+0x34>
 801428a:	4a28      	ldr	r2, [pc, #160]	@ (801432c <ai_array_to_buffer_fmt+0xcc>)
 801428c:	4293      	cmp	r3, r2
 801428e:	bf0c      	ite	eq
 8014290:	4613      	moveq	r3, r2
 8014292:	2340      	movne	r3, #64	@ 0x40
 8014294:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8014298:	4318      	orrs	r0, r3
 801429a:	4770      	bx	lr
 801429c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80142a0:	4293      	cmp	r3, r2
 80142a2:	d0f7      	beq.n	8014294 <ai_array_to_buffer_fmt+0x34>
 80142a4:	dd2c      	ble.n	8014300 <ai_array_to_buffer_fmt+0xa0>
 80142a6:	4a22      	ldr	r2, [pc, #136]	@ (8014330 <ai_array_to_buffer_fmt+0xd0>)
 80142a8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80142ac:	4293      	cmp	r3, r2
 80142ae:	bf0c      	ite	eq
 80142b0:	4613      	moveq	r3, r2
 80142b2:	2340      	movne	r3, #64	@ 0x40
 80142b4:	4318      	orrs	r0, r3
 80142b6:	4770      	bx	lr
 80142b8:	4a1e      	ldr	r2, [pc, #120]	@ (8014334 <ai_array_to_buffer_fmt+0xd4>)
 80142ba:	4293      	cmp	r3, r2
 80142bc:	d0ea      	beq.n	8014294 <ai_array_to_buffer_fmt+0x34>
 80142be:	dd10      	ble.n	80142e2 <ai_array_to_buffer_fmt+0x82>
 80142c0:	4a1d      	ldr	r2, [pc, #116]	@ (8014338 <ai_array_to_buffer_fmt+0xd8>)
 80142c2:	4293      	cmp	r3, r2
 80142c4:	d0e6      	beq.n	8014294 <ai_array_to_buffer_fmt+0x34>
 80142c6:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 80142ca:	4293      	cmp	r3, r2
 80142cc:	d0e2      	beq.n	8014294 <ai_array_to_buffer_fmt+0x34>
 80142ce:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 80142d2:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80142d6:	4293      	cmp	r3, r2
 80142d8:	bf0c      	ite	eq
 80142da:	4613      	moveq	r3, r2
 80142dc:	2340      	movne	r3, #64	@ 0x40
 80142de:	4318      	orrs	r0, r3
 80142e0:	4770      	bx	lr
 80142e2:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 80142e6:	4293      	cmp	r3, r2
 80142e8:	d0d4      	beq.n	8014294 <ai_array_to_buffer_fmt+0x34>
 80142ea:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 80142ee:	4293      	cmp	r3, r2
 80142f0:	d0d0      	beq.n	8014294 <ai_array_to_buffer_fmt+0x34>
 80142f2:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80142f6:	4293      	cmp	r3, r2
 80142f8:	bf0c      	ite	eq
 80142fa:	4613      	moveq	r3, r2
 80142fc:	2340      	movne	r3, #64	@ 0x40
 80142fe:	e7c9      	b.n	8014294 <ai_array_to_buffer_fmt+0x34>
 8014300:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8014304:	4293      	cmp	r3, r2
 8014306:	d0c5      	beq.n	8014294 <ai_array_to_buffer_fmt+0x34>
 8014308:	3280      	adds	r2, #128	@ 0x80
 801430a:	4293      	cmp	r3, r2
 801430c:	bf0c      	ite	eq
 801430e:	4613      	moveq	r3, r2
 8014310:	2340      	movne	r3, #64	@ 0x40
 8014312:	e7bf      	b.n	8014294 <ai_array_to_buffer_fmt+0x34>
 8014314:	4b09      	ldr	r3, [pc, #36]	@ (801433c <ai_array_to_buffer_fmt+0xdc>)
 8014316:	4003      	ands	r3, r0
 8014318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801431c:	e7ba      	b.n	8014294 <ai_array_to_buffer_fmt+0x34>
 801431e:	bf00      	nop
 8014320:	00821040 	.word	0x00821040
 8014324:	00040840 	.word	0x00040840
 8014328:	00041040 	.word	0x00041040
 801432c:	0004084f 	.word	0x0004084f
 8014330:	00040447 	.word	0x00040447
 8014334:	00840447 	.word	0x00840447
 8014338:	0084084f 	.word	0x0084084f
 801433c:	00803fff 	.word	0x00803fff

08014340 <ai_array_get_byte_size>:
 8014340:	b321      	cbz	r1, 801438c <ai_array_get_byte_size+0x4c>
 8014342:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8014346:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 801434a:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 801434e:	fb03 f101 	mul.w	r1, r3, r1
 8014352:	b500      	push	{lr}
 8014354:	f3c0 4e43 	ubfx	lr, r0, #17, #4
 8014358:	3107      	adds	r1, #7
 801435a:	11c0      	asrs	r0, r0, #7
 801435c:	fa42 f20e 	asr.w	r2, r2, lr
 8014360:	f021 0107 	bic.w	r1, r1, #7
 8014364:	07d2      	lsls	r2, r2, #31
 8014366:	fa21 f10c 	lsr.w	r1, r1, ip
 801436a:	d505      	bpl.n	8014378 <ai_array_get_byte_size+0x38>
 801436c:	2300      	movs	r3, #0
 801436e:	3107      	adds	r1, #7
 8014370:	4419      	add	r1, r3
 8014372:	08c8      	lsrs	r0, r1, #3
 8014374:	f85d fb04 	ldr.w	pc, [sp], #4
 8014378:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 801437c:	3107      	adds	r1, #7
 801437e:	fa40 f00c 	asr.w	r0, r0, ip
 8014382:	4083      	lsls	r3, r0
 8014384:	4419      	add	r1, r3
 8014386:	08c8      	lsrs	r0, r1, #3
 8014388:	f85d fb04 	ldr.w	pc, [sp], #4
 801438c:	4608      	mov	r0, r1
 801438e:	4770      	bx	lr

08014390 <ai_array_get_data_byte_size>:
 8014390:	b169      	cbz	r1, 80143ae <ai_array_get_data_byte_size+0x1e>
 8014392:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8014396:	f3c0 5041 	ubfx	r0, r0, #21, #2
 801439a:	fb03 f101 	mul.w	r1, r3, r1
 801439e:	1dcb      	adds	r3, r1, #7
 80143a0:	f023 0307 	bic.w	r3, r3, #7
 80143a4:	fa23 f000 	lsr.w	r0, r3, r0
 80143a8:	3007      	adds	r0, #7
 80143aa:	08c0      	lsrs	r0, r0, #3
 80143ac:	4770      	bx	lr
 80143ae:	4608      	mov	r0, r1
 80143b0:	4770      	bx	lr
 80143b2:	bf00      	nop

080143b4 <ai_version_get>:
 80143b4:	0212      	lsls	r2, r2, #8
 80143b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80143ba:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80143be:	4770      	bx	lr

080143c0 <get_tensor_byte_size>:
 80143c0:	b430      	push	{r4, r5}
 80143c2:	6985      	ldr	r5, [r0, #24]
 80143c4:	68c4      	ldr	r4, [r0, #12]
 80143c6:	6941      	ldr	r1, [r0, #20]
 80143c8:	4b06      	ldr	r3, [pc, #24]	@ (80143e4 <get_tensor_byte_size+0x24>)
 80143ca:	6828      	ldr	r0, [r5, #0]
 80143cc:	4a06      	ldr	r2, [pc, #24]	@ (80143e8 <get_tensor_byte_size+0x28>)
 80143ce:	4003      	ands	r3, r0
 80143d0:	68c9      	ldr	r1, [r1, #12]
 80143d2:	68e0      	ldr	r0, [r4, #12]
 80143d4:	4293      	cmp	r3, r2
 80143d6:	fb01 f000 	mul.w	r0, r1, r0
 80143da:	d101      	bne.n	80143e0 <get_tensor_byte_size+0x20>
 80143dc:	3007      	adds	r0, #7
 80143de:	08c0      	lsrs	r0, r0, #3
 80143e0:	bc30      	pop	{r4, r5}
 80143e2:	4770      	bx	lr
 80143e4:	017fffff 	.word	0x017fffff
 80143e8:	000400c0 	.word	0x000400c0

080143ec <lite_bilinear_if32of32_kernel>:
 80143ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143ee:	9d05      	ldr	r5, [sp, #20]
 80143f0:	b352      	cbz	r2, 8014448 <lite_bilinear_if32of32_kernel+0x5c>
 80143f2:	f04f 0c00 	mov.w	ip, #0
 80143f6:	edd5 4a02 	vldr	s9, [r5, #8]
 80143fa:	f10c 0c01 	add.w	ip, ip, #1
 80143fe:	ed95 5a01 	vldr	s10, [r5, #4]
 8014402:	ed90 6a00 	vldr	s12, [r0]
 8014406:	4562      	cmp	r2, ip
 8014408:	edd5 5a00 	vldr	s11, [r5]
 801440c:	edd5 6a03 	vldr	s13, [r5, #12]
 8014410:	e9d3 4600 	ldrd	r4, r6, [r3]
 8014414:	eb00 0786 	add.w	r7, r0, r6, lsl #2
 8014418:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 801441c:	4434      	add	r4, r6
 801441e:	edd7 7a00 	vldr	s15, [r7]
 8014422:	ed9e 7a00 	vldr	s14, [lr]
 8014426:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801442a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801442e:	f100 0004 	add.w	r0, r0, #4
 8014432:	eee5 7a07 	vfma.f32	s15, s10, s14
 8014436:	ed94 7a00 	vldr	s14, [r4]
 801443a:	eee5 7a86 	vfma.f32	s15, s11, s12
 801443e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014442:	ece1 7a01 	vstmia	r1!, {s15}
 8014446:	d1d6      	bne.n	80143f6 <lite_bilinear_if32of32_kernel+0xa>
 8014448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801444a:	bf00      	nop

0801444c <lite_bilinear_is8os8_kernel>:
 801444c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014450:	9c07      	ldr	r4, [sp, #28]
 8014452:	2a00      	cmp	r2, #0
 8014454:	d04b      	beq.n	80144ee <lite_bilinear_is8os8_kernel+0xa2>
 8014456:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801445a:	eb01 0e02 	add.w	lr, r1, r2
 801445e:	f100 3cff 	add.w	ip, r0, #4294967295
 8014462:	f1c0 0501 	rsb	r5, r0, #1
 8014466:	685f      	ldr	r7, [r3, #4]
 8014468:	eb05 060c 	add.w	r6, r5, ip
 801446c:	681a      	ldr	r2, [r3, #0]
 801446e:	eb00 0807 	add.w	r8, r0, r7
 8014472:	edd4 3a02 	vldr	s7, [r4, #8]
 8014476:	4402      	add	r2, r0
 8014478:	ed94 4a01 	vldr	s8, [r4, #4]
 801447c:	f918 8006 	ldrsb.w	r8, [r8, r6]
 8014480:	f91c 9f01 	ldrsb.w	r9, [ip, #1]!
 8014484:	ee07 8a90 	vmov	s15, r8
 8014488:	f912 8006 	ldrsb.w	r8, [r2, r6]
 801448c:	ee06 9a90 	vmov	s13, r9
 8014490:	443a      	add	r2, r7
 8014492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014496:	ee06 8a10 	vmov	s12, r8
 801449a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801449e:	edd4 4a00 	vldr	s9, [r4]
 80144a2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80144a6:	5792      	ldrsb	r2, [r2, r6]
 80144a8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80144ac:	ed94 5a03 	vldr	s10, [r4, #12]
 80144b0:	ee07 2a10 	vmov	s14, r2
 80144b4:	eee4 7a06 	vfma.f32	s15, s8, s12
 80144b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80144bc:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80144c0:	eee5 7a07 	vfma.f32	s15, s10, s14
 80144c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80144c8:	ee37 7aa5 	vadd.f32	s14, s15, s11
 80144cc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80144d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144d4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80144d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80144dc:	dd09      	ble.n	80144f2 <lite_bilinear_is8os8_kernel+0xa6>
 80144de:	ee17 2a10 	vmov	r2, s14
 80144e2:	f302 0207 	ssat	r2, #8, r2
 80144e6:	f801 2b01 	strb.w	r2, [r1], #1
 80144ea:	4571      	cmp	r1, lr
 80144ec:	d1bb      	bne.n	8014466 <lite_bilinear_is8os8_kernel+0x1a>
 80144ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144f2:	ee17 2a90 	vmov	r2, s15
 80144f6:	f302 0207 	ssat	r2, #8, r2
 80144fa:	f801 2b01 	strb.w	r2, [r1], #1
 80144fe:	4571      	cmp	r1, lr
 8014500:	d1b1      	bne.n	8014466 <lite_bilinear_is8os8_kernel+0x1a>
 8014502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014506:	bf00      	nop

08014508 <lite_bilinear_iu8ou8_kernel>:
 8014508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801450c:	9c07      	ldr	r4, [sp, #28]
 801450e:	2a00      	cmp	r2, #0
 8014510:	d042      	beq.n	8014598 <lite_bilinear_iu8ou8_kernel+0x90>
 8014512:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8014516:	eb01 0e02 	add.w	lr, r1, r2
 801451a:	f100 3cff 	add.w	ip, r0, #4294967295
 801451e:	f1c0 0501 	rsb	r5, r0, #1
 8014522:	eb05 060c 	add.w	r6, r5, ip
 8014526:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 801452a:	eef0 7a44 	vmov.f32	s15, s8
 801452e:	edd4 6a00 	vldr	s13, [r4]
 8014532:	ee07 2a10 	vmov	s14, r2
 8014536:	681a      	ldr	r2, [r3, #0]
 8014538:	685f      	ldr	r7, [r3, #4]
 801453a:	4402      	add	r2, r0
 801453c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014540:	eb00 0807 	add.w	r8, r0, r7
 8014544:	edd4 4a01 	vldr	s9, [r4, #4]
 8014548:	f812 9006 	ldrb.w	r9, [r2, r6]
 801454c:	443a      	add	r2, r7
 801454e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014552:	f818 8006 	ldrb.w	r8, [r8, r6]
 8014556:	ee06 9a10 	vmov	s12, r9
 801455a:	ed94 5a02 	vldr	s10, [r4, #8]
 801455e:	ee06 8a90 	vmov	s13, r8
 8014562:	5d92      	ldrb	r2, [r2, r6]
 8014564:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014568:	edd4 5a03 	vldr	s11, [r4, #12]
 801456c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014570:	ee07 2a10 	vmov	s14, r2
 8014574:	eee4 7a86 	vfma.f32	s15, s9, s12
 8014578:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801457c:	eee5 7a26 	vfma.f32	s15, s10, s13
 8014580:	eee5 7a87 	vfma.f32	s15, s11, s14
 8014584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014588:	ee17 2a90 	vmov	r2, s15
 801458c:	f382 0208 	usat	r2, #8, r2
 8014590:	f801 2b01 	strb.w	r2, [r1], #1
 8014594:	4571      	cmp	r1, lr
 8014596:	d1c4      	bne.n	8014522 <lite_bilinear_iu8ou8_kernel+0x1a>
 8014598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801459c <lite_bilinear_is16os16_kernel>:
 801459c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145a0:	9d07      	ldr	r5, [sp, #28]
 80145a2:	2a00      	cmp	r2, #0
 80145a4:	d04e      	beq.n	8014644 <lite_bilinear_is16os16_kernel+0xa8>
 80145a6:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80145aa:	f1a0 0e02 	sub.w	lr, r0, #2
 80145ae:	f04f 0c00 	mov.w	ip, #0
 80145b2:	ed95 7a02 	vldr	s14, [r5, #8]
 80145b6:	ed95 4a01 	vldr	s8, [r5, #4]
 80145ba:	f93e 9f02 	ldrsh.w	r9, [lr, #2]!
 80145be:	edd5 4a00 	vldr	s9, [r5]
 80145c2:	ee06 9a90 	vmov	s13, r9
 80145c6:	ed95 5a03 	vldr	s10, [r5, #12]
 80145ca:	e9d3 4600 	ldrd	r4, r6, [r3]
 80145ce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80145d2:	eb06 080c 	add.w	r8, r6, ip
 80145d6:	eb04 070c 	add.w	r7, r4, ip
 80145da:	4434      	add	r4, r6
 80145dc:	f930 6018 	ldrsh.w	r6, [r0, r8, lsl #1]
 80145e0:	4464      	add	r4, ip
 80145e2:	ee07 6a90 	vmov	s15, r6
 80145e6:	f930 6017 	ldrsh.w	r6, [r0, r7, lsl #1]
 80145ea:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 80145ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145f2:	ee06 6a10 	vmov	s12, r6
 80145f6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80145fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80145fe:	ee07 4a10 	vmov	s14, r4
 8014602:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014606:	eee4 7a06 	vfma.f32	s15, s8, s12
 801460a:	eee4 7aa6 	vfma.f32	s15, s9, s13
 801460e:	eee5 7a07 	vfma.f32	s15, s10, s14
 8014612:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8014616:	ee77 6ae5 	vsub.f32	s13, s15, s11
 801461a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801461e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014622:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801462a:	bfcc      	ite	gt
 801462c:	ee17 4a10 	vmovgt	r4, s14
 8014630:	ee16 4a90 	vmovle	r4, s13
 8014634:	f304 040f 	ssat	r4, #16, r4
 8014638:	f10c 0c01 	add.w	ip, ip, #1
 801463c:	f821 4b02 	strh.w	r4, [r1], #2
 8014640:	4562      	cmp	r2, ip
 8014642:	d1b6      	bne.n	80145b2 <lite_bilinear_is16os16_kernel+0x16>
 8014644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014648 <lite_bilinear_iu16ou16_kernel>:
 8014648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801464c:	9d06      	ldr	r5, [sp, #24]
 801464e:	2a00      	cmp	r2, #0
 8014650:	d042      	beq.n	80146d8 <lite_bilinear_iu16ou16_kernel+0x90>
 8014652:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8014656:	1e86      	subs	r6, r0, #2
 8014658:	f04f 0e00 	mov.w	lr, #0
 801465c:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 8014660:	eef0 7a44 	vmov.f32	s15, s8
 8014664:	edd5 6a00 	vldr	s13, [r5]
 8014668:	ee07 4a10 	vmov	s14, r4
 801466c:	681c      	ldr	r4, [r3, #0]
 801466e:	685f      	ldr	r7, [r3, #4]
 8014670:	eb04 080e 	add.w	r8, r4, lr
 8014674:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014678:	eb07 0c0e 	add.w	ip, r7, lr
 801467c:	edd5 4a01 	vldr	s9, [r5, #4]
 8014680:	f830 8018 	ldrh.w	r8, [r0, r8, lsl #1]
 8014684:	443c      	add	r4, r7
 8014686:	eee6 7a87 	vfma.f32	s15, s13, s14
 801468a:	f830 701c 	ldrh.w	r7, [r0, ip, lsl #1]
 801468e:	ee06 8a10 	vmov	s12, r8
 8014692:	4474      	add	r4, lr
 8014694:	ee06 7a90 	vmov	s13, r7
 8014698:	ed95 5a02 	vldr	s10, [r5, #8]
 801469c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80146a0:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 80146a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80146a8:	edd5 5a03 	vldr	s11, [r5, #12]
 80146ac:	ee07 4a10 	vmov	s14, r4
 80146b0:	eee4 7a86 	vfma.f32	s15, s9, s12
 80146b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80146b8:	eee5 7a26 	vfma.f32	s15, s10, s13
 80146bc:	eee5 7a87 	vfma.f32	s15, s11, s14
 80146c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80146c4:	ee17 ca90 	vmov	ip, s15
 80146c8:	f38c 0c10 	usat	ip, #16, ip
 80146cc:	f10e 0e01 	add.w	lr, lr, #1
 80146d0:	f821 cb02 	strh.w	ip, [r1], #2
 80146d4:	4572      	cmp	r2, lr
 80146d6:	d1c1      	bne.n	801465c <lite_bilinear_iu16ou16_kernel+0x14>
 80146d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080146dc <malloc>:
 80146dc:	4b02      	ldr	r3, [pc, #8]	@ (80146e8 <malloc+0xc>)
 80146de:	4601      	mov	r1, r0
 80146e0:	6818      	ldr	r0, [r3, #0]
 80146e2:	f000 b825 	b.w	8014730 <_malloc_r>
 80146e6:	bf00      	nop
 80146e8:	20000824 	.word	0x20000824

080146ec <sbrk_aligned>:
 80146ec:	b570      	push	{r4, r5, r6, lr}
 80146ee:	4e0f      	ldr	r6, [pc, #60]	@ (801472c <sbrk_aligned+0x40>)
 80146f0:	460c      	mov	r4, r1
 80146f2:	6831      	ldr	r1, [r6, #0]
 80146f4:	4605      	mov	r5, r0
 80146f6:	b911      	cbnz	r1, 80146fe <sbrk_aligned+0x12>
 80146f8:	f000 ff96 	bl	8015628 <_sbrk_r>
 80146fc:	6030      	str	r0, [r6, #0]
 80146fe:	4621      	mov	r1, r4
 8014700:	4628      	mov	r0, r5
 8014702:	f000 ff91 	bl	8015628 <_sbrk_r>
 8014706:	1c43      	adds	r3, r0, #1
 8014708:	d103      	bne.n	8014712 <sbrk_aligned+0x26>
 801470a:	f04f 34ff 	mov.w	r4, #4294967295
 801470e:	4620      	mov	r0, r4
 8014710:	bd70      	pop	{r4, r5, r6, pc}
 8014712:	1cc4      	adds	r4, r0, #3
 8014714:	f024 0403 	bic.w	r4, r4, #3
 8014718:	42a0      	cmp	r0, r4
 801471a:	d0f8      	beq.n	801470e <sbrk_aligned+0x22>
 801471c:	1a21      	subs	r1, r4, r0
 801471e:	4628      	mov	r0, r5
 8014720:	f000 ff82 	bl	8015628 <_sbrk_r>
 8014724:	3001      	adds	r0, #1
 8014726:	d1f2      	bne.n	801470e <sbrk_aligned+0x22>
 8014728:	e7ef      	b.n	801470a <sbrk_aligned+0x1e>
 801472a:	bf00      	nop
 801472c:	2003604c 	.word	0x2003604c

08014730 <_malloc_r>:
 8014730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014734:	1ccd      	adds	r5, r1, #3
 8014736:	f025 0503 	bic.w	r5, r5, #3
 801473a:	3508      	adds	r5, #8
 801473c:	2d0c      	cmp	r5, #12
 801473e:	bf38      	it	cc
 8014740:	250c      	movcc	r5, #12
 8014742:	2d00      	cmp	r5, #0
 8014744:	4606      	mov	r6, r0
 8014746:	db01      	blt.n	801474c <_malloc_r+0x1c>
 8014748:	42a9      	cmp	r1, r5
 801474a:	d904      	bls.n	8014756 <_malloc_r+0x26>
 801474c:	230c      	movs	r3, #12
 801474e:	6033      	str	r3, [r6, #0]
 8014750:	2000      	movs	r0, #0
 8014752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801482c <_malloc_r+0xfc>
 801475a:	f000 f869 	bl	8014830 <__malloc_lock>
 801475e:	f8d8 3000 	ldr.w	r3, [r8]
 8014762:	461c      	mov	r4, r3
 8014764:	bb44      	cbnz	r4, 80147b8 <_malloc_r+0x88>
 8014766:	4629      	mov	r1, r5
 8014768:	4630      	mov	r0, r6
 801476a:	f7ff ffbf 	bl	80146ec <sbrk_aligned>
 801476e:	1c43      	adds	r3, r0, #1
 8014770:	4604      	mov	r4, r0
 8014772:	d158      	bne.n	8014826 <_malloc_r+0xf6>
 8014774:	f8d8 4000 	ldr.w	r4, [r8]
 8014778:	4627      	mov	r7, r4
 801477a:	2f00      	cmp	r7, #0
 801477c:	d143      	bne.n	8014806 <_malloc_r+0xd6>
 801477e:	2c00      	cmp	r4, #0
 8014780:	d04b      	beq.n	801481a <_malloc_r+0xea>
 8014782:	6823      	ldr	r3, [r4, #0]
 8014784:	4639      	mov	r1, r7
 8014786:	4630      	mov	r0, r6
 8014788:	eb04 0903 	add.w	r9, r4, r3
 801478c:	f000 ff4c 	bl	8015628 <_sbrk_r>
 8014790:	4581      	cmp	r9, r0
 8014792:	d142      	bne.n	801481a <_malloc_r+0xea>
 8014794:	6821      	ldr	r1, [r4, #0]
 8014796:	1a6d      	subs	r5, r5, r1
 8014798:	4629      	mov	r1, r5
 801479a:	4630      	mov	r0, r6
 801479c:	f7ff ffa6 	bl	80146ec <sbrk_aligned>
 80147a0:	3001      	adds	r0, #1
 80147a2:	d03a      	beq.n	801481a <_malloc_r+0xea>
 80147a4:	6823      	ldr	r3, [r4, #0]
 80147a6:	442b      	add	r3, r5
 80147a8:	6023      	str	r3, [r4, #0]
 80147aa:	f8d8 3000 	ldr.w	r3, [r8]
 80147ae:	685a      	ldr	r2, [r3, #4]
 80147b0:	bb62      	cbnz	r2, 801480c <_malloc_r+0xdc>
 80147b2:	f8c8 7000 	str.w	r7, [r8]
 80147b6:	e00f      	b.n	80147d8 <_malloc_r+0xa8>
 80147b8:	6822      	ldr	r2, [r4, #0]
 80147ba:	1b52      	subs	r2, r2, r5
 80147bc:	d420      	bmi.n	8014800 <_malloc_r+0xd0>
 80147be:	2a0b      	cmp	r2, #11
 80147c0:	d917      	bls.n	80147f2 <_malloc_r+0xc2>
 80147c2:	1961      	adds	r1, r4, r5
 80147c4:	42a3      	cmp	r3, r4
 80147c6:	6025      	str	r5, [r4, #0]
 80147c8:	bf18      	it	ne
 80147ca:	6059      	strne	r1, [r3, #4]
 80147cc:	6863      	ldr	r3, [r4, #4]
 80147ce:	bf08      	it	eq
 80147d0:	f8c8 1000 	streq.w	r1, [r8]
 80147d4:	5162      	str	r2, [r4, r5]
 80147d6:	604b      	str	r3, [r1, #4]
 80147d8:	4630      	mov	r0, r6
 80147da:	f000 f82f 	bl	801483c <__malloc_unlock>
 80147de:	f104 000b 	add.w	r0, r4, #11
 80147e2:	1d23      	adds	r3, r4, #4
 80147e4:	f020 0007 	bic.w	r0, r0, #7
 80147e8:	1ac2      	subs	r2, r0, r3
 80147ea:	bf1c      	itt	ne
 80147ec:	1a1b      	subne	r3, r3, r0
 80147ee:	50a3      	strne	r3, [r4, r2]
 80147f0:	e7af      	b.n	8014752 <_malloc_r+0x22>
 80147f2:	6862      	ldr	r2, [r4, #4]
 80147f4:	42a3      	cmp	r3, r4
 80147f6:	bf0c      	ite	eq
 80147f8:	f8c8 2000 	streq.w	r2, [r8]
 80147fc:	605a      	strne	r2, [r3, #4]
 80147fe:	e7eb      	b.n	80147d8 <_malloc_r+0xa8>
 8014800:	4623      	mov	r3, r4
 8014802:	6864      	ldr	r4, [r4, #4]
 8014804:	e7ae      	b.n	8014764 <_malloc_r+0x34>
 8014806:	463c      	mov	r4, r7
 8014808:	687f      	ldr	r7, [r7, #4]
 801480a:	e7b6      	b.n	801477a <_malloc_r+0x4a>
 801480c:	461a      	mov	r2, r3
 801480e:	685b      	ldr	r3, [r3, #4]
 8014810:	42a3      	cmp	r3, r4
 8014812:	d1fb      	bne.n	801480c <_malloc_r+0xdc>
 8014814:	2300      	movs	r3, #0
 8014816:	6053      	str	r3, [r2, #4]
 8014818:	e7de      	b.n	80147d8 <_malloc_r+0xa8>
 801481a:	230c      	movs	r3, #12
 801481c:	6033      	str	r3, [r6, #0]
 801481e:	4630      	mov	r0, r6
 8014820:	f000 f80c 	bl	801483c <__malloc_unlock>
 8014824:	e794      	b.n	8014750 <_malloc_r+0x20>
 8014826:	6005      	str	r5, [r0, #0]
 8014828:	e7d6      	b.n	80147d8 <_malloc_r+0xa8>
 801482a:	bf00      	nop
 801482c:	20036050 	.word	0x20036050

08014830 <__malloc_lock>:
 8014830:	4801      	ldr	r0, [pc, #4]	@ (8014838 <__malloc_lock+0x8>)
 8014832:	f000 bf46 	b.w	80156c2 <__retarget_lock_acquire_recursive>
 8014836:	bf00      	nop
 8014838:	20036194 	.word	0x20036194

0801483c <__malloc_unlock>:
 801483c:	4801      	ldr	r0, [pc, #4]	@ (8014844 <__malloc_unlock+0x8>)
 801483e:	f000 bf41 	b.w	80156c4 <__retarget_lock_release_recursive>
 8014842:	bf00      	nop
 8014844:	20036194 	.word	0x20036194

08014848 <_realloc_r>:
 8014848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801484c:	4680      	mov	r8, r0
 801484e:	4615      	mov	r5, r2
 8014850:	460c      	mov	r4, r1
 8014852:	b921      	cbnz	r1, 801485e <_realloc_r+0x16>
 8014854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014858:	4611      	mov	r1, r2
 801485a:	f7ff bf69 	b.w	8014730 <_malloc_r>
 801485e:	b92a      	cbnz	r2, 801486c <_realloc_r+0x24>
 8014860:	f001 fd8e 	bl	8016380 <_free_r>
 8014864:	2400      	movs	r4, #0
 8014866:	4620      	mov	r0, r4
 8014868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801486c:	f002 f954 	bl	8016b18 <_malloc_usable_size_r>
 8014870:	4285      	cmp	r5, r0
 8014872:	4606      	mov	r6, r0
 8014874:	d802      	bhi.n	801487c <_realloc_r+0x34>
 8014876:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801487a:	d8f4      	bhi.n	8014866 <_realloc_r+0x1e>
 801487c:	4629      	mov	r1, r5
 801487e:	4640      	mov	r0, r8
 8014880:	f7ff ff56 	bl	8014730 <_malloc_r>
 8014884:	4607      	mov	r7, r0
 8014886:	2800      	cmp	r0, #0
 8014888:	d0ec      	beq.n	8014864 <_realloc_r+0x1c>
 801488a:	42b5      	cmp	r5, r6
 801488c:	462a      	mov	r2, r5
 801488e:	4621      	mov	r1, r4
 8014890:	bf28      	it	cs
 8014892:	4632      	movcs	r2, r6
 8014894:	f000 ff17 	bl	80156c6 <memcpy>
 8014898:	4621      	mov	r1, r4
 801489a:	4640      	mov	r0, r8
 801489c:	f001 fd70 	bl	8016380 <_free_r>
 80148a0:	463c      	mov	r4, r7
 80148a2:	e7e0      	b.n	8014866 <_realloc_r+0x1e>

080148a4 <__cvt>:
 80148a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80148a8:	ec57 6b10 	vmov	r6, r7, d0
 80148ac:	2f00      	cmp	r7, #0
 80148ae:	460c      	mov	r4, r1
 80148b0:	4619      	mov	r1, r3
 80148b2:	463b      	mov	r3, r7
 80148b4:	bfbb      	ittet	lt
 80148b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80148ba:	461f      	movlt	r7, r3
 80148bc:	2300      	movge	r3, #0
 80148be:	232d      	movlt	r3, #45	@ 0x2d
 80148c0:	700b      	strb	r3, [r1, #0]
 80148c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80148c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80148c8:	4691      	mov	r9, r2
 80148ca:	f023 0820 	bic.w	r8, r3, #32
 80148ce:	bfbc      	itt	lt
 80148d0:	4632      	movlt	r2, r6
 80148d2:	4616      	movlt	r6, r2
 80148d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80148d8:	d005      	beq.n	80148e6 <__cvt+0x42>
 80148da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80148de:	d100      	bne.n	80148e2 <__cvt+0x3e>
 80148e0:	3401      	adds	r4, #1
 80148e2:	2102      	movs	r1, #2
 80148e4:	e000      	b.n	80148e8 <__cvt+0x44>
 80148e6:	2103      	movs	r1, #3
 80148e8:	ab03      	add	r3, sp, #12
 80148ea:	9301      	str	r3, [sp, #4]
 80148ec:	ab02      	add	r3, sp, #8
 80148ee:	9300      	str	r3, [sp, #0]
 80148f0:	ec47 6b10 	vmov	d0, r6, r7
 80148f4:	4653      	mov	r3, sl
 80148f6:	4622      	mov	r2, r4
 80148f8:	f000 ff7e 	bl	80157f8 <_dtoa_r>
 80148fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8014900:	4605      	mov	r5, r0
 8014902:	d119      	bne.n	8014938 <__cvt+0x94>
 8014904:	f019 0f01 	tst.w	r9, #1
 8014908:	d00e      	beq.n	8014928 <__cvt+0x84>
 801490a:	eb00 0904 	add.w	r9, r0, r4
 801490e:	2200      	movs	r2, #0
 8014910:	2300      	movs	r3, #0
 8014912:	4630      	mov	r0, r6
 8014914:	4639      	mov	r1, r7
 8014916:	f7ec f957 	bl	8000bc8 <__aeabi_dcmpeq>
 801491a:	b108      	cbz	r0, 8014920 <__cvt+0x7c>
 801491c:	f8cd 900c 	str.w	r9, [sp, #12]
 8014920:	2230      	movs	r2, #48	@ 0x30
 8014922:	9b03      	ldr	r3, [sp, #12]
 8014924:	454b      	cmp	r3, r9
 8014926:	d31e      	bcc.n	8014966 <__cvt+0xc2>
 8014928:	9b03      	ldr	r3, [sp, #12]
 801492a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801492c:	1b5b      	subs	r3, r3, r5
 801492e:	4628      	mov	r0, r5
 8014930:	6013      	str	r3, [r2, #0]
 8014932:	b004      	add	sp, #16
 8014934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014938:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801493c:	eb00 0904 	add.w	r9, r0, r4
 8014940:	d1e5      	bne.n	801490e <__cvt+0x6a>
 8014942:	7803      	ldrb	r3, [r0, #0]
 8014944:	2b30      	cmp	r3, #48	@ 0x30
 8014946:	d10a      	bne.n	801495e <__cvt+0xba>
 8014948:	2200      	movs	r2, #0
 801494a:	2300      	movs	r3, #0
 801494c:	4630      	mov	r0, r6
 801494e:	4639      	mov	r1, r7
 8014950:	f7ec f93a 	bl	8000bc8 <__aeabi_dcmpeq>
 8014954:	b918      	cbnz	r0, 801495e <__cvt+0xba>
 8014956:	f1c4 0401 	rsb	r4, r4, #1
 801495a:	f8ca 4000 	str.w	r4, [sl]
 801495e:	f8da 3000 	ldr.w	r3, [sl]
 8014962:	4499      	add	r9, r3
 8014964:	e7d3      	b.n	801490e <__cvt+0x6a>
 8014966:	1c59      	adds	r1, r3, #1
 8014968:	9103      	str	r1, [sp, #12]
 801496a:	701a      	strb	r2, [r3, #0]
 801496c:	e7d9      	b.n	8014922 <__cvt+0x7e>

0801496e <__exponent>:
 801496e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014970:	2900      	cmp	r1, #0
 8014972:	bfba      	itte	lt
 8014974:	4249      	neglt	r1, r1
 8014976:	232d      	movlt	r3, #45	@ 0x2d
 8014978:	232b      	movge	r3, #43	@ 0x2b
 801497a:	2909      	cmp	r1, #9
 801497c:	7002      	strb	r2, [r0, #0]
 801497e:	7043      	strb	r3, [r0, #1]
 8014980:	dd29      	ble.n	80149d6 <__exponent+0x68>
 8014982:	f10d 0307 	add.w	r3, sp, #7
 8014986:	461d      	mov	r5, r3
 8014988:	270a      	movs	r7, #10
 801498a:	461a      	mov	r2, r3
 801498c:	fbb1 f6f7 	udiv	r6, r1, r7
 8014990:	fb07 1416 	mls	r4, r7, r6, r1
 8014994:	3430      	adds	r4, #48	@ 0x30
 8014996:	f802 4c01 	strb.w	r4, [r2, #-1]
 801499a:	460c      	mov	r4, r1
 801499c:	2c63      	cmp	r4, #99	@ 0x63
 801499e:	f103 33ff 	add.w	r3, r3, #4294967295
 80149a2:	4631      	mov	r1, r6
 80149a4:	dcf1      	bgt.n	801498a <__exponent+0x1c>
 80149a6:	3130      	adds	r1, #48	@ 0x30
 80149a8:	1e94      	subs	r4, r2, #2
 80149aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80149ae:	1c41      	adds	r1, r0, #1
 80149b0:	4623      	mov	r3, r4
 80149b2:	42ab      	cmp	r3, r5
 80149b4:	d30a      	bcc.n	80149cc <__exponent+0x5e>
 80149b6:	f10d 0309 	add.w	r3, sp, #9
 80149ba:	1a9b      	subs	r3, r3, r2
 80149bc:	42ac      	cmp	r4, r5
 80149be:	bf88      	it	hi
 80149c0:	2300      	movhi	r3, #0
 80149c2:	3302      	adds	r3, #2
 80149c4:	4403      	add	r3, r0
 80149c6:	1a18      	subs	r0, r3, r0
 80149c8:	b003      	add	sp, #12
 80149ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80149d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80149d4:	e7ed      	b.n	80149b2 <__exponent+0x44>
 80149d6:	2330      	movs	r3, #48	@ 0x30
 80149d8:	3130      	adds	r1, #48	@ 0x30
 80149da:	7083      	strb	r3, [r0, #2]
 80149dc:	70c1      	strb	r1, [r0, #3]
 80149de:	1d03      	adds	r3, r0, #4
 80149e0:	e7f1      	b.n	80149c6 <__exponent+0x58>
	...

080149e4 <_printf_float>:
 80149e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149e8:	b08d      	sub	sp, #52	@ 0x34
 80149ea:	460c      	mov	r4, r1
 80149ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80149f0:	4616      	mov	r6, r2
 80149f2:	461f      	mov	r7, r3
 80149f4:	4605      	mov	r5, r0
 80149f6:	f000 fddf 	bl	80155b8 <_localeconv_r>
 80149fa:	6803      	ldr	r3, [r0, #0]
 80149fc:	9304      	str	r3, [sp, #16]
 80149fe:	4618      	mov	r0, r3
 8014a00:	f7eb fcb6 	bl	8000370 <strlen>
 8014a04:	2300      	movs	r3, #0
 8014a06:	930a      	str	r3, [sp, #40]	@ 0x28
 8014a08:	f8d8 3000 	ldr.w	r3, [r8]
 8014a0c:	9005      	str	r0, [sp, #20]
 8014a0e:	3307      	adds	r3, #7
 8014a10:	f023 0307 	bic.w	r3, r3, #7
 8014a14:	f103 0208 	add.w	r2, r3, #8
 8014a18:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014a1c:	f8d4 b000 	ldr.w	fp, [r4]
 8014a20:	f8c8 2000 	str.w	r2, [r8]
 8014a24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014a28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014a2c:	9307      	str	r3, [sp, #28]
 8014a2e:	f8cd 8018 	str.w	r8, [sp, #24]
 8014a32:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8014a36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014a3a:	4b9c      	ldr	r3, [pc, #624]	@ (8014cac <_printf_float+0x2c8>)
 8014a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8014a40:	f7ec f8f4 	bl	8000c2c <__aeabi_dcmpun>
 8014a44:	bb70      	cbnz	r0, 8014aa4 <_printf_float+0xc0>
 8014a46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014a4a:	4b98      	ldr	r3, [pc, #608]	@ (8014cac <_printf_float+0x2c8>)
 8014a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8014a50:	f7ec f8ce 	bl	8000bf0 <__aeabi_dcmple>
 8014a54:	bb30      	cbnz	r0, 8014aa4 <_printf_float+0xc0>
 8014a56:	2200      	movs	r2, #0
 8014a58:	2300      	movs	r3, #0
 8014a5a:	4640      	mov	r0, r8
 8014a5c:	4649      	mov	r1, r9
 8014a5e:	f7ec f8bd 	bl	8000bdc <__aeabi_dcmplt>
 8014a62:	b110      	cbz	r0, 8014a6a <_printf_float+0x86>
 8014a64:	232d      	movs	r3, #45	@ 0x2d
 8014a66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014a6a:	4a91      	ldr	r2, [pc, #580]	@ (8014cb0 <_printf_float+0x2cc>)
 8014a6c:	4b91      	ldr	r3, [pc, #580]	@ (8014cb4 <_printf_float+0x2d0>)
 8014a6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014a72:	bf94      	ite	ls
 8014a74:	4690      	movls	r8, r2
 8014a76:	4698      	movhi	r8, r3
 8014a78:	2303      	movs	r3, #3
 8014a7a:	6123      	str	r3, [r4, #16]
 8014a7c:	f02b 0304 	bic.w	r3, fp, #4
 8014a80:	6023      	str	r3, [r4, #0]
 8014a82:	f04f 0900 	mov.w	r9, #0
 8014a86:	9700      	str	r7, [sp, #0]
 8014a88:	4633      	mov	r3, r6
 8014a8a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014a8c:	4621      	mov	r1, r4
 8014a8e:	4628      	mov	r0, r5
 8014a90:	f000 f9d2 	bl	8014e38 <_printf_common>
 8014a94:	3001      	adds	r0, #1
 8014a96:	f040 808d 	bne.w	8014bb4 <_printf_float+0x1d0>
 8014a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8014a9e:	b00d      	add	sp, #52	@ 0x34
 8014aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aa4:	4642      	mov	r2, r8
 8014aa6:	464b      	mov	r3, r9
 8014aa8:	4640      	mov	r0, r8
 8014aaa:	4649      	mov	r1, r9
 8014aac:	f7ec f8be 	bl	8000c2c <__aeabi_dcmpun>
 8014ab0:	b140      	cbz	r0, 8014ac4 <_printf_float+0xe0>
 8014ab2:	464b      	mov	r3, r9
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	bfbc      	itt	lt
 8014ab8:	232d      	movlt	r3, #45	@ 0x2d
 8014aba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014abe:	4a7e      	ldr	r2, [pc, #504]	@ (8014cb8 <_printf_float+0x2d4>)
 8014ac0:	4b7e      	ldr	r3, [pc, #504]	@ (8014cbc <_printf_float+0x2d8>)
 8014ac2:	e7d4      	b.n	8014a6e <_printf_float+0x8a>
 8014ac4:	6863      	ldr	r3, [r4, #4]
 8014ac6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8014aca:	9206      	str	r2, [sp, #24]
 8014acc:	1c5a      	adds	r2, r3, #1
 8014ace:	d13b      	bne.n	8014b48 <_printf_float+0x164>
 8014ad0:	2306      	movs	r3, #6
 8014ad2:	6063      	str	r3, [r4, #4]
 8014ad4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8014ad8:	2300      	movs	r3, #0
 8014ada:	6022      	str	r2, [r4, #0]
 8014adc:	9303      	str	r3, [sp, #12]
 8014ade:	ab0a      	add	r3, sp, #40	@ 0x28
 8014ae0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014ae4:	ab09      	add	r3, sp, #36	@ 0x24
 8014ae6:	9300      	str	r3, [sp, #0]
 8014ae8:	6861      	ldr	r1, [r4, #4]
 8014aea:	ec49 8b10 	vmov	d0, r8, r9
 8014aee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014af2:	4628      	mov	r0, r5
 8014af4:	f7ff fed6 	bl	80148a4 <__cvt>
 8014af8:	9b06      	ldr	r3, [sp, #24]
 8014afa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014afc:	2b47      	cmp	r3, #71	@ 0x47
 8014afe:	4680      	mov	r8, r0
 8014b00:	d129      	bne.n	8014b56 <_printf_float+0x172>
 8014b02:	1cc8      	adds	r0, r1, #3
 8014b04:	db02      	blt.n	8014b0c <_printf_float+0x128>
 8014b06:	6863      	ldr	r3, [r4, #4]
 8014b08:	4299      	cmp	r1, r3
 8014b0a:	dd41      	ble.n	8014b90 <_printf_float+0x1ac>
 8014b0c:	f1aa 0a02 	sub.w	sl, sl, #2
 8014b10:	fa5f fa8a 	uxtb.w	sl, sl
 8014b14:	3901      	subs	r1, #1
 8014b16:	4652      	mov	r2, sl
 8014b18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014b1c:	9109      	str	r1, [sp, #36]	@ 0x24
 8014b1e:	f7ff ff26 	bl	801496e <__exponent>
 8014b22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014b24:	1813      	adds	r3, r2, r0
 8014b26:	2a01      	cmp	r2, #1
 8014b28:	4681      	mov	r9, r0
 8014b2a:	6123      	str	r3, [r4, #16]
 8014b2c:	dc02      	bgt.n	8014b34 <_printf_float+0x150>
 8014b2e:	6822      	ldr	r2, [r4, #0]
 8014b30:	07d2      	lsls	r2, r2, #31
 8014b32:	d501      	bpl.n	8014b38 <_printf_float+0x154>
 8014b34:	3301      	adds	r3, #1
 8014b36:	6123      	str	r3, [r4, #16]
 8014b38:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d0a2      	beq.n	8014a86 <_printf_float+0xa2>
 8014b40:	232d      	movs	r3, #45	@ 0x2d
 8014b42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014b46:	e79e      	b.n	8014a86 <_printf_float+0xa2>
 8014b48:	9a06      	ldr	r2, [sp, #24]
 8014b4a:	2a47      	cmp	r2, #71	@ 0x47
 8014b4c:	d1c2      	bne.n	8014ad4 <_printf_float+0xf0>
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d1c0      	bne.n	8014ad4 <_printf_float+0xf0>
 8014b52:	2301      	movs	r3, #1
 8014b54:	e7bd      	b.n	8014ad2 <_printf_float+0xee>
 8014b56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014b5a:	d9db      	bls.n	8014b14 <_printf_float+0x130>
 8014b5c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8014b60:	d118      	bne.n	8014b94 <_printf_float+0x1b0>
 8014b62:	2900      	cmp	r1, #0
 8014b64:	6863      	ldr	r3, [r4, #4]
 8014b66:	dd0b      	ble.n	8014b80 <_printf_float+0x19c>
 8014b68:	6121      	str	r1, [r4, #16]
 8014b6a:	b913      	cbnz	r3, 8014b72 <_printf_float+0x18e>
 8014b6c:	6822      	ldr	r2, [r4, #0]
 8014b6e:	07d0      	lsls	r0, r2, #31
 8014b70:	d502      	bpl.n	8014b78 <_printf_float+0x194>
 8014b72:	3301      	adds	r3, #1
 8014b74:	440b      	add	r3, r1
 8014b76:	6123      	str	r3, [r4, #16]
 8014b78:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014b7a:	f04f 0900 	mov.w	r9, #0
 8014b7e:	e7db      	b.n	8014b38 <_printf_float+0x154>
 8014b80:	b913      	cbnz	r3, 8014b88 <_printf_float+0x1a4>
 8014b82:	6822      	ldr	r2, [r4, #0]
 8014b84:	07d2      	lsls	r2, r2, #31
 8014b86:	d501      	bpl.n	8014b8c <_printf_float+0x1a8>
 8014b88:	3302      	adds	r3, #2
 8014b8a:	e7f4      	b.n	8014b76 <_printf_float+0x192>
 8014b8c:	2301      	movs	r3, #1
 8014b8e:	e7f2      	b.n	8014b76 <_printf_float+0x192>
 8014b90:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014b96:	4299      	cmp	r1, r3
 8014b98:	db05      	blt.n	8014ba6 <_printf_float+0x1c2>
 8014b9a:	6823      	ldr	r3, [r4, #0]
 8014b9c:	6121      	str	r1, [r4, #16]
 8014b9e:	07d8      	lsls	r0, r3, #31
 8014ba0:	d5ea      	bpl.n	8014b78 <_printf_float+0x194>
 8014ba2:	1c4b      	adds	r3, r1, #1
 8014ba4:	e7e7      	b.n	8014b76 <_printf_float+0x192>
 8014ba6:	2900      	cmp	r1, #0
 8014ba8:	bfd4      	ite	le
 8014baa:	f1c1 0202 	rsble	r2, r1, #2
 8014bae:	2201      	movgt	r2, #1
 8014bb0:	4413      	add	r3, r2
 8014bb2:	e7e0      	b.n	8014b76 <_printf_float+0x192>
 8014bb4:	6823      	ldr	r3, [r4, #0]
 8014bb6:	055a      	lsls	r2, r3, #21
 8014bb8:	d407      	bmi.n	8014bca <_printf_float+0x1e6>
 8014bba:	6923      	ldr	r3, [r4, #16]
 8014bbc:	4642      	mov	r2, r8
 8014bbe:	4631      	mov	r1, r6
 8014bc0:	4628      	mov	r0, r5
 8014bc2:	47b8      	blx	r7
 8014bc4:	3001      	adds	r0, #1
 8014bc6:	d12b      	bne.n	8014c20 <_printf_float+0x23c>
 8014bc8:	e767      	b.n	8014a9a <_printf_float+0xb6>
 8014bca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014bce:	f240 80dd 	bls.w	8014d8c <_printf_float+0x3a8>
 8014bd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	2300      	movs	r3, #0
 8014bda:	f7eb fff5 	bl	8000bc8 <__aeabi_dcmpeq>
 8014bde:	2800      	cmp	r0, #0
 8014be0:	d033      	beq.n	8014c4a <_printf_float+0x266>
 8014be2:	4a37      	ldr	r2, [pc, #220]	@ (8014cc0 <_printf_float+0x2dc>)
 8014be4:	2301      	movs	r3, #1
 8014be6:	4631      	mov	r1, r6
 8014be8:	4628      	mov	r0, r5
 8014bea:	47b8      	blx	r7
 8014bec:	3001      	adds	r0, #1
 8014bee:	f43f af54 	beq.w	8014a9a <_printf_float+0xb6>
 8014bf2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014bf6:	4543      	cmp	r3, r8
 8014bf8:	db02      	blt.n	8014c00 <_printf_float+0x21c>
 8014bfa:	6823      	ldr	r3, [r4, #0]
 8014bfc:	07d8      	lsls	r0, r3, #31
 8014bfe:	d50f      	bpl.n	8014c20 <_printf_float+0x23c>
 8014c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c04:	4631      	mov	r1, r6
 8014c06:	4628      	mov	r0, r5
 8014c08:	47b8      	blx	r7
 8014c0a:	3001      	adds	r0, #1
 8014c0c:	f43f af45 	beq.w	8014a9a <_printf_float+0xb6>
 8014c10:	f04f 0900 	mov.w	r9, #0
 8014c14:	f108 38ff 	add.w	r8, r8, #4294967295
 8014c18:	f104 0a1a 	add.w	sl, r4, #26
 8014c1c:	45c8      	cmp	r8, r9
 8014c1e:	dc09      	bgt.n	8014c34 <_printf_float+0x250>
 8014c20:	6823      	ldr	r3, [r4, #0]
 8014c22:	079b      	lsls	r3, r3, #30
 8014c24:	f100 8103 	bmi.w	8014e2e <_printf_float+0x44a>
 8014c28:	68e0      	ldr	r0, [r4, #12]
 8014c2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014c2c:	4298      	cmp	r0, r3
 8014c2e:	bfb8      	it	lt
 8014c30:	4618      	movlt	r0, r3
 8014c32:	e734      	b.n	8014a9e <_printf_float+0xba>
 8014c34:	2301      	movs	r3, #1
 8014c36:	4652      	mov	r2, sl
 8014c38:	4631      	mov	r1, r6
 8014c3a:	4628      	mov	r0, r5
 8014c3c:	47b8      	blx	r7
 8014c3e:	3001      	adds	r0, #1
 8014c40:	f43f af2b 	beq.w	8014a9a <_printf_float+0xb6>
 8014c44:	f109 0901 	add.w	r9, r9, #1
 8014c48:	e7e8      	b.n	8014c1c <_printf_float+0x238>
 8014c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	dc39      	bgt.n	8014cc4 <_printf_float+0x2e0>
 8014c50:	4a1b      	ldr	r2, [pc, #108]	@ (8014cc0 <_printf_float+0x2dc>)
 8014c52:	2301      	movs	r3, #1
 8014c54:	4631      	mov	r1, r6
 8014c56:	4628      	mov	r0, r5
 8014c58:	47b8      	blx	r7
 8014c5a:	3001      	adds	r0, #1
 8014c5c:	f43f af1d 	beq.w	8014a9a <_printf_float+0xb6>
 8014c60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014c64:	ea59 0303 	orrs.w	r3, r9, r3
 8014c68:	d102      	bne.n	8014c70 <_printf_float+0x28c>
 8014c6a:	6823      	ldr	r3, [r4, #0]
 8014c6c:	07d9      	lsls	r1, r3, #31
 8014c6e:	d5d7      	bpl.n	8014c20 <_printf_float+0x23c>
 8014c70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c74:	4631      	mov	r1, r6
 8014c76:	4628      	mov	r0, r5
 8014c78:	47b8      	blx	r7
 8014c7a:	3001      	adds	r0, #1
 8014c7c:	f43f af0d 	beq.w	8014a9a <_printf_float+0xb6>
 8014c80:	f04f 0a00 	mov.w	sl, #0
 8014c84:	f104 0b1a 	add.w	fp, r4, #26
 8014c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c8a:	425b      	negs	r3, r3
 8014c8c:	4553      	cmp	r3, sl
 8014c8e:	dc01      	bgt.n	8014c94 <_printf_float+0x2b0>
 8014c90:	464b      	mov	r3, r9
 8014c92:	e793      	b.n	8014bbc <_printf_float+0x1d8>
 8014c94:	2301      	movs	r3, #1
 8014c96:	465a      	mov	r2, fp
 8014c98:	4631      	mov	r1, r6
 8014c9a:	4628      	mov	r0, r5
 8014c9c:	47b8      	blx	r7
 8014c9e:	3001      	adds	r0, #1
 8014ca0:	f43f aefb 	beq.w	8014a9a <_printf_float+0xb6>
 8014ca4:	f10a 0a01 	add.w	sl, sl, #1
 8014ca8:	e7ee      	b.n	8014c88 <_printf_float+0x2a4>
 8014caa:	bf00      	nop
 8014cac:	7fefffff 	.word	0x7fefffff
 8014cb0:	080d57d0 	.word	0x080d57d0
 8014cb4:	080d57d4 	.word	0x080d57d4
 8014cb8:	080d57d8 	.word	0x080d57d8
 8014cbc:	080d57dc 	.word	0x080d57dc
 8014cc0:	080d57e0 	.word	0x080d57e0
 8014cc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014cc6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014cca:	4553      	cmp	r3, sl
 8014ccc:	bfa8      	it	ge
 8014cce:	4653      	movge	r3, sl
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	4699      	mov	r9, r3
 8014cd4:	dc36      	bgt.n	8014d44 <_printf_float+0x360>
 8014cd6:	f04f 0b00 	mov.w	fp, #0
 8014cda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014cde:	f104 021a 	add.w	r2, r4, #26
 8014ce2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014ce4:	9306      	str	r3, [sp, #24]
 8014ce6:	eba3 0309 	sub.w	r3, r3, r9
 8014cea:	455b      	cmp	r3, fp
 8014cec:	dc31      	bgt.n	8014d52 <_printf_float+0x36e>
 8014cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014cf0:	459a      	cmp	sl, r3
 8014cf2:	dc3a      	bgt.n	8014d6a <_printf_float+0x386>
 8014cf4:	6823      	ldr	r3, [r4, #0]
 8014cf6:	07da      	lsls	r2, r3, #31
 8014cf8:	d437      	bmi.n	8014d6a <_printf_float+0x386>
 8014cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014cfc:	ebaa 0903 	sub.w	r9, sl, r3
 8014d00:	9b06      	ldr	r3, [sp, #24]
 8014d02:	ebaa 0303 	sub.w	r3, sl, r3
 8014d06:	4599      	cmp	r9, r3
 8014d08:	bfa8      	it	ge
 8014d0a:	4699      	movge	r9, r3
 8014d0c:	f1b9 0f00 	cmp.w	r9, #0
 8014d10:	dc33      	bgt.n	8014d7a <_printf_float+0x396>
 8014d12:	f04f 0800 	mov.w	r8, #0
 8014d16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014d1a:	f104 0b1a 	add.w	fp, r4, #26
 8014d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d20:	ebaa 0303 	sub.w	r3, sl, r3
 8014d24:	eba3 0309 	sub.w	r3, r3, r9
 8014d28:	4543      	cmp	r3, r8
 8014d2a:	f77f af79 	ble.w	8014c20 <_printf_float+0x23c>
 8014d2e:	2301      	movs	r3, #1
 8014d30:	465a      	mov	r2, fp
 8014d32:	4631      	mov	r1, r6
 8014d34:	4628      	mov	r0, r5
 8014d36:	47b8      	blx	r7
 8014d38:	3001      	adds	r0, #1
 8014d3a:	f43f aeae 	beq.w	8014a9a <_printf_float+0xb6>
 8014d3e:	f108 0801 	add.w	r8, r8, #1
 8014d42:	e7ec      	b.n	8014d1e <_printf_float+0x33a>
 8014d44:	4642      	mov	r2, r8
 8014d46:	4631      	mov	r1, r6
 8014d48:	4628      	mov	r0, r5
 8014d4a:	47b8      	blx	r7
 8014d4c:	3001      	adds	r0, #1
 8014d4e:	d1c2      	bne.n	8014cd6 <_printf_float+0x2f2>
 8014d50:	e6a3      	b.n	8014a9a <_printf_float+0xb6>
 8014d52:	2301      	movs	r3, #1
 8014d54:	4631      	mov	r1, r6
 8014d56:	4628      	mov	r0, r5
 8014d58:	9206      	str	r2, [sp, #24]
 8014d5a:	47b8      	blx	r7
 8014d5c:	3001      	adds	r0, #1
 8014d5e:	f43f ae9c 	beq.w	8014a9a <_printf_float+0xb6>
 8014d62:	9a06      	ldr	r2, [sp, #24]
 8014d64:	f10b 0b01 	add.w	fp, fp, #1
 8014d68:	e7bb      	b.n	8014ce2 <_printf_float+0x2fe>
 8014d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d6e:	4631      	mov	r1, r6
 8014d70:	4628      	mov	r0, r5
 8014d72:	47b8      	blx	r7
 8014d74:	3001      	adds	r0, #1
 8014d76:	d1c0      	bne.n	8014cfa <_printf_float+0x316>
 8014d78:	e68f      	b.n	8014a9a <_printf_float+0xb6>
 8014d7a:	9a06      	ldr	r2, [sp, #24]
 8014d7c:	464b      	mov	r3, r9
 8014d7e:	4442      	add	r2, r8
 8014d80:	4631      	mov	r1, r6
 8014d82:	4628      	mov	r0, r5
 8014d84:	47b8      	blx	r7
 8014d86:	3001      	adds	r0, #1
 8014d88:	d1c3      	bne.n	8014d12 <_printf_float+0x32e>
 8014d8a:	e686      	b.n	8014a9a <_printf_float+0xb6>
 8014d8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014d90:	f1ba 0f01 	cmp.w	sl, #1
 8014d94:	dc01      	bgt.n	8014d9a <_printf_float+0x3b6>
 8014d96:	07db      	lsls	r3, r3, #31
 8014d98:	d536      	bpl.n	8014e08 <_printf_float+0x424>
 8014d9a:	2301      	movs	r3, #1
 8014d9c:	4642      	mov	r2, r8
 8014d9e:	4631      	mov	r1, r6
 8014da0:	4628      	mov	r0, r5
 8014da2:	47b8      	blx	r7
 8014da4:	3001      	adds	r0, #1
 8014da6:	f43f ae78 	beq.w	8014a9a <_printf_float+0xb6>
 8014daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014dae:	4631      	mov	r1, r6
 8014db0:	4628      	mov	r0, r5
 8014db2:	47b8      	blx	r7
 8014db4:	3001      	adds	r0, #1
 8014db6:	f43f ae70 	beq.w	8014a9a <_printf_float+0xb6>
 8014dba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014dc6:	f7eb feff 	bl	8000bc8 <__aeabi_dcmpeq>
 8014dca:	b9c0      	cbnz	r0, 8014dfe <_printf_float+0x41a>
 8014dcc:	4653      	mov	r3, sl
 8014dce:	f108 0201 	add.w	r2, r8, #1
 8014dd2:	4631      	mov	r1, r6
 8014dd4:	4628      	mov	r0, r5
 8014dd6:	47b8      	blx	r7
 8014dd8:	3001      	adds	r0, #1
 8014dda:	d10c      	bne.n	8014df6 <_printf_float+0x412>
 8014ddc:	e65d      	b.n	8014a9a <_printf_float+0xb6>
 8014dde:	2301      	movs	r3, #1
 8014de0:	465a      	mov	r2, fp
 8014de2:	4631      	mov	r1, r6
 8014de4:	4628      	mov	r0, r5
 8014de6:	47b8      	blx	r7
 8014de8:	3001      	adds	r0, #1
 8014dea:	f43f ae56 	beq.w	8014a9a <_printf_float+0xb6>
 8014dee:	f108 0801 	add.w	r8, r8, #1
 8014df2:	45d0      	cmp	r8, sl
 8014df4:	dbf3      	blt.n	8014dde <_printf_float+0x3fa>
 8014df6:	464b      	mov	r3, r9
 8014df8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014dfc:	e6df      	b.n	8014bbe <_printf_float+0x1da>
 8014dfe:	f04f 0800 	mov.w	r8, #0
 8014e02:	f104 0b1a 	add.w	fp, r4, #26
 8014e06:	e7f4      	b.n	8014df2 <_printf_float+0x40e>
 8014e08:	2301      	movs	r3, #1
 8014e0a:	4642      	mov	r2, r8
 8014e0c:	e7e1      	b.n	8014dd2 <_printf_float+0x3ee>
 8014e0e:	2301      	movs	r3, #1
 8014e10:	464a      	mov	r2, r9
 8014e12:	4631      	mov	r1, r6
 8014e14:	4628      	mov	r0, r5
 8014e16:	47b8      	blx	r7
 8014e18:	3001      	adds	r0, #1
 8014e1a:	f43f ae3e 	beq.w	8014a9a <_printf_float+0xb6>
 8014e1e:	f108 0801 	add.w	r8, r8, #1
 8014e22:	68e3      	ldr	r3, [r4, #12]
 8014e24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014e26:	1a5b      	subs	r3, r3, r1
 8014e28:	4543      	cmp	r3, r8
 8014e2a:	dcf0      	bgt.n	8014e0e <_printf_float+0x42a>
 8014e2c:	e6fc      	b.n	8014c28 <_printf_float+0x244>
 8014e2e:	f04f 0800 	mov.w	r8, #0
 8014e32:	f104 0919 	add.w	r9, r4, #25
 8014e36:	e7f4      	b.n	8014e22 <_printf_float+0x43e>

08014e38 <_printf_common>:
 8014e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e3c:	4616      	mov	r6, r2
 8014e3e:	4698      	mov	r8, r3
 8014e40:	688a      	ldr	r2, [r1, #8]
 8014e42:	690b      	ldr	r3, [r1, #16]
 8014e44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014e48:	4293      	cmp	r3, r2
 8014e4a:	bfb8      	it	lt
 8014e4c:	4613      	movlt	r3, r2
 8014e4e:	6033      	str	r3, [r6, #0]
 8014e50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014e54:	4607      	mov	r7, r0
 8014e56:	460c      	mov	r4, r1
 8014e58:	b10a      	cbz	r2, 8014e5e <_printf_common+0x26>
 8014e5a:	3301      	adds	r3, #1
 8014e5c:	6033      	str	r3, [r6, #0]
 8014e5e:	6823      	ldr	r3, [r4, #0]
 8014e60:	0699      	lsls	r1, r3, #26
 8014e62:	bf42      	ittt	mi
 8014e64:	6833      	ldrmi	r3, [r6, #0]
 8014e66:	3302      	addmi	r3, #2
 8014e68:	6033      	strmi	r3, [r6, #0]
 8014e6a:	6825      	ldr	r5, [r4, #0]
 8014e6c:	f015 0506 	ands.w	r5, r5, #6
 8014e70:	d106      	bne.n	8014e80 <_printf_common+0x48>
 8014e72:	f104 0a19 	add.w	sl, r4, #25
 8014e76:	68e3      	ldr	r3, [r4, #12]
 8014e78:	6832      	ldr	r2, [r6, #0]
 8014e7a:	1a9b      	subs	r3, r3, r2
 8014e7c:	42ab      	cmp	r3, r5
 8014e7e:	dc26      	bgt.n	8014ece <_printf_common+0x96>
 8014e80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014e84:	6822      	ldr	r2, [r4, #0]
 8014e86:	3b00      	subs	r3, #0
 8014e88:	bf18      	it	ne
 8014e8a:	2301      	movne	r3, #1
 8014e8c:	0692      	lsls	r2, r2, #26
 8014e8e:	d42b      	bmi.n	8014ee8 <_printf_common+0xb0>
 8014e90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014e94:	4641      	mov	r1, r8
 8014e96:	4638      	mov	r0, r7
 8014e98:	47c8      	blx	r9
 8014e9a:	3001      	adds	r0, #1
 8014e9c:	d01e      	beq.n	8014edc <_printf_common+0xa4>
 8014e9e:	6823      	ldr	r3, [r4, #0]
 8014ea0:	6922      	ldr	r2, [r4, #16]
 8014ea2:	f003 0306 	and.w	r3, r3, #6
 8014ea6:	2b04      	cmp	r3, #4
 8014ea8:	bf02      	ittt	eq
 8014eaa:	68e5      	ldreq	r5, [r4, #12]
 8014eac:	6833      	ldreq	r3, [r6, #0]
 8014eae:	1aed      	subeq	r5, r5, r3
 8014eb0:	68a3      	ldr	r3, [r4, #8]
 8014eb2:	bf0c      	ite	eq
 8014eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014eb8:	2500      	movne	r5, #0
 8014eba:	4293      	cmp	r3, r2
 8014ebc:	bfc4      	itt	gt
 8014ebe:	1a9b      	subgt	r3, r3, r2
 8014ec0:	18ed      	addgt	r5, r5, r3
 8014ec2:	2600      	movs	r6, #0
 8014ec4:	341a      	adds	r4, #26
 8014ec6:	42b5      	cmp	r5, r6
 8014ec8:	d11a      	bne.n	8014f00 <_printf_common+0xc8>
 8014eca:	2000      	movs	r0, #0
 8014ecc:	e008      	b.n	8014ee0 <_printf_common+0xa8>
 8014ece:	2301      	movs	r3, #1
 8014ed0:	4652      	mov	r2, sl
 8014ed2:	4641      	mov	r1, r8
 8014ed4:	4638      	mov	r0, r7
 8014ed6:	47c8      	blx	r9
 8014ed8:	3001      	adds	r0, #1
 8014eda:	d103      	bne.n	8014ee4 <_printf_common+0xac>
 8014edc:	f04f 30ff 	mov.w	r0, #4294967295
 8014ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ee4:	3501      	adds	r5, #1
 8014ee6:	e7c6      	b.n	8014e76 <_printf_common+0x3e>
 8014ee8:	18e1      	adds	r1, r4, r3
 8014eea:	1c5a      	adds	r2, r3, #1
 8014eec:	2030      	movs	r0, #48	@ 0x30
 8014eee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014ef2:	4422      	add	r2, r4
 8014ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014ef8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014efc:	3302      	adds	r3, #2
 8014efe:	e7c7      	b.n	8014e90 <_printf_common+0x58>
 8014f00:	2301      	movs	r3, #1
 8014f02:	4622      	mov	r2, r4
 8014f04:	4641      	mov	r1, r8
 8014f06:	4638      	mov	r0, r7
 8014f08:	47c8      	blx	r9
 8014f0a:	3001      	adds	r0, #1
 8014f0c:	d0e6      	beq.n	8014edc <_printf_common+0xa4>
 8014f0e:	3601      	adds	r6, #1
 8014f10:	e7d9      	b.n	8014ec6 <_printf_common+0x8e>
	...

08014f14 <_printf_i>:
 8014f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014f18:	7e0f      	ldrb	r7, [r1, #24]
 8014f1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014f1c:	2f78      	cmp	r7, #120	@ 0x78
 8014f1e:	4691      	mov	r9, r2
 8014f20:	4680      	mov	r8, r0
 8014f22:	460c      	mov	r4, r1
 8014f24:	469a      	mov	sl, r3
 8014f26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014f2a:	d807      	bhi.n	8014f3c <_printf_i+0x28>
 8014f2c:	2f62      	cmp	r7, #98	@ 0x62
 8014f2e:	d80a      	bhi.n	8014f46 <_printf_i+0x32>
 8014f30:	2f00      	cmp	r7, #0
 8014f32:	f000 80d2 	beq.w	80150da <_printf_i+0x1c6>
 8014f36:	2f58      	cmp	r7, #88	@ 0x58
 8014f38:	f000 80b9 	beq.w	80150ae <_printf_i+0x19a>
 8014f3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014f40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014f44:	e03a      	b.n	8014fbc <_printf_i+0xa8>
 8014f46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014f4a:	2b15      	cmp	r3, #21
 8014f4c:	d8f6      	bhi.n	8014f3c <_printf_i+0x28>
 8014f4e:	a101      	add	r1, pc, #4	@ (adr r1, 8014f54 <_printf_i+0x40>)
 8014f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014f54:	08014fad 	.word	0x08014fad
 8014f58:	08014fc1 	.word	0x08014fc1
 8014f5c:	08014f3d 	.word	0x08014f3d
 8014f60:	08014f3d 	.word	0x08014f3d
 8014f64:	08014f3d 	.word	0x08014f3d
 8014f68:	08014f3d 	.word	0x08014f3d
 8014f6c:	08014fc1 	.word	0x08014fc1
 8014f70:	08014f3d 	.word	0x08014f3d
 8014f74:	08014f3d 	.word	0x08014f3d
 8014f78:	08014f3d 	.word	0x08014f3d
 8014f7c:	08014f3d 	.word	0x08014f3d
 8014f80:	080150c1 	.word	0x080150c1
 8014f84:	08014feb 	.word	0x08014feb
 8014f88:	0801507b 	.word	0x0801507b
 8014f8c:	08014f3d 	.word	0x08014f3d
 8014f90:	08014f3d 	.word	0x08014f3d
 8014f94:	080150e3 	.word	0x080150e3
 8014f98:	08014f3d 	.word	0x08014f3d
 8014f9c:	08014feb 	.word	0x08014feb
 8014fa0:	08014f3d 	.word	0x08014f3d
 8014fa4:	08014f3d 	.word	0x08014f3d
 8014fa8:	08015083 	.word	0x08015083
 8014fac:	6833      	ldr	r3, [r6, #0]
 8014fae:	1d1a      	adds	r2, r3, #4
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	6032      	str	r2, [r6, #0]
 8014fb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014fb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014fbc:	2301      	movs	r3, #1
 8014fbe:	e09d      	b.n	80150fc <_printf_i+0x1e8>
 8014fc0:	6833      	ldr	r3, [r6, #0]
 8014fc2:	6820      	ldr	r0, [r4, #0]
 8014fc4:	1d19      	adds	r1, r3, #4
 8014fc6:	6031      	str	r1, [r6, #0]
 8014fc8:	0606      	lsls	r6, r0, #24
 8014fca:	d501      	bpl.n	8014fd0 <_printf_i+0xbc>
 8014fcc:	681d      	ldr	r5, [r3, #0]
 8014fce:	e003      	b.n	8014fd8 <_printf_i+0xc4>
 8014fd0:	0645      	lsls	r5, r0, #25
 8014fd2:	d5fb      	bpl.n	8014fcc <_printf_i+0xb8>
 8014fd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014fd8:	2d00      	cmp	r5, #0
 8014fda:	da03      	bge.n	8014fe4 <_printf_i+0xd0>
 8014fdc:	232d      	movs	r3, #45	@ 0x2d
 8014fde:	426d      	negs	r5, r5
 8014fe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014fe4:	4859      	ldr	r0, [pc, #356]	@ (801514c <_printf_i+0x238>)
 8014fe6:	230a      	movs	r3, #10
 8014fe8:	e011      	b.n	801500e <_printf_i+0xfa>
 8014fea:	6821      	ldr	r1, [r4, #0]
 8014fec:	6833      	ldr	r3, [r6, #0]
 8014fee:	0608      	lsls	r0, r1, #24
 8014ff0:	f853 5b04 	ldr.w	r5, [r3], #4
 8014ff4:	d402      	bmi.n	8014ffc <_printf_i+0xe8>
 8014ff6:	0649      	lsls	r1, r1, #25
 8014ff8:	bf48      	it	mi
 8014ffa:	b2ad      	uxthmi	r5, r5
 8014ffc:	2f6f      	cmp	r7, #111	@ 0x6f
 8014ffe:	4853      	ldr	r0, [pc, #332]	@ (801514c <_printf_i+0x238>)
 8015000:	6033      	str	r3, [r6, #0]
 8015002:	bf14      	ite	ne
 8015004:	230a      	movne	r3, #10
 8015006:	2308      	moveq	r3, #8
 8015008:	2100      	movs	r1, #0
 801500a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801500e:	6866      	ldr	r6, [r4, #4]
 8015010:	60a6      	str	r6, [r4, #8]
 8015012:	2e00      	cmp	r6, #0
 8015014:	bfa2      	ittt	ge
 8015016:	6821      	ldrge	r1, [r4, #0]
 8015018:	f021 0104 	bicge.w	r1, r1, #4
 801501c:	6021      	strge	r1, [r4, #0]
 801501e:	b90d      	cbnz	r5, 8015024 <_printf_i+0x110>
 8015020:	2e00      	cmp	r6, #0
 8015022:	d04b      	beq.n	80150bc <_printf_i+0x1a8>
 8015024:	4616      	mov	r6, r2
 8015026:	fbb5 f1f3 	udiv	r1, r5, r3
 801502a:	fb03 5711 	mls	r7, r3, r1, r5
 801502e:	5dc7      	ldrb	r7, [r0, r7]
 8015030:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015034:	462f      	mov	r7, r5
 8015036:	42bb      	cmp	r3, r7
 8015038:	460d      	mov	r5, r1
 801503a:	d9f4      	bls.n	8015026 <_printf_i+0x112>
 801503c:	2b08      	cmp	r3, #8
 801503e:	d10b      	bne.n	8015058 <_printf_i+0x144>
 8015040:	6823      	ldr	r3, [r4, #0]
 8015042:	07df      	lsls	r7, r3, #31
 8015044:	d508      	bpl.n	8015058 <_printf_i+0x144>
 8015046:	6923      	ldr	r3, [r4, #16]
 8015048:	6861      	ldr	r1, [r4, #4]
 801504a:	4299      	cmp	r1, r3
 801504c:	bfde      	ittt	le
 801504e:	2330      	movle	r3, #48	@ 0x30
 8015050:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015054:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015058:	1b92      	subs	r2, r2, r6
 801505a:	6122      	str	r2, [r4, #16]
 801505c:	f8cd a000 	str.w	sl, [sp]
 8015060:	464b      	mov	r3, r9
 8015062:	aa03      	add	r2, sp, #12
 8015064:	4621      	mov	r1, r4
 8015066:	4640      	mov	r0, r8
 8015068:	f7ff fee6 	bl	8014e38 <_printf_common>
 801506c:	3001      	adds	r0, #1
 801506e:	d14a      	bne.n	8015106 <_printf_i+0x1f2>
 8015070:	f04f 30ff 	mov.w	r0, #4294967295
 8015074:	b004      	add	sp, #16
 8015076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801507a:	6823      	ldr	r3, [r4, #0]
 801507c:	f043 0320 	orr.w	r3, r3, #32
 8015080:	6023      	str	r3, [r4, #0]
 8015082:	4833      	ldr	r0, [pc, #204]	@ (8015150 <_printf_i+0x23c>)
 8015084:	2778      	movs	r7, #120	@ 0x78
 8015086:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801508a:	6823      	ldr	r3, [r4, #0]
 801508c:	6831      	ldr	r1, [r6, #0]
 801508e:	061f      	lsls	r7, r3, #24
 8015090:	f851 5b04 	ldr.w	r5, [r1], #4
 8015094:	d402      	bmi.n	801509c <_printf_i+0x188>
 8015096:	065f      	lsls	r7, r3, #25
 8015098:	bf48      	it	mi
 801509a:	b2ad      	uxthmi	r5, r5
 801509c:	6031      	str	r1, [r6, #0]
 801509e:	07d9      	lsls	r1, r3, #31
 80150a0:	bf44      	itt	mi
 80150a2:	f043 0320 	orrmi.w	r3, r3, #32
 80150a6:	6023      	strmi	r3, [r4, #0]
 80150a8:	b11d      	cbz	r5, 80150b2 <_printf_i+0x19e>
 80150aa:	2310      	movs	r3, #16
 80150ac:	e7ac      	b.n	8015008 <_printf_i+0xf4>
 80150ae:	4827      	ldr	r0, [pc, #156]	@ (801514c <_printf_i+0x238>)
 80150b0:	e7e9      	b.n	8015086 <_printf_i+0x172>
 80150b2:	6823      	ldr	r3, [r4, #0]
 80150b4:	f023 0320 	bic.w	r3, r3, #32
 80150b8:	6023      	str	r3, [r4, #0]
 80150ba:	e7f6      	b.n	80150aa <_printf_i+0x196>
 80150bc:	4616      	mov	r6, r2
 80150be:	e7bd      	b.n	801503c <_printf_i+0x128>
 80150c0:	6833      	ldr	r3, [r6, #0]
 80150c2:	6825      	ldr	r5, [r4, #0]
 80150c4:	6961      	ldr	r1, [r4, #20]
 80150c6:	1d18      	adds	r0, r3, #4
 80150c8:	6030      	str	r0, [r6, #0]
 80150ca:	062e      	lsls	r6, r5, #24
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	d501      	bpl.n	80150d4 <_printf_i+0x1c0>
 80150d0:	6019      	str	r1, [r3, #0]
 80150d2:	e002      	b.n	80150da <_printf_i+0x1c6>
 80150d4:	0668      	lsls	r0, r5, #25
 80150d6:	d5fb      	bpl.n	80150d0 <_printf_i+0x1bc>
 80150d8:	8019      	strh	r1, [r3, #0]
 80150da:	2300      	movs	r3, #0
 80150dc:	6123      	str	r3, [r4, #16]
 80150de:	4616      	mov	r6, r2
 80150e0:	e7bc      	b.n	801505c <_printf_i+0x148>
 80150e2:	6833      	ldr	r3, [r6, #0]
 80150e4:	1d1a      	adds	r2, r3, #4
 80150e6:	6032      	str	r2, [r6, #0]
 80150e8:	681e      	ldr	r6, [r3, #0]
 80150ea:	6862      	ldr	r2, [r4, #4]
 80150ec:	2100      	movs	r1, #0
 80150ee:	4630      	mov	r0, r6
 80150f0:	f7eb f8ee 	bl	80002d0 <memchr>
 80150f4:	b108      	cbz	r0, 80150fa <_printf_i+0x1e6>
 80150f6:	1b80      	subs	r0, r0, r6
 80150f8:	6060      	str	r0, [r4, #4]
 80150fa:	6863      	ldr	r3, [r4, #4]
 80150fc:	6123      	str	r3, [r4, #16]
 80150fe:	2300      	movs	r3, #0
 8015100:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015104:	e7aa      	b.n	801505c <_printf_i+0x148>
 8015106:	6923      	ldr	r3, [r4, #16]
 8015108:	4632      	mov	r2, r6
 801510a:	4649      	mov	r1, r9
 801510c:	4640      	mov	r0, r8
 801510e:	47d0      	blx	sl
 8015110:	3001      	adds	r0, #1
 8015112:	d0ad      	beq.n	8015070 <_printf_i+0x15c>
 8015114:	6823      	ldr	r3, [r4, #0]
 8015116:	079b      	lsls	r3, r3, #30
 8015118:	d413      	bmi.n	8015142 <_printf_i+0x22e>
 801511a:	68e0      	ldr	r0, [r4, #12]
 801511c:	9b03      	ldr	r3, [sp, #12]
 801511e:	4298      	cmp	r0, r3
 8015120:	bfb8      	it	lt
 8015122:	4618      	movlt	r0, r3
 8015124:	e7a6      	b.n	8015074 <_printf_i+0x160>
 8015126:	2301      	movs	r3, #1
 8015128:	4632      	mov	r2, r6
 801512a:	4649      	mov	r1, r9
 801512c:	4640      	mov	r0, r8
 801512e:	47d0      	blx	sl
 8015130:	3001      	adds	r0, #1
 8015132:	d09d      	beq.n	8015070 <_printf_i+0x15c>
 8015134:	3501      	adds	r5, #1
 8015136:	68e3      	ldr	r3, [r4, #12]
 8015138:	9903      	ldr	r1, [sp, #12]
 801513a:	1a5b      	subs	r3, r3, r1
 801513c:	42ab      	cmp	r3, r5
 801513e:	dcf2      	bgt.n	8015126 <_printf_i+0x212>
 8015140:	e7eb      	b.n	801511a <_printf_i+0x206>
 8015142:	2500      	movs	r5, #0
 8015144:	f104 0619 	add.w	r6, r4, #25
 8015148:	e7f5      	b.n	8015136 <_printf_i+0x222>
 801514a:	bf00      	nop
 801514c:	080d57e2 	.word	0x080d57e2
 8015150:	080d57f3 	.word	0x080d57f3

08015154 <std>:
 8015154:	2300      	movs	r3, #0
 8015156:	b510      	push	{r4, lr}
 8015158:	4604      	mov	r4, r0
 801515a:	e9c0 3300 	strd	r3, r3, [r0]
 801515e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015162:	6083      	str	r3, [r0, #8]
 8015164:	8181      	strh	r1, [r0, #12]
 8015166:	6643      	str	r3, [r0, #100]	@ 0x64
 8015168:	81c2      	strh	r2, [r0, #14]
 801516a:	6183      	str	r3, [r0, #24]
 801516c:	4619      	mov	r1, r3
 801516e:	2208      	movs	r2, #8
 8015170:	305c      	adds	r0, #92	@ 0x5c
 8015172:	f000 fa19 	bl	80155a8 <memset>
 8015176:	4b0d      	ldr	r3, [pc, #52]	@ (80151ac <std+0x58>)
 8015178:	6263      	str	r3, [r4, #36]	@ 0x24
 801517a:	4b0d      	ldr	r3, [pc, #52]	@ (80151b0 <std+0x5c>)
 801517c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801517e:	4b0d      	ldr	r3, [pc, #52]	@ (80151b4 <std+0x60>)
 8015180:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015182:	4b0d      	ldr	r3, [pc, #52]	@ (80151b8 <std+0x64>)
 8015184:	6323      	str	r3, [r4, #48]	@ 0x30
 8015186:	4b0d      	ldr	r3, [pc, #52]	@ (80151bc <std+0x68>)
 8015188:	6224      	str	r4, [r4, #32]
 801518a:	429c      	cmp	r4, r3
 801518c:	d006      	beq.n	801519c <std+0x48>
 801518e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015192:	4294      	cmp	r4, r2
 8015194:	d002      	beq.n	801519c <std+0x48>
 8015196:	33d0      	adds	r3, #208	@ 0xd0
 8015198:	429c      	cmp	r4, r3
 801519a:	d105      	bne.n	80151a8 <std+0x54>
 801519c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80151a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151a4:	f000 ba8c 	b.w	80156c0 <__retarget_lock_init_recursive>
 80151a8:	bd10      	pop	{r4, pc}
 80151aa:	bf00      	nop
 80151ac:	080153f9 	.word	0x080153f9
 80151b0:	0801541b 	.word	0x0801541b
 80151b4:	08015453 	.word	0x08015453
 80151b8:	08015477 	.word	0x08015477
 80151bc:	20036054 	.word	0x20036054

080151c0 <stdio_exit_handler>:
 80151c0:	4a02      	ldr	r2, [pc, #8]	@ (80151cc <stdio_exit_handler+0xc>)
 80151c2:	4903      	ldr	r1, [pc, #12]	@ (80151d0 <stdio_exit_handler+0x10>)
 80151c4:	4803      	ldr	r0, [pc, #12]	@ (80151d4 <stdio_exit_handler+0x14>)
 80151c6:	f000 b869 	b.w	801529c <_fwalk_sglue>
 80151ca:	bf00      	nop
 80151cc:	20000818 	.word	0x20000818
 80151d0:	08017165 	.word	0x08017165
 80151d4:	20000828 	.word	0x20000828

080151d8 <cleanup_stdio>:
 80151d8:	6841      	ldr	r1, [r0, #4]
 80151da:	4b0c      	ldr	r3, [pc, #48]	@ (801520c <cleanup_stdio+0x34>)
 80151dc:	4299      	cmp	r1, r3
 80151de:	b510      	push	{r4, lr}
 80151e0:	4604      	mov	r4, r0
 80151e2:	d001      	beq.n	80151e8 <cleanup_stdio+0x10>
 80151e4:	f001 ffbe 	bl	8017164 <_fflush_r>
 80151e8:	68a1      	ldr	r1, [r4, #8]
 80151ea:	4b09      	ldr	r3, [pc, #36]	@ (8015210 <cleanup_stdio+0x38>)
 80151ec:	4299      	cmp	r1, r3
 80151ee:	d002      	beq.n	80151f6 <cleanup_stdio+0x1e>
 80151f0:	4620      	mov	r0, r4
 80151f2:	f001 ffb7 	bl	8017164 <_fflush_r>
 80151f6:	68e1      	ldr	r1, [r4, #12]
 80151f8:	4b06      	ldr	r3, [pc, #24]	@ (8015214 <cleanup_stdio+0x3c>)
 80151fa:	4299      	cmp	r1, r3
 80151fc:	d004      	beq.n	8015208 <cleanup_stdio+0x30>
 80151fe:	4620      	mov	r0, r4
 8015200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015204:	f001 bfae 	b.w	8017164 <_fflush_r>
 8015208:	bd10      	pop	{r4, pc}
 801520a:	bf00      	nop
 801520c:	20036054 	.word	0x20036054
 8015210:	200360bc 	.word	0x200360bc
 8015214:	20036124 	.word	0x20036124

08015218 <global_stdio_init.part.0>:
 8015218:	b510      	push	{r4, lr}
 801521a:	4b0b      	ldr	r3, [pc, #44]	@ (8015248 <global_stdio_init.part.0+0x30>)
 801521c:	4c0b      	ldr	r4, [pc, #44]	@ (801524c <global_stdio_init.part.0+0x34>)
 801521e:	4a0c      	ldr	r2, [pc, #48]	@ (8015250 <global_stdio_init.part.0+0x38>)
 8015220:	601a      	str	r2, [r3, #0]
 8015222:	4620      	mov	r0, r4
 8015224:	2200      	movs	r2, #0
 8015226:	2104      	movs	r1, #4
 8015228:	f7ff ff94 	bl	8015154 <std>
 801522c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015230:	2201      	movs	r2, #1
 8015232:	2109      	movs	r1, #9
 8015234:	f7ff ff8e 	bl	8015154 <std>
 8015238:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801523c:	2202      	movs	r2, #2
 801523e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015242:	2112      	movs	r1, #18
 8015244:	f7ff bf86 	b.w	8015154 <std>
 8015248:	2003618c 	.word	0x2003618c
 801524c:	20036054 	.word	0x20036054
 8015250:	080151c1 	.word	0x080151c1

08015254 <__sfp_lock_acquire>:
 8015254:	4801      	ldr	r0, [pc, #4]	@ (801525c <__sfp_lock_acquire+0x8>)
 8015256:	f000 ba34 	b.w	80156c2 <__retarget_lock_acquire_recursive>
 801525a:	bf00      	nop
 801525c:	20036195 	.word	0x20036195

08015260 <__sfp_lock_release>:
 8015260:	4801      	ldr	r0, [pc, #4]	@ (8015268 <__sfp_lock_release+0x8>)
 8015262:	f000 ba2f 	b.w	80156c4 <__retarget_lock_release_recursive>
 8015266:	bf00      	nop
 8015268:	20036195 	.word	0x20036195

0801526c <__sinit>:
 801526c:	b510      	push	{r4, lr}
 801526e:	4604      	mov	r4, r0
 8015270:	f7ff fff0 	bl	8015254 <__sfp_lock_acquire>
 8015274:	6a23      	ldr	r3, [r4, #32]
 8015276:	b11b      	cbz	r3, 8015280 <__sinit+0x14>
 8015278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801527c:	f7ff bff0 	b.w	8015260 <__sfp_lock_release>
 8015280:	4b04      	ldr	r3, [pc, #16]	@ (8015294 <__sinit+0x28>)
 8015282:	6223      	str	r3, [r4, #32]
 8015284:	4b04      	ldr	r3, [pc, #16]	@ (8015298 <__sinit+0x2c>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d1f5      	bne.n	8015278 <__sinit+0xc>
 801528c:	f7ff ffc4 	bl	8015218 <global_stdio_init.part.0>
 8015290:	e7f2      	b.n	8015278 <__sinit+0xc>
 8015292:	bf00      	nop
 8015294:	080151d9 	.word	0x080151d9
 8015298:	2003618c 	.word	0x2003618c

0801529c <_fwalk_sglue>:
 801529c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152a0:	4607      	mov	r7, r0
 80152a2:	4688      	mov	r8, r1
 80152a4:	4614      	mov	r4, r2
 80152a6:	2600      	movs	r6, #0
 80152a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80152ac:	f1b9 0901 	subs.w	r9, r9, #1
 80152b0:	d505      	bpl.n	80152be <_fwalk_sglue+0x22>
 80152b2:	6824      	ldr	r4, [r4, #0]
 80152b4:	2c00      	cmp	r4, #0
 80152b6:	d1f7      	bne.n	80152a8 <_fwalk_sglue+0xc>
 80152b8:	4630      	mov	r0, r6
 80152ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152be:	89ab      	ldrh	r3, [r5, #12]
 80152c0:	2b01      	cmp	r3, #1
 80152c2:	d907      	bls.n	80152d4 <_fwalk_sglue+0x38>
 80152c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80152c8:	3301      	adds	r3, #1
 80152ca:	d003      	beq.n	80152d4 <_fwalk_sglue+0x38>
 80152cc:	4629      	mov	r1, r5
 80152ce:	4638      	mov	r0, r7
 80152d0:	47c0      	blx	r8
 80152d2:	4306      	orrs	r6, r0
 80152d4:	3568      	adds	r5, #104	@ 0x68
 80152d6:	e7e9      	b.n	80152ac <_fwalk_sglue+0x10>

080152d8 <iprintf>:
 80152d8:	b40f      	push	{r0, r1, r2, r3}
 80152da:	b507      	push	{r0, r1, r2, lr}
 80152dc:	4906      	ldr	r1, [pc, #24]	@ (80152f8 <iprintf+0x20>)
 80152de:	ab04      	add	r3, sp, #16
 80152e0:	6808      	ldr	r0, [r1, #0]
 80152e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80152e6:	6881      	ldr	r1, [r0, #8]
 80152e8:	9301      	str	r3, [sp, #4]
 80152ea:	f001 fd9f 	bl	8016e2c <_vfiprintf_r>
 80152ee:	b003      	add	sp, #12
 80152f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80152f4:	b004      	add	sp, #16
 80152f6:	4770      	bx	lr
 80152f8:	20000824 	.word	0x20000824

080152fc <_puts_r>:
 80152fc:	6a03      	ldr	r3, [r0, #32]
 80152fe:	b570      	push	{r4, r5, r6, lr}
 8015300:	6884      	ldr	r4, [r0, #8]
 8015302:	4605      	mov	r5, r0
 8015304:	460e      	mov	r6, r1
 8015306:	b90b      	cbnz	r3, 801530c <_puts_r+0x10>
 8015308:	f7ff ffb0 	bl	801526c <__sinit>
 801530c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801530e:	07db      	lsls	r3, r3, #31
 8015310:	d405      	bmi.n	801531e <_puts_r+0x22>
 8015312:	89a3      	ldrh	r3, [r4, #12]
 8015314:	0598      	lsls	r0, r3, #22
 8015316:	d402      	bmi.n	801531e <_puts_r+0x22>
 8015318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801531a:	f000 f9d2 	bl	80156c2 <__retarget_lock_acquire_recursive>
 801531e:	89a3      	ldrh	r3, [r4, #12]
 8015320:	0719      	lsls	r1, r3, #28
 8015322:	d502      	bpl.n	801532a <_puts_r+0x2e>
 8015324:	6923      	ldr	r3, [r4, #16]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d135      	bne.n	8015396 <_puts_r+0x9a>
 801532a:	4621      	mov	r1, r4
 801532c:	4628      	mov	r0, r5
 801532e:	f000 f8e5 	bl	80154fc <__swsetup_r>
 8015332:	b380      	cbz	r0, 8015396 <_puts_r+0x9a>
 8015334:	f04f 35ff 	mov.w	r5, #4294967295
 8015338:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801533a:	07da      	lsls	r2, r3, #31
 801533c:	d405      	bmi.n	801534a <_puts_r+0x4e>
 801533e:	89a3      	ldrh	r3, [r4, #12]
 8015340:	059b      	lsls	r3, r3, #22
 8015342:	d402      	bmi.n	801534a <_puts_r+0x4e>
 8015344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015346:	f000 f9bd 	bl	80156c4 <__retarget_lock_release_recursive>
 801534a:	4628      	mov	r0, r5
 801534c:	bd70      	pop	{r4, r5, r6, pc}
 801534e:	2b00      	cmp	r3, #0
 8015350:	da04      	bge.n	801535c <_puts_r+0x60>
 8015352:	69a2      	ldr	r2, [r4, #24]
 8015354:	429a      	cmp	r2, r3
 8015356:	dc17      	bgt.n	8015388 <_puts_r+0x8c>
 8015358:	290a      	cmp	r1, #10
 801535a:	d015      	beq.n	8015388 <_puts_r+0x8c>
 801535c:	6823      	ldr	r3, [r4, #0]
 801535e:	1c5a      	adds	r2, r3, #1
 8015360:	6022      	str	r2, [r4, #0]
 8015362:	7019      	strb	r1, [r3, #0]
 8015364:	68a3      	ldr	r3, [r4, #8]
 8015366:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801536a:	3b01      	subs	r3, #1
 801536c:	60a3      	str	r3, [r4, #8]
 801536e:	2900      	cmp	r1, #0
 8015370:	d1ed      	bne.n	801534e <_puts_r+0x52>
 8015372:	2b00      	cmp	r3, #0
 8015374:	da11      	bge.n	801539a <_puts_r+0x9e>
 8015376:	4622      	mov	r2, r4
 8015378:	210a      	movs	r1, #10
 801537a:	4628      	mov	r0, r5
 801537c:	f000 f87f 	bl	801547e <__swbuf_r>
 8015380:	3001      	adds	r0, #1
 8015382:	d0d7      	beq.n	8015334 <_puts_r+0x38>
 8015384:	250a      	movs	r5, #10
 8015386:	e7d7      	b.n	8015338 <_puts_r+0x3c>
 8015388:	4622      	mov	r2, r4
 801538a:	4628      	mov	r0, r5
 801538c:	f000 f877 	bl	801547e <__swbuf_r>
 8015390:	3001      	adds	r0, #1
 8015392:	d1e7      	bne.n	8015364 <_puts_r+0x68>
 8015394:	e7ce      	b.n	8015334 <_puts_r+0x38>
 8015396:	3e01      	subs	r6, #1
 8015398:	e7e4      	b.n	8015364 <_puts_r+0x68>
 801539a:	6823      	ldr	r3, [r4, #0]
 801539c:	1c5a      	adds	r2, r3, #1
 801539e:	6022      	str	r2, [r4, #0]
 80153a0:	220a      	movs	r2, #10
 80153a2:	701a      	strb	r2, [r3, #0]
 80153a4:	e7ee      	b.n	8015384 <_puts_r+0x88>
	...

080153a8 <puts>:
 80153a8:	4b02      	ldr	r3, [pc, #8]	@ (80153b4 <puts+0xc>)
 80153aa:	4601      	mov	r1, r0
 80153ac:	6818      	ldr	r0, [r3, #0]
 80153ae:	f7ff bfa5 	b.w	80152fc <_puts_r>
 80153b2:	bf00      	nop
 80153b4:	20000824 	.word	0x20000824

080153b8 <siprintf>:
 80153b8:	b40e      	push	{r1, r2, r3}
 80153ba:	b500      	push	{lr}
 80153bc:	b09c      	sub	sp, #112	@ 0x70
 80153be:	ab1d      	add	r3, sp, #116	@ 0x74
 80153c0:	9002      	str	r0, [sp, #8]
 80153c2:	9006      	str	r0, [sp, #24]
 80153c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80153c8:	4809      	ldr	r0, [pc, #36]	@ (80153f0 <siprintf+0x38>)
 80153ca:	9107      	str	r1, [sp, #28]
 80153cc:	9104      	str	r1, [sp, #16]
 80153ce:	4909      	ldr	r1, [pc, #36]	@ (80153f4 <siprintf+0x3c>)
 80153d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80153d4:	9105      	str	r1, [sp, #20]
 80153d6:	6800      	ldr	r0, [r0, #0]
 80153d8:	9301      	str	r3, [sp, #4]
 80153da:	a902      	add	r1, sp, #8
 80153dc:	f001 fc00 	bl	8016be0 <_svfiprintf_r>
 80153e0:	9b02      	ldr	r3, [sp, #8]
 80153e2:	2200      	movs	r2, #0
 80153e4:	701a      	strb	r2, [r3, #0]
 80153e6:	b01c      	add	sp, #112	@ 0x70
 80153e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80153ec:	b003      	add	sp, #12
 80153ee:	4770      	bx	lr
 80153f0:	20000824 	.word	0x20000824
 80153f4:	ffff0208 	.word	0xffff0208

080153f8 <__sread>:
 80153f8:	b510      	push	{r4, lr}
 80153fa:	460c      	mov	r4, r1
 80153fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015400:	f000 f900 	bl	8015604 <_read_r>
 8015404:	2800      	cmp	r0, #0
 8015406:	bfab      	itete	ge
 8015408:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801540a:	89a3      	ldrhlt	r3, [r4, #12]
 801540c:	181b      	addge	r3, r3, r0
 801540e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015412:	bfac      	ite	ge
 8015414:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015416:	81a3      	strhlt	r3, [r4, #12]
 8015418:	bd10      	pop	{r4, pc}

0801541a <__swrite>:
 801541a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801541e:	461f      	mov	r7, r3
 8015420:	898b      	ldrh	r3, [r1, #12]
 8015422:	05db      	lsls	r3, r3, #23
 8015424:	4605      	mov	r5, r0
 8015426:	460c      	mov	r4, r1
 8015428:	4616      	mov	r6, r2
 801542a:	d505      	bpl.n	8015438 <__swrite+0x1e>
 801542c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015430:	2302      	movs	r3, #2
 8015432:	2200      	movs	r2, #0
 8015434:	f000 f8d4 	bl	80155e0 <_lseek_r>
 8015438:	89a3      	ldrh	r3, [r4, #12]
 801543a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801543e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015442:	81a3      	strh	r3, [r4, #12]
 8015444:	4632      	mov	r2, r6
 8015446:	463b      	mov	r3, r7
 8015448:	4628      	mov	r0, r5
 801544a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801544e:	f000 b8fb 	b.w	8015648 <_write_r>

08015452 <__sseek>:
 8015452:	b510      	push	{r4, lr}
 8015454:	460c      	mov	r4, r1
 8015456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801545a:	f000 f8c1 	bl	80155e0 <_lseek_r>
 801545e:	1c43      	adds	r3, r0, #1
 8015460:	89a3      	ldrh	r3, [r4, #12]
 8015462:	bf15      	itete	ne
 8015464:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015466:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801546a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801546e:	81a3      	strheq	r3, [r4, #12]
 8015470:	bf18      	it	ne
 8015472:	81a3      	strhne	r3, [r4, #12]
 8015474:	bd10      	pop	{r4, pc}

08015476 <__sclose>:
 8015476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801547a:	f000 b8a1 	b.w	80155c0 <_close_r>

0801547e <__swbuf_r>:
 801547e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015480:	460e      	mov	r6, r1
 8015482:	4614      	mov	r4, r2
 8015484:	4605      	mov	r5, r0
 8015486:	b118      	cbz	r0, 8015490 <__swbuf_r+0x12>
 8015488:	6a03      	ldr	r3, [r0, #32]
 801548a:	b90b      	cbnz	r3, 8015490 <__swbuf_r+0x12>
 801548c:	f7ff feee 	bl	801526c <__sinit>
 8015490:	69a3      	ldr	r3, [r4, #24]
 8015492:	60a3      	str	r3, [r4, #8]
 8015494:	89a3      	ldrh	r3, [r4, #12]
 8015496:	071a      	lsls	r2, r3, #28
 8015498:	d501      	bpl.n	801549e <__swbuf_r+0x20>
 801549a:	6923      	ldr	r3, [r4, #16]
 801549c:	b943      	cbnz	r3, 80154b0 <__swbuf_r+0x32>
 801549e:	4621      	mov	r1, r4
 80154a0:	4628      	mov	r0, r5
 80154a2:	f000 f82b 	bl	80154fc <__swsetup_r>
 80154a6:	b118      	cbz	r0, 80154b0 <__swbuf_r+0x32>
 80154a8:	f04f 37ff 	mov.w	r7, #4294967295
 80154ac:	4638      	mov	r0, r7
 80154ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154b0:	6823      	ldr	r3, [r4, #0]
 80154b2:	6922      	ldr	r2, [r4, #16]
 80154b4:	1a98      	subs	r0, r3, r2
 80154b6:	6963      	ldr	r3, [r4, #20]
 80154b8:	b2f6      	uxtb	r6, r6
 80154ba:	4283      	cmp	r3, r0
 80154bc:	4637      	mov	r7, r6
 80154be:	dc05      	bgt.n	80154cc <__swbuf_r+0x4e>
 80154c0:	4621      	mov	r1, r4
 80154c2:	4628      	mov	r0, r5
 80154c4:	f001 fe4e 	bl	8017164 <_fflush_r>
 80154c8:	2800      	cmp	r0, #0
 80154ca:	d1ed      	bne.n	80154a8 <__swbuf_r+0x2a>
 80154cc:	68a3      	ldr	r3, [r4, #8]
 80154ce:	3b01      	subs	r3, #1
 80154d0:	60a3      	str	r3, [r4, #8]
 80154d2:	6823      	ldr	r3, [r4, #0]
 80154d4:	1c5a      	adds	r2, r3, #1
 80154d6:	6022      	str	r2, [r4, #0]
 80154d8:	701e      	strb	r6, [r3, #0]
 80154da:	6962      	ldr	r2, [r4, #20]
 80154dc:	1c43      	adds	r3, r0, #1
 80154de:	429a      	cmp	r2, r3
 80154e0:	d004      	beq.n	80154ec <__swbuf_r+0x6e>
 80154e2:	89a3      	ldrh	r3, [r4, #12]
 80154e4:	07db      	lsls	r3, r3, #31
 80154e6:	d5e1      	bpl.n	80154ac <__swbuf_r+0x2e>
 80154e8:	2e0a      	cmp	r6, #10
 80154ea:	d1df      	bne.n	80154ac <__swbuf_r+0x2e>
 80154ec:	4621      	mov	r1, r4
 80154ee:	4628      	mov	r0, r5
 80154f0:	f001 fe38 	bl	8017164 <_fflush_r>
 80154f4:	2800      	cmp	r0, #0
 80154f6:	d0d9      	beq.n	80154ac <__swbuf_r+0x2e>
 80154f8:	e7d6      	b.n	80154a8 <__swbuf_r+0x2a>
	...

080154fc <__swsetup_r>:
 80154fc:	b538      	push	{r3, r4, r5, lr}
 80154fe:	4b29      	ldr	r3, [pc, #164]	@ (80155a4 <__swsetup_r+0xa8>)
 8015500:	4605      	mov	r5, r0
 8015502:	6818      	ldr	r0, [r3, #0]
 8015504:	460c      	mov	r4, r1
 8015506:	b118      	cbz	r0, 8015510 <__swsetup_r+0x14>
 8015508:	6a03      	ldr	r3, [r0, #32]
 801550a:	b90b      	cbnz	r3, 8015510 <__swsetup_r+0x14>
 801550c:	f7ff feae 	bl	801526c <__sinit>
 8015510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015514:	0719      	lsls	r1, r3, #28
 8015516:	d422      	bmi.n	801555e <__swsetup_r+0x62>
 8015518:	06da      	lsls	r2, r3, #27
 801551a:	d407      	bmi.n	801552c <__swsetup_r+0x30>
 801551c:	2209      	movs	r2, #9
 801551e:	602a      	str	r2, [r5, #0]
 8015520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015524:	81a3      	strh	r3, [r4, #12]
 8015526:	f04f 30ff 	mov.w	r0, #4294967295
 801552a:	e033      	b.n	8015594 <__swsetup_r+0x98>
 801552c:	0758      	lsls	r0, r3, #29
 801552e:	d512      	bpl.n	8015556 <__swsetup_r+0x5a>
 8015530:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015532:	b141      	cbz	r1, 8015546 <__swsetup_r+0x4a>
 8015534:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015538:	4299      	cmp	r1, r3
 801553a:	d002      	beq.n	8015542 <__swsetup_r+0x46>
 801553c:	4628      	mov	r0, r5
 801553e:	f000 ff1f 	bl	8016380 <_free_r>
 8015542:	2300      	movs	r3, #0
 8015544:	6363      	str	r3, [r4, #52]	@ 0x34
 8015546:	89a3      	ldrh	r3, [r4, #12]
 8015548:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801554c:	81a3      	strh	r3, [r4, #12]
 801554e:	2300      	movs	r3, #0
 8015550:	6063      	str	r3, [r4, #4]
 8015552:	6923      	ldr	r3, [r4, #16]
 8015554:	6023      	str	r3, [r4, #0]
 8015556:	89a3      	ldrh	r3, [r4, #12]
 8015558:	f043 0308 	orr.w	r3, r3, #8
 801555c:	81a3      	strh	r3, [r4, #12]
 801555e:	6923      	ldr	r3, [r4, #16]
 8015560:	b94b      	cbnz	r3, 8015576 <__swsetup_r+0x7a>
 8015562:	89a3      	ldrh	r3, [r4, #12]
 8015564:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801556c:	d003      	beq.n	8015576 <__swsetup_r+0x7a>
 801556e:	4621      	mov	r1, r4
 8015570:	4628      	mov	r0, r5
 8015572:	f001 fe45 	bl	8017200 <__smakebuf_r>
 8015576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801557a:	f013 0201 	ands.w	r2, r3, #1
 801557e:	d00a      	beq.n	8015596 <__swsetup_r+0x9a>
 8015580:	2200      	movs	r2, #0
 8015582:	60a2      	str	r2, [r4, #8]
 8015584:	6962      	ldr	r2, [r4, #20]
 8015586:	4252      	negs	r2, r2
 8015588:	61a2      	str	r2, [r4, #24]
 801558a:	6922      	ldr	r2, [r4, #16]
 801558c:	b942      	cbnz	r2, 80155a0 <__swsetup_r+0xa4>
 801558e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015592:	d1c5      	bne.n	8015520 <__swsetup_r+0x24>
 8015594:	bd38      	pop	{r3, r4, r5, pc}
 8015596:	0799      	lsls	r1, r3, #30
 8015598:	bf58      	it	pl
 801559a:	6962      	ldrpl	r2, [r4, #20]
 801559c:	60a2      	str	r2, [r4, #8]
 801559e:	e7f4      	b.n	801558a <__swsetup_r+0x8e>
 80155a0:	2000      	movs	r0, #0
 80155a2:	e7f7      	b.n	8015594 <__swsetup_r+0x98>
 80155a4:	20000824 	.word	0x20000824

080155a8 <memset>:
 80155a8:	4402      	add	r2, r0
 80155aa:	4603      	mov	r3, r0
 80155ac:	4293      	cmp	r3, r2
 80155ae:	d100      	bne.n	80155b2 <memset+0xa>
 80155b0:	4770      	bx	lr
 80155b2:	f803 1b01 	strb.w	r1, [r3], #1
 80155b6:	e7f9      	b.n	80155ac <memset+0x4>

080155b8 <_localeconv_r>:
 80155b8:	4800      	ldr	r0, [pc, #0]	@ (80155bc <_localeconv_r+0x4>)
 80155ba:	4770      	bx	lr
 80155bc:	20000964 	.word	0x20000964

080155c0 <_close_r>:
 80155c0:	b538      	push	{r3, r4, r5, lr}
 80155c2:	4d06      	ldr	r5, [pc, #24]	@ (80155dc <_close_r+0x1c>)
 80155c4:	2300      	movs	r3, #0
 80155c6:	4604      	mov	r4, r0
 80155c8:	4608      	mov	r0, r1
 80155ca:	602b      	str	r3, [r5, #0]
 80155cc:	f7ed fb48 	bl	8002c60 <_close>
 80155d0:	1c43      	adds	r3, r0, #1
 80155d2:	d102      	bne.n	80155da <_close_r+0x1a>
 80155d4:	682b      	ldr	r3, [r5, #0]
 80155d6:	b103      	cbz	r3, 80155da <_close_r+0x1a>
 80155d8:	6023      	str	r3, [r4, #0]
 80155da:	bd38      	pop	{r3, r4, r5, pc}
 80155dc:	20036190 	.word	0x20036190

080155e0 <_lseek_r>:
 80155e0:	b538      	push	{r3, r4, r5, lr}
 80155e2:	4d07      	ldr	r5, [pc, #28]	@ (8015600 <_lseek_r+0x20>)
 80155e4:	4604      	mov	r4, r0
 80155e6:	4608      	mov	r0, r1
 80155e8:	4611      	mov	r1, r2
 80155ea:	2200      	movs	r2, #0
 80155ec:	602a      	str	r2, [r5, #0]
 80155ee:	461a      	mov	r2, r3
 80155f0:	f7ed fb5d 	bl	8002cae <_lseek>
 80155f4:	1c43      	adds	r3, r0, #1
 80155f6:	d102      	bne.n	80155fe <_lseek_r+0x1e>
 80155f8:	682b      	ldr	r3, [r5, #0]
 80155fa:	b103      	cbz	r3, 80155fe <_lseek_r+0x1e>
 80155fc:	6023      	str	r3, [r4, #0]
 80155fe:	bd38      	pop	{r3, r4, r5, pc}
 8015600:	20036190 	.word	0x20036190

08015604 <_read_r>:
 8015604:	b538      	push	{r3, r4, r5, lr}
 8015606:	4d07      	ldr	r5, [pc, #28]	@ (8015624 <_read_r+0x20>)
 8015608:	4604      	mov	r4, r0
 801560a:	4608      	mov	r0, r1
 801560c:	4611      	mov	r1, r2
 801560e:	2200      	movs	r2, #0
 8015610:	602a      	str	r2, [r5, #0]
 8015612:	461a      	mov	r2, r3
 8015614:	f7ed faeb 	bl	8002bee <_read>
 8015618:	1c43      	adds	r3, r0, #1
 801561a:	d102      	bne.n	8015622 <_read_r+0x1e>
 801561c:	682b      	ldr	r3, [r5, #0]
 801561e:	b103      	cbz	r3, 8015622 <_read_r+0x1e>
 8015620:	6023      	str	r3, [r4, #0]
 8015622:	bd38      	pop	{r3, r4, r5, pc}
 8015624:	20036190 	.word	0x20036190

08015628 <_sbrk_r>:
 8015628:	b538      	push	{r3, r4, r5, lr}
 801562a:	4d06      	ldr	r5, [pc, #24]	@ (8015644 <_sbrk_r+0x1c>)
 801562c:	2300      	movs	r3, #0
 801562e:	4604      	mov	r4, r0
 8015630:	4608      	mov	r0, r1
 8015632:	602b      	str	r3, [r5, #0]
 8015634:	f7ed fb48 	bl	8002cc8 <_sbrk>
 8015638:	1c43      	adds	r3, r0, #1
 801563a:	d102      	bne.n	8015642 <_sbrk_r+0x1a>
 801563c:	682b      	ldr	r3, [r5, #0]
 801563e:	b103      	cbz	r3, 8015642 <_sbrk_r+0x1a>
 8015640:	6023      	str	r3, [r4, #0]
 8015642:	bd38      	pop	{r3, r4, r5, pc}
 8015644:	20036190 	.word	0x20036190

08015648 <_write_r>:
 8015648:	b538      	push	{r3, r4, r5, lr}
 801564a:	4d07      	ldr	r5, [pc, #28]	@ (8015668 <_write_r+0x20>)
 801564c:	4604      	mov	r4, r0
 801564e:	4608      	mov	r0, r1
 8015650:	4611      	mov	r1, r2
 8015652:	2200      	movs	r2, #0
 8015654:	602a      	str	r2, [r5, #0]
 8015656:	461a      	mov	r2, r3
 8015658:	f7ed fae6 	bl	8002c28 <_write>
 801565c:	1c43      	adds	r3, r0, #1
 801565e:	d102      	bne.n	8015666 <_write_r+0x1e>
 8015660:	682b      	ldr	r3, [r5, #0]
 8015662:	b103      	cbz	r3, 8015666 <_write_r+0x1e>
 8015664:	6023      	str	r3, [r4, #0]
 8015666:	bd38      	pop	{r3, r4, r5, pc}
 8015668:	20036190 	.word	0x20036190

0801566c <__errno>:
 801566c:	4b01      	ldr	r3, [pc, #4]	@ (8015674 <__errno+0x8>)
 801566e:	6818      	ldr	r0, [r3, #0]
 8015670:	4770      	bx	lr
 8015672:	bf00      	nop
 8015674:	20000824 	.word	0x20000824

08015678 <__libc_init_array>:
 8015678:	b570      	push	{r4, r5, r6, lr}
 801567a:	4d0d      	ldr	r5, [pc, #52]	@ (80156b0 <__libc_init_array+0x38>)
 801567c:	4c0d      	ldr	r4, [pc, #52]	@ (80156b4 <__libc_init_array+0x3c>)
 801567e:	1b64      	subs	r4, r4, r5
 8015680:	10a4      	asrs	r4, r4, #2
 8015682:	2600      	movs	r6, #0
 8015684:	42a6      	cmp	r6, r4
 8015686:	d109      	bne.n	801569c <__libc_init_array+0x24>
 8015688:	4d0b      	ldr	r5, [pc, #44]	@ (80156b8 <__libc_init_array+0x40>)
 801568a:	4c0c      	ldr	r4, [pc, #48]	@ (80156bc <__libc_init_array+0x44>)
 801568c:	f002 fd6c 	bl	8018168 <_init>
 8015690:	1b64      	subs	r4, r4, r5
 8015692:	10a4      	asrs	r4, r4, #2
 8015694:	2600      	movs	r6, #0
 8015696:	42a6      	cmp	r6, r4
 8015698:	d105      	bne.n	80156a6 <__libc_init_array+0x2e>
 801569a:	bd70      	pop	{r4, r5, r6, pc}
 801569c:	f855 3b04 	ldr.w	r3, [r5], #4
 80156a0:	4798      	blx	r3
 80156a2:	3601      	adds	r6, #1
 80156a4:	e7ee      	b.n	8015684 <__libc_init_array+0xc>
 80156a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80156aa:	4798      	blx	r3
 80156ac:	3601      	adds	r6, #1
 80156ae:	e7f2      	b.n	8015696 <__libc_init_array+0x1e>
 80156b0:	080d5f30 	.word	0x080d5f30
 80156b4:	080d5f30 	.word	0x080d5f30
 80156b8:	080d5f30 	.word	0x080d5f30
 80156bc:	080d5f34 	.word	0x080d5f34

080156c0 <__retarget_lock_init_recursive>:
 80156c0:	4770      	bx	lr

080156c2 <__retarget_lock_acquire_recursive>:
 80156c2:	4770      	bx	lr

080156c4 <__retarget_lock_release_recursive>:
 80156c4:	4770      	bx	lr

080156c6 <memcpy>:
 80156c6:	440a      	add	r2, r1
 80156c8:	4291      	cmp	r1, r2
 80156ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80156ce:	d100      	bne.n	80156d2 <memcpy+0xc>
 80156d0:	4770      	bx	lr
 80156d2:	b510      	push	{r4, lr}
 80156d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80156dc:	4291      	cmp	r1, r2
 80156de:	d1f9      	bne.n	80156d4 <memcpy+0xe>
 80156e0:	bd10      	pop	{r4, pc}

080156e2 <quorem>:
 80156e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156e6:	6903      	ldr	r3, [r0, #16]
 80156e8:	690c      	ldr	r4, [r1, #16]
 80156ea:	42a3      	cmp	r3, r4
 80156ec:	4607      	mov	r7, r0
 80156ee:	db7e      	blt.n	80157ee <quorem+0x10c>
 80156f0:	3c01      	subs	r4, #1
 80156f2:	f101 0814 	add.w	r8, r1, #20
 80156f6:	00a3      	lsls	r3, r4, #2
 80156f8:	f100 0514 	add.w	r5, r0, #20
 80156fc:	9300      	str	r3, [sp, #0]
 80156fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015702:	9301      	str	r3, [sp, #4]
 8015704:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015708:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801570c:	3301      	adds	r3, #1
 801570e:	429a      	cmp	r2, r3
 8015710:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015714:	fbb2 f6f3 	udiv	r6, r2, r3
 8015718:	d32e      	bcc.n	8015778 <quorem+0x96>
 801571a:	f04f 0a00 	mov.w	sl, #0
 801571e:	46c4      	mov	ip, r8
 8015720:	46ae      	mov	lr, r5
 8015722:	46d3      	mov	fp, sl
 8015724:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015728:	b298      	uxth	r0, r3
 801572a:	fb06 a000 	mla	r0, r6, r0, sl
 801572e:	0c02      	lsrs	r2, r0, #16
 8015730:	0c1b      	lsrs	r3, r3, #16
 8015732:	fb06 2303 	mla	r3, r6, r3, r2
 8015736:	f8de 2000 	ldr.w	r2, [lr]
 801573a:	b280      	uxth	r0, r0
 801573c:	b292      	uxth	r2, r2
 801573e:	1a12      	subs	r2, r2, r0
 8015740:	445a      	add	r2, fp
 8015742:	f8de 0000 	ldr.w	r0, [lr]
 8015746:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801574a:	b29b      	uxth	r3, r3
 801574c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8015750:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8015754:	b292      	uxth	r2, r2
 8015756:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801575a:	45e1      	cmp	r9, ip
 801575c:	f84e 2b04 	str.w	r2, [lr], #4
 8015760:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8015764:	d2de      	bcs.n	8015724 <quorem+0x42>
 8015766:	9b00      	ldr	r3, [sp, #0]
 8015768:	58eb      	ldr	r3, [r5, r3]
 801576a:	b92b      	cbnz	r3, 8015778 <quorem+0x96>
 801576c:	9b01      	ldr	r3, [sp, #4]
 801576e:	3b04      	subs	r3, #4
 8015770:	429d      	cmp	r5, r3
 8015772:	461a      	mov	r2, r3
 8015774:	d32f      	bcc.n	80157d6 <quorem+0xf4>
 8015776:	613c      	str	r4, [r7, #16]
 8015778:	4638      	mov	r0, r7
 801577a:	f001 f8c5 	bl	8016908 <__mcmp>
 801577e:	2800      	cmp	r0, #0
 8015780:	db25      	blt.n	80157ce <quorem+0xec>
 8015782:	4629      	mov	r1, r5
 8015784:	2000      	movs	r0, #0
 8015786:	f858 2b04 	ldr.w	r2, [r8], #4
 801578a:	f8d1 c000 	ldr.w	ip, [r1]
 801578e:	fa1f fe82 	uxth.w	lr, r2
 8015792:	fa1f f38c 	uxth.w	r3, ip
 8015796:	eba3 030e 	sub.w	r3, r3, lr
 801579a:	4403      	add	r3, r0
 801579c:	0c12      	lsrs	r2, r2, #16
 801579e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80157a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80157a6:	b29b      	uxth	r3, r3
 80157a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80157ac:	45c1      	cmp	r9, r8
 80157ae:	f841 3b04 	str.w	r3, [r1], #4
 80157b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80157b6:	d2e6      	bcs.n	8015786 <quorem+0xa4>
 80157b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80157bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80157c0:	b922      	cbnz	r2, 80157cc <quorem+0xea>
 80157c2:	3b04      	subs	r3, #4
 80157c4:	429d      	cmp	r5, r3
 80157c6:	461a      	mov	r2, r3
 80157c8:	d30b      	bcc.n	80157e2 <quorem+0x100>
 80157ca:	613c      	str	r4, [r7, #16]
 80157cc:	3601      	adds	r6, #1
 80157ce:	4630      	mov	r0, r6
 80157d0:	b003      	add	sp, #12
 80157d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157d6:	6812      	ldr	r2, [r2, #0]
 80157d8:	3b04      	subs	r3, #4
 80157da:	2a00      	cmp	r2, #0
 80157dc:	d1cb      	bne.n	8015776 <quorem+0x94>
 80157de:	3c01      	subs	r4, #1
 80157e0:	e7c6      	b.n	8015770 <quorem+0x8e>
 80157e2:	6812      	ldr	r2, [r2, #0]
 80157e4:	3b04      	subs	r3, #4
 80157e6:	2a00      	cmp	r2, #0
 80157e8:	d1ef      	bne.n	80157ca <quorem+0xe8>
 80157ea:	3c01      	subs	r4, #1
 80157ec:	e7ea      	b.n	80157c4 <quorem+0xe2>
 80157ee:	2000      	movs	r0, #0
 80157f0:	e7ee      	b.n	80157d0 <quorem+0xee>
 80157f2:	0000      	movs	r0, r0
 80157f4:	0000      	movs	r0, r0
	...

080157f8 <_dtoa_r>:
 80157f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157fc:	69c7      	ldr	r7, [r0, #28]
 80157fe:	b099      	sub	sp, #100	@ 0x64
 8015800:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015804:	ec55 4b10 	vmov	r4, r5, d0
 8015808:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801580a:	9109      	str	r1, [sp, #36]	@ 0x24
 801580c:	4683      	mov	fp, r0
 801580e:	920e      	str	r2, [sp, #56]	@ 0x38
 8015810:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015812:	b97f      	cbnz	r7, 8015834 <_dtoa_r+0x3c>
 8015814:	2010      	movs	r0, #16
 8015816:	f7fe ff61 	bl	80146dc <malloc>
 801581a:	4602      	mov	r2, r0
 801581c:	f8cb 001c 	str.w	r0, [fp, #28]
 8015820:	b920      	cbnz	r0, 801582c <_dtoa_r+0x34>
 8015822:	4ba7      	ldr	r3, [pc, #668]	@ (8015ac0 <_dtoa_r+0x2c8>)
 8015824:	21ef      	movs	r1, #239	@ 0xef
 8015826:	48a7      	ldr	r0, [pc, #668]	@ (8015ac4 <_dtoa_r+0x2cc>)
 8015828:	f001 fd62 	bl	80172f0 <__assert_func>
 801582c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015830:	6007      	str	r7, [r0, #0]
 8015832:	60c7      	str	r7, [r0, #12]
 8015834:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015838:	6819      	ldr	r1, [r3, #0]
 801583a:	b159      	cbz	r1, 8015854 <_dtoa_r+0x5c>
 801583c:	685a      	ldr	r2, [r3, #4]
 801583e:	604a      	str	r2, [r1, #4]
 8015840:	2301      	movs	r3, #1
 8015842:	4093      	lsls	r3, r2
 8015844:	608b      	str	r3, [r1, #8]
 8015846:	4658      	mov	r0, fp
 8015848:	f000 fe24 	bl	8016494 <_Bfree>
 801584c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015850:	2200      	movs	r2, #0
 8015852:	601a      	str	r2, [r3, #0]
 8015854:	1e2b      	subs	r3, r5, #0
 8015856:	bfb9      	ittee	lt
 8015858:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801585c:	9303      	strlt	r3, [sp, #12]
 801585e:	2300      	movge	r3, #0
 8015860:	6033      	strge	r3, [r6, #0]
 8015862:	9f03      	ldr	r7, [sp, #12]
 8015864:	4b98      	ldr	r3, [pc, #608]	@ (8015ac8 <_dtoa_r+0x2d0>)
 8015866:	bfbc      	itt	lt
 8015868:	2201      	movlt	r2, #1
 801586a:	6032      	strlt	r2, [r6, #0]
 801586c:	43bb      	bics	r3, r7
 801586e:	d112      	bne.n	8015896 <_dtoa_r+0x9e>
 8015870:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015872:	f242 730f 	movw	r3, #9999	@ 0x270f
 8015876:	6013      	str	r3, [r2, #0]
 8015878:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801587c:	4323      	orrs	r3, r4
 801587e:	f000 854d 	beq.w	801631c <_dtoa_r+0xb24>
 8015882:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015884:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8015adc <_dtoa_r+0x2e4>
 8015888:	2b00      	cmp	r3, #0
 801588a:	f000 854f 	beq.w	801632c <_dtoa_r+0xb34>
 801588e:	f10a 0303 	add.w	r3, sl, #3
 8015892:	f000 bd49 	b.w	8016328 <_dtoa_r+0xb30>
 8015896:	ed9d 7b02 	vldr	d7, [sp, #8]
 801589a:	2200      	movs	r2, #0
 801589c:	ec51 0b17 	vmov	r0, r1, d7
 80158a0:	2300      	movs	r3, #0
 80158a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80158a6:	f7eb f98f 	bl	8000bc8 <__aeabi_dcmpeq>
 80158aa:	4680      	mov	r8, r0
 80158ac:	b158      	cbz	r0, 80158c6 <_dtoa_r+0xce>
 80158ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80158b0:	2301      	movs	r3, #1
 80158b2:	6013      	str	r3, [r2, #0]
 80158b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80158b6:	b113      	cbz	r3, 80158be <_dtoa_r+0xc6>
 80158b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80158ba:	4b84      	ldr	r3, [pc, #528]	@ (8015acc <_dtoa_r+0x2d4>)
 80158bc:	6013      	str	r3, [r2, #0]
 80158be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8015ae0 <_dtoa_r+0x2e8>
 80158c2:	f000 bd33 	b.w	801632c <_dtoa_r+0xb34>
 80158c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80158ca:	aa16      	add	r2, sp, #88	@ 0x58
 80158cc:	a917      	add	r1, sp, #92	@ 0x5c
 80158ce:	4658      	mov	r0, fp
 80158d0:	f001 f8ca 	bl	8016a68 <__d2b>
 80158d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80158d8:	4681      	mov	r9, r0
 80158da:	2e00      	cmp	r6, #0
 80158dc:	d077      	beq.n	80159ce <_dtoa_r+0x1d6>
 80158de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80158e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80158e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80158e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80158ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80158f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80158f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80158f8:	4619      	mov	r1, r3
 80158fa:	2200      	movs	r2, #0
 80158fc:	4b74      	ldr	r3, [pc, #464]	@ (8015ad0 <_dtoa_r+0x2d8>)
 80158fe:	f7ea fd43 	bl	8000388 <__aeabi_dsub>
 8015902:	a369      	add	r3, pc, #420	@ (adr r3, 8015aa8 <_dtoa_r+0x2b0>)
 8015904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015908:	f7ea fef6 	bl	80006f8 <__aeabi_dmul>
 801590c:	a368      	add	r3, pc, #416	@ (adr r3, 8015ab0 <_dtoa_r+0x2b8>)
 801590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015912:	f7ea fd3b 	bl	800038c <__adddf3>
 8015916:	4604      	mov	r4, r0
 8015918:	4630      	mov	r0, r6
 801591a:	460d      	mov	r5, r1
 801591c:	f7ea fe82 	bl	8000624 <__aeabi_i2d>
 8015920:	a365      	add	r3, pc, #404	@ (adr r3, 8015ab8 <_dtoa_r+0x2c0>)
 8015922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015926:	f7ea fee7 	bl	80006f8 <__aeabi_dmul>
 801592a:	4602      	mov	r2, r0
 801592c:	460b      	mov	r3, r1
 801592e:	4620      	mov	r0, r4
 8015930:	4629      	mov	r1, r5
 8015932:	f7ea fd2b 	bl	800038c <__adddf3>
 8015936:	4604      	mov	r4, r0
 8015938:	460d      	mov	r5, r1
 801593a:	f7eb f98d 	bl	8000c58 <__aeabi_d2iz>
 801593e:	2200      	movs	r2, #0
 8015940:	4607      	mov	r7, r0
 8015942:	2300      	movs	r3, #0
 8015944:	4620      	mov	r0, r4
 8015946:	4629      	mov	r1, r5
 8015948:	f7eb f948 	bl	8000bdc <__aeabi_dcmplt>
 801594c:	b140      	cbz	r0, 8015960 <_dtoa_r+0x168>
 801594e:	4638      	mov	r0, r7
 8015950:	f7ea fe68 	bl	8000624 <__aeabi_i2d>
 8015954:	4622      	mov	r2, r4
 8015956:	462b      	mov	r3, r5
 8015958:	f7eb f936 	bl	8000bc8 <__aeabi_dcmpeq>
 801595c:	b900      	cbnz	r0, 8015960 <_dtoa_r+0x168>
 801595e:	3f01      	subs	r7, #1
 8015960:	2f16      	cmp	r7, #22
 8015962:	d851      	bhi.n	8015a08 <_dtoa_r+0x210>
 8015964:	4b5b      	ldr	r3, [pc, #364]	@ (8015ad4 <_dtoa_r+0x2dc>)
 8015966:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801596e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015972:	f7eb f933 	bl	8000bdc <__aeabi_dcmplt>
 8015976:	2800      	cmp	r0, #0
 8015978:	d048      	beq.n	8015a0c <_dtoa_r+0x214>
 801597a:	3f01      	subs	r7, #1
 801597c:	2300      	movs	r3, #0
 801597e:	9312      	str	r3, [sp, #72]	@ 0x48
 8015980:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015982:	1b9b      	subs	r3, r3, r6
 8015984:	1e5a      	subs	r2, r3, #1
 8015986:	bf44      	itt	mi
 8015988:	f1c3 0801 	rsbmi	r8, r3, #1
 801598c:	2300      	movmi	r3, #0
 801598e:	9208      	str	r2, [sp, #32]
 8015990:	bf54      	ite	pl
 8015992:	f04f 0800 	movpl.w	r8, #0
 8015996:	9308      	strmi	r3, [sp, #32]
 8015998:	2f00      	cmp	r7, #0
 801599a:	db39      	blt.n	8015a10 <_dtoa_r+0x218>
 801599c:	9b08      	ldr	r3, [sp, #32]
 801599e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80159a0:	443b      	add	r3, r7
 80159a2:	9308      	str	r3, [sp, #32]
 80159a4:	2300      	movs	r3, #0
 80159a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80159a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159aa:	2b09      	cmp	r3, #9
 80159ac:	d864      	bhi.n	8015a78 <_dtoa_r+0x280>
 80159ae:	2b05      	cmp	r3, #5
 80159b0:	bfc4      	itt	gt
 80159b2:	3b04      	subgt	r3, #4
 80159b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80159b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159b8:	f1a3 0302 	sub.w	r3, r3, #2
 80159bc:	bfcc      	ite	gt
 80159be:	2400      	movgt	r4, #0
 80159c0:	2401      	movle	r4, #1
 80159c2:	2b03      	cmp	r3, #3
 80159c4:	d863      	bhi.n	8015a8e <_dtoa_r+0x296>
 80159c6:	e8df f003 	tbb	[pc, r3]
 80159ca:	372a      	.short	0x372a
 80159cc:	5535      	.short	0x5535
 80159ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80159d2:	441e      	add	r6, r3
 80159d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80159d8:	2b20      	cmp	r3, #32
 80159da:	bfc1      	itttt	gt
 80159dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80159e0:	409f      	lslgt	r7, r3
 80159e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80159e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80159ea:	bfd6      	itet	le
 80159ec:	f1c3 0320 	rsble	r3, r3, #32
 80159f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80159f4:	fa04 f003 	lslle.w	r0, r4, r3
 80159f8:	f7ea fe04 	bl	8000604 <__aeabi_ui2d>
 80159fc:	2201      	movs	r2, #1
 80159fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015a02:	3e01      	subs	r6, #1
 8015a04:	9214      	str	r2, [sp, #80]	@ 0x50
 8015a06:	e777      	b.n	80158f8 <_dtoa_r+0x100>
 8015a08:	2301      	movs	r3, #1
 8015a0a:	e7b8      	b.n	801597e <_dtoa_r+0x186>
 8015a0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8015a0e:	e7b7      	b.n	8015980 <_dtoa_r+0x188>
 8015a10:	427b      	negs	r3, r7
 8015a12:	930a      	str	r3, [sp, #40]	@ 0x28
 8015a14:	2300      	movs	r3, #0
 8015a16:	eba8 0807 	sub.w	r8, r8, r7
 8015a1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015a1c:	e7c4      	b.n	80159a8 <_dtoa_r+0x1b0>
 8015a1e:	2300      	movs	r3, #0
 8015a20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015a22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	dc35      	bgt.n	8015a94 <_dtoa_r+0x29c>
 8015a28:	2301      	movs	r3, #1
 8015a2a:	9300      	str	r3, [sp, #0]
 8015a2c:	9307      	str	r3, [sp, #28]
 8015a2e:	461a      	mov	r2, r3
 8015a30:	920e      	str	r2, [sp, #56]	@ 0x38
 8015a32:	e00b      	b.n	8015a4c <_dtoa_r+0x254>
 8015a34:	2301      	movs	r3, #1
 8015a36:	e7f3      	b.n	8015a20 <_dtoa_r+0x228>
 8015a38:	2300      	movs	r3, #0
 8015a3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a3e:	18fb      	adds	r3, r7, r3
 8015a40:	9300      	str	r3, [sp, #0]
 8015a42:	3301      	adds	r3, #1
 8015a44:	2b01      	cmp	r3, #1
 8015a46:	9307      	str	r3, [sp, #28]
 8015a48:	bfb8      	it	lt
 8015a4a:	2301      	movlt	r3, #1
 8015a4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8015a50:	2100      	movs	r1, #0
 8015a52:	2204      	movs	r2, #4
 8015a54:	f102 0514 	add.w	r5, r2, #20
 8015a58:	429d      	cmp	r5, r3
 8015a5a:	d91f      	bls.n	8015a9c <_dtoa_r+0x2a4>
 8015a5c:	6041      	str	r1, [r0, #4]
 8015a5e:	4658      	mov	r0, fp
 8015a60:	f000 fcd8 	bl	8016414 <_Balloc>
 8015a64:	4682      	mov	sl, r0
 8015a66:	2800      	cmp	r0, #0
 8015a68:	d13c      	bne.n	8015ae4 <_dtoa_r+0x2ec>
 8015a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8015ad8 <_dtoa_r+0x2e0>)
 8015a6c:	4602      	mov	r2, r0
 8015a6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8015a72:	e6d8      	b.n	8015826 <_dtoa_r+0x2e>
 8015a74:	2301      	movs	r3, #1
 8015a76:	e7e0      	b.n	8015a3a <_dtoa_r+0x242>
 8015a78:	2401      	movs	r4, #1
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015a80:	f04f 33ff 	mov.w	r3, #4294967295
 8015a84:	9300      	str	r3, [sp, #0]
 8015a86:	9307      	str	r3, [sp, #28]
 8015a88:	2200      	movs	r2, #0
 8015a8a:	2312      	movs	r3, #18
 8015a8c:	e7d0      	b.n	8015a30 <_dtoa_r+0x238>
 8015a8e:	2301      	movs	r3, #1
 8015a90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015a92:	e7f5      	b.n	8015a80 <_dtoa_r+0x288>
 8015a94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a96:	9300      	str	r3, [sp, #0]
 8015a98:	9307      	str	r3, [sp, #28]
 8015a9a:	e7d7      	b.n	8015a4c <_dtoa_r+0x254>
 8015a9c:	3101      	adds	r1, #1
 8015a9e:	0052      	lsls	r2, r2, #1
 8015aa0:	e7d8      	b.n	8015a54 <_dtoa_r+0x25c>
 8015aa2:	bf00      	nop
 8015aa4:	f3af 8000 	nop.w
 8015aa8:	636f4361 	.word	0x636f4361
 8015aac:	3fd287a7 	.word	0x3fd287a7
 8015ab0:	8b60c8b3 	.word	0x8b60c8b3
 8015ab4:	3fc68a28 	.word	0x3fc68a28
 8015ab8:	509f79fb 	.word	0x509f79fb
 8015abc:	3fd34413 	.word	0x3fd34413
 8015ac0:	080d5811 	.word	0x080d5811
 8015ac4:	080d5828 	.word	0x080d5828
 8015ac8:	7ff00000 	.word	0x7ff00000
 8015acc:	080d57e1 	.word	0x080d57e1
 8015ad0:	3ff80000 	.word	0x3ff80000
 8015ad4:	080d5920 	.word	0x080d5920
 8015ad8:	080d5880 	.word	0x080d5880
 8015adc:	080d580d 	.word	0x080d580d
 8015ae0:	080d57e0 	.word	0x080d57e0
 8015ae4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015ae8:	6018      	str	r0, [r3, #0]
 8015aea:	9b07      	ldr	r3, [sp, #28]
 8015aec:	2b0e      	cmp	r3, #14
 8015aee:	f200 80a4 	bhi.w	8015c3a <_dtoa_r+0x442>
 8015af2:	2c00      	cmp	r4, #0
 8015af4:	f000 80a1 	beq.w	8015c3a <_dtoa_r+0x442>
 8015af8:	2f00      	cmp	r7, #0
 8015afa:	dd33      	ble.n	8015b64 <_dtoa_r+0x36c>
 8015afc:	4bad      	ldr	r3, [pc, #692]	@ (8015db4 <_dtoa_r+0x5bc>)
 8015afe:	f007 020f 	and.w	r2, r7, #15
 8015b02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015b06:	ed93 7b00 	vldr	d7, [r3]
 8015b0a:	05f8      	lsls	r0, r7, #23
 8015b0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015b10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015b14:	d516      	bpl.n	8015b44 <_dtoa_r+0x34c>
 8015b16:	4ba8      	ldr	r3, [pc, #672]	@ (8015db8 <_dtoa_r+0x5c0>)
 8015b18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015b1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015b20:	f7ea ff14 	bl	800094c <__aeabi_ddiv>
 8015b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b28:	f004 040f 	and.w	r4, r4, #15
 8015b2c:	2603      	movs	r6, #3
 8015b2e:	4da2      	ldr	r5, [pc, #648]	@ (8015db8 <_dtoa_r+0x5c0>)
 8015b30:	b954      	cbnz	r4, 8015b48 <_dtoa_r+0x350>
 8015b32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b3a:	f7ea ff07 	bl	800094c <__aeabi_ddiv>
 8015b3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b42:	e028      	b.n	8015b96 <_dtoa_r+0x39e>
 8015b44:	2602      	movs	r6, #2
 8015b46:	e7f2      	b.n	8015b2e <_dtoa_r+0x336>
 8015b48:	07e1      	lsls	r1, r4, #31
 8015b4a:	d508      	bpl.n	8015b5e <_dtoa_r+0x366>
 8015b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015b50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015b54:	f7ea fdd0 	bl	80006f8 <__aeabi_dmul>
 8015b58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015b5c:	3601      	adds	r6, #1
 8015b5e:	1064      	asrs	r4, r4, #1
 8015b60:	3508      	adds	r5, #8
 8015b62:	e7e5      	b.n	8015b30 <_dtoa_r+0x338>
 8015b64:	f000 80d2 	beq.w	8015d0c <_dtoa_r+0x514>
 8015b68:	427c      	negs	r4, r7
 8015b6a:	4b92      	ldr	r3, [pc, #584]	@ (8015db4 <_dtoa_r+0x5bc>)
 8015b6c:	4d92      	ldr	r5, [pc, #584]	@ (8015db8 <_dtoa_r+0x5c0>)
 8015b6e:	f004 020f 	and.w	r2, r4, #15
 8015b72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015b7e:	f7ea fdbb 	bl	80006f8 <__aeabi_dmul>
 8015b82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b86:	1124      	asrs	r4, r4, #4
 8015b88:	2300      	movs	r3, #0
 8015b8a:	2602      	movs	r6, #2
 8015b8c:	2c00      	cmp	r4, #0
 8015b8e:	f040 80b2 	bne.w	8015cf6 <_dtoa_r+0x4fe>
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d1d3      	bne.n	8015b3e <_dtoa_r+0x346>
 8015b96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015b98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	f000 80b7 	beq.w	8015d10 <_dtoa_r+0x518>
 8015ba2:	4b86      	ldr	r3, [pc, #536]	@ (8015dbc <_dtoa_r+0x5c4>)
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	4620      	mov	r0, r4
 8015ba8:	4629      	mov	r1, r5
 8015baa:	f7eb f817 	bl	8000bdc <__aeabi_dcmplt>
 8015bae:	2800      	cmp	r0, #0
 8015bb0:	f000 80ae 	beq.w	8015d10 <_dtoa_r+0x518>
 8015bb4:	9b07      	ldr	r3, [sp, #28]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	f000 80aa 	beq.w	8015d10 <_dtoa_r+0x518>
 8015bbc:	9b00      	ldr	r3, [sp, #0]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	dd37      	ble.n	8015c32 <_dtoa_r+0x43a>
 8015bc2:	1e7b      	subs	r3, r7, #1
 8015bc4:	9304      	str	r3, [sp, #16]
 8015bc6:	4620      	mov	r0, r4
 8015bc8:	4b7d      	ldr	r3, [pc, #500]	@ (8015dc0 <_dtoa_r+0x5c8>)
 8015bca:	2200      	movs	r2, #0
 8015bcc:	4629      	mov	r1, r5
 8015bce:	f7ea fd93 	bl	80006f8 <__aeabi_dmul>
 8015bd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015bd6:	9c00      	ldr	r4, [sp, #0]
 8015bd8:	3601      	adds	r6, #1
 8015bda:	4630      	mov	r0, r6
 8015bdc:	f7ea fd22 	bl	8000624 <__aeabi_i2d>
 8015be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015be4:	f7ea fd88 	bl	80006f8 <__aeabi_dmul>
 8015be8:	4b76      	ldr	r3, [pc, #472]	@ (8015dc4 <_dtoa_r+0x5cc>)
 8015bea:	2200      	movs	r2, #0
 8015bec:	f7ea fbce 	bl	800038c <__adddf3>
 8015bf0:	4605      	mov	r5, r0
 8015bf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015bf6:	2c00      	cmp	r4, #0
 8015bf8:	f040 808d 	bne.w	8015d16 <_dtoa_r+0x51e>
 8015bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015c00:	4b71      	ldr	r3, [pc, #452]	@ (8015dc8 <_dtoa_r+0x5d0>)
 8015c02:	2200      	movs	r2, #0
 8015c04:	f7ea fbc0 	bl	8000388 <__aeabi_dsub>
 8015c08:	4602      	mov	r2, r0
 8015c0a:	460b      	mov	r3, r1
 8015c0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015c10:	462a      	mov	r2, r5
 8015c12:	4633      	mov	r3, r6
 8015c14:	f7eb f800 	bl	8000c18 <__aeabi_dcmpgt>
 8015c18:	2800      	cmp	r0, #0
 8015c1a:	f040 828b 	bne.w	8016134 <_dtoa_r+0x93c>
 8015c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015c22:	462a      	mov	r2, r5
 8015c24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015c28:	f7ea ffd8 	bl	8000bdc <__aeabi_dcmplt>
 8015c2c:	2800      	cmp	r0, #0
 8015c2e:	f040 8128 	bne.w	8015e82 <_dtoa_r+0x68a>
 8015c32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8015c36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015c3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	f2c0 815a 	blt.w	8015ef6 <_dtoa_r+0x6fe>
 8015c42:	2f0e      	cmp	r7, #14
 8015c44:	f300 8157 	bgt.w	8015ef6 <_dtoa_r+0x6fe>
 8015c48:	4b5a      	ldr	r3, [pc, #360]	@ (8015db4 <_dtoa_r+0x5bc>)
 8015c4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015c4e:	ed93 7b00 	vldr	d7, [r3]
 8015c52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	ed8d 7b00 	vstr	d7, [sp]
 8015c5a:	da03      	bge.n	8015c64 <_dtoa_r+0x46c>
 8015c5c:	9b07      	ldr	r3, [sp, #28]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	f340 8101 	ble.w	8015e66 <_dtoa_r+0x66e>
 8015c64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015c68:	4656      	mov	r6, sl
 8015c6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015c6e:	4620      	mov	r0, r4
 8015c70:	4629      	mov	r1, r5
 8015c72:	f7ea fe6b 	bl	800094c <__aeabi_ddiv>
 8015c76:	f7ea ffef 	bl	8000c58 <__aeabi_d2iz>
 8015c7a:	4680      	mov	r8, r0
 8015c7c:	f7ea fcd2 	bl	8000624 <__aeabi_i2d>
 8015c80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015c84:	f7ea fd38 	bl	80006f8 <__aeabi_dmul>
 8015c88:	4602      	mov	r2, r0
 8015c8a:	460b      	mov	r3, r1
 8015c8c:	4620      	mov	r0, r4
 8015c8e:	4629      	mov	r1, r5
 8015c90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015c94:	f7ea fb78 	bl	8000388 <__aeabi_dsub>
 8015c98:	f806 4b01 	strb.w	r4, [r6], #1
 8015c9c:	9d07      	ldr	r5, [sp, #28]
 8015c9e:	eba6 040a 	sub.w	r4, r6, sl
 8015ca2:	42a5      	cmp	r5, r4
 8015ca4:	4602      	mov	r2, r0
 8015ca6:	460b      	mov	r3, r1
 8015ca8:	f040 8117 	bne.w	8015eda <_dtoa_r+0x6e2>
 8015cac:	f7ea fb6e 	bl	800038c <__adddf3>
 8015cb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015cb4:	4604      	mov	r4, r0
 8015cb6:	460d      	mov	r5, r1
 8015cb8:	f7ea ffae 	bl	8000c18 <__aeabi_dcmpgt>
 8015cbc:	2800      	cmp	r0, #0
 8015cbe:	f040 80f9 	bne.w	8015eb4 <_dtoa_r+0x6bc>
 8015cc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015cc6:	4620      	mov	r0, r4
 8015cc8:	4629      	mov	r1, r5
 8015cca:	f7ea ff7d 	bl	8000bc8 <__aeabi_dcmpeq>
 8015cce:	b118      	cbz	r0, 8015cd8 <_dtoa_r+0x4e0>
 8015cd0:	f018 0f01 	tst.w	r8, #1
 8015cd4:	f040 80ee 	bne.w	8015eb4 <_dtoa_r+0x6bc>
 8015cd8:	4649      	mov	r1, r9
 8015cda:	4658      	mov	r0, fp
 8015cdc:	f000 fbda 	bl	8016494 <_Bfree>
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	7033      	strb	r3, [r6, #0]
 8015ce4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015ce6:	3701      	adds	r7, #1
 8015ce8:	601f      	str	r7, [r3, #0]
 8015cea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	f000 831d 	beq.w	801632c <_dtoa_r+0xb34>
 8015cf2:	601e      	str	r6, [r3, #0]
 8015cf4:	e31a      	b.n	801632c <_dtoa_r+0xb34>
 8015cf6:	07e2      	lsls	r2, r4, #31
 8015cf8:	d505      	bpl.n	8015d06 <_dtoa_r+0x50e>
 8015cfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015cfe:	f7ea fcfb 	bl	80006f8 <__aeabi_dmul>
 8015d02:	3601      	adds	r6, #1
 8015d04:	2301      	movs	r3, #1
 8015d06:	1064      	asrs	r4, r4, #1
 8015d08:	3508      	adds	r5, #8
 8015d0a:	e73f      	b.n	8015b8c <_dtoa_r+0x394>
 8015d0c:	2602      	movs	r6, #2
 8015d0e:	e742      	b.n	8015b96 <_dtoa_r+0x39e>
 8015d10:	9c07      	ldr	r4, [sp, #28]
 8015d12:	9704      	str	r7, [sp, #16]
 8015d14:	e761      	b.n	8015bda <_dtoa_r+0x3e2>
 8015d16:	4b27      	ldr	r3, [pc, #156]	@ (8015db4 <_dtoa_r+0x5bc>)
 8015d18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015d1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015d1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015d22:	4454      	add	r4, sl
 8015d24:	2900      	cmp	r1, #0
 8015d26:	d053      	beq.n	8015dd0 <_dtoa_r+0x5d8>
 8015d28:	4928      	ldr	r1, [pc, #160]	@ (8015dcc <_dtoa_r+0x5d4>)
 8015d2a:	2000      	movs	r0, #0
 8015d2c:	f7ea fe0e 	bl	800094c <__aeabi_ddiv>
 8015d30:	4633      	mov	r3, r6
 8015d32:	462a      	mov	r2, r5
 8015d34:	f7ea fb28 	bl	8000388 <__aeabi_dsub>
 8015d38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015d3c:	4656      	mov	r6, sl
 8015d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d42:	f7ea ff89 	bl	8000c58 <__aeabi_d2iz>
 8015d46:	4605      	mov	r5, r0
 8015d48:	f7ea fc6c 	bl	8000624 <__aeabi_i2d>
 8015d4c:	4602      	mov	r2, r0
 8015d4e:	460b      	mov	r3, r1
 8015d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d54:	f7ea fb18 	bl	8000388 <__aeabi_dsub>
 8015d58:	3530      	adds	r5, #48	@ 0x30
 8015d5a:	4602      	mov	r2, r0
 8015d5c:	460b      	mov	r3, r1
 8015d5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015d62:	f806 5b01 	strb.w	r5, [r6], #1
 8015d66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015d6a:	f7ea ff37 	bl	8000bdc <__aeabi_dcmplt>
 8015d6e:	2800      	cmp	r0, #0
 8015d70:	d171      	bne.n	8015e56 <_dtoa_r+0x65e>
 8015d72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015d76:	4911      	ldr	r1, [pc, #68]	@ (8015dbc <_dtoa_r+0x5c4>)
 8015d78:	2000      	movs	r0, #0
 8015d7a:	f7ea fb05 	bl	8000388 <__aeabi_dsub>
 8015d7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015d82:	f7ea ff2b 	bl	8000bdc <__aeabi_dcmplt>
 8015d86:	2800      	cmp	r0, #0
 8015d88:	f040 8095 	bne.w	8015eb6 <_dtoa_r+0x6be>
 8015d8c:	42a6      	cmp	r6, r4
 8015d8e:	f43f af50 	beq.w	8015c32 <_dtoa_r+0x43a>
 8015d92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015d96:	4b0a      	ldr	r3, [pc, #40]	@ (8015dc0 <_dtoa_r+0x5c8>)
 8015d98:	2200      	movs	r2, #0
 8015d9a:	f7ea fcad 	bl	80006f8 <__aeabi_dmul>
 8015d9e:	4b08      	ldr	r3, [pc, #32]	@ (8015dc0 <_dtoa_r+0x5c8>)
 8015da0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015da4:	2200      	movs	r2, #0
 8015da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015daa:	f7ea fca5 	bl	80006f8 <__aeabi_dmul>
 8015dae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015db2:	e7c4      	b.n	8015d3e <_dtoa_r+0x546>
 8015db4:	080d5920 	.word	0x080d5920
 8015db8:	080d58f8 	.word	0x080d58f8
 8015dbc:	3ff00000 	.word	0x3ff00000
 8015dc0:	40240000 	.word	0x40240000
 8015dc4:	401c0000 	.word	0x401c0000
 8015dc8:	40140000 	.word	0x40140000
 8015dcc:	3fe00000 	.word	0x3fe00000
 8015dd0:	4631      	mov	r1, r6
 8015dd2:	4628      	mov	r0, r5
 8015dd4:	f7ea fc90 	bl	80006f8 <__aeabi_dmul>
 8015dd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015ddc:	9415      	str	r4, [sp, #84]	@ 0x54
 8015dde:	4656      	mov	r6, sl
 8015de0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015de4:	f7ea ff38 	bl	8000c58 <__aeabi_d2iz>
 8015de8:	4605      	mov	r5, r0
 8015dea:	f7ea fc1b 	bl	8000624 <__aeabi_i2d>
 8015dee:	4602      	mov	r2, r0
 8015df0:	460b      	mov	r3, r1
 8015df2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015df6:	f7ea fac7 	bl	8000388 <__aeabi_dsub>
 8015dfa:	3530      	adds	r5, #48	@ 0x30
 8015dfc:	f806 5b01 	strb.w	r5, [r6], #1
 8015e00:	4602      	mov	r2, r0
 8015e02:	460b      	mov	r3, r1
 8015e04:	42a6      	cmp	r6, r4
 8015e06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015e0a:	f04f 0200 	mov.w	r2, #0
 8015e0e:	d124      	bne.n	8015e5a <_dtoa_r+0x662>
 8015e10:	4bac      	ldr	r3, [pc, #688]	@ (80160c4 <_dtoa_r+0x8cc>)
 8015e12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015e16:	f7ea fab9 	bl	800038c <__adddf3>
 8015e1a:	4602      	mov	r2, r0
 8015e1c:	460b      	mov	r3, r1
 8015e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015e22:	f7ea fef9 	bl	8000c18 <__aeabi_dcmpgt>
 8015e26:	2800      	cmp	r0, #0
 8015e28:	d145      	bne.n	8015eb6 <_dtoa_r+0x6be>
 8015e2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015e2e:	49a5      	ldr	r1, [pc, #660]	@ (80160c4 <_dtoa_r+0x8cc>)
 8015e30:	2000      	movs	r0, #0
 8015e32:	f7ea faa9 	bl	8000388 <__aeabi_dsub>
 8015e36:	4602      	mov	r2, r0
 8015e38:	460b      	mov	r3, r1
 8015e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015e3e:	f7ea fecd 	bl	8000bdc <__aeabi_dcmplt>
 8015e42:	2800      	cmp	r0, #0
 8015e44:	f43f aef5 	beq.w	8015c32 <_dtoa_r+0x43a>
 8015e48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015e4a:	1e73      	subs	r3, r6, #1
 8015e4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8015e4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015e52:	2b30      	cmp	r3, #48	@ 0x30
 8015e54:	d0f8      	beq.n	8015e48 <_dtoa_r+0x650>
 8015e56:	9f04      	ldr	r7, [sp, #16]
 8015e58:	e73e      	b.n	8015cd8 <_dtoa_r+0x4e0>
 8015e5a:	4b9b      	ldr	r3, [pc, #620]	@ (80160c8 <_dtoa_r+0x8d0>)
 8015e5c:	f7ea fc4c 	bl	80006f8 <__aeabi_dmul>
 8015e60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015e64:	e7bc      	b.n	8015de0 <_dtoa_r+0x5e8>
 8015e66:	d10c      	bne.n	8015e82 <_dtoa_r+0x68a>
 8015e68:	4b98      	ldr	r3, [pc, #608]	@ (80160cc <_dtoa_r+0x8d4>)
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e70:	f7ea fc42 	bl	80006f8 <__aeabi_dmul>
 8015e74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015e78:	f7ea fec4 	bl	8000c04 <__aeabi_dcmpge>
 8015e7c:	2800      	cmp	r0, #0
 8015e7e:	f000 8157 	beq.w	8016130 <_dtoa_r+0x938>
 8015e82:	2400      	movs	r4, #0
 8015e84:	4625      	mov	r5, r4
 8015e86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e88:	43db      	mvns	r3, r3
 8015e8a:	9304      	str	r3, [sp, #16]
 8015e8c:	4656      	mov	r6, sl
 8015e8e:	2700      	movs	r7, #0
 8015e90:	4621      	mov	r1, r4
 8015e92:	4658      	mov	r0, fp
 8015e94:	f000 fafe 	bl	8016494 <_Bfree>
 8015e98:	2d00      	cmp	r5, #0
 8015e9a:	d0dc      	beq.n	8015e56 <_dtoa_r+0x65e>
 8015e9c:	b12f      	cbz	r7, 8015eaa <_dtoa_r+0x6b2>
 8015e9e:	42af      	cmp	r7, r5
 8015ea0:	d003      	beq.n	8015eaa <_dtoa_r+0x6b2>
 8015ea2:	4639      	mov	r1, r7
 8015ea4:	4658      	mov	r0, fp
 8015ea6:	f000 faf5 	bl	8016494 <_Bfree>
 8015eaa:	4629      	mov	r1, r5
 8015eac:	4658      	mov	r0, fp
 8015eae:	f000 faf1 	bl	8016494 <_Bfree>
 8015eb2:	e7d0      	b.n	8015e56 <_dtoa_r+0x65e>
 8015eb4:	9704      	str	r7, [sp, #16]
 8015eb6:	4633      	mov	r3, r6
 8015eb8:	461e      	mov	r6, r3
 8015eba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015ebe:	2a39      	cmp	r2, #57	@ 0x39
 8015ec0:	d107      	bne.n	8015ed2 <_dtoa_r+0x6da>
 8015ec2:	459a      	cmp	sl, r3
 8015ec4:	d1f8      	bne.n	8015eb8 <_dtoa_r+0x6c0>
 8015ec6:	9a04      	ldr	r2, [sp, #16]
 8015ec8:	3201      	adds	r2, #1
 8015eca:	9204      	str	r2, [sp, #16]
 8015ecc:	2230      	movs	r2, #48	@ 0x30
 8015ece:	f88a 2000 	strb.w	r2, [sl]
 8015ed2:	781a      	ldrb	r2, [r3, #0]
 8015ed4:	3201      	adds	r2, #1
 8015ed6:	701a      	strb	r2, [r3, #0]
 8015ed8:	e7bd      	b.n	8015e56 <_dtoa_r+0x65e>
 8015eda:	4b7b      	ldr	r3, [pc, #492]	@ (80160c8 <_dtoa_r+0x8d0>)
 8015edc:	2200      	movs	r2, #0
 8015ede:	f7ea fc0b 	bl	80006f8 <__aeabi_dmul>
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	4604      	mov	r4, r0
 8015ee8:	460d      	mov	r5, r1
 8015eea:	f7ea fe6d 	bl	8000bc8 <__aeabi_dcmpeq>
 8015eee:	2800      	cmp	r0, #0
 8015ef0:	f43f aebb 	beq.w	8015c6a <_dtoa_r+0x472>
 8015ef4:	e6f0      	b.n	8015cd8 <_dtoa_r+0x4e0>
 8015ef6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015ef8:	2a00      	cmp	r2, #0
 8015efa:	f000 80db 	beq.w	80160b4 <_dtoa_r+0x8bc>
 8015efe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f00:	2a01      	cmp	r2, #1
 8015f02:	f300 80bf 	bgt.w	8016084 <_dtoa_r+0x88c>
 8015f06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015f08:	2a00      	cmp	r2, #0
 8015f0a:	f000 80b7 	beq.w	801607c <_dtoa_r+0x884>
 8015f0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015f12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015f14:	4646      	mov	r6, r8
 8015f16:	9a08      	ldr	r2, [sp, #32]
 8015f18:	2101      	movs	r1, #1
 8015f1a:	441a      	add	r2, r3
 8015f1c:	4658      	mov	r0, fp
 8015f1e:	4498      	add	r8, r3
 8015f20:	9208      	str	r2, [sp, #32]
 8015f22:	f000 fb6b 	bl	80165fc <__i2b>
 8015f26:	4605      	mov	r5, r0
 8015f28:	b15e      	cbz	r6, 8015f42 <_dtoa_r+0x74a>
 8015f2a:	9b08      	ldr	r3, [sp, #32]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	dd08      	ble.n	8015f42 <_dtoa_r+0x74a>
 8015f30:	42b3      	cmp	r3, r6
 8015f32:	9a08      	ldr	r2, [sp, #32]
 8015f34:	bfa8      	it	ge
 8015f36:	4633      	movge	r3, r6
 8015f38:	eba8 0803 	sub.w	r8, r8, r3
 8015f3c:	1af6      	subs	r6, r6, r3
 8015f3e:	1ad3      	subs	r3, r2, r3
 8015f40:	9308      	str	r3, [sp, #32]
 8015f42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f44:	b1f3      	cbz	r3, 8015f84 <_dtoa_r+0x78c>
 8015f46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	f000 80b7 	beq.w	80160bc <_dtoa_r+0x8c4>
 8015f4e:	b18c      	cbz	r4, 8015f74 <_dtoa_r+0x77c>
 8015f50:	4629      	mov	r1, r5
 8015f52:	4622      	mov	r2, r4
 8015f54:	4658      	mov	r0, fp
 8015f56:	f000 fc11 	bl	801677c <__pow5mult>
 8015f5a:	464a      	mov	r2, r9
 8015f5c:	4601      	mov	r1, r0
 8015f5e:	4605      	mov	r5, r0
 8015f60:	4658      	mov	r0, fp
 8015f62:	f000 fb61 	bl	8016628 <__multiply>
 8015f66:	4649      	mov	r1, r9
 8015f68:	9004      	str	r0, [sp, #16]
 8015f6a:	4658      	mov	r0, fp
 8015f6c:	f000 fa92 	bl	8016494 <_Bfree>
 8015f70:	9b04      	ldr	r3, [sp, #16]
 8015f72:	4699      	mov	r9, r3
 8015f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f76:	1b1a      	subs	r2, r3, r4
 8015f78:	d004      	beq.n	8015f84 <_dtoa_r+0x78c>
 8015f7a:	4649      	mov	r1, r9
 8015f7c:	4658      	mov	r0, fp
 8015f7e:	f000 fbfd 	bl	801677c <__pow5mult>
 8015f82:	4681      	mov	r9, r0
 8015f84:	2101      	movs	r1, #1
 8015f86:	4658      	mov	r0, fp
 8015f88:	f000 fb38 	bl	80165fc <__i2b>
 8015f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f8e:	4604      	mov	r4, r0
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	f000 81cf 	beq.w	8016334 <_dtoa_r+0xb3c>
 8015f96:	461a      	mov	r2, r3
 8015f98:	4601      	mov	r1, r0
 8015f9a:	4658      	mov	r0, fp
 8015f9c:	f000 fbee 	bl	801677c <__pow5mult>
 8015fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015fa2:	2b01      	cmp	r3, #1
 8015fa4:	4604      	mov	r4, r0
 8015fa6:	f300 8095 	bgt.w	80160d4 <_dtoa_r+0x8dc>
 8015faa:	9b02      	ldr	r3, [sp, #8]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	f040 8087 	bne.w	80160c0 <_dtoa_r+0x8c8>
 8015fb2:	9b03      	ldr	r3, [sp, #12]
 8015fb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	f040 8089 	bne.w	80160d0 <_dtoa_r+0x8d8>
 8015fbe:	9b03      	ldr	r3, [sp, #12]
 8015fc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015fc4:	0d1b      	lsrs	r3, r3, #20
 8015fc6:	051b      	lsls	r3, r3, #20
 8015fc8:	b12b      	cbz	r3, 8015fd6 <_dtoa_r+0x7de>
 8015fca:	9b08      	ldr	r3, [sp, #32]
 8015fcc:	3301      	adds	r3, #1
 8015fce:	9308      	str	r3, [sp, #32]
 8015fd0:	f108 0801 	add.w	r8, r8, #1
 8015fd4:	2301      	movs	r3, #1
 8015fd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8015fd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	f000 81b0 	beq.w	8016340 <_dtoa_r+0xb48>
 8015fe0:	6923      	ldr	r3, [r4, #16]
 8015fe2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015fe6:	6918      	ldr	r0, [r3, #16]
 8015fe8:	f000 fabc 	bl	8016564 <__hi0bits>
 8015fec:	f1c0 0020 	rsb	r0, r0, #32
 8015ff0:	9b08      	ldr	r3, [sp, #32]
 8015ff2:	4418      	add	r0, r3
 8015ff4:	f010 001f 	ands.w	r0, r0, #31
 8015ff8:	d077      	beq.n	80160ea <_dtoa_r+0x8f2>
 8015ffa:	f1c0 0320 	rsb	r3, r0, #32
 8015ffe:	2b04      	cmp	r3, #4
 8016000:	dd6b      	ble.n	80160da <_dtoa_r+0x8e2>
 8016002:	9b08      	ldr	r3, [sp, #32]
 8016004:	f1c0 001c 	rsb	r0, r0, #28
 8016008:	4403      	add	r3, r0
 801600a:	4480      	add	r8, r0
 801600c:	4406      	add	r6, r0
 801600e:	9308      	str	r3, [sp, #32]
 8016010:	f1b8 0f00 	cmp.w	r8, #0
 8016014:	dd05      	ble.n	8016022 <_dtoa_r+0x82a>
 8016016:	4649      	mov	r1, r9
 8016018:	4642      	mov	r2, r8
 801601a:	4658      	mov	r0, fp
 801601c:	f000 fc08 	bl	8016830 <__lshift>
 8016020:	4681      	mov	r9, r0
 8016022:	9b08      	ldr	r3, [sp, #32]
 8016024:	2b00      	cmp	r3, #0
 8016026:	dd05      	ble.n	8016034 <_dtoa_r+0x83c>
 8016028:	4621      	mov	r1, r4
 801602a:	461a      	mov	r2, r3
 801602c:	4658      	mov	r0, fp
 801602e:	f000 fbff 	bl	8016830 <__lshift>
 8016032:	4604      	mov	r4, r0
 8016034:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016036:	2b00      	cmp	r3, #0
 8016038:	d059      	beq.n	80160ee <_dtoa_r+0x8f6>
 801603a:	4621      	mov	r1, r4
 801603c:	4648      	mov	r0, r9
 801603e:	f000 fc63 	bl	8016908 <__mcmp>
 8016042:	2800      	cmp	r0, #0
 8016044:	da53      	bge.n	80160ee <_dtoa_r+0x8f6>
 8016046:	1e7b      	subs	r3, r7, #1
 8016048:	9304      	str	r3, [sp, #16]
 801604a:	4649      	mov	r1, r9
 801604c:	2300      	movs	r3, #0
 801604e:	220a      	movs	r2, #10
 8016050:	4658      	mov	r0, fp
 8016052:	f000 fa41 	bl	80164d8 <__multadd>
 8016056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016058:	4681      	mov	r9, r0
 801605a:	2b00      	cmp	r3, #0
 801605c:	f000 8172 	beq.w	8016344 <_dtoa_r+0xb4c>
 8016060:	2300      	movs	r3, #0
 8016062:	4629      	mov	r1, r5
 8016064:	220a      	movs	r2, #10
 8016066:	4658      	mov	r0, fp
 8016068:	f000 fa36 	bl	80164d8 <__multadd>
 801606c:	9b00      	ldr	r3, [sp, #0]
 801606e:	2b00      	cmp	r3, #0
 8016070:	4605      	mov	r5, r0
 8016072:	dc67      	bgt.n	8016144 <_dtoa_r+0x94c>
 8016074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016076:	2b02      	cmp	r3, #2
 8016078:	dc41      	bgt.n	80160fe <_dtoa_r+0x906>
 801607a:	e063      	b.n	8016144 <_dtoa_r+0x94c>
 801607c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801607e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8016082:	e746      	b.n	8015f12 <_dtoa_r+0x71a>
 8016084:	9b07      	ldr	r3, [sp, #28]
 8016086:	1e5c      	subs	r4, r3, #1
 8016088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801608a:	42a3      	cmp	r3, r4
 801608c:	bfbf      	itttt	lt
 801608e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8016090:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8016092:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8016094:	1ae3      	sublt	r3, r4, r3
 8016096:	bfb4      	ite	lt
 8016098:	18d2      	addlt	r2, r2, r3
 801609a:	1b1c      	subge	r4, r3, r4
 801609c:	9b07      	ldr	r3, [sp, #28]
 801609e:	bfbc      	itt	lt
 80160a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80160a2:	2400      	movlt	r4, #0
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	bfb5      	itete	lt
 80160a8:	eba8 0603 	sublt.w	r6, r8, r3
 80160ac:	9b07      	ldrge	r3, [sp, #28]
 80160ae:	2300      	movlt	r3, #0
 80160b0:	4646      	movge	r6, r8
 80160b2:	e730      	b.n	8015f16 <_dtoa_r+0x71e>
 80160b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80160b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80160b8:	4646      	mov	r6, r8
 80160ba:	e735      	b.n	8015f28 <_dtoa_r+0x730>
 80160bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80160be:	e75c      	b.n	8015f7a <_dtoa_r+0x782>
 80160c0:	2300      	movs	r3, #0
 80160c2:	e788      	b.n	8015fd6 <_dtoa_r+0x7de>
 80160c4:	3fe00000 	.word	0x3fe00000
 80160c8:	40240000 	.word	0x40240000
 80160cc:	40140000 	.word	0x40140000
 80160d0:	9b02      	ldr	r3, [sp, #8]
 80160d2:	e780      	b.n	8015fd6 <_dtoa_r+0x7de>
 80160d4:	2300      	movs	r3, #0
 80160d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80160d8:	e782      	b.n	8015fe0 <_dtoa_r+0x7e8>
 80160da:	d099      	beq.n	8016010 <_dtoa_r+0x818>
 80160dc:	9a08      	ldr	r2, [sp, #32]
 80160de:	331c      	adds	r3, #28
 80160e0:	441a      	add	r2, r3
 80160e2:	4498      	add	r8, r3
 80160e4:	441e      	add	r6, r3
 80160e6:	9208      	str	r2, [sp, #32]
 80160e8:	e792      	b.n	8016010 <_dtoa_r+0x818>
 80160ea:	4603      	mov	r3, r0
 80160ec:	e7f6      	b.n	80160dc <_dtoa_r+0x8e4>
 80160ee:	9b07      	ldr	r3, [sp, #28]
 80160f0:	9704      	str	r7, [sp, #16]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	dc20      	bgt.n	8016138 <_dtoa_r+0x940>
 80160f6:	9300      	str	r3, [sp, #0]
 80160f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160fa:	2b02      	cmp	r3, #2
 80160fc:	dd1e      	ble.n	801613c <_dtoa_r+0x944>
 80160fe:	9b00      	ldr	r3, [sp, #0]
 8016100:	2b00      	cmp	r3, #0
 8016102:	f47f aec0 	bne.w	8015e86 <_dtoa_r+0x68e>
 8016106:	4621      	mov	r1, r4
 8016108:	2205      	movs	r2, #5
 801610a:	4658      	mov	r0, fp
 801610c:	f000 f9e4 	bl	80164d8 <__multadd>
 8016110:	4601      	mov	r1, r0
 8016112:	4604      	mov	r4, r0
 8016114:	4648      	mov	r0, r9
 8016116:	f000 fbf7 	bl	8016908 <__mcmp>
 801611a:	2800      	cmp	r0, #0
 801611c:	f77f aeb3 	ble.w	8015e86 <_dtoa_r+0x68e>
 8016120:	4656      	mov	r6, sl
 8016122:	2331      	movs	r3, #49	@ 0x31
 8016124:	f806 3b01 	strb.w	r3, [r6], #1
 8016128:	9b04      	ldr	r3, [sp, #16]
 801612a:	3301      	adds	r3, #1
 801612c:	9304      	str	r3, [sp, #16]
 801612e:	e6ae      	b.n	8015e8e <_dtoa_r+0x696>
 8016130:	9c07      	ldr	r4, [sp, #28]
 8016132:	9704      	str	r7, [sp, #16]
 8016134:	4625      	mov	r5, r4
 8016136:	e7f3      	b.n	8016120 <_dtoa_r+0x928>
 8016138:	9b07      	ldr	r3, [sp, #28]
 801613a:	9300      	str	r3, [sp, #0]
 801613c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801613e:	2b00      	cmp	r3, #0
 8016140:	f000 8104 	beq.w	801634c <_dtoa_r+0xb54>
 8016144:	2e00      	cmp	r6, #0
 8016146:	dd05      	ble.n	8016154 <_dtoa_r+0x95c>
 8016148:	4629      	mov	r1, r5
 801614a:	4632      	mov	r2, r6
 801614c:	4658      	mov	r0, fp
 801614e:	f000 fb6f 	bl	8016830 <__lshift>
 8016152:	4605      	mov	r5, r0
 8016154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016156:	2b00      	cmp	r3, #0
 8016158:	d05a      	beq.n	8016210 <_dtoa_r+0xa18>
 801615a:	6869      	ldr	r1, [r5, #4]
 801615c:	4658      	mov	r0, fp
 801615e:	f000 f959 	bl	8016414 <_Balloc>
 8016162:	4606      	mov	r6, r0
 8016164:	b928      	cbnz	r0, 8016172 <_dtoa_r+0x97a>
 8016166:	4b84      	ldr	r3, [pc, #528]	@ (8016378 <_dtoa_r+0xb80>)
 8016168:	4602      	mov	r2, r0
 801616a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801616e:	f7ff bb5a 	b.w	8015826 <_dtoa_r+0x2e>
 8016172:	692a      	ldr	r2, [r5, #16]
 8016174:	3202      	adds	r2, #2
 8016176:	0092      	lsls	r2, r2, #2
 8016178:	f105 010c 	add.w	r1, r5, #12
 801617c:	300c      	adds	r0, #12
 801617e:	f7ff faa2 	bl	80156c6 <memcpy>
 8016182:	2201      	movs	r2, #1
 8016184:	4631      	mov	r1, r6
 8016186:	4658      	mov	r0, fp
 8016188:	f000 fb52 	bl	8016830 <__lshift>
 801618c:	f10a 0301 	add.w	r3, sl, #1
 8016190:	9307      	str	r3, [sp, #28]
 8016192:	9b00      	ldr	r3, [sp, #0]
 8016194:	4453      	add	r3, sl
 8016196:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016198:	9b02      	ldr	r3, [sp, #8]
 801619a:	f003 0301 	and.w	r3, r3, #1
 801619e:	462f      	mov	r7, r5
 80161a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80161a2:	4605      	mov	r5, r0
 80161a4:	9b07      	ldr	r3, [sp, #28]
 80161a6:	4621      	mov	r1, r4
 80161a8:	3b01      	subs	r3, #1
 80161aa:	4648      	mov	r0, r9
 80161ac:	9300      	str	r3, [sp, #0]
 80161ae:	f7ff fa98 	bl	80156e2 <quorem>
 80161b2:	4639      	mov	r1, r7
 80161b4:	9002      	str	r0, [sp, #8]
 80161b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80161ba:	4648      	mov	r0, r9
 80161bc:	f000 fba4 	bl	8016908 <__mcmp>
 80161c0:	462a      	mov	r2, r5
 80161c2:	9008      	str	r0, [sp, #32]
 80161c4:	4621      	mov	r1, r4
 80161c6:	4658      	mov	r0, fp
 80161c8:	f000 fbba 	bl	8016940 <__mdiff>
 80161cc:	68c2      	ldr	r2, [r0, #12]
 80161ce:	4606      	mov	r6, r0
 80161d0:	bb02      	cbnz	r2, 8016214 <_dtoa_r+0xa1c>
 80161d2:	4601      	mov	r1, r0
 80161d4:	4648      	mov	r0, r9
 80161d6:	f000 fb97 	bl	8016908 <__mcmp>
 80161da:	4602      	mov	r2, r0
 80161dc:	4631      	mov	r1, r6
 80161de:	4658      	mov	r0, fp
 80161e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80161e2:	f000 f957 	bl	8016494 <_Bfree>
 80161e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80161ea:	9e07      	ldr	r6, [sp, #28]
 80161ec:	ea43 0102 	orr.w	r1, r3, r2
 80161f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80161f2:	4319      	orrs	r1, r3
 80161f4:	d110      	bne.n	8016218 <_dtoa_r+0xa20>
 80161f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80161fa:	d029      	beq.n	8016250 <_dtoa_r+0xa58>
 80161fc:	9b08      	ldr	r3, [sp, #32]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	dd02      	ble.n	8016208 <_dtoa_r+0xa10>
 8016202:	9b02      	ldr	r3, [sp, #8]
 8016204:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8016208:	9b00      	ldr	r3, [sp, #0]
 801620a:	f883 8000 	strb.w	r8, [r3]
 801620e:	e63f      	b.n	8015e90 <_dtoa_r+0x698>
 8016210:	4628      	mov	r0, r5
 8016212:	e7bb      	b.n	801618c <_dtoa_r+0x994>
 8016214:	2201      	movs	r2, #1
 8016216:	e7e1      	b.n	80161dc <_dtoa_r+0x9e4>
 8016218:	9b08      	ldr	r3, [sp, #32]
 801621a:	2b00      	cmp	r3, #0
 801621c:	db04      	blt.n	8016228 <_dtoa_r+0xa30>
 801621e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016220:	430b      	orrs	r3, r1
 8016222:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016224:	430b      	orrs	r3, r1
 8016226:	d120      	bne.n	801626a <_dtoa_r+0xa72>
 8016228:	2a00      	cmp	r2, #0
 801622a:	dded      	ble.n	8016208 <_dtoa_r+0xa10>
 801622c:	4649      	mov	r1, r9
 801622e:	2201      	movs	r2, #1
 8016230:	4658      	mov	r0, fp
 8016232:	f000 fafd 	bl	8016830 <__lshift>
 8016236:	4621      	mov	r1, r4
 8016238:	4681      	mov	r9, r0
 801623a:	f000 fb65 	bl	8016908 <__mcmp>
 801623e:	2800      	cmp	r0, #0
 8016240:	dc03      	bgt.n	801624a <_dtoa_r+0xa52>
 8016242:	d1e1      	bne.n	8016208 <_dtoa_r+0xa10>
 8016244:	f018 0f01 	tst.w	r8, #1
 8016248:	d0de      	beq.n	8016208 <_dtoa_r+0xa10>
 801624a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801624e:	d1d8      	bne.n	8016202 <_dtoa_r+0xa0a>
 8016250:	9a00      	ldr	r2, [sp, #0]
 8016252:	2339      	movs	r3, #57	@ 0x39
 8016254:	7013      	strb	r3, [r2, #0]
 8016256:	4633      	mov	r3, r6
 8016258:	461e      	mov	r6, r3
 801625a:	3b01      	subs	r3, #1
 801625c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016260:	2a39      	cmp	r2, #57	@ 0x39
 8016262:	d052      	beq.n	801630a <_dtoa_r+0xb12>
 8016264:	3201      	adds	r2, #1
 8016266:	701a      	strb	r2, [r3, #0]
 8016268:	e612      	b.n	8015e90 <_dtoa_r+0x698>
 801626a:	2a00      	cmp	r2, #0
 801626c:	dd07      	ble.n	801627e <_dtoa_r+0xa86>
 801626e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016272:	d0ed      	beq.n	8016250 <_dtoa_r+0xa58>
 8016274:	9a00      	ldr	r2, [sp, #0]
 8016276:	f108 0301 	add.w	r3, r8, #1
 801627a:	7013      	strb	r3, [r2, #0]
 801627c:	e608      	b.n	8015e90 <_dtoa_r+0x698>
 801627e:	9b07      	ldr	r3, [sp, #28]
 8016280:	9a07      	ldr	r2, [sp, #28]
 8016282:	f803 8c01 	strb.w	r8, [r3, #-1]
 8016286:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016288:	4293      	cmp	r3, r2
 801628a:	d028      	beq.n	80162de <_dtoa_r+0xae6>
 801628c:	4649      	mov	r1, r9
 801628e:	2300      	movs	r3, #0
 8016290:	220a      	movs	r2, #10
 8016292:	4658      	mov	r0, fp
 8016294:	f000 f920 	bl	80164d8 <__multadd>
 8016298:	42af      	cmp	r7, r5
 801629a:	4681      	mov	r9, r0
 801629c:	f04f 0300 	mov.w	r3, #0
 80162a0:	f04f 020a 	mov.w	r2, #10
 80162a4:	4639      	mov	r1, r7
 80162a6:	4658      	mov	r0, fp
 80162a8:	d107      	bne.n	80162ba <_dtoa_r+0xac2>
 80162aa:	f000 f915 	bl	80164d8 <__multadd>
 80162ae:	4607      	mov	r7, r0
 80162b0:	4605      	mov	r5, r0
 80162b2:	9b07      	ldr	r3, [sp, #28]
 80162b4:	3301      	adds	r3, #1
 80162b6:	9307      	str	r3, [sp, #28]
 80162b8:	e774      	b.n	80161a4 <_dtoa_r+0x9ac>
 80162ba:	f000 f90d 	bl	80164d8 <__multadd>
 80162be:	4629      	mov	r1, r5
 80162c0:	4607      	mov	r7, r0
 80162c2:	2300      	movs	r3, #0
 80162c4:	220a      	movs	r2, #10
 80162c6:	4658      	mov	r0, fp
 80162c8:	f000 f906 	bl	80164d8 <__multadd>
 80162cc:	4605      	mov	r5, r0
 80162ce:	e7f0      	b.n	80162b2 <_dtoa_r+0xaba>
 80162d0:	9b00      	ldr	r3, [sp, #0]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	bfcc      	ite	gt
 80162d6:	461e      	movgt	r6, r3
 80162d8:	2601      	movle	r6, #1
 80162da:	4456      	add	r6, sl
 80162dc:	2700      	movs	r7, #0
 80162de:	4649      	mov	r1, r9
 80162e0:	2201      	movs	r2, #1
 80162e2:	4658      	mov	r0, fp
 80162e4:	f000 faa4 	bl	8016830 <__lshift>
 80162e8:	4621      	mov	r1, r4
 80162ea:	4681      	mov	r9, r0
 80162ec:	f000 fb0c 	bl	8016908 <__mcmp>
 80162f0:	2800      	cmp	r0, #0
 80162f2:	dcb0      	bgt.n	8016256 <_dtoa_r+0xa5e>
 80162f4:	d102      	bne.n	80162fc <_dtoa_r+0xb04>
 80162f6:	f018 0f01 	tst.w	r8, #1
 80162fa:	d1ac      	bne.n	8016256 <_dtoa_r+0xa5e>
 80162fc:	4633      	mov	r3, r6
 80162fe:	461e      	mov	r6, r3
 8016300:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016304:	2a30      	cmp	r2, #48	@ 0x30
 8016306:	d0fa      	beq.n	80162fe <_dtoa_r+0xb06>
 8016308:	e5c2      	b.n	8015e90 <_dtoa_r+0x698>
 801630a:	459a      	cmp	sl, r3
 801630c:	d1a4      	bne.n	8016258 <_dtoa_r+0xa60>
 801630e:	9b04      	ldr	r3, [sp, #16]
 8016310:	3301      	adds	r3, #1
 8016312:	9304      	str	r3, [sp, #16]
 8016314:	2331      	movs	r3, #49	@ 0x31
 8016316:	f88a 3000 	strb.w	r3, [sl]
 801631a:	e5b9      	b.n	8015e90 <_dtoa_r+0x698>
 801631c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801631e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801637c <_dtoa_r+0xb84>
 8016322:	b11b      	cbz	r3, 801632c <_dtoa_r+0xb34>
 8016324:	f10a 0308 	add.w	r3, sl, #8
 8016328:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801632a:	6013      	str	r3, [r2, #0]
 801632c:	4650      	mov	r0, sl
 801632e:	b019      	add	sp, #100	@ 0x64
 8016330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016336:	2b01      	cmp	r3, #1
 8016338:	f77f ae37 	ble.w	8015faa <_dtoa_r+0x7b2>
 801633c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801633e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016340:	2001      	movs	r0, #1
 8016342:	e655      	b.n	8015ff0 <_dtoa_r+0x7f8>
 8016344:	9b00      	ldr	r3, [sp, #0]
 8016346:	2b00      	cmp	r3, #0
 8016348:	f77f aed6 	ble.w	80160f8 <_dtoa_r+0x900>
 801634c:	4656      	mov	r6, sl
 801634e:	4621      	mov	r1, r4
 8016350:	4648      	mov	r0, r9
 8016352:	f7ff f9c6 	bl	80156e2 <quorem>
 8016356:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801635a:	f806 8b01 	strb.w	r8, [r6], #1
 801635e:	9b00      	ldr	r3, [sp, #0]
 8016360:	eba6 020a 	sub.w	r2, r6, sl
 8016364:	4293      	cmp	r3, r2
 8016366:	ddb3      	ble.n	80162d0 <_dtoa_r+0xad8>
 8016368:	4649      	mov	r1, r9
 801636a:	2300      	movs	r3, #0
 801636c:	220a      	movs	r2, #10
 801636e:	4658      	mov	r0, fp
 8016370:	f000 f8b2 	bl	80164d8 <__multadd>
 8016374:	4681      	mov	r9, r0
 8016376:	e7ea      	b.n	801634e <_dtoa_r+0xb56>
 8016378:	080d5880 	.word	0x080d5880
 801637c:	080d5804 	.word	0x080d5804

08016380 <_free_r>:
 8016380:	b538      	push	{r3, r4, r5, lr}
 8016382:	4605      	mov	r5, r0
 8016384:	2900      	cmp	r1, #0
 8016386:	d041      	beq.n	801640c <_free_r+0x8c>
 8016388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801638c:	1f0c      	subs	r4, r1, #4
 801638e:	2b00      	cmp	r3, #0
 8016390:	bfb8      	it	lt
 8016392:	18e4      	addlt	r4, r4, r3
 8016394:	f7fe fa4c 	bl	8014830 <__malloc_lock>
 8016398:	4a1d      	ldr	r2, [pc, #116]	@ (8016410 <_free_r+0x90>)
 801639a:	6813      	ldr	r3, [r2, #0]
 801639c:	b933      	cbnz	r3, 80163ac <_free_r+0x2c>
 801639e:	6063      	str	r3, [r4, #4]
 80163a0:	6014      	str	r4, [r2, #0]
 80163a2:	4628      	mov	r0, r5
 80163a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80163a8:	f7fe ba48 	b.w	801483c <__malloc_unlock>
 80163ac:	42a3      	cmp	r3, r4
 80163ae:	d908      	bls.n	80163c2 <_free_r+0x42>
 80163b0:	6820      	ldr	r0, [r4, #0]
 80163b2:	1821      	adds	r1, r4, r0
 80163b4:	428b      	cmp	r3, r1
 80163b6:	bf01      	itttt	eq
 80163b8:	6819      	ldreq	r1, [r3, #0]
 80163ba:	685b      	ldreq	r3, [r3, #4]
 80163bc:	1809      	addeq	r1, r1, r0
 80163be:	6021      	streq	r1, [r4, #0]
 80163c0:	e7ed      	b.n	801639e <_free_r+0x1e>
 80163c2:	461a      	mov	r2, r3
 80163c4:	685b      	ldr	r3, [r3, #4]
 80163c6:	b10b      	cbz	r3, 80163cc <_free_r+0x4c>
 80163c8:	42a3      	cmp	r3, r4
 80163ca:	d9fa      	bls.n	80163c2 <_free_r+0x42>
 80163cc:	6811      	ldr	r1, [r2, #0]
 80163ce:	1850      	adds	r0, r2, r1
 80163d0:	42a0      	cmp	r0, r4
 80163d2:	d10b      	bne.n	80163ec <_free_r+0x6c>
 80163d4:	6820      	ldr	r0, [r4, #0]
 80163d6:	4401      	add	r1, r0
 80163d8:	1850      	adds	r0, r2, r1
 80163da:	4283      	cmp	r3, r0
 80163dc:	6011      	str	r1, [r2, #0]
 80163de:	d1e0      	bne.n	80163a2 <_free_r+0x22>
 80163e0:	6818      	ldr	r0, [r3, #0]
 80163e2:	685b      	ldr	r3, [r3, #4]
 80163e4:	6053      	str	r3, [r2, #4]
 80163e6:	4408      	add	r0, r1
 80163e8:	6010      	str	r0, [r2, #0]
 80163ea:	e7da      	b.n	80163a2 <_free_r+0x22>
 80163ec:	d902      	bls.n	80163f4 <_free_r+0x74>
 80163ee:	230c      	movs	r3, #12
 80163f0:	602b      	str	r3, [r5, #0]
 80163f2:	e7d6      	b.n	80163a2 <_free_r+0x22>
 80163f4:	6820      	ldr	r0, [r4, #0]
 80163f6:	1821      	adds	r1, r4, r0
 80163f8:	428b      	cmp	r3, r1
 80163fa:	bf04      	itt	eq
 80163fc:	6819      	ldreq	r1, [r3, #0]
 80163fe:	685b      	ldreq	r3, [r3, #4]
 8016400:	6063      	str	r3, [r4, #4]
 8016402:	bf04      	itt	eq
 8016404:	1809      	addeq	r1, r1, r0
 8016406:	6021      	streq	r1, [r4, #0]
 8016408:	6054      	str	r4, [r2, #4]
 801640a:	e7ca      	b.n	80163a2 <_free_r+0x22>
 801640c:	bd38      	pop	{r3, r4, r5, pc}
 801640e:	bf00      	nop
 8016410:	20036050 	.word	0x20036050

08016414 <_Balloc>:
 8016414:	b570      	push	{r4, r5, r6, lr}
 8016416:	69c6      	ldr	r6, [r0, #28]
 8016418:	4604      	mov	r4, r0
 801641a:	460d      	mov	r5, r1
 801641c:	b976      	cbnz	r6, 801643c <_Balloc+0x28>
 801641e:	2010      	movs	r0, #16
 8016420:	f7fe f95c 	bl	80146dc <malloc>
 8016424:	4602      	mov	r2, r0
 8016426:	61e0      	str	r0, [r4, #28]
 8016428:	b920      	cbnz	r0, 8016434 <_Balloc+0x20>
 801642a:	4b18      	ldr	r3, [pc, #96]	@ (801648c <_Balloc+0x78>)
 801642c:	4818      	ldr	r0, [pc, #96]	@ (8016490 <_Balloc+0x7c>)
 801642e:	216b      	movs	r1, #107	@ 0x6b
 8016430:	f000 ff5e 	bl	80172f0 <__assert_func>
 8016434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016438:	6006      	str	r6, [r0, #0]
 801643a:	60c6      	str	r6, [r0, #12]
 801643c:	69e6      	ldr	r6, [r4, #28]
 801643e:	68f3      	ldr	r3, [r6, #12]
 8016440:	b183      	cbz	r3, 8016464 <_Balloc+0x50>
 8016442:	69e3      	ldr	r3, [r4, #28]
 8016444:	68db      	ldr	r3, [r3, #12]
 8016446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801644a:	b9b8      	cbnz	r0, 801647c <_Balloc+0x68>
 801644c:	2101      	movs	r1, #1
 801644e:	fa01 f605 	lsl.w	r6, r1, r5
 8016452:	1d72      	adds	r2, r6, #5
 8016454:	0092      	lsls	r2, r2, #2
 8016456:	4620      	mov	r0, r4
 8016458:	f000 ff68 	bl	801732c <_calloc_r>
 801645c:	b160      	cbz	r0, 8016478 <_Balloc+0x64>
 801645e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016462:	e00e      	b.n	8016482 <_Balloc+0x6e>
 8016464:	2221      	movs	r2, #33	@ 0x21
 8016466:	2104      	movs	r1, #4
 8016468:	4620      	mov	r0, r4
 801646a:	f000 ff5f 	bl	801732c <_calloc_r>
 801646e:	69e3      	ldr	r3, [r4, #28]
 8016470:	60f0      	str	r0, [r6, #12]
 8016472:	68db      	ldr	r3, [r3, #12]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d1e4      	bne.n	8016442 <_Balloc+0x2e>
 8016478:	2000      	movs	r0, #0
 801647a:	bd70      	pop	{r4, r5, r6, pc}
 801647c:	6802      	ldr	r2, [r0, #0]
 801647e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016482:	2300      	movs	r3, #0
 8016484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016488:	e7f7      	b.n	801647a <_Balloc+0x66>
 801648a:	bf00      	nop
 801648c:	080d5811 	.word	0x080d5811
 8016490:	080d5891 	.word	0x080d5891

08016494 <_Bfree>:
 8016494:	b570      	push	{r4, r5, r6, lr}
 8016496:	69c6      	ldr	r6, [r0, #28]
 8016498:	4605      	mov	r5, r0
 801649a:	460c      	mov	r4, r1
 801649c:	b976      	cbnz	r6, 80164bc <_Bfree+0x28>
 801649e:	2010      	movs	r0, #16
 80164a0:	f7fe f91c 	bl	80146dc <malloc>
 80164a4:	4602      	mov	r2, r0
 80164a6:	61e8      	str	r0, [r5, #28]
 80164a8:	b920      	cbnz	r0, 80164b4 <_Bfree+0x20>
 80164aa:	4b09      	ldr	r3, [pc, #36]	@ (80164d0 <_Bfree+0x3c>)
 80164ac:	4809      	ldr	r0, [pc, #36]	@ (80164d4 <_Bfree+0x40>)
 80164ae:	218f      	movs	r1, #143	@ 0x8f
 80164b0:	f000 ff1e 	bl	80172f0 <__assert_func>
 80164b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80164b8:	6006      	str	r6, [r0, #0]
 80164ba:	60c6      	str	r6, [r0, #12]
 80164bc:	b13c      	cbz	r4, 80164ce <_Bfree+0x3a>
 80164be:	69eb      	ldr	r3, [r5, #28]
 80164c0:	6862      	ldr	r2, [r4, #4]
 80164c2:	68db      	ldr	r3, [r3, #12]
 80164c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80164c8:	6021      	str	r1, [r4, #0]
 80164ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80164ce:	bd70      	pop	{r4, r5, r6, pc}
 80164d0:	080d5811 	.word	0x080d5811
 80164d4:	080d5891 	.word	0x080d5891

080164d8 <__multadd>:
 80164d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164dc:	690d      	ldr	r5, [r1, #16]
 80164de:	4607      	mov	r7, r0
 80164e0:	460c      	mov	r4, r1
 80164e2:	461e      	mov	r6, r3
 80164e4:	f101 0c14 	add.w	ip, r1, #20
 80164e8:	2000      	movs	r0, #0
 80164ea:	f8dc 3000 	ldr.w	r3, [ip]
 80164ee:	b299      	uxth	r1, r3
 80164f0:	fb02 6101 	mla	r1, r2, r1, r6
 80164f4:	0c1e      	lsrs	r6, r3, #16
 80164f6:	0c0b      	lsrs	r3, r1, #16
 80164f8:	fb02 3306 	mla	r3, r2, r6, r3
 80164fc:	b289      	uxth	r1, r1
 80164fe:	3001      	adds	r0, #1
 8016500:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016504:	4285      	cmp	r5, r0
 8016506:	f84c 1b04 	str.w	r1, [ip], #4
 801650a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801650e:	dcec      	bgt.n	80164ea <__multadd+0x12>
 8016510:	b30e      	cbz	r6, 8016556 <__multadd+0x7e>
 8016512:	68a3      	ldr	r3, [r4, #8]
 8016514:	42ab      	cmp	r3, r5
 8016516:	dc19      	bgt.n	801654c <__multadd+0x74>
 8016518:	6861      	ldr	r1, [r4, #4]
 801651a:	4638      	mov	r0, r7
 801651c:	3101      	adds	r1, #1
 801651e:	f7ff ff79 	bl	8016414 <_Balloc>
 8016522:	4680      	mov	r8, r0
 8016524:	b928      	cbnz	r0, 8016532 <__multadd+0x5a>
 8016526:	4602      	mov	r2, r0
 8016528:	4b0c      	ldr	r3, [pc, #48]	@ (801655c <__multadd+0x84>)
 801652a:	480d      	ldr	r0, [pc, #52]	@ (8016560 <__multadd+0x88>)
 801652c:	21ba      	movs	r1, #186	@ 0xba
 801652e:	f000 fedf 	bl	80172f0 <__assert_func>
 8016532:	6922      	ldr	r2, [r4, #16]
 8016534:	3202      	adds	r2, #2
 8016536:	f104 010c 	add.w	r1, r4, #12
 801653a:	0092      	lsls	r2, r2, #2
 801653c:	300c      	adds	r0, #12
 801653e:	f7ff f8c2 	bl	80156c6 <memcpy>
 8016542:	4621      	mov	r1, r4
 8016544:	4638      	mov	r0, r7
 8016546:	f7ff ffa5 	bl	8016494 <_Bfree>
 801654a:	4644      	mov	r4, r8
 801654c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016550:	3501      	adds	r5, #1
 8016552:	615e      	str	r6, [r3, #20]
 8016554:	6125      	str	r5, [r4, #16]
 8016556:	4620      	mov	r0, r4
 8016558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801655c:	080d5880 	.word	0x080d5880
 8016560:	080d5891 	.word	0x080d5891

08016564 <__hi0bits>:
 8016564:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016568:	4603      	mov	r3, r0
 801656a:	bf36      	itet	cc
 801656c:	0403      	lslcc	r3, r0, #16
 801656e:	2000      	movcs	r0, #0
 8016570:	2010      	movcc	r0, #16
 8016572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016576:	bf3c      	itt	cc
 8016578:	021b      	lslcc	r3, r3, #8
 801657a:	3008      	addcc	r0, #8
 801657c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016580:	bf3c      	itt	cc
 8016582:	011b      	lslcc	r3, r3, #4
 8016584:	3004      	addcc	r0, #4
 8016586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801658a:	bf3c      	itt	cc
 801658c:	009b      	lslcc	r3, r3, #2
 801658e:	3002      	addcc	r0, #2
 8016590:	2b00      	cmp	r3, #0
 8016592:	db05      	blt.n	80165a0 <__hi0bits+0x3c>
 8016594:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016598:	f100 0001 	add.w	r0, r0, #1
 801659c:	bf08      	it	eq
 801659e:	2020      	moveq	r0, #32
 80165a0:	4770      	bx	lr

080165a2 <__lo0bits>:
 80165a2:	6803      	ldr	r3, [r0, #0]
 80165a4:	4602      	mov	r2, r0
 80165a6:	f013 0007 	ands.w	r0, r3, #7
 80165aa:	d00b      	beq.n	80165c4 <__lo0bits+0x22>
 80165ac:	07d9      	lsls	r1, r3, #31
 80165ae:	d421      	bmi.n	80165f4 <__lo0bits+0x52>
 80165b0:	0798      	lsls	r0, r3, #30
 80165b2:	bf49      	itett	mi
 80165b4:	085b      	lsrmi	r3, r3, #1
 80165b6:	089b      	lsrpl	r3, r3, #2
 80165b8:	2001      	movmi	r0, #1
 80165ba:	6013      	strmi	r3, [r2, #0]
 80165bc:	bf5c      	itt	pl
 80165be:	6013      	strpl	r3, [r2, #0]
 80165c0:	2002      	movpl	r0, #2
 80165c2:	4770      	bx	lr
 80165c4:	b299      	uxth	r1, r3
 80165c6:	b909      	cbnz	r1, 80165cc <__lo0bits+0x2a>
 80165c8:	0c1b      	lsrs	r3, r3, #16
 80165ca:	2010      	movs	r0, #16
 80165cc:	b2d9      	uxtb	r1, r3
 80165ce:	b909      	cbnz	r1, 80165d4 <__lo0bits+0x32>
 80165d0:	3008      	adds	r0, #8
 80165d2:	0a1b      	lsrs	r3, r3, #8
 80165d4:	0719      	lsls	r1, r3, #28
 80165d6:	bf04      	itt	eq
 80165d8:	091b      	lsreq	r3, r3, #4
 80165da:	3004      	addeq	r0, #4
 80165dc:	0799      	lsls	r1, r3, #30
 80165de:	bf04      	itt	eq
 80165e0:	089b      	lsreq	r3, r3, #2
 80165e2:	3002      	addeq	r0, #2
 80165e4:	07d9      	lsls	r1, r3, #31
 80165e6:	d403      	bmi.n	80165f0 <__lo0bits+0x4e>
 80165e8:	085b      	lsrs	r3, r3, #1
 80165ea:	f100 0001 	add.w	r0, r0, #1
 80165ee:	d003      	beq.n	80165f8 <__lo0bits+0x56>
 80165f0:	6013      	str	r3, [r2, #0]
 80165f2:	4770      	bx	lr
 80165f4:	2000      	movs	r0, #0
 80165f6:	4770      	bx	lr
 80165f8:	2020      	movs	r0, #32
 80165fa:	4770      	bx	lr

080165fc <__i2b>:
 80165fc:	b510      	push	{r4, lr}
 80165fe:	460c      	mov	r4, r1
 8016600:	2101      	movs	r1, #1
 8016602:	f7ff ff07 	bl	8016414 <_Balloc>
 8016606:	4602      	mov	r2, r0
 8016608:	b928      	cbnz	r0, 8016616 <__i2b+0x1a>
 801660a:	4b05      	ldr	r3, [pc, #20]	@ (8016620 <__i2b+0x24>)
 801660c:	4805      	ldr	r0, [pc, #20]	@ (8016624 <__i2b+0x28>)
 801660e:	f240 1145 	movw	r1, #325	@ 0x145
 8016612:	f000 fe6d 	bl	80172f0 <__assert_func>
 8016616:	2301      	movs	r3, #1
 8016618:	6144      	str	r4, [r0, #20]
 801661a:	6103      	str	r3, [r0, #16]
 801661c:	bd10      	pop	{r4, pc}
 801661e:	bf00      	nop
 8016620:	080d5880 	.word	0x080d5880
 8016624:	080d5891 	.word	0x080d5891

08016628 <__multiply>:
 8016628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801662c:	4614      	mov	r4, r2
 801662e:	690a      	ldr	r2, [r1, #16]
 8016630:	6923      	ldr	r3, [r4, #16]
 8016632:	429a      	cmp	r2, r3
 8016634:	bfa8      	it	ge
 8016636:	4623      	movge	r3, r4
 8016638:	460f      	mov	r7, r1
 801663a:	bfa4      	itt	ge
 801663c:	460c      	movge	r4, r1
 801663e:	461f      	movge	r7, r3
 8016640:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8016644:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8016648:	68a3      	ldr	r3, [r4, #8]
 801664a:	6861      	ldr	r1, [r4, #4]
 801664c:	eb0a 0609 	add.w	r6, sl, r9
 8016650:	42b3      	cmp	r3, r6
 8016652:	b085      	sub	sp, #20
 8016654:	bfb8      	it	lt
 8016656:	3101      	addlt	r1, #1
 8016658:	f7ff fedc 	bl	8016414 <_Balloc>
 801665c:	b930      	cbnz	r0, 801666c <__multiply+0x44>
 801665e:	4602      	mov	r2, r0
 8016660:	4b44      	ldr	r3, [pc, #272]	@ (8016774 <__multiply+0x14c>)
 8016662:	4845      	ldr	r0, [pc, #276]	@ (8016778 <__multiply+0x150>)
 8016664:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016668:	f000 fe42 	bl	80172f0 <__assert_func>
 801666c:	f100 0514 	add.w	r5, r0, #20
 8016670:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016674:	462b      	mov	r3, r5
 8016676:	2200      	movs	r2, #0
 8016678:	4543      	cmp	r3, r8
 801667a:	d321      	bcc.n	80166c0 <__multiply+0x98>
 801667c:	f107 0114 	add.w	r1, r7, #20
 8016680:	f104 0214 	add.w	r2, r4, #20
 8016684:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8016688:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801668c:	9302      	str	r3, [sp, #8]
 801668e:	1b13      	subs	r3, r2, r4
 8016690:	3b15      	subs	r3, #21
 8016692:	f023 0303 	bic.w	r3, r3, #3
 8016696:	3304      	adds	r3, #4
 8016698:	f104 0715 	add.w	r7, r4, #21
 801669c:	42ba      	cmp	r2, r7
 801669e:	bf38      	it	cc
 80166a0:	2304      	movcc	r3, #4
 80166a2:	9301      	str	r3, [sp, #4]
 80166a4:	9b02      	ldr	r3, [sp, #8]
 80166a6:	9103      	str	r1, [sp, #12]
 80166a8:	428b      	cmp	r3, r1
 80166aa:	d80c      	bhi.n	80166c6 <__multiply+0x9e>
 80166ac:	2e00      	cmp	r6, #0
 80166ae:	dd03      	ble.n	80166b8 <__multiply+0x90>
 80166b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d05b      	beq.n	8016770 <__multiply+0x148>
 80166b8:	6106      	str	r6, [r0, #16]
 80166ba:	b005      	add	sp, #20
 80166bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166c0:	f843 2b04 	str.w	r2, [r3], #4
 80166c4:	e7d8      	b.n	8016678 <__multiply+0x50>
 80166c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80166ca:	f1ba 0f00 	cmp.w	sl, #0
 80166ce:	d024      	beq.n	801671a <__multiply+0xf2>
 80166d0:	f104 0e14 	add.w	lr, r4, #20
 80166d4:	46a9      	mov	r9, r5
 80166d6:	f04f 0c00 	mov.w	ip, #0
 80166da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80166de:	f8d9 3000 	ldr.w	r3, [r9]
 80166e2:	fa1f fb87 	uxth.w	fp, r7
 80166e6:	b29b      	uxth	r3, r3
 80166e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80166ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80166f0:	f8d9 7000 	ldr.w	r7, [r9]
 80166f4:	4463      	add	r3, ip
 80166f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80166fa:	fb0a c70b 	mla	r7, sl, fp, ip
 80166fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8016702:	b29b      	uxth	r3, r3
 8016704:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016708:	4572      	cmp	r2, lr
 801670a:	f849 3b04 	str.w	r3, [r9], #4
 801670e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016712:	d8e2      	bhi.n	80166da <__multiply+0xb2>
 8016714:	9b01      	ldr	r3, [sp, #4]
 8016716:	f845 c003 	str.w	ip, [r5, r3]
 801671a:	9b03      	ldr	r3, [sp, #12]
 801671c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016720:	3104      	adds	r1, #4
 8016722:	f1b9 0f00 	cmp.w	r9, #0
 8016726:	d021      	beq.n	801676c <__multiply+0x144>
 8016728:	682b      	ldr	r3, [r5, #0]
 801672a:	f104 0c14 	add.w	ip, r4, #20
 801672e:	46ae      	mov	lr, r5
 8016730:	f04f 0a00 	mov.w	sl, #0
 8016734:	f8bc b000 	ldrh.w	fp, [ip]
 8016738:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801673c:	fb09 770b 	mla	r7, r9, fp, r7
 8016740:	4457      	add	r7, sl
 8016742:	b29b      	uxth	r3, r3
 8016744:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016748:	f84e 3b04 	str.w	r3, [lr], #4
 801674c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016750:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016754:	f8be 3000 	ldrh.w	r3, [lr]
 8016758:	fb09 330a 	mla	r3, r9, sl, r3
 801675c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8016760:	4562      	cmp	r2, ip
 8016762:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016766:	d8e5      	bhi.n	8016734 <__multiply+0x10c>
 8016768:	9f01      	ldr	r7, [sp, #4]
 801676a:	51eb      	str	r3, [r5, r7]
 801676c:	3504      	adds	r5, #4
 801676e:	e799      	b.n	80166a4 <__multiply+0x7c>
 8016770:	3e01      	subs	r6, #1
 8016772:	e79b      	b.n	80166ac <__multiply+0x84>
 8016774:	080d5880 	.word	0x080d5880
 8016778:	080d5891 	.word	0x080d5891

0801677c <__pow5mult>:
 801677c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016780:	4615      	mov	r5, r2
 8016782:	f012 0203 	ands.w	r2, r2, #3
 8016786:	4607      	mov	r7, r0
 8016788:	460e      	mov	r6, r1
 801678a:	d007      	beq.n	801679c <__pow5mult+0x20>
 801678c:	4c25      	ldr	r4, [pc, #148]	@ (8016824 <__pow5mult+0xa8>)
 801678e:	3a01      	subs	r2, #1
 8016790:	2300      	movs	r3, #0
 8016792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016796:	f7ff fe9f 	bl	80164d8 <__multadd>
 801679a:	4606      	mov	r6, r0
 801679c:	10ad      	asrs	r5, r5, #2
 801679e:	d03d      	beq.n	801681c <__pow5mult+0xa0>
 80167a0:	69fc      	ldr	r4, [r7, #28]
 80167a2:	b97c      	cbnz	r4, 80167c4 <__pow5mult+0x48>
 80167a4:	2010      	movs	r0, #16
 80167a6:	f7fd ff99 	bl	80146dc <malloc>
 80167aa:	4602      	mov	r2, r0
 80167ac:	61f8      	str	r0, [r7, #28]
 80167ae:	b928      	cbnz	r0, 80167bc <__pow5mult+0x40>
 80167b0:	4b1d      	ldr	r3, [pc, #116]	@ (8016828 <__pow5mult+0xac>)
 80167b2:	481e      	ldr	r0, [pc, #120]	@ (801682c <__pow5mult+0xb0>)
 80167b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80167b8:	f000 fd9a 	bl	80172f0 <__assert_func>
 80167bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80167c0:	6004      	str	r4, [r0, #0]
 80167c2:	60c4      	str	r4, [r0, #12]
 80167c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80167c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80167cc:	b94c      	cbnz	r4, 80167e2 <__pow5mult+0x66>
 80167ce:	f240 2171 	movw	r1, #625	@ 0x271
 80167d2:	4638      	mov	r0, r7
 80167d4:	f7ff ff12 	bl	80165fc <__i2b>
 80167d8:	2300      	movs	r3, #0
 80167da:	f8c8 0008 	str.w	r0, [r8, #8]
 80167de:	4604      	mov	r4, r0
 80167e0:	6003      	str	r3, [r0, #0]
 80167e2:	f04f 0900 	mov.w	r9, #0
 80167e6:	07eb      	lsls	r3, r5, #31
 80167e8:	d50a      	bpl.n	8016800 <__pow5mult+0x84>
 80167ea:	4631      	mov	r1, r6
 80167ec:	4622      	mov	r2, r4
 80167ee:	4638      	mov	r0, r7
 80167f0:	f7ff ff1a 	bl	8016628 <__multiply>
 80167f4:	4631      	mov	r1, r6
 80167f6:	4680      	mov	r8, r0
 80167f8:	4638      	mov	r0, r7
 80167fa:	f7ff fe4b 	bl	8016494 <_Bfree>
 80167fe:	4646      	mov	r6, r8
 8016800:	106d      	asrs	r5, r5, #1
 8016802:	d00b      	beq.n	801681c <__pow5mult+0xa0>
 8016804:	6820      	ldr	r0, [r4, #0]
 8016806:	b938      	cbnz	r0, 8016818 <__pow5mult+0x9c>
 8016808:	4622      	mov	r2, r4
 801680a:	4621      	mov	r1, r4
 801680c:	4638      	mov	r0, r7
 801680e:	f7ff ff0b 	bl	8016628 <__multiply>
 8016812:	6020      	str	r0, [r4, #0]
 8016814:	f8c0 9000 	str.w	r9, [r0]
 8016818:	4604      	mov	r4, r0
 801681a:	e7e4      	b.n	80167e6 <__pow5mult+0x6a>
 801681c:	4630      	mov	r0, r6
 801681e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016822:	bf00      	nop
 8016824:	080d58ec 	.word	0x080d58ec
 8016828:	080d5811 	.word	0x080d5811
 801682c:	080d5891 	.word	0x080d5891

08016830 <__lshift>:
 8016830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016834:	460c      	mov	r4, r1
 8016836:	6849      	ldr	r1, [r1, #4]
 8016838:	6923      	ldr	r3, [r4, #16]
 801683a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801683e:	68a3      	ldr	r3, [r4, #8]
 8016840:	4607      	mov	r7, r0
 8016842:	4691      	mov	r9, r2
 8016844:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016848:	f108 0601 	add.w	r6, r8, #1
 801684c:	42b3      	cmp	r3, r6
 801684e:	db0b      	blt.n	8016868 <__lshift+0x38>
 8016850:	4638      	mov	r0, r7
 8016852:	f7ff fddf 	bl	8016414 <_Balloc>
 8016856:	4605      	mov	r5, r0
 8016858:	b948      	cbnz	r0, 801686e <__lshift+0x3e>
 801685a:	4602      	mov	r2, r0
 801685c:	4b28      	ldr	r3, [pc, #160]	@ (8016900 <__lshift+0xd0>)
 801685e:	4829      	ldr	r0, [pc, #164]	@ (8016904 <__lshift+0xd4>)
 8016860:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016864:	f000 fd44 	bl	80172f0 <__assert_func>
 8016868:	3101      	adds	r1, #1
 801686a:	005b      	lsls	r3, r3, #1
 801686c:	e7ee      	b.n	801684c <__lshift+0x1c>
 801686e:	2300      	movs	r3, #0
 8016870:	f100 0114 	add.w	r1, r0, #20
 8016874:	f100 0210 	add.w	r2, r0, #16
 8016878:	4618      	mov	r0, r3
 801687a:	4553      	cmp	r3, sl
 801687c:	db33      	blt.n	80168e6 <__lshift+0xb6>
 801687e:	6920      	ldr	r0, [r4, #16]
 8016880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016884:	f104 0314 	add.w	r3, r4, #20
 8016888:	f019 091f 	ands.w	r9, r9, #31
 801688c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016890:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016894:	d02b      	beq.n	80168ee <__lshift+0xbe>
 8016896:	f1c9 0e20 	rsb	lr, r9, #32
 801689a:	468a      	mov	sl, r1
 801689c:	2200      	movs	r2, #0
 801689e:	6818      	ldr	r0, [r3, #0]
 80168a0:	fa00 f009 	lsl.w	r0, r0, r9
 80168a4:	4310      	orrs	r0, r2
 80168a6:	f84a 0b04 	str.w	r0, [sl], #4
 80168aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80168ae:	459c      	cmp	ip, r3
 80168b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80168b4:	d8f3      	bhi.n	801689e <__lshift+0x6e>
 80168b6:	ebac 0304 	sub.w	r3, ip, r4
 80168ba:	3b15      	subs	r3, #21
 80168bc:	f023 0303 	bic.w	r3, r3, #3
 80168c0:	3304      	adds	r3, #4
 80168c2:	f104 0015 	add.w	r0, r4, #21
 80168c6:	4584      	cmp	ip, r0
 80168c8:	bf38      	it	cc
 80168ca:	2304      	movcc	r3, #4
 80168cc:	50ca      	str	r2, [r1, r3]
 80168ce:	b10a      	cbz	r2, 80168d4 <__lshift+0xa4>
 80168d0:	f108 0602 	add.w	r6, r8, #2
 80168d4:	3e01      	subs	r6, #1
 80168d6:	4638      	mov	r0, r7
 80168d8:	612e      	str	r6, [r5, #16]
 80168da:	4621      	mov	r1, r4
 80168dc:	f7ff fdda 	bl	8016494 <_Bfree>
 80168e0:	4628      	mov	r0, r5
 80168e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80168ea:	3301      	adds	r3, #1
 80168ec:	e7c5      	b.n	801687a <__lshift+0x4a>
 80168ee:	3904      	subs	r1, #4
 80168f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80168f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80168f8:	459c      	cmp	ip, r3
 80168fa:	d8f9      	bhi.n	80168f0 <__lshift+0xc0>
 80168fc:	e7ea      	b.n	80168d4 <__lshift+0xa4>
 80168fe:	bf00      	nop
 8016900:	080d5880 	.word	0x080d5880
 8016904:	080d5891 	.word	0x080d5891

08016908 <__mcmp>:
 8016908:	690a      	ldr	r2, [r1, #16]
 801690a:	4603      	mov	r3, r0
 801690c:	6900      	ldr	r0, [r0, #16]
 801690e:	1a80      	subs	r0, r0, r2
 8016910:	b530      	push	{r4, r5, lr}
 8016912:	d10e      	bne.n	8016932 <__mcmp+0x2a>
 8016914:	3314      	adds	r3, #20
 8016916:	3114      	adds	r1, #20
 8016918:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801691c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016920:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016924:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016928:	4295      	cmp	r5, r2
 801692a:	d003      	beq.n	8016934 <__mcmp+0x2c>
 801692c:	d205      	bcs.n	801693a <__mcmp+0x32>
 801692e:	f04f 30ff 	mov.w	r0, #4294967295
 8016932:	bd30      	pop	{r4, r5, pc}
 8016934:	42a3      	cmp	r3, r4
 8016936:	d3f3      	bcc.n	8016920 <__mcmp+0x18>
 8016938:	e7fb      	b.n	8016932 <__mcmp+0x2a>
 801693a:	2001      	movs	r0, #1
 801693c:	e7f9      	b.n	8016932 <__mcmp+0x2a>
	...

08016940 <__mdiff>:
 8016940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016944:	4689      	mov	r9, r1
 8016946:	4606      	mov	r6, r0
 8016948:	4611      	mov	r1, r2
 801694a:	4648      	mov	r0, r9
 801694c:	4614      	mov	r4, r2
 801694e:	f7ff ffdb 	bl	8016908 <__mcmp>
 8016952:	1e05      	subs	r5, r0, #0
 8016954:	d112      	bne.n	801697c <__mdiff+0x3c>
 8016956:	4629      	mov	r1, r5
 8016958:	4630      	mov	r0, r6
 801695a:	f7ff fd5b 	bl	8016414 <_Balloc>
 801695e:	4602      	mov	r2, r0
 8016960:	b928      	cbnz	r0, 801696e <__mdiff+0x2e>
 8016962:	4b3f      	ldr	r3, [pc, #252]	@ (8016a60 <__mdiff+0x120>)
 8016964:	f240 2137 	movw	r1, #567	@ 0x237
 8016968:	483e      	ldr	r0, [pc, #248]	@ (8016a64 <__mdiff+0x124>)
 801696a:	f000 fcc1 	bl	80172f0 <__assert_func>
 801696e:	2301      	movs	r3, #1
 8016970:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016974:	4610      	mov	r0, r2
 8016976:	b003      	add	sp, #12
 8016978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801697c:	bfbc      	itt	lt
 801697e:	464b      	movlt	r3, r9
 8016980:	46a1      	movlt	r9, r4
 8016982:	4630      	mov	r0, r6
 8016984:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016988:	bfba      	itte	lt
 801698a:	461c      	movlt	r4, r3
 801698c:	2501      	movlt	r5, #1
 801698e:	2500      	movge	r5, #0
 8016990:	f7ff fd40 	bl	8016414 <_Balloc>
 8016994:	4602      	mov	r2, r0
 8016996:	b918      	cbnz	r0, 80169a0 <__mdiff+0x60>
 8016998:	4b31      	ldr	r3, [pc, #196]	@ (8016a60 <__mdiff+0x120>)
 801699a:	f240 2145 	movw	r1, #581	@ 0x245
 801699e:	e7e3      	b.n	8016968 <__mdiff+0x28>
 80169a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80169a4:	6926      	ldr	r6, [r4, #16]
 80169a6:	60c5      	str	r5, [r0, #12]
 80169a8:	f109 0310 	add.w	r3, r9, #16
 80169ac:	f109 0514 	add.w	r5, r9, #20
 80169b0:	f104 0e14 	add.w	lr, r4, #20
 80169b4:	f100 0b14 	add.w	fp, r0, #20
 80169b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80169bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80169c0:	9301      	str	r3, [sp, #4]
 80169c2:	46d9      	mov	r9, fp
 80169c4:	f04f 0c00 	mov.w	ip, #0
 80169c8:	9b01      	ldr	r3, [sp, #4]
 80169ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80169ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80169d2:	9301      	str	r3, [sp, #4]
 80169d4:	fa1f f38a 	uxth.w	r3, sl
 80169d8:	4619      	mov	r1, r3
 80169da:	b283      	uxth	r3, r0
 80169dc:	1acb      	subs	r3, r1, r3
 80169de:	0c00      	lsrs	r0, r0, #16
 80169e0:	4463      	add	r3, ip
 80169e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80169e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80169ea:	b29b      	uxth	r3, r3
 80169ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80169f0:	4576      	cmp	r6, lr
 80169f2:	f849 3b04 	str.w	r3, [r9], #4
 80169f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80169fa:	d8e5      	bhi.n	80169c8 <__mdiff+0x88>
 80169fc:	1b33      	subs	r3, r6, r4
 80169fe:	3b15      	subs	r3, #21
 8016a00:	f023 0303 	bic.w	r3, r3, #3
 8016a04:	3415      	adds	r4, #21
 8016a06:	3304      	adds	r3, #4
 8016a08:	42a6      	cmp	r6, r4
 8016a0a:	bf38      	it	cc
 8016a0c:	2304      	movcc	r3, #4
 8016a0e:	441d      	add	r5, r3
 8016a10:	445b      	add	r3, fp
 8016a12:	461e      	mov	r6, r3
 8016a14:	462c      	mov	r4, r5
 8016a16:	4544      	cmp	r4, r8
 8016a18:	d30e      	bcc.n	8016a38 <__mdiff+0xf8>
 8016a1a:	f108 0103 	add.w	r1, r8, #3
 8016a1e:	1b49      	subs	r1, r1, r5
 8016a20:	f021 0103 	bic.w	r1, r1, #3
 8016a24:	3d03      	subs	r5, #3
 8016a26:	45a8      	cmp	r8, r5
 8016a28:	bf38      	it	cc
 8016a2a:	2100      	movcc	r1, #0
 8016a2c:	440b      	add	r3, r1
 8016a2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016a32:	b191      	cbz	r1, 8016a5a <__mdiff+0x11a>
 8016a34:	6117      	str	r7, [r2, #16]
 8016a36:	e79d      	b.n	8016974 <__mdiff+0x34>
 8016a38:	f854 1b04 	ldr.w	r1, [r4], #4
 8016a3c:	46e6      	mov	lr, ip
 8016a3e:	0c08      	lsrs	r0, r1, #16
 8016a40:	fa1c fc81 	uxtah	ip, ip, r1
 8016a44:	4471      	add	r1, lr
 8016a46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016a4a:	b289      	uxth	r1, r1
 8016a4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016a50:	f846 1b04 	str.w	r1, [r6], #4
 8016a54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016a58:	e7dd      	b.n	8016a16 <__mdiff+0xd6>
 8016a5a:	3f01      	subs	r7, #1
 8016a5c:	e7e7      	b.n	8016a2e <__mdiff+0xee>
 8016a5e:	bf00      	nop
 8016a60:	080d5880 	.word	0x080d5880
 8016a64:	080d5891 	.word	0x080d5891

08016a68 <__d2b>:
 8016a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a6c:	460f      	mov	r7, r1
 8016a6e:	2101      	movs	r1, #1
 8016a70:	ec59 8b10 	vmov	r8, r9, d0
 8016a74:	4616      	mov	r6, r2
 8016a76:	f7ff fccd 	bl	8016414 <_Balloc>
 8016a7a:	4604      	mov	r4, r0
 8016a7c:	b930      	cbnz	r0, 8016a8c <__d2b+0x24>
 8016a7e:	4602      	mov	r2, r0
 8016a80:	4b23      	ldr	r3, [pc, #140]	@ (8016b10 <__d2b+0xa8>)
 8016a82:	4824      	ldr	r0, [pc, #144]	@ (8016b14 <__d2b+0xac>)
 8016a84:	f240 310f 	movw	r1, #783	@ 0x30f
 8016a88:	f000 fc32 	bl	80172f0 <__assert_func>
 8016a8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016a90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016a94:	b10d      	cbz	r5, 8016a9a <__d2b+0x32>
 8016a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016a9a:	9301      	str	r3, [sp, #4]
 8016a9c:	f1b8 0300 	subs.w	r3, r8, #0
 8016aa0:	d023      	beq.n	8016aea <__d2b+0x82>
 8016aa2:	4668      	mov	r0, sp
 8016aa4:	9300      	str	r3, [sp, #0]
 8016aa6:	f7ff fd7c 	bl	80165a2 <__lo0bits>
 8016aaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016aae:	b1d0      	cbz	r0, 8016ae6 <__d2b+0x7e>
 8016ab0:	f1c0 0320 	rsb	r3, r0, #32
 8016ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8016ab8:	430b      	orrs	r3, r1
 8016aba:	40c2      	lsrs	r2, r0
 8016abc:	6163      	str	r3, [r4, #20]
 8016abe:	9201      	str	r2, [sp, #4]
 8016ac0:	9b01      	ldr	r3, [sp, #4]
 8016ac2:	61a3      	str	r3, [r4, #24]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	bf0c      	ite	eq
 8016ac8:	2201      	moveq	r2, #1
 8016aca:	2202      	movne	r2, #2
 8016acc:	6122      	str	r2, [r4, #16]
 8016ace:	b1a5      	cbz	r5, 8016afa <__d2b+0x92>
 8016ad0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016ad4:	4405      	add	r5, r0
 8016ad6:	603d      	str	r5, [r7, #0]
 8016ad8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016adc:	6030      	str	r0, [r6, #0]
 8016ade:	4620      	mov	r0, r4
 8016ae0:	b003      	add	sp, #12
 8016ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ae6:	6161      	str	r1, [r4, #20]
 8016ae8:	e7ea      	b.n	8016ac0 <__d2b+0x58>
 8016aea:	a801      	add	r0, sp, #4
 8016aec:	f7ff fd59 	bl	80165a2 <__lo0bits>
 8016af0:	9b01      	ldr	r3, [sp, #4]
 8016af2:	6163      	str	r3, [r4, #20]
 8016af4:	3020      	adds	r0, #32
 8016af6:	2201      	movs	r2, #1
 8016af8:	e7e8      	b.n	8016acc <__d2b+0x64>
 8016afa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016afe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016b02:	6038      	str	r0, [r7, #0]
 8016b04:	6918      	ldr	r0, [r3, #16]
 8016b06:	f7ff fd2d 	bl	8016564 <__hi0bits>
 8016b0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016b0e:	e7e5      	b.n	8016adc <__d2b+0x74>
 8016b10:	080d5880 	.word	0x080d5880
 8016b14:	080d5891 	.word	0x080d5891

08016b18 <_malloc_usable_size_r>:
 8016b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b1c:	1f18      	subs	r0, r3, #4
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	bfbc      	itt	lt
 8016b22:	580b      	ldrlt	r3, [r1, r0]
 8016b24:	18c0      	addlt	r0, r0, r3
 8016b26:	4770      	bx	lr

08016b28 <__ssputs_r>:
 8016b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b2c:	688e      	ldr	r6, [r1, #8]
 8016b2e:	461f      	mov	r7, r3
 8016b30:	42be      	cmp	r6, r7
 8016b32:	680b      	ldr	r3, [r1, #0]
 8016b34:	4682      	mov	sl, r0
 8016b36:	460c      	mov	r4, r1
 8016b38:	4690      	mov	r8, r2
 8016b3a:	d82d      	bhi.n	8016b98 <__ssputs_r+0x70>
 8016b3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016b40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016b44:	d026      	beq.n	8016b94 <__ssputs_r+0x6c>
 8016b46:	6965      	ldr	r5, [r4, #20]
 8016b48:	6909      	ldr	r1, [r1, #16]
 8016b4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b4e:	eba3 0901 	sub.w	r9, r3, r1
 8016b52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016b56:	1c7b      	adds	r3, r7, #1
 8016b58:	444b      	add	r3, r9
 8016b5a:	106d      	asrs	r5, r5, #1
 8016b5c:	429d      	cmp	r5, r3
 8016b5e:	bf38      	it	cc
 8016b60:	461d      	movcc	r5, r3
 8016b62:	0553      	lsls	r3, r2, #21
 8016b64:	d527      	bpl.n	8016bb6 <__ssputs_r+0x8e>
 8016b66:	4629      	mov	r1, r5
 8016b68:	f7fd fde2 	bl	8014730 <_malloc_r>
 8016b6c:	4606      	mov	r6, r0
 8016b6e:	b360      	cbz	r0, 8016bca <__ssputs_r+0xa2>
 8016b70:	6921      	ldr	r1, [r4, #16]
 8016b72:	464a      	mov	r2, r9
 8016b74:	f7fe fda7 	bl	80156c6 <memcpy>
 8016b78:	89a3      	ldrh	r3, [r4, #12]
 8016b7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016b82:	81a3      	strh	r3, [r4, #12]
 8016b84:	6126      	str	r6, [r4, #16]
 8016b86:	6165      	str	r5, [r4, #20]
 8016b88:	444e      	add	r6, r9
 8016b8a:	eba5 0509 	sub.w	r5, r5, r9
 8016b8e:	6026      	str	r6, [r4, #0]
 8016b90:	60a5      	str	r5, [r4, #8]
 8016b92:	463e      	mov	r6, r7
 8016b94:	42be      	cmp	r6, r7
 8016b96:	d900      	bls.n	8016b9a <__ssputs_r+0x72>
 8016b98:	463e      	mov	r6, r7
 8016b9a:	6820      	ldr	r0, [r4, #0]
 8016b9c:	4632      	mov	r2, r6
 8016b9e:	4641      	mov	r1, r8
 8016ba0:	f000 fb6a 	bl	8017278 <memmove>
 8016ba4:	68a3      	ldr	r3, [r4, #8]
 8016ba6:	1b9b      	subs	r3, r3, r6
 8016ba8:	60a3      	str	r3, [r4, #8]
 8016baa:	6823      	ldr	r3, [r4, #0]
 8016bac:	4433      	add	r3, r6
 8016bae:	6023      	str	r3, [r4, #0]
 8016bb0:	2000      	movs	r0, #0
 8016bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bb6:	462a      	mov	r2, r5
 8016bb8:	f7fd fe46 	bl	8014848 <_realloc_r>
 8016bbc:	4606      	mov	r6, r0
 8016bbe:	2800      	cmp	r0, #0
 8016bc0:	d1e0      	bne.n	8016b84 <__ssputs_r+0x5c>
 8016bc2:	6921      	ldr	r1, [r4, #16]
 8016bc4:	4650      	mov	r0, sl
 8016bc6:	f7ff fbdb 	bl	8016380 <_free_r>
 8016bca:	230c      	movs	r3, #12
 8016bcc:	f8ca 3000 	str.w	r3, [sl]
 8016bd0:	89a3      	ldrh	r3, [r4, #12]
 8016bd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016bd6:	81a3      	strh	r3, [r4, #12]
 8016bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8016bdc:	e7e9      	b.n	8016bb2 <__ssputs_r+0x8a>
	...

08016be0 <_svfiprintf_r>:
 8016be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016be4:	4698      	mov	r8, r3
 8016be6:	898b      	ldrh	r3, [r1, #12]
 8016be8:	061b      	lsls	r3, r3, #24
 8016bea:	b09d      	sub	sp, #116	@ 0x74
 8016bec:	4607      	mov	r7, r0
 8016bee:	460d      	mov	r5, r1
 8016bf0:	4614      	mov	r4, r2
 8016bf2:	d510      	bpl.n	8016c16 <_svfiprintf_r+0x36>
 8016bf4:	690b      	ldr	r3, [r1, #16]
 8016bf6:	b973      	cbnz	r3, 8016c16 <_svfiprintf_r+0x36>
 8016bf8:	2140      	movs	r1, #64	@ 0x40
 8016bfa:	f7fd fd99 	bl	8014730 <_malloc_r>
 8016bfe:	6028      	str	r0, [r5, #0]
 8016c00:	6128      	str	r0, [r5, #16]
 8016c02:	b930      	cbnz	r0, 8016c12 <_svfiprintf_r+0x32>
 8016c04:	230c      	movs	r3, #12
 8016c06:	603b      	str	r3, [r7, #0]
 8016c08:	f04f 30ff 	mov.w	r0, #4294967295
 8016c0c:	b01d      	add	sp, #116	@ 0x74
 8016c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c12:	2340      	movs	r3, #64	@ 0x40
 8016c14:	616b      	str	r3, [r5, #20]
 8016c16:	2300      	movs	r3, #0
 8016c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8016c1a:	2320      	movs	r3, #32
 8016c1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016c20:	f8cd 800c 	str.w	r8, [sp, #12]
 8016c24:	2330      	movs	r3, #48	@ 0x30
 8016c26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016dc4 <_svfiprintf_r+0x1e4>
 8016c2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016c2e:	f04f 0901 	mov.w	r9, #1
 8016c32:	4623      	mov	r3, r4
 8016c34:	469a      	mov	sl, r3
 8016c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c3a:	b10a      	cbz	r2, 8016c40 <_svfiprintf_r+0x60>
 8016c3c:	2a25      	cmp	r2, #37	@ 0x25
 8016c3e:	d1f9      	bne.n	8016c34 <_svfiprintf_r+0x54>
 8016c40:	ebba 0b04 	subs.w	fp, sl, r4
 8016c44:	d00b      	beq.n	8016c5e <_svfiprintf_r+0x7e>
 8016c46:	465b      	mov	r3, fp
 8016c48:	4622      	mov	r2, r4
 8016c4a:	4629      	mov	r1, r5
 8016c4c:	4638      	mov	r0, r7
 8016c4e:	f7ff ff6b 	bl	8016b28 <__ssputs_r>
 8016c52:	3001      	adds	r0, #1
 8016c54:	f000 80a7 	beq.w	8016da6 <_svfiprintf_r+0x1c6>
 8016c58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016c5a:	445a      	add	r2, fp
 8016c5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8016c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	f000 809f 	beq.w	8016da6 <_svfiprintf_r+0x1c6>
 8016c68:	2300      	movs	r3, #0
 8016c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8016c6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c72:	f10a 0a01 	add.w	sl, sl, #1
 8016c76:	9304      	str	r3, [sp, #16]
 8016c78:	9307      	str	r3, [sp, #28]
 8016c7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016c7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8016c80:	4654      	mov	r4, sl
 8016c82:	2205      	movs	r2, #5
 8016c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c88:	484e      	ldr	r0, [pc, #312]	@ (8016dc4 <_svfiprintf_r+0x1e4>)
 8016c8a:	f7e9 fb21 	bl	80002d0 <memchr>
 8016c8e:	9a04      	ldr	r2, [sp, #16]
 8016c90:	b9d8      	cbnz	r0, 8016cca <_svfiprintf_r+0xea>
 8016c92:	06d0      	lsls	r0, r2, #27
 8016c94:	bf44      	itt	mi
 8016c96:	2320      	movmi	r3, #32
 8016c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016c9c:	0711      	lsls	r1, r2, #28
 8016c9e:	bf44      	itt	mi
 8016ca0:	232b      	movmi	r3, #43	@ 0x2b
 8016ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8016caa:	2b2a      	cmp	r3, #42	@ 0x2a
 8016cac:	d015      	beq.n	8016cda <_svfiprintf_r+0xfa>
 8016cae:	9a07      	ldr	r2, [sp, #28]
 8016cb0:	4654      	mov	r4, sl
 8016cb2:	2000      	movs	r0, #0
 8016cb4:	f04f 0c0a 	mov.w	ip, #10
 8016cb8:	4621      	mov	r1, r4
 8016cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016cbe:	3b30      	subs	r3, #48	@ 0x30
 8016cc0:	2b09      	cmp	r3, #9
 8016cc2:	d94b      	bls.n	8016d5c <_svfiprintf_r+0x17c>
 8016cc4:	b1b0      	cbz	r0, 8016cf4 <_svfiprintf_r+0x114>
 8016cc6:	9207      	str	r2, [sp, #28]
 8016cc8:	e014      	b.n	8016cf4 <_svfiprintf_r+0x114>
 8016cca:	eba0 0308 	sub.w	r3, r0, r8
 8016cce:	fa09 f303 	lsl.w	r3, r9, r3
 8016cd2:	4313      	orrs	r3, r2
 8016cd4:	9304      	str	r3, [sp, #16]
 8016cd6:	46a2      	mov	sl, r4
 8016cd8:	e7d2      	b.n	8016c80 <_svfiprintf_r+0xa0>
 8016cda:	9b03      	ldr	r3, [sp, #12]
 8016cdc:	1d19      	adds	r1, r3, #4
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	9103      	str	r1, [sp, #12]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	bfbb      	ittet	lt
 8016ce6:	425b      	neglt	r3, r3
 8016ce8:	f042 0202 	orrlt.w	r2, r2, #2
 8016cec:	9307      	strge	r3, [sp, #28]
 8016cee:	9307      	strlt	r3, [sp, #28]
 8016cf0:	bfb8      	it	lt
 8016cf2:	9204      	strlt	r2, [sp, #16]
 8016cf4:	7823      	ldrb	r3, [r4, #0]
 8016cf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8016cf8:	d10a      	bne.n	8016d10 <_svfiprintf_r+0x130>
 8016cfa:	7863      	ldrb	r3, [r4, #1]
 8016cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8016cfe:	d132      	bne.n	8016d66 <_svfiprintf_r+0x186>
 8016d00:	9b03      	ldr	r3, [sp, #12]
 8016d02:	1d1a      	adds	r2, r3, #4
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	9203      	str	r2, [sp, #12]
 8016d08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016d0c:	3402      	adds	r4, #2
 8016d0e:	9305      	str	r3, [sp, #20]
 8016d10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016dd4 <_svfiprintf_r+0x1f4>
 8016d14:	7821      	ldrb	r1, [r4, #0]
 8016d16:	2203      	movs	r2, #3
 8016d18:	4650      	mov	r0, sl
 8016d1a:	f7e9 fad9 	bl	80002d0 <memchr>
 8016d1e:	b138      	cbz	r0, 8016d30 <_svfiprintf_r+0x150>
 8016d20:	9b04      	ldr	r3, [sp, #16]
 8016d22:	eba0 000a 	sub.w	r0, r0, sl
 8016d26:	2240      	movs	r2, #64	@ 0x40
 8016d28:	4082      	lsls	r2, r0
 8016d2a:	4313      	orrs	r3, r2
 8016d2c:	3401      	adds	r4, #1
 8016d2e:	9304      	str	r3, [sp, #16]
 8016d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d34:	4824      	ldr	r0, [pc, #144]	@ (8016dc8 <_svfiprintf_r+0x1e8>)
 8016d36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016d3a:	2206      	movs	r2, #6
 8016d3c:	f7e9 fac8 	bl	80002d0 <memchr>
 8016d40:	2800      	cmp	r0, #0
 8016d42:	d036      	beq.n	8016db2 <_svfiprintf_r+0x1d2>
 8016d44:	4b21      	ldr	r3, [pc, #132]	@ (8016dcc <_svfiprintf_r+0x1ec>)
 8016d46:	bb1b      	cbnz	r3, 8016d90 <_svfiprintf_r+0x1b0>
 8016d48:	9b03      	ldr	r3, [sp, #12]
 8016d4a:	3307      	adds	r3, #7
 8016d4c:	f023 0307 	bic.w	r3, r3, #7
 8016d50:	3308      	adds	r3, #8
 8016d52:	9303      	str	r3, [sp, #12]
 8016d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d56:	4433      	add	r3, r6
 8016d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d5a:	e76a      	b.n	8016c32 <_svfiprintf_r+0x52>
 8016d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016d60:	460c      	mov	r4, r1
 8016d62:	2001      	movs	r0, #1
 8016d64:	e7a8      	b.n	8016cb8 <_svfiprintf_r+0xd8>
 8016d66:	2300      	movs	r3, #0
 8016d68:	3401      	adds	r4, #1
 8016d6a:	9305      	str	r3, [sp, #20]
 8016d6c:	4619      	mov	r1, r3
 8016d6e:	f04f 0c0a 	mov.w	ip, #10
 8016d72:	4620      	mov	r0, r4
 8016d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d78:	3a30      	subs	r2, #48	@ 0x30
 8016d7a:	2a09      	cmp	r2, #9
 8016d7c:	d903      	bls.n	8016d86 <_svfiprintf_r+0x1a6>
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d0c6      	beq.n	8016d10 <_svfiprintf_r+0x130>
 8016d82:	9105      	str	r1, [sp, #20]
 8016d84:	e7c4      	b.n	8016d10 <_svfiprintf_r+0x130>
 8016d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8016d8a:	4604      	mov	r4, r0
 8016d8c:	2301      	movs	r3, #1
 8016d8e:	e7f0      	b.n	8016d72 <_svfiprintf_r+0x192>
 8016d90:	ab03      	add	r3, sp, #12
 8016d92:	9300      	str	r3, [sp, #0]
 8016d94:	462a      	mov	r2, r5
 8016d96:	4b0e      	ldr	r3, [pc, #56]	@ (8016dd0 <_svfiprintf_r+0x1f0>)
 8016d98:	a904      	add	r1, sp, #16
 8016d9a:	4638      	mov	r0, r7
 8016d9c:	f7fd fe22 	bl	80149e4 <_printf_float>
 8016da0:	1c42      	adds	r2, r0, #1
 8016da2:	4606      	mov	r6, r0
 8016da4:	d1d6      	bne.n	8016d54 <_svfiprintf_r+0x174>
 8016da6:	89ab      	ldrh	r3, [r5, #12]
 8016da8:	065b      	lsls	r3, r3, #25
 8016daa:	f53f af2d 	bmi.w	8016c08 <_svfiprintf_r+0x28>
 8016dae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016db0:	e72c      	b.n	8016c0c <_svfiprintf_r+0x2c>
 8016db2:	ab03      	add	r3, sp, #12
 8016db4:	9300      	str	r3, [sp, #0]
 8016db6:	462a      	mov	r2, r5
 8016db8:	4b05      	ldr	r3, [pc, #20]	@ (8016dd0 <_svfiprintf_r+0x1f0>)
 8016dba:	a904      	add	r1, sp, #16
 8016dbc:	4638      	mov	r0, r7
 8016dbe:	f7fe f8a9 	bl	8014f14 <_printf_i>
 8016dc2:	e7ed      	b.n	8016da0 <_svfiprintf_r+0x1c0>
 8016dc4:	080d59e8 	.word	0x080d59e8
 8016dc8:	080d59f2 	.word	0x080d59f2
 8016dcc:	080149e5 	.word	0x080149e5
 8016dd0:	08016b29 	.word	0x08016b29
 8016dd4:	080d59ee 	.word	0x080d59ee

08016dd8 <__sfputc_r>:
 8016dd8:	6893      	ldr	r3, [r2, #8]
 8016dda:	3b01      	subs	r3, #1
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	b410      	push	{r4}
 8016de0:	6093      	str	r3, [r2, #8]
 8016de2:	da08      	bge.n	8016df6 <__sfputc_r+0x1e>
 8016de4:	6994      	ldr	r4, [r2, #24]
 8016de6:	42a3      	cmp	r3, r4
 8016de8:	db01      	blt.n	8016dee <__sfputc_r+0x16>
 8016dea:	290a      	cmp	r1, #10
 8016dec:	d103      	bne.n	8016df6 <__sfputc_r+0x1e>
 8016dee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016df2:	f7fe bb44 	b.w	801547e <__swbuf_r>
 8016df6:	6813      	ldr	r3, [r2, #0]
 8016df8:	1c58      	adds	r0, r3, #1
 8016dfa:	6010      	str	r0, [r2, #0]
 8016dfc:	7019      	strb	r1, [r3, #0]
 8016dfe:	4608      	mov	r0, r1
 8016e00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e04:	4770      	bx	lr

08016e06 <__sfputs_r>:
 8016e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e08:	4606      	mov	r6, r0
 8016e0a:	460f      	mov	r7, r1
 8016e0c:	4614      	mov	r4, r2
 8016e0e:	18d5      	adds	r5, r2, r3
 8016e10:	42ac      	cmp	r4, r5
 8016e12:	d101      	bne.n	8016e18 <__sfputs_r+0x12>
 8016e14:	2000      	movs	r0, #0
 8016e16:	e007      	b.n	8016e28 <__sfputs_r+0x22>
 8016e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e1c:	463a      	mov	r2, r7
 8016e1e:	4630      	mov	r0, r6
 8016e20:	f7ff ffda 	bl	8016dd8 <__sfputc_r>
 8016e24:	1c43      	adds	r3, r0, #1
 8016e26:	d1f3      	bne.n	8016e10 <__sfputs_r+0xa>
 8016e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016e2c <_vfiprintf_r>:
 8016e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e30:	460d      	mov	r5, r1
 8016e32:	b09d      	sub	sp, #116	@ 0x74
 8016e34:	4614      	mov	r4, r2
 8016e36:	4698      	mov	r8, r3
 8016e38:	4606      	mov	r6, r0
 8016e3a:	b118      	cbz	r0, 8016e44 <_vfiprintf_r+0x18>
 8016e3c:	6a03      	ldr	r3, [r0, #32]
 8016e3e:	b90b      	cbnz	r3, 8016e44 <_vfiprintf_r+0x18>
 8016e40:	f7fe fa14 	bl	801526c <__sinit>
 8016e44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016e46:	07d9      	lsls	r1, r3, #31
 8016e48:	d405      	bmi.n	8016e56 <_vfiprintf_r+0x2a>
 8016e4a:	89ab      	ldrh	r3, [r5, #12]
 8016e4c:	059a      	lsls	r2, r3, #22
 8016e4e:	d402      	bmi.n	8016e56 <_vfiprintf_r+0x2a>
 8016e50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016e52:	f7fe fc36 	bl	80156c2 <__retarget_lock_acquire_recursive>
 8016e56:	89ab      	ldrh	r3, [r5, #12]
 8016e58:	071b      	lsls	r3, r3, #28
 8016e5a:	d501      	bpl.n	8016e60 <_vfiprintf_r+0x34>
 8016e5c:	692b      	ldr	r3, [r5, #16]
 8016e5e:	b99b      	cbnz	r3, 8016e88 <_vfiprintf_r+0x5c>
 8016e60:	4629      	mov	r1, r5
 8016e62:	4630      	mov	r0, r6
 8016e64:	f7fe fb4a 	bl	80154fc <__swsetup_r>
 8016e68:	b170      	cbz	r0, 8016e88 <_vfiprintf_r+0x5c>
 8016e6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016e6c:	07dc      	lsls	r4, r3, #31
 8016e6e:	d504      	bpl.n	8016e7a <_vfiprintf_r+0x4e>
 8016e70:	f04f 30ff 	mov.w	r0, #4294967295
 8016e74:	b01d      	add	sp, #116	@ 0x74
 8016e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e7a:	89ab      	ldrh	r3, [r5, #12]
 8016e7c:	0598      	lsls	r0, r3, #22
 8016e7e:	d4f7      	bmi.n	8016e70 <_vfiprintf_r+0x44>
 8016e80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016e82:	f7fe fc1f 	bl	80156c4 <__retarget_lock_release_recursive>
 8016e86:	e7f3      	b.n	8016e70 <_vfiprintf_r+0x44>
 8016e88:	2300      	movs	r3, #0
 8016e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016e8c:	2320      	movs	r3, #32
 8016e8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016e92:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e96:	2330      	movs	r3, #48	@ 0x30
 8016e98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017048 <_vfiprintf_r+0x21c>
 8016e9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016ea0:	f04f 0901 	mov.w	r9, #1
 8016ea4:	4623      	mov	r3, r4
 8016ea6:	469a      	mov	sl, r3
 8016ea8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016eac:	b10a      	cbz	r2, 8016eb2 <_vfiprintf_r+0x86>
 8016eae:	2a25      	cmp	r2, #37	@ 0x25
 8016eb0:	d1f9      	bne.n	8016ea6 <_vfiprintf_r+0x7a>
 8016eb2:	ebba 0b04 	subs.w	fp, sl, r4
 8016eb6:	d00b      	beq.n	8016ed0 <_vfiprintf_r+0xa4>
 8016eb8:	465b      	mov	r3, fp
 8016eba:	4622      	mov	r2, r4
 8016ebc:	4629      	mov	r1, r5
 8016ebe:	4630      	mov	r0, r6
 8016ec0:	f7ff ffa1 	bl	8016e06 <__sfputs_r>
 8016ec4:	3001      	adds	r0, #1
 8016ec6:	f000 80a7 	beq.w	8017018 <_vfiprintf_r+0x1ec>
 8016eca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016ecc:	445a      	add	r2, fp
 8016ece:	9209      	str	r2, [sp, #36]	@ 0x24
 8016ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	f000 809f 	beq.w	8017018 <_vfiprintf_r+0x1ec>
 8016eda:	2300      	movs	r3, #0
 8016edc:	f04f 32ff 	mov.w	r2, #4294967295
 8016ee0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ee4:	f10a 0a01 	add.w	sl, sl, #1
 8016ee8:	9304      	str	r3, [sp, #16]
 8016eea:	9307      	str	r3, [sp, #28]
 8016eec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016ef0:	931a      	str	r3, [sp, #104]	@ 0x68
 8016ef2:	4654      	mov	r4, sl
 8016ef4:	2205      	movs	r2, #5
 8016ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016efa:	4853      	ldr	r0, [pc, #332]	@ (8017048 <_vfiprintf_r+0x21c>)
 8016efc:	f7e9 f9e8 	bl	80002d0 <memchr>
 8016f00:	9a04      	ldr	r2, [sp, #16]
 8016f02:	b9d8      	cbnz	r0, 8016f3c <_vfiprintf_r+0x110>
 8016f04:	06d1      	lsls	r1, r2, #27
 8016f06:	bf44      	itt	mi
 8016f08:	2320      	movmi	r3, #32
 8016f0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016f0e:	0713      	lsls	r3, r2, #28
 8016f10:	bf44      	itt	mi
 8016f12:	232b      	movmi	r3, #43	@ 0x2b
 8016f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016f18:	f89a 3000 	ldrb.w	r3, [sl]
 8016f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016f1e:	d015      	beq.n	8016f4c <_vfiprintf_r+0x120>
 8016f20:	9a07      	ldr	r2, [sp, #28]
 8016f22:	4654      	mov	r4, sl
 8016f24:	2000      	movs	r0, #0
 8016f26:	f04f 0c0a 	mov.w	ip, #10
 8016f2a:	4621      	mov	r1, r4
 8016f2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016f30:	3b30      	subs	r3, #48	@ 0x30
 8016f32:	2b09      	cmp	r3, #9
 8016f34:	d94b      	bls.n	8016fce <_vfiprintf_r+0x1a2>
 8016f36:	b1b0      	cbz	r0, 8016f66 <_vfiprintf_r+0x13a>
 8016f38:	9207      	str	r2, [sp, #28]
 8016f3a:	e014      	b.n	8016f66 <_vfiprintf_r+0x13a>
 8016f3c:	eba0 0308 	sub.w	r3, r0, r8
 8016f40:	fa09 f303 	lsl.w	r3, r9, r3
 8016f44:	4313      	orrs	r3, r2
 8016f46:	9304      	str	r3, [sp, #16]
 8016f48:	46a2      	mov	sl, r4
 8016f4a:	e7d2      	b.n	8016ef2 <_vfiprintf_r+0xc6>
 8016f4c:	9b03      	ldr	r3, [sp, #12]
 8016f4e:	1d19      	adds	r1, r3, #4
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	9103      	str	r1, [sp, #12]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	bfbb      	ittet	lt
 8016f58:	425b      	neglt	r3, r3
 8016f5a:	f042 0202 	orrlt.w	r2, r2, #2
 8016f5e:	9307      	strge	r3, [sp, #28]
 8016f60:	9307      	strlt	r3, [sp, #28]
 8016f62:	bfb8      	it	lt
 8016f64:	9204      	strlt	r2, [sp, #16]
 8016f66:	7823      	ldrb	r3, [r4, #0]
 8016f68:	2b2e      	cmp	r3, #46	@ 0x2e
 8016f6a:	d10a      	bne.n	8016f82 <_vfiprintf_r+0x156>
 8016f6c:	7863      	ldrb	r3, [r4, #1]
 8016f6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016f70:	d132      	bne.n	8016fd8 <_vfiprintf_r+0x1ac>
 8016f72:	9b03      	ldr	r3, [sp, #12]
 8016f74:	1d1a      	adds	r2, r3, #4
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	9203      	str	r2, [sp, #12]
 8016f7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016f7e:	3402      	adds	r4, #2
 8016f80:	9305      	str	r3, [sp, #20]
 8016f82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017058 <_vfiprintf_r+0x22c>
 8016f86:	7821      	ldrb	r1, [r4, #0]
 8016f88:	2203      	movs	r2, #3
 8016f8a:	4650      	mov	r0, sl
 8016f8c:	f7e9 f9a0 	bl	80002d0 <memchr>
 8016f90:	b138      	cbz	r0, 8016fa2 <_vfiprintf_r+0x176>
 8016f92:	9b04      	ldr	r3, [sp, #16]
 8016f94:	eba0 000a 	sub.w	r0, r0, sl
 8016f98:	2240      	movs	r2, #64	@ 0x40
 8016f9a:	4082      	lsls	r2, r0
 8016f9c:	4313      	orrs	r3, r2
 8016f9e:	3401      	adds	r4, #1
 8016fa0:	9304      	str	r3, [sp, #16]
 8016fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016fa6:	4829      	ldr	r0, [pc, #164]	@ (801704c <_vfiprintf_r+0x220>)
 8016fa8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016fac:	2206      	movs	r2, #6
 8016fae:	f7e9 f98f 	bl	80002d0 <memchr>
 8016fb2:	2800      	cmp	r0, #0
 8016fb4:	d03f      	beq.n	8017036 <_vfiprintf_r+0x20a>
 8016fb6:	4b26      	ldr	r3, [pc, #152]	@ (8017050 <_vfiprintf_r+0x224>)
 8016fb8:	bb1b      	cbnz	r3, 8017002 <_vfiprintf_r+0x1d6>
 8016fba:	9b03      	ldr	r3, [sp, #12]
 8016fbc:	3307      	adds	r3, #7
 8016fbe:	f023 0307 	bic.w	r3, r3, #7
 8016fc2:	3308      	adds	r3, #8
 8016fc4:	9303      	str	r3, [sp, #12]
 8016fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fc8:	443b      	add	r3, r7
 8016fca:	9309      	str	r3, [sp, #36]	@ 0x24
 8016fcc:	e76a      	b.n	8016ea4 <_vfiprintf_r+0x78>
 8016fce:	fb0c 3202 	mla	r2, ip, r2, r3
 8016fd2:	460c      	mov	r4, r1
 8016fd4:	2001      	movs	r0, #1
 8016fd6:	e7a8      	b.n	8016f2a <_vfiprintf_r+0xfe>
 8016fd8:	2300      	movs	r3, #0
 8016fda:	3401      	adds	r4, #1
 8016fdc:	9305      	str	r3, [sp, #20]
 8016fde:	4619      	mov	r1, r3
 8016fe0:	f04f 0c0a 	mov.w	ip, #10
 8016fe4:	4620      	mov	r0, r4
 8016fe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016fea:	3a30      	subs	r2, #48	@ 0x30
 8016fec:	2a09      	cmp	r2, #9
 8016fee:	d903      	bls.n	8016ff8 <_vfiprintf_r+0x1cc>
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d0c6      	beq.n	8016f82 <_vfiprintf_r+0x156>
 8016ff4:	9105      	str	r1, [sp, #20]
 8016ff6:	e7c4      	b.n	8016f82 <_vfiprintf_r+0x156>
 8016ff8:	fb0c 2101 	mla	r1, ip, r1, r2
 8016ffc:	4604      	mov	r4, r0
 8016ffe:	2301      	movs	r3, #1
 8017000:	e7f0      	b.n	8016fe4 <_vfiprintf_r+0x1b8>
 8017002:	ab03      	add	r3, sp, #12
 8017004:	9300      	str	r3, [sp, #0]
 8017006:	462a      	mov	r2, r5
 8017008:	4b12      	ldr	r3, [pc, #72]	@ (8017054 <_vfiprintf_r+0x228>)
 801700a:	a904      	add	r1, sp, #16
 801700c:	4630      	mov	r0, r6
 801700e:	f7fd fce9 	bl	80149e4 <_printf_float>
 8017012:	4607      	mov	r7, r0
 8017014:	1c78      	adds	r0, r7, #1
 8017016:	d1d6      	bne.n	8016fc6 <_vfiprintf_r+0x19a>
 8017018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801701a:	07d9      	lsls	r1, r3, #31
 801701c:	d405      	bmi.n	801702a <_vfiprintf_r+0x1fe>
 801701e:	89ab      	ldrh	r3, [r5, #12]
 8017020:	059a      	lsls	r2, r3, #22
 8017022:	d402      	bmi.n	801702a <_vfiprintf_r+0x1fe>
 8017024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017026:	f7fe fb4d 	bl	80156c4 <__retarget_lock_release_recursive>
 801702a:	89ab      	ldrh	r3, [r5, #12]
 801702c:	065b      	lsls	r3, r3, #25
 801702e:	f53f af1f 	bmi.w	8016e70 <_vfiprintf_r+0x44>
 8017032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017034:	e71e      	b.n	8016e74 <_vfiprintf_r+0x48>
 8017036:	ab03      	add	r3, sp, #12
 8017038:	9300      	str	r3, [sp, #0]
 801703a:	462a      	mov	r2, r5
 801703c:	4b05      	ldr	r3, [pc, #20]	@ (8017054 <_vfiprintf_r+0x228>)
 801703e:	a904      	add	r1, sp, #16
 8017040:	4630      	mov	r0, r6
 8017042:	f7fd ff67 	bl	8014f14 <_printf_i>
 8017046:	e7e4      	b.n	8017012 <_vfiprintf_r+0x1e6>
 8017048:	080d59e8 	.word	0x080d59e8
 801704c:	080d59f2 	.word	0x080d59f2
 8017050:	080149e5 	.word	0x080149e5
 8017054:	08016e07 	.word	0x08016e07
 8017058:	080d59ee 	.word	0x080d59ee

0801705c <__sflush_r>:
 801705c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017064:	0716      	lsls	r6, r2, #28
 8017066:	4605      	mov	r5, r0
 8017068:	460c      	mov	r4, r1
 801706a:	d454      	bmi.n	8017116 <__sflush_r+0xba>
 801706c:	684b      	ldr	r3, [r1, #4]
 801706e:	2b00      	cmp	r3, #0
 8017070:	dc02      	bgt.n	8017078 <__sflush_r+0x1c>
 8017072:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017074:	2b00      	cmp	r3, #0
 8017076:	dd48      	ble.n	801710a <__sflush_r+0xae>
 8017078:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801707a:	2e00      	cmp	r6, #0
 801707c:	d045      	beq.n	801710a <__sflush_r+0xae>
 801707e:	2300      	movs	r3, #0
 8017080:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017084:	682f      	ldr	r7, [r5, #0]
 8017086:	6a21      	ldr	r1, [r4, #32]
 8017088:	602b      	str	r3, [r5, #0]
 801708a:	d030      	beq.n	80170ee <__sflush_r+0x92>
 801708c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801708e:	89a3      	ldrh	r3, [r4, #12]
 8017090:	0759      	lsls	r1, r3, #29
 8017092:	d505      	bpl.n	80170a0 <__sflush_r+0x44>
 8017094:	6863      	ldr	r3, [r4, #4]
 8017096:	1ad2      	subs	r2, r2, r3
 8017098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801709a:	b10b      	cbz	r3, 80170a0 <__sflush_r+0x44>
 801709c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801709e:	1ad2      	subs	r2, r2, r3
 80170a0:	2300      	movs	r3, #0
 80170a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80170a4:	6a21      	ldr	r1, [r4, #32]
 80170a6:	4628      	mov	r0, r5
 80170a8:	47b0      	blx	r6
 80170aa:	1c43      	adds	r3, r0, #1
 80170ac:	89a3      	ldrh	r3, [r4, #12]
 80170ae:	d106      	bne.n	80170be <__sflush_r+0x62>
 80170b0:	6829      	ldr	r1, [r5, #0]
 80170b2:	291d      	cmp	r1, #29
 80170b4:	d82b      	bhi.n	801710e <__sflush_r+0xb2>
 80170b6:	4a2a      	ldr	r2, [pc, #168]	@ (8017160 <__sflush_r+0x104>)
 80170b8:	410a      	asrs	r2, r1
 80170ba:	07d6      	lsls	r6, r2, #31
 80170bc:	d427      	bmi.n	801710e <__sflush_r+0xb2>
 80170be:	2200      	movs	r2, #0
 80170c0:	6062      	str	r2, [r4, #4]
 80170c2:	04d9      	lsls	r1, r3, #19
 80170c4:	6922      	ldr	r2, [r4, #16]
 80170c6:	6022      	str	r2, [r4, #0]
 80170c8:	d504      	bpl.n	80170d4 <__sflush_r+0x78>
 80170ca:	1c42      	adds	r2, r0, #1
 80170cc:	d101      	bne.n	80170d2 <__sflush_r+0x76>
 80170ce:	682b      	ldr	r3, [r5, #0]
 80170d0:	b903      	cbnz	r3, 80170d4 <__sflush_r+0x78>
 80170d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80170d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80170d6:	602f      	str	r7, [r5, #0]
 80170d8:	b1b9      	cbz	r1, 801710a <__sflush_r+0xae>
 80170da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80170de:	4299      	cmp	r1, r3
 80170e0:	d002      	beq.n	80170e8 <__sflush_r+0x8c>
 80170e2:	4628      	mov	r0, r5
 80170e4:	f7ff f94c 	bl	8016380 <_free_r>
 80170e8:	2300      	movs	r3, #0
 80170ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80170ec:	e00d      	b.n	801710a <__sflush_r+0xae>
 80170ee:	2301      	movs	r3, #1
 80170f0:	4628      	mov	r0, r5
 80170f2:	47b0      	blx	r6
 80170f4:	4602      	mov	r2, r0
 80170f6:	1c50      	adds	r0, r2, #1
 80170f8:	d1c9      	bne.n	801708e <__sflush_r+0x32>
 80170fa:	682b      	ldr	r3, [r5, #0]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d0c6      	beq.n	801708e <__sflush_r+0x32>
 8017100:	2b1d      	cmp	r3, #29
 8017102:	d001      	beq.n	8017108 <__sflush_r+0xac>
 8017104:	2b16      	cmp	r3, #22
 8017106:	d11e      	bne.n	8017146 <__sflush_r+0xea>
 8017108:	602f      	str	r7, [r5, #0]
 801710a:	2000      	movs	r0, #0
 801710c:	e022      	b.n	8017154 <__sflush_r+0xf8>
 801710e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017112:	b21b      	sxth	r3, r3
 8017114:	e01b      	b.n	801714e <__sflush_r+0xf2>
 8017116:	690f      	ldr	r7, [r1, #16]
 8017118:	2f00      	cmp	r7, #0
 801711a:	d0f6      	beq.n	801710a <__sflush_r+0xae>
 801711c:	0793      	lsls	r3, r2, #30
 801711e:	680e      	ldr	r6, [r1, #0]
 8017120:	bf08      	it	eq
 8017122:	694b      	ldreq	r3, [r1, #20]
 8017124:	600f      	str	r7, [r1, #0]
 8017126:	bf18      	it	ne
 8017128:	2300      	movne	r3, #0
 801712a:	eba6 0807 	sub.w	r8, r6, r7
 801712e:	608b      	str	r3, [r1, #8]
 8017130:	f1b8 0f00 	cmp.w	r8, #0
 8017134:	dde9      	ble.n	801710a <__sflush_r+0xae>
 8017136:	6a21      	ldr	r1, [r4, #32]
 8017138:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801713a:	4643      	mov	r3, r8
 801713c:	463a      	mov	r2, r7
 801713e:	4628      	mov	r0, r5
 8017140:	47b0      	blx	r6
 8017142:	2800      	cmp	r0, #0
 8017144:	dc08      	bgt.n	8017158 <__sflush_r+0xfc>
 8017146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801714a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801714e:	81a3      	strh	r3, [r4, #12]
 8017150:	f04f 30ff 	mov.w	r0, #4294967295
 8017154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017158:	4407      	add	r7, r0
 801715a:	eba8 0800 	sub.w	r8, r8, r0
 801715e:	e7e7      	b.n	8017130 <__sflush_r+0xd4>
 8017160:	dfbffffe 	.word	0xdfbffffe

08017164 <_fflush_r>:
 8017164:	b538      	push	{r3, r4, r5, lr}
 8017166:	690b      	ldr	r3, [r1, #16]
 8017168:	4605      	mov	r5, r0
 801716a:	460c      	mov	r4, r1
 801716c:	b913      	cbnz	r3, 8017174 <_fflush_r+0x10>
 801716e:	2500      	movs	r5, #0
 8017170:	4628      	mov	r0, r5
 8017172:	bd38      	pop	{r3, r4, r5, pc}
 8017174:	b118      	cbz	r0, 801717e <_fflush_r+0x1a>
 8017176:	6a03      	ldr	r3, [r0, #32]
 8017178:	b90b      	cbnz	r3, 801717e <_fflush_r+0x1a>
 801717a:	f7fe f877 	bl	801526c <__sinit>
 801717e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d0f3      	beq.n	801716e <_fflush_r+0xa>
 8017186:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017188:	07d0      	lsls	r0, r2, #31
 801718a:	d404      	bmi.n	8017196 <_fflush_r+0x32>
 801718c:	0599      	lsls	r1, r3, #22
 801718e:	d402      	bmi.n	8017196 <_fflush_r+0x32>
 8017190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017192:	f7fe fa96 	bl	80156c2 <__retarget_lock_acquire_recursive>
 8017196:	4628      	mov	r0, r5
 8017198:	4621      	mov	r1, r4
 801719a:	f7ff ff5f 	bl	801705c <__sflush_r>
 801719e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80171a0:	07da      	lsls	r2, r3, #31
 80171a2:	4605      	mov	r5, r0
 80171a4:	d4e4      	bmi.n	8017170 <_fflush_r+0xc>
 80171a6:	89a3      	ldrh	r3, [r4, #12]
 80171a8:	059b      	lsls	r3, r3, #22
 80171aa:	d4e1      	bmi.n	8017170 <_fflush_r+0xc>
 80171ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80171ae:	f7fe fa89 	bl	80156c4 <__retarget_lock_release_recursive>
 80171b2:	e7dd      	b.n	8017170 <_fflush_r+0xc>

080171b4 <__swhatbuf_r>:
 80171b4:	b570      	push	{r4, r5, r6, lr}
 80171b6:	460c      	mov	r4, r1
 80171b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171bc:	2900      	cmp	r1, #0
 80171be:	b096      	sub	sp, #88	@ 0x58
 80171c0:	4615      	mov	r5, r2
 80171c2:	461e      	mov	r6, r3
 80171c4:	da0d      	bge.n	80171e2 <__swhatbuf_r+0x2e>
 80171c6:	89a3      	ldrh	r3, [r4, #12]
 80171c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80171cc:	f04f 0100 	mov.w	r1, #0
 80171d0:	bf14      	ite	ne
 80171d2:	2340      	movne	r3, #64	@ 0x40
 80171d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80171d8:	2000      	movs	r0, #0
 80171da:	6031      	str	r1, [r6, #0]
 80171dc:	602b      	str	r3, [r5, #0]
 80171de:	b016      	add	sp, #88	@ 0x58
 80171e0:	bd70      	pop	{r4, r5, r6, pc}
 80171e2:	466a      	mov	r2, sp
 80171e4:	f000 f862 	bl	80172ac <_fstat_r>
 80171e8:	2800      	cmp	r0, #0
 80171ea:	dbec      	blt.n	80171c6 <__swhatbuf_r+0x12>
 80171ec:	9901      	ldr	r1, [sp, #4]
 80171ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80171f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80171f6:	4259      	negs	r1, r3
 80171f8:	4159      	adcs	r1, r3
 80171fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80171fe:	e7eb      	b.n	80171d8 <__swhatbuf_r+0x24>

08017200 <__smakebuf_r>:
 8017200:	898b      	ldrh	r3, [r1, #12]
 8017202:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017204:	079d      	lsls	r5, r3, #30
 8017206:	4606      	mov	r6, r0
 8017208:	460c      	mov	r4, r1
 801720a:	d507      	bpl.n	801721c <__smakebuf_r+0x1c>
 801720c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017210:	6023      	str	r3, [r4, #0]
 8017212:	6123      	str	r3, [r4, #16]
 8017214:	2301      	movs	r3, #1
 8017216:	6163      	str	r3, [r4, #20]
 8017218:	b003      	add	sp, #12
 801721a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801721c:	ab01      	add	r3, sp, #4
 801721e:	466a      	mov	r2, sp
 8017220:	f7ff ffc8 	bl	80171b4 <__swhatbuf_r>
 8017224:	9f00      	ldr	r7, [sp, #0]
 8017226:	4605      	mov	r5, r0
 8017228:	4639      	mov	r1, r7
 801722a:	4630      	mov	r0, r6
 801722c:	f7fd fa80 	bl	8014730 <_malloc_r>
 8017230:	b948      	cbnz	r0, 8017246 <__smakebuf_r+0x46>
 8017232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017236:	059a      	lsls	r2, r3, #22
 8017238:	d4ee      	bmi.n	8017218 <__smakebuf_r+0x18>
 801723a:	f023 0303 	bic.w	r3, r3, #3
 801723e:	f043 0302 	orr.w	r3, r3, #2
 8017242:	81a3      	strh	r3, [r4, #12]
 8017244:	e7e2      	b.n	801720c <__smakebuf_r+0xc>
 8017246:	89a3      	ldrh	r3, [r4, #12]
 8017248:	6020      	str	r0, [r4, #0]
 801724a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801724e:	81a3      	strh	r3, [r4, #12]
 8017250:	9b01      	ldr	r3, [sp, #4]
 8017252:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017256:	b15b      	cbz	r3, 8017270 <__smakebuf_r+0x70>
 8017258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801725c:	4630      	mov	r0, r6
 801725e:	f000 f837 	bl	80172d0 <_isatty_r>
 8017262:	b128      	cbz	r0, 8017270 <__smakebuf_r+0x70>
 8017264:	89a3      	ldrh	r3, [r4, #12]
 8017266:	f023 0303 	bic.w	r3, r3, #3
 801726a:	f043 0301 	orr.w	r3, r3, #1
 801726e:	81a3      	strh	r3, [r4, #12]
 8017270:	89a3      	ldrh	r3, [r4, #12]
 8017272:	431d      	orrs	r5, r3
 8017274:	81a5      	strh	r5, [r4, #12]
 8017276:	e7cf      	b.n	8017218 <__smakebuf_r+0x18>

08017278 <memmove>:
 8017278:	4288      	cmp	r0, r1
 801727a:	b510      	push	{r4, lr}
 801727c:	eb01 0402 	add.w	r4, r1, r2
 8017280:	d902      	bls.n	8017288 <memmove+0x10>
 8017282:	4284      	cmp	r4, r0
 8017284:	4623      	mov	r3, r4
 8017286:	d807      	bhi.n	8017298 <memmove+0x20>
 8017288:	1e43      	subs	r3, r0, #1
 801728a:	42a1      	cmp	r1, r4
 801728c:	d008      	beq.n	80172a0 <memmove+0x28>
 801728e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017292:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017296:	e7f8      	b.n	801728a <memmove+0x12>
 8017298:	4402      	add	r2, r0
 801729a:	4601      	mov	r1, r0
 801729c:	428a      	cmp	r2, r1
 801729e:	d100      	bne.n	80172a2 <memmove+0x2a>
 80172a0:	bd10      	pop	{r4, pc}
 80172a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80172a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80172aa:	e7f7      	b.n	801729c <memmove+0x24>

080172ac <_fstat_r>:
 80172ac:	b538      	push	{r3, r4, r5, lr}
 80172ae:	4d07      	ldr	r5, [pc, #28]	@ (80172cc <_fstat_r+0x20>)
 80172b0:	2300      	movs	r3, #0
 80172b2:	4604      	mov	r4, r0
 80172b4:	4608      	mov	r0, r1
 80172b6:	4611      	mov	r1, r2
 80172b8:	602b      	str	r3, [r5, #0]
 80172ba:	f7eb fcdd 	bl	8002c78 <_fstat>
 80172be:	1c43      	adds	r3, r0, #1
 80172c0:	d102      	bne.n	80172c8 <_fstat_r+0x1c>
 80172c2:	682b      	ldr	r3, [r5, #0]
 80172c4:	b103      	cbz	r3, 80172c8 <_fstat_r+0x1c>
 80172c6:	6023      	str	r3, [r4, #0]
 80172c8:	bd38      	pop	{r3, r4, r5, pc}
 80172ca:	bf00      	nop
 80172cc:	20036190 	.word	0x20036190

080172d0 <_isatty_r>:
 80172d0:	b538      	push	{r3, r4, r5, lr}
 80172d2:	4d06      	ldr	r5, [pc, #24]	@ (80172ec <_isatty_r+0x1c>)
 80172d4:	2300      	movs	r3, #0
 80172d6:	4604      	mov	r4, r0
 80172d8:	4608      	mov	r0, r1
 80172da:	602b      	str	r3, [r5, #0]
 80172dc:	f7eb fcdc 	bl	8002c98 <_isatty>
 80172e0:	1c43      	adds	r3, r0, #1
 80172e2:	d102      	bne.n	80172ea <_isatty_r+0x1a>
 80172e4:	682b      	ldr	r3, [r5, #0]
 80172e6:	b103      	cbz	r3, 80172ea <_isatty_r+0x1a>
 80172e8:	6023      	str	r3, [r4, #0]
 80172ea:	bd38      	pop	{r3, r4, r5, pc}
 80172ec:	20036190 	.word	0x20036190

080172f0 <__assert_func>:
 80172f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80172f2:	4614      	mov	r4, r2
 80172f4:	461a      	mov	r2, r3
 80172f6:	4b09      	ldr	r3, [pc, #36]	@ (801731c <__assert_func+0x2c>)
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	4605      	mov	r5, r0
 80172fc:	68d8      	ldr	r0, [r3, #12]
 80172fe:	b954      	cbnz	r4, 8017316 <__assert_func+0x26>
 8017300:	4b07      	ldr	r3, [pc, #28]	@ (8017320 <__assert_func+0x30>)
 8017302:	461c      	mov	r4, r3
 8017304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017308:	9100      	str	r1, [sp, #0]
 801730a:	462b      	mov	r3, r5
 801730c:	4905      	ldr	r1, [pc, #20]	@ (8017324 <__assert_func+0x34>)
 801730e:	f000 f841 	bl	8017394 <fiprintf>
 8017312:	f000 f851 	bl	80173b8 <abort>
 8017316:	4b04      	ldr	r3, [pc, #16]	@ (8017328 <__assert_func+0x38>)
 8017318:	e7f4      	b.n	8017304 <__assert_func+0x14>
 801731a:	bf00      	nop
 801731c:	20000824 	.word	0x20000824
 8017320:	080d5a3e 	.word	0x080d5a3e
 8017324:	080d5a10 	.word	0x080d5a10
 8017328:	080d5a03 	.word	0x080d5a03

0801732c <_calloc_r>:
 801732c:	b570      	push	{r4, r5, r6, lr}
 801732e:	fba1 5402 	umull	r5, r4, r1, r2
 8017332:	b93c      	cbnz	r4, 8017344 <_calloc_r+0x18>
 8017334:	4629      	mov	r1, r5
 8017336:	f7fd f9fb 	bl	8014730 <_malloc_r>
 801733a:	4606      	mov	r6, r0
 801733c:	b928      	cbnz	r0, 801734a <_calloc_r+0x1e>
 801733e:	2600      	movs	r6, #0
 8017340:	4630      	mov	r0, r6
 8017342:	bd70      	pop	{r4, r5, r6, pc}
 8017344:	220c      	movs	r2, #12
 8017346:	6002      	str	r2, [r0, #0]
 8017348:	e7f9      	b.n	801733e <_calloc_r+0x12>
 801734a:	462a      	mov	r2, r5
 801734c:	4621      	mov	r1, r4
 801734e:	f7fe f92b 	bl	80155a8 <memset>
 8017352:	e7f5      	b.n	8017340 <_calloc_r+0x14>

08017354 <__ascii_mbtowc>:
 8017354:	b082      	sub	sp, #8
 8017356:	b901      	cbnz	r1, 801735a <__ascii_mbtowc+0x6>
 8017358:	a901      	add	r1, sp, #4
 801735a:	b142      	cbz	r2, 801736e <__ascii_mbtowc+0x1a>
 801735c:	b14b      	cbz	r3, 8017372 <__ascii_mbtowc+0x1e>
 801735e:	7813      	ldrb	r3, [r2, #0]
 8017360:	600b      	str	r3, [r1, #0]
 8017362:	7812      	ldrb	r2, [r2, #0]
 8017364:	1e10      	subs	r0, r2, #0
 8017366:	bf18      	it	ne
 8017368:	2001      	movne	r0, #1
 801736a:	b002      	add	sp, #8
 801736c:	4770      	bx	lr
 801736e:	4610      	mov	r0, r2
 8017370:	e7fb      	b.n	801736a <__ascii_mbtowc+0x16>
 8017372:	f06f 0001 	mvn.w	r0, #1
 8017376:	e7f8      	b.n	801736a <__ascii_mbtowc+0x16>

08017378 <__ascii_wctomb>:
 8017378:	4603      	mov	r3, r0
 801737a:	4608      	mov	r0, r1
 801737c:	b141      	cbz	r1, 8017390 <__ascii_wctomb+0x18>
 801737e:	2aff      	cmp	r2, #255	@ 0xff
 8017380:	d904      	bls.n	801738c <__ascii_wctomb+0x14>
 8017382:	228a      	movs	r2, #138	@ 0x8a
 8017384:	601a      	str	r2, [r3, #0]
 8017386:	f04f 30ff 	mov.w	r0, #4294967295
 801738a:	4770      	bx	lr
 801738c:	700a      	strb	r2, [r1, #0]
 801738e:	2001      	movs	r0, #1
 8017390:	4770      	bx	lr
	...

08017394 <fiprintf>:
 8017394:	b40e      	push	{r1, r2, r3}
 8017396:	b503      	push	{r0, r1, lr}
 8017398:	4601      	mov	r1, r0
 801739a:	ab03      	add	r3, sp, #12
 801739c:	4805      	ldr	r0, [pc, #20]	@ (80173b4 <fiprintf+0x20>)
 801739e:	f853 2b04 	ldr.w	r2, [r3], #4
 80173a2:	6800      	ldr	r0, [r0, #0]
 80173a4:	9301      	str	r3, [sp, #4]
 80173a6:	f7ff fd41 	bl	8016e2c <_vfiprintf_r>
 80173aa:	b002      	add	sp, #8
 80173ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80173b0:	b003      	add	sp, #12
 80173b2:	4770      	bx	lr
 80173b4:	20000824 	.word	0x20000824

080173b8 <abort>:
 80173b8:	b508      	push	{r3, lr}
 80173ba:	2006      	movs	r0, #6
 80173bc:	f000 f82c 	bl	8017418 <raise>
 80173c0:	2001      	movs	r0, #1
 80173c2:	f7eb fc09 	bl	8002bd8 <_exit>

080173c6 <_raise_r>:
 80173c6:	291f      	cmp	r1, #31
 80173c8:	b538      	push	{r3, r4, r5, lr}
 80173ca:	4605      	mov	r5, r0
 80173cc:	460c      	mov	r4, r1
 80173ce:	d904      	bls.n	80173da <_raise_r+0x14>
 80173d0:	2316      	movs	r3, #22
 80173d2:	6003      	str	r3, [r0, #0]
 80173d4:	f04f 30ff 	mov.w	r0, #4294967295
 80173d8:	bd38      	pop	{r3, r4, r5, pc}
 80173da:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80173dc:	b112      	cbz	r2, 80173e4 <_raise_r+0x1e>
 80173de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80173e2:	b94b      	cbnz	r3, 80173f8 <_raise_r+0x32>
 80173e4:	4628      	mov	r0, r5
 80173e6:	f000 f831 	bl	801744c <_getpid_r>
 80173ea:	4622      	mov	r2, r4
 80173ec:	4601      	mov	r1, r0
 80173ee:	4628      	mov	r0, r5
 80173f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173f4:	f000 b818 	b.w	8017428 <_kill_r>
 80173f8:	2b01      	cmp	r3, #1
 80173fa:	d00a      	beq.n	8017412 <_raise_r+0x4c>
 80173fc:	1c59      	adds	r1, r3, #1
 80173fe:	d103      	bne.n	8017408 <_raise_r+0x42>
 8017400:	2316      	movs	r3, #22
 8017402:	6003      	str	r3, [r0, #0]
 8017404:	2001      	movs	r0, #1
 8017406:	e7e7      	b.n	80173d8 <_raise_r+0x12>
 8017408:	2100      	movs	r1, #0
 801740a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801740e:	4620      	mov	r0, r4
 8017410:	4798      	blx	r3
 8017412:	2000      	movs	r0, #0
 8017414:	e7e0      	b.n	80173d8 <_raise_r+0x12>
	...

08017418 <raise>:
 8017418:	4b02      	ldr	r3, [pc, #8]	@ (8017424 <raise+0xc>)
 801741a:	4601      	mov	r1, r0
 801741c:	6818      	ldr	r0, [r3, #0]
 801741e:	f7ff bfd2 	b.w	80173c6 <_raise_r>
 8017422:	bf00      	nop
 8017424:	20000824 	.word	0x20000824

08017428 <_kill_r>:
 8017428:	b538      	push	{r3, r4, r5, lr}
 801742a:	4d07      	ldr	r5, [pc, #28]	@ (8017448 <_kill_r+0x20>)
 801742c:	2300      	movs	r3, #0
 801742e:	4604      	mov	r4, r0
 8017430:	4608      	mov	r0, r1
 8017432:	4611      	mov	r1, r2
 8017434:	602b      	str	r3, [r5, #0]
 8017436:	f7eb fbbf 	bl	8002bb8 <_kill>
 801743a:	1c43      	adds	r3, r0, #1
 801743c:	d102      	bne.n	8017444 <_kill_r+0x1c>
 801743e:	682b      	ldr	r3, [r5, #0]
 8017440:	b103      	cbz	r3, 8017444 <_kill_r+0x1c>
 8017442:	6023      	str	r3, [r4, #0]
 8017444:	bd38      	pop	{r3, r4, r5, pc}
 8017446:	bf00      	nop
 8017448:	20036190 	.word	0x20036190

0801744c <_getpid_r>:
 801744c:	f7eb bbac 	b.w	8002ba8 <_getpid>

08017450 <expf>:
 8017450:	b508      	push	{r3, lr}
 8017452:	ed2d 8b02 	vpush	{d8}
 8017456:	eef0 8a40 	vmov.f32	s17, s0
 801745a:	f000 f96b 	bl	8017734 <__ieee754_expf>
 801745e:	eeb0 8a40 	vmov.f32	s16, s0
 8017462:	eeb0 0a68 	vmov.f32	s0, s17
 8017466:	f000 f892 	bl	801758e <finitef>
 801746a:	b160      	cbz	r0, 8017486 <expf+0x36>
 801746c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80174ac <expf+0x5c>
 8017470:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017478:	dd0a      	ble.n	8017490 <expf+0x40>
 801747a:	f7fe f8f7 	bl	801566c <__errno>
 801747e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 80174b0 <expf+0x60>
 8017482:	2322      	movs	r3, #34	@ 0x22
 8017484:	6003      	str	r3, [r0, #0]
 8017486:	eeb0 0a48 	vmov.f32	s0, s16
 801748a:	ecbd 8b02 	vpop	{d8}
 801748e:	bd08      	pop	{r3, pc}
 8017490:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80174b4 <expf+0x64>
 8017494:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801749c:	d5f3      	bpl.n	8017486 <expf+0x36>
 801749e:	f7fe f8e5 	bl	801566c <__errno>
 80174a2:	2322      	movs	r3, #34	@ 0x22
 80174a4:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 80174b8 <expf+0x68>
 80174a8:	6003      	str	r3, [r0, #0]
 80174aa:	e7ec      	b.n	8017486 <expf+0x36>
 80174ac:	42b17217 	.word	0x42b17217
 80174b0:	7f800000 	.word	0x7f800000
 80174b4:	c2cff1b5 	.word	0xc2cff1b5
 80174b8:	00000000 	.word	0x00000000

080174bc <sqrtf>:
 80174bc:	b508      	push	{r3, lr}
 80174be:	ed2d 8b02 	vpush	{d8}
 80174c2:	eeb0 8a40 	vmov.f32	s16, s0
 80174c6:	f000 f891 	bl	80175ec <__ieee754_sqrtf>
 80174ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80174ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174d2:	d60c      	bvs.n	80174ee <sqrtf+0x32>
 80174d4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80174f4 <sqrtf+0x38>
 80174d8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80174dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174e0:	d505      	bpl.n	80174ee <sqrtf+0x32>
 80174e2:	f7fe f8c3 	bl	801566c <__errno>
 80174e6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80174ea:	2321      	movs	r3, #33	@ 0x21
 80174ec:	6003      	str	r3, [r0, #0]
 80174ee:	ecbd 8b02 	vpop	{d8}
 80174f2:	bd08      	pop	{r3, pc}
 80174f4:	00000000 	.word	0x00000000

080174f8 <cosf>:
 80174f8:	ee10 3a10 	vmov	r3, s0
 80174fc:	b507      	push	{r0, r1, r2, lr}
 80174fe:	4a1e      	ldr	r2, [pc, #120]	@ (8017578 <cosf+0x80>)
 8017500:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017504:	4293      	cmp	r3, r2
 8017506:	d806      	bhi.n	8017516 <cosf+0x1e>
 8017508:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801757c <cosf+0x84>
 801750c:	b003      	add	sp, #12
 801750e:	f85d eb04 	ldr.w	lr, [sp], #4
 8017512:	f000 b86f 	b.w	80175f4 <__kernel_cosf>
 8017516:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801751a:	d304      	bcc.n	8017526 <cosf+0x2e>
 801751c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017520:	b003      	add	sp, #12
 8017522:	f85d fb04 	ldr.w	pc, [sp], #4
 8017526:	4668      	mov	r0, sp
 8017528:	f000 f9d2 	bl	80178d0 <__ieee754_rem_pio2f>
 801752c:	f000 0003 	and.w	r0, r0, #3
 8017530:	2801      	cmp	r0, #1
 8017532:	d009      	beq.n	8017548 <cosf+0x50>
 8017534:	2802      	cmp	r0, #2
 8017536:	d010      	beq.n	801755a <cosf+0x62>
 8017538:	b9b0      	cbnz	r0, 8017568 <cosf+0x70>
 801753a:	eddd 0a01 	vldr	s1, [sp, #4]
 801753e:	ed9d 0a00 	vldr	s0, [sp]
 8017542:	f000 f857 	bl	80175f4 <__kernel_cosf>
 8017546:	e7eb      	b.n	8017520 <cosf+0x28>
 8017548:	eddd 0a01 	vldr	s1, [sp, #4]
 801754c:	ed9d 0a00 	vldr	s0, [sp]
 8017550:	f000 f8a8 	bl	80176a4 <__kernel_sinf>
 8017554:	eeb1 0a40 	vneg.f32	s0, s0
 8017558:	e7e2      	b.n	8017520 <cosf+0x28>
 801755a:	eddd 0a01 	vldr	s1, [sp, #4]
 801755e:	ed9d 0a00 	vldr	s0, [sp]
 8017562:	f000 f847 	bl	80175f4 <__kernel_cosf>
 8017566:	e7f5      	b.n	8017554 <cosf+0x5c>
 8017568:	eddd 0a01 	vldr	s1, [sp, #4]
 801756c:	ed9d 0a00 	vldr	s0, [sp]
 8017570:	2001      	movs	r0, #1
 8017572:	f000 f897 	bl	80176a4 <__kernel_sinf>
 8017576:	e7d3      	b.n	8017520 <cosf+0x28>
 8017578:	3f490fd8 	.word	0x3f490fd8
 801757c:	00000000 	.word	0x00000000

08017580 <fabsf>:
 8017580:	ee10 3a10 	vmov	r3, s0
 8017584:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017588:	ee00 3a10 	vmov	s0, r3
 801758c:	4770      	bx	lr

0801758e <finitef>:
 801758e:	ee10 3a10 	vmov	r3, s0
 8017592:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8017596:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801759a:	bfac      	ite	ge
 801759c:	2000      	movge	r0, #0
 801759e:	2001      	movlt	r0, #1
 80175a0:	4770      	bx	lr

080175a2 <with_errnof>:
 80175a2:	b510      	push	{r4, lr}
 80175a4:	ed2d 8b02 	vpush	{d8}
 80175a8:	eeb0 8a40 	vmov.f32	s16, s0
 80175ac:	4604      	mov	r4, r0
 80175ae:	f7fe f85d 	bl	801566c <__errno>
 80175b2:	eeb0 0a48 	vmov.f32	s0, s16
 80175b6:	ecbd 8b02 	vpop	{d8}
 80175ba:	6004      	str	r4, [r0, #0]
 80175bc:	bd10      	pop	{r4, pc}

080175be <xflowf>:
 80175be:	b130      	cbz	r0, 80175ce <xflowf+0x10>
 80175c0:	eef1 7a40 	vneg.f32	s15, s0
 80175c4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80175c8:	2022      	movs	r0, #34	@ 0x22
 80175ca:	f7ff bfea 	b.w	80175a2 <with_errnof>
 80175ce:	eef0 7a40 	vmov.f32	s15, s0
 80175d2:	e7f7      	b.n	80175c4 <xflowf+0x6>

080175d4 <__math_uflowf>:
 80175d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80175dc <__math_uflowf+0x8>
 80175d8:	f7ff bff1 	b.w	80175be <xflowf>
 80175dc:	10000000 	.word	0x10000000

080175e0 <__math_oflowf>:
 80175e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80175e8 <__math_oflowf+0x8>
 80175e4:	f7ff bfeb 	b.w	80175be <xflowf>
 80175e8:	70000000 	.word	0x70000000

080175ec <__ieee754_sqrtf>:
 80175ec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80175f0:	4770      	bx	lr
	...

080175f4 <__kernel_cosf>:
 80175f4:	ee10 3a10 	vmov	r3, s0
 80175f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80175fc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8017600:	eef0 6a40 	vmov.f32	s13, s0
 8017604:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017608:	d204      	bcs.n	8017614 <__kernel_cosf+0x20>
 801760a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801760e:	ee17 2a90 	vmov	r2, s15
 8017612:	b342      	cbz	r2, 8017666 <__kernel_cosf+0x72>
 8017614:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017618:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8017684 <__kernel_cosf+0x90>
 801761c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8017688 <__kernel_cosf+0x94>
 8017620:	4a1a      	ldr	r2, [pc, #104]	@ (801768c <__kernel_cosf+0x98>)
 8017622:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017626:	4293      	cmp	r3, r2
 8017628:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8017690 <__kernel_cosf+0x9c>
 801762c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017630:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8017694 <__kernel_cosf+0xa0>
 8017634:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017638:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8017698 <__kernel_cosf+0xa4>
 801763c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017640:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801769c <__kernel_cosf+0xa8>
 8017644:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017648:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801764c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8017650:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017654:	eee7 0a06 	vfma.f32	s1, s14, s12
 8017658:	ee67 7a27 	vmul.f32	s15, s14, s15
 801765c:	d804      	bhi.n	8017668 <__kernel_cosf+0x74>
 801765e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017662:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017666:	4770      	bx	lr
 8017668:	4a0d      	ldr	r2, [pc, #52]	@ (80176a0 <__kernel_cosf+0xac>)
 801766a:	4293      	cmp	r3, r2
 801766c:	bf9a      	itte	ls
 801766e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8017672:	ee07 3a10 	vmovls	s14, r3
 8017676:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801767a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801767e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017682:	e7ec      	b.n	801765e <__kernel_cosf+0x6a>
 8017684:	ad47d74e 	.word	0xad47d74e
 8017688:	310f74f6 	.word	0x310f74f6
 801768c:	3e999999 	.word	0x3e999999
 8017690:	b493f27c 	.word	0xb493f27c
 8017694:	37d00d01 	.word	0x37d00d01
 8017698:	bab60b61 	.word	0xbab60b61
 801769c:	3d2aaaab 	.word	0x3d2aaaab
 80176a0:	3f480000 	.word	0x3f480000

080176a4 <__kernel_sinf>:
 80176a4:	ee10 3a10 	vmov	r3, s0
 80176a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80176ac:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80176b0:	d204      	bcs.n	80176bc <__kernel_sinf+0x18>
 80176b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80176b6:	ee17 3a90 	vmov	r3, s15
 80176ba:	b35b      	cbz	r3, 8017714 <__kernel_sinf+0x70>
 80176bc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80176c0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8017718 <__kernel_sinf+0x74>
 80176c4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801771c <__kernel_sinf+0x78>
 80176c8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80176cc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8017720 <__kernel_sinf+0x7c>
 80176d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80176d4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8017724 <__kernel_sinf+0x80>
 80176d8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80176dc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8017728 <__kernel_sinf+0x84>
 80176e0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80176e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80176e8:	b930      	cbnz	r0, 80176f8 <__kernel_sinf+0x54>
 80176ea:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801772c <__kernel_sinf+0x88>
 80176ee:	eea7 6a27 	vfma.f32	s12, s14, s15
 80176f2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80176f6:	4770      	bx	lr
 80176f8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80176fc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8017700:	eee0 7a86 	vfma.f32	s15, s1, s12
 8017704:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8017708:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8017730 <__kernel_sinf+0x8c>
 801770c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8017710:	ee30 0a60 	vsub.f32	s0, s0, s1
 8017714:	4770      	bx	lr
 8017716:	bf00      	nop
 8017718:	2f2ec9d3 	.word	0x2f2ec9d3
 801771c:	b2d72f34 	.word	0xb2d72f34
 8017720:	3638ef1b 	.word	0x3638ef1b
 8017724:	b9500d01 	.word	0xb9500d01
 8017728:	3c088889 	.word	0x3c088889
 801772c:	be2aaaab 	.word	0xbe2aaaab
 8017730:	3e2aaaab 	.word	0x3e2aaaab

08017734 <__ieee754_expf>:
 8017734:	ee10 2a10 	vmov	r2, s0
 8017738:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801773c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017740:	d902      	bls.n	8017748 <__ieee754_expf+0x14>
 8017742:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017746:	4770      	bx	lr
 8017748:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801774c:	d106      	bne.n	801775c <__ieee754_expf+0x28>
 801774e:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8017888 <__ieee754_expf+0x154>
 8017752:	2900      	cmp	r1, #0
 8017754:	bf18      	it	ne
 8017756:	eeb0 0a67 	vmovne.f32	s0, s15
 801775a:	4770      	bx	lr
 801775c:	484b      	ldr	r0, [pc, #300]	@ (801788c <__ieee754_expf+0x158>)
 801775e:	4282      	cmp	r2, r0
 8017760:	dd02      	ble.n	8017768 <__ieee754_expf+0x34>
 8017762:	2000      	movs	r0, #0
 8017764:	f7ff bf3c 	b.w	80175e0 <__math_oflowf>
 8017768:	2a00      	cmp	r2, #0
 801776a:	da05      	bge.n	8017778 <__ieee754_expf+0x44>
 801776c:	4a48      	ldr	r2, [pc, #288]	@ (8017890 <__ieee754_expf+0x15c>)
 801776e:	4293      	cmp	r3, r2
 8017770:	d902      	bls.n	8017778 <__ieee754_expf+0x44>
 8017772:	2000      	movs	r0, #0
 8017774:	f7ff bf2e 	b.w	80175d4 <__math_uflowf>
 8017778:	4a46      	ldr	r2, [pc, #280]	@ (8017894 <__ieee754_expf+0x160>)
 801777a:	4293      	cmp	r3, r2
 801777c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8017780:	d952      	bls.n	8017828 <__ieee754_expf+0xf4>
 8017782:	4a45      	ldr	r2, [pc, #276]	@ (8017898 <__ieee754_expf+0x164>)
 8017784:	4293      	cmp	r3, r2
 8017786:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801778a:	d834      	bhi.n	80177f6 <__ieee754_expf+0xc2>
 801778c:	4b43      	ldr	r3, [pc, #268]	@ (801789c <__ieee754_expf+0x168>)
 801778e:	4413      	add	r3, r2
 8017790:	ed93 7a00 	vldr	s14, [r3]
 8017794:	4b42      	ldr	r3, [pc, #264]	@ (80178a0 <__ieee754_expf+0x16c>)
 8017796:	4413      	add	r3, r2
 8017798:	ee30 7a47 	vsub.f32	s14, s0, s14
 801779c:	f1c1 0201 	rsb	r2, r1, #1
 80177a0:	edd3 7a00 	vldr	s15, [r3]
 80177a4:	1a52      	subs	r2, r2, r1
 80177a6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80177aa:	ee20 6a00 	vmul.f32	s12, s0, s0
 80177ae:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 80178a4 <__ieee754_expf+0x170>
 80177b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80178a8 <__ieee754_expf+0x174>
 80177b6:	eee6 6a05 	vfma.f32	s13, s12, s10
 80177ba:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 80178ac <__ieee754_expf+0x178>
 80177be:	eea6 5a86 	vfma.f32	s10, s13, s12
 80177c2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80178b0 <__ieee754_expf+0x17c>
 80177c6:	eee5 6a06 	vfma.f32	s13, s10, s12
 80177ca:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80178b4 <__ieee754_expf+0x180>
 80177ce:	eea6 5a86 	vfma.f32	s10, s13, s12
 80177d2:	eef0 6a40 	vmov.f32	s13, s0
 80177d6:	eee5 6a46 	vfms.f32	s13, s10, s12
 80177da:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80177de:	ee20 5a26 	vmul.f32	s10, s0, s13
 80177e2:	bb92      	cbnz	r2, 801784a <__ieee754_expf+0x116>
 80177e4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80177e8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80177ec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80177f0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80177f4:	4770      	bx	lr
 80177f6:	4b30      	ldr	r3, [pc, #192]	@ (80178b8 <__ieee754_expf+0x184>)
 80177f8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80178bc <__ieee754_expf+0x188>
 80177fc:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80178c0 <__ieee754_expf+0x18c>
 8017800:	4413      	add	r3, r2
 8017802:	edd3 7a00 	vldr	s15, [r3]
 8017806:	eee0 7a07 	vfma.f32	s15, s0, s14
 801780a:	eeb0 7a40 	vmov.f32	s14, s0
 801780e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017812:	ee17 2a90 	vmov	r2, s15
 8017816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801781a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801781e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80178c4 <__ieee754_expf+0x190>
 8017822:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017826:	e7be      	b.n	80177a6 <__ieee754_expf+0x72>
 8017828:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801782c:	d20b      	bcs.n	8017846 <__ieee754_expf+0x112>
 801782e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80178c8 <__ieee754_expf+0x194>
 8017832:	ee70 6a26 	vadd.f32	s13, s0, s13
 8017836:	eef4 6ae5 	vcmpe.f32	s13, s11
 801783a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801783e:	dd02      	ble.n	8017846 <__ieee754_expf+0x112>
 8017840:	ee30 0a25 	vadd.f32	s0, s0, s11
 8017844:	4770      	bx	lr
 8017846:	2200      	movs	r2, #0
 8017848:	e7af      	b.n	80177aa <__ieee754_expf+0x76>
 801784a:	ee36 6a66 	vsub.f32	s12, s12, s13
 801784e:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8017852:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8017856:	bfb8      	it	lt
 8017858:	3264      	addlt	r2, #100	@ 0x64
 801785a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801785e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017862:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8017866:	ee17 3a90 	vmov	r3, s15
 801786a:	bfab      	itete	ge
 801786c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8017870:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8017874:	ee00 3a10 	vmovge	s0, r3
 8017878:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 80178cc <__ieee754_expf+0x198>
 801787c:	bfbc      	itt	lt
 801787e:	ee00 3a10 	vmovlt	s0, r3
 8017882:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8017886:	4770      	bx	lr
 8017888:	00000000 	.word	0x00000000
 801788c:	42b17217 	.word	0x42b17217
 8017890:	42cff1b5 	.word	0x42cff1b5
 8017894:	3eb17218 	.word	0x3eb17218
 8017898:	3f851591 	.word	0x3f851591
 801789c:	080d5b48 	.word	0x080d5b48
 80178a0:	080d5b40 	.word	0x080d5b40
 80178a4:	3331bb4c 	.word	0x3331bb4c
 80178a8:	b5ddea0e 	.word	0xb5ddea0e
 80178ac:	388ab355 	.word	0x388ab355
 80178b0:	bb360b61 	.word	0xbb360b61
 80178b4:	3e2aaaab 	.word	0x3e2aaaab
 80178b8:	080d5b50 	.word	0x080d5b50
 80178bc:	3fb8aa3b 	.word	0x3fb8aa3b
 80178c0:	3f317180 	.word	0x3f317180
 80178c4:	3717f7d1 	.word	0x3717f7d1
 80178c8:	7149f2ca 	.word	0x7149f2ca
 80178cc:	0d800000 	.word	0x0d800000

080178d0 <__ieee754_rem_pio2f>:
 80178d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178d2:	ee10 6a10 	vmov	r6, s0
 80178d6:	4b88      	ldr	r3, [pc, #544]	@ (8017af8 <__ieee754_rem_pio2f+0x228>)
 80178d8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80178dc:	429d      	cmp	r5, r3
 80178de:	b087      	sub	sp, #28
 80178e0:	4604      	mov	r4, r0
 80178e2:	d805      	bhi.n	80178f0 <__ieee754_rem_pio2f+0x20>
 80178e4:	2300      	movs	r3, #0
 80178e6:	ed80 0a00 	vstr	s0, [r0]
 80178ea:	6043      	str	r3, [r0, #4]
 80178ec:	2000      	movs	r0, #0
 80178ee:	e022      	b.n	8017936 <__ieee754_rem_pio2f+0x66>
 80178f0:	4b82      	ldr	r3, [pc, #520]	@ (8017afc <__ieee754_rem_pio2f+0x22c>)
 80178f2:	429d      	cmp	r5, r3
 80178f4:	d83a      	bhi.n	801796c <__ieee754_rem_pio2f+0x9c>
 80178f6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80178fa:	2e00      	cmp	r6, #0
 80178fc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8017b00 <__ieee754_rem_pio2f+0x230>
 8017900:	4a80      	ldr	r2, [pc, #512]	@ (8017b04 <__ieee754_rem_pio2f+0x234>)
 8017902:	f023 030f 	bic.w	r3, r3, #15
 8017906:	dd18      	ble.n	801793a <__ieee754_rem_pio2f+0x6a>
 8017908:	4293      	cmp	r3, r2
 801790a:	ee70 7a47 	vsub.f32	s15, s0, s14
 801790e:	bf09      	itett	eq
 8017910:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8017b08 <__ieee754_rem_pio2f+0x238>
 8017914:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8017b0c <__ieee754_rem_pio2f+0x23c>
 8017918:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8017b10 <__ieee754_rem_pio2f+0x240>
 801791c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8017920:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8017924:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017928:	ed80 7a00 	vstr	s14, [r0]
 801792c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017930:	edc0 7a01 	vstr	s15, [r0, #4]
 8017934:	2001      	movs	r0, #1
 8017936:	b007      	add	sp, #28
 8017938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801793a:	4293      	cmp	r3, r2
 801793c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8017940:	bf09      	itett	eq
 8017942:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8017b08 <__ieee754_rem_pio2f+0x238>
 8017946:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8017b0c <__ieee754_rem_pio2f+0x23c>
 801794a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8017b10 <__ieee754_rem_pio2f+0x240>
 801794e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8017952:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8017956:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801795a:	ed80 7a00 	vstr	s14, [r0]
 801795e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017962:	edc0 7a01 	vstr	s15, [r0, #4]
 8017966:	f04f 30ff 	mov.w	r0, #4294967295
 801796a:	e7e4      	b.n	8017936 <__ieee754_rem_pio2f+0x66>
 801796c:	4b69      	ldr	r3, [pc, #420]	@ (8017b14 <__ieee754_rem_pio2f+0x244>)
 801796e:	429d      	cmp	r5, r3
 8017970:	d873      	bhi.n	8017a5a <__ieee754_rem_pio2f+0x18a>
 8017972:	f7ff fe05 	bl	8017580 <fabsf>
 8017976:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8017b18 <__ieee754_rem_pio2f+0x248>
 801797a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801797e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017986:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801798a:	ee17 0a90 	vmov	r0, s15
 801798e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8017b00 <__ieee754_rem_pio2f+0x230>
 8017992:	eea7 0a67 	vfms.f32	s0, s14, s15
 8017996:	281f      	cmp	r0, #31
 8017998:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8017b0c <__ieee754_rem_pio2f+0x23c>
 801799c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80179a0:	eeb1 6a47 	vneg.f32	s12, s14
 80179a4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80179a8:	ee16 1a90 	vmov	r1, s13
 80179ac:	dc09      	bgt.n	80179c2 <__ieee754_rem_pio2f+0xf2>
 80179ae:	4a5b      	ldr	r2, [pc, #364]	@ (8017b1c <__ieee754_rem_pio2f+0x24c>)
 80179b0:	1e47      	subs	r7, r0, #1
 80179b2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80179b6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80179ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80179be:	4293      	cmp	r3, r2
 80179c0:	d107      	bne.n	80179d2 <__ieee754_rem_pio2f+0x102>
 80179c2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80179c6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80179ca:	2a08      	cmp	r2, #8
 80179cc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80179d0:	dc14      	bgt.n	80179fc <__ieee754_rem_pio2f+0x12c>
 80179d2:	6021      	str	r1, [r4, #0]
 80179d4:	ed94 7a00 	vldr	s14, [r4]
 80179d8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80179dc:	2e00      	cmp	r6, #0
 80179de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80179e2:	ed84 0a01 	vstr	s0, [r4, #4]
 80179e6:	daa6      	bge.n	8017936 <__ieee754_rem_pio2f+0x66>
 80179e8:	eeb1 7a47 	vneg.f32	s14, s14
 80179ec:	eeb1 0a40 	vneg.f32	s0, s0
 80179f0:	ed84 7a00 	vstr	s14, [r4]
 80179f4:	ed84 0a01 	vstr	s0, [r4, #4]
 80179f8:	4240      	negs	r0, r0
 80179fa:	e79c      	b.n	8017936 <__ieee754_rem_pio2f+0x66>
 80179fc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8017b08 <__ieee754_rem_pio2f+0x238>
 8017a00:	eef0 6a40 	vmov.f32	s13, s0
 8017a04:	eee6 6a25 	vfma.f32	s13, s12, s11
 8017a08:	ee70 7a66 	vsub.f32	s15, s0, s13
 8017a0c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8017a10:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8017b10 <__ieee754_rem_pio2f+0x240>
 8017a14:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8017a18:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8017a1c:	ee15 2a90 	vmov	r2, s11
 8017a20:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8017a24:	1a5b      	subs	r3, r3, r1
 8017a26:	2b19      	cmp	r3, #25
 8017a28:	dc04      	bgt.n	8017a34 <__ieee754_rem_pio2f+0x164>
 8017a2a:	edc4 5a00 	vstr	s11, [r4]
 8017a2e:	eeb0 0a66 	vmov.f32	s0, s13
 8017a32:	e7cf      	b.n	80179d4 <__ieee754_rem_pio2f+0x104>
 8017a34:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8017b20 <__ieee754_rem_pio2f+0x250>
 8017a38:	eeb0 0a66 	vmov.f32	s0, s13
 8017a3c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8017a40:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8017a44:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8017b24 <__ieee754_rem_pio2f+0x254>
 8017a48:	eee6 7a25 	vfma.f32	s15, s12, s11
 8017a4c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8017a50:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017a54:	ed84 7a00 	vstr	s14, [r4]
 8017a58:	e7bc      	b.n	80179d4 <__ieee754_rem_pio2f+0x104>
 8017a5a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8017a5e:	d306      	bcc.n	8017a6e <__ieee754_rem_pio2f+0x19e>
 8017a60:	ee70 7a40 	vsub.f32	s15, s0, s0
 8017a64:	edc0 7a01 	vstr	s15, [r0, #4]
 8017a68:	edc0 7a00 	vstr	s15, [r0]
 8017a6c:	e73e      	b.n	80178ec <__ieee754_rem_pio2f+0x1c>
 8017a6e:	15ea      	asrs	r2, r5, #23
 8017a70:	3a86      	subs	r2, #134	@ 0x86
 8017a72:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8017a76:	ee07 3a90 	vmov	s15, r3
 8017a7a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8017a7e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8017b28 <__ieee754_rem_pio2f+0x258>
 8017a82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017a86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a8a:	ed8d 7a03 	vstr	s14, [sp, #12]
 8017a8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017a92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8017a96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017a9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a9e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8017aa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017aa6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aae:	edcd 7a05 	vstr	s15, [sp, #20]
 8017ab2:	d11e      	bne.n	8017af2 <__ieee754_rem_pio2f+0x222>
 8017ab4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017abc:	bf0c      	ite	eq
 8017abe:	2301      	moveq	r3, #1
 8017ac0:	2302      	movne	r3, #2
 8017ac2:	491a      	ldr	r1, [pc, #104]	@ (8017b2c <__ieee754_rem_pio2f+0x25c>)
 8017ac4:	9101      	str	r1, [sp, #4]
 8017ac6:	2102      	movs	r1, #2
 8017ac8:	9100      	str	r1, [sp, #0]
 8017aca:	a803      	add	r0, sp, #12
 8017acc:	4621      	mov	r1, r4
 8017ace:	f000 f895 	bl	8017bfc <__kernel_rem_pio2f>
 8017ad2:	2e00      	cmp	r6, #0
 8017ad4:	f6bf af2f 	bge.w	8017936 <__ieee754_rem_pio2f+0x66>
 8017ad8:	edd4 7a00 	vldr	s15, [r4]
 8017adc:	eef1 7a67 	vneg.f32	s15, s15
 8017ae0:	edc4 7a00 	vstr	s15, [r4]
 8017ae4:	edd4 7a01 	vldr	s15, [r4, #4]
 8017ae8:	eef1 7a67 	vneg.f32	s15, s15
 8017aec:	edc4 7a01 	vstr	s15, [r4, #4]
 8017af0:	e782      	b.n	80179f8 <__ieee754_rem_pio2f+0x128>
 8017af2:	2303      	movs	r3, #3
 8017af4:	e7e5      	b.n	8017ac2 <__ieee754_rem_pio2f+0x1f2>
 8017af6:	bf00      	nop
 8017af8:	3f490fd8 	.word	0x3f490fd8
 8017afc:	4016cbe3 	.word	0x4016cbe3
 8017b00:	3fc90f80 	.word	0x3fc90f80
 8017b04:	3fc90fd0 	.word	0x3fc90fd0
 8017b08:	37354400 	.word	0x37354400
 8017b0c:	37354443 	.word	0x37354443
 8017b10:	2e85a308 	.word	0x2e85a308
 8017b14:	43490f80 	.word	0x43490f80
 8017b18:	3f22f984 	.word	0x3f22f984
 8017b1c:	080d5b58 	.word	0x080d5b58
 8017b20:	2e85a300 	.word	0x2e85a300
 8017b24:	248d3132 	.word	0x248d3132
 8017b28:	43800000 	.word	0x43800000
 8017b2c:	080d5bd8 	.word	0x080d5bd8

08017b30 <scalbnf>:
 8017b30:	ee10 3a10 	vmov	r3, s0
 8017b34:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8017b38:	d02b      	beq.n	8017b92 <scalbnf+0x62>
 8017b3a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8017b3e:	d302      	bcc.n	8017b46 <scalbnf+0x16>
 8017b40:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017b44:	4770      	bx	lr
 8017b46:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8017b4a:	d123      	bne.n	8017b94 <scalbnf+0x64>
 8017b4c:	4b24      	ldr	r3, [pc, #144]	@ (8017be0 <scalbnf+0xb0>)
 8017b4e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8017be4 <scalbnf+0xb4>
 8017b52:	4298      	cmp	r0, r3
 8017b54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017b58:	db17      	blt.n	8017b8a <scalbnf+0x5a>
 8017b5a:	ee10 3a10 	vmov	r3, s0
 8017b5e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017b62:	3a19      	subs	r2, #25
 8017b64:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8017b68:	4288      	cmp	r0, r1
 8017b6a:	dd15      	ble.n	8017b98 <scalbnf+0x68>
 8017b6c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8017be8 <scalbnf+0xb8>
 8017b70:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8017bec <scalbnf+0xbc>
 8017b74:	ee10 3a10 	vmov	r3, s0
 8017b78:	eeb0 7a67 	vmov.f32	s14, s15
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	bfb8      	it	lt
 8017b80:	eef0 7a66 	vmovlt.f32	s15, s13
 8017b84:	ee27 0a87 	vmul.f32	s0, s15, s14
 8017b88:	4770      	bx	lr
 8017b8a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8017bf0 <scalbnf+0xc0>
 8017b8e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017b92:	4770      	bx	lr
 8017b94:	0dd2      	lsrs	r2, r2, #23
 8017b96:	e7e5      	b.n	8017b64 <scalbnf+0x34>
 8017b98:	4410      	add	r0, r2
 8017b9a:	28fe      	cmp	r0, #254	@ 0xfe
 8017b9c:	dce6      	bgt.n	8017b6c <scalbnf+0x3c>
 8017b9e:	2800      	cmp	r0, #0
 8017ba0:	dd06      	ble.n	8017bb0 <scalbnf+0x80>
 8017ba2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8017ba6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8017baa:	ee00 3a10 	vmov	s0, r3
 8017bae:	4770      	bx	lr
 8017bb0:	f110 0f16 	cmn.w	r0, #22
 8017bb4:	da09      	bge.n	8017bca <scalbnf+0x9a>
 8017bb6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8017bf0 <scalbnf+0xc0>
 8017bba:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8017bf4 <scalbnf+0xc4>
 8017bbe:	ee10 3a10 	vmov	r3, s0
 8017bc2:	eeb0 7a67 	vmov.f32	s14, s15
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	e7d9      	b.n	8017b7e <scalbnf+0x4e>
 8017bca:	3019      	adds	r0, #25
 8017bcc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8017bd0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8017bd4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8017bf8 <scalbnf+0xc8>
 8017bd8:	ee07 3a90 	vmov	s15, r3
 8017bdc:	e7d7      	b.n	8017b8e <scalbnf+0x5e>
 8017bde:	bf00      	nop
 8017be0:	ffff3cb0 	.word	0xffff3cb0
 8017be4:	4c000000 	.word	0x4c000000
 8017be8:	7149f2ca 	.word	0x7149f2ca
 8017bec:	f149f2ca 	.word	0xf149f2ca
 8017bf0:	0da24260 	.word	0x0da24260
 8017bf4:	8da24260 	.word	0x8da24260
 8017bf8:	33000000 	.word	0x33000000

08017bfc <__kernel_rem_pio2f>:
 8017bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c00:	ed2d 8b04 	vpush	{d8-d9}
 8017c04:	b0d9      	sub	sp, #356	@ 0x164
 8017c06:	4690      	mov	r8, r2
 8017c08:	9001      	str	r0, [sp, #4]
 8017c0a:	4ab9      	ldr	r2, [pc, #740]	@ (8017ef0 <__kernel_rem_pio2f+0x2f4>)
 8017c0c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8017c0e:	f118 0f04 	cmn.w	r8, #4
 8017c12:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8017c16:	460f      	mov	r7, r1
 8017c18:	f103 3bff 	add.w	fp, r3, #4294967295
 8017c1c:	db27      	blt.n	8017c6e <__kernel_rem_pio2f+0x72>
 8017c1e:	f1b8 0203 	subs.w	r2, r8, #3
 8017c22:	bf48      	it	mi
 8017c24:	f108 0204 	addmi.w	r2, r8, #4
 8017c28:	10d2      	asrs	r2, r2, #3
 8017c2a:	1c55      	adds	r5, r2, #1
 8017c2c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8017c2e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8017f00 <__kernel_rem_pio2f+0x304>
 8017c32:	00e8      	lsls	r0, r5, #3
 8017c34:	eba2 060b 	sub.w	r6, r2, fp
 8017c38:	9002      	str	r0, [sp, #8]
 8017c3a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8017c3e:	eb0a 0c0b 	add.w	ip, sl, fp
 8017c42:	ac1c      	add	r4, sp, #112	@ 0x70
 8017c44:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8017c48:	2000      	movs	r0, #0
 8017c4a:	4560      	cmp	r0, ip
 8017c4c:	dd11      	ble.n	8017c72 <__kernel_rem_pio2f+0x76>
 8017c4e:	a91c      	add	r1, sp, #112	@ 0x70
 8017c50:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8017c54:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8017c58:	f04f 0c00 	mov.w	ip, #0
 8017c5c:	45d4      	cmp	ip, sl
 8017c5e:	dc27      	bgt.n	8017cb0 <__kernel_rem_pio2f+0xb4>
 8017c60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8017c64:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8017f00 <__kernel_rem_pio2f+0x304>
 8017c68:	4606      	mov	r6, r0
 8017c6a:	2400      	movs	r4, #0
 8017c6c:	e016      	b.n	8017c9c <__kernel_rem_pio2f+0xa0>
 8017c6e:	2200      	movs	r2, #0
 8017c70:	e7db      	b.n	8017c2a <__kernel_rem_pio2f+0x2e>
 8017c72:	42c6      	cmn	r6, r0
 8017c74:	bf5d      	ittte	pl
 8017c76:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8017c7a:	ee07 1a90 	vmovpl	s15, r1
 8017c7e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8017c82:	eef0 7a47 	vmovmi.f32	s15, s14
 8017c86:	ece4 7a01 	vstmia	r4!, {s15}
 8017c8a:	3001      	adds	r0, #1
 8017c8c:	e7dd      	b.n	8017c4a <__kernel_rem_pio2f+0x4e>
 8017c8e:	ecfe 6a01 	vldmia	lr!, {s13}
 8017c92:	ed96 7a00 	vldr	s14, [r6]
 8017c96:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017c9a:	3401      	adds	r4, #1
 8017c9c:	455c      	cmp	r4, fp
 8017c9e:	f1a6 0604 	sub.w	r6, r6, #4
 8017ca2:	ddf4      	ble.n	8017c8e <__kernel_rem_pio2f+0x92>
 8017ca4:	ece9 7a01 	vstmia	r9!, {s15}
 8017ca8:	f10c 0c01 	add.w	ip, ip, #1
 8017cac:	3004      	adds	r0, #4
 8017cae:	e7d5      	b.n	8017c5c <__kernel_rem_pio2f+0x60>
 8017cb0:	a908      	add	r1, sp, #32
 8017cb2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017cb6:	9104      	str	r1, [sp, #16]
 8017cb8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8017cba:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8017efc <__kernel_rem_pio2f+0x300>
 8017cbe:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8017ef8 <__kernel_rem_pio2f+0x2fc>
 8017cc2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8017cc6:	9203      	str	r2, [sp, #12]
 8017cc8:	4654      	mov	r4, sl
 8017cca:	00a2      	lsls	r2, r4, #2
 8017ccc:	9205      	str	r2, [sp, #20]
 8017cce:	aa58      	add	r2, sp, #352	@ 0x160
 8017cd0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8017cd4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8017cd8:	a944      	add	r1, sp, #272	@ 0x110
 8017cda:	aa08      	add	r2, sp, #32
 8017cdc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8017ce0:	4694      	mov	ip, r2
 8017ce2:	4626      	mov	r6, r4
 8017ce4:	2e00      	cmp	r6, #0
 8017ce6:	f1a0 0004 	sub.w	r0, r0, #4
 8017cea:	dc4c      	bgt.n	8017d86 <__kernel_rem_pio2f+0x18a>
 8017cec:	4628      	mov	r0, r5
 8017cee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017cf2:	f7ff ff1d 	bl	8017b30 <scalbnf>
 8017cf6:	eeb0 8a40 	vmov.f32	s16, s0
 8017cfa:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8017cfe:	ee28 0a00 	vmul.f32	s0, s16, s0
 8017d02:	f000 f9ed 	bl	80180e0 <floorf>
 8017d06:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8017d0a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8017d0e:	2d00      	cmp	r5, #0
 8017d10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017d14:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8017d18:	ee17 9a90 	vmov	r9, s15
 8017d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d20:	ee38 8a67 	vsub.f32	s16, s16, s15
 8017d24:	dd41      	ble.n	8017daa <__kernel_rem_pio2f+0x1ae>
 8017d26:	f104 3cff 	add.w	ip, r4, #4294967295
 8017d2a:	a908      	add	r1, sp, #32
 8017d2c:	f1c5 0e08 	rsb	lr, r5, #8
 8017d30:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8017d34:	fa46 f00e 	asr.w	r0, r6, lr
 8017d38:	4481      	add	r9, r0
 8017d3a:	fa00 f00e 	lsl.w	r0, r0, lr
 8017d3e:	1a36      	subs	r6, r6, r0
 8017d40:	f1c5 0007 	rsb	r0, r5, #7
 8017d44:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8017d48:	4106      	asrs	r6, r0
 8017d4a:	2e00      	cmp	r6, #0
 8017d4c:	dd3c      	ble.n	8017dc8 <__kernel_rem_pio2f+0x1cc>
 8017d4e:	f04f 0e00 	mov.w	lr, #0
 8017d52:	f109 0901 	add.w	r9, r9, #1
 8017d56:	4670      	mov	r0, lr
 8017d58:	4574      	cmp	r4, lr
 8017d5a:	dc68      	bgt.n	8017e2e <__kernel_rem_pio2f+0x232>
 8017d5c:	2d00      	cmp	r5, #0
 8017d5e:	dd03      	ble.n	8017d68 <__kernel_rem_pio2f+0x16c>
 8017d60:	2d01      	cmp	r5, #1
 8017d62:	d074      	beq.n	8017e4e <__kernel_rem_pio2f+0x252>
 8017d64:	2d02      	cmp	r5, #2
 8017d66:	d07d      	beq.n	8017e64 <__kernel_rem_pio2f+0x268>
 8017d68:	2e02      	cmp	r6, #2
 8017d6a:	d12d      	bne.n	8017dc8 <__kernel_rem_pio2f+0x1cc>
 8017d6c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017d70:	ee30 8a48 	vsub.f32	s16, s0, s16
 8017d74:	b340      	cbz	r0, 8017dc8 <__kernel_rem_pio2f+0x1cc>
 8017d76:	4628      	mov	r0, r5
 8017d78:	9306      	str	r3, [sp, #24]
 8017d7a:	f7ff fed9 	bl	8017b30 <scalbnf>
 8017d7e:	9b06      	ldr	r3, [sp, #24]
 8017d80:	ee38 8a40 	vsub.f32	s16, s16, s0
 8017d84:	e020      	b.n	8017dc8 <__kernel_rem_pio2f+0x1cc>
 8017d86:	ee60 7a28 	vmul.f32	s15, s0, s17
 8017d8a:	3e01      	subs	r6, #1
 8017d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d94:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8017d98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017d9c:	ecac 0a01 	vstmia	ip!, {s0}
 8017da0:	ed90 0a00 	vldr	s0, [r0]
 8017da4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8017da8:	e79c      	b.n	8017ce4 <__kernel_rem_pio2f+0xe8>
 8017daa:	d105      	bne.n	8017db8 <__kernel_rem_pio2f+0x1bc>
 8017dac:	1e60      	subs	r0, r4, #1
 8017dae:	a908      	add	r1, sp, #32
 8017db0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8017db4:	11f6      	asrs	r6, r6, #7
 8017db6:	e7c8      	b.n	8017d4a <__kernel_rem_pio2f+0x14e>
 8017db8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017dbc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dc4:	da31      	bge.n	8017e2a <__kernel_rem_pio2f+0x22e>
 8017dc6:	2600      	movs	r6, #0
 8017dc8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dd0:	f040 8098 	bne.w	8017f04 <__kernel_rem_pio2f+0x308>
 8017dd4:	1e60      	subs	r0, r4, #1
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	4550      	cmp	r0, sl
 8017dda:	da4b      	bge.n	8017e74 <__kernel_rem_pio2f+0x278>
 8017ddc:	2a00      	cmp	r2, #0
 8017dde:	d065      	beq.n	8017eac <__kernel_rem_pio2f+0x2b0>
 8017de0:	3c01      	subs	r4, #1
 8017de2:	ab08      	add	r3, sp, #32
 8017de4:	3d08      	subs	r5, #8
 8017de6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d0f8      	beq.n	8017de0 <__kernel_rem_pio2f+0x1e4>
 8017dee:	4628      	mov	r0, r5
 8017df0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017df4:	f7ff fe9c 	bl	8017b30 <scalbnf>
 8017df8:	1c63      	adds	r3, r4, #1
 8017dfa:	aa44      	add	r2, sp, #272	@ 0x110
 8017dfc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8017efc <__kernel_rem_pio2f+0x300>
 8017e00:	0099      	lsls	r1, r3, #2
 8017e02:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017e06:	4623      	mov	r3, r4
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	f280 80a9 	bge.w	8017f60 <__kernel_rem_pio2f+0x364>
 8017e0e:	4623      	mov	r3, r4
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	f2c0 80c7 	blt.w	8017fa4 <__kernel_rem_pio2f+0x3a8>
 8017e16:	aa44      	add	r2, sp, #272	@ 0x110
 8017e18:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8017e1c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8017ef4 <__kernel_rem_pio2f+0x2f8>
 8017e20:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8017f00 <__kernel_rem_pio2f+0x304>
 8017e24:	2000      	movs	r0, #0
 8017e26:	1ae2      	subs	r2, r4, r3
 8017e28:	e0b1      	b.n	8017f8e <__kernel_rem_pio2f+0x392>
 8017e2a:	2602      	movs	r6, #2
 8017e2c:	e78f      	b.n	8017d4e <__kernel_rem_pio2f+0x152>
 8017e2e:	f852 1b04 	ldr.w	r1, [r2], #4
 8017e32:	b948      	cbnz	r0, 8017e48 <__kernel_rem_pio2f+0x24c>
 8017e34:	b121      	cbz	r1, 8017e40 <__kernel_rem_pio2f+0x244>
 8017e36:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8017e3a:	f842 1c04 	str.w	r1, [r2, #-4]
 8017e3e:	2101      	movs	r1, #1
 8017e40:	f10e 0e01 	add.w	lr, lr, #1
 8017e44:	4608      	mov	r0, r1
 8017e46:	e787      	b.n	8017d58 <__kernel_rem_pio2f+0x15c>
 8017e48:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8017e4c:	e7f5      	b.n	8017e3a <__kernel_rem_pio2f+0x23e>
 8017e4e:	f104 3cff 	add.w	ip, r4, #4294967295
 8017e52:	aa08      	add	r2, sp, #32
 8017e54:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8017e58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017e5c:	a908      	add	r1, sp, #32
 8017e5e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8017e62:	e781      	b.n	8017d68 <__kernel_rem_pio2f+0x16c>
 8017e64:	f104 3cff 	add.w	ip, r4, #4294967295
 8017e68:	aa08      	add	r2, sp, #32
 8017e6a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8017e6e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017e72:	e7f3      	b.n	8017e5c <__kernel_rem_pio2f+0x260>
 8017e74:	a908      	add	r1, sp, #32
 8017e76:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8017e7a:	3801      	subs	r0, #1
 8017e7c:	430a      	orrs	r2, r1
 8017e7e:	e7ab      	b.n	8017dd8 <__kernel_rem_pio2f+0x1dc>
 8017e80:	3201      	adds	r2, #1
 8017e82:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8017e86:	2e00      	cmp	r6, #0
 8017e88:	d0fa      	beq.n	8017e80 <__kernel_rem_pio2f+0x284>
 8017e8a:	9905      	ldr	r1, [sp, #20]
 8017e8c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8017e90:	eb0d 0001 	add.w	r0, sp, r1
 8017e94:	18e6      	adds	r6, r4, r3
 8017e96:	a91c      	add	r1, sp, #112	@ 0x70
 8017e98:	f104 0c01 	add.w	ip, r4, #1
 8017e9c:	384c      	subs	r0, #76	@ 0x4c
 8017e9e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8017ea2:	4422      	add	r2, r4
 8017ea4:	4562      	cmp	r2, ip
 8017ea6:	da04      	bge.n	8017eb2 <__kernel_rem_pio2f+0x2b6>
 8017ea8:	4614      	mov	r4, r2
 8017eaa:	e70e      	b.n	8017cca <__kernel_rem_pio2f+0xce>
 8017eac:	9804      	ldr	r0, [sp, #16]
 8017eae:	2201      	movs	r2, #1
 8017eb0:	e7e7      	b.n	8017e82 <__kernel_rem_pio2f+0x286>
 8017eb2:	9903      	ldr	r1, [sp, #12]
 8017eb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8017eb8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8017ebc:	9105      	str	r1, [sp, #20]
 8017ebe:	ee07 1a90 	vmov	s15, r1
 8017ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ec6:	2400      	movs	r4, #0
 8017ec8:	ece6 7a01 	vstmia	r6!, {s15}
 8017ecc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8017f00 <__kernel_rem_pio2f+0x304>
 8017ed0:	46b1      	mov	r9, r6
 8017ed2:	455c      	cmp	r4, fp
 8017ed4:	dd04      	ble.n	8017ee0 <__kernel_rem_pio2f+0x2e4>
 8017ed6:	ece0 7a01 	vstmia	r0!, {s15}
 8017eda:	f10c 0c01 	add.w	ip, ip, #1
 8017ede:	e7e1      	b.n	8017ea4 <__kernel_rem_pio2f+0x2a8>
 8017ee0:	ecfe 6a01 	vldmia	lr!, {s13}
 8017ee4:	ed39 7a01 	vldmdb	r9!, {s14}
 8017ee8:	3401      	adds	r4, #1
 8017eea:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017eee:	e7f0      	b.n	8017ed2 <__kernel_rem_pio2f+0x2d6>
 8017ef0:	080d5f1c 	.word	0x080d5f1c
 8017ef4:	080d5ef0 	.word	0x080d5ef0
 8017ef8:	43800000 	.word	0x43800000
 8017efc:	3b800000 	.word	0x3b800000
 8017f00:	00000000 	.word	0x00000000
 8017f04:	9b02      	ldr	r3, [sp, #8]
 8017f06:	eeb0 0a48 	vmov.f32	s0, s16
 8017f0a:	eba3 0008 	sub.w	r0, r3, r8
 8017f0e:	f7ff fe0f 	bl	8017b30 <scalbnf>
 8017f12:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8017ef8 <__kernel_rem_pio2f+0x2fc>
 8017f16:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8017f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f1e:	db19      	blt.n	8017f54 <__kernel_rem_pio2f+0x358>
 8017f20:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8017efc <__kernel_rem_pio2f+0x300>
 8017f24:	ee60 7a27 	vmul.f32	s15, s0, s15
 8017f28:	aa08      	add	r2, sp, #32
 8017f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017f2e:	3508      	adds	r5, #8
 8017f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f34:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017f3c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017f40:	ee10 3a10 	vmov	r3, s0
 8017f44:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8017f48:	ee17 3a90 	vmov	r3, s15
 8017f4c:	3401      	adds	r4, #1
 8017f4e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8017f52:	e74c      	b.n	8017dee <__kernel_rem_pio2f+0x1f2>
 8017f54:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017f58:	aa08      	add	r2, sp, #32
 8017f5a:	ee10 3a10 	vmov	r3, s0
 8017f5e:	e7f6      	b.n	8017f4e <__kernel_rem_pio2f+0x352>
 8017f60:	a808      	add	r0, sp, #32
 8017f62:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8017f66:	9001      	str	r0, [sp, #4]
 8017f68:	ee07 0a90 	vmov	s15, r0
 8017f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f70:	3b01      	subs	r3, #1
 8017f72:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017f76:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017f7a:	ed62 7a01 	vstmdb	r2!, {s15}
 8017f7e:	e743      	b.n	8017e08 <__kernel_rem_pio2f+0x20c>
 8017f80:	ecfc 6a01 	vldmia	ip!, {s13}
 8017f84:	ecb5 7a01 	vldmia	r5!, {s14}
 8017f88:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017f8c:	3001      	adds	r0, #1
 8017f8e:	4550      	cmp	r0, sl
 8017f90:	dc01      	bgt.n	8017f96 <__kernel_rem_pio2f+0x39a>
 8017f92:	4282      	cmp	r2, r0
 8017f94:	daf4      	bge.n	8017f80 <__kernel_rem_pio2f+0x384>
 8017f96:	a858      	add	r0, sp, #352	@ 0x160
 8017f98:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8017f9c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8017fa0:	3b01      	subs	r3, #1
 8017fa2:	e735      	b.n	8017e10 <__kernel_rem_pio2f+0x214>
 8017fa4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8017fa6:	2b02      	cmp	r3, #2
 8017fa8:	dc09      	bgt.n	8017fbe <__kernel_rem_pio2f+0x3c2>
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	dc2b      	bgt.n	8018006 <__kernel_rem_pio2f+0x40a>
 8017fae:	d044      	beq.n	801803a <__kernel_rem_pio2f+0x43e>
 8017fb0:	f009 0007 	and.w	r0, r9, #7
 8017fb4:	b059      	add	sp, #356	@ 0x164
 8017fb6:	ecbd 8b04 	vpop	{d8-d9}
 8017fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fbe:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8017fc0:	2b03      	cmp	r3, #3
 8017fc2:	d1f5      	bne.n	8017fb0 <__kernel_rem_pio2f+0x3b4>
 8017fc4:	aa30      	add	r2, sp, #192	@ 0xc0
 8017fc6:	1f0b      	subs	r3, r1, #4
 8017fc8:	4413      	add	r3, r2
 8017fca:	461a      	mov	r2, r3
 8017fcc:	4620      	mov	r0, r4
 8017fce:	2800      	cmp	r0, #0
 8017fd0:	f1a2 0204 	sub.w	r2, r2, #4
 8017fd4:	dc52      	bgt.n	801807c <__kernel_rem_pio2f+0x480>
 8017fd6:	4622      	mov	r2, r4
 8017fd8:	2a01      	cmp	r2, #1
 8017fda:	f1a3 0304 	sub.w	r3, r3, #4
 8017fde:	dc5d      	bgt.n	801809c <__kernel_rem_pio2f+0x4a0>
 8017fe0:	ab30      	add	r3, sp, #192	@ 0xc0
 8017fe2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8017f00 <__kernel_rem_pio2f+0x304>
 8017fe6:	440b      	add	r3, r1
 8017fe8:	2c01      	cmp	r4, #1
 8017fea:	dc67      	bgt.n	80180bc <__kernel_rem_pio2f+0x4c0>
 8017fec:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8017ff0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8017ff4:	2e00      	cmp	r6, #0
 8017ff6:	d167      	bne.n	80180c8 <__kernel_rem_pio2f+0x4cc>
 8017ff8:	edc7 6a00 	vstr	s13, [r7]
 8017ffc:	ed87 7a01 	vstr	s14, [r7, #4]
 8018000:	edc7 7a02 	vstr	s15, [r7, #8]
 8018004:	e7d4      	b.n	8017fb0 <__kernel_rem_pio2f+0x3b4>
 8018006:	ab30      	add	r3, sp, #192	@ 0xc0
 8018008:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8017f00 <__kernel_rem_pio2f+0x304>
 801800c:	440b      	add	r3, r1
 801800e:	4622      	mov	r2, r4
 8018010:	2a00      	cmp	r2, #0
 8018012:	da24      	bge.n	801805e <__kernel_rem_pio2f+0x462>
 8018014:	b34e      	cbz	r6, 801806a <__kernel_rem_pio2f+0x46e>
 8018016:	eef1 7a47 	vneg.f32	s15, s14
 801801a:	edc7 7a00 	vstr	s15, [r7]
 801801e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8018022:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018026:	aa31      	add	r2, sp, #196	@ 0xc4
 8018028:	2301      	movs	r3, #1
 801802a:	429c      	cmp	r4, r3
 801802c:	da20      	bge.n	8018070 <__kernel_rem_pio2f+0x474>
 801802e:	b10e      	cbz	r6, 8018034 <__kernel_rem_pio2f+0x438>
 8018030:	eef1 7a67 	vneg.f32	s15, s15
 8018034:	edc7 7a01 	vstr	s15, [r7, #4]
 8018038:	e7ba      	b.n	8017fb0 <__kernel_rem_pio2f+0x3b4>
 801803a:	ab30      	add	r3, sp, #192	@ 0xc0
 801803c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8017f00 <__kernel_rem_pio2f+0x304>
 8018040:	440b      	add	r3, r1
 8018042:	2c00      	cmp	r4, #0
 8018044:	da05      	bge.n	8018052 <__kernel_rem_pio2f+0x456>
 8018046:	b10e      	cbz	r6, 801804c <__kernel_rem_pio2f+0x450>
 8018048:	eef1 7a67 	vneg.f32	s15, s15
 801804c:	edc7 7a00 	vstr	s15, [r7]
 8018050:	e7ae      	b.n	8017fb0 <__kernel_rem_pio2f+0x3b4>
 8018052:	ed33 7a01 	vldmdb	r3!, {s14}
 8018056:	3c01      	subs	r4, #1
 8018058:	ee77 7a87 	vadd.f32	s15, s15, s14
 801805c:	e7f1      	b.n	8018042 <__kernel_rem_pio2f+0x446>
 801805e:	ed73 7a01 	vldmdb	r3!, {s15}
 8018062:	3a01      	subs	r2, #1
 8018064:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018068:	e7d2      	b.n	8018010 <__kernel_rem_pio2f+0x414>
 801806a:	eef0 7a47 	vmov.f32	s15, s14
 801806e:	e7d4      	b.n	801801a <__kernel_rem_pio2f+0x41e>
 8018070:	ecb2 7a01 	vldmia	r2!, {s14}
 8018074:	3301      	adds	r3, #1
 8018076:	ee77 7a87 	vadd.f32	s15, s15, s14
 801807a:	e7d6      	b.n	801802a <__kernel_rem_pio2f+0x42e>
 801807c:	edd2 7a00 	vldr	s15, [r2]
 8018080:	edd2 6a01 	vldr	s13, [r2, #4]
 8018084:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018088:	3801      	subs	r0, #1
 801808a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801808e:	ed82 7a00 	vstr	s14, [r2]
 8018092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018096:	edc2 7a01 	vstr	s15, [r2, #4]
 801809a:	e798      	b.n	8017fce <__kernel_rem_pio2f+0x3d2>
 801809c:	edd3 7a00 	vldr	s15, [r3]
 80180a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80180a4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80180a8:	3a01      	subs	r2, #1
 80180aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80180ae:	ed83 7a00 	vstr	s14, [r3]
 80180b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80180b6:	edc3 7a01 	vstr	s15, [r3, #4]
 80180ba:	e78d      	b.n	8017fd8 <__kernel_rem_pio2f+0x3dc>
 80180bc:	ed33 7a01 	vldmdb	r3!, {s14}
 80180c0:	3c01      	subs	r4, #1
 80180c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80180c6:	e78f      	b.n	8017fe8 <__kernel_rem_pio2f+0x3ec>
 80180c8:	eef1 6a66 	vneg.f32	s13, s13
 80180cc:	eeb1 7a47 	vneg.f32	s14, s14
 80180d0:	edc7 6a00 	vstr	s13, [r7]
 80180d4:	ed87 7a01 	vstr	s14, [r7, #4]
 80180d8:	eef1 7a67 	vneg.f32	s15, s15
 80180dc:	e790      	b.n	8018000 <__kernel_rem_pio2f+0x404>
 80180de:	bf00      	nop

080180e0 <floorf>:
 80180e0:	ee10 3a10 	vmov	r3, s0
 80180e4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80180e8:	3a7f      	subs	r2, #127	@ 0x7f
 80180ea:	2a16      	cmp	r2, #22
 80180ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80180f0:	dc2b      	bgt.n	801814a <floorf+0x6a>
 80180f2:	2a00      	cmp	r2, #0
 80180f4:	da12      	bge.n	801811c <floorf+0x3c>
 80180f6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801815c <floorf+0x7c>
 80180fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80180fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018106:	dd06      	ble.n	8018116 <floorf+0x36>
 8018108:	2b00      	cmp	r3, #0
 801810a:	da24      	bge.n	8018156 <floorf+0x76>
 801810c:	2900      	cmp	r1, #0
 801810e:	4b14      	ldr	r3, [pc, #80]	@ (8018160 <floorf+0x80>)
 8018110:	bf08      	it	eq
 8018112:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8018116:	ee00 3a10 	vmov	s0, r3
 801811a:	4770      	bx	lr
 801811c:	4911      	ldr	r1, [pc, #68]	@ (8018164 <floorf+0x84>)
 801811e:	4111      	asrs	r1, r2
 8018120:	420b      	tst	r3, r1
 8018122:	d0fa      	beq.n	801811a <floorf+0x3a>
 8018124:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801815c <floorf+0x7c>
 8018128:	ee30 0a27 	vadd.f32	s0, s0, s15
 801812c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018134:	ddef      	ble.n	8018116 <floorf+0x36>
 8018136:	2b00      	cmp	r3, #0
 8018138:	bfbe      	ittt	lt
 801813a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801813e:	fa40 f202 	asrlt.w	r2, r0, r2
 8018142:	189b      	addlt	r3, r3, r2
 8018144:	ea23 0301 	bic.w	r3, r3, r1
 8018148:	e7e5      	b.n	8018116 <floorf+0x36>
 801814a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801814e:	d3e4      	bcc.n	801811a <floorf+0x3a>
 8018150:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018154:	4770      	bx	lr
 8018156:	2300      	movs	r3, #0
 8018158:	e7dd      	b.n	8018116 <floorf+0x36>
 801815a:	bf00      	nop
 801815c:	7149f2ca 	.word	0x7149f2ca
 8018160:	bf800000 	.word	0xbf800000
 8018164:	007fffff 	.word	0x007fffff

08018168 <_init>:
 8018168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801816a:	bf00      	nop
 801816c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801816e:	bc08      	pop	{r3}
 8018170:	469e      	mov	lr, r3
 8018172:	4770      	bx	lr

08018174 <_fini>:
 8018174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018176:	bf00      	nop
 8018178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801817a:	bc08      	pop	{r3}
 801817c:	469e      	mov	lr, r3
 801817e:	4770      	bx	lr
